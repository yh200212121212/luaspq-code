; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07PANPENDC@running?$AA@			; `string'
PUBLIC	??_C@_06HBNONAG@create?$AA@			; `string'
PUBLIC	??_C@_06PLELHCEK@resume?$AA@			; `string'
PUBLIC	??_C@_06DJIHEMFI@status?$AA@			; `string'
PUBLIC	??_C@_04NFDDIEML@wrap?$AA@			; `string'
PUBLIC	??_C@_05LKJGIMLP@yield?$AA@			; `string'
PUBLIC	??_C@_0M@IHMPMLIH@isyieldable?$AA@		; `string'
;	COMDAT ??_C@_0M@IHMPMLIH@isyieldable?$AA@
CONST	SEGMENT
??_C@_0M@IHMPMLIH@isyieldable?$AA@ DB 'isyieldable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LKJGIMLP@yield?$AA@
CONST	SEGMENT
??_C@_05LKJGIMLP@yield?$AA@ DB 'yield', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NFDDIEML@wrap?$AA@
CONST	SEGMENT
??_C@_04NFDDIEML@wrap?$AA@ DB 'wrap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJIHEMFI@status?$AA@
CONST	SEGMENT
??_C@_06DJIHEMFI@status?$AA@ DB 'status', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PLELHCEK@resume?$AA@
CONST	SEGMENT
??_C@_06PLELHCEK@resume?$AA@ DB 'resume', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBNONAG@create?$AA@
CONST	SEGMENT
??_C@_06HBNONAG@create?$AA@ DB 'create', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_co_funcs DD	FLAT:??_C@_06HBNONAG@create?$AA@
	DD	FLAT:_luaB_cocreate
	DD	FLAT:??_C@_06PLELHCEK@resume?$AA@
	DD	FLAT:_luaB_coresume
	DD	FLAT:??_C@_07PANPENDC@running?$AA@
	DD	FLAT:_luaB_corunning
	DD	FLAT:??_C@_06DJIHEMFI@status?$AA@
	DD	FLAT:_luaB_costatus
	DD	FLAT:??_C@_04NFDDIEML@wrap?$AA@
	DD	FLAT:_luaB_cowrap
	DD	FLAT:??_C@_05LKJGIMLP@yield?$AA@
	DD	FLAT:_luaB_yield
	DD	FLAT:??_C@_0M@IHMPMLIH@isyieldable?$AA@
	DD	FLAT:_luaB_yieldable
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_C@_07PANPENDC@running?$AA@
CONST	SEGMENT
??_C@_07PANPENDC@running?$AA@ DB 'running', 00H		; `string'
CONST	ENDS
PUBLIC	_luaopen_coroutine
PUBLIC	??_C@_0BA@DJIMIHMK@thread?5expected?$AA@	; `string'
PUBLIC	??_C@_0BN@CLPLGDGN@too?5many?5arguments?5to?5resume?$AA@ ; `string'
PUBLIC	??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@ ; `string'
PUBLIC	??_C@_0BL@OALEJBKN@too?5many?5results?5to?5resume?$AA@ ; `string'
PUBLIC	??_C@_09PAHKPJCJ@suspended?$AA@			; `string'
PUBLIC	??_C@_06IKLLLDHL@normal?$AA@			; `string'
PUBLIC	??_C@_04BBBDNBOK@dead?$AA@			; `string'
PUBLIC	__real@405bc00000000000
EXTRN	_lua_newthread:PROC
EXTRN	_lua_gettop:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_rotate:PROC
EXTRN	_lua_checkstack:PROC
EXTRN	_lua_xmove:PROC
EXTRN	_lua_isstring:PROC
EXTRN	_lua_tothread:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_pushcclosure:PROC
EXTRN	_lua_pushboolean:PROC
EXTRN	_lua_pushthread:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_yieldk:PROC
EXTRN	_lua_resume:PROC
EXTRN	_lua_status:PROC
EXTRN	_lua_isyieldable:PROC
EXTRN	_lua_error:PROC
EXTRN	_lua_concat:PROC
EXTRN	_lua_getstack:PROC
EXTRN	_luaL_checkversion_:PROC
EXTRN	_luaL_argerror:PROC
EXTRN	_luaL_checktype:PROC
EXTRN	_luaL_where:PROC
EXTRN	_luaL_setfuncs:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_04BBBDNBOK@dead?$AA@
CONST	SEGMENT
??_C@_04BBBDNBOK@dead?$AA@ DB 'dead', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKLLLDHL@normal?$AA@
CONST	SEGMENT
??_C@_06IKLLLDHL@normal?$AA@ DB 'normal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PAHKPJCJ@suspended?$AA@
CONST	SEGMENT
??_C@_09PAHKPJCJ@suspended?$AA@ DB 'suspended', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OALEJBKN@too?5many?5results?5to?5resume?$AA@
CONST	SEGMENT
??_C@_0BL@OALEJBKN@too?5many?5results?5to?5resume?$AA@ DB 'too many resul'
	DB	'ts to resume', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@
CONST	SEGMENT
??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@ DB 'cannot resume'
	DB	' dead coroutine', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CLPLGDGN@too?5many?5arguments?5to?5resume?$AA@
CONST	SEGMENT
??_C@_0BN@CLPLGDGN@too?5many?5arguments?5to?5resume?$AA@ DB 'too many arg'
	DB	'uments to resume', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DJIMIHMK@thread?5expected?$AA@
CONST	SEGMENT
??_C@_0BA@DJIMIHMK@thread?5expected?$AA@ DB 'thread expected', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_corunning
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_corunning PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 144
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 145
  00003	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00006	e8 00 00 00 00	 call	 _lua_pushthread
; Line 146
  0000b	50		 push	 eax
  0000c	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000f	e8 00 00 00 00	 call	 _lua_pushboolean
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 147
  00017	b8 02 00 00 00	 mov	 eax, 2
; Line 148
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_luaB_corunning ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_yieldable
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_yieldable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 138
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 139
  00003	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00006	e8 00 00 00 00	 call	 _lua_isyieldable
  0000b	50		 push	 eax
  0000c	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000f	e8 00 00 00 00	 call	 _lua_pushboolean
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 140
  00017	b8 01 00 00 00	 mov	 eax, 1
; Line 141
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_luaB_yieldable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_costatus
_TEXT	SEGMENT
_ar$1 = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_luaB_costatus PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 111
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00014	57		 push	 edi
; Line 112
  00015	6a 01		 push	 1
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 _lua_tothread
  0001d	8b f8		 mov	 edi, eax
  0001f	83 c4 08	 add	 esp, 8
  00022	85 ff		 test	 edi, edi
  00024	75 10		 jne	 SHORT $LN16@luaB_costa
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DJIMIHMK@thread?5expected?$AA@
  0002b	6a 01		 push	 1
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 _luaL_argerror
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@luaB_costa:
; Line 113
  00036	3b f7		 cmp	 esi, edi
  00038	75 07		 jne	 SHORT $LN11@luaB_costa
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_07PANPENDC@running?$AA@
; Line 114
  0003f	eb 44		 jmp	 SHORT $LN17@luaB_costa
$LN11@luaB_costa:
; Line 115
  00041	57		 push	 edi
  00042	e8 00 00 00 00	 call	 _lua_status
  00047	83 c4 04	 add	 esp, 4
  0004a	83 e8 00	 sub	 eax, 0
  0004d	74 0a		 je	 SHORT $LN6@luaB_costa
  0004f	48		 dec	 eax
  00050	74 2e		 je	 SHORT $LN3@luaB_costa
$LN18@luaB_costa:
; Line 130
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_04BBBDNBOK@dead?$AA@
; Line 131
  00057	eb 2c		 jmp	 SHORT $LN17@luaB_costa
$LN6@luaB_costa:
; Line 121
  00059	8d 45 98	 lea	 eax, DWORD PTR _ar$1[ebp]
  0005c	50		 push	 eax
  0005d	6a 00		 push	 0
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 _lua_getstack
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
  00068	85 c0		 test	 eax, eax
  0006a	7e 07		 jle	 SHORT $LN5@luaB_costa
; Line 122
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_06IKLLLDHL@normal?$AA@
  00071	eb 12		 jmp	 SHORT $LN17@luaB_costa
$LN5@luaB_costa:
; Line 123
  00073	57		 push	 edi
  00074	e8 00 00 00 00	 call	 _lua_gettop
  00079	83 c4 04	 add	 esp, 4
  0007c	85 c0		 test	 eax, eax
  0007e	74 d2		 je	 SHORT $LN18@luaB_costa
$LN3@luaB_costa:
; Line 126
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_09PAHKPJCJ@suspended?$AA@
$LN17@luaB_costa:
  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 _lua_pushstring
; Line 135
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008e	83 c4 08	 add	 esp, 8
  00091	33 cd		 xor	 ecx, ebp
  00093	b8 01 00 00 00	 mov	 eax, 1
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_luaB_costatus ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_yield
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_yield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 106
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 107
  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000a	e8 00 00 00 00	 call	 _lua_gettop
  0000f	83 c4 04	 add	 esp, 4
  00012	50		 push	 eax
  00013	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00016	e8 00 00 00 00	 call	 _lua_yieldk
  0001b	83 c4 10	 add	 esp, 16			; 00000010H
; Line 108
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_luaB_yield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_cowrap
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_cowrap PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 99
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 100
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	6a 06		 push	 6
  0000a	6a 01		 push	 1
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _luaL_checktype
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 _lua_newthread
  00018	6a 01		 push	 1
  0001a	57		 push	 edi
  0001b	8b f0		 mov	 esi, eax
  0001d	e8 00 00 00 00	 call	 _lua_pushvalue
  00022	6a 01		 push	 1
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 _lua_xmove
; Line 101
  0002b	6a 01		 push	 1
  0002d	68 00 00 00 00	 push	 OFFSET _luaB_auxwrap
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 _lua_pushcclosure
  00038	83 c4 30	 add	 esp, 48			; 00000030H
; Line 102
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
; Line 103
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_luaB_cowrap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_cocreate
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_cocreate PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 89
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 91
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	6a 06		 push	 6
  0000a	6a 01		 push	 1
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _luaL_checktype
; Line 92
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 _lua_newthread
; Line 93
  00018	6a 01		 push	 1
  0001a	57		 push	 edi
  0001b	8b f0		 mov	 esi, eax
  0001d	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 94
  00022	6a 01		 push	 1
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 _lua_xmove
  0002b	83 c4 24	 add	 esp, 36			; 00000024H
; Line 95
  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
; Line 96
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_luaB_cocreate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_auxwrap
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_auxwrap PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 74
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 75
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	68 d7 b9 f0 ff	 push	 -1001001		; fff0b9d7H
  0000d	57		 push	 edi
  0000e	e8 00 00 00 00	 call	 _lua_tothread
; Line 76
  00013	57		 push	 edi
  00014	8b f0		 mov	 esi, eax
  00016	e8 00 00 00 00	 call	 _lua_gettop
  0001b	50		 push	 eax
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 _auxresume
  00023	83 c4 18	 add	 esp, 24			; 00000018H
; Line 77
  00026	85 c0		 test	 eax, eax
  00028	79 35		 jns	 SHORT $LN3@luaB_auxwr
; Line 78
  0002a	6a ff		 push	 -1
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 _lua_isstring
  00032	83 c4 08	 add	 esp, 8
  00035	85 c0		 test	 eax, eax
  00037	74 1d		 je	 SHORT $LN1@luaB_auxwr
; Line 79
  00039	6a 01		 push	 1
  0003b	57		 push	 edi
  0003c	e8 00 00 00 00	 call	 _luaL_where
; Line 80
  00041	6a 01		 push	 1
  00043	6a fe		 push	 -2			; fffffffeH
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 _lua_rotate
; Line 81
  0004b	6a 02		 push	 2
  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 _lua_concat
  00053	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1@luaB_auxwr:
; Line 83
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 _lua_error
  0005c	83 c4 04	 add	 esp, 4
$LN3@luaB_auxwr:
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
; Line 86
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_luaB_auxwrap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_coresume
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_coresume PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 57
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 58
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	6a 01		 push	 1
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _lua_tothread
  00010	8b f8		 mov	 edi, eax
  00012	83 c4 08	 add	 esp, 8
  00015	85 ff		 test	 edi, edi
  00017	75 10		 jne	 SHORT $LN7@luaB_cores
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DJIMIHMK@thread?5expected?$AA@
  0001e	6a 01		 push	 1
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 _luaL_argerror
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@luaB_cores:
; Line 60
  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 _lua_gettop
  0002f	48		 dec	 eax
  00030	50		 push	 eax
  00031	57		 push	 edi
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 _auxresume
  00038	8b f8		 mov	 edi, eax
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
; Line 61
  0003d	85 ff		 test	 edi, edi
  0003f	79 1e		 jns	 SHORT $LN2@luaB_cores
; Line 62
  00041	6a 00		 push	 0
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _lua_pushboolean
; Line 63
  00049	6a 01		 push	 1
  0004b	6a fe		 push	 -2			; fffffffeH
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 _lua_rotate
; Line 68
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	b8 02 00 00 00	 mov	 eax, 2
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
; Line 71
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN2@luaB_cores:
; Line 67
  0005f	6a 01		 push	 1
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _lua_pushboolean
; Line 68
  00067	83 c8 ff	 or	 eax, -1
  0006a	6a 01		 push	 1
  0006c	2b c7		 sub	 eax, edi
  0006e	50		 push	 eax
  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 _lua_rotate
  00075	83 c4 14	 add	 esp, 20			; 00000014H
; Line 69
  00078	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
; Line 71
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_luaB_coresume ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _auxresume
_TEXT	SEGMENT
_L$ = 8							; size = 4
_co$ = 12						; size = 4
_narg$ = 16						; size = 4
_auxresume PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 28
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 30
  00004	8b 5d 10	 mov	 ebx, DWORD PTR _narg$[ebp]
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR _co$[ebp]
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _lua_checkstack
  00012	83 c4 08	 add	 esp, 8
  00015	85 c0		 test	 eax, eax
  00017	75 17		 jne	 SHORT $LN6@auxresume
; Line 31
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CLPLGDGN@too?5many?5arguments?5to?5resume?$AA@
  0001e	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00021	e8 00 00 00 00	 call	 _lua_pushstring
  00026	83 c4 08	 add	 esp, 8
; Line 32
  00029	83 c8 ff	 or	 eax, -1
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
; Line 54
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN6@auxresume:
; Line 34
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _lua_status
  00036	83 c4 04	 add	 esp, 4
  00039	85 c0		 test	 eax, eax
  0003b	75 24		 jne	 SHORT $LN5@auxresume
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _lua_gettop
  00043	83 c4 04	 add	 esp, 4
  00046	85 c0		 test	 eax, eax
  00048	75 17		 jne	 SHORT $LN5@auxresume
; Line 35
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@
  0004f	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00052	e8 00 00 00 00	 call	 _lua_pushstring
  00057	83 c4 08	 add	 esp, 8
; Line 36
  0005a	83 c8 ff	 or	 eax, -1
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
; Line 54
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN5@auxresume:
  00061	57		 push	 edi
; Line 38
  00062	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00065	53		 push	 ebx
  00066	56		 push	 esi
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 _lua_xmove
; Line 39
  0006d	53		 push	 ebx
  0006e	57		 push	 edi
  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 _lua_resume
  00075	83 c4 18	 add	 esp, 24			; 00000018H
; Line 40
  00078	85 c0		 test	 eax, eax
  0007a	74 19		 je	 SHORT $LN3@auxresume
  0007c	83 f8 01	 cmp	 eax, 1
  0007f	74 14		 je	 SHORT $LN3@auxresume
; Line 51
  00081	6a 01		 push	 1
  00083	57		 push	 edi
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 _lua_xmove
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 52
  0008d	83 c8 ff	 or	 eax, -1
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
; Line 54
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
$LN3@auxresume:
; Line 41
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 _lua_gettop
  0009b	8b d8		 mov	 ebx, eax
; Line 42
  0009d	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  000a0	51		 push	 ecx
  000a1	57		 push	 edi
  000a2	e8 00 00 00 00	 call	 _lua_checkstack
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000aa	85 c0		 test	 eax, eax
  000ac	75 22		 jne	 SHORT $LN2@auxresume
; Line 43
  000ae	83 c9 ff	 or	 ecx, -1
  000b1	2b cb		 sub	 ecx, ebx
  000b3	51		 push	 ecx
  000b4	56		 push	 esi
  000b5	e8 00 00 00 00	 call	 _lua_settop
; Line 44
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OALEJBKN@too?5many?5results?5to?5resume?$AA@
  000bf	57		 push	 edi
  000c0	e8 00 00 00 00	 call	 _lua_pushstring
  000c5	83 c4 10	 add	 esp, 16			; 00000010H
; Line 45
  000c8	83 c8 ff	 or	 eax, -1
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
; Line 54
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
$LN2@auxresume:
; Line 47
  000d0	53		 push	 ebx
  000d1	57		 push	 edi
  000d2	56		 push	 esi
  000d3	e8 00 00 00 00	 call	 _lua_xmove
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 48
  000db	8b c3		 mov	 eax, ebx
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
; Line 54
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
_auxresume ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getco
_TEXT	SEGMENT
_L$ = 8							; size = 4
_getco	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 21
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 22
  00004	6a 01		 push	 1
  00006	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00009	e8 00 00 00 00	 call	 _lua_tothread
  0000e	8b f0		 mov	 esi, eax
  00010	83 c4 08	 add	 esp, 8
; Line 23
  00013	85 f6		 test	 esi, esi
  00015	75 14		 jne	 SHORT $LN3@getco
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DJIMIHMK@thread?5expected?$AA@
  0001c	6a 01		 push	 1
  0001e	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00021	e8 00 00 00 00	 call	 _luaL_argerror
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 24
  00029	8b c6		 mov	 eax, esi
$LN3@getco:
  0002b	5e		 pop	 esi
; Line 25
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_getco	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaopen_coroutine
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaopen_coroutine PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 164
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 165
  00003	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405bc00000000000
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000f	68 88 00 00 00	 push	 136			; 00000088H
  00014	83 ec 08	 sub	 esp, 8
  00017	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _luaL_checkversion_
  00022	6a 07		 push	 7
  00024	6a 00		 push	 0
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _lua_createtable
  0002c	6a 00		 push	 0
  0002e	68 00 00 00 00	 push	 OFFSET _co_funcs
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _luaL_setfuncs
  00039	83 c4 28	 add	 esp, 40			; 00000028H
; Line 166
  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	5e		 pop	 esi
; Line 167
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_luaopen_coroutine ENDP
_TEXT	ENDS
END
