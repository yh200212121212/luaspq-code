; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_luaO_nilobject_
CONST	SEGMENT
_luaO_nilobject_ DD 00H
	ORG $+4
	DD	00H
	ORG $+4
?log_2@?1??luaO_ceillog2@@9@9 DB 00H			; `luaO_ceillog2'::`2'::log_2
	DB	01H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
CONST	ENDS
PUBLIC	_luaO_int2fb
PUBLIC	_luaO_fb2int
PUBLIC	_luaO_utf8esc
PUBLIC	_luaO_ceillog2
PUBLIC	_luaO_arith
PUBLIC	_luaO_str2num
PUBLIC	_luaO_hexavalue
PUBLIC	_luaO_tostring
PUBLIC	_luaO_pushvfstring
PUBLIC	_luaO_pushfstring
PUBLIC	_luaO_chunkid
PUBLIC	??_C@_02CMANKCEM@nN?$AA@			; `string'
PUBLIC	??_C@_02CIDOMIFJ@xX?$AA@			; `string'
PUBLIC	??_C@_04BFAHMMK@?$CFlld?$AA@			; `string'
PUBLIC	??_C@_05CGOEHEFE@?$CF?414g?$AA@			; `string'
PUBLIC	??_C@_0M@MJJAFOKF@?90123456789?$AA@		; `string'
PUBLIC	??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@		; `string'
PUBLIC	??_C@_05FJJBJMMN@?$DM?2?$CFd?$DO?$AA@		; `string'
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	??_C@_01FGNFDNOH@?$CF?$AA@			; `string'
PUBLIC	??_C@_0CL@FANIKJON@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8lua_pu@ ; `string'
PUBLIC	??_C@_03KHICJKCI@?4?4?4?$AA@			; `string'
PUBLIC	??_C@_09PHLFBDIK@?$FLstring?5?$CC?$AA@		; `string'
PUBLIC	??_C@_02DEGCJHHK@?$CC?$FN?$AA@			; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__imp__localeconv:PROC
EXTRN	__imp___snprintf:PROC
EXTRN	__imp__strtod:PROC
EXTRN	__imp__strchr:PROC
EXTRN	__imp__strpbrk:PROC
EXTRN	__imp__strspn:PROC
EXTRN	_luaT_trybinTM:PROC
EXTRN	_luaG_runerror:PROC
EXTRN	_luaD_growstack:PROC
EXTRN	_luaD_inctop:PROC
EXTRN	_luaS_newlstr:PROC
EXTRN	_luaV_tonumber_:PROC
EXTRN	_luaV_tointeger:PROC
EXTRN	_luaV_concat:PROC
EXTRN	_luaV_div:PROC
EXTRN	_luaV_mod:PROC
EXTRN	_luaV_shiftl:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIfmod:PROC
EXTRN	__allmul:PROC
EXTRN	__libm_sse2_pow_precise:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_luai_ctype_:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_02DEGCJHHK@?$CC?$FN?$AA@
CONST	SEGMENT
??_C@_02DEGCJHHK@?$CC?$FN?$AA@ DB '"]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHLFBDIK@?$FLstring?5?$CC?$AA@
CONST	SEGMENT
??_C@_09PHLFBDIK@?$FLstring?5?$CC?$AA@ DB '[string "', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHICJKCI@?4?4?4?$AA@
CONST	SEGMENT
??_C@_03KHICJKCI@?4?4?4?$AA@ DB '...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FANIKJON@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8lua_pu@
CONST	SEGMENT
??_C@_0CL@FANIKJON@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8lua_pu@ DB 'i'
	DB	'nvalid option ''%%%c'' to ''lua_pushfstring''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01FGNFDNOH@?$CF?$AA@
CONST	SEGMENT
??_C@_01FGNFDNOH@?$CF?$AA@ DB '%', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FJJBJMMN@?$DM?2?$CFd?$DO?$AA@
CONST	SEGMENT
??_C@_05FJJBJMMN@?$DM?2?$CFd?$DO?$AA@ DB '<\%d>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@
CONST	SEGMENT
??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@ DB '(null)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MJJAFOKF@?90123456789?$AA@
CONST	SEGMENT
??_C@_0M@MJJAFOKF@?90123456789?$AA@ DB '-0123456789', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CGOEHEFE@?$CF?414g?$AA@
CONST	SEGMENT
??_C@_05CGOEHEFE@?$CF?414g?$AA@ DB '%.14g', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFAHMMK@?$CFlld?$AA@
CONST	SEGMENT
??_C@_04BFAHMMK@?$CFlld?$AA@ DB '%lld', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CIDOMIFJ@xX?$AA@
CONST	SEGMENT
??_C@_02CIDOMIFJ@xX?$AA@ DB 'xX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CMANKCEM@nN?$AA@
CONST	SEGMENT
??_C@_02CMANKCEM@nN?$AA@ DB 'nN', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _pushstr
_TEXT	SEGMENT
_L$ = 8							; size = 4
_str$ = 12						; size = 4
_l$ = 16						; size = 4
_pushstr PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 348
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 349
  00005	ff 75 10	 push	 DWORD PTR _l$[ebp]
  00008	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _str$[ebp]
  0000e	57		 push	 edi
  0000f	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00012	e8 00 00 00 00	 call	 _luaS_newlstr
  00017	89 06		 mov	 DWORD PTR [esi], eax
; Line 350
  00019	57		 push	 edi
  0001a	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0001e	83 c8 40	 or	 eax, 64			; 00000040H
  00021	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00024	e8 00 00 00 00	 call	 _luaD_inctop
  00029	83 c4 10	 add	 esp, 16			; 00000010H
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
; Line 351
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_pushstr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _l_str2int
_TEXT	SEGMENT
_a$ = -12						; size = 8
_empty$1$ = -4						; size = 4
_neg$1$ = 8						; size = 4
_s$ = 8							; size = 4
_result$ = 12						; size = 4
_l_str2int PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 260
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; Line 264
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	66 0f 13 45 f4	 movlpd	 QWORD PTR _a$[ebp], xmm0
  00011	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00014	f6 80 01 00 00
	00 08		 test	 BYTE PTR _luai_ctype_[eax+1], 8
  0001b	74 11		 je	 SHORT $LN15@l_str2int
  0001d	8d 49 00	 npad	 3
$LL16@l_str2int:
  00020	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  00024	41		 inc	 ecx
  00025	f6 80 01 00 00
	00 08		 test	 BYTE PTR _luai_ctype_[eax+1], 8
  0002c	75 f2		 jne	 SHORT $LL16@l_str2int
$LN15@l_str2int:
; Line 265
  0002e	8a 01		 mov	 al, BYTE PTR [ecx]
  00030	3c 2d		 cmp	 al, 45			; 0000002dH
  00032	75 0a		 jne	 SHORT $LN23@l_str2int
  00034	41		 inc	 ecx
  00035	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _neg$1$[ebp], 1
  0003c	eb 0c		 jmp	 SHORT $LN24@l_str2int
$LN23@l_str2int:
  0003e	3c 2b		 cmp	 al, 43			; 0000002bH
  00040	75 01		 jne	 SHORT $LN21@l_str2int
  00042	41		 inc	 ecx
$LN21@l_str2int:
  00043	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _neg$1$[ebp], 0
$LN24@l_str2int:
; Line 267
  0004a	53		 push	 ebx
  0004b	8a 19		 mov	 bl, BYTE PTR [ecx]
  0004d	56		 push	 esi
  0004e	57		 push	 edi
  0004f	80 fb 30	 cmp	 bl, 48			; 00000030H
  00052	75 61		 jne	 SHORT $LN14@l_str2int
  00054	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00057	3c 78		 cmp	 al, 120			; 00000078H
  00059	74 04		 je	 SHORT $LN13@l_str2int
  0005b	3c 58		 cmp	 al, 88			; 00000058H
  0005d	75 56		 jne	 SHORT $LN14@l_str2int
$LN13@l_str2int:
; Line 269
  0005f	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  00062	83 c1 02	 add	 ecx, 2
  00065	0f b6 c2	 movzx	 eax, dl
  00068	f6 80 01 00 00
	00 10		 test	 BYTE PTR _luai_ctype_[eax+1], 16 ; 00000010H
  0006f	0f 84 93 00 00
	00		 je	 $LN46@l_str2int
; Line 271
  00075	8b 7d f8	 mov	 edi, DWORD PTR _a$[ebp+4]
  00078	33 db		 xor	 ebx, ebx
  0007a	8b 75 f4	 mov	 esi, DWORD PTR _a$[ebp]
  0007d	8d 49 00	 npad	 3
$LL12@l_str2int:
; Line 270
  00080	0f be c2	 movsx	 eax, dl
  00083	f6 80 01 00 00
	00 02		 test	 BYTE PTR _luai_ctype_[eax+1], 2
  0008a	74 05		 je	 SHORT $LN27@l_str2int
  0008c	83 c0 d0	 add	 eax, -48		; ffffffd0H
  0008f	eb 06		 jmp	 SHORT $LN26@l_str2int
$LN27@l_str2int:
  00091	83 c8 20	 or	 eax, 32			; 00000020H
  00094	83 e8 57	 sub	 eax, 87			; 00000057H
$LN26@l_str2int:
  00097	0f a4 f7 04	 shld	 edi, esi, 4
  0009b	99		 cdq
  0009c	c1 e6 04	 shl	 esi, 4
  0009f	03 f0		 add	 esi, eax
  000a1	13 fa		 adc	 edi, edx
  000a3	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  000a6	41		 inc	 ecx
  000a7	0f b6 c2	 movzx	 eax, dl
  000aa	f6 80 01 00 00
	00 10		 test	 BYTE PTR _luai_ctype_[eax+1], 16 ; 00000010H
  000b1	75 cd		 jne	 SHORT $LL12@l_str2int
; Line 274
  000b3	eb 5e		 jmp	 SHORT $LN33@l_str2int
$LN14@l_str2int:
; Line 275
  000b5	0f b6 c3	 movzx	 eax, bl
  000b8	f6 80 01 00 00
	00 02		 test	 BYTE PTR _luai_ctype_[eax+1], 2
  000bf	74 47		 je	 SHORT $LN46@l_str2int
; Line 277
  000c1	8b 7d f8	 mov	 edi, DWORD PTR _a$[ebp+4]
  000c4	33 c0		 xor	 eax, eax
  000c6	8b 75 f4	 mov	 esi, DWORD PTR _a$[ebp]
  000c9	89 45 fc	 mov	 DWORD PTR _empty$1$[ebp], eax
  000cc	8d 64 24 00	 npad	 4
$LL8@l_str2int:
; Line 276
  000d0	8b c6		 mov	 eax, esi
  000d2	8b d7		 mov	 edx, edi
  000d4	0f a4 c2 02	 shld	 edx, eax, 2
  000d8	c1 e0 02	 shl	 eax, 2
  000db	03 f0		 add	 esi, eax
  000dd	0f be c3	 movsx	 eax, bl
  000e0	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  000e3	13 fa		 adc	 edi, edx
  000e5	99		 cdq
  000e6	0f a4 f7 01	 shld	 edi, esi, 1
  000ea	03 f6		 add	 esi, esi
  000ec	03 f0		 add	 esi, eax
  000ee	0f b6 c3	 movzx	 eax, bl
  000f1	13 fa		 adc	 edi, edx
  000f3	83 c6 d0	 add	 esi, -48		; ffffffd0H
  000f6	83 d7 ff	 adc	 edi, -1
  000f9	41		 inc	 ecx
  000fa	f6 80 01 00 00
	00 02		 test	 BYTE PTR _luai_ctype_[eax+1], 2
  00101	75 cd		 jne	 SHORT $LL8@l_str2int
  00103	8b 5d fc	 mov	 ebx, DWORD PTR _empty$1$[ebp]
  00106	eb 0b		 jmp	 SHORT $LN33@l_str2int
$LN46@l_str2int:
; Line 275
  00108	8b 7d f8	 mov	 edi, DWORD PTR _a$[ebp+4]
  0010b	bb 01 00 00 00	 mov	 ebx, 1
  00110	8b 75 f4	 mov	 esi, DWORD PTR _a$[ebp]
$LN33@l_str2int:
; Line 280
  00113	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00116	f6 80 01 00 00
	00 08		 test	 BYTE PTR _luai_ctype_[eax+1], 8
  0011d	74 0f		 je	 SHORT $LN4@l_str2int
  0011f	90		 npad	 1
$LL5@l_str2int:
  00120	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  00124	41		 inc	 ecx
  00125	f6 80 01 00 00
	00 08		 test	 BYTE PTR _luai_ctype_[eax+1], 8
  0012c	75 f2		 jne	 SHORT $LL5@l_str2int
$LN4@l_str2int:
; Line 281
  0012e	85 db		 test	 ebx, ebx
  00130	75 20		 jne	 SHORT $LN2@l_str2int
  00132	38 19		 cmp	 BYTE PTR [ecx], bl
  00134	75 1c		 jne	 SHORT $LN2@l_str2int
; Line 283
  00136	39 5d 08	 cmp	 DWORD PTR _neg$1$[ebp], ebx
  00139	74 06		 je	 SHORT $LN19@l_str2int
  0013b	f7 de		 neg	 esi
  0013d	13 fb		 adc	 edi, ebx
  0013f	f7 df		 neg	 edi
$LN19@l_str2int:
  00141	8b 55 0c	 mov	 edx, DWORD PTR _result$[ebp]
; Line 284
  00144	8b c1		 mov	 eax, ecx
  00146	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  00149	5f		 pop	 edi
  0014a	89 32		 mov	 DWORD PTR [edx], esi
  0014c	5e		 pop	 esi
  0014d	5b		 pop	 ebx
; Line 286
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c3		 ret	 0
$LN2@l_str2int:
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
; Line 281
  00154	33 c0		 xor	 eax, eax
  00156	5b		 pop	 ebx
; Line 286
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c3		 ret	 0
_l_str2int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _l_str2d
_TEXT	SEGMENT
_endptr$ = -4						; size = 4
_s$ = 8							; size = 4
_result$ = 12						; size = 4
_l_str2d PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 246
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
; Line 248
  00005	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_02CMANKCEM@nN?$AA@
  0000d	56		 push	 esi
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strpbrk
  00014	83 c4 08	 add	 esp, 8
  00017	85 c0		 test	 eax, eax
  00019	74 07		 je	 SHORT $LN7@l_str2d
$LN14@l_str2d:
; Line 249
  0001b	33 c0		 xor	 eax, eax
  0001d	5e		 pop	 esi
; Line 257
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN7@l_str2d:
; Line 250
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_02CIDOMIFJ@xX?$AA@
  00027	56		 push	 esi
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strpbrk
  0002e	83 c4 08	 add	 esp, 8
  00031	85 c0		 test	 eax, eax
; Line 251
  00033	8d 45 fc	 lea	 eax, DWORD PTR _endptr$[ebp]
  00036	50		 push	 eax
  00037	56		 push	 esi
; Line 253
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtod
  0003e	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  00041	83 c4 08	 add	 esp, 8
; Line 254
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _endptr$[ebp]
  00047	dd 18		 fstp	 QWORD PTR [eax]
  00049	3b ce		 cmp	 ecx, esi
  0004b	74 ce		 je	 SHORT $LN14@l_str2d
; Line 255
  0004d	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00050	f6 80 01 00 00
	00 08		 test	 BYTE PTR _luai_ctype_[eax+1], 8
  00057	74 17		 je	 SHORT $LN1@l_str2d
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL2@l_str2d:
  00060	41		 inc	 ecx
  00061	89 4d fc	 mov	 DWORD PTR _endptr$[ebp], ecx
  00064	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00067	f6 80 01 00 00
	00 08		 test	 BYTE PTR _luai_ctype_[eax+1], 8
  0006e	75 f0		 jne	 SHORT $LL2@l_str2d
$LN1@l_str2d:
; Line 256
  00070	33 c0		 xor	 eax, eax
  00072	38 01		 cmp	 BYTE PTR [ecx], al
  00074	5e		 pop	 esi
  00075	0f 44 c1	 cmove	 eax, ecx
; Line 257
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_l_str2d ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _isneg
_TEXT	SEGMENT
_s$ = 8							; size = 4
_isneg	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 169
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 170
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8a 10		 mov	 dl, BYTE PTR [eax]
  0000a	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  0000d	75 0a		 jne	 SHORT $LN3@isneg
  0000f	40		 inc	 eax
  00010	89 01		 mov	 DWORD PTR [ecx], eax
  00012	b8 01 00 00 00	 mov	 eax, 1
; Line 173
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN3@isneg:
; Line 171
  00019	80 fa 2b	 cmp	 dl, 43			; 0000002bH
  0001c	75 03		 jne	 SHORT $LN1@isneg
  0001e	40		 inc	 eax
  0001f	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@isneg:
; Line 172
  00021	33 c0		 xor	 eax, eax
; Line 173
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_isneg	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _numarith
_TEXT	SEGMENT
tv163 = -8						; size = 8
tv159 = -8						; size = 8
tv155 = -8						; size = 8
tv151 = -8						; size = 8
tv147 = -8						; size = 8
tv143 = -8						; size = 8
tv133 = -8						; size = 8
_m$1 = -8						; size = 8
_L$ = 8							; size = 4
_op$ = 12						; size = 4
_v1$ = 16						; size = 8
_v2$ = 24						; size = 8
_numarith PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 104
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 105
  00003	8b 45 0c	 mov	 eax, DWORD PTR _op$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0000c	0f 87 f2 00 00
	00		 ja	 $LN1@numarith
  00012	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN19@numarith[eax*4]
$LN10@numarith:
; Line 106
  00019	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _v1$[ebp]
  0001e	f2 0f 58 45 18	 addsd	 xmm0, QWORD PTR _v2$[ebp]
  00023	f2 0f 11 45 f8	 movsd	 QWORD PTR tv163[ebp], xmm0
  00028	dd 45 f8	 fld	 QWORD PTR tv163[ebp]
; Line 120
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN9@numarith:
; Line 107
  0002f	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _v1$[ebp]
  00034	f2 0f 5c 45 18	 subsd	 xmm0, QWORD PTR _v2$[ebp]
  00039	f2 0f 11 45 f8	 movsd	 QWORD PTR tv159[ebp], xmm0
  0003e	dd 45 f8	 fld	 QWORD PTR tv159[ebp]
; Line 120
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN8@numarith:
; Line 108
  00045	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _v1$[ebp]
  0004a	f2 0f 59 45 18	 mulsd	 xmm0, QWORD PTR _v2$[ebp]
  0004f	f2 0f 11 45 f8	 movsd	 QWORD PTR tv155[ebp], xmm0
  00054	dd 45 f8	 fld	 QWORD PTR tv155[ebp]
; Line 120
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN7@numarith:
; Line 109
  0005b	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _v1$[ebp]
  00060	f2 0f 5e 45 18	 divsd	 xmm0, QWORD PTR _v2$[ebp]
  00065	f2 0f 11 45 f8	 movsd	 QWORD PTR tv151[ebp], xmm0
  0006a	dd 45 f8	 fld	 QWORD PTR tv151[ebp]
; Line 120
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
$LN6@numarith:
; Line 110
  00071	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _v1$[ebp]
  00076	f2 0f 10 4d 18	 movsd	 xmm1, QWORD PTR _v2$[ebp]
  0007b	e8 00 00 00 00	 call	 __libm_sse2_pow_precise
  00080	f2 0f 11 45 f8	 movsd	 QWORD PTR tv147[ebp], xmm0
  00085	dd 45 f8	 fld	 QWORD PTR tv147[ebp]
; Line 120
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
$LN5@numarith:
; Line 111
  0008c	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _v1$[ebp]
  00091	83 ec 08	 sub	 esp, 8
  00094	f2 0f 5e 45 18	 divsd	 xmm0, QWORD PTR _v2$[ebp]
  00099	f2 0f 11 45 f8	 movsd	 QWORD PTR tv143[ebp], xmm0
  0009e	dd 45 f8	 fld	 QWORD PTR tv143[ebp]
  000a1	dd 1c 24	 fstp	 QWORD PTR [esp]
  000a4	e8 00 00 00 00	 call	 _floor
  000a9	83 c4 08	 add	 esp, 8
; Line 120
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
$LN4@numarith:
; Line 112
  000b0	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _v1$[ebp]
  000b5	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  000bd	f2 0f 11 45 f8	 movsd	 QWORD PTR tv133[ebp], xmm0
  000c2	dd 45 f8	 fld	 QWORD PTR tv133[ebp]
; Line 120
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
$LN3@numarith:
; Line 115
  000c9	dd 45 10	 fld	 QWORD PTR _v1$[ebp]
  000cc	dd 45 18	 fld	 QWORD PTR _v2$[ebp]
  000cf	e8 00 00 00 00	 call	 __CIfmod
  000d4	f2 0f 10 5d 18	 movsd	 xmm3, QWORD PTR _v2$[ebp]
  000d9	0f 57 c0	 xorps	 xmm0, xmm0
  000dc	dd 55 f8	 fst	 QWORD PTR _m$1[ebp]
  000df	f2 0f 10 55 f8	 movsd	 xmm2, QWORD PTR _m$1[ebp]
  000e4	66 0f 28 ca	 movapd	 xmm1, xmm2
  000e8	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  000ec	66 0f 2f c1	 comisd	 xmm0, xmm1
  000f0	76 14		 jbe	 SHORT $LN11@numarith
  000f2	f2 0f 58 d3	 addsd	 xmm2, xmm3
  000f6	dd d8		 fstp	 ST(0)
  000f8	f2 0f 11 55 f8	 movsd	 QWORD PTR _m$1[ebp], xmm2
  000fd	dd 45 f8	 fld	 QWORD PTR _m$1[ebp]
; Line 120
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
$LN1@numarith:
; Line 118
  00104	d9 ee		 fldz
$LN11@numarith:
; Line 120
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
  0010a	8b ff		 npad	 2
$LN19@numarith:
  0010c	00 00 00 00	 DD	 $LN10@numarith
  00110	00 00 00 00	 DD	 $LN9@numarith
  00114	00 00 00 00	 DD	 $LN8@numarith
  00118	00 00 00 00	 DD	 $LN3@numarith
  0011c	00 00 00 00	 DD	 $LN6@numarith
  00120	00 00 00 00	 DD	 $LN7@numarith
  00124	00 00 00 00	 DD	 $LN5@numarith
  00128	00 00 00 00	 DD	 $LN1@numarith
  0012c	00 00 00 00	 DD	 $LN1@numarith
  00130	00 00 00 00	 DD	 $LN1@numarith
  00134	00 00 00 00	 DD	 $LN1@numarith
  00138	00 00 00 00	 DD	 $LN1@numarith
  0013c	00 00 00 00	 DD	 $LN4@numarith
_numarith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _intarith
_TEXT	SEGMENT
_L$ = 8							; size = 4
_op$ = 12						; size = 4
_v1$ = 16						; size = 8
_v2$ = 24						; size = 8
_intarith PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 84
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 85
  00003	8b 45 0c	 mov	 eax, DWORD PTR _op$[ebp]
  00006	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00009	0f 87 e2 00 00
	00		 ja	 $LN1@intarith
  0000f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN19@intarith[eax*4]
$LN13@intarith:
; Line 86
  00016	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp]
  00019	03 45 18	 add	 eax, DWORD PTR _v2$[ebp]
  0001c	8b 55 14	 mov	 edx, DWORD PTR _v1$[ebp+4]
  0001f	13 55 1c	 adc	 edx, DWORD PTR _v2$[ebp+4]
; Line 100
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN12@intarith:
; Line 87
  00024	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp]
  00027	2b 45 18	 sub	 eax, DWORD PTR _v2$[ebp]
  0002a	8b 55 14	 mov	 edx, DWORD PTR _v1$[ebp+4]
  0002d	1b 55 1c	 sbb	 edx, DWORD PTR _v2$[ebp+4]
; Line 100
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN11@intarith:
; Line 88
  00032	ff 75 1c	 push	 DWORD PTR _v2$[ebp+4]
  00035	ff 75 18	 push	 DWORD PTR _v2$[ebp]
  00038	ff 75 14	 push	 DWORD PTR _v1$[ebp+4]
  0003b	ff 75 10	 push	 DWORD PTR _v1$[ebp]
  0003e	e8 00 00 00 00	 call	 __allmul
; Line 100
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN10@intarith:
; Line 89
  00045	ff 75 1c	 push	 DWORD PTR _v2$[ebp+4]
  00048	ff 75 18	 push	 DWORD PTR _v2$[ebp]
  0004b	ff 75 14	 push	 DWORD PTR _v1$[ebp+4]
  0004e	ff 75 10	 push	 DWORD PTR _v1$[ebp]
  00051	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00054	e8 00 00 00 00	 call	 _luaV_mod
  00059	83 c4 14	 add	 esp, 20			; 00000014H
; Line 100
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN9@intarith:
; Line 90
  0005e	ff 75 1c	 push	 DWORD PTR _v2$[ebp+4]
  00061	ff 75 18	 push	 DWORD PTR _v2$[ebp]
  00064	ff 75 14	 push	 DWORD PTR _v1$[ebp+4]
  00067	ff 75 10	 push	 DWORD PTR _v1$[ebp]
  0006a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0006d	e8 00 00 00 00	 call	 _luaV_div
  00072	83 c4 14	 add	 esp, 20			; 00000014H
; Line 100
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
$LN8@intarith:
; Line 91
  00077	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp]
  0007a	8b 55 14	 mov	 edx, DWORD PTR _v1$[ebp+4]
  0007d	23 45 18	 and	 eax, DWORD PTR _v2$[ebp]
  00080	23 55 1c	 and	 edx, DWORD PTR _v2$[ebp+4]
; Line 100
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN7@intarith:
; Line 92
  00085	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp]
  00088	8b 55 14	 mov	 edx, DWORD PTR _v1$[ebp+4]
  0008b	0b 45 18	 or	 eax, DWORD PTR _v2$[ebp]
  0008e	0b 55 1c	 or	 edx, DWORD PTR _v2$[ebp+4]
; Line 100
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN6@intarith:
; Line 93
  00093	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp]
  00096	8b 55 14	 mov	 edx, DWORD PTR _v1$[ebp+4]
  00099	33 45 18	 xor	 eax, DWORD PTR _v2$[ebp]
  0009c	33 55 1c	 xor	 edx, DWORD PTR _v2$[ebp+4]
; Line 100
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
$LN5@intarith:
; Line 94
  000a1	ff 75 1c	 push	 DWORD PTR _v2$[ebp+4]
  000a4	ff 75 18	 push	 DWORD PTR _v2$[ebp]
  000a7	ff 75 14	 push	 DWORD PTR _v1$[ebp+4]
  000aa	ff 75 10	 push	 DWORD PTR _v1$[ebp]
  000ad	e8 00 00 00 00	 call	 _luaV_shiftl
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
; Line 100
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
$LN4@intarith:
; Line 95
  000b7	8b 4d 18	 mov	 ecx, DWORD PTR _v2$[ebp]
  000ba	8b 45 1c	 mov	 eax, DWORD PTR _v2$[ebp+4]
  000bd	f7 d9		 neg	 ecx
  000bf	83 d0 00	 adc	 eax, 0
  000c2	f7 d8		 neg	 eax
  000c4	50		 push	 eax
  000c5	51		 push	 ecx
  000c6	ff 75 14	 push	 DWORD PTR _v1$[ebp+4]
  000c9	ff 75 10	 push	 DWORD PTR _v1$[ebp]
  000cc	e8 00 00 00 00	 call	 _luaV_shiftl
  000d1	83 c4 10	 add	 esp, 16			; 00000010H
; Line 100
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
$LN3@intarith:
; Line 96
  000d6	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp]
  000d9	8b 55 14	 mov	 edx, DWORD PTR _v1$[ebp+4]
  000dc	f7 d8		 neg	 eax
  000de	83 d2 00	 adc	 edx, 0
  000e1	f7 da		 neg	 edx
; Line 100
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
$LN2@intarith:
; Line 97
  000e5	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp]
  000e8	8b 55 14	 mov	 edx, DWORD PTR _v1$[ebp+4]
  000eb	f7 d0		 not	 eax
  000ed	f7 d2		 not	 edx
; Line 100
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
$LN1@intarith:
; Line 98
  000f1	33 c0		 xor	 eax, eax
  000f3	33 d2		 xor	 edx, edx
; Line 100
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
  000f7	90		 npad	 1
$LN19@intarith:
  000f8	00 00 00 00	 DD	 $LN13@intarith
  000fc	00 00 00 00	 DD	 $LN12@intarith
  00100	00 00 00 00	 DD	 $LN11@intarith
  00104	00 00 00 00	 DD	 $LN10@intarith
  00108	00 00 00 00	 DD	 $LN1@intarith
  0010c	00 00 00 00	 DD	 $LN1@intarith
  00110	00 00 00 00	 DD	 $LN9@intarith
  00114	00 00 00 00	 DD	 $LN8@intarith
  00118	00 00 00 00	 DD	 $LN7@intarith
  0011c	00 00 00 00	 DD	 $LN6@intarith
  00120	00 00 00 00	 DD	 $LN5@intarith
  00124	00 00 00 00	 DD	 $LN4@intarith
  00128	00 00 00 00	 DD	 $LN3@intarith
  0012c	00 00 00 00	 DD	 $LN2@intarith
_intarith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaO_chunkid
_TEXT	SEGMENT
_out$ = 8						; size = 4
_source$ = 12						; size = 4
_bufflen$ = 16						; size = 4
_luaO_chunkid PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 442
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 443
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _source$[ebp]
  00007	56		 push	 esi
  00008	8b f3		 mov	 esi, ebx
  0000a	57		 push	 edi
  0000b	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0000e	8b ff		 npad	 2
$LL16@luaO_chunk:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL16@luaO_chunk
; Line 444
  00017	8a 03		 mov	 al, BYTE PTR [ebx]
  00019	2b f1		 sub	 esi, ecx
  0001b	3c 3d		 cmp	 al, 61			; 0000003dH
  0001d	75 3a		 jne	 SHORT $LN12@luaO_chunk
; Line 445
  0001f	8b 7d 10	 mov	 edi, DWORD PTR _bufflen$[ebp]
  00022	3b f7		 cmp	 esi, edi
  00024	77 15		 ja	 SHORT $LN11@luaO_chunk
$LN17@luaO_chunk:
; Line 446
  00026	56		 push	 esi
  00027	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0002a	50		 push	 eax
  0002b	ff 75 08	 push	 DWORD PTR _out$[ebp]
  0002e	e8 00 00 00 00	 call	 _memcpy
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
; Line 476
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN11@luaO_chunk:
; Line 448
  0003b	8b 75 08	 mov	 esi, DWORD PTR _out$[ebp]
  0003e	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00041	50		 push	 eax
  00042	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00045	50		 push	 eax
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 _memcpy
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 449
  0004f	c6 44 3e ff 00	 mov	 BYTE PTR [esi+edi-1], 0
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
; Line 476
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN12@luaO_chunk:
; Line 452
  00059	3c 40		 cmp	 al, 64			; 00000040H
  0005b	75 38		 jne	 SHORT $LN8@luaO_chunk
; Line 453
  0005d	8b 55 10	 mov	 edx, DWORD PTR _bufflen$[ebp]
  00060	3b f2		 cmp	 esi, edx
  00062	76 c2		 jbe	 SHORT $LN17@luaO_chunk
; Line 456
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _out$[ebp]
; Line 457
  00067	83 ea 03	 sub	 edx, 3
  0006a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03KHICJKCI@?4?4?4?$AA@
; Line 458
  00070	2b f2		 sub	 esi, edx
  00072	52		 push	 edx
  00073	66 89 01	 mov	 WORD PTR [ecx], ax
  00076	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03KHICJKCI@?4?4?4?$AA@+2
  0007b	88 41 02	 mov	 BYTE PTR [ecx+2], al
  0007e	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00081	03 c6		 add	 eax, esi
  00083	50		 push	 eax
  00084	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _memcpy
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
; Line 476
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
$LN8@luaO_chunk:
; Line 462
  00095	6a 0a		 push	 10			; 0000000aH
  00097	53		 push	 ebx
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
; Line 463
  0009e	8b 7d 08	 mov	 edi, DWORD PTR _out$[ebp]
  000a1	83 c4 08	 add	 esp, 8
  000a4	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_09PHLFBDIK@?$FLstring?5?$CC?$AA@
  000ac	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  000b0	8a 0d 08 00 00
	00		 mov	 cl, BYTE PTR ??_C@_09PHLFBDIK@?$FLstring?5?$CC?$AA@+8
  000b6	88 4f 08	 mov	 BYTE PTR [edi+8], cl
  000b9	83 c7 09	 add	 edi, 9
; Line 464
  000bc	8b 4d 10	 mov	 ecx, DWORD PTR _bufflen$[ebp]
  000bf	83 e9 0f	 sub	 ecx, 15			; 0000000fH
; Line 465
  000c2	3b f1		 cmp	 esi, ecx
  000c4	73 13		 jae	 SHORT $LN4@luaO_chunk
  000c6	85 c0		 test	 eax, eax
  000c8	75 13		 jne	 SHORT $LN15@luaO_chunk
; Line 466
  000ca	56		 push	 esi
  000cb	53		 push	 ebx
  000cc	57		 push	 edi
  000cd	e8 00 00 00 00	 call	 _memcpy
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d5	03 fe		 add	 edi, esi
; Line 468
  000d7	eb 2e		 jmp	 SHORT $LN3@luaO_chunk
$LN4@luaO_chunk:
; Line 469
  000d9	85 c0		 test	 eax, eax
  000db	74 04		 je	 SHORT $LN2@luaO_chunk
$LN15@luaO_chunk:
  000dd	8b f0		 mov	 esi, eax
  000df	2b f3		 sub	 esi, ebx
$LN2@luaO_chunk:
; Line 470
  000e1	3b f1		 cmp	 esi, ecx
  000e3	0f 47 f1	 cmova	 esi, ecx
; Line 471
  000e6	56		 push	 esi
  000e7	53		 push	 ebx
  000e8	57		 push	 edi
  000e9	e8 00 00 00 00	 call	 _memcpy
; Line 472
  000ee	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03KHICJKCI@?4?4?4?$AA@
  000f4	03 fe		 add	 edi, esi
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	66 89 07	 mov	 WORD PTR [edi], ax
  000fc	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03KHICJKCI@?4?4?4?$AA@+2
  00101	88 47 02	 mov	 BYTE PTR [edi+2], al
  00104	83 c7 03	 add	 edi, 3
$LN3@luaO_chunk:
; Line 474
  00107	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02DEGCJHHK@?$CC?$FN?$AA@
  0010d	66 89 07	 mov	 WORD PTR [edi], ax
  00110	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_02DEGCJHHK@?$CC?$FN?$AA@+2
  00115	88 47 02	 mov	 BYTE PTR [edi+2], al
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
; Line 476
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
_luaO_chunkid ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaO_pushfstring
_TEXT	SEGMENT
_L$ = 8							; size = 4
_fmt$ = 12						; size = 4
_luaO_pushfstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 423
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 427
  00003	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR _fmt$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000d	e8 00 00 00 00	 call	 _luaO_pushvfstring
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 430
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_luaO_pushfstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaO_pushvfstring
_TEXT	SEGMENT
_n$1$ = -56						; size = 4
_e$1$ = -52						; size = 4
_buff$1 = -45						; size = 1
tv554 = -44						; size = 4
tv555 = -40						; size = 4
_buff$2 = -36						; size = 24
_buff$3 = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_fmt$ = 12						; size = 4
_argp$ = 16						; size = 4
_luaO_pushvfstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 356
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _fmt$[ebp]
  00014	56		 push	 esi
  00015	8b 75 10	 mov	 esi, DWORD PTR _argp$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
; Line 359
  0001c	6a 25		 push	 37			; 00000025H
  0001e	53		 push	 ebx
  0001f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _n$1$[ebp], 0
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  0002c	8b d0		 mov	 edx, eax
  0002e	83 c4 08	 add	 esp, 8
  00031	89 55 cc	 mov	 DWORD PTR _e$1$[ebp], edx
; Line 360
  00034	85 d2		 test	 edx, edx
  00036	0f 84 04 02 00
	00		 je	 $LN38@luaO_pushv
  0003c	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0003f	8d 4e f8	 lea	 ecx, DWORD PTR [esi-8]
  00042	89 45 d8	 mov	 DWORD PTR tv555[ebp], eax
  00045	89 4d d4	 mov	 DWORD PTR tv554[ebp], ecx
$LL20@luaO_pushv:
; Line 361
  00048	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  0004b	8b c2		 mov	 eax, edx
  0004d	2b c3		 sub	 eax, ebx
  0004f	50		 push	 eax
  00050	53		 push	 ebx
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 _luaS_newlstr
  00057	89 06		 mov	 DWORD PTR [esi], eax
  00059	57		 push	 edi
  0005a	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0005e	83 c8 40	 or	 eax, 64			; 00000040H
  00061	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00064	e8 00 00 00 00	 call	 _luaD_inctop
; Line 362
  00069	8b 5d cc	 mov	 ebx, DWORD PTR _e$1$[ebp]
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	0f be 43 01	 movsx	 eax, BYTE PTR [ebx+1]
  00073	83 c0 db	 add	 eax, -37		; ffffffdbH
  00076	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  00079	0f 87 36 02 00
	00		 ja	 $LN48@luaO_pushv
  0007f	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN42@luaO_pushv[eax]
  00086	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN49@luaO_pushv[eax*4]
$LN15@luaO_pushv:
; Line 364
  0008d	8b 45 d8	 mov	 eax, DWORD PTR tv555[ebp]
; Line 365
  00090	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@
  00095	83 45 d4 04	 add	 DWORD PTR tv554[ebp], 4
  00099	83 c0 04	 add	 eax, 4
  0009c	89 45 d8	 mov	 DWORD PTR tv555[ebp], eax
  0009f	8b 00		 mov	 eax, DWORD PTR [eax]
  000a1	85 c0		 test	 eax, eax
  000a3	0f 45 d0	 cmovne	 edx, eax
; Line 366
  000a6	8b ca		 mov	 ecx, edx
  000a8	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  000ab	eb 03 8d 49 00	 npad	 5
$LL43@luaO_pushv:
  000b0	8a 01		 mov	 al, BYTE PTR [ecx]
  000b2	41		 inc	 ecx
  000b3	84 c0		 test	 al, al
  000b5	75 f9		 jne	 SHORT $LL43@luaO_pushv
  000b7	2b ce		 sub	 ecx, esi
  000b9	51		 push	 ecx
  000ba	52		 push	 edx
; Line 367
  000bb	e9 42 01 00 00	 jmp	 $LN46@luaO_pushv
$LN13@luaO_pushv:
; Line 370
  000c0	8b 75 d8	 mov	 esi, DWORD PTR tv555[ebp]
  000c3	83 45 d4 04	 add	 DWORD PTR tv554[ebp], 4
  000c7	83 c6 04	 add	 esi, 4
  000ca	89 75 d8	 mov	 DWORD PTR tv555[ebp], esi
  000cd	8a 06		 mov	 al, BYTE PTR [esi]
  000cf	88 45 d3	 mov	 BYTE PTR _buff$1[ebp], al
; Line 371
  000d2	0f b6 c0	 movzx	 eax, al
  000d5	f6 80 01 00 00
	00 04		 test	 BYTE PTR _luai_ctype_[eax+1], 4
  000dc	74 0b		 je	 SHORT $LN12@luaO_pushv
; Line 372
  000de	6a 01		 push	 1
  000e0	8d 45 d3	 lea	 eax, DWORD PTR _buff$1[ebp]
  000e3	50		 push	 eax
; Line 373
  000e4	e9 19 01 00 00	 jmp	 $LN46@luaO_pushv
$LN12@luaO_pushv:
; Line 374
  000e9	50		 push	 eax
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_05FJJBJMMN@?$DM?2?$CFd?$DO?$AA@
  000ef	57		 push	 edi
  000f0	e8 00 00 00 00	 call	 _luaO_pushfstring
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 375
  000f8	e9 23 01 00 00	 jmp	 $LN16@luaO_pushv
$LN10@luaO_pushv:
; Line 378
  000fd	8b 5d d8	 mov	 ebx, DWORD PTR tv555[ebp]
  00100	83 45 d4 04	 add	 DWORD PTR tv554[ebp], 4
  00104	83 c3 04	 add	 ebx, 4
  00107	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0010a	89 5d d8	 mov	 DWORD PTR tv555[ebp], ebx
  0010d	8b 03		 mov	 eax, DWORD PTR [ebx]
; Line 379
  0010f	8b 5d cc	 mov	 ebx, DWORD PTR _e$1$[ebp]
  00112	99		 cdq
  00113	89 01		 mov	 DWORD PTR [ecx], eax
  00115	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00118	c7 41 08 13 00
	00 00		 mov	 DWORD PTR [ecx+8], 19	; 00000013H
  0011f	eb 3b		 jmp	 SHORT $top2str$51
$LN9@luaO_pushv:
; Line 382
  00121	8b 75 d4	 mov	 esi, DWORD PTR tv554[ebp]
  00124	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00127	83 c6 08	 add	 esi, 8
  0012a	8b 06		 mov	 eax, DWORD PTR [esi]
  0012c	89 01		 mov	 DWORD PTR [ecx], eax
  0012e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00131	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00134	c7 41 08 13 00
	00 00		 mov	 DWORD PTR [ecx+8], 19	; 00000013H
; Line 383
  0013b	eb 18		 jmp	 SHORT $LN47@luaO_pushv
$LN8@luaO_pushv:
; Line 386
  0013d	8b 75 d4	 mov	 esi, DWORD PTR tv554[ebp]
  00140	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00143	83 c6 08	 add	 esi, 8
  00146	f2 0f 10 06	 movsd	 xmm0, QWORD PTR [esi]
  0014a	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  0014e	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [eax+8], 3
$LN47@luaO_pushv:
  00155	83 45 d8 08	 add	 DWORD PTR tv555[ebp], 8
  00159	89 75 d4	 mov	 DWORD PTR tv554[ebp], esi
$top2str$51:
; Line 388
  0015c	57		 push	 edi
  0015d	e8 00 00 00 00	 call	 _luaD_inctop
; Line 389
  00162	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00165	83 e8 10	 sub	 eax, 16			; 00000010H
  00168	50		 push	 eax
  00169	57		 push	 edi
  0016a	e8 00 00 00 00	 call	 _luaO_tostring
  0016f	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 390
  00172	e9 a9 00 00 00	 jmp	 $LN16@luaO_pushv
$LN7@luaO_pushv:
; Line 394
  00177	8b 45 d8	 mov	 eax, DWORD PTR tv555[ebp]
  0017a	83 45 d4 04	 add	 DWORD PTR tv554[ebp], 4
  0017e	83 c0 04	 add	 eax, 4
  00181	89 45 d8	 mov	 DWORD PTR tv555[ebp], eax
  00184	ff 30		 push	 DWORD PTR [eax]
  00186	8d 45 dc	 lea	 eax, DWORD PTR _buff$2[ebp]
  00189	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  0018e	6a 18		 push	 24			; 00000018H
  00190	50		 push	 eax
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
; Line 395
  00197	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  0019a	50		 push	 eax
  0019b	8d 45 dc	 lea	 eax, DWORD PTR _buff$2[ebp]
  0019e	50		 push	 eax
  0019f	57		 push	 edi
  001a0	e8 00 00 00 00	 call	 _luaS_newlstr
  001a5	89 06		 mov	 DWORD PTR [esi], eax
  001a7	57		 push	 edi
  001a8	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  001ac	83 c8 40	 or	 eax, 64			; 00000040H
  001af	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001b2	e8 00 00 00 00	 call	 _luaD_inctop
  001b7	83 c4 20	 add	 esp, 32			; 00000020H
; Line 396
  001ba	eb 64		 jmp	 SHORT $LN16@luaO_pushv
$LN6@luaO_pushv:
; Line 400
  001bc	8b 45 d8	 mov	 eax, DWORD PTR tv555[ebp]
  001bf	83 45 d4 04	 add	 DWORD PTR tv554[ebp], 4
  001c3	83 c0 04	 add	 eax, 4
  001c6	89 45 d8	 mov	 DWORD PTR tv555[ebp], eax
  001c9	ff 30		 push	 DWORD PTR [eax]
  001cb	8d 45 f4	 lea	 eax, DWORD PTR _buff$3[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 _luaO_utf8esc
; Line 401
  001d4	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  001d7	8d 4d fc	 lea	 ecx, DWORD PTR _buff$3[ebp+8]
  001da	50		 push	 eax
  001db	2b c8		 sub	 ecx, eax
  001dd	51		 push	 ecx
  001de	57		 push	 edi
  001df	e8 00 00 00 00	 call	 _luaS_newlstr
  001e4	89 06		 mov	 DWORD PTR [esi], eax
  001e6	57		 push	 edi
  001e7	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  001eb	83 c8 40	 or	 eax, 64			; 00000040H
  001ee	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001f1	e8 00 00 00 00	 call	 _luaD_inctop
  001f6	83 c4 18	 add	 esp, 24			; 00000018H
; Line 402
  001f9	eb 25		 jmp	 SHORT $LN16@luaO_pushv
$LN5@luaO_pushv:
; Line 405
  001fb	6a 01		 push	 1
  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_01FGNFDNOH@?$CF?$AA@
$LN46@luaO_pushv:
  00202	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00205	57		 push	 edi
  00206	e8 00 00 00 00	 call	 _luaS_newlstr
  0020b	89 06		 mov	 DWORD PTR [esi], eax
  0020d	57		 push	 edi
  0020e	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  00212	83 c8 40	 or	 eax, 64			; 00000040H
  00215	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00218	e8 00 00 00 00	 call	 _luaD_inctop
  0021d	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@luaO_pushv:
; Line 413
  00220	83 45 c8 02	 add	 DWORD PTR _n$1$[ebp], 2
; Line 414
  00224	83 c3 02	 add	 ebx, 2
  00227	6a 25		 push	 37			; 00000025H
  00229	53		 push	 ebx
  0022a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00230	8b d0		 mov	 edx, eax
  00232	89 45 cc	 mov	 DWORD PTR _e$1$[ebp], eax
  00235	83 c4 08	 add	 esp, 8
  00238	85 d2		 test	 edx, edx
  0023a	0f 85 08 fe ff
	ff		 jne	 $LL20@luaO_pushv
$LN38@luaO_pushv:
; Line 416
  00240	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00243	2b 47 0c	 sub	 eax, DWORD PTR [edi+12]
  00246	83 e0 f0	 and	 eax, -16		; fffffff0H
  00249	83 f8 10	 cmp	 eax, 16			; 00000010H
  0024c	7f 0b		 jg	 SHORT $LN3@luaO_pushv
  0024e	6a 01		 push	 1
  00250	57		 push	 edi
  00251	e8 00 00 00 00	 call	 _luaD_growstack
  00256	83 c4 08	 add	 esp, 8
$LN3@luaO_pushv:
; Line 417
  00259	8b cb		 mov	 ecx, ebx
  0025b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0025e	8b ff		 npad	 2
$LL44@luaO_pushv:
  00260	8a 01		 mov	 al, BYTE PTR [ecx]
  00262	41		 inc	 ecx
  00263	84 c0		 test	 al, al
  00265	75 f9		 jne	 SHORT $LL44@luaO_pushv
  00267	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  0026a	2b ca		 sub	 ecx, edx
  0026c	51		 push	 ecx
  0026d	53		 push	 ebx
  0026e	57		 push	 edi
  0026f	e8 00 00 00 00	 call	 _luaS_newlstr
  00274	89 06		 mov	 DWORD PTR [esi], eax
  00276	57		 push	 edi
  00277	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0027b	83 c8 40	 or	 eax, 64			; 00000040H
  0027e	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00281	e8 00 00 00 00	 call	 _luaD_inctop
; Line 418
  00286	8b 45 c8	 mov	 eax, DWORD PTR _n$1$[ebp]
  00289	83 c4 10	 add	 esp, 16			; 00000010H
  0028c	85 c0		 test	 eax, eax
  0028e	7e 0b		 jle	 SHORT $LN1@luaO_pushv
  00290	40		 inc	 eax
  00291	50		 push	 eax
  00292	57		 push	 edi
  00293	e8 00 00 00 00	 call	 _luaV_concat
  00298	83 c4 08	 add	 esp, 8
$LN1@luaO_pushv:
; Line 419
  0029b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; Line 420
  0029e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a1	5f		 pop	 edi
  002a2	5e		 pop	 esi
  002a3	8b 40 f0	 mov	 eax, DWORD PTR [eax-16]
  002a6	33 cd		 xor	 ecx, ebp
  002a8	83 c0 10	 add	 eax, 16			; 00000010H
  002ab	5b		 pop	 ebx
  002ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b1	8b e5		 mov	 esp, ebp
  002b3	5d		 pop	 ebp
  002b4	c3		 ret	 0
$LN48@luaO_pushv:
; Line 410
  002b5	0f be 43 01	 movsx	 eax, BYTE PTR [ebx+1]
  002b9	50		 push	 eax
  002ba	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@FANIKJON@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8lua_pu@
  002bf	57		 push	 edi
  002c0	e8 00 00 00 00	 call	 _luaG_runerror
$LN50@luaO_pushv:
$LN45@luaO_pushv:
  002c5	8d 49 00	 npad	 3
$LN49@luaO_pushv:
; Line 420
  002c8	00 00 00 00	 DD	 $LN5@luaO_pushv
  002cc	00 00 00 00	 DD	 $LN9@luaO_pushv
  002d0	00 00 00 00	 DD	 $LN6@luaO_pushv
  002d4	00 00 00 00	 DD	 $LN13@luaO_pushv
  002d8	00 00 00 00	 DD	 $LN10@luaO_pushv
  002dc	00 00 00 00	 DD	 $LN8@luaO_pushv
  002e0	00 00 00 00	 DD	 $LN7@luaO_pushv
  002e4	00 00 00 00	 DD	 $LN15@luaO_pushv
  002e8	00 00 00 00	 DD	 $LN48@luaO_pushv
$LN42@luaO_pushv:
  002ec	00		 DB	 0
  002ed	08		 DB	 8
  002ee	08		 DB	 8
  002ef	08		 DB	 8
  002f0	08		 DB	 8
  002f1	08		 DB	 8
  002f2	08		 DB	 8
  002f3	08		 DB	 8
  002f4	08		 DB	 8
  002f5	08		 DB	 8
  002f6	08		 DB	 8
  002f7	08		 DB	 8
  002f8	08		 DB	 8
  002f9	08		 DB	 8
  002fa	08		 DB	 8
  002fb	08		 DB	 8
  002fc	08		 DB	 8
  002fd	08		 DB	 8
  002fe	08		 DB	 8
  002ff	08		 DB	 8
  00300	08		 DB	 8
  00301	08		 DB	 8
  00302	08		 DB	 8
  00303	08		 DB	 8
  00304	08		 DB	 8
  00305	08		 DB	 8
  00306	08		 DB	 8
  00307	08		 DB	 8
  00308	08		 DB	 8
  00309	08		 DB	 8
  0030a	08		 DB	 8
  0030b	08		 DB	 8
  0030c	08		 DB	 8
  0030d	08		 DB	 8
  0030e	08		 DB	 8
  0030f	08		 DB	 8
  00310	01		 DB	 1
  00311	08		 DB	 8
  00312	08		 DB	 8
  00313	08		 DB	 8
  00314	08		 DB	 8
  00315	08		 DB	 8
  00316	08		 DB	 8
  00317	08		 DB	 8
  00318	08		 DB	 8
  00319	08		 DB	 8
  0031a	08		 DB	 8
  0031b	08		 DB	 8
  0031c	02		 DB	 2
  0031d	08		 DB	 8
  0031e	08		 DB	 8
  0031f	08		 DB	 8
  00320	08		 DB	 8
  00321	08		 DB	 8
  00322	08		 DB	 8
  00323	08		 DB	 8
  00324	08		 DB	 8
  00325	08		 DB	 8
  00326	08		 DB	 8
  00327	08		 DB	 8
  00328	08		 DB	 8
  00329	08		 DB	 8
  0032a	03		 DB	 3
  0032b	04		 DB	 4
  0032c	08		 DB	 8
  0032d	05		 DB	 5
  0032e	08		 DB	 8
  0032f	08		 DB	 8
  00330	08		 DB	 8
  00331	08		 DB	 8
  00332	08		 DB	 8
  00333	08		 DB	 8
  00334	08		 DB	 8
  00335	08		 DB	 8
  00336	08		 DB	 8
  00337	06		 DB	 6
  00338	08		 DB	 8
  00339	08		 DB	 8
  0033a	07		 DB	 7
_luaO_pushvfstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaO_tostring
_TEXT	SEGMENT
_buff$ = -56						; size = 50
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_obj$ = 12						; size = 4
_luaO_tostring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 329
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
; Line 334
  00014	8d 45 c8	 lea	 eax, DWORD PTR _buff$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 0c	 mov	 edi, DWORD PTR _obj$[ebp]
  0001c	83 7f 08 13	 cmp	 DWORD PTR [edi+8], 19	; 00000013H
  00020	75 1a		 jne	 SHORT $LN3@luaO_tostr
  00022	ff 77 04	 push	 DWORD PTR [edi+4]
  00025	ff 37		 push	 DWORD PTR [edi]
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_04BFAHMMK@?$CFlld?$AA@
  0002c	6a 32		 push	 50			; 00000032H
  0002e	50		 push	 eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
  00035	83 c4 14	 add	 esp, 20			; 00000014H
  00038	8b f0		 mov	 esi, eax
; Line 335
  0003a	eb 4b		 jmp	 SHORT $LN1@luaO_tostr
$LN3@luaO_tostr:
; Line 336
  0003c	f2 0f 10 07	 movsd	 xmm0, QWORD PTR [edi]
  00040	83 ec 08	 sub	 esp, 8
  00043	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_05CGOEHEFE@?$CF?414g?$AA@
  0004d	6a 32		 push	 50			; 00000032H
  0004f	50		 push	 eax
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
  00056	8b f0		 mov	 esi, eax
; Line 338
  00058	8d 45 c8	 lea	 eax, DWORD PTR _buff$[ebp]
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MJJAFOKF@?90123456789?$AA@
  00060	50		 push	 eax
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strspn
  00067	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006a	80 7c 05 c8 00	 cmp	 BYTE PTR _buff$[ebp+eax], 0
  0006f	75 16		 jne	 SHORT $LN1@luaO_tostr
; Line 339
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__localeconv
  00077	8b 00		 mov	 eax, DWORD PTR [eax]
  00079	8a 00		 mov	 al, BYTE PTR [eax]
  0007b	88 44 35 c8	 mov	 BYTE PTR _buff$[ebp+esi], al
; Line 340
  0007f	c6 44 35 c9 30	 mov	 BYTE PTR _buff$[ebp+esi+1], 48 ; 00000030H
  00084	83 c6 02	 add	 esi, 2
$LN1@luaO_tostr:
; Line 344
  00087	56		 push	 esi
  00088	8d 45 c8	 lea	 eax, DWORD PTR _buff$[ebp]
  0008b	50		 push	 eax
  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 _luaS_newlstr
; Line 345
  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
  00098	89 07		 mov	 DWORD PTR [edi], eax
  0009a	33 cd		 xor	 ecx, ebp
  0009c	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  000a0	83 c8 40	 or	 eax, 64			; 00000040H
  000a3	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_luaO_tostring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaO_hexavalue
_TEXT	SEGMENT
_c$ = 8							; size = 4
_luaO_hexavalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 163
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 164
  00003	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  00006	f6 80 01 00 00
	00 02		 test	 BYTE PTR _luai_ctype_[eax+1], 2
  0000d	74 05		 je	 SHORT $LN2@luaO_hexav
  0000f	83 c0 d0	 add	 eax, -48		; ffffffd0H
; Line 166
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
$LN2@luaO_hexav:
; Line 165
  00014	83 c8 20	 or	 eax, 32			; 00000020H
  00017	83 e8 57	 sub	 eax, 87			; 00000057H
; Line 166
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_luaO_hexavalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaO_str2num
_TEXT	SEGMENT
_n$ = -8						; size = 8
_i$ = -8						; size = 8
_s$ = 8							; size = 4
_o$ = 12						; size = 4
_luaO_str2num PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 289
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; Line 292
  00006	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]
  0000e	50		 push	 eax
  0000f	57		 push	 edi
  00010	e8 00 00 00 00	 call	 _l_str2int
  00015	8b f0		 mov	 esi, eax
  00017	83 c4 08	 add	 esp, 8
  0001a	85 f6		 test	 esi, esi
  0001c	74 20		 je	 SHORT $LN4@luaO_str2n
; Line 293
  0001e	8b 55 0c	 mov	 edx, DWORD PTR _o$[ebp]
; Line 300
  00021	2b f7		 sub	 esi, edi
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00026	5f		 pop	 edi
  00027	89 0a		 mov	 DWORD PTR [edx], ecx
  00029	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp+4]
  0002f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00032	c7 42 08 13 00
	00 00		 mov	 DWORD PTR [edx+8], 19	; 00000013H
  00039	5e		 pop	 esi
; Line 301
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN4@luaO_str2n:
; Line 295
  0003e	8d 45 f8	 lea	 eax, DWORD PTR _n$[ebp]
  00041	50		 push	 eax
  00042	57		 push	 edi
  00043	e8 00 00 00 00	 call	 _l_str2d
  00048	8b f0		 mov	 esi, eax
  0004a	83 c4 08	 add	 esp, 8
  0004d	85 f6		 test	 esi, esi
  0004f	74 1e		 je	 SHORT $LN2@luaO_str2n
; Line 296
  00051	8b 45 0c	 mov	 eax, DWORD PTR _o$[ebp]
; Line 300
  00054	2b f7		 sub	 esi, edi
  00056	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _n$[ebp]
  0005b	5f		 pop	 edi
  0005c	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  00060	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [eax+8], 3
  00067	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0006a	5e		 pop	 esi
; Line 301
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN2@luaO_str2n:
  0006f	5f		 pop	 edi
; Line 299
  00070	33 c0		 xor	 eax, eax
  00072	5e		 pop	 esi
; Line 301
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
_luaO_str2num ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaO_arith
_TEXT	SEGMENT
_n1$1 = -16						; size = 8
_n1$2 = -16						; size = 8
_i1$3 = -16						; size = 8
_n2$4 = -8						; size = 8
_i2$5 = -8						; size = 8
_L$ = 8							; size = 4
_op$ = 12						; size = 4
_p1$ = 16						; size = 4
_p2$ = 20						; size = 4
_res$ = 24						; size = 4
_luaO_arith PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 124
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
; Line 125
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _op$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 14	 mov	 edi, DWORD PTR _p2$[ebp]
  0000f	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  00012	83 f8 09	 cmp	 eax, 9
  00015	0f 87 16 01 00
	00		 ja	 $LN6@luaO_arith
  0001b	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@luaO_arith[eax]
  00022	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN36@luaO_arith[eax*4]
$LN11@luaO_arith:
; Line 130
  00029	8b 75 10	 mov	 esi, DWORD PTR _p1$[ebp]
  0002c	83 7e 08 13	 cmp	 DWORD PTR [esi+8], 19	; 00000013H
  00030	75 0d		 jne	 SHORT $LN16@luaO_arith
  00032	8b 06		 mov	 eax, DWORD PTR [esi]
  00034	89 45 f0	 mov	 DWORD PTR _i1$3[ebp], eax
  00037	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003a	89 45 f4	 mov	 DWORD PTR _i1$3[ebp+4], eax
  0003d	eb 17		 jmp	 SHORT $LN28@luaO_arith
$LN16@luaO_arith:
  0003f	6a 00		 push	 0
  00041	8d 45 f0	 lea	 eax, DWORD PTR _i1$3[ebp]
  00044	50		 push	 eax
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 _luaV_tointeger
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	85 c0		 test	 eax, eax
  00050	0f 84 2e 01 00
	00		 je	 $LN2@luaO_arith
$LN28@luaO_arith:
  00056	83 7f 08 13	 cmp	 DWORD PTR [edi+8], 19	; 00000013H
  0005a	75 0d		 jne	 SHORT $LN18@luaO_arith
  0005c	8b 07		 mov	 eax, DWORD PTR [edi]
  0005e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00061	89 45 f8	 mov	 DWORD PTR _i2$5[ebp], eax
  00064	89 4d fc	 mov	 DWORD PTR _i2$5[ebp+4], ecx
  00067	eb 1d		 jmp	 SHORT $LN29@luaO_arith
$LN18@luaO_arith:
  00069	6a 00		 push	 0
  0006b	8d 45 f8	 lea	 eax, DWORD PTR _i2$5[ebp]
  0006e	50		 push	 eax
  0006f	57		 push	 edi
  00070	e8 00 00 00 00	 call	 _luaV_tointeger
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
  00078	85 c0		 test	 eax, eax
  0007a	0f 84 04 01 00
	00		 je	 $LN2@luaO_arith
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _i2$5[ebp+4]
  00083	8b 45 f8	 mov	 eax, DWORD PTR _i2$5[ebp]
$LN29@luaO_arith:
; Line 131
  00086	51		 push	 ecx
  00087	50		 push	 eax
  00088	ff 75 f4	 push	 DWORD PTR _i1$3[ebp+4]
  0008b	ff 75 f0	 push	 DWORD PTR _i1$3[ebp]
  0008e	53		 push	 ebx
  0008f	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00092	e8 00 00 00 00	 call	 _intarith
  00097	8b 4d 18	 mov	 ecx, DWORD PTR _res$[ebp]
  0009a	83 c4 18	 add	 esp, 24			; 00000018H
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	89 01		 mov	 DWORD PTR [ecx], eax
  000a1	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000a4	c7 41 08 13 00
	00 00		 mov	 DWORD PTR [ecx+8], 19	; 00000013H
  000ab	5b		 pop	 ebx
; Line 160
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
$LN9@luaO_arith:
; Line 138
  000b0	8b 75 10	 mov	 esi, DWORD PTR _p1$[ebp]
  000b3	83 7e 08 03	 cmp	 DWORD PTR [esi+8], 3
  000b7	75 0b		 jne	 SHORT $LN20@luaO_arith
  000b9	f2 0f 10 06	 movsd	 xmm0, QWORD PTR [esi]
  000bd	f2 0f 11 45 f0	 movsd	 QWORD PTR _n1$2[ebp], xmm0
  000c2	eb 15		 jmp	 SHORT $LN30@luaO_arith
$LN20@luaO_arith:
  000c4	8d 45 f0	 lea	 eax, DWORD PTR _n1$2[ebp]
  000c7	50		 push	 eax
  000c8	56		 push	 esi
  000c9	e8 00 00 00 00	 call	 _luaV_tonumber_
  000ce	83 c4 08	 add	 esp, 8
  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 ab 00 00
	00		 je	 $LN2@luaO_arith
$LN30@luaO_arith:
  000d9	83 7f 08 03	 cmp	 DWORD PTR [edi+8], 3
  000dd	75 06		 jne	 SHORT $LN22@luaO_arith
  000df	f2 0f 10 07	 movsd	 xmm0, QWORD PTR [edi]
  000e3	eb 1a		 jmp	 SHORT $LN31@luaO_arith
$LN22@luaO_arith:
  000e5	8d 45 f8	 lea	 eax, DWORD PTR _n2$4[ebp]
  000e8	50		 push	 eax
  000e9	57		 push	 edi
  000ea	e8 00 00 00 00	 call	 _luaV_tonumber_
  000ef	83 c4 08	 add	 esp, 8
  000f2	85 c0		 test	 eax, eax
  000f4	0f 84 8a 00 00
	00		 je	 $LN2@luaO_arith
  000fa	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _n2$4[ebp]
$LN31@luaO_arith:
; Line 139
  000ff	83 ec 10	 sub	 esp, 16			; 00000010H
  00102	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  00108	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _n1$2[ebp]
  0010d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00112	53		 push	 ebx
  00113	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00116	e8 00 00 00 00	 call	 _numarith
  0011b	8b 45 18	 mov	 eax, DWORD PTR _res$[ebp]
  0011e	83 c4 18	 add	 esp, 24			; 00000018H
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	dd 18		 fstp	 QWORD PTR [eax]
  00125	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [eax+8], 3
  0012c	5b		 pop	 ebx
; Line 160
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c3		 ret	 0
$LN6@luaO_arith:
; Line 146
  00131	8b 75 10	 mov	 esi, DWORD PTR _p1$[ebp]
  00134	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00137	83 f8 13	 cmp	 eax, 19			; 00000013H
  0013a	75 31		 jne	 SHORT $LN4@luaO_arith
  0013c	39 47 08	 cmp	 DWORD PTR [edi+8], eax
  0013f	75 2c		 jne	 SHORT $LN4@luaO_arith
; Line 147
  00141	ff 77 04	 push	 DWORD PTR [edi+4]
  00144	ff 37		 push	 DWORD PTR [edi]
  00146	ff 76 04	 push	 DWORD PTR [esi+4]
  00149	ff 36		 push	 DWORD PTR [esi]
  0014b	53		 push	 ebx
  0014c	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0014f	e8 00 00 00 00	 call	 _intarith
  00154	8b 4d 18	 mov	 ecx, DWORD PTR _res$[ebp]
  00157	83 c4 18	 add	 esp, 24			; 00000018H
  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	89 01		 mov	 DWORD PTR [ecx], eax
  0015e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00161	c7 41 08 13 00
	00 00		 mov	 DWORD PTR [ecx+8], 19	; 00000013H
  00168	5b		 pop	 ebx
; Line 160
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c3		 ret	 0
$LN4@luaO_arith:
; Line 150
  0016d	83 f8 03	 cmp	 eax, 3
  00170	0f 85 4e ff ff
	ff		 jne	 $LN20@luaO_arith
  00176	f2 0f 10 06	 movsd	 xmm0, QWORD PTR [esi]
  0017a	f2 0f 11 45 f0	 movsd	 QWORD PTR _n1$1[ebp], xmm0
  0017f	e9 55 ff ff ff	 jmp	 $LN30@luaO_arith
$LN2@luaO_arith:
; Line 159
  00184	8d 43 06	 lea	 eax, DWORD PTR [ebx+6]
  00187	50		 push	 eax
  00188	ff 75 18	 push	 DWORD PTR _res$[ebp]
  0018b	57		 push	 edi
  0018c	56		 push	 esi
  0018d	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00190	e8 00 00 00 00	 call	 _luaT_trybinTM
  00195	83 c4 14	 add	 esp, 20			; 00000014H
  00198	5f		 pop	 edi
  00199	5e		 pop	 esi
  0019a	5b		 pop	 ebx
; Line 160
  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
  0019f	90		 npad	 1
$LN36@luaO_arith:
  001a0	00 00 00 00	 DD	 $LN9@luaO_arith
  001a4	00 00 00 00	 DD	 $LN11@luaO_arith
  001a8	00 00 00 00	 DD	 $LN6@luaO_arith
$LN34@luaO_arith:
  001ac	00		 DB	 0
  001ad	00		 DB	 0
  001ae	02		 DB	 2
  001af	01		 DB	 1
  001b0	01		 DB	 1
  001b1	01		 DB	 1
  001b2	01		 DB	 1
  001b3	01		 DB	 1
  001b4	02		 DB	 2
  001b5	01		 DB	 1
_luaO_arith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaO_ceillog2
_TEXT	SEGMENT
_x$ = 8							; size = 4
_luaO_ceillog2 PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 65
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 77
  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	48		 dec	 eax
; Line 78
  00009	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0000e	72 0d		 jb	 SHORT $LN1@luaO_ceill
$LL2@luaO_ceill:
  00010	c1 e8 08	 shr	 eax, 8
  00013	83 c1 08	 add	 ecx, 8
  00016	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0001b	73 f3		 jae	 SHORT $LL2@luaO_ceill
$LN1@luaO_ceill:
; Line 79
  0001d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?log_2@?1??luaO_ceillog2@@9@9[eax]
  00024	03 c1		 add	 eax, ecx
; Line 80
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_luaO_ceillog2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaO_utf8esc
_TEXT	SEGMENT
_buff$ = 8						; size = 4
_x$ = 12						; size = 4
_luaO_utf8esc PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 304
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 307
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00006	57		 push	 edi
  00007	bf 01 00 00 00	 mov	 edi, 1
  0000c	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00012	73 0b		 jae	 SHORT $LN5@luaO_utf8e
; Line 308
  00014	8b 55 08	 mov	 edx, DWORD PTR _buff$[ebp]
; Line 318
  00017	8b c7		 mov	 eax, edi
  00019	5f		 pop	 edi
  0001a	88 4a 07	 mov	 BYTE PTR [edx+7], cl
; Line 319
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
$LN5@luaO_utf8e:
  0001f	53		 push	 ebx
; Line 310
  00020	8b 5d 08	 mov	 ebx, DWORD PTR _buff$[ebp]
  00023	ba 3f 00 00 00	 mov	 edx, 63			; 0000003fH
  00028	56		 push	 esi
  00029	8d 73 07	 lea	 esi, DWORD PTR [ebx+7]
  0002c	8d 64 24 00	 npad	 4
$LL3@luaO_utf8e:
; Line 312
  00030	8a c1		 mov	 al, cl
; Line 314
  00032	d1 ea		 shr	 edx, 1
  00034	24 3f		 and	 al, 63			; 0000003fH
  00036	c1 e9 06	 shr	 ecx, 6
  00039	0c 80		 or	 al, -128		; ffffff80H
  0003b	8d 76 ff	 lea	 esi, DWORD PTR [esi-1]
  0003e	47		 inc	 edi
  0003f	88 46 01	 mov	 BYTE PTR [esi+1], al
; Line 315
  00042	3b ca		 cmp	 ecx, edx
  00044	77 ea		 ja	 SHORT $LL3@luaO_utf8e
; Line 316
  00046	f6 d2		 not	 dl
; Line 318
  00048	8b c7		 mov	 eax, edi
  0004a	02 d2		 add	 dl, dl
  0004c	0a d1		 or	 dl, cl
  0004e	2b df		 sub	 ebx, edi
  00050	5e		 pop	 esi
  00051	88 53 08	 mov	 BYTE PTR [ebx+8], dl
  00054	5b		 pop	 ebx
  00055	5f		 pop	 edi
; Line 319
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_luaO_utf8esc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaO_fb2int
_TEXT	SEGMENT
_x$ = 8							; size = 4
_luaO_fb2int PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 57
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 58
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	83 f9 08	 cmp	 ecx, 8
  0000b	7c 0c		 jl	 SHORT $LN4@luaO_fb2in
  0000d	83 e0 07	 and	 eax, 7
  00010	c1 f9 03	 sar	 ecx, 3
  00013	83 c0 08	 add	 eax, 8
  00016	49		 dec	 ecx
  00017	d3 e0		 shl	 eax, cl
$LN4@luaO_fb2in:
; Line 59
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_luaO_fb2int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaO_int2fb
_TEXT	SEGMENT
_x$ = 8							; size = 4
_luaO_int2fb PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 41
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 43
  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	83 f8 08	 cmp	 eax, 8
  0000b	72 38		 jb	 SHORT $LN6@luaO_int2f
; Line 44
  0000d	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00012	72 10		 jb	 SHORT $LN9@luaO_int2f
$LL4@luaO_int2f:
; Line 45
  00014	83 c0 0f	 add	 eax, 15			; 0000000fH
; Line 46
  00017	83 c1 04	 add	 ecx, 4
  0001a	c1 e8 04	 shr	 eax, 4
  0001d	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00022	73 f0		 jae	 SHORT $LL4@luaO_int2f
$LN9@luaO_int2f:
; Line 48
  00024	83 f8 10	 cmp	 eax, 16			; 00000010H
  00027	72 10		 jb	 SHORT $LN1@luaO_int2f
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL2@luaO_int2f:
; Line 49
  00030	40		 inc	 eax
; Line 50
  00031	41		 inc	 ecx
  00032	d1 e8		 shr	 eax, 1
  00034	83 f8 10	 cmp	 eax, 16			; 00000010H
  00037	73 f7		 jae	 SHORT $LL2@luaO_int2f
$LN1@luaO_int2f:
; Line 52
  00039	8d 0c cd 08 00
	00 00		 lea	 ecx, DWORD PTR [ecx*8+8]
  00040	83 c0 f8	 add	 eax, -8			; fffffff8H
  00043	0b c1		 or	 eax, ecx
$LN6@luaO_int2f:
; Line 53
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_luaO_int2fb ENDP
_TEXT	ENDS
END
