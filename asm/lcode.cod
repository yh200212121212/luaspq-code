; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_luaK_codeABx
PUBLIC	_luaK_codeABC
PUBLIC	_luaK_codek
PUBLIC	_luaK_fixline
PUBLIC	_luaK_nil
PUBLIC	_luaK_reserveregs
PUBLIC	_luaK_checkstack
PUBLIC	_luaK_stringK
PUBLIC	_luaK_intK
PUBLIC	_luaK_dischargevars
PUBLIC	_luaK_exp2anyreg
PUBLIC	_luaK_exp2anyregup
PUBLIC	_luaK_exp2nextreg
PUBLIC	_luaK_exp2val
PUBLIC	_luaK_exp2RK
PUBLIC	_luaK_self
PUBLIC	_luaK_indexed
PUBLIC	_luaK_goiftrue
PUBLIC	_luaK_goiffalse
PUBLIC	_luaK_storevar
PUBLIC	_luaK_setreturns
PUBLIC	_luaK_setoneret
PUBLIC	_luaK_jump
PUBLIC	_luaK_ret
PUBLIC	_luaK_patchlist
PUBLIC	_luaK_patchtohere
PUBLIC	_luaK_patchclose
PUBLIC	_luaK_concat
PUBLIC	_luaK_getlabel
PUBLIC	_luaK_prefix
PUBLIC	_luaK_infix
PUBLIC	_luaK_posfix
PUBLIC	_luaK_setlist
PUBLIC	??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_07BEDGJMGI@opcodes?$AA@			; `string'
PUBLIC	??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@ ; `string'
PUBLIC	??_C@_09FGMGFBD@constants?$AA@			; `string'
PUBLIC	??_C@_0BF@ODGJFGDP@constructor?5too?5long?$AA@	; `string'
PUBLIC	__real@0000000000000000
EXTRN	_luaO_arith:PROC
EXTRN	_luaM_growaux_:PROC
EXTRN	_luaX_syntaxerror:PROC
EXTRN	_luaC_barrier_:PROC
EXTRN	_luaH_set:PROC
EXTRN	_luaV_equalobj:PROC
EXTRN	_luaV_tointeger:PROC
EXTRN	__ltod3:PROC
EXTRN	_luaP_opmodes:BYTE
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_0BF@ODGJFGDP@constructor?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BF@ODGJFGDP@constructor?5too?5long?$AA@ DB 'constructor too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FGMGFBD@constants?$AA@
CONST	SEGMENT
??_C@_09FGMGFBD@constants?$AA@ DB 'constants', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
CONST	SEGMENT
??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@ DB 'function or '
	DB	'expression needs too many registers', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BEDGJMGI@opcodes?$AA@
CONST	SEGMENT
??_C@_07BEDGJMGI@opcodes?$AA@ DB 'opcodes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@ DB 'control structu'
	DB	're too long', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _codecomp
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_op$ = 12						; size = 4
_cond$ = 16						; size = 4
_o2$1$ = 20						; size = 4
_e1$ = 20						; size = 4
_j$1 = 24						; size = 4
_e2$ = 24						; size = 4
_codecomp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 826
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 827
  00004	8b 5d 14	 mov	 ebx, DWORD PTR _e1$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  0000c	53		 push	 ebx
  0000d	57		 push	 edi
  0000e	e8 00 00 00 00	 call	 _luaK_exp2RK
; Line 828
  00013	ff 75 18	 push	 DWORD PTR _e2$[ebp]
  00016	8b f0		 mov	 esi, eax
  00018	57		 push	 edi
  00019	e8 00 00 00 00	 call	 _luaK_exp2RK
  0001e	8b d0		 mov	 edx, eax
  00020	83 c4 10	 add	 esp, 16			; 00000010H
; Line 829
  00023	8b 45 18	 mov	 eax, DWORD PTR _e2$[ebp]
  00026	89 55 14	 mov	 DWORD PTR _o2$1$[ebp], edx
  00029	83 38 07	 cmp	 DWORD PTR [eax], 7
  0002c	75 1e		 jne	 SHORT $LN7@codecomp
  0002e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00031	f7 c2 00 01 00
	00		 test	 edx, 256		; 00000100H
  00037	75 10		 jne	 SHORT $LN25@codecomp
  00039	0f b6 4f 2a	 movzx	 ecx, BYTE PTR [edi+42]
  0003d	3b d1		 cmp	 edx, ecx
  0003f	8b 55 14	 mov	 edx, DWORD PTR _o2$1$[ebp]
  00042	7c 08		 jl	 SHORT $LN7@codecomp
  00044	fe 4f 2c	 dec	 BYTE PTR [edi+44]
  00047	eb 03		 jmp	 SHORT $LN7@codecomp
$LN25@codecomp:
  00049	8b 55 14	 mov	 edx, DWORD PTR _o2$1$[ebp]
$LN7@codecomp:
; Line 830
  0004c	83 3b 07	 cmp	 DWORD PTR [ebx], 7
  0004f	75 16		 jne	 SHORT $LN13@codecomp
  00051	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00054	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0005a	75 0b		 jne	 SHORT $LN13@codecomp
  0005c	0f b6 47 2a	 movzx	 eax, BYTE PTR [edi+42]
  00060	3b c8		 cmp	 ecx, eax
  00062	7c 03		 jl	 SHORT $LN13@codecomp
  00064	fe 4f 2c	 dec	 BYTE PTR [edi+44]
$LN13@codecomp:
; Line 831
  00067	8b 45 10	 mov	 eax, DWORD PTR _cond$[ebp]
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _op$[ebp]
  0006d	85 c0		 test	 eax, eax
  0006f	75 10		 jne	 SHORT $LN1@codecomp
  00071	83 f9 1f	 cmp	 ecx, 31			; 0000001fH
  00074	74 0b		 je	 SHORT $LN1@codecomp
; Line 833
  00076	8b c6		 mov	 eax, esi
  00078	8b f2		 mov	 esi, edx
  0007a	8b d0		 mov	 edx, eax
; Line 834
  0007c	b8 01 00 00 00	 mov	 eax, 1
$LN1@codecomp:
; Line 836
  00081	c1 e6 09	 shl	 esi, 9
  00084	0b f2		 or	 esi, edx
  00086	c1 e6 08	 shl	 esi, 8
  00089	0b f0		 or	 esi, eax
  0008b	c1 e6 06	 shl	 esi, 6
  0008e	0b f1		 or	 esi, ecx
  00090	56		 push	 esi
  00091	57		 push	 edi
  00092	e8 00 00 00 00	 call	 _luaK_code
  00097	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  0009a	68 1e 80 ff 7f	 push	 2147450910		; 7fff801eH
  0009f	57		 push	 edi
  000a0	c7 47 18 ff ff
	ff ff		 mov	 DWORD PTR [edi+24], -1
  000a7	e8 00 00 00 00	 call	 _luaK_code
  000ac	89 45 18	 mov	 DWORD PTR _j$1[ebp], eax
  000af	8d 45 18	 lea	 eax, DWORD PTR _j$1[ebp]
  000b2	56		 push	 esi
  000b3	50		 push	 eax
  000b4	57		 push	 edi
  000b5	e8 00 00 00 00	 call	 _luaK_concat
  000ba	8b 45 18	 mov	 eax, DWORD PTR _j$1[ebp]
  000bd	83 c4 1c	 add	 esp, 28			; 0000001cH
  000c0	89 43 08	 mov	 DWORD PTR [ebx+8], eax
; Line 837
  000c3	c7 03 0b 00 00
	00		 mov	 DWORD PTR [ebx], 11	; 0000000bH
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
; Line 838
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
_codecomp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _codeexpval
_TEXT	SEGMENT
_o2$1$ = -4						; size = 4
_fs$ = 8						; size = 4
_op$ = 12						; size = 4
_e1$ = 16						; size = 4
_e2$ = 20						; size = 4
_line$ = 24						; size = 4
_codeexpval PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 795
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 797
  00004	8b 45 0c	 mov	 eax, DWORD PTR _op$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 14	 mov	 ebx, DWORD PTR _e2$[ebp]
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR _e1$[ebp]
  00013	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  00016	7f 1a		 jg	 SHORT $LN7@codeexpval
  00018	53		 push	 ebx
  00019	57		 push	 edi
  0001a	83 c0 f3	 add	 eax, -13		; fffffff3H
  0001d	50		 push	 eax
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _constfolding
  00024	83 c4 10	 add	 esp, 16			; 00000010H
  00027	85 c0		 test	 eax, eax
  00029	0f 85 fb 00 00
	00		 jne	 $LN41@codeexpval
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _op$[ebp]
$LN7@codeexpval:
; Line 802
  00032	83 f8 19	 cmp	 eax, 25			; 00000019H
  00035	74 22		 je	 SHORT $LN4@codeexpval
  00037	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  0003a	74 1d		 je	 SHORT $LN4@codeexpval
  0003c	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  0003f	74 18		 je	 SHORT $LN4@codeexpval
; Line 807
  00041	53		 push	 ebx
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 _luaK_exp2RK
; Line 808
  00048	57		 push	 edi
  00049	56		 push	 esi
  0004a	89 45 fc	 mov	 DWORD PTR _o2$1$[ebp], eax
  0004d	e8 00 00 00 00	 call	 _luaK_exp2RK
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	8b c8		 mov	 ecx, eax
  00057	eb 43		 jmp	 SHORT $LN13@codeexpval
$LN4@codeexpval:
; Line 804
  00059	57		 push	 edi
  0005a	56		 push	 esi
  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _o2$1$[ebp], 0
  00062	e8 00 00 00 00	 call	 _luaK_dischargevars
  00067	83 c4 08	 add	 esp, 8
  0006a	83 3f 07	 cmp	 DWORD PTR [edi], 7
  0006d	75 20		 jne	 SHORT $LN10@codeexpval
  0006f	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00072	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00075	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00078	74 22		 je	 SHORT $LN13@codeexpval
  0007a	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  0007e	3b c8		 cmp	 ecx, eax
  00080	7c 0d		 jl	 SHORT $LN10@codeexpval
  00082	51		 push	 ecx
  00083	57		 push	 edi
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 _exp2reg
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	eb 0a		 jmp	 SHORT $LN43@codeexpval
$LN10@codeexpval:
  0008f	57		 push	 edi
  00090	56		 push	 esi
  00091	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  00096	83 c4 08	 add	 esp, 8
$LN43@codeexpval:
  00099	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
$LN13@codeexpval:
; Line 810
  0009c	3b 4d fc	 cmp	 ecx, DWORD PTR _o2$1$[ebp]
  0009f	7e 25		 jle	 SHORT $LN2@codeexpval
; Line 811
  000a1	83 3f 07	 cmp	 DWORD PTR [edi], 7
  000a4	75 16		 jne	 SHORT $LN18@codeexpval
  000a6	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  000a9	f7 c2 00 01 00
	00		 test	 edx, 256		; 00000100H
  000af	75 0b		 jne	 SHORT $LN18@codeexpval
  000b1	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  000b5	3b d0		 cmp	 edx, eax
  000b7	7c 03		 jl	 SHORT $LN18@codeexpval
  000b9	fe 4e 2c	 dec	 BYTE PTR [esi+44]
$LN18@codeexpval:
; Line 812
  000bc	83 3b 07	 cmp	 DWORD PTR [ebx], 7
  000bf	75 3b		 jne	 SHORT $LN36@codeexpval
  000c1	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
; Line 814
  000c4	eb 23		 jmp	 SHORT $LN46@codeexpval
$LN2@codeexpval:
; Line 815
  000c6	83 3b 07	 cmp	 DWORD PTR [ebx], 7
  000c9	75 16		 jne	 SHORT $LN30@codeexpval
  000cb	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000ce	f7 c2 00 01 00
	00		 test	 edx, 256		; 00000100H
  000d4	75 0b		 jne	 SHORT $LN30@codeexpval
  000d6	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  000da	3b d0		 cmp	 edx, eax
  000dc	7c 03		 jl	 SHORT $LN30@codeexpval
  000de	fe 4e 2c	 dec	 BYTE PTR [esi+44]
$LN30@codeexpval:
; Line 816
  000e1	83 3f 07	 cmp	 DWORD PTR [edi], 7
  000e4	75 16		 jne	 SHORT $LN36@codeexpval
  000e6	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
$LN46@codeexpval:
  000e9	f7 c2 00 01 00
	00		 test	 edx, 256		; 00000100H
  000ef	75 0b		 jne	 SHORT $LN36@codeexpval
  000f1	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  000f5	3b d0		 cmp	 edx, eax
  000f7	7c 03		 jl	 SHORT $LN36@codeexpval
  000f9	fe 4e 2c	 dec	 BYTE PTR [esi+44]
$LN36@codeexpval:
; Line 818
  000fc	c1 e1 09	 shl	 ecx, 9
  000ff	0b 4d fc	 or	 ecx, DWORD PTR _o2$1$[ebp]
  00102	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00105	0b 4d 0c	 or	 ecx, DWORD PTR _op$[ebp]
  00108	51		 push	 ecx
  00109	56		 push	 esi
  0010a	e8 00 00 00 00	 call	 _luaK_code
  0010f	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00112	83 c4 08	 add	 esp, 8
; Line 819
  00115	c7 07 0c 00 00
	00		 mov	 DWORD PTR [edi], 12	; 0000000cH
; Line 820
  0011b	8b 06		 mov	 eax, DWORD PTR [esi]
  0011d	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00120	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00123	8b 45 18	 mov	 eax, DWORD PTR _line$[ebp]
  00126	89 44 91 fc	 mov	 DWORD PTR [ecx+edx*4-4], eax
$LN41@codeexpval:
  0012a	5f		 pop	 edi
  0012b	5e		 pop	 esi
  0012c	5b		 pop	 ebx
; Line 822
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c3		 ret	 0
_codeexpval ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _constfolding
_TEXT	SEGMENT
_res$ = -48						; size = 16
_v1$ = -32						; size = 16
_v2$ = -16						; size = 16
_fs$ = 8						; size = 4
_op$ = 12						; size = 4
_e1$ = 16						; size = 4
_e2$ = 20						; size = 4
_constfolding PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 767
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
; Line 769
  00007	8b 75 10	 mov	 esi, DWORD PTR _e1$[ebp]
  0000a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000d	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00010	0f 85 02 01 00
	00		 jne	 $LN5@constfoldi
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	83 e8 05	 sub	 eax, 5
  0001b	74 1c		 je	 SHORT $LN11@constfoldi
  0001d	48		 dec	 eax
  0001e	0f 85 f4 00 00
	00		 jne	 $LN5@constfoldi
  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	89 45 e0	 mov	 DWORD PTR _v1$[ebp], eax
  0002a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0002d	89 45 e4	 mov	 DWORD PTR _v1$[ebp+4], eax
  00030	c7 45 e8 13 00
	00 00		 mov	 DWORD PTR _v1$[ebp+8], 19 ; 00000013H
  00037	eb 11		 jmp	 SHORT $LN29@constfoldi
$LN11@constfoldi:
  00039	f2 0f 10 46 08	 movsd	 xmm0, QWORD PTR [esi+8]
  0003e	f2 0f 11 45 e0	 movsd	 QWORD PTR _v1$[ebp], xmm0
  00043	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _v1$[ebp+8], 3
$LN29@constfoldi:
  0004a	8b 4d 14	 mov	 ecx, DWORD PTR _e2$[ebp]
  0004d	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00050	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00053	0f 85 bf 00 00
	00		 jne	 $LN5@constfoldi
  00059	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005b	83 e8 05	 sub	 eax, 5
  0005e	74 1c		 je	 SHORT $LN21@constfoldi
  00060	48		 dec	 eax
  00061	0f 85 b1 00 00
	00		 jne	 $LN5@constfoldi
  00067	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0006a	89 45 f0	 mov	 DWORD PTR _v2$[ebp], eax
  0006d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00070	89 45 f4	 mov	 DWORD PTR _v2$[ebp+4], eax
  00073	c7 45 f8 13 00
	00 00		 mov	 DWORD PTR _v2$[ebp+8], 19 ; 00000013H
  0007a	eb 11		 jmp	 SHORT $LN30@constfoldi
$LN21@constfoldi:
  0007c	f2 0f 10 41 08	 movsd	 xmm0, QWORD PTR [ecx+8]
  00081	f2 0f 11 45 f0	 movsd	 QWORD PTR _v2$[ebp], xmm0
  00086	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _v2$[ebp+8], 3
$LN30@constfoldi:
  0008d	8d 45 f0	 lea	 eax, DWORD PTR _v2$[ebp]
  00090	50		 push	 eax
  00091	8d 45 e0	 lea	 eax, DWORD PTR _v1$[ebp]
  00094	50		 push	 eax
  00095	ff 75 0c	 push	 DWORD PTR _op$[ebp]
  00098	e8 00 00 00 00	 call	 _validop
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a0	85 c0		 test	 eax, eax
  000a2	74 74		 je	 SHORT $LN5@constfoldi
; Line 771
  000a4	8d 45 d0	 lea	 eax, DWORD PTR _res$[ebp]
  000a7	50		 push	 eax
  000a8	8d 45 f0	 lea	 eax, DWORD PTR _v2$[ebp]
  000ab	50		 push	 eax
  000ac	8d 45 e0	 lea	 eax, DWORD PTR _v1$[ebp]
  000af	50		 push	 eax
  000b0	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  000b3	ff 75 0c	 push	 DWORD PTR _op$[ebp]
  000b6	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b9	ff 70 34	 push	 DWORD PTR [eax+52]
  000bc	e8 00 00 00 00	 call	 _luaO_arith
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
; Line 772
  000c4	83 7d d8 13	 cmp	 DWORD PTR _res$[ebp+8], 19 ; 00000013H
  000c8	75 1c		 jne	 SHORT $LN4@constfoldi
; Line 774
  000ca	8b 45 d0	 mov	 eax, DWORD PTR _res$[ebp]
  000cd	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000d0	8b 45 d4	 mov	 eax, DWORD PTR _res$[ebp+4]
  000d3	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; Line 783
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	c7 06 06 00 00
	00		 mov	 DWORD PTR [esi], 6
  000e1	5e		 pop	 esi
; Line 784
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
$LN4@constfoldi:
; Line 778
  000e6	f2 0f 10 45 d0	 movsd	 xmm0, QWORD PTR _res$[ebp]
  000eb	66 0f 2e c0	 ucomisd xmm0, xmm0
  000ef	9f		 lahf
  000f0	f6 c4 44	 test	 ah, 68			; 00000044H
  000f3	7a 23		 jp	 SHORT $LN5@constfoldi
  000f5	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  000fd	9f		 lahf
  000fe	f6 c4 44	 test	 ah, 68			; 00000044H
  00101	7b 15		 jnp	 SHORT $LN5@constfoldi
; Line 780
  00103	c7 06 05 00 00
	00		 mov	 DWORD PTR [esi], 5
; Line 783
  00109	b8 01 00 00 00	 mov	 eax, 1
  0010e	f2 0f 11 46 08	 movsd	 QWORD PTR [esi+8], xmm0
  00113	5e		 pop	 esi
; Line 784
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
$LN5@constfoldi:
; Line 770
  00118	33 c0		 xor	 eax, eax
  0011a	5e		 pop	 esi
; Line 784
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
_constfolding ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _validop
_TEXT	SEGMENT
_i$1 = -8						; size = 8
_op$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_validop PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 750
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 751
  00003	8b 45 08	 mov	 eax, DWORD PTR _op$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	83 c0 fd	 add	 eax, -3			; fffffffdH
  0000c	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0000f	0f 87 80 00 00
	00		 ja	 $LN1@validop
  00015	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN20@validop[eax]
  0001c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN22@validop[eax*4]
$LN3@validop:
; Line 755
  00023	8b 4d 0c	 mov	 ecx, DWORD PTR _v1$[ebp]
  00026	83 79 08 13	 cmp	 DWORD PTR [ecx+8], 19	; 00000013H
  0002a	75 0d		 jne	 SHORT $LN8@validop
  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
  00031	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00034	89 45 fc	 mov	 DWORD PTR _i$1[ebp+4], eax
  00037	eb 13		 jmp	 SHORT $LN18@validop
$LN8@validop:
  00039	6a 00		 push	 0
  0003b	8d 45 f8	 lea	 eax, DWORD PTR _i$1[ebp]
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 _luaV_tointeger
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	85 c0		 test	 eax, eax
  0004a	74 1c		 je	 SHORT $LN12@validop
$LN18@validop:
  0004c	8b 45 10	 mov	 eax, DWORD PTR _v2$[ebp]
  0004f	83 78 08 13	 cmp	 DWORD PTR [eax+8], 19	; 00000013H
  00053	74 40		 je	 SHORT $LN1@validop
  00055	6a 00		 push	 0
  00057	8d 4d f8	 lea	 ecx, DWORD PTR _i$1[ebp]
  0005a	51		 push	 ecx
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _luaV_tointeger
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
  00064	85 c0		 test	 eax, eax
  00066	75 2d		 jne	 SHORT $LN1@validop
$LN12@validop:
  00068	33 c0		 xor	 eax, eax
; Line 761
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN2@validop:
; Line 758
  0006e	8b 45 10	 mov	 eax, DWORD PTR _v2$[ebp]
  00071	83 78 08 13	 cmp	 DWORD PTR [eax+8], 19	; 00000013H
  00075	75 0c		 jne	 SHORT $LN14@validop
  00077	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	e8 00 00 00 00	 call	 __ltod3
  00081	eb 04		 jmp	 SHORT $LN15@validop
$LN14@validop:
  00083	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
$LN15@validop:
  00087	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0008f	9f		 lahf
  00090	f6 c4 44	 test	 ah, 68			; 00000044H
  00093	7b d3		 jnp	 SHORT $LN12@validop
$LN1@validop:
; Line 759
  00095	b8 01 00 00 00	 mov	 eax, 1
; Line 761
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
  0009e	8b ff		 npad	 2
$LN22@validop:
  000a0	00 00 00 00	 DD	 $LN2@validop
  000a4	00 00 00 00	 DD	 $LN3@validop
  000a8	00 00 00 00	 DD	 $LN1@validop
$LN20@validop:
  000ac	00		 DB	 0
  000ad	02		 DB	 2
  000ae	00		 DB	 0
  000af	00		 DB	 0
  000b0	01		 DB	 1
  000b1	01		 DB	 1
  000b2	01		 DB	 1
  000b3	01		 DB	 1
  000b4	01		 DB	 1
  000b5	02		 DB	 2
  000b6	01		 DB	 1
_validop ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _codenot
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_codenot PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 702
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 703
  00004	8b 75 0c	 mov	 esi, DWORD PTR _e$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _luaK_dischargevars
; Line 704
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	83 c4 08	 add	 esp, 8
  00017	48		 dec	 eax
  00018	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0001b	77 68		 ja	 SHORT $LN1@codenot
  0001d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN18@codenot[eax]
  00024	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN21@codenot[eax*4]
$LN5@codenot:
; Line 706
  0002b	c7 06 02 00 00
	00		 mov	 DWORD PTR [esi], 2
; Line 707
  00031	eb 52		 jmp	 SHORT $LN1@codenot
$LN4@codenot:
; Line 710
  00033	c7 06 03 00 00
	00		 mov	 DWORD PTR [esi], 3
; Line 711
  00039	eb 4a		 jmp	 SHORT $LN1@codenot
$LN3@codenot:
; Line 714
  0003b	56		 push	 esi
  0003c	57		 push	 edi
  0003d	e8 00 00 00 00	 call	 _invertjump
; Line 715
  00042	eb 3e		 jmp	 SHORT $LN19@codenot
$LN2@codenot:
; Line 719
  00044	56		 push	 esi
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 _discharge2anyreg
  0004b	83 c4 08	 add	 esp, 8
; Line 720
  0004e	83 3e 07	 cmp	 DWORD PTR [esi], 7
  00051	75 16		 jne	 SHORT $LN13@codenot
  00053	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00056	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0005c	75 0b		 jne	 SHORT $LN13@codenot
  0005e	0f b6 47 2a	 movzx	 eax, BYTE PTR [edi+42]
  00062	3b c8		 cmp	 ecx, eax
  00064	7c 03		 jl	 SHORT $LN13@codenot
  00066	fe 4f 2c	 dec	 BYTE PTR [edi+44]
$LN13@codenot:
; Line 721
  00069	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006c	c1 e0 17	 shl	 eax, 23			; 00000017H
  0006f	83 c8 1b	 or	 eax, 27			; 0000001bH
  00072	50		 push	 eax
  00073	57		 push	 edi
  00074	e8 00 00 00 00	 call	 _luaK_code
  00079	89 46 08	 mov	 DWORD PTR [esi+8], eax
; Line 722
  0007c	c7 06 0c 00 00
	00		 mov	 DWORD PTR [esi], 12	; 0000000cH
$LN19@codenot:
; Line 721
  00082	83 c4 08	 add	 esp, 8
$LN1@codenot:
; Line 731
  00085	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00088	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; Line 732
  0008b	50		 push	 eax
  0008c	57		 push	 edi
  0008d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00090	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00093	e8 00 00 00 00	 call	 _removevalues
; Line 733
  00098	ff 76 10	 push	 DWORD PTR [esi+16]
  0009b	57		 push	 edi
  0009c	e8 00 00 00 00	 call	 _removevalues
  000a1	83 c4 10	 add	 esp, 16			; 00000010H
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
; Line 734
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
$LN21@codenot:
  000a8	00 00 00 00	 DD	 $LN5@codenot
  000ac	00 00 00 00	 DD	 $LN4@codenot
  000b0	00 00 00 00	 DD	 $LN2@codenot
  000b4	00 00 00 00	 DD	 $LN3@codenot
  000b8	00 00 00 00	 DD	 $LN1@codenot
$LN18@codenot:
  000bc	00		 DB	 0
  000bd	01		 DB	 1
  000be	00		 DB	 0
  000bf	01		 DB	 1
  000c0	01		 DB	 1
  000c1	01		 DB	 1
  000c2	02		 DB	 2
  000c3	04		 DB	 4
  000c4	04		 DB	 4
  000c5	04		 DB	 4
  000c6	03		 DB	 3
  000c7	02		 DB	 2
_codenot ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _jumponcond
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_j$1 = 12						; size = 4
_e$ = 12						; size = 4
_cond$ = 16						; size = 4
_jumponcond PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 640
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 641
  00004	8b 75 0c	 mov	 esi, DWORD PTR _e$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  0000b	8b 16		 mov	 edx, DWORD PTR [esi]
  0000d	83 fa 0c	 cmp	 edx, 12			; 0000000cH
  00010	75 36		 jne	 SHORT $LN1@jumponcond
; Line 642
  00012	8b 07		 mov	 eax, DWORD PTR [edi]
  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0001a	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
; Line 643
  0001d	8b c1		 mov	 eax, ecx
  0001f	83 e0 3f	 and	 eax, 63			; 0000003fH
  00022	3c 1b		 cmp	 al, 27			; 0000001bH
  00024	75 22		 jne	 SHORT $LN1@jumponcond
; Line 644
  00026	ff 4f 10	 dec	 DWORD PTR [edi+16]
; Line 645
  00029	81 e1 ff ff c5
	ff		 and	 ecx, -3801089		; ffc5ffffH
  0002f	81 c9 00 00 44
	00		 or	 ecx, 4456448		; 00440000H
  00035	33 c0		 xor	 eax, eax
  00037	c1 e9 11	 shr	 ecx, 17			; 00000011H
  0003a	39 45 10	 cmp	 DWORD PTR _cond$[ebp], eax
  0003d	0f 94 c0	 sete	 al
  00040	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00043	0b c8		 or	 ecx, eax
  00045	51		 push	 ecx
  00046	eb 5f		 jmp	 SHORT $LN41@jumponcond
$LN1@jumponcond:
; Line 649
  00048	83 fa 07	 cmp	 edx, 7
  0004b	74 32		 je	 SHORT $LN39@jumponcond
  0004d	8b 17		 mov	 edx, DWORD PTR [edi]
  0004f	0f b6 4f 2c	 movzx	 ecx, BYTE PTR [edi+44]
  00053	41		 inc	 ecx
  00054	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  00058	3b c8		 cmp	 ecx, eax
  0005a	7e 0b		 jle	 SHORT $LN19@jumponcond
  0005c	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00062	7d 76		 jge	 SHORT $LN42@jumponcond
  00064	88 4a 08	 mov	 BYTE PTR [edx+8], cl
$LN19@jumponcond:
  00067	fe 47 2c	 inc	 BYTE PTR [edi+44]
  0006a	0f b6 47 2c	 movzx	 eax, BYTE PTR [edi+44]
  0006e	48		 dec	 eax
  0006f	50		 push	 eax
  00070	56		 push	 esi
  00071	57		 push	 edi
  00072	e8 00 00 00 00	 call	 _discharge2reg
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 650
  0007a	83 3e 07	 cmp	 DWORD PTR [esi], 7
  0007d	75 16		 jne	 SHORT $LN28@jumponcond
$LN39@jumponcond:
  0007f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00082	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  00088	75 0b		 jne	 SHORT $LN28@jumponcond
  0008a	0f b6 47 2a	 movzx	 eax, BYTE PTR [edi+42]
  0008e	3b c8		 cmp	 ecx, eax
  00090	7c 03		 jl	 SHORT $LN28@jumponcond
  00092	fe 4f 2c	 dec	 BYTE PTR [edi+44]
$LN28@jumponcond:
; Line 651
  00095	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00098	c1 e0 09	 shl	 eax, 9
  0009b	0b 45 10	 or	 eax, DWORD PTR _cond$[ebp]
  0009e	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  000a1	0d e3 3f 00 00	 or	 eax, 16355		; 00003fe3H
  000a6	50		 push	 eax
$LN41@jumponcond:
  000a7	57		 push	 edi
  000a8	e8 00 00 00 00	 call	 _luaK_code
  000ad	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  000b0	68 1e 80 ff 7f	 push	 2147450910		; 7fff801eH
  000b5	57		 push	 edi
  000b6	c7 47 18 ff ff
	ff ff		 mov	 DWORD PTR [edi+24], -1
  000bd	e8 00 00 00 00	 call	 _luaK_code
  000c2	89 45 0c	 mov	 DWORD PTR _j$1[ebp], eax
  000c5	8d 45 0c	 lea	 eax, DWORD PTR _j$1[ebp]
  000c8	56		 push	 esi
  000c9	50		 push	 eax
  000ca	57		 push	 edi
  000cb	e8 00 00 00 00	 call	 _luaK_concat
  000d0	8b 45 0c	 mov	 eax, DWORD PTR _j$1[ebp]
  000d3	83 c4 1c	 add	 esp, 28			; 0000001cH
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
; Line 652
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
$LN42@jumponcond:
; Line 649
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  000df	ff 77 08	 push	 DWORD PTR [edi+8]
  000e2	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN44@jumponcond:
$LN40@jumponcond:
  000e7	cc		 int	 3
_jumponcond ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _invertjump
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_invertjump PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 632
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 633
  00003	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  00006	56		 push	 esi
  00007	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000a	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00012	8d 34 88	 lea	 esi, DWORD PTR [eax+ecx*4]
  00015	83 f9 01	 cmp	 ecx, 1
  00018	7c 12		 jl	 SHORT $LN4@invertjump
  0001a	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  0001d	8d 56 fc	 lea	 edx, DWORD PTR [esi-4]
  00020	83 e0 3f	 and	 eax, 63			; 0000003fH
  00023	f6 80 00 00 00
	00 80		 test	 BYTE PTR _luaP_opmodes[eax], 128 ; 00000080H
  0002a	75 02		 jne	 SHORT $LN3@invertjump
$LN4@invertjump:
  0002c	8b d6		 mov	 edx, esi
$LN3@invertjump:
; Line 636
  0002e	8b 02		 mov	 eax, DWORD PTR [edx]
  00030	8b c8		 mov	 ecx, eax
  00032	81 e1 c0 3f 00
	00		 and	 ecx, 16320		; 00003fc0H
  00038	f7 d9		 neg	 ecx
  0003a	5e		 pop	 esi
  0003b	1b c9		 sbb	 ecx, ecx
  0003d	41		 inc	 ecx
  0003e	c1 e1 06	 shl	 ecx, 6
  00041	33 c8		 xor	 ecx, eax
  00043	81 e1 c0 3f 00
	00		 and	 ecx, 16320		; 00003fc0H
  00049	33 c8		 xor	 ecx, eax
  0004b	89 0a		 mov	 DWORD PTR [edx], ecx
; Line 637
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_invertjump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _exp2reg
_TEXT	SEGMENT
_p_t$1$ = -8						; size = 4
_p_f$1$ = -4						; size = 4
_fs$ = 8						; size = 4
_fj$1$ = 12						; size = 4
_j$1 = 12						; size = 4
_e$ = 12						; size = 4
_reg$ = 16						; size = 4
_exp2reg PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 496
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
; Line 497
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _fs$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	ff 75 10	 push	 DWORD PTR _reg$[ebp]
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR _e$[ebp]
  00012	57		 push	 edi
  00013	53		 push	 ebx
  00014	e8 00 00 00 00	 call	 _discharge2reg
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 498
  0001c	83 3f 0b	 cmp	 DWORD PTR [edi], 11	; 0000000bH
  0001f	75 10		 jne	 SHORT $LN4@exp2reg
; Line 499
  00021	ff 77 08	 push	 DWORD PTR [edi+8]
  00024	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00027	50		 push	 eax
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 _luaK_concat
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@exp2reg:
; Line 500
  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  00037	3b c6		 cmp	 eax, esi
  00039	0f 84 da 00 00
	00		 je	 $LN3@exp2reg
; Line 504
  0003f	50		 push	 eax
  00040	53		 push	 ebx
  00041	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _p_f$1$[ebp], -1
  00048	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _p_t$1$[ebp], -1
  0004f	e8 00 00 00 00	 call	 _need_value
  00054	83 c4 08	 add	 esp, 8
  00057	85 c0		 test	 eax, eax
  00059	75 12		 jne	 SHORT $LN1@exp2reg
  0005b	56		 push	 esi
  0005c	53		 push	 ebx
  0005d	e8 00 00 00 00	 call	 _need_value
  00062	83 c4 08	 add	 esp, 8
  00065	85 c0		 test	 eax, eax
  00067	0f 84 83 00 00
	00		 je	 $LN25@exp2reg
$LN1@exp2reg:
; Line 505
  0006d	83 3f 0b	 cmp	 DWORD PTR [edi], 11	; 0000000bH
  00070	75 09		 jne	 SHORT $LN7@exp2reg
  00072	c7 45 0c ff ff
	ff ff		 mov	 DWORD PTR _fj$1$[ebp], -1
  00079	eb 2c		 jmp	 SHORT $LN8@exp2reg
$LN7@exp2reg:
  0007b	8b 73 18	 mov	 esi, DWORD PTR [ebx+24]
  0007e	68 1e 80 ff 7f	 push	 2147450910		; 7fff801eH
  00083	53		 push	 ebx
  00084	c7 43 18 ff ff
	ff ff		 mov	 DWORD PTR [ebx+24], -1
  0008b	e8 00 00 00 00	 call	 _luaK_code
  00090	89 45 0c	 mov	 DWORD PTR _j$1[ebp], eax
  00093	8d 45 0c	 lea	 eax, DWORD PTR _j$1[ebp]
  00096	56		 push	 esi
  00097	50		 push	 eax
  00098	53		 push	 ebx
  00099	e8 00 00 00 00	 call	 _luaK_concat
  0009e	8b 45 0c	 mov	 eax, DWORD PTR _j$1[ebp]
  000a1	83 c4 14	 add	 esp, 20			; 00000014H
  000a4	89 45 0c	 mov	 DWORD PTR _fj$1$[ebp], eax
$LN8@exp2reg:
; Line 506
  000a7	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  000aa	8b 75 10	 mov	 esi, DWORD PTR _reg$[ebp]
  000ad	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000b0	c1 e6 06	 shl	 esi, 6
  000b3	8b c6		 mov	 eax, esi
  000b5	0d 03 40 00 00	 or	 eax, 16387		; 00004003H
  000ba	50		 push	 eax
  000bb	53		 push	 ebx
  000bc	e8 00 00 00 00	 call	 _luaK_code
; Line 507
  000c1	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  000c4	81 ce 03 00 80
	00		 or	 esi, 8388611		; 00800003H
  000ca	56		 push	 esi
  000cb	53		 push	 ebx
  000cc	89 45 fc	 mov	 DWORD PTR _p_f$1$[ebp], eax
  000cf	89 4b 14	 mov	 DWORD PTR [ebx+20], ecx
  000d2	e8 00 00 00 00	 call	 _luaK_code
; Line 508
  000d7	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  000da	ff 75 0c	 push	 DWORD PTR _fj$1$[ebp]
  000dd	89 4b 14	 mov	 DWORD PTR [ebx+20], ecx
  000e0	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  000e3	51		 push	 ecx
  000e4	53		 push	 ebx
  000e5	89 45 f8	 mov	 DWORD PTR _p_t$1$[ebp], eax
  000e8	e8 00 00 00 00	 call	 _luaK_concat
  000ed	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN25@exp2reg:
; Line 511
  000f0	ff 75 fc	 push	 DWORD PTR _p_f$1$[ebp]
  000f3	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  000f6	ff 75 10	 push	 DWORD PTR _reg$[ebp]
  000f9	89 73 14	 mov	 DWORD PTR [ebx+20], esi
  000fc	56		 push	 esi
  000fd	ff 77 14	 push	 DWORD PTR [edi+20]
  00100	53		 push	 ebx
  00101	e8 00 00 00 00	 call	 _patchlistaux
; Line 512
  00106	ff 75 f8	 push	 DWORD PTR _p_t$1$[ebp]
  00109	ff 75 10	 push	 DWORD PTR _reg$[ebp]
  0010c	56		 push	 esi
  0010d	ff 77 10	 push	 DWORD PTR [edi+16]
  00110	53		 push	 ebx
  00111	e8 00 00 00 00	 call	 _patchlistaux
  00116	83 c4 28	 add	 esp, 40			; 00000028H
$LN3@exp2reg:
; Line 515
  00119	8b 45 10	 mov	 eax, DWORD PTR _reg$[ebp]
  0011c	c7 47 10 ff ff
	ff ff		 mov	 DWORD PTR [edi+16], -1
  00123	c7 47 14 ff ff
	ff ff		 mov	 DWORD PTR [edi+20], -1
  0012a	89 47 08	 mov	 DWORD PTR [edi+8], eax
; Line 516
  0012d	c7 07 07 00 00
	00		 mov	 DWORD PTR [edi], 7
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
; Line 517
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
_exp2reg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _discharge2anyreg
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_discharge2anyreg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 488
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 489
  00004	8b 75 0c	 mov	 esi, DWORD PTR _e$[ebp]
  00007	83 3e 07	 cmp	 DWORD PTR [esi], 7
  0000a	74 32		 je	 SHORT $LN1@discharge2
; Line 490
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
  0000f	57		 push	 edi
  00010	8b 39		 mov	 edi, DWORD PTR [ecx]
  00012	0f b6 51 2c	 movzx	 edx, BYTE PTR [ecx+44]
  00016	42		 inc	 edx
  00017	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  0001b	3b d0		 cmp	 edx, eax
  0001d	7e 0b		 jle	 SHORT $LN7@discharge2
  0001f	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  00025	7d 1a		 jge	 SHORT $LN13@discharge2
  00027	88 57 08	 mov	 BYTE PTR [edi+8], dl
$LN7@discharge2:
  0002a	fe 41 2c	 inc	 BYTE PTR [ecx+44]
; Line 491
  0002d	0f b6 41 2c	 movzx	 eax, BYTE PTR [ecx+44]
  00031	48		 dec	 eax
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _discharge2reg
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	5f		 pop	 edi
$LN1@discharge2:
  0003e	5e		 pop	 esi
; Line 493
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN13@discharge2:
; Line 490
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  00046	ff 71 08	 push	 DWORD PTR [ecx+8]
  00049	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN15@discharge2:
$LN12@discharge2:
  0004e	cc		 int	 3
_discharge2anyreg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _discharge2reg
_TEXT	SEGMENT
_o$1 = -16						; size = 16
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_reg$ = 16						; size = 4
_discharge2reg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 445
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
; Line 446
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _fs$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _e$[ebp]
  0000e	57		 push	 edi
  0000f	53		 push	 ebx
  00010	e8 00 00 00 00	 call	 _luaK_dischargevars
; Line 447
  00015	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00017	83 c4 08	 add	 esp, 8
  0001a	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0001d	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00020	0f 87 29 01 00
	00		 ja	 $LN1@discharge2
  00026	56		 push	 esi
  00027	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN20@discharge2[eax*4]
$LN9@discharge2:
; Line 449
  0002e	8b 75 10	 mov	 esi, DWORD PTR _reg$[ebp]
  00031	6a 01		 push	 1
  00033	56		 push	 esi
  00034	53		 push	 ebx
  00035	e8 00 00 00 00	 call	 _luaK_nil
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 483
  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi
; Line 484
  00040	c7 07 07 00 00
	00		 mov	 DWORD PTR [edi], 7
  00046	5e		 pop	 esi
  00047	5f		 pop	 edi
  00048	5b		 pop	 ebx
; Line 485
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN8@discharge2:
; Line 453
  0004d	8b 75 10	 mov	 esi, DWORD PTR _reg$[ebp]
  00050	33 c0		 xor	 eax, eax
  00052	83 f9 02	 cmp	 ecx, 2
  00055	0f 94 c0	 sete	 al
  00058	c1 e0 11	 shl	 eax, 17			; 00000011H
  0005b	0b c6		 or	 eax, esi
  0005d	c1 e0 06	 shl	 eax, 6
  00060	83 c8 03	 or	 eax, 3
  00063	50		 push	 eax
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 _luaK_code
  0006a	83 c4 08	 add	 esp, 8
; Line 483
  0006d	89 77 08	 mov	 DWORD PTR [edi+8], esi
; Line 484
  00070	c7 07 07 00 00
	00		 mov	 DWORD PTR [edi], 7
  00076	5e		 pop	 esi
  00077	5f		 pop	 edi
  00078	5b		 pop	 ebx
; Line 485
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
$LN7@discharge2:
; Line 457
  0007d	ff 77 08	 push	 DWORD PTR [edi+8]
  00080	8b 75 10	 mov	 esi, DWORD PTR _reg$[ebp]
  00083	56		 push	 esi
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 _luaK_codek
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 483
  0008d	89 77 08	 mov	 DWORD PTR [edi+8], esi
; Line 484
  00090	c7 07 07 00 00
	00		 mov	 DWORD PTR [edi], 7
  00096	5e		 pop	 esi
  00097	5f		 pop	 edi
  00098	5b		 pop	 ebx
; Line 485
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
$LN6@discharge2:
; Line 461
  0009d	f2 0f 10 47 08	 movsd	 xmm0, QWORD PTR [edi+8]
  000a2	8d 45 f0	 lea	 eax, DWORD PTR _o$1[ebp]
  000a5	50		 push	 eax
  000a6	50		 push	 eax
  000a7	53		 push	 ebx
  000a8	f2 0f 11 45 f0	 movsd	 QWORD PTR _o$1[ebp], xmm0
  000ad	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _o$1[ebp+8], 3
  000b4	e8 00 00 00 00	 call	 _addk
  000b9	8b 75 10	 mov	 esi, DWORD PTR _reg$[ebp]
  000bc	50		 push	 eax
  000bd	56		 push	 esi
  000be	53		 push	 ebx
  000bf	e8 00 00 00 00	 call	 _luaK_codek
  000c4	83 c4 18	 add	 esp, 24			; 00000018H
; Line 483
  000c7	89 77 08	 mov	 DWORD PTR [edi+8], esi
; Line 484
  000ca	c7 07 07 00 00
	00		 mov	 DWORD PTR [edi], 7
  000d0	5e		 pop	 esi
  000d1	5f		 pop	 edi
  000d2	5b		 pop	 ebx
; Line 485
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN5@discharge2:
; Line 465
  000d7	ff 77 0c	 push	 DWORD PTR [edi+12]
  000da	ff 77 08	 push	 DWORD PTR [edi+8]
  000dd	53		 push	 ebx
  000de	e8 00 00 00 00	 call	 _luaK_intK
  000e3	8b 75 10	 mov	 esi, DWORD PTR _reg$[ebp]
  000e6	50		 push	 eax
  000e7	56		 push	 esi
  000e8	53		 push	 ebx
  000e9	e8 00 00 00 00	 call	 _luaK_codek
  000ee	83 c4 18	 add	 esp, 24			; 00000018H
; Line 483
  000f1	89 77 08	 mov	 DWORD PTR [edi+8], esi
; Line 484
  000f4	c7 07 07 00 00
	00		 mov	 DWORD PTR [edi], 7
  000fa	5e		 pop	 esi
  000fb	5f		 pop	 edi
  000fc	5b		 pop	 ebx
; Line 485
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
$LN4@discharge2:
; Line 469
  00101	8b 03		 mov	 eax, DWORD PTR [ebx]
  00103	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
; Line 470
  00106	8b 75 10	 mov	 esi, DWORD PTR _reg$[ebp]
  00109	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0010c	8b c6		 mov	 eax, esi
  0010e	c1 e0 06	 shl	 eax, 6
  00111	33 04 91	 xor	 eax, DWORD PTR [ecx+edx*4]
  00114	25 c0 3f 00 00	 and	 eax, 16320		; 00003fc0H
  00119	31 04 91	 xor	 DWORD PTR [ecx+edx*4], eax
; Line 483
  0011c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0011f	5e		 pop	 esi
; Line 484
  00120	c7 07 07 00 00
	00		 mov	 DWORD PTR [edi], 7
  00126	5f		 pop	 edi
  00127	5b		 pop	 ebx
; Line 485
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c3		 ret	 0
$LN3@discharge2:
; Line 474
  0012c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0012f	8b 75 10	 mov	 esi, DWORD PTR _reg$[ebp]
  00132	3b f0		 cmp	 esi, eax
  00134	74 0f		 je	 SHORT $LN2@discharge2
; Line 475
  00136	6a 00		 push	 0
  00138	50		 push	 eax
  00139	56		 push	 esi
  0013a	6a 00		 push	 0
  0013c	53		 push	 ebx
  0013d	e8 00 00 00 00	 call	 _luaK_codeABC
  00142	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@discharge2:
; Line 483
  00145	89 77 08	 mov	 DWORD PTR [edi+8], esi
; Line 484
  00148	c7 07 07 00 00
	00		 mov	 DWORD PTR [edi], 7
$LN18@discharge2:
  0014e	5e		 pop	 esi
$LN1@discharge2:
  0014f	5f		 pop	 edi
  00150	5b		 pop	 ebx
; Line 485
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
  00155	8d 49 00	 npad	 3
$LN20@discharge2:
  00158	00 00 00 00	 DD	 $LN9@discharge2
  0015c	00 00 00 00	 DD	 $LN8@discharge2
  00160	00 00 00 00	 DD	 $LN8@discharge2
  00164	00 00 00 00	 DD	 $LN7@discharge2
  00168	00 00 00 00	 DD	 $LN6@discharge2
  0016c	00 00 00 00	 DD	 $LN5@discharge2
  00170	00 00 00 00	 DD	 $LN3@discharge2
  00174	00 00 00 00	 DD	 $LN18@discharge2
  00178	00 00 00 00	 DD	 $LN18@discharge2
  0017c	00 00 00 00	 DD	 $LN18@discharge2
  00180	00 00 00 00	 DD	 $LN18@discharge2
  00184	00 00 00 00	 DD	 $LN4@discharge2
_discharge2reg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _code_label
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_A$ = 12						; size = 4
_b$ = 16						; size = 4
_jump$ = 20						; size = 4
_code_label PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 439
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 440
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00009	89 41 14	 mov	 DWORD PTR [ecx+20], eax
; Line 441
  0000c	8b 45 10	 mov	 eax, DWORD PTR _b$[ebp]
  0000f	c1 e0 09	 shl	 eax, 9
  00012	0b 45 14	 or	 eax, DWORD PTR _jump$[ebp]
  00015	c1 e0 08	 shl	 eax, 8
  00018	0b 45 0c	 or	 eax, DWORD PTR _A$[ebp]
  0001b	c1 e0 06	 shl	 eax, 6
  0001e	83 c8 03	 or	 eax, 3
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 _luaK_code
  00028	83 c4 08	 add	 esp, 8
; Line 442
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_code_label ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _nilK
_TEXT	SEGMENT
_v$ = -32						; size = 16
_k$ = -16						; size = 16
_fs$ = 8						; size = 4
_nilK	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 374
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 378
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
  00009	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _v$[ebp+8], 0
  00010	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00013	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  00016	89 45 f0	 mov	 DWORD PTR _k$[ebp], eax
; Line 379
  00019	8d 45 e0	 lea	 eax, DWORD PTR _v$[ebp]
  0001c	50		 push	 eax
  0001d	8d 45 f0	 lea	 eax, DWORD PTR _k$[ebp]
  00020	c7 45 f8 45 00
	00 00		 mov	 DWORD PTR _k$[ebp+8], 69 ; 00000045H
  00027	50		 push	 eax
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _addk
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 380
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_nilK	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _boolK
_TEXT	SEGMENT
_o$ = -16						; size = 16
_fs$ = 8						; size = 4
_b$ = 12						; size = 4
_boolK	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 367
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; Line 369
  00006	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00009	89 45 f0	 mov	 DWORD PTR _o$[ebp], eax
; Line 370
  0000c	8d 45 f0	 lea	 eax, DWORD PTR _o$[ebp]
  0000f	50		 push	 eax
  00010	50		 push	 eax
  00011	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00014	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _o$[ebp+8], 1
  0001b	e8 00 00 00 00	 call	 _addk
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 371
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_boolK	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_numberK
_TEXT	SEGMENT
_o$ = -16						; size = 16
_fs$ = 8						; size = 4
_r$ = 12						; size = 8
_luaK_numberK PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 360
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; Line 362
  00006	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR _r$[ebp]
; Line 363
  0000b	8d 45 f0	 lea	 eax, DWORD PTR _o$[ebp]
  0000e	50		 push	 eax
  0000f	50		 push	 eax
  00010	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00013	f2 0f 11 45 f0	 movsd	 QWORD PTR _o$[ebp], xmm0
  00018	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _o$[ebp+8], 3
  0001f	e8 00 00 00 00	 call	 _addk
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 364
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_luaK_numberK ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _addk
_TEXT	SEGMENT
_L$1$ = -8						; size = 4
_k$2$ = -4						; size = 4
_idx$1$ = -4						; size = 4
_fs$ = 8						; size = 4
_key$ = 12						; size = 4
_v$ = 16						; size = 4
_addk	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 313
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
; Line 314
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _fs$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
; Line 316
  0000c	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  0000f	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00012	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00014	ff 70 40	 push	 DWORD PTR [eax+64]
  00017	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0001a	51		 push	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _L$1$[ebp], ecx
  0001e	e8 00 00 00 00	 call	 _luaH_set
  00023	8b c8		 mov	 ecx, eax
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
  00028	89 4d fc	 mov	 DWORD PTR _idx$1$[ebp], ecx
; Line 318
  0002b	83 79 08 13	 cmp	 DWORD PTR [ecx+8], 19	; 00000013H
  0002f	75 38		 jne	 SHORT $LN4@addk
; Line 319
  00031	8b 31		 mov	 esi, DWORD PTR [ecx]
; Line 322
  00033	3b 73 1c	 cmp	 esi, DWORD PTR [ebx+28]
  00036	7d 31		 jge	 SHORT $LN4@addk
  00038	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0003b	8b d6		 mov	 edx, esi
  0003d	c1 e2 04	 shl	 edx, 4
  00040	03 57 2c	 add	 edx, DWORD PTR [edi+44]
  00043	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00046	33 41 08	 xor	 eax, DWORD PTR [ecx+8]
  00049	a8 3f		 test	 al, 63			; 0000003fH
  0004b	75 19		 jne	 SHORT $LN15@addk
  0004d	51		 push	 ecx
  0004e	52		 push	 edx
  0004f	6a 00		 push	 0
  00051	e8 00 00 00 00	 call	 _luaV_equalobj
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	85 c0		 test	 eax, eax
  0005b	74 09		 je	 SHORT $LN15@addk
; Line 323
  0005d	5f		 pop	 edi
  0005e	8b c6		 mov	 eax, esi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
; Line 337
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
$LN15@addk:
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _idx$1$[ebp]
$LN4@addk:
; Line 327
  00069	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  0006c	8d 5f 10	 lea	 ebx, DWORD PTR [edi+16]
  0006f	8b 33		 mov	 esi, DWORD PTR [ebx]
  00071	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00074	89 45 fc	 mov	 DWORD PTR _k$2$[ebp], eax
; Line 330
  00077	99		 cdq
  00078	89 51 04	 mov	 DWORD PTR [ecx+4], edx
; Line 331
  0007b	8b 55 fc	 mov	 edx, DWORD PTR _k$2$[ebp]
  0007e	89 01		 mov	 DWORD PTR [ecx], eax
  00080	c7 41 08 13 00
	00 00		 mov	 DWORD PTR [ecx+8], 19	; 00000013H
  00087	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0008a	3b 03		 cmp	 eax, DWORD PTR [ebx]
  0008c	7e 21		 jle	 SHORT $LN10@addk
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_09FGMGFBD@constants?$AA@
  00093	68 ff ff ff 03	 push	 67108863		; 03ffffffH
  00098	6a 10		 push	 16			; 00000010H
  0009a	53		 push	 ebx
  0009b	ff 77 2c	 push	 DWORD PTR [edi+44]
  0009e	ff 75 f8	 push	 DWORD PTR _L$1$[ebp]
  000a1	e8 00 00 00 00	 call	 _luaM_growaux_
  000a6	8b 55 fc	 mov	 edx, DWORD PTR _k$2$[ebp]
  000a9	83 c4 18	 add	 esp, 24			; 00000018H
  000ac	89 47 2c	 mov	 DWORD PTR [edi+44], eax
$LN10@addk:
; Line 332
  000af	3b 33		 cmp	 esi, DWORD PTR [ebx]
  000b1	7d 18		 jge	 SHORT $LN1@addk
  000b3	8b ce		 mov	 ecx, esi
  000b5	c1 e1 04	 shl	 ecx, 4
$LL2@addk:
  000b8	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000bb	8d 49 10	 lea	 ecx, DWORD PTR [ecx+16]
  000be	46		 inc	 esi
  000bf	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], 0
  000c7	3b 33		 cmp	 esi, DWORD PTR [ebx]
  000c9	7c ed		 jl	 SHORT $LL2@addk
$LN1@addk:
; Line 333
  000cb	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  000ce	8b c2		 mov	 eax, edx
  000d0	c1 e0 04	 shl	 eax, 4
  000d3	03 47 2c	 add	 eax, DWORD PTR [edi+44]
  000d6	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  000da	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
; Line 334
  000de	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  000e1	ff 40 1c	 inc	 DWORD PTR [eax+28]
; Line 335
  000e4	f6 41 08 40	 test	 BYTE PTR [ecx+8], 64	; 00000040H
  000e8	74 1e		 je	 SHORT $LN8@addk
  000ea	f6 47 05 04	 test	 BYTE PTR [edi+5], 4
  000ee	74 18		 je	 SHORT $LN8@addk
  000f0	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000f2	f6 41 05 03	 test	 BYTE PTR [ecx+5], 3
  000f6	74 10		 je	 SHORT $LN8@addk
  000f8	51		 push	 ecx
  000f9	57		 push	 edi
  000fa	ff 75 f8	 push	 DWORD PTR _L$1$[ebp]
  000fd	e8 00 00 00 00	 call	 _luaC_barrier_
  00102	8b 55 fc	 mov	 edx, DWORD PTR _k$2$[ebp]
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@addk:
; Line 336
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	8b c2		 mov	 eax, edx
  0010c	5b		 pop	 ebx
; Line 337
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c3		 ret	 0
_addk	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _freeexp
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_freeexp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 303
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 304
  00003	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  00006	83 38 07	 cmp	 DWORD PTR [eax], 7
  00009	75 19		 jne	 SHORT $LN4@freeexp
; Line 305
  0000b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000e	f7 c2 00 01 00
	00		 test	 edx, 256		; 00000100H
  00014	75 0e		 jne	 SHORT $LN4@freeexp
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
  00019	0f b6 41 2a	 movzx	 eax, BYTE PTR [ecx+42]
  0001d	3b d0		 cmp	 edx, eax
  0001f	7c 03		 jl	 SHORT $LN4@freeexp
  00021	fe 49 2c	 dec	 BYTE PTR [ecx+44]
$LN4@freeexp:
; Line 306
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_freeexp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _freereg
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_reg$ = 12						; size = 4
_freereg PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 295
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 296
  00003	8b 55 0c	 mov	 edx, DWORD PTR _reg$[ebp]
  00006	f7 c2 00 01 00
	00		 test	 edx, 256		; 00000100H
  0000c	75 0e		 jne	 SHORT $LN1@freereg
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
  00011	0f b6 41 2a	 movzx	 eax, BYTE PTR [ecx+42]
  00015	3b d0		 cmp	 edx, eax
  00017	7c 03		 jl	 SHORT $LN1@freereg
; Line 297
  00019	fe 49 2c	 dec	 BYTE PTR [ecx+44]
$LN1@freereg:
; Line 300
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_freereg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _codeextraarg
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_a$ = 12						; size = 4
_codeextraarg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 261
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 263
  00003	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  00006	c1 e0 06	 shl	 eax, 6
  00009	83 c8 2e	 or	 eax, 46			; 0000002eH
  0000c	89 45 0c	 mov	 DWORD PTR _a$[ebp], eax
; Line 264
  0000f	5d		 pop	 ebp
; Line 263
  00010	e9 00 00 00 00	 jmp	 _luaK_code
_codeextraarg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_code
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_i$ = 12						; size = 4
_luaK_code PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 229
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 230
  00004	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  00007	57		 push	 edi
; Line 231
  00008	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0000d	50		 push	 eax
  0000e	68 ff 00 00 00	 push	 255			; 000000ffH
  00013	50		 push	 eax
  00014	ff 76 18	 push	 DWORD PTR [esi+24]
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 _patchlistaux
; Line 234
  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00020	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00023	40		 inc	 eax
  00024	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1
  0002b	83 c4 14	 add	 esp, 20			; 00000014H
  0002e	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00030	7e 21		 jle	 SHORT $LN2@luaK_code
  00032	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_07BEDGJMGI@opcodes?$AA@
  0003a	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  0003f	6a 04		 push	 4
  00041	51		 push	 ecx
  00042	ff 77 30	 push	 DWORD PTR [edi+48]
  00045	ff 70 34	 push	 DWORD PTR [eax+52]
  00048	e8 00 00 00 00	 call	 _luaM_growaux_
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN2@luaK_code:
; Line 235
  00053	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  00056	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00059	8b 45 0c	 mov	 eax, DWORD PTR _i$[ebp]
  0005c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
; Line 238
  0005f	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00062	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00065	40		 inc	 eax
  00066	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00068	7e 21		 jle	 SHORT $LN1@luaK_code
  0006a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_07BEDGJMGI@opcodes?$AA@
  00072	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00077	6a 04		 push	 4
  00079	51		 push	 ecx
  0007a	ff 77 38	 push	 DWORD PTR [edi+56]
  0007d	ff 70 34	 push	 DWORD PTR [eax+52]
  00080	e8 00 00 00 00	 call	 _luaM_growaux_
  00085	83 c4 18	 add	 esp, 24			; 00000018H
  00088	89 47 38	 mov	 DWORD PTR [edi+56], eax
$LN1@luaK_code:
; Line 239
  0008b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0008e	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00091	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00094	5f		 pop	 edi
  00095	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00098	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
; Line 240
  0009b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0009e	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  000a1	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  000a4	5e		 pop	 esi
; Line 241
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
_luaK_code ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _dischargejpc
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_dischargejpc PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 180
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 181
  00004	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	50		 push	 eax
  0000b	68 ff 00 00 00	 push	 255			; 000000ffH
  00010	50		 push	 eax
  00011	ff 76 18	 push	 DWORD PTR [esi+24]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _patchlistaux
  0001a	83 c4 14	 add	 esp, 20			; 00000014H
; Line 182
  0001d	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1
  00024	5e		 pop	 esi
; Line 183
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_dischargejpc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _patchlistaux
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_list$ = 12						; size = 4
_vtarget$ = 16						; size = 4
_reg$ = 20						; size = 4
_dtarget$ = 24						; size = 4
_patchlistaux PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 168
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; Line 169
  00004	8b 7d 0c	 mov	 edi, DWORD PTR _list$[ebp]
  00007	83 ff ff	 cmp	 edi, -1
  0000a	0f 84 db 00 00
	00		 je	 $LN3@patchlista
  00010	53		 push	 ebx
  00011	56		 push	 esi
$LL4@patchlista:
; Line 170
  00012	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  00015	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	8b 70 30	 mov	 esi, DWORD PTR [eax+48]
  00021	8b 04 0e	 mov	 eax, DWORD PTR [esi+ecx]
  00024	03 f1		 add	 esi, ecx
  00026	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  00029	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	75 04		 jne	 SHORT $LN8@patchlista
  00033	0b d8		 or	 ebx, eax
  00035	eb 05		 jmp	 SHORT $LN7@patchlista
$LN8@patchlista:
  00037	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  0003a	03 d8		 add	 ebx, eax
$LN7@patchlista:
; Line 171
  0003c	83 ff 01	 cmp	 edi, 1
  0003f	7c 12		 jl	 SHORT $LN17@patchlista
  00041	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00044	8d 56 fc	 lea	 edx, DWORD PTR [esi-4]
  00047	83 e0 3f	 and	 eax, 63			; 0000003fH
  0004a	f6 80 00 00 00
	00 80		 test	 BYTE PTR _luaP_opmodes[eax], 128 ; 00000080H
  00051	75 02		 jne	 SHORT $LN16@patchlista
$LN17@patchlista:
  00053	8b d6		 mov	 edx, esi
$LN16@patchlista:
  00055	8b 02		 mov	 eax, DWORD PTR [edx]
  00057	8b c8		 mov	 ecx, eax
  00059	83 e1 3f	 and	 ecx, 63			; 0000003fH
  0005c	80 f9 23	 cmp	 cl, 35			; 00000023H
  0005f	75 55		 jne	 SHORT $LN2@patchlista
  00061	8b 75 14	 mov	 esi, DWORD PTR _reg$[ebp]
  00064	81 fe ff 00 00
	00		 cmp	 esi, 255		; 000000ffH
  0006a	74 1a		 je	 SHORT $LN12@patchlista
  0006c	8b c8		 mov	 ecx, eax
  0006e	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00071	3b f1		 cmp	 esi, ecx
  00073	74 11		 je	 SHORT $LN12@patchlista
  00075	8b ce		 mov	 ecx, esi
  00077	c1 e1 06	 shl	 ecx, 6
  0007a	33 c8		 xor	 ecx, eax
  0007c	81 e1 c0 3f 00
	00		 and	 ecx, 16320		; 00003fc0H
  00082	33 c8		 xor	 ecx, eax
  00084	eb 18		 jmp	 SHORT $LN36@patchlista
$LN12@patchlista:
  00086	8b c8		 mov	 ecx, eax
  00088	25 00 c0 7f 00	 and	 eax, 8372224		; 007fc000H
  0008d	81 e1 ff ff c5
	ff		 and	 ecx, -3801089		; ffc5ffffH
  00093	81 c9 00 00 44
	00		 or	 ecx, 4456448		; 00440000H
  00099	c1 e9 11	 shr	 ecx, 17			; 00000011H
  0009c	0b c8		 or	 ecx, eax
$LN36@patchlista:
; Line 172
  0009e	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  000a1	89 0a		 mov	 DWORD PTR [edx], ecx
  000a3	8b 4d 10	 mov	 ecx, DWORD PTR _vtarget$[ebp]
  000a6	8b 00		 mov	 eax, DWORD PTR [eax]
  000a8	8b 70 30	 mov	 esi, DWORD PTR [eax+48]
  000ab	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  000b2	03 f0		 add	 esi, eax
; Line 173
  000b4	eb 03		 jmp	 SHORT $LN39@patchlista
$LN2@patchlista:
; Line 174
  000b6	8b 4d 18	 mov	 ecx, DWORD PTR _dtarget$[ebp]
$LN39@patchlista:
  000b9	2b cf		 sub	 ecx, edi
  000bb	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  000be	99		 cdq
  000bf	33 c2		 xor	 eax, edx
  000c1	2b c2		 sub	 eax, edx
  000c3	3d ff ff 01 00	 cmp	 eax, 131071		; 0001ffffH
  000c8	7f 24		 jg	 SHORT $LN40@patchlista
  000ca	8b 06		 mov	 eax, DWORD PTR [esi]
  000cc	81 c1 fe ff 01
	00		 add	 ecx, 131070		; 0001fffeH
  000d2	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH
  000d7	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  000da	33 c8		 xor	 ecx, eax
; Line 175
  000dc	8b fb		 mov	 edi, ebx
  000de	89 0e		 mov	 DWORD PTR [esi], ecx
  000e0	83 fb ff	 cmp	 ebx, -1
  000e3	0f 85 29 ff ff
	ff		 jne	 $LL4@patchlista
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx
$LN3@patchlista:
  000eb	5f		 pop	 edi
; Line 177
  000ec	5d		 pop	 ebp
  000ed	c3		 ret	 0
$LN40@patchlista:
; Line 172
  000ee	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@
  000f6	ff 70 08	 push	 DWORD PTR [eax+8]
  000f9	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN41@patchlista:
$LN35@patchlista:
  000fe	cc		 int	 3
_patchlistaux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _removevalues
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_list$ = 12						; size = 4
_removevalues PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 161
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 162
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _list$[ebp]
  00006	83 f9 ff	 cmp	 ecx, -1
  00009	74 71		 je	 SHORT $LN25@removevalu
  0000b	53		 push	 ebx
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR _fs$[ebp]
  0000f	56		 push	 esi
  00010	57		 push	 edi
$LL6@removevalu:
; Line 163
  00011	8b 03		 mov	 eax, DWORD PTR [ebx]
  00013	8d 3c 8d 00 00
	00 00		 lea	 edi, DWORD PTR [ecx*4]
  0001a	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  0001d	03 d7		 add	 edx, edi
  0001f	83 f9 01	 cmp	 ecx, 1
  00022	7c 12		 jl	 SHORT $LN16@removevalu
  00024	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00027	8d 72 fc	 lea	 esi, DWORD PTR [edx-4]
  0002a	83 e0 3f	 and	 eax, 63			; 0000003fH
  0002d	f6 80 00 00 00
	00 80		 test	 BYTE PTR _luaP_opmodes[eax], 128 ; 00000080H
  00034	75 02		 jne	 SHORT $LN15@removevalu
$LN16@removevalu:
  00036	8b f2		 mov	 esi, edx
$LN15@removevalu:
  00038	8b 16		 mov	 edx, DWORD PTR [esi]
  0003a	8b c2		 mov	 eax, edx
  0003c	83 e0 3f	 and	 eax, 63			; 0000003fH
  0003f	3c 23		 cmp	 al, 35			; 00000023H
  00041	75 19		 jne	 SHORT $LN2@removevalu
  00043	8b c2		 mov	 eax, edx
  00045	81 e2 00 c0 7f
	00		 and	 edx, 8372224		; 007fc000H
  0004b	25 ff ff c5 ff	 and	 eax, -3801089		; ffc5ffffH
  00050	0d 00 00 44 00	 or	 eax, 4456448		; 00440000H
  00055	c1 e8 11	 shr	 eax, 17			; 00000011H
  00058	0b c2		 or	 eax, edx
  0005a	89 06		 mov	 DWORD PTR [esi], eax
$LN2@removevalu:
; Line 162
  0005c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005e	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00061	8b 04 07	 mov	 eax, DWORD PTR [edi+eax]
  00064	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  00067	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
  0006c	83 f8 ff	 cmp	 eax, -1
  0006f	74 08		 je	 SHORT $LN27@removevalu
  00071	41		 inc	 ecx
  00072	03 c8		 add	 ecx, eax
  00074	83 f9 ff	 cmp	 ecx, -1
  00077	75 98		 jne	 SHORT $LL6@removevalu
$LN27@removevalu:
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
$LN25@removevalu:
; Line 164
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
_removevalues ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _patchtestreg
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_node$ = 12						; size = 4
_reg$ = 16						; size = 4
_patchtestreg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 148
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 149
  00003	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _node$[ebp]
  00009	56		 push	 esi
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0000f	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00012	83 f9 01	 cmp	 ecx, 1
  00015	7c 12		 jl	 SHORT $LN7@patchtestr
  00017	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  0001a	8d 72 fc	 lea	 esi, DWORD PTR [edx-4]
  0001d	83 e0 3f	 and	 eax, 63			; 0000003fH
  00020	f6 80 00 00 00
	00 80		 test	 BYTE PTR _luaP_opmodes[eax], 128 ; 00000080H
  00027	75 02		 jne	 SHORT $LN6@patchtestr
$LN7@patchtestr:
  00029	8b f2		 mov	 esi, edx
$LN6@patchtestr:
; Line 150
  0002b	8b 16		 mov	 edx, DWORD PTR [esi]
  0002d	8b c2		 mov	 eax, edx
  0002f	83 e0 3f	 and	 eax, 63			; 0000003fH
  00032	3c 23		 cmp	 al, 35			; 00000023H
  00034	74 05		 je	 SHORT $LN3@patchtestr
; Line 151
  00036	33 c0		 xor	 eax, eax
  00038	5e		 pop	 esi
; Line 158
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN3@patchtestr:
; Line 152
  0003b	8b 4d 10	 mov	 ecx, DWORD PTR _reg$[ebp]
  0003e	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00044	74 20		 je	 SHORT $LN2@patchtestr
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 17	 shr	 eax, 23			; 00000017H
  0004b	3b c8		 cmp	 ecx, eax
  0004d	74 17		 je	 SHORT $LN2@patchtestr
; Line 153
  0004f	c1 e1 06	 shl	 ecx, 6
; Line 157
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	33 ca		 xor	 ecx, edx
  00059	81 e1 c0 3f 00
	00		 and	 ecx, 16320		; 00003fc0H
  0005f	33 ca		 xor	 ecx, edx
  00061	89 0e		 mov	 DWORD PTR [esi], ecx
  00063	5e		 pop	 esi
; Line 158
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
$LN2@patchtestr:
; Line 155
  00066	8b c2		 mov	 eax, edx
  00068	81 e2 00 c0 7f
	00		 and	 edx, 8372224		; 007fc000H
  0006e	25 ff ff c5 ff	 and	 eax, -3801089		; ffc5ffffH
  00073	0d 00 00 44 00	 or	 eax, 4456448		; 00440000H
  00078	c1 e8 11	 shr	 eax, 17			; 00000011H
  0007b	0b c2		 or	 eax, edx
  0007d	89 06		 mov	 DWORD PTR [esi], eax
; Line 157
  0007f	b8 01 00 00 00	 mov	 eax, 1
  00084	5e		 pop	 esi
; Line 158
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_patchtestreg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _need_value
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_list$ = 12						; size = 4
_need_value PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 139
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 140
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _list$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	83 f9 ff	 cmp	 ecx, -1
  0000b	74 44		 je	 SHORT $LN2@need_value
; Line 141
  0000d	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	8b 78 30	 mov	 edi, DWORD PTR [eax+48]
$LL7@need_value:
  00015	8d 14 8f	 lea	 edx, DWORD PTR [edi+ecx*4]
  00018	83 f9 01	 cmp	 ecx, 1
  0001b	7c 12		 jl	 SHORT $LN12@need_value
  0001d	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00020	8d 72 fc	 lea	 esi, DWORD PTR [edx-4]
  00023	83 e0 3f	 and	 eax, 63			; 0000003fH
  00026	f6 80 00 00 00
	00 80		 test	 BYTE PTR _luaP_opmodes[eax], 128 ; 00000080H
  0002d	75 02		 jne	 SHORT $LN11@need_value
$LN12@need_value:
  0002f	8b f2		 mov	 esi, edx
$LN11@need_value:
; Line 142
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	83 e0 3f	 and	 eax, 63			; 0000003fH
  00036	3c 23		 cmp	 al, 35			; 00000023H
  00038	75 1d		 jne	 SHORT $LN16@need_value
; Line 140
  0003a	8b 02		 mov	 eax, DWORD PTR [edx]
  0003c	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  0003f	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
  00044	83 f8 ff	 cmp	 eax, -1
  00047	74 08		 je	 SHORT $LN2@need_value
  00049	41		 inc	 ecx
  0004a	03 c8		 add	 ecx, eax
  0004c	83 f9 ff	 cmp	 ecx, -1
  0004f	75 c4		 jne	 SHORT $LL7@need_value
$LN2@need_value:
  00051	5f		 pop	 edi
; Line 144
  00052	33 c0		 xor	 eax, eax
  00054	5e		 pop	 esi
; Line 145
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN16@need_value:
  00057	5f		 pop	 edi
; Line 142
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	5e		 pop	 esi
; Line 145
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_need_value ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getjumpcontrol
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_pc$ = 12						; size = 4
_getjumpcontrol PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 126
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 127
  00003	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _pc$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0000e	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
; Line 128
  00011	83 f9 01	 cmp	 ecx, 1
  00014	7c 12		 jl	 SHORT $LN2@getjumpcon
  00016	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00019	83 e0 3f	 and	 eax, 63			; 0000003fH
  0001c	f6 80 00 00 00
	00 80		 test	 BYTE PTR _luaP_opmodes[eax], 128 ; 00000080H
; Line 129
  00023	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00026	75 02		 jne	 SHORT $LN1@getjumpcon
$LN2@getjumpcon:
; Line 131
  00028	8b c2		 mov	 eax, edx
$LN1@getjumpcon:
; Line 132
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_getjumpcontrol ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getjump
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_pc$ = 12						; size = 4
_getjump PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 117
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 118
  00003	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _pc$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0000e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00011	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  00014	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
; Line 119
  00019	83 f8 ff	 cmp	 eax, -1
  0001c	75 04		 jne	 SHORT $LN2@getjump
; Line 120
  0001e	0b c0		 or	 eax, eax
; Line 123
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN2@getjump:
; Line 122
  00022	40		 inc	 eax
  00023	03 c1		 add	 eax, ecx
; Line 123
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_getjump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _fixjump
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_pc$ = 12						; size = 4
_dest$ = 16						; size = 4
_fixjump PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 97
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 98
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pc$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _fs$[ebp]
  0000a	56		 push	 esi
; Line 99
  0000b	8b 75 10	 mov	 esi, DWORD PTR _dest$[ebp]
  0000e	2b f1		 sub	 esi, ecx
  00010	8b 03		 mov	 eax, DWORD PTR [ebx]
  00012	57		 push	 edi
  00013	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00016	8d 3c 88	 lea	 edi, DWORD PTR [eax+ecx*4]
; Line 101
  00019	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0001c	99		 cdq
  0001d	33 c2		 xor	 eax, edx
  0001f	2b c2		 sub	 eax, edx
  00021	3d ff ff 01 00	 cmp	 eax, 131071		; 0001ffffH
  00026	7f 19		 jg	 SHORT $LN5@fixjump
; Line 103
  00028	8b 07		 mov	 eax, DWORD PTR [edi]
  0002a	8d 8e fe ff 01
	00		 lea	 ecx, DWORD PTR [esi+131070]
  00030	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00033	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH
  00038	33 c8		 xor	 ecx, eax
  0003a	89 0f		 mov	 DWORD PTR [edi], ecx
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
; Line 104
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN5@fixjump:
; Line 102
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@
  00046	ff 73 08	 push	 DWORD PTR [ebx+8]
  00049	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN7@fixjump:
$LN4@fixjump:
  0004e	cc		 int	 3
_fixjump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _condjump
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_op$ = 12						; size = 4
_A$ = 16						; size = 4
_j$1 = 20						; size = 4
_B$ = 20						; size = 4
_C$ = 24						; size = 4
_condjump PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 91
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 92
  00003	8b 45 14	 mov	 eax, DWORD PTR _B$[ebp]
  00006	c1 e0 09	 shl	 eax, 9
  00009	0b 45 18	 or	 eax, DWORD PTR _C$[ebp]
  0000c	c1 e0 08	 shl	 eax, 8
  0000f	0b 45 10	 or	 eax, DWORD PTR _A$[ebp]
  00012	56		 push	 esi
  00013	c1 e0 06	 shl	 eax, 6
  00016	0b 45 0c	 or	 eax, DWORD PTR _op$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  0001d	50		 push	 eax
  0001e	57		 push	 edi
  0001f	e8 00 00 00 00	 call	 _luaK_code
; Line 93
  00024	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  00027	68 1e 80 ff 7f	 push	 2147450910		; 7fff801eH
  0002c	57		 push	 edi
  0002d	c7 47 18 ff ff
	ff ff		 mov	 DWORD PTR [edi+24], -1
  00034	e8 00 00 00 00	 call	 _luaK_code
  00039	89 45 14	 mov	 DWORD PTR _j$1[ebp], eax
  0003c	8d 45 14	 lea	 eax, DWORD PTR _j$1[ebp]
  0003f	56		 push	 esi
  00040	50		 push	 eax
  00041	57		 push	 edi
  00042	e8 00 00 00 00	 call	 _luaK_concat
  00047	8b 45 14	 mov	 eax, DWORD PTR _j$1[ebp]
  0004a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
; Line 94
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_condjump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _tonumeral
_TEXT	SEGMENT
_e$ = 8							; size = 4
_v$ = 12						; size = 4
_tonumeral PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 39
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 40
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _e$[ebp]
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00009	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  0000c	74 04		 je	 SHORT $LN8@tonumeral
$LN11@tonumeral:
; Line 41
  0000e	33 c0		 xor	 eax, eax
; Line 51
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
$LN8@tonumeral:
; Line 42
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	83 e8 05	 sub	 eax, 5
  00017	74 23		 je	 SHORT $LN3@tonumeral
  00019	48		 dec	 eax
  0001a	75 f2		 jne	 SHORT $LN11@tonumeral
; Line 44
  0001c	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0001f	85 d2		 test	 edx, edx
  00021	74 30		 je	 SHORT $LN2@tonumeral
  00023	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00026	89 02		 mov	 DWORD PTR [edx], eax
  00028	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0002b	89 42 04	 mov	 DWORD PTR [edx+4], eax
; Line 48
  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	c7 42 08 13 00
	00 00		 mov	 DWORD PTR [edx+8], 19	; 00000013H
; Line 51
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN3@tonumeral:
; Line 47
  0003c	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0003f	85 c0		 test	 eax, eax
  00041	74 10		 je	 SHORT $LN2@tonumeral
  00043	f2 0f 10 41 08	 movsd	 xmm0, QWORD PTR [ecx+8]
  00048	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  0004c	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [eax+8], 3
$LN2@tonumeral:
; Line 48
  00053	b8 01 00 00 00	 mov	 eax, 1
; Line 51
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_tonumeral ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_setlist
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_base$ = 12						; size = 4
_nelems$ = 16						; size = 4
_tostore$ = 20						; size = 4
_luaK_setlist PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 941
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 942
  00003	8b 4d 10	 mov	 ecx, DWORD PTR _nelems$[ebp]
  00006	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8d 49 ff	 lea	 ecx, DWORD PTR [ecx-1]
  00011	f7 e9		 imul	 ecx
; Line 943
  00013	8b 45 14	 mov	 eax, DWORD PTR _tostore$[ebp]
  00016	33 c9		 xor	 ecx, ecx
  00018	c1 fa 04	 sar	 edx, 4
  0001b	8b f2		 mov	 esi, edx
  0001d	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00020	46		 inc	 esi
  00021	03 f2		 add	 esi, edx
  00023	83 f8 ff	 cmp	 eax, -1
  00026	0f 44 c1	 cmove	 eax, ecx
; Line 945
  00029	81 fe ff 01 00
	00		 cmp	 esi, 511		; 000001ffH
  0002f	7f 2a		 jg	 SHORT $LN4@luaK_setli
; Line 946
  00031	8b 5d 0c	 mov	 ebx, DWORD PTR _base$[ebp]
  00034	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  00037	c1 e0 09	 shl	 eax, 9
  0003a	0b c6		 or	 eax, esi
  0003c	c1 e0 08	 shl	 eax, 8
  0003f	0b c3		 or	 eax, ebx
  00041	c1 e0 06	 shl	 eax, 6
  00044	83 c8 2b	 or	 eax, 43			; 0000002bH
  00047	50		 push	 eax
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 _luaK_code
  0004e	83 c4 08	 add	 esp, 8
; Line 953
  00051	fe c3		 inc	 bl
  00053	88 5f 2c	 mov	 BYTE PTR [edi+44], bl
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
; Line 954
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN4@luaK_setli:
; Line 947
  0005b	81 fe ff ff ff
	03		 cmp	 esi, 67108863		; 03ffffffH
  00061	7f 32		 jg	 SHORT $LN14@luaK_setli
; Line 948
  00063	8b 5d 0c	 mov	 ebx, DWORD PTR _base$[ebp]
  00066	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  00069	c1 e0 11	 shl	 eax, 17			; 00000011H
  0006c	0b c3		 or	 eax, ebx
  0006e	c1 e0 06	 shl	 eax, 6
  00071	83 c8 2b	 or	 eax, 43			; 0000002bH
  00074	50		 push	 eax
  00075	57		 push	 edi
  00076	e8 00 00 00 00	 call	 _luaK_code
; Line 949
  0007b	c1 e6 06	 shl	 esi, 6
  0007e	83 ce 2e	 or	 esi, 46			; 0000002eH
  00081	56		 push	 esi
  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 _luaK_code
  00088	83 c4 10	 add	 esp, 16			; 00000010H
; Line 953
  0008b	fe c3		 inc	 bl
  0008d	88 5f 2c	 mov	 BYTE PTR [edi+44], bl
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
; Line 954
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
$LN14@luaK_setli:
; Line 952
  00095	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ODGJFGDP@constructor?5too?5long?$AA@
  0009d	ff 70 08	 push	 DWORD PTR [eax+8]
  000a0	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN15@luaK_setli:
$LN13@luaK_setli:
  000a5	cc		 int	 3
_luaK_setlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_posfix
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_op$ = 12						; size = 4
_e1$ = 16						; size = 4
_e2$ = 20						; size = 4
_line$ = 24						; size = 4
_luaK_posfix PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 886
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 887
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _op$[ebp]
  00006	83 f9 14	 cmp	 ecx, 20			; 00000014H
  00009	0f 87 44 01 00
	00		 ja	 $LN1@luaK_posfi
  0000f	0f b6 81 00 00
	00 00		 movzx	 eax, BYTE PTR $LN14@luaK_posfi[ecx]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@luaK_posfi[eax*4]
$LN9@luaK_posfi:
; Line 890
  00020	8b 5d 14	 mov	 ebx, DWORD PTR _e2$[ebp]
  00023	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 _luaK_dischargevars
; Line 891
  0002d	8b 7d 10	 mov	 edi, DWORD PTR _e1$[ebp]
  00030	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  00033	ff 77 14	 push	 DWORD PTR [edi+20]
  00036	50		 push	 eax
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _luaK_concat
; Line 892
  0003d	f3 0f 6f 03	 movdqu	 xmm0, XMMWORD PTR [ebx]
; Line 928
  00041	83 c4 14	 add	 esp, 20			; 00000014H
  00044	f3 0f 7f 07	 movdqu	 XMMWORD PTR [edi], xmm0
  00048	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  0004d	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
; Line 933
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN8@luaK_posfi:
; Line 897
  00057	8b 5d 14	 mov	 ebx, DWORD PTR _e2$[ebp]
  0005a	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  0005d	53		 push	 ebx
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 _luaK_dischargevars
; Line 898
  00064	8b 7d 10	 mov	 edi, DWORD PTR _e1$[ebp]
  00067	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  0006a	ff 77 10	 push	 DWORD PTR [edi+16]
  0006d	50		 push	 eax
  0006e	56		 push	 esi
  0006f	e8 00 00 00 00	 call	 _luaK_concat
; Line 899
  00074	f3 0f 6f 03	 movdqu	 xmm0, XMMWORD PTR [ebx]
; Line 928
  00078	83 c4 14	 add	 esp, 20			; 00000014H
  0007b	f3 0f 7f 07	 movdqu	 XMMWORD PTR [edi], xmm0
  0007f	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  00084	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
; Line 933
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
$LN7@luaK_posfi:
; Line 903
  0008e	8b 7d 14	 mov	 edi, DWORD PTR _e2$[ebp]
  00091	8b 5d 08	 mov	 ebx, DWORD PTR _fs$[ebp]
  00094	57		 push	 edi
  00095	53		 push	 ebx
  00096	e8 00 00 00 00	 call	 _luaK_exp2val
  0009b	83 c4 08	 add	 esp, 8
; Line 904
  0009e	83 3f 0c	 cmp	 DWORD PTR [edi], 12	; 0000000cH
  000a1	75 4d		 jne	 SHORT $LN6@luaK_posfi
  000a3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a5	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a8	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  000ab	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  000ae	83 e0 3f	 and	 eax, 63			; 0000003fH
  000b1	3c 1d		 cmp	 al, 29			; 0000001dH
  000b3	75 3b		 jne	 SHORT $LN6@luaK_posfi
; Line 906
  000b5	8b 75 10	 mov	 esi, DWORD PTR _e1$[ebp]
  000b8	56		 push	 esi
  000b9	53		 push	 ebx
  000ba	e8 00 00 00 00	 call	 _freeexp
; Line 907
  000bf	8b 03		 mov	 eax, DWORD PTR [ebx]
  000c1	83 c4 08	 add	 esp, 8
  000c4	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000c7	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  000ca	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000cd	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000d0	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000d2	c1 e0 17	 shl	 eax, 23			; 00000017H
  000d5	81 e1 ff ff 7f
	00		 and	 ecx, 8388607		; 007fffffH
  000db	0b c8		 or	 ecx, eax
  000dd	89 0a		 mov	 DWORD PTR [edx], ecx
; Line 908
  000df	c7 06 0c 00 00
	00		 mov	 DWORD PTR [esi], 12	; 0000000cH
  000e5	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000e8	5f		 pop	 edi
  000e9	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
; Line 933
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
$LN6@luaK_posfi:
; Line 911
  000f0	57		 push	 edi
  000f1	53		 push	 ebx
  000f2	e8 00 00 00 00	 call	 _luaK_exp2nextreg
; Line 912
  000f7	ff 75 18	 push	 DWORD PTR _line$[ebp]
  000fa	57		 push	 edi
  000fb	ff 75 10	 push	 DWORD PTR _e1$[ebp]
  000fe	6a 1d		 push	 29			; 0000001dH
  00100	53		 push	 ebx
  00101	e8 00 00 00 00	 call	 _codeexpval
  00106	83 c4 1c	 add	 esp, 28			; 0000001cH
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
; Line 933
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
$LN4@luaK_posfi:
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
; Line 920
  00111	8d 41 0d	 lea	 eax, DWORD PTR [ecx+13]
  00114	89 45 0c	 mov	 DWORD PTR _op$[ebp], eax
; Line 933
  00117	5d		 pop	 ebp
; Line 920
  00118	e9 00 00 00 00	 jmp	 _codeexpval
$LN3@luaK_posfi:
; Line 924
  0011d	ff 75 14	 push	 DWORD PTR _e2$[ebp]
  00120	8d 41 12	 lea	 eax, DWORD PTR [ecx+18]
  00123	ff 75 10	 push	 DWORD PTR _e1$[ebp]
  00126	6a 01		 push	 1
; Line 928
  00128	50		 push	 eax
  00129	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  0012c	e8 00 00 00 00	 call	 _codecomp
  00131	83 c4 14	 add	 esp, 20			; 00000014H
  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
; Line 933
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
$LN2@luaK_posfi:
; Line 928
  00139	ff 75 14	 push	 DWORD PTR _e2$[ebp]
  0013c	8d 41 0f	 lea	 eax, DWORD PTR [ecx+15]
  0013f	ff 75 10	 push	 DWORD PTR _e1$[ebp]
  00142	6a 00		 push	 0
  00144	50		 push	 eax
  00145	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00148	e8 00 00 00 00	 call	 _codecomp
  0014d	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@luaK_posfi:
  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
$LN1@luaK_posfi:
; Line 933
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
  00155	8d 49 00	 npad	 3
$LN23@luaK_posfi:
  00158	00 00 00 00	 DD	 $LN4@luaK_posfi
  0015c	00 00 00 00	 DD	 $LN7@luaK_posfi
  00160	00 00 00 00	 DD	 $LN3@luaK_posfi
  00164	00 00 00 00	 DD	 $LN2@luaK_posfi
  00168	00 00 00 00	 DD	 $LN9@luaK_posfi
  0016c	00 00 00 00	 DD	 $LN8@luaK_posfi
$LN14@luaK_posfi:
  00170	00		 DB	 0
  00171	00		 DB	 0
  00172	00		 DB	 0
  00173	00		 DB	 0
  00174	00		 DB	 0
  00175	00		 DB	 0
  00176	00		 DB	 0
  00177	00		 DB	 0
  00178	00		 DB	 0
  00179	00		 DB	 0
  0017a	00		 DB	 0
  0017b	00		 DB	 0
  0017c	01		 DB	 1
  0017d	02		 DB	 2
  0017e	02		 DB	 2
  0017f	02		 DB	 2
  00180	03		 DB	 3
  00181	03		 DB	 3
  00182	03		 DB	 3
  00183	04		 DB	 4
  00184	05		 DB	 5
_luaK_posfix ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_infix
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_op$ = 12						; size = 4
_v$ = 16						; size = 4
_luaK_infix PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 855
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 856
  00003	8b 45 0c	 mov	 eax, DWORD PTR _op$[ebp]
  00006	83 f8 14	 cmp	 eax, 20			; 00000014H
  00009	77 61		 ja	 SHORT $LN1@luaK_infix
  0000b	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN22@luaK_infix[eax]
  00012	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN26@luaK_infix[eax*4]
$LN6@luaK_infix:
; Line 858
  00019	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0001c	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  0001f	e8 00 00 00 00	 call	 _luaK_goiftrue
; Line 878
  00024	83 c4 08	 add	 esp, 8
; Line 882
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN5@luaK_infix:
; Line 862
  00029	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0002c	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  0002f	e8 00 00 00 00	 call	 _luaK_goiffalse
; Line 878
  00034	83 c4 08	 add	 esp, 8
; Line 882
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
$LN4@luaK_infix:
; Line 866
  00039	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0003c	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  0003f	e8 00 00 00 00	 call	 _luaK_exp2nextreg
; Line 878
  00044	83 c4 08	 add	 esp, 8
; Line 882
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN3@luaK_infix:
; Line 874
  00049	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00052	75 0a		 jne	 SHORT $LN21@luaK_infix
  00054	8b 01		 mov	 eax, DWORD PTR [ecx]
  00056	83 e8 05	 sub	 eax, 5
  00059	74 1f		 je	 SHORT $LN7@luaK_infix
  0005b	48		 dec	 eax
  0005c	74 1c		 je	 SHORT $LN7@luaK_infix
$LN21@luaK_infix:
  0005e	51		 push	 ecx
; Line 878
  0005f	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00062	e8 00 00 00 00	 call	 _luaK_exp2RK
  00067	83 c4 08	 add	 esp, 8
; Line 882
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
$LN1@luaK_infix:
; Line 878
  0006c	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0006f	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00072	e8 00 00 00 00	 call	 _luaK_exp2RK
  00077	83 c4 08	 add	 esp, 8
$LN7@luaK_infix:
; Line 882
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN26@luaK_infix:
  0007c	00 00 00 00	 DD	 $LN3@luaK_infix
  00080	00 00 00 00	 DD	 $LN4@luaK_infix
  00084	00 00 00 00	 DD	 $LN6@luaK_infix
  00088	00 00 00 00	 DD	 $LN5@luaK_infix
  0008c	00 00 00 00	 DD	 $LN1@luaK_infix
$LN22@luaK_infix:
  00090	00		 DB	 0
  00091	00		 DB	 0
  00092	00		 DB	 0
  00093	00		 DB	 0
  00094	00		 DB	 0
  00095	00		 DB	 0
  00096	00		 DB	 0
  00097	00		 DB	 0
  00098	00		 DB	 0
  00099	00		 DB	 0
  0009a	00		 DB	 0
  0009b	00		 DB	 0
  0009c	01		 DB	 1
  0009d	04		 DB	 4
  0009e	04		 DB	 4
  0009f	04		 DB	 4
  000a0	04		 DB	 4
  000a1	04		 DB	 4
  000a2	04		 DB	 4
  000a3	02		 DB	 2
  000a4	03		 DB	 3
_luaK_infix ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_prefix
_TEXT	SEGMENT
_e2$ = -24						; size = 24
_fs$ = 8						; size = 4
_op$ = 12						; size = 4
_e$ = 16						; size = 4
_line$ = 20						; size = 4
_luaK_prefix PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 841
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; Line 844
  00006	8b 45 0c	 mov	 eax, DWORD PTR _op$[ebp]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _e2$[ebp+20], -1
  00013	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _e2$[ebp+16], -1
  0001a	c7 45 e8 06 00
	00 00		 mov	 DWORD PTR _e2$[ebp], 6
  00021	66 0f 13 45 f0	 movlpd	 QWORD PTR _e2$[ebp+8], xmm0
  00026	83 f8 03	 cmp	 eax, 3
  00029	77 32		 ja	 SHORT $LN1@luaK_prefi
  0002b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN9@luaK_prefi[eax*4]
$LN3@luaK_prefi:
; Line 846
  00032	ff 75 14	 push	 DWORD PTR _line$[ebp]
  00035	8d 4d e8	 lea	 ecx, DWORD PTR _e2$[ebp]
  00038	83 c0 19	 add	 eax, 25			; 00000019H
  0003b	51		 push	 ecx
  0003c	ff 75 10	 push	 DWORD PTR _e$[ebp]
  0003f	50		 push	 eax
  00040	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00043	e8 00 00 00 00	 call	 _codeexpval
  00048	83 c4 14	 add	 esp, 20			; 00000014H
; Line 852
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
$LN2@luaK_prefi:
; Line 849
  0004f	ff 75 10	 push	 DWORD PTR _e$[ebp]
  00052	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00055	e8 00 00 00 00	 call	 _codenot
  0005a	83 c4 08	 add	 esp, 8
$LN1@luaK_prefi:
; Line 852
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
  00061	8d 49 00	 npad	 3
$LN9@luaK_prefi:
  00064	00 00 00 00	 DD	 $LN3@luaK_prefi
  00068	00 00 00 00	 DD	 $LN3@luaK_prefi
  0006c	00 00 00 00	 DD	 $LN2@luaK_prefi
  00070	00 00 00 00	 DD	 $LN3@luaK_prefi
_luaK_prefix ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_getlabel
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_luaK_getlabel PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 111
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 112
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00009	89 41 14	 mov	 DWORD PTR [ecx+20], eax
; Line 114
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
_luaK_getlabel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_concat
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_l1$ = 12						; size = 4
_l2$ = 16						; size = 4
_luaK_concat PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 215
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 216
  00004	8b 75 10	 mov	 esi, DWORD PTR _l2$[ebp]
  00007	83 fe ff	 cmp	 esi, -1
  0000a	74 5f		 je	 SHORT $LN14@luaK_conca
; Line 217
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _l1$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	83 f9 ff	 cmp	 ecx, -1
  00014	75 05		 jne	 SHORT $LN4@luaK_conca
; Line 218
  00016	89 30		 mov	 DWORD PTR [eax], esi
  00018	5e		 pop	 esi
; Line 226
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN4@luaK_conca:
  0001b	53		 push	 ebx
; Line 222
  0001c	8b 5d 08	 mov	 ebx, DWORD PTR _fs$[ebp]
  0001f	57		 push	 edi
  00020	8b 03		 mov	 eax, DWORD PTR [ebx]
  00022	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
$LL2@luaK_conca:
  00025	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00028	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  0002b	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
  00030	83 f8 ff	 cmp	 eax, -1
  00033	74 0c		 je	 SHORT $LN20@luaK_conca
  00035	40		 inc	 eax
  00036	03 c1		 add	 eax, ecx
  00038	83 f8 ff	 cmp	 eax, -1
  0003b	74 04		 je	 SHORT $LN20@luaK_conca
; Line 223
  0003d	8b c8		 mov	 ecx, eax
  0003f	eb e4		 jmp	 SHORT $LL2@luaK_conca
$LN20@luaK_conca:
; Line 224
  00041	2b f1		 sub	 esi, ecx
  00043	8d 3c 8a	 lea	 edi, DWORD PTR [edx+ecx*4]
  00046	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00049	99		 cdq
  0004a	33 c2		 xor	 eax, edx
  0004c	2b c2		 sub	 eax, edx
  0004e	3d ff ff 01 00	 cmp	 eax, 131071		; 0001ffffH
  00053	7f 19		 jg	 SHORT $LN22@luaK_conca
  00055	8b 07		 mov	 eax, DWORD PTR [edi]
  00057	8d 8e fe ff 01
	00		 lea	 ecx, DWORD PTR [esi+131070]
  0005d	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00060	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH
  00065	33 c8		 xor	 ecx, eax
  00067	89 0f		 mov	 DWORD PTR [edi], ecx
  00069	5f		 pop	 edi
  0006a	5b		 pop	 ebx
$LN14@luaK_conca:
  0006b	5e		 pop	 esi
; Line 226
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN22@luaK_conca:
; Line 224
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@
  00073	ff 73 08	 push	 DWORD PTR [ebx+8]
  00076	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN24@luaK_conca:
$LN21@luaK_conca:
  0007b	cc		 int	 3
_luaK_concat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_patchclose
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_list$ = 12						; size = 4
_level$ = 16						; size = 4
_luaK_patchclose PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 196
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 197
  00003	8b 45 10	 mov	 eax, DWORD PTR _level$[ebp]
; Line 198
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _list$[ebp]
  00009	40		 inc	 eax
  0000a	83 f9 ff	 cmp	 ecx, -1
  0000d	74 43		 je	 SHORT $LN1@luaK_patch
  0000f	53		 push	 ebx
  00010	8b 5d 08	 mov	 ebx, DWORD PTR _fs$[ebp]
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	0f b6 f8	 movzx	 edi, al
  00018	c1 e7 06	 shl	 edi, 6
  0001b	eb 03 8d 49 00	 npad	 5
$LL2@luaK_patch:
; Line 199
  00020	8b 03		 mov	 eax, DWORD PTR [ebx]
  00022	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00025	8d 34 88	 lea	 esi, DWORD PTR [eax+ecx*4]
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	8b d0		 mov	 edx, eax
  0002c	c1 ea 0e	 shr	 edx, 14			; 0000000eH
  0002f	81 ea ff ff 01
	00		 sub	 edx, 131071		; 0001ffffH
  00035	83 fa ff	 cmp	 edx, -1
  00038	75 04		 jne	 SHORT $LN6@luaK_patch
  0003a	0b ca		 or	 ecx, edx
  0003c	eb 03		 jmp	 SHORT $LN5@luaK_patch
$LN6@luaK_patch:
  0003e	41		 inc	 ecx
  0003f	03 ca		 add	 ecx, edx
$LN5@luaK_patch:
; Line 203
  00041	25 3f c0 ff ff	 and	 eax, -16321		; ffffc03fH
  00046	0b c7		 or	 eax, edi
  00048	89 06		 mov	 DWORD PTR [esi], eax
  0004a	83 f9 ff	 cmp	 ecx, -1
  0004d	75 d1		 jne	 SHORT $LL2@luaK_patch
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
$LN1@luaK_patch:
; Line 206
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_luaK_patchclose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_patchtohere
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_list$ = 12						; size = 4
_luaK_patchtohere PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 209
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 210
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
; Line 211
  00006	ff 75 0c	 push	 DWORD PTR _list$[ebp]
  00009	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000c	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000f	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00012	50		 push	 eax
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 _luaK_concat
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 212
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_luaK_patchtohere ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_patchlist
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_list$ = 12						; size = 4
_target$ = 16						; size = 4
_luaK_patchlist PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 186
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 187
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR _target$[ebp]
  00009	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0000c	3b c2		 cmp	 eax, edx
  0000e	75 15		 jne	 SHORT $LN2@luaK_patch
; Line 188
  00010	ff 75 0c	 push	 DWORD PTR _list$[ebp]
  00013	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00016	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 _luaK_concat
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 193
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN2@luaK_patch:
; Line 191
  00025	50		 push	 eax
  00026	68 ff 00 00 00	 push	 255			; 000000ffH
  0002b	50		 push	 eax
  0002c	ff 75 0c	 push	 DWORD PTR _list$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _patchlistaux
  00035	83 c4 14	 add	 esp, 20			; 00000014H
; Line 193
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_luaK_patchlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_ret
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_first$ = 12						; size = 4
_nret$ = 16						; size = 4
_luaK_ret PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 86
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 87
  00003	8b 4d 10	 mov	 ecx, DWORD PTR _nret$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _first$[ebp]
  00009	c1 e0 06	 shl	 eax, 6
  0000c	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0000f	c1 e1 17	 shl	 ecx, 23			; 00000017H
  00012	0b c8		 or	 ecx, eax
  00014	83 c9 26	 or	 ecx, 38			; 00000026H
  00017	51		 push	 ecx
  00018	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  0001b	e8 00 00 00 00	 call	 _luaK_code
  00020	83 c4 08	 add	 esp, 8
; Line 88
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_luaK_ret ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_jump
_TEXT	SEGMENT
_j$ = 8							; size = 4
_fs$ = 8						; size = 4
_luaK_jump PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 76
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 77
  00005	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
; Line 80
  00008	68 1e 80 ff 7f	 push	 2147450910		; 7fff801eH
  0000d	57		 push	 edi
  0000e	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  00011	c7 47 18 ff ff
	ff ff		 mov	 DWORD PTR [edi+24], -1
  00018	e8 00 00 00 00	 call	 _luaK_code
  0001d	89 45 08	 mov	 DWORD PTR _j$[ebp], eax
; Line 81
  00020	8d 45 08	 lea	 eax, DWORD PTR _j$[ebp]
  00023	56		 push	 esi
  00024	50		 push	 eax
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 _luaK_concat
; Line 82
  0002b	8b 45 08	 mov	 eax, DWORD PTR _j$[ebp]
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
; Line 83
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_luaK_jump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_setoneret
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_luaK_setoneret PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 395
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 396
  00003	8b 55 0c	 mov	 edx, DWORD PTR _e$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  0000b	75 21		 jne	 SHORT $LN3@luaK_seton
; Line 398
  0000d	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  00010	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00013	c7 02 07 00 00
	00		 mov	 DWORD PTR [edx], 7
  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0001e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00021	c1 e8 06	 shr	 eax, 6
  00024	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00029	89 42 08	 mov	 DWORD PTR [edx+8], eax
; Line 404
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN3@luaK_seton:
; Line 400
  0002e	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00031	75 22		 jne	 SHORT $LN1@luaK_seton
; Line 401
  00033	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  00036	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
  0003b	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0003e	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	25 ff ff 7f 00	 and	 eax, 8388607		; 007fffffH
  00048	0d 00 00 00 01	 or	 eax, 16777216		; 01000000H
  0004d	89 01		 mov	 DWORD PTR [ecx], eax
; Line 402
  0004f	c7 02 0c 00 00
	00		 mov	 DWORD PTR [edx], 12	; 0000000cH
$LN1@luaK_seton:
; Line 404
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_luaK_setoneret ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_setreturns
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_nresults$ = 16						; size = 4
_luaK_setreturns PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 383
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; Line 384
  00004	8b 7d 0c	 mov	 edi, DWORD PTR _e$[ebp]
  00007	8b 07		 mov	 eax, DWORD PTR [edi]
  00009	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  0000c	75 21		 jne	 SHORT $LN3@luaK_setre
; Line 385
  0000e	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  00011	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00014	5f		 pop	 edi
  00015	8b 00		 mov	 eax, DWORD PTR [eax]
  00017	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0001a	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  0001d	8b 45 10	 mov	 eax, DWORD PTR _nresults$[ebp]
  00020	40		 inc	 eax
  00021	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00024	33 01		 xor	 eax, DWORD PTR [ecx]
  00026	25 00 c0 7f 00	 and	 eax, 8372224		; 007fc000H
  0002b	31 01		 xor	 DWORD PTR [ecx], eax
; Line 392
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN3@luaK_setre:
; Line 387
  0002f	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00032	75 5e		 jne	 SHORT $LN6@luaK_setre
; Line 388
  00034	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00037	56		 push	 esi
  00038	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  0003b	8b 06		 mov	 eax, DWORD PTR [esi]
  0003d	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00040	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00043	8b 4d 10	 mov	 ecx, DWORD PTR _nresults$[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	25 ff ff 7f 00	 and	 eax, 8388607		; 007fffffH
  0004d	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00050	c1 e1 17	 shl	 ecx, 23			; 00000017H
  00053	33 c8		 xor	 ecx, eax
  00055	89 0a		 mov	 DWORD PTR [edx], ecx
; Line 389
  00057	8b 06		 mov	 eax, DWORD PTR [esi]
  00059	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0005c	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0005f	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00062	0f b6 4e 2c	 movzx	 ecx, BYTE PTR [esi+44]
  00066	8b 02		 mov	 eax, DWORD PTR [edx]
  00068	c1 e1 06	 shl	 ecx, 6
  0006b	25 3f c0 ff ff	 and	 eax, -16321		; ffffc03fH
  00070	0b c8		 or	 ecx, eax
  00072	89 0a		 mov	 DWORD PTR [edx], ecx
; Line 390
  00074	8b 16		 mov	 edx, DWORD PTR [esi]
  00076	0f b6 4e 2c	 movzx	 ecx, BYTE PTR [esi+44]
  0007a	41		 inc	 ecx
  0007b	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  0007f	3b c8		 cmp	 ecx, eax
  00081	7e 0b		 jle	 SHORT $LN9@luaK_setre
  00083	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00089	7d 0a		 jge	 SHORT $LN15@luaK_setre
  0008b	88 4a 08	 mov	 BYTE PTR [edx+8], cl
$LN9@luaK_setre:
  0008e	fe 46 2c	 inc	 BYTE PTR [esi+44]
  00091	5e		 pop	 esi
$LN6@luaK_setre:
  00092	5f		 pop	 edi
; Line 392
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
$LN15@luaK_setre:
; Line 390
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  0009a	ff 76 08	 push	 DWORD PTR [esi+8]
  0009d	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN17@luaK_setre:
$LN14@luaK_setre:
  000a2	cc		 int	 3
_luaK_setreturns ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_storevar
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_var$ = 12						; size = 4
_ex$ = 16						; size = 4
_luaK_storevar PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 592
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 593
  00005	8b 7d 0c	 mov	 edi, DWORD PTR _var$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	83 e8 08	 sub	 eax, 8
  0000d	0f 84 8a 00 00
	00		 je	 $LN4@luaK_store
  00013	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  00016	48		 dec	 eax
  00017	74 41		 je	 SHORT $LN3@luaK_store
  00019	48		 dec	 eax
  0001a	75 5f		 jne	 SHORT $LN5@luaK_store
; Line 606
  0001c	53		 push	 ebx
  0001d	ff 75 10	 push	 DWORD PTR _ex$[ebp]
  00020	33 db		 xor	 ebx, ebx
  00022	80 7f 0b 08	 cmp	 BYTE PTR [edi+11], 8
  00026	56		 push	 esi
  00027	0f 94 c3	 sete	 bl
  0002a	8d 1c 5d 08 00
	00 00		 lea	 ebx, DWORD PTR [ebx*2+8]
  00031	e8 00 00 00 00	 call	 _luaK_exp2RK
  00036	0f bf 4f 08	 movsx	 ecx, WORD PTR [edi+8]
; Line 607
  0003a	c1 e1 09	 shl	 ecx, 9
  0003d	0b c8		 or	 ecx, eax
  0003f	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  00043	c1 e1 08	 shl	 ecx, 8
  00046	0b c8		 or	 ecx, eax
  00048	c1 e1 06	 shl	 ecx, 6
  0004b	0b cb		 or	 ecx, ebx
  0004d	51		 push	 ecx
  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 _luaK_code
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	5b		 pop	 ebx
; Line 608
  00058	eb 21		 jmp	 SHORT $LN5@luaK_store
$LN3@luaK_store:
; Line 600
  0005a	ff 75 10	 push	 DWORD PTR _ex$[ebp]
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 _luaK_exp2anyreg
; Line 601
  00063	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00066	c1 e1 11	 shl	 ecx, 17			; 00000011H
  00069	0b c8		 or	 ecx, eax
  0006b	c1 e1 06	 shl	 ecx, 6
  0006e	83 c9 09	 or	 ecx, 9
  00071	51		 push	 ecx
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 _luaK_code
  00078	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@luaK_store:
; Line 615
  0007b	8b 45 10	 mov	 eax, DWORD PTR _ex$[ebp]
  0007e	83 38 07	 cmp	 DWORD PTR [eax], 7
  00081	75 48		 jne	 SHORT $LN22@luaK_store
  00083	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00086	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0008c	75 3d		 jne	 SHORT $LN22@luaK_store
  0008e	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  00092	3b c8		 cmp	 ecx, eax
  00094	7c 35		 jl	 SHORT $LN22@luaK_store
  00096	fe 4e 2c	 dec	 BYTE PTR [esi+44]
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
; Line 616
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
$LN4@luaK_store:
; Line 595
  0009d	8b 55 10	 mov	 edx, DWORD PTR _ex$[ebp]
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
  000a3	83 3a 07	 cmp	 DWORD PTR [edx], 7
  000a6	75 16		 jne	 SHORT $LN12@luaK_store
  000a8	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  000ab	f7 c6 00 01 00
	00		 test	 esi, 256		; 00000100H
  000b1	75 0b		 jne	 SHORT $LN12@luaK_store
  000b3	0f b6 41 2a	 movzx	 eax, BYTE PTR [ecx+42]
  000b7	3b f0		 cmp	 esi, eax
  000b9	7c 03		 jl	 SHORT $LN12@luaK_store
  000bb	fe 49 2c	 dec	 BYTE PTR [ecx+44]
$LN12@luaK_store:
; Line 596
  000be	ff 77 08	 push	 DWORD PTR [edi+8]
  000c1	52		 push	 edx
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 _exp2reg
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 615
$LN22@luaK_store:
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
; Line 616
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_luaK_storevar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_goiffalse
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_luaK_goiffalse PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 679
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 681
  00004	8b 75 0c	 mov	 esi, DWORD PTR _e$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _luaK_dischargevars
; Line 682
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	83 c4 08	 add	 esp, 8
  00017	48		 dec	 eax
  00018	74 1d		 je	 SHORT $LN2@luaK_goiff
  0001a	83 e8 02	 sub	 eax, 2
  0001d	74 18		 je	 SHORT $LN2@luaK_goiff
  0001f	83 e8 08	 sub	 eax, 8
  00022	74 0e		 je	 SHORT $LN3@luaK_goiff
; Line 692
  00024	6a 01		 push	 1
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 _jumponcond
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 693
  00030	eb 08		 jmp	 SHORT $LN4@luaK_goiff
$LN3@luaK_goiff:
; Line 684
  00032	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; Line 685
  00035	eb 03		 jmp	 SHORT $LN4@luaK_goiff
$LN2@luaK_goiff:
; Line 688
  00037	83 c8 ff	 or	 eax, -1
$LN4@luaK_goiff:
; Line 696
  0003a	50		 push	 eax
  0003b	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0003e	50		 push	 eax
  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 _luaK_concat
; Line 697
  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0004b	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0004e	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  00051	51		 push	 ecx
  00052	50		 push	 eax
  00053	57		 push	 edi
  00054	e8 00 00 00 00	 call	 _luaK_concat
  00059	83 c4 18	 add	 esp, 24			; 00000018H
; Line 698
  0005c	c7 46 14 ff ff
	ff ff		 mov	 DWORD PTR [esi+20], -1
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
; Line 699
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_luaK_goiffalse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_goiftrue
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_luaK_goiftrue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 655
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 657
  00004	8b 75 0c	 mov	 esi, DWORD PTR _e$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _luaK_dischargevars
; Line 658
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	83 c4 08	 add	 esp, 8
  00017	83 c0 fe	 add	 eax, -2			; fffffffeH
  0001a	83 f8 09	 cmp	 eax, 9
  0001d	77 22		 ja	 SHORT $LN1@luaK_goift
  0001f	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN12@luaK_goift[eax]
  00026	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@luaK_goift[eax*4]
$LN3@luaK_goift:
; Line 660
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 _invertjump
; Line 661
  00034	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00037	83 c4 08	 add	 esp, 8
; Line 662
  0003a	eb 11		 jmp	 SHORT $LN4@luaK_goift
$LN2@luaK_goift:
; Line 665
  0003c	83 c8 ff	 or	 eax, -1
; Line 666
  0003f	eb 0c		 jmp	 SHORT $LN4@luaK_goift
$LN1@luaK_goift:
; Line 669
  00041	6a 00		 push	 0
  00043	56		 push	 esi
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 _jumponcond
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@luaK_goift:
; Line 673
  0004d	50		 push	 eax
  0004e	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00051	50		 push	 eax
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 _luaK_concat
; Line 674
  00058	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0005b	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0005e	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00061	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  00064	51		 push	 ecx
  00065	50		 push	 eax
  00066	57		 push	 edi
  00067	e8 00 00 00 00	 call	 _luaK_concat
  0006c	83 c4 18	 add	 esp, 24			; 00000018H
; Line 675
  0006f	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
; Line 676
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
  0007a	8b ff		 npad	 2
$LN14@luaK_goift:
  0007c	00 00 00 00	 DD	 $LN2@luaK_goift
  00080	00 00 00 00	 DD	 $LN3@luaK_goift
  00084	00 00 00 00	 DD	 $LN1@luaK_goift
$LN12@luaK_goift:
  00088	00		 DB	 0
  00089	02		 DB	 2
  0008a	00		 DB	 0
  0008b	00		 DB	 0
  0008c	00		 DB	 0
  0008d	02		 DB	 2
  0008e	02		 DB	 2
  0008f	02		 DB	 2
  00090	02		 DB	 2
  00091	01		 DB	 1
_luaK_goiftrue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_indexed
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_t$ = 12						; size = 4
_k$ = 16						; size = 4
_luaK_indexed PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 737
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 739
  00004	8b 75 0c	 mov	 esi, DWORD PTR _t$[ebp]
; Line 740
  00007	ff 75 10	 push	 DWORD PTR _k$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  0000d	8a 46 08	 mov	 al, BYTE PTR [esi+8]
  00010	88 46 0a	 mov	 BYTE PTR [esi+10], al
  00013	e8 00 00 00 00	 call	 _luaK_exp2RK
  00018	83 c4 08	 add	 esp, 8
  0001b	66 89 46 08	 mov	 WORD PTR [esi+8], ax
; Line 742
  0001f	83 3e 09	 cmp	 DWORD PTR [esi], 9
; Line 743
  00022	c7 06 0a 00 00
	00		 mov	 DWORD PTR [esi], 10	; 0000000aH
  00028	0f 94 c0	 sete	 al
  0002b	04 08		 add	 al, 8
  0002d	88 46 0b	 mov	 BYTE PTR [esi+11], al
  00030	5e		 pop	 esi
; Line 744
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_luaK_indexed ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_self
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_key$ = 16						; size = 4
_luaK_self PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 619
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 621
  00004	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _e$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _luaK_dischargevars
  00012	83 c4 08	 add	 esp, 8
  00015	83 3f 07	 cmp	 DWORD PTR [edi], 7
  00018	75 20		 jne	 SHORT $LN3@luaK_self
  0001a	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0001d	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00020	74 22		 je	 SHORT $LN6@luaK_self
  00022	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  00026	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00029	3b c8		 cmp	 ecx, eax
  0002b	7c 0d		 jl	 SHORT $LN3@luaK_self
  0002d	51		 push	 ecx
  0002e	57		 push	 edi
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _exp2reg
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
  00038	eb 0a		 jmp	 SHORT $LN6@luaK_self
$LN3@luaK_self:
  0003a	57		 push	 edi
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  00041	83 c4 08	 add	 esp, 8
$LN6@luaK_self:
; Line 623
  00044	83 3f 07	 cmp	 DWORD PTR [edi], 7
  00047	53		 push	 ebx
  00048	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0004b	75 13		 jne	 SHORT $LN11@luaK_self
  0004d	f7 c3 00 01 00
	00		 test	 ebx, 256		; 00000100H
  00053	75 0b		 jne	 SHORT $LN11@luaK_self
  00055	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  00059	3b d8		 cmp	 ebx, eax
  0005b	7c 03		 jl	 SHORT $LN11@luaK_self
  0005d	fe 4e 2c	 dec	 BYTE PTR [esi+44]
$LN11@luaK_self:
; Line 624
  00060	0f b6 46 2c	 movzx	 eax, BYTE PTR [esi+44]
  00064	89 47 08	 mov	 DWORD PTR [edi+8], eax
; Line 625
  00067	c7 07 07 00 00
	00		 mov	 DWORD PTR [edi], 7
; Line 626
  0006d	8b 16		 mov	 edx, DWORD PTR [esi]
  0006f	0f b6 4e 2c	 movzx	 ecx, BYTE PTR [esi+44]
  00073	83 c1 02	 add	 ecx, 2
  00076	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  0007a	3b c8		 cmp	 ecx, eax
  0007c	7e 0b		 jle	 SHORT $LN17@luaK_self
  0007e	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00084	7d 4e		 jge	 SHORT $LN31@luaK_self
  00086	88 4a 08	 mov	 BYTE PTR [edx+8], cl
$LN17@luaK_self:
; Line 627
  00089	ff 75 10	 push	 DWORD PTR _key$[ebp]
  0008c	80 46 2c 02	 add	 BYTE PTR [esi+44], 2
  00090	56		 push	 esi
  00091	e8 00 00 00 00	 call	 _luaK_exp2RK
  00096	c1 e3 09	 shl	 ebx, 9
  00099	0b d8		 or	 ebx, eax
  0009b	c1 e3 08	 shl	 ebx, 8
  0009e	0b 5f 08	 or	 ebx, DWORD PTR [edi+8]
  000a1	c1 e3 06	 shl	 ebx, 6
  000a4	83 cb 0c	 or	 ebx, 12			; 0000000cH
  000a7	53		 push	 ebx
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 _luaK_code
; Line 628
  000ae	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
  000b4	83 38 07	 cmp	 DWORD PTR [eax], 7
  000b7	5b		 pop	 ebx
  000b8	75 16		 jne	 SHORT $LN27@luaK_self
  000ba	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000bd	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  000c3	75 0b		 jne	 SHORT $LN27@luaK_self
  000c5	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  000c9	3b c8		 cmp	 ecx, eax
  000cb	7c 03		 jl	 SHORT $LN27@luaK_self
  000cd	fe 4e 2c	 dec	 BYTE PTR [esi+44]
$LN27@luaK_self:
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
; Line 629
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
$LN31@luaK_self:
; Line 626
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  000d9	ff 76 08	 push	 DWORD PTR [esi+8]
  000dc	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN33@luaK_self:
$LN30@luaK_self:
  000e1	cc		 int	 3
_luaK_self ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_exp2RK
_TEXT	SEGMENT
_v$1 = -32						; size = 16
_o$2 = -16						; size = 16
_o$3 = -16						; size = 16
_k$4 = -16						; size = 16
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_luaK_exp2RK PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 556
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
; Line 557
  00007	8b 75 0c	 mov	 esi, DWORD PTR _e$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	e8 00 00 00 00	 call	 _luaK_exp2val
; Line 558
  00015	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00017	83 c4 08	 add	 esp, 8
  0001a	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0001d	83 f8 05	 cmp	 eax, 5
  00020	0f 87 ac 00 00
	00		 ja	 $LN3@luaK_exp2R
  00026	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN32@luaK_exp2R[eax*4]
$LN9@luaK_exp2R:
; Line 562
  0002d	81 7f 1c ff 00
	00 00		 cmp	 DWORD PTR [edi+28], 255	; 000000ffH
  00034	0f 8f 98 00 00
	00		 jg	 $LN3@luaK_exp2R
; Line 563
  0003a	83 f9 01	 cmp	 ecx, 1
  0003d	75 1c		 jne	 SHORT $LN14@luaK_exp2R
  0003f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00042	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _v$1[ebp+8], 0
  00049	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0004c	89 45 f0	 mov	 DWORD PTR _k$4[ebp], eax
  0004f	8d 45 e0	 lea	 eax, DWORD PTR _v$1[ebp]
  00052	c7 45 f8 45 00
	00 00		 mov	 DWORD PTR _k$4[ebp+8], 69 ; 00000045H
  00059	eb 15		 jmp	 SHORT $LN27@luaK_exp2R
$LN14@luaK_exp2R:
  0005b	33 c0		 xor	 eax, eax
  0005d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _o$3[ebp+8], 1
  00064	83 f9 02	 cmp	 ecx, 2
  00067	0f 94 c0	 sete	 al
  0006a	89 45 f0	 mov	 DWORD PTR _o$3[ebp], eax
  0006d	8d 45 f0	 lea	 eax, DWORD PTR _o$3[ebp]
$LN27@luaK_exp2R:
  00070	50		 push	 eax
  00071	8d 45 f0	 lea	 eax, DWORD PTR _o$3[ebp]
  00074	50		 push	 eax
  00075	57		 push	 edi
  00076	e8 00 00 00 00	 call	 _addk
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007e	89 46 08	 mov	 DWORD PTR [esi+8], eax
; Line 564
  00081	c7 06 04 00 00
	00		 mov	 DWORD PTR [esi], 4
$LN30@luaK_exp2R:
; Line 565
  00087	5f		 pop	 edi
  00088	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  0008d	5e		 pop	 esi
; Line 589
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
$LN7@luaK_exp2R:
; Line 570
  00092	ff 76 0c	 push	 DWORD PTR [esi+12]
  00095	ff 76 08	 push	 DWORD PTR [esi+8]
  00098	57		 push	 edi
  00099	e8 00 00 00 00	 call	 _luaK_intK
; Line 572
  0009e	eb 1c		 jmp	 SHORT $LN28@luaK_exp2R
$LN5@luaK_exp2R:
; Line 575
  000a0	f2 0f 10 46 08	 movsd	 xmm0, QWORD PTR [esi+8]
  000a5	8d 45 f0	 lea	 eax, DWORD PTR _o$2[ebp]
  000a8	50		 push	 eax
  000a9	50		 push	 eax
  000aa	57		 push	 edi
  000ab	f2 0f 11 45 f0	 movsd	 QWORD PTR _o$2[ebp], xmm0
  000b0	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _o$2[ebp+8], 3
  000b7	e8 00 00 00 00	 call	 _addk
$LN28@luaK_exp2R:
; Line 576
  000bc	c7 06 04 00 00
	00		 mov	 DWORD PTR [esi], 4
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c5	89 46 08	 mov	 DWORD PTR [esi+8], eax
$vk$33:
; Line 581
  000c8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000cb	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  000d0	7e b5		 jle	 SHORT $LN30@luaK_exp2R
$LN3@luaK_exp2R:
; Line 588
  000d2	56		 push	 esi
  000d3	57		 push	 edi
  000d4	e8 00 00 00 00	 call	 _luaK_dischargevars
  000d9	83 c4 08	 add	 esp, 8
  000dc	83 3e 07	 cmp	 DWORD PTR [esi], 7
  000df	75 27		 jne	 SHORT $LN22@luaK_exp2R
  000e1	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000e4	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  000e7	74 29		 je	 SHORT $LN29@luaK_exp2R
  000e9	0f b6 47 2a	 movzx	 eax, BYTE PTR [edi+42]
  000ed	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000f0	3b c8		 cmp	 ecx, eax
  000f2	7c 14		 jl	 SHORT $LN22@luaK_exp2R
  000f4	51		 push	 ecx
  000f5	56		 push	 esi
  000f6	57		 push	 edi
  000f7	e8 00 00 00 00	 call	 _exp2reg
  000fc	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
; Line 589
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
; Line 588
$LN22@luaK_exp2R:
  00108	56		 push	 esi
  00109	57		 push	 edi
  0010a	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  0010f	83 c4 08	 add	 esp, 8
$LN29@luaK_exp2R:
  00112	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
; Line 589
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
  0011b	90		 npad	 1
$LN32@luaK_exp2R:
  0011c	00 00 00 00	 DD	 $LN9@luaK_exp2R
  00120	00 00 00 00	 DD	 $LN9@luaK_exp2R
  00124	00 00 00 00	 DD	 $LN9@luaK_exp2R
  00128	00 00 00 00	 DD	 $vk$33
  0012c	00 00 00 00	 DD	 $LN5@luaK_exp2R
  00130	00 00 00 00	 DD	 $LN7@luaK_exp2R
_luaK_exp2RK ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_exp2val
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_luaK_exp2val PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 548
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 549
  00004	8b 75 0c	 mov	 esi, DWORD PTR _e$[ebp]
  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0000d	74 43		 je	 SHORT $LN2@luaK_exp2v
; Line 550
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 _luaK_dischargevars
  0001a	83 c4 08	 add	 esp, 8
  0001d	83 3e 07	 cmp	 DWORD PTR [esi], 7
  00020	75 22		 jne	 SHORT $LN5@luaK_exp2v
  00022	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00025	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00028	74 16		 je	 SHORT $LN10@luaK_exp2v
  0002a	0f b6 47 2a	 movzx	 eax, BYTE PTR [edi+42]
  0002e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00031	3b c8		 cmp	 ecx, eax
  00033	7c 0f		 jl	 SHORT $LN5@luaK_exp2v
  00035	51		 push	 ecx
  00036	56		 push	 esi
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 _exp2reg
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@luaK_exp2v:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
; Line 553
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
; Line 550
$LN5@luaK_exp2v:
  00044	56		 push	 esi
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  0004b	83 c4 08	 add	 esp, 8
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
; Line 553
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN2@luaK_exp2v:
; Line 552
  00052	56		 push	 esi
  00053	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00056	e8 00 00 00 00	 call	 _luaK_dischargevars
  0005b	83 c4 08	 add	 esp, 8
  0005e	5e		 pop	 esi
; Line 553
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_luaK_exp2val ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_exp2nextreg
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_luaK_exp2nextreg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 520
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 521
  00004	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _e$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _luaK_dischargevars
  00012	83 c4 08	 add	 esp, 8
; Line 522
  00015	83 3f 07	 cmp	 DWORD PTR [edi], 7
  00018	75 16		 jne	 SHORT $LN6@luaK_exp2n
  0001a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001d	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  00023	75 0b		 jne	 SHORT $LN6@luaK_exp2n
  00025	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  00029	3b c8		 cmp	 ecx, eax
  0002b	7c 03		 jl	 SHORT $LN6@luaK_exp2n
  0002d	fe 4e 2c	 dec	 BYTE PTR [esi+44]
$LN6@luaK_exp2n:
; Line 523
  00030	8b 16		 mov	 edx, DWORD PTR [esi]
  00032	0f b6 4e 2c	 movzx	 ecx, BYTE PTR [esi+44]
  00036	41		 inc	 ecx
  00037	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  0003b	3b c8		 cmp	 ecx, eax
  0003d	7e 0b		 jle	 SHORT $LN12@luaK_exp2n
  0003f	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00045	7d 1a		 jge	 SHORT $LN18@luaK_exp2n
  00047	88 4a 08	 mov	 BYTE PTR [edx+8], cl
$LN12@luaK_exp2n:
  0004a	fe 46 2c	 inc	 BYTE PTR [esi+44]
; Line 524
  0004d	0f b6 46 2c	 movzx	 eax, BYTE PTR [esi+44]
  00051	48		 dec	 eax
  00052	50		 push	 eax
  00053	57		 push	 edi
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 _exp2reg
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
; Line 525
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN18@luaK_exp2n:
; Line 523
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  00066	ff 76 08	 push	 DWORD PTR [esi+8]
  00069	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN20@luaK_exp2n:
$LN17@luaK_exp2n:
  0006e	cc		 int	 3
_luaK_exp2nextreg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_exp2anyregup
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_luaK_exp2anyregup PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 542
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 543
  00004	8b 75 0c	 mov	 esi, DWORD PTR _e$[ebp]
  00007	83 3e 09	 cmp	 DWORD PTR [esi], 9
  0000a	75 08		 jne	 SHORT $LN1@luaK_exp2a
  0000c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000f	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00012	74 40		 je	 SHORT $LN8@luaK_exp2a
$LN1@luaK_exp2a:
  00014	57		 push	 edi
; Line 544
  00015	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 _luaK_dischargevars
  0001f	83 c4 08	 add	 esp, 8
  00022	83 3e 07	 cmp	 DWORD PTR [esi], 7
  00025	75 22		 jne	 SHORT $LN5@luaK_exp2a
  00027	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002a	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0002d	74 24		 je	 SHORT $LN10@luaK_exp2a
  0002f	0f b6 47 2a	 movzx	 eax, BYTE PTR [edi+42]
  00033	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00036	3b c8		 cmp	 ecx, eax
  00038	7c 0f		 jl	 SHORT $LN5@luaK_exp2a
  0003a	51		 push	 ecx
  0003b	56		 push	 esi
  0003c	57		 push	 edi
  0003d	e8 00 00 00 00	 call	 _exp2reg
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
; Line 545
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
; Line 544
$LN5@luaK_exp2a:
  00049	56		 push	 esi
  0004a	57		 push	 edi
  0004b	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  00050	83 c4 08	 add	 esp, 8
$LN10@luaK_exp2a:
  00053	5f		 pop	 edi
$LN8@luaK_exp2a:
  00054	5e		 pop	 esi
; Line 545
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_luaK_exp2anyregup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_exp2anyreg
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_luaK_exp2anyreg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 528
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 529
  00004	8b 75 0c	 mov	 esi, DWORD PTR _e$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _luaK_dischargevars
  00012	83 c4 08	 add	 esp, 8
; Line 530
  00015	83 3e 07	 cmp	 DWORD PTR [esi], 7
  00018	75 25		 jne	 SHORT $LN1@luaK_exp2a
; Line 531
  0001a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0001d	3b 4e 14	 cmp	 ecx, DWORD PTR [esi+20]
  00020	74 27		 je	 SHORT $LN6@luaK_exp2a
; Line 532
  00022	0f b6 47 2a	 movzx	 eax, BYTE PTR [edi+42]
  00026	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00029	3b c8		 cmp	 ecx, eax
  0002b	7c 12		 jl	 SHORT $LN1@luaK_exp2a
; Line 533
  0002d	51		 push	 ecx
  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	e8 00 00 00 00	 call	 _exp2reg
; Line 538
  00035	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
; Line 539
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN1@luaK_exp2a:
; Line 537
  0003f	56		 push	 esi
  00040	57		 push	 edi
  00041	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  00046	83 c4 08	 add	 esp, 8
$LN6@luaK_exp2a:
; Line 538
  00049	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
; Line 539
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_luaK_exp2anyreg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_dischargevars
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_e$ = 12						; size = 4
_luaK_dischargevars PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 407
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 408
  00004	8b 75 0c	 mov	 esi, DWORD PTR _e$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	83 c0 f8	 add	 eax, -8			; fffffff8H
  0000c	83 f8 06	 cmp	 eax, 6
  0000f	0f 87 a8 00 00
	00		 ja	 $LN1@luaK_disch
  00015	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@luaK_disch[eax*4]
$LN6@luaK_disch:
; Line 410
  0001c	c7 06 07 00 00
	00		 mov	 DWORD PTR [esi], 7
  00022	5e		 pop	 esi
; Line 436
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN5@luaK_disch:
; Line 414
  00025	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00028	c1 e0 17	 shl	 eax, 23			; 00000017H
  0002b	83 c8 05	 or	 eax, 5
  0002e	50		 push	 eax
  0002f	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00032	e8 00 00 00 00	 call	 _luaK_code
; Line 431
  00037	83 c4 08	 add	 esp, 8
  0003a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003d	c7 06 0c 00 00
	00		 mov	 DWORD PTR [esi], 12	; 0000000cH
  00043	5e		 pop	 esi
; Line 436
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN4@luaK_disch:
; Line 420
  00046	0f bf 4e 08	 movsx	 ecx, WORD PTR [esi+8]
  0004a	8b 55 08	 mov	 edx, DWORD PTR _fs$[ebp]
  0004d	57		 push	 edi
  0004e	bf 06 00 00 00	 mov	 edi, 6
  00053	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  00059	75 0b		 jne	 SHORT $LN13@luaK_disch
  0005b	0f b6 42 2a	 movzx	 eax, BYTE PTR [edx+42]
  0005f	3b c8		 cmp	 ecx, eax
  00061	7c 03		 jl	 SHORT $LN13@luaK_disch
  00063	fe 4a 2c	 dec	 BYTE PTR [edx+44]
$LN13@luaK_disch:
; Line 421
  00066	80 7e 0b 08	 cmp	 BYTE PTR [esi+11], 8
  0006a	75 1c		 jne	 SHORT $LN3@luaK_disch
; Line 422
  0006c	0f b6 4e 0a	 movzx	 ecx, BYTE PTR [esi+10]
  00070	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  00076	75 0b		 jne	 SHORT $LN16@luaK_disch
  00078	0f b6 42 2a	 movzx	 eax, BYTE PTR [edx+42]
  0007c	3b c8		 cmp	 ecx, eax
  0007e	7c 03		 jl	 SHORT $LN16@luaK_disch
  00080	fe 4a 2c	 dec	 BYTE PTR [edx+44]
$LN16@luaK_disch:
; Line 423
  00083	bf 07 00 00 00	 mov	 edi, 7
$LN3@luaK_disch:
; Line 425
  00088	0f b6 4e 0a	 movzx	 ecx, BYTE PTR [esi+10]
  0008c	0f bf 46 08	 movsx	 eax, WORD PTR [esi+8]
  00090	c1 e1 09	 shl	 ecx, 9
  00093	0b c8		 or	 ecx, eax
  00095	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00098	0b cf		 or	 ecx, edi
  0009a	51		 push	 ecx
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 _luaK_code
  000a1	83 c4 08	 add	 esp, 8
  000a4	89 46 08	 mov	 DWORD PTR [esi+8], eax
; Line 426
  000a7	c7 06 0c 00 00
	00		 mov	 DWORD PTR [esi], 12	; 0000000cH
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
; Line 436
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
$LN2@luaK_disch:
; Line 431
  000b1	56		 push	 esi
  000b2	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  000b5	e8 00 00 00 00	 call	 _luaK_setoneret
  000ba	83 c4 08	 add	 esp, 8
$LN1@luaK_disch:
  000bd	5e		 pop	 esi
; Line 436
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN23@luaK_disch:
  000c0	00 00 00 00	 DD	 $LN6@luaK_disch
  000c4	00 00 00 00	 DD	 $LN5@luaK_disch
  000c8	00 00 00 00	 DD	 $LN4@luaK_disch
  000cc	00 00 00 00	 DD	 $LN1@luaK_disch
  000d0	00 00 00 00	 DD	 $LN1@luaK_disch
  000d4	00 00 00 00	 DD	 $LN2@luaK_disch
  000d8	00 00 00 00	 DD	 $LN2@luaK_disch
_luaK_dischargevars ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_intK
_TEXT	SEGMENT
_k$ = -32						; size = 16
_o$ = -16						; size = 16
_fs$ = 8						; size = 4
_n$ = 12						; size = 8
_luaK_intK PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 352
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 354
  00006	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  00009	89 45 e0	 mov	 DWORD PTR _k$[ebp], eax
; Line 355
  0000c	89 45 f0	 mov	 DWORD PTR _o$[ebp], eax
  0000f	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp+4]
  00012	89 45 f4	 mov	 DWORD PTR _o$[ebp+4], eax
; Line 356
  00015	8d 45 f0	 lea	 eax, DWORD PTR _o$[ebp]
  00018	50		 push	 eax
  00019	8d 45 e0	 lea	 eax, DWORD PTR _k$[ebp]
  0001c	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _k$[ebp+8], 2
  00023	50		 push	 eax
  00024	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00027	c7 45 f8 13 00
	00 00		 mov	 DWORD PTR _o$[ebp+8], 19 ; 00000013H
  0002e	e8 00 00 00 00	 call	 _addk
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 357
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_luaK_intK ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_stringK
_TEXT	SEGMENT
_o$ = -16						; size = 16
_fs$ = 8						; size = 4
_s$ = 12						; size = 4
_luaK_stringK PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 340
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; Line 342
  00006	8b 45 0c	 mov	 eax, DWORD PTR _s$[ebp]
  00009	89 45 f0	 mov	 DWORD PTR _o$[ebp], eax
  0000c	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  00010	83 c8 40	 or	 eax, 64			; 00000040H
  00013	89 45 f8	 mov	 DWORD PTR _o$[ebp+8], eax
; Line 343
  00016	8d 45 f0	 lea	 eax, DWORD PTR _o$[ebp]
  00019	50		 push	 eax
  0001a	50		 push	 eax
  0001b	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  0001e	e8 00 00 00 00	 call	 _addk
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 344
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_luaK_stringK ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_checkstack
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_n$ = 12						; size = 4
_luaK_checkstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 278
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 279
  00003	8b 55 08	 mov	 edx, DWORD PTR _fs$[ebp]
  00006	56		 push	 esi
; Line 280
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	0f b6 4a 2c	 movzx	 ecx, BYTE PTR [edx+44]
  0000d	03 4d 0c	 add	 ecx, DWORD PTR _n$[ebp]
  00010	0f b6 46 08	 movzx	 eax, BYTE PTR [esi+8]
  00014	3b c8		 cmp	 ecx, eax
  00016	7e 0b		 jle	 SHORT $LN2@luaK_check
; Line 281
  00018	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  0001e	7d 06		 jge	 SHORT $LN6@luaK_check
; Line 284
  00020	88 4e 08	 mov	 BYTE PTR [esi+8], cl
$LN2@luaK_check:
  00023	5e		 pop	 esi
; Line 286
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN6@luaK_check:
; Line 283
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  0002b	ff 72 08	 push	 DWORD PTR [edx+8]
  0002e	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN8@luaK_check:
$LN5@luaK_check:
  00033	cc		 int	 3
_luaK_checkstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_reserveregs
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_n$ = 12						; size = 4
_luaK_reserveregs PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 289
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 290
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _n$[ebp]
  0000a	56		 push	 esi
  0000b	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000d	0f b6 51 2c	 movzx	 edx, BYTE PTR [ecx+44]
  00011	03 d3		 add	 edx, ebx
  00013	0f b6 46 08	 movzx	 eax, BYTE PTR [esi+8]
  00017	3b d0		 cmp	 edx, eax
  00019	7e 0b		 jle	 SHORT $LN4@luaK_reser
  0001b	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  00021	7d 0a		 jge	 SHORT $LN9@luaK_reser
  00023	88 56 08	 mov	 BYTE PTR [esi+8], dl
$LN4@luaK_reser:
; Line 291
  00026	00 59 2c	 add	 BYTE PTR [ecx+44], bl
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
; Line 292
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN9@luaK_reser:
; Line 290
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  00032	ff 71 08	 push	 DWORD PTR [ecx+8]
  00035	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN11@luaK_reser:
$LN8@luaK_reser:
  0003a	cc		 int	 3
_luaK_reserveregs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_nil
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_previous$1$ = 12					; size = 4
_from$ = 12						; size = 4
_n$ = 16						; size = 4
_luaK_nil PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 54
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 56
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _from$[ebp]
  00006	53		 push	 ebx
; Line 57
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _fs$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _n$[ebp]
  0000e	4e		 dec	 esi
  0000f	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00012	03 f1		 add	 esi, ecx
  00014	57		 push	 edi
  00015	3b 53 14	 cmp	 edx, DWORD PTR [ebx+20]
  00018	7e 6e		 jle	 SHORT $LN5@luaK_nil
; Line 58
  0001a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001c	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0001f	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	89 45 0c	 mov	 DWORD PTR _previous$1$[ebp], eax
; Line 59
  00028	8b 38		 mov	 edi, DWORD PTR [eax]
  0002a	8b c7		 mov	 eax, edi
  0002c	24 3f		 and	 al, 63			; 0000003fH
  0002e	3c 04		 cmp	 al, 4
  00030	75 56		 jne	 SHORT $LN5@luaK_nil
; Line 60
  00032	8b d7		 mov	 edx, edi
; Line 61
  00034	c1 ef 17	 shr	 edi, 23			; 00000017H
  00037	c1 ea 06	 shr	 edx, 6
  0003a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00040	03 fa		 add	 edi, edx
; Line 63
  00042	3b ca		 cmp	 ecx, edx
  00044	7c 0b		 jl	 SHORT $LN13@luaK_nil
  00046	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00049	3b c8		 cmp	 ecx, eax
  0004b	7e 0b		 jle	 SHORT $LN4@luaK_nil
  0004d	3b ca		 cmp	 ecx, edx
  0004f	7f 37		 jg	 SHORT $LN5@luaK_nil
$LN13@luaK_nil:
  00051	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00054	3b d0		 cmp	 edx, eax
  00056	7f 30		 jg	 SHORT $LN5@luaK_nil
$LN4@luaK_nil:
; Line 64
  00058	3b d1		 cmp	 edx, ecx
  0005a	0f 4c ca	 cmovl	 ecx, edx
; Line 65
  0005d	3b fe		 cmp	 edi, esi
; Line 67
  0005f	0f b6 c1	 movzx	 eax, cl
  00062	0f 4f f7	 cmovg	 esi, edi
  00065	c1 e0 06	 shl	 eax, 6
  00068	2b f1		 sub	 esi, ecx
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _previous$1$[ebp]
  0006d	c1 e6 17	 shl	 esi, 23			; 00000017H
  00070	81 e6 00 00 80
	ff		 and	 esi, -8388608		; ff800000H
  00076	0b f0		 or	 esi, eax
  00078	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007a	25 3f c0 7f 00	 and	 eax, 8372287		; 007fc03fH
  0007f	0b f0		 or	 esi, eax
  00081	5f		 pop	 edi
  00082	89 31		 mov	 DWORD PTR [ecx], esi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
; Line 73
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN5@luaK_nil:
; Line 72
  00088	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  0008b	48		 dec	 eax
  0008c	c1 e0 11	 shl	 eax, 17			; 00000011H
  0008f	0b c1		 or	 eax, ecx
  00091	c1 e0 06	 shl	 eax, 6
  00094	83 c8 04	 or	 eax, 4
  00097	50		 push	 eax
  00098	53		 push	 ebx
  00099	e8 00 00 00 00	 call	 _luaK_code
  0009e	83 c4 08	 add	 esp, 8
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
; Line 73
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_luaK_nil ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_fixline
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_line$ = 12						; size = 4
_luaK_fixline PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 936
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 937
  00003	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  00006	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _line$[ebp]
  00011	89 44 91 fc	 mov	 DWORD PTR [ecx+edx*4-4], eax
; Line 938
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_luaK_fixline ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_codek
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_reg$ = 12						; size = 4
_k$ = 16						; size = 4
_luaK_codek PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 267
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 268
  00004	8b 5d 10	 mov	 ebx, DWORD PTR _k$[ebp]
  00007	81 fb ff ff 03
	00		 cmp	 ebx, 262143		; 0003ffffH
  0000d	7f 1b		 jg	 SHORT $LN2@luaK_codek
; Line 269
  0000f	c1 e3 08	 shl	 ebx, 8
  00012	0b 5d 0c	 or	 ebx, DWORD PTR _reg$[ebp]
  00015	c1 e3 06	 shl	 ebx, 6
  00018	83 cb 01	 or	 ebx, 1
  0001b	53		 push	 ebx
  0001c	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  0001f	e8 00 00 00 00	 call	 _luaK_code
  00024	83 c4 08	 add	 esp, 8
  00027	5b		 pop	 ebx
; Line 275
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN2@luaK_codek:
; Line 271
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _reg$[ebp]
  0002d	c1 e0 06	 shl	 eax, 6
  00030	56		 push	 esi
  00031	83 c8 02	 or	 eax, 2
  00034	50		 push	 eax
  00035	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00038	e8 00 00 00 00	 call	 _luaK_code
; Line 272
  0003d	c1 e3 06	 shl	 ebx, 6
  00040	8b f0		 mov	 esi, eax
  00042	83 cb 2e	 or	 ebx, 46			; 0000002eH
  00045	53		 push	 ebx
  00046	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00049	e8 00 00 00 00	 call	 _luaK_code
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
; Line 273
  00051	8b c6		 mov	 eax, esi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
; Line 275
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_luaK_codek ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_codeABC
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_o$ = 12						; size = 4
_a$ = 16						; size = 4
_b$ = 20						; size = 4
_c$ = 24						; size = 4
_luaK_codeABC PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 244
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 249
  00003	8b 45 14	 mov	 eax, DWORD PTR _b$[ebp]
  00006	c1 e0 09	 shl	 eax, 9
  00009	0b 45 18	 or	 eax, DWORD PTR _c$[ebp]
  0000c	c1 e0 08	 shl	 eax, 8
  0000f	0b 45 10	 or	 eax, DWORD PTR _a$[ebp]
  00012	c1 e0 06	 shl	 eax, 6
  00015	0b 45 0c	 or	 eax, DWORD PTR _o$[ebp]
  00018	50		 push	 eax
  00019	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  0001c	e8 00 00 00 00	 call	 _luaK_code
  00021	83 c4 08	 add	 esp, 8
; Line 250
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_luaK_codeABC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaK_codeABx
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_o$ = 12						; size = 4
_a$ = 16						; size = 4
_bc$ = 20						; size = 4
_luaK_codeABx PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 253
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 257
  00003	8b 45 14	 mov	 eax, DWORD PTR _bc$[ebp]
  00006	c1 e0 08	 shl	 eax, 8
  00009	0b 45 10	 or	 eax, DWORD PTR _a$[ebp]
  0000c	c1 e0 06	 shl	 eax, 6
  0000f	0b 45 0c	 or	 eax, DWORD PTR _o$[ebp]
  00012	50		 push	 eax
  00013	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00016	e8 00 00 00 00	 call	 _luaK_code
  0001b	83 c4 08	 add	 esp, 8
; Line 258
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_luaK_codeABx ENDP
_TEXT	ENDS
END
