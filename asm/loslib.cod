; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CG@FKHONFPM@aAbBcCdDeFgGhHIjmMnprRStTuUVwWxX@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	??_C@_06KGEDDHLK@cCxXyY?$AA@			; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_0O@NHEIKIJK@deHImMSuUVwWy?$AA@		; `string'
PUBLIC	??_C@_03NFKEKGGK@all?$AA@			; `string'
PUBLIC	??_C@_07FCFLCBKH@collate?$AA@			; `string'
PUBLIC	??_C@_05JGEDHNAD@ctype?$AA@			; `string'
PUBLIC	??_C@_08BIOBDOAM@monetary?$AA@			; `string'
PUBLIC	??_C@_07MMLECJPG@numeric?$AA@			; `string'
PUBLIC	??_C@_04CLCEDBPF@time?$AA@			; `string'
PUBLIC	??_C@_05DDECJJKE@clock?$AA@			; `string'
PUBLIC	??_C@_04JNIHBGGH@date?$AA@			; `string'
PUBLIC	??_C@_08PDOPCMOG@difftime?$AA@			; `string'
PUBLIC	??_C@_07EMGJIMLB@execute?$AA@			; `string'
PUBLIC	??_C@_04MKNBDEPB@exit?$AA@			; `string'
PUBLIC	??_C@_06EPDNLFGH@getenv?$AA@			; `string'
PUBLIC	??_C@_06LEMKAMD@remove?$AA@			; `string'
PUBLIC	??_C@_06LMEAOBLB@rename?$AA@			; `string'
PUBLIC	??_C@_09IOBOFJNA@setlocale?$AA@			; `string'
PUBLIC	??_C@_07KOJJABMD@tmpname?$AA@			; `string'
;	COMDAT ??_C@_07KOJJABMD@tmpname?$AA@
CONST	SEGMENT
??_C@_07KOJJABMD@tmpname?$AA@ DB 'tmpname', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOBOFJNA@setlocale?$AA@
CONST	SEGMENT
??_C@_09IOBOFJNA@setlocale?$AA@ DB 'setlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMEAOBLB@rename?$AA@
CONST	SEGMENT
??_C@_06LMEAOBLB@rename?$AA@ DB 'rename', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEMKAMD@remove?$AA@
CONST	SEGMENT
??_C@_06LEMKAMD@remove?$AA@ DB 'remove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPDNLFGH@getenv?$AA@
CONST	SEGMENT
??_C@_06EPDNLFGH@getenv?$AA@ DB 'getenv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKNBDEPB@exit?$AA@
CONST	SEGMENT
??_C@_04MKNBDEPB@exit?$AA@ DB 'exit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EMGJIMLB@execute?$AA@
CONST	SEGMENT
??_C@_07EMGJIMLB@execute?$AA@ DB 'execute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PDOPCMOG@difftime?$AA@
CONST	SEGMENT
??_C@_08PDOPCMOG@difftime?$AA@ DB 'difftime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JNIHBGGH@date?$AA@
CONST	SEGMENT
??_C@_04JNIHBGGH@date?$AA@ DB 'date', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DDECJJKE@clock?$AA@
CONST	SEGMENT
??_C@_05DDECJJKE@clock?$AA@ DB 'clock', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLCEDBPF@time?$AA@
CONST	SEGMENT
??_C@_04CLCEDBPF@time?$AA@ DB 'time', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MMLECJPG@numeric?$AA@
CONST	SEGMENT
??_C@_07MMLECJPG@numeric?$AA@ DB 'numeric', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BIOBDOAM@monetary?$AA@
CONST	SEGMENT
??_C@_08BIOBDOAM@monetary?$AA@ DB 'monetary', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JGEDHNAD@ctype?$AA@
CONST	SEGMENT
??_C@_05JGEDHNAD@ctype?$AA@ DB 'ctype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FCFLCBKH@collate?$AA@
CONST	SEGMENT
??_C@_07FCFLCBKH@collate?$AA@ DB 'collate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NFKEKGGK@all?$AA@
CONST	SEGMENT
??_C@_03NFKEKGGK@all?$AA@ DB 'all', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NHEIKIJK@deHImMSuUVwWy?$AA@
CONST	SEGMENT
??_C@_0O@NHEIKIJK@deHImMSuUVwWy?$AA@ DB 'deHImMSuUVwWy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06KGEDDHLK@cCxXyY?$AA@
CONST	SEGMENT
??_C@_06KGEDDHLK@cCxXyY?$AA@ DB 'cCxXyY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FKHONFPM@aAbBcCdDeFgGhHIjmMnprRStTuUVwWxX@
CONST	SEGMENT
??_C@_0CG@FKHONFPM@aAbBcCdDeFgGhHIjmMnprRStTuUVwWxX@ DB 'aAbBcCdDeFgGhHIj'
	DB	'mMnprRStTuUVwWxXyYzZ%', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
?options@?1??checkoption@@9@9 DD FLAT:??_C@_0CG@FKHONFPM@aAbBcCdDeFgGhHIjmMnprRStTuUVwWxX@ ; `checkoption'::`2'::options
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DD	FLAT:??_C@_01DDCIFGEA@E?$AA@
	DD	FLAT:??_C@_06KGEDDHLK@cCxXyY?$AA@
	DD	FLAT:??_C@_01MJMHLOMK@O?$AA@
	DD	FLAT:??_C@_0O@NHEIKIJK@deHImMSuUVwWy?$AA@
?cat@?1??os_setlocale@@9@9 DD 00H			; `os_setlocale'::`2'::cat
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
?catnames@?1??os_setlocale@@9@9 DD FLAT:??_C@_03NFKEKGGK@all?$AA@ ; `os_setlocale'::`2'::catnames
	DD	FLAT:??_C@_07FCFLCBKH@collate?$AA@
	DD	FLAT:??_C@_05JGEDHNAD@ctype?$AA@
	DD	FLAT:??_C@_08BIOBDOAM@monetary?$AA@
	DD	FLAT:??_C@_07MMLECJPG@numeric?$AA@
	DD	FLAT:??_C@_04CLCEDBPF@time?$AA@
	DD	00H
	ORG $+4
_syslib	DD	FLAT:??_C@_05DDECJJKE@clock?$AA@
	DD	FLAT:_os_clock
	DD	FLAT:??_C@_04JNIHBGGH@date?$AA@
	DD	FLAT:_os_date
	DD	FLAT:??_C@_08PDOPCMOG@difftime?$AA@
	DD	FLAT:_os_difftime
	DD	FLAT:??_C@_07EMGJIMLB@execute?$AA@
	DD	FLAT:_os_execute
	DD	FLAT:??_C@_04MKNBDEPB@exit?$AA@
	DD	FLAT:_os_exit
	DD	FLAT:??_C@_06EPDNLFGH@getenv?$AA@
	DD	FLAT:_os_getenv
	DD	FLAT:??_C@_06LEMKAMD@remove?$AA@
	DD	FLAT:_os_remove
	DD	FLAT:??_C@_06LMEAOBLB@rename?$AA@
	DD	FLAT:_os_rename
	DD	FLAT:??_C@_09IOBOFJNA@setlocale?$AA@
	DD	FLAT:_os_setlocale
	DD	FLAT:??_C@_04CLCEDBPF@time?$AA@
	DD	FLAT:_os_time
	DD	FLAT:??_C@_07KOJJABMD@tmpname?$AA@
	DD	FLAT:_os_tmpname
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_luaopen_os
PUBLIC	??_C@_0CF@CFMGMNIN@unable?5to?5generate?5a?5unique?5file@ ; `string'
PUBLIC	??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@ ; `string'
PUBLIC	??_C@_0CB@DJMEIEGF@field?5?8?$CFs?8?5missing?5in?5date?5table@ ; `string'
PUBLIC	??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@ ; `string'
PUBLIC	??_C@_0CE@MFIJMOHJ@invalid?5conversion?5specifier?5?8?$CF?$CF@ ; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc?$AA@			; `string'
PUBLIC	??_C@_0DH@HAACGOCO@time?5result?5cannot?5be?5represente@ ; `string'
PUBLIC	??_C@_02HODHFJCJ@?$CKt?$AA@			; `string'
PUBLIC	??_C@_03KHPNBODO@sec?$AA@			; `string'
PUBLIC	??_C@_03KLIPLJLL@min?$AA@			; `string'
PUBLIC	??_C@_04LMOJGCPE@hour?$AA@			; `string'
PUBLIC	??_C@_03NNBHCDBP@day?$AA@			; `string'
PUBLIC	??_C@_05MEBAADFH@month?$AA@			; `string'
PUBLIC	??_C@_04JFPLDHAO@year?$AA@			; `string'
PUBLIC	??_C@_04HBIDDHMB@wday?$AA@			; `string'
PUBLIC	??_C@_04MOLDIJKA@yday?$AA@			; `string'
PUBLIC	??_C@_05HGBEJAHO@isdst?$AA@			; `string'
PUBLIC	__real@405bc00000000000
PUBLIC	__real@408f400000000000
EXTRN	__imp__setlocale:PROC
EXTRN	__imp__exit:PROC
EXTRN	__imp__getenv:PROC
EXTRN	__imp__system:PROC
EXTRN	__imp__strchr:PROC
EXTRN	__imp__clock:PROC
EXTRN	__imp__strftime:PROC
EXTRN	__imp___difftime64:PROC
EXTRN	__imp___gmtime64:PROC
EXTRN	__imp___localtime64:PROC
EXTRN	__imp___mktime64:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp__remove:PROC
EXTRN	__imp__rename:PROC
EXTRN	__imp__tmpnam:PROC
EXTRN	_lua_close:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_type:PROC
EXTRN	_lua_tointegerx:PROC
EXTRN	_lua_toboolean:PROC
EXTRN	_lua_pushnumber:PROC
EXTRN	_lua_pushinteger:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_pushfstring:PROC
EXTRN	_lua_pushboolean:PROC
EXTRN	_lua_getfield:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_setfield:PROC
EXTRN	_luaL_checkversion_:PROC
EXTRN	_luaL_argerror:PROC
EXTRN	_luaL_checklstring:PROC
EXTRN	_luaL_optlstring:PROC
EXTRN	_luaL_checkinteger:PROC
EXTRN	_luaL_optinteger:PROC
EXTRN	_luaL_checktype:PROC
EXTRN	_luaL_error:PROC
EXTRN	_luaL_checkoption:PROC
EXTRN	_luaL_fileresult:PROC
EXTRN	_luaL_execresult:PROC
EXTRN	_luaL_setfuncs:PROC
EXTRN	_luaL_buffinit:PROC
EXTRN	_luaL_prepbuffsize:PROC
EXTRN	_luaL_pushresult:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_05HGBEJAHO@isdst?$AA@
CONST	SEGMENT
??_C@_05HGBEJAHO@isdst?$AA@ DB 'isdst', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MOLDIJKA@yday?$AA@
CONST	SEGMENT
??_C@_04MOLDIJKA@yday?$AA@ DB 'yday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HBIDDHMB@wday?$AA@
CONST	SEGMENT
??_C@_04HBIDDHMB@wday?$AA@ DB 'wday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFPLDHAO@year?$AA@
CONST	SEGMENT
??_C@_04JFPLDHAO@year?$AA@ DB 'year', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEBAADFH@month?$AA@
CONST	SEGMENT
??_C@_05MEBAADFH@month?$AA@ DB 'month', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NNBHCDBP@day?$AA@
CONST	SEGMENT
??_C@_03NNBHCDBP@day?$AA@ DB 'day', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMOJGCPE@hour?$AA@
CONST	SEGMENT
??_C@_04LMOJGCPE@hour?$AA@ DB 'hour', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KLIPLJLL@min?$AA@
CONST	SEGMENT
??_C@_03KLIPLJLL@min?$AA@ DB 'min', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHPNBODO@sec?$AA@
CONST	SEGMENT
??_C@_03KHPNBODO@sec?$AA@ DB 'sec', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HODHFJCJ@?$CKt?$AA@
CONST	SEGMENT
??_C@_02HODHFJCJ@?$CKt?$AA@ DB '*t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HAACGOCO@time?5result?5cannot?5be?5represente@
CONST	SEGMENT
??_C@_0DH@HAACGOCO@time?5result?5cannot?5be?5represente@ DB 'time result '
	DB	'cannot be represented in this installation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc?$AA@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc?$AA@ DB '%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MFIJMOHJ@invalid?5conversion?5specifier?5?8?$CF?$CF@
CONST	SEGMENT
??_C@_0CE@MFIJMOHJ@invalid?5conversion?5specifier?5?8?$CF?$CF@ DB 'invali'
	DB	'd conversion specifier ''%%%s''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@
CONST	SEGMENT
??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@ DB 'field ''%s'''
	DB	' out-of-bounds', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DJMEIEGF@field?5?8?$CFs?8?5missing?5in?5date?5table@
CONST	SEGMENT
??_C@_0CB@DJMEIEGF@field?5?8?$CFs?8?5missing?5in?5date?5table@ DB 'field '
	DB	'''%s'' missing in date table', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@
CONST	SEGMENT
??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@ DB 'field ''%s'
	DB	''' not an integer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CFMGMNIN@unable?5to?5generate?5a?5unique?5file@
CONST	SEGMENT
??_C@_0CF@CFMGMNIN@unable?5to?5generate?5a?5unique?5file@ DB 'unable to g'
	DB	'enerate a unique filename', 00H		; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _os_exit
_TEXT	SEGMENT
_L$ = 8							; size = 4
_os_exit PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 352
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 354
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	6a 01		 push	 1
  0000a	57		 push	 edi
  0000b	e8 00 00 00 00	 call	 _lua_type
  00010	83 c4 08	 add	 esp, 8
  00013	83 f8 01	 cmp	 eax, 1
  00016	75 13		 jne	 SHORT $LN4@os_exit
; Line 355
  00018	50		 push	 eax
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 _lua_toboolean
  0001f	83 c4 08	 add	 esp, 8
  00022	8b f0		 mov	 esi, eax
  00024	f7 de		 neg	 esi
  00026	1b f6		 sbb	 esi, esi
  00028	46		 inc	 esi
; Line 356
  00029	eb 11		 jmp	 SHORT $LN3@os_exit
$LN4@os_exit:
; Line 357
  0002b	6a 00		 push	 0
  0002d	6a 00		 push	 0
  0002f	6a 01		 push	 1
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 _luaL_optinteger
  00037	83 c4 10	 add	 esp, 16			; 00000010H
  0003a	8b f0		 mov	 esi, eax
$LN3@os_exit:
; Line 358
  0003c	6a 02		 push	 2
  0003e	57		 push	 edi
  0003f	e8 00 00 00 00	 call	 _lua_toboolean
  00044	83 c4 08	 add	 esp, 8
  00047	85 c0		 test	 eax, eax
  00049	74 09		 je	 SHORT $LN2@os_exit
; Line 359
  0004b	57		 push	 edi
  0004c	e8 00 00 00 00	 call	 _lua_close
  00051	83 c4 04	 add	 esp, 4
$LN2@os_exit:
; Line 360
  00054	85 ff		 test	 edi, edi
  00056	74 07		 je	 SHORT $LN1@os_exit
  00058	56		 push	 esi
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
$LN9@os_exit:
$LN1@os_exit:
  0005f	5f		 pop	 edi
; Line 361
  00060	33 c0		 xor	 eax, eax
  00062	5e		 pop	 esi
; Line 362
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
$LN8@os_exit:
_os_exit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _os_setlocale
_TEXT	SEGMENT
_L$ = 8							; size = 4
_os_setlocale PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 340
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 345
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 01		 push	 1
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _luaL_optlstring
; Line 346
  00014	68 00 00 00 00	 push	 OFFSET ?catnames@?1??os_setlocale@@9@9
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_03NFKEKGGK@all?$AA@
  0001e	6a 02		 push	 2
  00020	57		 push	 edi
  00021	8b f0		 mov	 esi, eax
  00023	e8 00 00 00 00	 call	 _luaL_checkoption
; Line 347
  00028	56		 push	 esi
  00029	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?cat@?1??os_setlocale@@9@9[eax*4]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00036	50		 push	 eax
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 _lua_pushstring
  0003d	83 c4 30	 add	 esp, 48			; 00000030H
; Line 348
  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
; Line 349
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_os_setlocale ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _os_difftime
_TEXT	SEGMENT
_L$ = 8							; size = 4
_os_difftime PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 330
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 331
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	6a 01		 push	 1
  0000b	53		 push	 ebx
  0000c	e8 00 00 00 00	 call	 _luaL_checkinteger
; Line 332
  00011	6a 02		 push	 2
  00013	53		 push	 ebx
  00014	8b f8		 mov	 edi, eax
  00016	8b f2		 mov	 esi, edx
  00018	e8 00 00 00 00	 call	 _luaL_checkinteger
; Line 333
  0001d	52		 push	 edx
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___difftime64
  00027	83 c4 18	 add	 esp, 24			; 00000018H
  0002a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 _lua_pushnumber
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 334
  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
; Line 335
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_os_difftime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _os_time
_TEXT	SEGMENT
_ts$1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_os_time PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 306
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00015	57		 push	 edi
; Line 308
  00016	6a 01		 push	 1
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 _lua_type
  0001e	83 c4 08	 add	 esp, 8
  00021	85 c0		 test	 eax, eax
  00023	7f 10		 jg	 SHORT $LN4@os_time
; Line 309
  00025	6a 00		 push	 0
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0002d	83 c4 04	 add	 esp, 4
; Line 310
  00030	e9 c2 00 00 00	 jmp	 $LN15@os_time
$LN4@os_time:
; Line 312
  00035	6a 05		 push	 5
  00037	6a 01		 push	 1
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 _luaL_checktype
; Line 313
  0003f	6a 01		 push	 1
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 _lua_settop
; Line 314
  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec?$AA@
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 _getfield
; Line 315
  00056	6a 00		 push	 0
  00058	6a 00		 push	 0
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_03KLIPLJLL@min?$AA@
  0005f	56		 push	 esi
  00060	89 45 d8	 mov	 DWORD PTR _ts$1[ebp], eax
  00063	e8 00 00 00 00	 call	 _getfield
; Line 316
  00068	6a 00		 push	 0
  0006a	6a 0c		 push	 12			; 0000000cH
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_04LMOJGCPE@hour?$AA@
  00071	56		 push	 esi
  00072	89 45 dc	 mov	 DWORD PTR _ts$1[ebp+4], eax
  00075	e8 00 00 00 00	 call	 _getfield
  0007a	83 c4 44	 add	 esp, 68			; 00000044H
  0007d	89 45 e0	 mov	 DWORD PTR _ts$1[ebp+8], eax
; Line 317
  00080	6a 00		 push	 0
  00082	6a ff		 push	 -1
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_03NNBHCDBP@day?$AA@
  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 _getfield
; Line 318
  0008f	6a 01		 push	 1
  00091	6a ff		 push	 -1
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_05MEBAADFH@month?$AA@
  00098	56		 push	 esi
  00099	89 45 e4	 mov	 DWORD PTR _ts$1[ebp+12], eax
  0009c	e8 00 00 00 00	 call	 _getfield
; Line 319
  000a1	68 6c 07 00 00	 push	 1900			; 0000076cH
  000a6	6a ff		 push	 -1
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_04JFPLDHAO@year?$AA@
  000ad	56		 push	 esi
  000ae	89 45 e8	 mov	 DWORD PTR _ts$1[ebp+16], eax
  000b1	e8 00 00 00 00	 call	 _getfield
; Line 320
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_05HGBEJAHO@isdst?$AA@
  000bb	6a ff		 push	 -1
  000bd	56		 push	 esi
  000be	89 45 ec	 mov	 DWORD PTR _ts$1[ebp+20], eax
  000c1	e8 00 00 00 00	 call	 _lua_getfield
  000c6	83 c4 3c	 add	 esp, 60			; 0000003cH
  000c9	85 c0		 test	 eax, eax
  000cb	75 05		 jne	 SHORT $LN11@os_time
  000cd	83 cf ff	 or	 edi, -1
  000d0	eb 0d		 jmp	 SHORT $LN12@os_time
$LN11@os_time:
  000d2	6a ff		 push	 -1
  000d4	56		 push	 esi
  000d5	e8 00 00 00 00	 call	 _lua_toboolean
  000da	83 c4 08	 add	 esp, 8
  000dd	8b f8		 mov	 edi, eax
$LN12@os_time:
  000df	6a fe		 push	 -2			; fffffffeH
  000e1	56		 push	 esi
  000e2	e8 00 00 00 00	 call	 _lua_settop
; Line 321
  000e7	8d 45 d8	 lea	 eax, DWORD PTR _ts$1[ebp]
  000ea	89 7d f8	 mov	 DWORD PTR _ts$1[ebp+32], edi
  000ed	50		 push	 eax
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mktime64
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@os_time:
  000f7	8b da		 mov	 ebx, edx
  000f9	8b f8		 mov	 edi, eax
; Line 323
  000fb	23 c3		 and	 eax, ebx
  000fd	83 f8 ff	 cmp	 eax, -1
  00100	75 0e		 jne	 SHORT $LN2@os_time
; Line 324
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@HAACGOCO@time?5result?5cannot?5be?5represente@
  00107	56		 push	 esi
  00108	e8 00 00 00 00	 call	 _luaL_error
  0010d	83 c4 08	 add	 esp, 8
$LN2@os_time:
; Line 325
  00110	53		 push	 ebx
  00111	57		 push	 edi
  00112	56		 push	 esi
  00113	e8 00 00 00 00	 call	 _lua_pushinteger
; Line 327
  00118	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011e	33 cd		 xor	 ecx, ebp
  00120	b8 01 00 00 00	 mov	 eax, 1
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c3		 ret	 0
_os_time ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _os_date
_TEXT	SEGMENT
_stm$1$ = -8228						; size = 4
_t$ = -8224						; size = 8
_cc$1 = -8216						; size = 4
_b$2 = -8212						; size = 8208
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_os_date PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 260
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 20 00 00	 mov	 eax, 8228		; 00002024H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  0001b	56		 push	 esi
  0001c	57		 push	 edi
; Line 261
  0001d	6a 00		 push	 0
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
  00024	6a 01		 push	 1
  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _luaL_optlstring
; Line 262
  0002c	6a 02		 push	 2
  0002e	53		 push	 ebx
  0002f	8b f0		 mov	 esi, eax
  00031	e8 00 00 00 00	 call	 _lua_type
  00036	83 c4 18	 add	 esp, 24			; 00000018H
  00039	85 c0		 test	 eax, eax
  0003b	7f 0d		 jg	 SHORT $LN12@os_date
  0003d	6a 00		 push	 0
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00045	83 c4 04	 add	 esp, 4
  00048	eb 0b		 jmp	 SHORT $LN51@os_date
$LN12@os_date:
  0004a	6a 02		 push	 2
  0004c	53		 push	 ebx
  0004d	e8 00 00 00 00	 call	 _luaL_checkinteger
  00052	83 c4 08	 add	 esp, 8
$LN51@os_date:
  00055	89 85 e0 df ff
	ff		 mov	 DWORD PTR _t$[ebp], eax
; Line 265
  0005b	8d 85 e0 df ff
	ff		 lea	 eax, DWORD PTR _t$[ebp]
  00061	89 95 e4 df ff
	ff		 mov	 DWORD PTR _t$[ebp+4], edx
  00067	80 3e 21	 cmp	 BYTE PTR [esi], 33	; 00000021H
  0006a	50		 push	 eax
  0006b	75 14		 jne	 SHORT $LN9@os_date
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___gmtime64
  00073	8b f8		 mov	 edi, eax
  00075	83 c4 04	 add	 esp, 4
  00078	89 bd dc df ff
	ff		 mov	 DWORD PTR _stm$1$[ebp], edi
; Line 266
  0007e	46		 inc	 esi
; Line 268
  0007f	eb 11		 jmp	 SHORT $LN8@os_date
$LN9@os_date:
; Line 269
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64
  00087	83 c4 04	 add	 esp, 4
  0008a	89 85 dc df ff
	ff		 mov	 DWORD PTR _stm$1$[ebp], eax
  00090	8b f8		 mov	 edi, eax
$LN8@os_date:
; Line 270
  00092	85 ff		 test	 edi, edi
  00094	75 0e		 jne	 SHORT $LN7@os_date
; Line 271
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@HAACGOCO@time?5result?5cannot?5be?5represente@
  0009b	53		 push	 ebx
  0009c	e8 00 00 00 00	 call	 _luaL_error
  000a1	83 c4 08	 add	 esp, 8
$LN7@os_date:
; Line 272
  000a4	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_02HODHFJCJ@?$CKt?$AA@
  000a9	8b c6		 mov	 eax, esi
  000ab	eb 03 8d 49 00	 npad	 5
$LL46@os_date:
  000b0	8a 10		 mov	 dl, BYTE PTR [eax]
  000b2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000b4	75 1a		 jne	 SHORT $LN47@os_date
  000b6	84 d2		 test	 dl, dl
  000b8	74 12		 je	 SHORT $LN48@os_date
  000ba	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000bd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000c0	75 0e		 jne	 SHORT $LN47@os_date
  000c2	83 c0 02	 add	 eax, 2
  000c5	83 c1 02	 add	 ecx, 2
  000c8	84 d2		 test	 dl, dl
  000ca	75 e4		 jne	 SHORT $LL46@os_date
$LN48@os_date:
  000cc	33 c0		 xor	 eax, eax
  000ce	eb 05		 jmp	 SHORT $LN49@os_date
$LN47@os_date:
  000d0	1b c0		 sbb	 eax, eax
  000d2	83 c8 01	 or	 eax, 1
$LN49@os_date:
  000d5	85 c0		 test	 eax, eax
  000d7	0f 85 08 01 00
	00		 jne	 $LN6@os_date
; Line 273
  000dd	6a 09		 push	 9
  000df	50		 push	 eax
  000e0	53		 push	 ebx
  000e1	e8 00 00 00 00	 call	 _lua_createtable
; Line 274
  000e6	8b 07		 mov	 eax, DWORD PTR [edi]
  000e8	99		 cdq
  000e9	52		 push	 edx
  000ea	50		 push	 eax
  000eb	53		 push	 ebx
  000ec	e8 00 00 00 00	 call	 _lua_pushinteger
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec?$AA@
  000f6	6a fe		 push	 -2			; fffffffeH
  000f8	53		 push	 ebx
  000f9	e8 00 00 00 00	 call	 _lua_setfield
; Line 275
  000fe	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00101	99		 cdq
  00102	52		 push	 edx
  00103	50		 push	 eax
  00104	53		 push	 ebx
  00105	e8 00 00 00 00	 call	 _lua_pushinteger
  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_03KLIPLJLL@min?$AA@
  0010f	6a fe		 push	 -2			; fffffffeH
  00111	53		 push	 ebx
  00112	e8 00 00 00 00	 call	 _lua_setfield
; Line 276
  00117	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0011a	99		 cdq
  0011b	52		 push	 edx
  0011c	50		 push	 eax
  0011d	53		 push	 ebx
  0011e	e8 00 00 00 00	 call	 _lua_pushinteger
  00123	83 c4 48	 add	 esp, 72			; 00000048H
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_04LMOJGCPE@hour?$AA@
  0012b	6a fe		 push	 -2			; fffffffeH
  0012d	53		 push	 ebx
  0012e	e8 00 00 00 00	 call	 _lua_setfield
; Line 277
  00133	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00136	99		 cdq
  00137	52		 push	 edx
  00138	50		 push	 eax
  00139	53		 push	 ebx
  0013a	e8 00 00 00 00	 call	 _lua_pushinteger
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_03NNBHCDBP@day?$AA@
  00144	6a fe		 push	 -2			; fffffffeH
  00146	53		 push	 ebx
  00147	e8 00 00 00 00	 call	 _lua_setfield
; Line 278
  0014c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0014f	40		 inc	 eax
  00150	99		 cdq
  00151	52		 push	 edx
  00152	50		 push	 eax
  00153	53		 push	 ebx
  00154	e8 00 00 00 00	 call	 _lua_pushinteger
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_05MEBAADFH@month?$AA@
  0015e	6a fe		 push	 -2			; fffffffeH
  00160	53		 push	 ebx
  00161	e8 00 00 00 00	 call	 _lua_setfield
; Line 279
  00166	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00169	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  0016e	99		 cdq
  0016f	52		 push	 edx
  00170	50		 push	 eax
  00171	53		 push	 ebx
  00172	e8 00 00 00 00	 call	 _lua_pushinteger
  00177	83 c4 48	 add	 esp, 72			; 00000048H
  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_04JFPLDHAO@year?$AA@
  0017f	6a fe		 push	 -2			; fffffffeH
  00181	53		 push	 ebx
  00182	e8 00 00 00 00	 call	 _lua_setfield
; Line 280
  00187	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0018a	40		 inc	 eax
  0018b	99		 cdq
  0018c	52		 push	 edx
  0018d	50		 push	 eax
  0018e	53		 push	 ebx
  0018f	e8 00 00 00 00	 call	 _lua_pushinteger
  00194	68 00 00 00 00	 push	 OFFSET ??_C@_04HBIDDHMB@wday?$AA@
  00199	6a fe		 push	 -2			; fffffffeH
  0019b	53		 push	 ebx
  0019c	e8 00 00 00 00	 call	 _lua_setfield
; Line 281
  001a1	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  001a4	40		 inc	 eax
  001a5	99		 cdq
  001a6	52		 push	 edx
  001a7	50		 push	 eax
  001a8	53		 push	 ebx
  001a9	e8 00 00 00 00	 call	 _lua_pushinteger
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_04MOLDIJKA@yday?$AA@
  001b3	6a fe		 push	 -2			; fffffffeH
  001b5	53		 push	 ebx
  001b6	e8 00 00 00 00	 call	 _lua_setfield
; Line 282
  001bb	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  001be	83 c4 3c	 add	 esp, 60			; 0000003cH
  001c1	85 c0		 test	 eax, eax
  001c3	0f 88 e6 00 00
	00		 js	 $LN52@os_date
  001c9	50		 push	 eax
  001ca	53		 push	 ebx
  001cb	e8 00 00 00 00	 call	 _lua_pushboolean
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_05HGBEJAHO@isdst?$AA@
  001d5	6a fe		 push	 -2			; fffffffeH
  001d7	53		 push	 ebx
  001d8	e8 00 00 00 00	 call	 _lua_setfield
  001dd	83 c4 14	 add	 esp, 20			; 00000014H
; Line 284
  001e0	e9 ca 00 00 00	 jmp	 $LN52@os_date
$LN6@os_date:
; Line 288
  001e5	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$2[ebp]
  001eb	c6 85 e8 df ff
	ff 25		 mov	 BYTE PTR _cc$1[ebp], 37	; 00000025H
  001f2	50		 push	 eax
  001f3	53		 push	 ebx
  001f4	e8 00 00 00 00	 call	 _luaL_buffinit
; Line 289
  001f9	8a 06		 mov	 al, BYTE PTR [esi]
  001fb	83 c4 08	 add	 esp, 8
  001fe	84 c0		 test	 al, al
  00200	0f 84 9a 00 00
	00		 je	 $LN3@os_date
  00206	8b 95 f4 df ff
	ff		 mov	 edx, DWORD PTR _b$2[ebp+8]
  0020c	8d 64 24 00	 npad	 4
$LL4@os_date:
; Line 290
  00210	3c 25		 cmp	 al, 37			; 00000025H
  00212	74 34		 je	 SHORT $LN2@os_date
; Line 291
  00214	3b 95 f0 df ff
	ff		 cmp	 edx, DWORD PTR _b$2[ebp+4]
  0021a	72 17		 jb	 SHORT $LN14@os_date
  0021c	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$2[ebp]
  00222	6a 01		 push	 1
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  0022a	8b 95 f4 df ff
	ff		 mov	 edx, DWORD PTR _b$2[ebp+8]
  00230	83 c4 08	 add	 esp, 8
$LN14@os_date:
  00233	8b 85 ec df ff
	ff		 mov	 eax, DWORD PTR _b$2[ebp]
  00239	8a 0e		 mov	 cl, BYTE PTR [esi]
  0023b	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0023e	8b 95 f4 df ff
	ff		 mov	 edx, DWORD PTR _b$2[ebp+8]
  00244	42		 inc	 edx
  00245	46		 inc	 esi
; Line 292
  00246	eb 48		 jmp	 SHORT $LN53@os_date
$LN2@os_date:
; Line 294
  00248	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$2[ebp]
  0024e	68 fa 00 00 00	 push	 250			; 000000faH
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  00259	8b f8		 mov	 edi, eax
; Line 295
  0025b	46		 inc	 esi
  0025c	8d 85 e8 df ff
	ff		 lea	 eax, DWORD PTR _cc$1[ebp]
  00262	50		 push	 eax
  00263	56		 push	 esi
  00264	53		 push	 ebx
  00265	e8 00 00 00 00	 call	 _checkoption
; Line 296
  0026a	ff b5 dc df ff
	ff		 push	 DWORD PTR _stm$1$[ebp]
  00270	8b f0		 mov	 esi, eax
  00272	8d 85 e8 df ff
	ff		 lea	 eax, DWORD PTR _cc$1[ebp]
  00278	50		 push	 eax
  00279	68 fa 00 00 00	 push	 250			; 000000faH
  0027e	57		 push	 edi
  0027f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strftime
; Line 297
  00285	8b 95 f4 df ff
	ff		 mov	 edx, DWORD PTR _b$2[ebp+8]
  0028b	83 c4 24	 add	 esp, 36			; 00000024H
  0028e	03 d0		 add	 edx, eax
$LN53@os_date:
  00290	89 95 f4 df ff
	ff		 mov	 DWORD PTR _b$2[ebp+8], edx
  00296	8a 06		 mov	 al, BYTE PTR [esi]
  00298	84 c0		 test	 al, al
  0029a	0f 85 70 ff ff
	ff		 jne	 $LL4@os_date
$LN3@os_date:
; Line 300
  002a0	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$2[ebp]
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 _luaL_pushresult
  002ac	83 c4 04	 add	 esp, 4
$LN52@os_date:
; Line 303
  002af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b2	b8 01 00 00 00	 mov	 eax, 1
  002b7	5f		 pop	 edi
  002b8	5e		 pop	 esi
  002b9	33 cd		 xor	 ecx, ebp
  002bb	5b		 pop	 ebx
  002bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c1	8b e5		 mov	 esp, ebp
  002c3	5d		 pop	 ebp
  002c4	c3		 ret	 0
_os_date ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _checkoption
_TEXT	SEGMENT
_L$ = 8							; size = 4
_conv$ = 12						; size = 4
_buff$ = 16						; size = 4
_checkoption PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 232
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 235
  00004	8b 5d 10	 mov	 ebx, DWORD PTR _buff$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _conv$[ebp]
  0000c	33 f6		 xor	 esi, esi
  0000e	8b ff		 npad	 2
$LL7@checkoptio:
; Line 236
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	84 c0		 test	 al, al
  00014	74 40		 je	 SHORT $LN6@checkoptio
  00016	0f be c0	 movsx	 eax, al
  00019	50		 push	 eax
  0001a	ff b6 00 00 00
	00		 push	 DWORD PTR ?options@?1??checkoption@@9@9[esi]
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00026	83 c4 08	 add	 esp, 8
  00029	85 c0		 test	 eax, eax
  0002b	74 29		 je	 SHORT $LN6@checkoptio
; Line 238
  0002d	8b 8e 04 00 00
	00		 mov	 ecx, DWORD PTR ?options@?1??checkoption@@9@9[esi+4]
  00033	8a 07		 mov	 al, BYTE PTR [edi]
  00035	88 43 01	 mov	 BYTE PTR [ebx+1], al
  00038	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0003b	74 55		 je	 SHORT $LN11@checkoptio
; Line 243
  0003d	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00040	84 c0		 test	 al, al
  00042	74 12		 je	 SHORT $LN6@checkoptio
  00044	0f be c0	 movsx	 eax, al
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  0004f	83 c4 08	 add	 esp, 8
  00052	85 c0		 test	 eax, eax
  00054	75 2a		 jne	 SHORT $LN12@checkoptio
$LN6@checkoptio:
  00056	83 c6 08	 add	 esi, 8
; Line 235
  00059	83 fe 18	 cmp	 esi, 24			; 00000018H
  0005c	72 b2		 jb	 SHORT $LL7@checkoptio
; Line 251
  0005e	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00061	57		 push	 edi
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MFIJMOHJ@invalid?5conversion?5specifier?5?8?$CF?$CF@
  00067	56		 push	 esi
  00068	e8 00 00 00 00	 call	 _lua_pushfstring
  0006d	50		 push	 eax
  0006e	6a 01		 push	 1
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 _luaL_argerror
  00076	83 c4 18	 add	 esp, 24			; 00000018H
; Line 252
  00079	8b c7		 mov	 eax, edi
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
; Line 253
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN12@checkoptio:
; Line 244
  00080	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00083	88 43 02	 mov	 BYTE PTR [ebx+2], al
; Line 246
  00086	8d 47 02	 lea	 eax, DWORD PTR [edi+2]
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	c6 43 03 00	 mov	 BYTE PTR [ebx+3], 0
  0008f	5b		 pop	 ebx
; Line 253
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
$LN11@checkoptio:
; Line 240
  00092	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00095	c6 43 02 00	 mov	 BYTE PTR [ebx+2], 0
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
; Line 253
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
_checkoption ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getfield
_TEXT	SEGMENT
_res$ = -12						; size = 8
_t$1$ = -8						; size = 4
_isnum$ = -4						; size = 4
_L$ = 8							; size = 4
_key$ = 12						; size = 4
_d$ = 16						; size = 4
_delta$ = 20						; size = 4
_getfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 211
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
; Line 213
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _key$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000e	57		 push	 edi
  0000f	53		 push	 ebx
  00010	6a ff		 push	 -1
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _lua_getfield
  00018	89 45 f8	 mov	 DWORD PTR _t$1$[ebp], eax
; Line 214
  0001b	8d 45 fc	 lea	 eax, DWORD PTR _isnum$[ebp]
  0001e	50		 push	 eax
  0001f	6a ff		 push	 -1
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 _lua_tointegerx
  00027	83 c4 18	 add	 esp, 24			; 00000018H
  0002a	8b f8		 mov	 edi, eax
; Line 215
  0002c	83 7d fc 00	 cmp	 DWORD PTR _isnum$[ebp], 0
  00030	8b ca		 mov	 ecx, edx
  00032	75 53		 jne	 SHORT $LN7@getfield
; Line 216
  00034	83 7d f8 00	 cmp	 DWORD PTR _t$1$[ebp], 0
  00038	74 16		 je	 SHORT $LN6@getfield
; Line 217
  0003a	53		 push	 ebx
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@
; Line 224
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 _luaL_error
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
; Line 229
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN6@getfield:
; Line 218
  00050	8b 45 10	 mov	 eax, DWORD PTR _d$[ebp]
  00053	85 c0		 test	 eax, eax
  00055	79 16		 jns	 SHORT $LN4@getfield
; Line 219
  00057	53		 push	 ebx
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@DJMEIEGF@field?5?8?$CFs?8?5missing?5in?5date?5table@
; Line 224
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 _luaL_error
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
; Line 229
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
$LN4@getfield:
; Line 220
  0006d	99		 cdq
; Line 227
  0006e	6a fe		 push	 -2			; fffffffeH
  00070	56		 push	 esi
  00071	8b f8		 mov	 edi, eax
  00073	89 55 f8	 mov	 DWORD PTR _res$[ebp+4], edx
  00076	e8 00 00 00 00	 call	 _lua_settop
  0007b	83 c4 08	 add	 esp, 8
; Line 228
  0007e	8b c7		 mov	 eax, edi
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
; Line 229
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
$LN7@getfield:
; Line 223
  00087	8b d7		 mov	 edx, edi
  00089	8b c1		 mov	 eax, ecx
  0008b	81 c2 ff ff ff
	3f		 add	 edx, 1073741823		; 3fffffffH
  00091	83 d0 00	 adc	 eax, 0
  00094	85 c0		 test	 eax, eax
  00096	77 24		 ja	 SHORT $LN1@getfield
  00098	72 08		 jb	 SHORT $LN10@getfield
  0009a	81 fa fe ff ff
	7f		 cmp	 edx, 2147483646		; 7ffffffeH
  000a0	77 1a		 ja	 SHORT $LN1@getfield
$LN10@getfield:
; Line 225
  000a2	8b 45 14	 mov	 eax, DWORD PTR _delta$[ebp]
  000a5	99		 cdq
; Line 227
  000a6	6a fe		 push	 -2			; fffffffeH
  000a8	56		 push	 esi
  000a9	2b f8		 sub	 edi, eax
  000ab	e8 00 00 00 00	 call	 _lua_settop
  000b0	83 c4 08	 add	 esp, 8
; Line 228
  000b3	8b c7		 mov	 eax, edi
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
; Line 229
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
$LN1@getfield:
; Line 224
  000bc	53		 push	 ebx
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 _luaL_error
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
; Line 229
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_getfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getboolfield
_TEXT	SEGMENT
_L$ = 8							; size = 4
_key$ = 12						; size = 4
_getboolfield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 198
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 200
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  0000b	6a ff		 push	 -1
  0000d	56		 push	 esi
  0000e	e8 00 00 00 00	 call	 _lua_getfield
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	85 c0		 test	 eax, eax
  00018	75 14		 jne	 SHORT $LN3@getboolfie
; Line 201
  0001a	6a fe		 push	 -2			; fffffffeH
  0001c	56		 push	 esi
  0001d	83 cf ff	 or	 edi, -1
  00020	e8 00 00 00 00	 call	 _lua_settop
  00025	83 c4 08	 add	 esp, 8
; Line 202
  00028	8b c7		 mov	 eax, edi
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
; Line 203
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN3@getboolfie:
; Line 200
  0002e	6a ff		 push	 -1
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _lua_toboolean
  00036	83 c4 08	 add	 esp, 8
  00039	8b f8		 mov	 edi, eax
; Line 201
  0003b	6a fe		 push	 -2			; fffffffeH
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _lua_settop
  00043	83 c4 08	 add	 esp, 8
; Line 202
  00046	8b c7		 mov	 eax, edi
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
; Line 203
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_getboolfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _setboolfield
_TEXT	SEGMENT
_L$ = 8							; size = 4
_key$ = 12						; size = 4
_value$ = 16						; size = 4
_setboolfield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 191
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 192
  00003	8b 45 10	 mov	 eax, DWORD PTR _value$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 19		 js	 SHORT $LN2@setboolfie
; Line 194
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000e	e8 00 00 00 00	 call	 _lua_pushboolean
; Line 195
  00013	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  00016	6a fe		 push	 -2			; fffffffeH
  00018	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0001b	e8 00 00 00 00	 call	 _lua_setfield
  00020	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@setboolfie:
; Line 196
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_setboolfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _setfield
_TEXT	SEGMENT
_L$ = 8							; size = 4
_key$ = 12						; size = 4
_value$ = 16						; size = 4
_setfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 186
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 187
  00003	8b 45 10	 mov	 eax, DWORD PTR _value$[ebp]
  00006	99		 cdq
  00007	52		 push	 edx
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000c	e8 00 00 00 00	 call	 _lua_pushinteger
; Line 188
  00011	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  00014	6a fe		 push	 -2			; fffffffeH
  00016	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00019	e8 00 00 00 00	 call	 _lua_setfield
  0001e	83 c4 18	 add	 esp, 24			; 00000018H
; Line 189
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_setfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _os_clock
_TEXT	SEGMENT
_L$ = 8							; size = 4
_os_clock PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 172
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 173
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  00009	83 ec 08	 sub	 esp, 8
  0000c	66 0f 6e c0	 movd	 xmm0, eax
  00010	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00014	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  0001c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00021	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00024	e8 00 00 00 00	 call	 _lua_pushnumber
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 174
  0002c	b8 01 00 00 00	 mov	 eax, 1
; Line 175
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_os_clock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _os_getenv
_TEXT	SEGMENT
_L$ = 8							; size = 4
_os_getenv PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 166
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 167
  00003	6a 00		 push	 0
  00005	6a 01		 push	 1
  00007	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000a	e8 00 00 00 00	 call	 _luaL_checklstring
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getenv
  00016	50		 push	 eax
  00017	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0001a	e8 00 00 00 00	 call	 _lua_pushstring
  0001f	83 c4 18	 add	 esp, 24			; 00000018H
; Line 168
  00022	b8 01 00 00 00	 mov	 eax, 1
; Line 169
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_os_getenv ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _os_tmpname
_TEXT	SEGMENT
_buff$ = -20						; size = 14
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_os_tmpname PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 155
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
; Line 158
  00014	8d 45 ec	 lea	 eax, DWORD PTR _buff$[ebp]
  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tmpnam
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c0		 test	 eax, eax
; Line 159
  00023	75 1d		 jne	 SHORT $LN1@os_tmpname
; Line 160
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CFMGMNIN@unable?5to?5generate?5a?5unique?5file@
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 _luaL_error
; Line 161
  00030	83 c4 08	 add	 esp, 8
  00033	5e		 pop	 esi
; Line 163
  00034	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00037	33 cd		 xor	 ecx, ebp
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
$LN1@os_tmpname:
; Line 161
  00042	8d 45 ec	 lea	 eax, DWORD PTR _buff$[ebp]
  00045	50		 push	 eax
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 _lua_pushstring
; Line 163
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004f	83 c4 08	 add	 esp, 8
  00052	33 cd		 xor	 ecx, ebp
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	5e		 pop	 esi
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_os_tmpname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _os_rename
_TEXT	SEGMENT
_L$ = 8							; size = 4
_os_rename PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 148
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 149
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	6a 00		 push	 0
  0000a	6a 01		 push	 1
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 150
  00012	6a 00		 push	 0
  00014	6a 02		 push	 2
  00016	57		 push	 edi
  00017	8b f0		 mov	 esi, eax
  00019	e8 00 00 00 00	 call	 _luaL_checklstring
  0001e	83 c4 18	 add	 esp, 24			; 00000018H
; Line 151
  00021	6a 00		 push	 0
  00023	50		 push	 eax
  00024	56		 push	 esi
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rename
  0002b	83 c4 08	 add	 esp, 8
  0002e	f7 d8		 neg	 eax
  00030	1b c0		 sbb	 eax, eax
  00032	40		 inc	 eax
  00033	50		 push	 eax
  00034	57		 push	 edi
  00035	e8 00 00 00 00	 call	 _luaL_fileresult
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; Line 152
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_os_rename ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _os_remove
_TEXT	SEGMENT
_L$ = 8							; size = 4
_os_remove PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 142
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 143
  00003	6a 00		 push	 0
  00005	6a 01		 push	 1
  00007	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000a	e8 00 00 00 00	 call	 _luaL_checklstring
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 144
  00012	50		 push	 eax
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__remove
  0001a	83 c4 04	 add	 esp, 4
  0001d	f7 d8		 neg	 eax
  0001f	1b c0		 sbb	 eax, eax
  00021	40		 inc	 eax
  00022	50		 push	 eax
  00023	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00026	e8 00 00 00 00	 call	 _luaL_fileresult
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 145
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_os_remove ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _os_execute
_TEXT	SEGMENT
_L$ = 8							; size = 4
_os_execute PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 130
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 131
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 01		 push	 1
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _luaL_optlstring
  00014	8b f0		 mov	 esi, eax
; Line 132
  00016	56		 push	 esi
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  0001d	83 c4 14	 add	 esp, 20			; 00000014H
; Line 134
  00020	50		 push	 eax
  00021	57		 push	 edi
  00022	85 f6		 test	 esi, esi
  00024	74 0c		 je	 SHORT $LN2@os_execute
  00026	e8 00 00 00 00	 call	 _luaL_execresult
; Line 136
  0002b	83 c4 08	 add	 esp, 8
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
; Line 139
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN2@os_execute:
; Line 136
  00032	e8 00 00 00 00	 call	 _lua_pushboolean
  00037	83 c4 08	 add	 esp, 8
; Line 137
  0003a	b8 01 00 00 00	 mov	 eax, 1
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
; Line 139
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_os_execute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _l_checktime
_TEXT	SEGMENT
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_l_checktime PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 58
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 62
  00003	5d		 pop	 ebp
; Line 59
  00004	e9 00 00 00 00	 jmp	 _luaL_checkinteger
_l_checktime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaopen_os
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaopen_os PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 384
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 385
  00003	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405bc00000000000
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000f	68 88 00 00 00	 push	 136			; 00000088H
  00014	83 ec 08	 sub	 esp, 8
  00017	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _luaL_checkversion_
  00022	6a 0b		 push	 11			; 0000000bH
  00024	6a 00		 push	 0
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _lua_createtable
  0002c	6a 00		 push	 0
  0002e	68 00 00 00 00	 push	 OFFSET _syslib
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _luaL_setfuncs
  00039	83 c4 28	 add	 esp, 40			; 00000028H
; Line 386
  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	5e		 pop	 esi
; Line 387
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_luaopen_os ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT
; File e:\microsoft visual studio 12.0\vc\include\time.inl
; Line 132
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 134
  00003	5d		 pop	 ebp
; Line 133
  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _mktime
_TEXT	SEGMENT
__Tm$ = 8						; size = 4
_mktime	PROC						; COMDAT
; File e:\microsoft visual studio 12.0\vc\include\time.inl
; Line 124
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 126
  00003	5d		 pop	 ebp
; Line 125
  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___mktime64
_mktime	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _localtime
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_localtime PROC						; COMDAT
; File e:\microsoft visual studio 12.0\vc\include\time.inl
; Line 113
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 118
  00003	5d		 pop	 ebp
; Line 116
  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___localtime64
_localtime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _gmtime
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_gmtime	PROC						; COMDAT
; File e:\microsoft visual studio 12.0\vc\include\time.inl
; Line 100
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 105
  00003	5d		 pop	 ebp
; Line 103
  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___gmtime64
_gmtime	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _difftime
_TEXT	SEGMENT
__Time1$ = 8						; size = 8
__Time2$ = 16						; size = 8
_difftime PROC						; COMDAT
; File e:\microsoft visual studio 12.0\vc\include\time.inl
; Line 83
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 84
  00003	ff 75 14	 push	 DWORD PTR __Time2$[ebp+4]
  00006	ff 75 10	 push	 DWORD PTR __Time2$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Time1$[ebp+4]
  0000c	ff 75 08	 push	 DWORD PTR __Time1$[ebp]
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___difftime64
  00015	83 c4 10	 add	 esp, 16			; 00000010H
; Line 85
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_difftime ENDP
_TEXT	ENDS
END
