; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_luaL_checkversion_
PUBLIC	_luaL_getmetafield
PUBLIC	_luaL_callmeta
PUBLIC	_luaL_tolstring
PUBLIC	_luaL_argerror
PUBLIC	_luaL_checklstring
PUBLIC	_luaL_optlstring
PUBLIC	_luaL_checknumber
PUBLIC	_luaL_optnumber
PUBLIC	_luaL_checkinteger
PUBLIC	_luaL_optinteger
PUBLIC	_luaL_checkstack
PUBLIC	_luaL_checktype
PUBLIC	_luaL_checkany
PUBLIC	_luaL_newmetatable
PUBLIC	_luaL_setmetatable
PUBLIC	_luaL_testudata
PUBLIC	_luaL_checkudata
PUBLIC	_luaL_where
PUBLIC	_luaL_error
PUBLIC	_luaL_checkoption
PUBLIC	_luaL_fileresult
PUBLIC	_luaL_execresult
PUBLIC	_luaL_ref
PUBLIC	_luaL_unref
PUBLIC	_luaL_loadfilex
PUBLIC	_luaL_loadbufferx
PUBLIC	_luaL_loadstring
PUBLIC	_luaL_newstate
PUBLIC	_luaL_len
PUBLIC	_luaL_gsub
PUBLIC	_luaL_setfuncs
PUBLIC	_luaL_getsubtable
PUBLIC	_luaL_traceback
PUBLIC	_luaL_requiref
PUBLIC	_luaL_buffinit
PUBLIC	_luaL_prepbuffsize
PUBLIC	_luaL_addlstring
PUBLIC	_luaL_addstring
PUBLIC	_luaL_addvalue
PUBLIC	_luaL_pushresult
PUBLIC	_luaL_pushresultsize
PUBLIC	_luaL_buffinitsize
PUBLIC	_luaL_pushmodule
PUBLIC	_luaL_openlib
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_01INIBCBCB@f?$AA@				; `string'
PUBLIC	??_C@_07PINPBNPB@_LOADED?$AA@			; `string'
PUBLIC	??_C@_03DDAHKNHO@_G?4?$AA@			; `string'
PUBLIC	??_C@_0O@EHCGJIOP@function?5?8?$CFs?8?$AA@	; `string'
PUBLIC	??_C@_07JJBIELFA@?$CFs?5?8?$CFs?8?$AA@		; `string'
PUBLIC	??_C@_0L@HEICADBI@main?5chunk?$AA@		; `string'
PUBLIC	??_C@_0BB@OJHNELPG@function?5?$DM?$CFs?3?$CFd?$DO?$AA@ ; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_0BB@CJHIJJAH@stack?5traceback?3?$AA@	; `string'
PUBLIC	??_C@_05JLIPKFIA@?6?7?4?4?4?$AA@		; `string'
PUBLIC	??_C@_04DOIEKPJK@Slnt?$AA@			; `string'
PUBLIC	??_C@_05GEEEIDH@?6?7?$CFs?3?$AA@		; `string'
PUBLIC	??_C@_03CDCAMCGK@?$CFd?3?$AA@			; `string'
PUBLIC	??_C@_04GJPPFNOH@?5in?5?$AA@			; `string'
PUBLIC	??_C@_0BF@HEPAINJG@?6?7?$CI?4?4?4tail?5calls?4?4?4?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BG@CHJGEHJL@bad?5argument?5?$CD?$CFd?5?$CI?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_06GABBCIBA@method?$AA@			; `string'
PUBLIC	??_C@_0BO@LENGMNDF@calling?5?8?$CFs?8?5on?5bad?5self?5?$CI?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BO@GOMKJOAH@bad?5argument?5?$CD?$CFd?5to?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_06LHMLJNCG@__name?$AA@			; `string'
PUBLIC	??_C@_0P@JGKNIAMH@light?5userdata?$AA@		; `string'
PUBLIC	??_C@_0BE@LDJANOJE@?$CFs?5expected?0?5got?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_02KHAMJCKP@Sl?$AA@			; `string'
PUBLIC	??_C@_07FCDHCGBN@?$CFs?3?$CFd?3?5?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_04MKNBDEPB@exit?$AA@			; `string'
PUBLIC	??_C@_0BE@HBADPNMP@invalid?5option?5?8?$CFs?8?$AA@ ; `string'
PUBLIC	??_C@_0BE@CBBDHBEP@stack?5overflow?5?$CI?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0P@EODJGPIM@stack?5overflow?$AA@		; `string'
PUBLIC	??_C@_0P@PDHEKNMA@value?5expected?$AA@		; `string'
PUBLIC	??_C@_0CF@GPCMCKGL@number?5has?5no?5integer?5representa@ ; `string'
PUBLIC	??_C@_0CI@KEENHMCA@not?5enough?5memory?5for?5buffer?5all@ ; `string'
PUBLIC	??_C@_06OAFBFKCG@LUABOX?$AA@			; `string'
PUBLIC	??_C@_04BDLIKKMN@__gc?$AA@			; `string'
PUBLIC	??_C@_0BB@IIFCFAGL@buffer?5too?5large?$AA@	; `string'
PUBLIC	??_C@_0BB@BJDGDOHH@cannot?5?$CFs?5?$CFs?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_03PKPBNCAL@?o?$LL?$LP?$AA@		; `string'
PUBLIC	??_C@_06CCPPALKB@?$DNstdin?$AA@			; `string'
PUBLIC	??_C@_03HPDLNGOA@?$EA?$CFs?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_06IEGCHAII@reopen?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_0CA@GGPBEEGI@object?5length?5is?5not?5an?5integer?$AA@ ; `string'
PUBLIC	??_C@_0L@HDFPAPPH@__tostring?$AA@		; `string'
PUBLIC	??_C@_02BPIDFGKK@?$CFI?$AA@			; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_03ILAMHENH@nil?$AA@			; `string'
PUBLIC	??_C@_06CILKLLDB@?$CFs?3?5?$CFp?$AA@		; `string'
PUBLIC	??_C@_0BO@CBJIAGLF@name?5conflict?5for?5module?5?8?$CFs?8?$AA@ ; `string'
PUBLIC	??_C@_0BC@CDGHCIOF@too?5many?5upvalues?$AA@	; `string'
PUBLIC	??_C@_0DC@EFOPIIKP@PANIC?3?5unprotected?5error?5in?5call@ ; `string'
PUBLIC	??_C@_0DB@FGBFPBHC@core?5and?5library?5have?5incompatib@ ; `string'
PUBLIC	??_C@_0BK@DLNLJHN@multiple?5Lua?5VMs?5detected?$AA@ ; `string'
PUBLIC	??_C@_0DG@EDLDPMHE@version?5mismatch?3?5app?4?5needs?5?$CFf?0@ ; `string'
PUBLIC	__real@405bc00000000000
EXTRN	__imp___errno:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__feof:PROC
EXTRN	__imp__ferror:PROC
EXTRN	__imp__fflush:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__freopen:PROC
EXTRN	__imp__getc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__realloc:PROC
EXTRN	__imp__strchr:PROC
EXTRN	__imp__strerror:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp__strstr:PROC
EXTRN	_lua_newstate:PROC
EXTRN	_lua_atpanic:PROC
EXTRN	_lua_version:PROC
EXTRN	_lua_absindex:PROC
EXTRN	_lua_gettop:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_rotate:PROC
EXTRN	_lua_copy:PROC
EXTRN	_lua_checkstack:PROC
EXTRN	_lua_isnumber:PROC
EXTRN	_lua_isinteger:PROC
EXTRN	_lua_type:PROC
EXTRN	_lua_typename:PROC
EXTRN	_lua_tonumberx:PROC
EXTRN	_lua_tointegerx:PROC
EXTRN	_lua_toboolean:PROC
EXTRN	_lua_tolstring:PROC
EXTRN	_lua_rawlen:PROC
EXTRN	_lua_touserdata:PROC
EXTRN	_lua_topointer:PROC
EXTRN	_lua_rawequal:PROC
EXTRN	_lua_pushnil:PROC
EXTRN	_lua_pushinteger:PROC
EXTRN	_lua_pushlstring:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_pushvfstring:PROC
EXTRN	_lua_pushfstring:PROC
EXTRN	_lua_pushcclosure:PROC
EXTRN	_lua_pushboolean:PROC
EXTRN	_lua_getfield:PROC
EXTRN	_lua_rawget:PROC
EXTRN	_lua_rawgeti:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_newuserdata:PROC
EXTRN	_lua_getmetatable:PROC
EXTRN	_lua_setglobal:PROC
EXTRN	_lua_settable:PROC
EXTRN	_lua_setfield:PROC
EXTRN	_lua_rawseti:PROC
EXTRN	_lua_setmetatable:PROC
EXTRN	_lua_callk:PROC
EXTRN	_lua_load:PROC
EXTRN	_lua_error:PROC
EXTRN	_lua_next:PROC
EXTRN	_lua_concat:PROC
EXTRN	_lua_len:PROC
EXTRN	_lua_getallocf:PROC
EXTRN	_lua_getstack:PROC
EXTRN	_lua_getinfo:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_0DG@EDLDPMHE@version?5mismatch?3?5app?4?5needs?5?$CFf?0@
CONST	SEGMENT
??_C@_0DG@EDLDPMHE@version?5mismatch?3?5app?4?5needs?5?$CFf?0@ DB 'versio'
	DB	'n mismatch: app. needs %f, Lua core provides %f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DLNLJHN@multiple?5Lua?5VMs?5detected?$AA@
CONST	SEGMENT
??_C@_0BK@DLNLJHN@multiple?5Lua?5VMs?5detected?$AA@ DB 'multiple Lua VMs '
	DB	'detected', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@FGBFPBHC@core?5and?5library?5have?5incompatib@
CONST	SEGMENT
??_C@_0DB@FGBFPBHC@core?5and?5library?5have?5incompatib@ DB 'core and lib'
	DB	'rary have incompatible numeric types', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EFOPIIKP@PANIC?3?5unprotected?5error?5in?5call@
CONST	SEGMENT
??_C@_0DC@EFOPIIKP@PANIC?3?5unprotected?5error?5in?5call@ DB 'PANIC: unpr'
	DB	'otected error in call to Lua API (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CDGHCIOF@too?5many?5upvalues?$AA@
CONST	SEGMENT
??_C@_0BC@CDGHCIOF@too?5many?5upvalues?$AA@ DB 'too many upvalues', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CBJIAGLF@name?5conflict?5for?5module?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0BO@CBJIAGLF@name?5conflict?5for?5module?5?8?$CFs?8?$AA@ DB 'name c'
	DB	'onflict for module ''%s''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CILKLLDB@?$CFs?3?5?$CFp?$AA@
CONST	SEGMENT
??_C@_06CILKLLDB@?$CFs?3?5?$CFp?$AA@ DB '%s: %p', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03ILAMHENH@nil?$AA@
CONST	SEGMENT
??_C@_03ILAMHENH@nil?$AA@ DB 'nil', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BPIDFGKK@?$CFI?$AA@
CONST	SEGMENT
??_C@_02BPIDFGKK@?$CFI?$AA@ DB '%I', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HDFPAPPH@__tostring?$AA@
CONST	SEGMENT
??_C@_0L@HDFPAPPH@__tostring?$AA@ DB '__tostring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GGPBEEGI@object?5length?5is?5not?5an?5integer?$AA@
CONST	SEGMENT
??_C@_0CA@GGPBEEGI@object?5length?5is?5not?5an?5integer?$AA@ DB 'object l'
	DB	'ength is not an integer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEGCHAII@reopen?$AA@
CONST	SEGMENT
??_C@_06IEGCHAII@reopen?$AA@ DB 'reopen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HPDLNGOA@?$EA?$CFs?$AA@
CONST	SEGMENT
??_C@_03HPDLNGOA@?$EA?$CFs?$AA@ DB '@%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCPPALKB@?$DNstdin?$AA@
CONST	SEGMENT
??_C@_06CCPPALKB@?$DNstdin?$AA@ DB '=stdin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03PKPBNCAL@?o?$LL?$LP?$AA@
CONST	SEGMENT
??_C@_03PKPBNCAL@?o?$LL?$LP?$AA@ DB 0efH, 0bbH, 0bfH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BJDGDOHH@cannot?5?$CFs?5?$CFs?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BB@BJDGDOHH@cannot?5?$CFs?5?$CFs?3?5?$CFs?$AA@ DB 'cannot %s %s: %'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IIFCFAGL@buffer?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BB@IIFCFAGL@buffer?5too?5large?$AA@ DB 'buffer too large', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BDLIKKMN@__gc?$AA@
CONST	SEGMENT
??_C@_04BDLIKKMN@__gc?$AA@ DB '__gc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OAFBFKCG@LUABOX?$AA@
CONST	SEGMENT
??_C@_06OAFBFKCG@LUABOX?$AA@ DB 'LUABOX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KEENHMCA@not?5enough?5memory?5for?5buffer?5all@
CONST	SEGMENT
??_C@_0CI@KEENHMCA@not?5enough?5memory?5for?5buffer?5all@ DB 'not enough '
	DB	'memory for buffer allocation', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GPCMCKGL@number?5has?5no?5integer?5representa@
CONST	SEGMENT
??_C@_0CF@GPCMCKGL@number?5has?5no?5integer?5representa@ DB 'number has n'
	DB	'o integer representation', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PDHEKNMA@value?5expected?$AA@
CONST	SEGMENT
??_C@_0P@PDHEKNMA@value?5expected?$AA@ DB 'value expected', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EODJGPIM@stack?5overflow?$AA@
CONST	SEGMENT
??_C@_0P@EODJGPIM@stack?5overflow?$AA@ DB 'stack overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CBBDHBEP@stack?5overflow?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BE@CBBDHBEP@stack?5overflow?5?$CI?$CFs?$CJ?$AA@ DB 'stack overflow'
	DB	' (%s)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HBADPNMP@invalid?5option?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0BE@HBADPNMP@invalid?5option?5?8?$CFs?8?$AA@ DB 'invalid option ''%'
	DB	's''', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKNBDEPB@exit?$AA@
CONST	SEGMENT
??_C@_04MKNBDEPB@exit?$AA@ DB 'exit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@ DB '%s: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07FCDHCGBN@?$CFs?3?$CFd?3?5?$AA@
CONST	SEGMENT
??_C@_07FCDHCGBN@?$CFs?3?$CFd?3?5?$AA@ DB '%s:%d: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KHAMJCKP@Sl?$AA@
CONST	SEGMENT
??_C@_02KHAMJCKP@Sl?$AA@ DB 'Sl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LDJANOJE@?$CFs?5expected?0?5got?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@LDJANOJE@?$CFs?5expected?0?5got?5?$CFs?$AA@ DB '%s expected, go'
	DB	't %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JGKNIAMH@light?5userdata?$AA@
CONST	SEGMENT
??_C@_0P@JGKNIAMH@light?5userdata?$AA@ DB 'light userdata', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LHMLJNCG@__name?$AA@
CONST	SEGMENT
??_C@_06LHMLJNCG@__name?$AA@ DB '__name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GOMKJOAH@bad?5argument?5?$CD?$CFd?5to?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@GOMKJOAH@bad?5argument?5?$CD?$CFd?5to?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@ DB 'b'
	DB	'ad argument #%d to ''%s'' (%s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LENGMNDF@calling?5?8?$CFs?8?5on?5bad?5self?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@LENGMNDF@calling?5?8?$CFs?8?5on?5bad?5self?5?$CI?$CFs?$CJ?$AA@ DB 'c'
	DB	'alling ''%s'' on bad self (%s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GABBCIBA@method?$AA@
CONST	SEGMENT
??_C@_06GABBCIBA@method?$AA@ DB 'method', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CHJGEHJL@bad?5argument?5?$CD?$CFd?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@CHJGEHJL@bad?5argument?5?$CD?$CFd?5?$CI?$CFs?$CJ?$AA@ DB 'bad a'
	DB	'rgument #%d (%s)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HEPAINJG@?6?7?$CI?4?4?4tail?5calls?4?4?4?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@HEPAINJG@?6?7?$CI?4?4?4tail?5calls?4?4?4?$CJ?$AA@ DB 0aH, 09H, '('
	DB	'...tail calls...)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJPPFNOH@?5in?5?$AA@
CONST	SEGMENT
??_C@_04GJPPFNOH@?5in?5?$AA@ DB ' in ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CDCAMCGK@?$CFd?3?$AA@
CONST	SEGMENT
??_C@_03CDCAMCGK@?$CFd?3?$AA@ DB '%d:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GEEEIDH@?6?7?$CFs?3?$AA@
CONST	SEGMENT
??_C@_05GEEEIDH@?6?7?$CFs?3?$AA@ DB 0aH, 09H, '%s:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DOIEKPJK@Slnt?$AA@
CONST	SEGMENT
??_C@_04DOIEKPJK@Slnt?$AA@ DB 'Slnt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLIPKFIA@?6?7?4?4?4?$AA@
CONST	SEGMENT
??_C@_05JLIPKFIA@?6?7?4?4?4?$AA@ DB 0aH, 09H, '...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CJHIJJAH@stack?5traceback?3?$AA@
CONST	SEGMENT
??_C@_0BB@CJHIJJAH@stack?5traceback?3?$AA@ DB 'stack traceback:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OJHNELPG@function?5?$DM?$CFs?3?$CFd?$DO?$AA@
CONST	SEGMENT
??_C@_0BB@OJHNELPG@function?5?$DM?$CFs?3?$CFd?$DO?$AA@ DB 'function <%s:%'
	DB	'd>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HEICADBI@main?5chunk?$AA@
CONST	SEGMENT
??_C@_0L@HEICADBI@main?5chunk?$AA@ DB 'main chunk', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JJBIELFA@?$CFs?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_07JJBIELFA@?$CFs?5?8?$CFs?8?$AA@ DB '%s ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EHCGJIOP@function?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0O@EHCGJIOP@function?5?8?$CFs?8?$AA@ DB 'function ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDAHKNHO@_G?4?$AA@
CONST	SEGMENT
??_C@_03DDAHKNHO@_G?4?$AA@ DB '_G.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PINPBNPB@_LOADED?$AA@
CONST	SEGMENT
??_C@_07PINPBNPB@_LOADED?$AA@ DB '_LOADED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01INIBCBCB@f?$AA@
CONST	SEGMENT
??_C@_01INIBCBCB@f?$AA@ DB 'f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _panic
_TEXT	SEGMENT
_L$ = 8							; size = 4
_panic	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 996
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 998
  00003	6a 00		 push	 0
  00005	6a ff		 push	 -1
  00007	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000a	e8 00 00 00 00	 call	 _lua_tolstring
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00012	50		 push	 eax
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@EFOPIIKP@PANIC?3?5unprotected?5error?5in?5call@
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  0001e	83 c0 40	 add	 eax, 64			; 00000040H
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  0002e	83 c0 40	 add	 eax, 64			; 00000040H
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fflush
  00038	83 c4 10	 add	 esp, 16			; 00000010H
; Line 999
  0003b	33 c0		 xor	 eax, eax
; Line 1000
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_panic	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _l_alloc
_TEXT	SEGMENT
_ud$ = 8						; size = 4
_ptr$ = 12						; size = 4
_osize$ = 16						; size = 4
_nsize$ = 20						; size = 4
_l_alloc PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 985
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 987
  00003	8b 45 14	 mov	 eax, DWORD PTR _nsize$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 10		 jne	 SHORT $LN2@l_alloc
; Line 988
  0000a	ff 75 0c	 push	 DWORD PTR _ptr$[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00013	83 c4 04	 add	 esp, 4
; Line 989
  00016	33 c0		 xor	 eax, eax
; Line 993
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN2@l_alloc:
; Line 992
  0001a	50		 push	 eax
  0001b	ff 75 0c	 push	 DWORD PTR _ptr$[ebp]
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__realloc
  00024	83 c4 08	 add	 esp, 8
; Line 993
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_l_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _libsize
_TEXT	SEGMENT
_l$ = 8							; size = 4
_libsize PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 861
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 863
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 0f		 je	 SHORT $LN1@libsize
  0000c	8d 64 24 00	 npad	 4
$LL3@libsize:
  00010	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00013	74 06		 je	 SHORT $LN1@libsize
  00015	40		 inc	 eax
  00016	83 c1 08	 add	 ecx, 8
  00019	75 f5		 jne	 SHORT $LL3@libsize
$LN1@libsize:
; Line 865
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_libsize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_findtable
_TEXT	SEGMENT
_L$ = 8							; size = 4
tv151 = 12						; size = 4
_idx$ = 12						; size = 4
_fname$ = 16						; size = 4
_szhint$ = 20						; size = 4
_luaL_findtable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 833
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 835
  00003	8b 45 0c	 mov	 eax, DWORD PTR _idx$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	57		 push	 edi
  0000c	85 c0		 test	 eax, eax
  0000e	74 0a		 je	 SHORT $LN20@luaL_findt
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _lua_pushvalue
  00017	83 c4 08	 add	 esp, 8
$LN20@luaL_findt:
  0001a	8b 5d 10	 mov	 ebx, DWORD PTR _fname$[ebp]
  0001d	8d 49 00	 npad	 3
$LL7@luaL_findt:
; Line 837
  00020	6a 2e		 push	 46			; 0000002eH
  00022	53		 push	 ebx
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00029	8b f8		 mov	 edi, eax
  0002b	83 c4 08	 add	 esp, 8
; Line 838
  0002e	85 ff		 test	 edi, edi
  00030	75 11		 jne	 SHORT $LN4@luaL_findt
  00032	8b c3		 mov	 eax, ebx
  00034	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL19@luaL_findt:
  00037	8a 08		 mov	 cl, BYTE PTR [eax]
  00039	40		 inc	 eax
  0003a	84 c9		 test	 cl, cl
  0003c	75 f9		 jne	 SHORT $LL19@luaL_findt
  0003e	2b c2		 sub	 eax, edx
  00040	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
$LN4@luaL_findt:
; Line 839
  00043	8b c7		 mov	 eax, edi
  00045	2b c3		 sub	 eax, ebx
  00047	50		 push	 eax
  00048	53		 push	 ebx
  00049	56		 push	 esi
  0004a	89 45 0c	 mov	 DWORD PTR tv151[ebp], eax
  0004d	e8 00 00 00 00	 call	 _lua_pushlstring
; Line 840
  00052	6a fe		 push	 -2			; fffffffeH
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 _lua_rawget
  0005a	83 c4 14	 add	 esp, 20			; 00000014H
  0005d	85 c0		 test	 eax, eax
  0005f	75 3e		 jne	 SHORT $LN3@luaL_findt
; Line 841
  00061	6a fe		 push	 -2			; fffffffeH
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 _lua_settop
; Line 842
  00069	80 3f 2e	 cmp	 BYTE PTR [edi], 46	; 0000002eH
  0006c	b9 01 00 00 00	 mov	 ecx, 1
  00071	8b 45 14	 mov	 eax, DWORD PTR _szhint$[ebp]
  00074	0f 44 c1	 cmove	 eax, ecx
  00077	50		 push	 eax
  00078	6a 00		 push	 0
  0007a	56		 push	 esi
  0007b	e8 00 00 00 00	 call	 _lua_createtable
; Line 843
  00080	ff 75 0c	 push	 DWORD PTR tv151[ebp]
  00083	53		 push	 ebx
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 _lua_pushlstring
; Line 844
  0008a	6a fe		 push	 -2			; fffffffeH
  0008c	56		 push	 esi
  0008d	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 845
  00092	6a fc		 push	 -4			; fffffffcH
  00094	56		 push	 esi
  00095	e8 00 00 00 00	 call	 _lua_settable
  0009a	83 c4 30	 add	 esp, 48			; 00000030H
  0009d	eb 10		 jmp	 SHORT $LN1@luaL_findt
$LN3@luaL_findt:
; Line 847
  0009f	6a ff		 push	 -1
  000a1	56		 push	 esi
  000a2	e8 00 00 00 00	 call	 _lua_type
  000a7	83 c4 08	 add	 esp, 8
  000aa	83 f8 05	 cmp	 eax, 5
  000ad	75 28		 jne	 SHORT $LN12@luaL_findt
$LN1@luaL_findt:
; Line 851
  000af	6a ff		 push	 -1
  000b1	6a fe		 push	 -2			; fffffffeH
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 _lua_rotate
  000b9	6a fe		 push	 -2			; fffffffeH
  000bb	56		 push	 esi
  000bc	e8 00 00 00 00	 call	 _lua_settop
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
; Line 852
  000c4	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
; Line 853
  000c7	80 3f 2e	 cmp	 BYTE PTR [edi], 46	; 0000002eH
  000ca	0f 84 50 ff ff
	ff		 je	 $LL7@luaL_findt
; Line 854
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	33 c0		 xor	 eax, eax
  000d4	5b		 pop	 ebx
; Line 855
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN12@luaL_findt:
; Line 848
  000d7	6a fd		 push	 -3			; fffffffdH
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 _lua_settop
  000df	83 c4 08	 add	 esp, 8
; Line 849
  000e2	8b c3		 mov	 eax, ebx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
; Line 855
  000e7	5d		 pop	 ebp
  000e8	c3		 ret	 0
_luaL_findtable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getS
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ud$ = 12						; size = 4
_size$ = 16						; size = 4
_getS	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 731
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 734
  00003	8b 45 0c	 mov	 eax, DWORD PTR _ud$[ebp]
  00006	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00009	85 d2		 test	 edx, edx
  0000b	75 04		 jne	 SHORT $LN1@getS
  0000d	33 c0		 xor	 eax, eax
; Line 738
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN1@getS:
; Line 735
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  00014	89 11		 mov	 DWORD PTR [ecx], edx
; Line 736
  00016	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; Line 737
  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
; Line 738
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_getS	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _skipcomment
_TEXT	SEGMENT
_lf$ = 8						; size = 4
_cp$ = 12						; size = 4
_skipcomment PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 676
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 677
  00005	8b 75 08	 mov	 esi, DWORD PTR _lf$[ebp]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 _skipBOM
  0000e	8b 5d 0c	 mov	 ebx, DWORD PTR _cp$[ebp]
  00011	83 c4 04	 add	 esp, 4
  00014	89 03		 mov	 DWORD PTR [ebx], eax
; Line 678
  00016	83 f8 23	 cmp	 eax, 35			; 00000023H
  00019	75 2d		 jne	 SHORT $LN6@skipcommen
  0001b	57		 push	 edi
  0001c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__getc
$LL5@skipcommen:
; Line 680
  00022	ff 76 04	 push	 DWORD PTR [esi+4]
  00025	ff d7		 call	 edi
  00027	83 c4 04	 add	 esp, 4
; Line 681
  0002a	83 f8 ff	 cmp	 eax, -1
  0002d	74 05		 je	 SHORT $LN2@skipcommen
  0002f	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00032	75 ee		 jne	 SHORT $LL5@skipcommen
$LN2@skipcommen:
; Line 682
  00034	ff 76 04	 push	 DWORD PTR [esi+4]
  00037	ff d7		 call	 edi
  00039	83 c4 04	 add	 esp, 4
  0003c	89 03		 mov	 DWORD PTR [ebx], eax
; Line 683
  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
; Line 686
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN6@skipcommen:
  00048	5e		 pop	 esi
; Line 685
  00049	33 c0		 xor	 eax, eax
  0004b	5b		 pop	 ebx
; Line 686
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_skipcomment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _skipBOM
_TEXT	SEGMENT
_lf$ = 8						; size = 4
_skipBOM PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 655
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 658
  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__getc
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _lf$[ebp]
  0000e	57		 push	 edi
  0000f	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_03PKPBNCAL@?o?$LL?$LP?$AA@
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL5@skipBOM:
; Line 660
  00020	ff 76 04	 push	 DWORD PTR [esi+4]
  00023	ff d3		 call	 ebx
  00025	83 c4 04	 add	 esp, 4
; Line 661
  00028	83 f8 ff	 cmp	 eax, -1
  0002b	74 23		 je	 SHORT $LN6@skipBOM
  0002d	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00030	47		 inc	 edi
  00031	3b c1		 cmp	 eax, ecx
  00033	75 1b		 jne	 SHORT $LN6@skipBOM
; Line 662
  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	88 44 31 08	 mov	 BYTE PTR [ecx+esi+8], al
  0003b	ff 06		 inc	 DWORD PTR [esi]
; Line 663
  0003d	80 3f 00	 cmp	 BYTE PTR [edi], 0
  00040	75 de		 jne	 SHORT $LL5@skipBOM
; Line 665
  00042	ff 76 04	 push	 DWORD PTR [esi+4]
  00045	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0004b	ff d3		 call	 ebx
  0004d	83 c4 04	 add	 esp, 4
$LN6@skipBOM:
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
; Line 666
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_skipBOM ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _errfile
_TEXT	SEGMENT
_L$ = 8							; size = 4
_what$ = 12						; size = 4
_fnameindex$ = 16					; size = 4
_errfile PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 646
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 647
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  0000b	ff 30		 push	 DWORD PTR [eax]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strerror
; Line 648
  00013	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  00016	8b f0		 mov	 esi, eax
  00018	6a 00		 push	 0
  0001a	ff 75 10	 push	 DWORD PTR _fnameindex$[ebp]
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 _lua_tolstring
; Line 649
  00023	56		 push	 esi
  00024	40		 inc	 eax
  00025	50		 push	 eax
  00026	ff 75 0c	 push	 DWORD PTR _what$[ebp]
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BJDGDOHH@cannot?5?$CFs?5?$CFs?3?5?$CFs?$AA@
  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 _lua_pushfstring
; Line 650
  00034	6a ff		 push	 -1
  00036	ff 75 10	 push	 DWORD PTR _fnameindex$[ebp]
  00039	53		 push	 ebx
  0003a	e8 00 00 00 00	 call	 _lua_rotate
  0003f	6a fe		 push	 -2			; fffffffeH
  00041	53		 push	 ebx
  00042	e8 00 00 00 00	 call	 _lua_settop
  00047	83 c4 38	 add	 esp, 56			; 00000038H
; Line 651
  0004a	b8 07 00 00 00	 mov	 eax, 7
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
; Line 652
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_errfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getF
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ud$ = 12						; size = 4
_size$ = 16						; size = 4
_getF	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 628
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 631
  00004	8b 75 0c	 mov	 esi, DWORD PTR _ud$[ebp]
  00007	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00009	85 c9		 test	 ecx, ecx
  0000b	7e 11		 jle	 SHORT $LN3@getF
; Line 632
  0000d	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx
; Line 642
  00012	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00015	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0001b	5e		 pop	 esi
; Line 643
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
$LN3@getF:
; Line 639
  0001e	ff 76 04	 push	 DWORD PTR [esi+4]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__feof
  00027	83 c4 04	 add	 esp, 4
  0002a	85 c0		 test	 eax, eax
  0002c	74 05		 je	 SHORT $LN1@getF
  0002e	33 c0		 xor	 eax, eax
  00030	5e		 pop	 esi
; Line 643
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN1@getF:
; Line 640
  00033	ff 76 04	 push	 DWORD PTR [esi+4]
  00036	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00039	68 00 02 00 00	 push	 512			; 00000200H
  0003e	6a 01		 push	 1
  00040	50		 push	 eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00047	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  0004a	83 c4 10	 add	 esp, 16			; 00000010H
  0004d	89 01		 mov	 DWORD PTR [ecx], eax
; Line 642
  0004f	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00052	5e		 pop	 esi
; Line 643
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_getF	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _newbox
_TEXT	SEGMENT
_temp$1$ = -8						; size = 4
_ud$1 = -4						; size = 4
_L$ = 8							; size = 4
_newsize$ = 12						; size = 4
_newbox	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 468
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; Line 469
  00009	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000c	6a 08		 push	 8
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _lua_newuserdata
; Line 472
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_06OAFBFKCG@LUABOX?$AA@
  00019	57		 push	 edi
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00027	e8 00 00 00 00	 call	 _luaL_newmetatable
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
  0002f	85 c0		 test	 eax, eax
  00031	74 1d		 je	 SHORT $LN1@newbox
; Line 473
  00033	6a 00		 push	 0
  00035	68 00 00 00 00	 push	 OFFSET _boxgc
  0003a	57		 push	 edi
  0003b	e8 00 00 00 00	 call	 _lua_pushcclosure
; Line 474
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_04BDLIKKMN@__gc?$AA@
  00045	6a fe		 push	 -2			; fffffffeH
  00047	57		 push	 edi
  00048	e8 00 00 00 00	 call	 _lua_setfield
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@newbox:
; Line 476
  00050	6a fe		 push	 -2			; fffffffeH
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 _lua_setmetatable
; Line 477
  00058	8d 45 fc	 lea	 eax, DWORD PTR _ud$1[ebp]
  0005b	50		 push	 eax
  0005c	57		 push	 edi
  0005d	e8 00 00 00 00	 call	 _lua_getallocf
  00062	6a ff		 push	 -1
  00064	57		 push	 edi
  00065	8b f0		 mov	 esi, eax
  00067	e8 00 00 00 00	 call	 _lua_touserdata
  0006c	ff 75 0c	 push	 DWORD PTR _newsize$[ebp]
  0006f	8b d8		 mov	 ebx, eax
  00071	ff 73 04	 push	 DWORD PTR [ebx+4]
  00074	ff 33		 push	 DWORD PTR [ebx]
  00076	ff 75 fc	 push	 DWORD PTR _ud$1[ebp]
  00079	ff d6		 call	 esi
  0007b	8b 75 0c	 mov	 esi, DWORD PTR _newsize$[ebp]
  0007e	83 c4 28	 add	 esp, 40			; 00000028H
  00081	89 45 f8	 mov	 DWORD PTR _temp$1$[ebp], eax
  00084	85 c0		 test	 eax, eax
  00086	75 1e		 jne	 SHORT $LN4@newbox
  00088	85 f6		 test	 esi, esi
  0008a	74 1a		 je	 SHORT $LN4@newbox
  0008c	50		 push	 eax
  0008d	6a ff		 push	 -1
  0008f	57		 push	 edi
  00090	e8 00 00 00 00	 call	 _resizebox
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KEENHMCA@not?5enough?5memory?5for?5buffer?5all@
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 _luaL_error
  000a0	8b 45 f8	 mov	 eax, DWORD PTR _temp$1$[ebp]
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
$LN4@newbox:
  000a6	5f		 pop	 edi
  000a7	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  000aa	5e		 pop	 esi
  000ab	89 03		 mov	 DWORD PTR [ebx], eax
  000ad	5b		 pop	 ebx
; Line 478
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_newbox	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _boxgc
_TEXT	SEGMENT
_ud$1 = -4						; size = 4
_L$ = 8							; size = 4
_boxgc	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 462
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
; Line 463
  00005	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00008	8d 45 fc	 lea	 eax, DWORD PTR _ud$1[ebp]
  0000b	57		 push	 edi
  0000c	50		 push	 eax
  0000d	56		 push	 esi
  0000e	e8 00 00 00 00	 call	 _lua_getallocf
  00013	6a 01		 push	 1
  00015	56		 push	 esi
  00016	8b f8		 mov	 edi, eax
  00018	e8 00 00 00 00	 call	 _lua_touserdata
  0001d	8b f0		 mov	 esi, eax
  0001f	6a 00		 push	 0
  00021	ff 76 04	 push	 DWORD PTR [esi+4]
  00024	ff 36		 push	 DWORD PTR [esi]
  00026	ff 75 fc	 push	 DWORD PTR _ud$1[ebp]
  00029	ff d7		 call	 edi
  0002b	83 c4 20	 add	 esp, 32			; 00000020H
  0002e	89 06		 mov	 DWORD PTR [esi], eax
  00030	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; Line 464
  00037	33 c0		 xor	 eax, eax
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
; Line 465
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_boxgc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _resizebox
_TEXT	SEGMENT
_ud$ = -4						; size = 4
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
_newsize$ = 16						; size = 4
_resizebox PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 447
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; Line 449
  00005	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  00008	8d 45 fc	 lea	 eax, DWORD PTR _ud$[ebp]
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	50		 push	 eax
  0000e	53		 push	 ebx
  0000f	e8 00 00 00 00	 call	 _lua_getallocf
; Line 450
  00014	ff 75 0c	 push	 DWORD PTR _idx$[ebp]
  00017	8b f0		 mov	 esi, eax
  00019	53		 push	 ebx
  0001a	e8 00 00 00 00	 call	 _lua_touserdata
; Line 451
  0001f	ff 75 10	 push	 DWORD PTR _newsize$[ebp]
  00022	8b f8		 mov	 edi, eax
  00024	ff 77 04	 push	 DWORD PTR [edi+4]
  00027	ff 37		 push	 DWORD PTR [edi]
  00029	ff 75 fc	 push	 DWORD PTR _ud$[ebp]
  0002c	ff d6		 call	 esi
  0002e	8b f0		 mov	 esi, eax
  00030	83 c4 20	 add	 esp, 32			; 00000020H
; Line 452
  00033	85 f6		 test	 esi, esi
  00035	75 1d		 jne	 SHORT $LN1@resizebox
  00037	39 45 10	 cmp	 DWORD PTR _newsize$[ebp], eax
  0003a	76 18		 jbe	 SHORT $LN1@resizebox
; Line 453
  0003c	50		 push	 eax
  0003d	ff 75 0c	 push	 DWORD PTR _idx$[ebp]
  00040	53		 push	 ebx
  00041	e8 00 00 00 00	 call	 _resizebox
; Line 454
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KEENHMCA@not?5enough?5memory?5for?5buffer?5all@
  0004b	53		 push	 ebx
  0004c	e8 00 00 00 00	 call	 _luaL_error
  00051	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@resizebox:
; Line 457
  00054	8b 5d 10	 mov	 ebx, DWORD PTR _newsize$[ebp]
; Line 458
  00057	8b c6		 mov	 eax, esi
  00059	89 37		 mov	 DWORD PTR [edi], esi
  0005b	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
; Line 459
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_resizebox ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _interror
_TEXT	SEGMENT
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_interror PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 408
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 409
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _arg$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _lua_isnumber
  00012	83 c4 08	 add	 esp, 8
  00015	85 c0		 test	 eax, eax
  00017	74 13		 je	 SHORT $LN2@interror
; Line 410
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@GPCMCKGL@number?5has?5no?5integer?5representa@
  0001e	57		 push	 edi
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _luaL_argerror
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
; Line 413
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@interror:
; Line 412
  0002c	6a 03		 push	 3
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _lua_typename
  00034	50		 push	 eax
  00035	57		 push	 edi
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 _typeerror
  0003c	83 c4 14	 add	 esp, 20			; 00000014H
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
; Line 413
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_interror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _tag_error
_TEXT	SEGMENT
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_tag$ = 16						; size = 4
_tag_error PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 196
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 197
  00003	ff 75 10	 push	 DWORD PTR _tag$[ebp]
  00006	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00009	e8 00 00 00 00	 call	 _lua_typename
  0000e	83 c4 08	 add	 esp, 8
  00011	89 45 10	 mov	 DWORD PTR _tag$[ebp], eax
; Line 198
  00014	5d		 pop	 ebp
; Line 197
  00015	e9 00 00 00 00	 jmp	 _typeerror
_tag_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _typeerror
_TEXT	SEGMENT
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_tname$ = 16						; size = 4
_typeerror PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 182
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 185
  00005	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _arg$[ebp]
  0000c	57		 push	 edi
  0000d	56		 push	 esi
  0000e	e8 00 00 00 00	 call	 _lua_getmetatable
  00013	83 c4 08	 add	 esp, 8
  00016	85 c0		 test	 eax, eax
  00018	74 27		 je	 SHORT $LN4@typeerror
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_06LHMLJNCG@__name?$AA@
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _lua_pushstring
  00025	6a fe		 push	 -2			; fffffffeH
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 _lua_rawget
  0002d	8b d8		 mov	 ebx, eax
  0002f	83 c4 10	 add	 esp, 16			; 00000010H
  00032	85 db		 test	 ebx, ebx
  00034	75 21		 jne	 SHORT $LN8@typeerror
  00036	6a fd		 push	 -3			; fffffffdH
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _lua_settop
  0003e	83 c4 08	 add	 esp, 8
$LN4@typeerror:
; Line 187
  00041	57		 push	 edi
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 _lua_type
  00048	83 c4 08	 add	 esp, 8
  0004b	83 f8 02	 cmp	 eax, 2
  0004e	75 30		 jne	 SHORT $LN2@typeerror
; Line 188
  00050	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@JGKNIAMH@light?5userdata?$AA@
; Line 189
  00055	eb 3a		 jmp	 SHORT $LN1@typeerror
; Line 185
$LN8@typeerror:
  00057	6a ff		 push	 -1
  00059	6a fe		 push	 -2			; fffffffeH
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 _lua_rotate
  00061	6a fe		 push	 -2			; fffffffeH
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 _lua_settop
  00069	83 c4 14	 add	 esp, 20			; 00000014H
  0006c	83 fb 04	 cmp	 ebx, 4
  0006f	75 d0		 jne	 SHORT $LN4@typeerror
; Line 186
  00071	6a 00		 push	 0
  00073	6a ff		 push	 -1
  00075	56		 push	 esi
  00076	e8 00 00 00 00	 call	 _lua_tolstring
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007e	eb 11		 jmp	 SHORT $LN1@typeerror
$LN2@typeerror:
; Line 190
  00080	57		 push	 edi
  00081	56		 push	 esi
  00082	e8 00 00 00 00	 call	 _lua_type
  00087	50		 push	 eax
  00088	56		 push	 esi
  00089	e8 00 00 00 00	 call	 _lua_typename
  0008e	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@typeerror:
; Line 191
  00091	50		 push	 eax
  00092	ff 75 10	 push	 DWORD PTR _tname$[ebp]
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LDJANOJE@?$CFs?5expected?0?5got?5?$CFs?$AA@
  0009a	56		 push	 esi
  0009b	e8 00 00 00 00	 call	 _lua_pushfstring
; Line 192
  000a0	50		 push	 eax
  000a1	57		 push	 edi
  000a2	56		 push	 esi
  000a3	e8 00 00 00 00	 call	 _luaL_argerror
  000a8	83 c4 1c	 add	 esp, 28			; 0000001cH
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
; Line 193
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_typeerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lastlevel
_TEXT	SEGMENT
_L$GSCopy$1$ = -108					; size = 4
_ar$ = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_lastlevel PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 110
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
; Line 114
  00014	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  00017	56		 push	 esi
  00018	50		 push	 eax
  00019	be 01 00 00 00	 mov	 esi, 1
  0001e	89 5d 94	 mov	 DWORD PTR _L$GSCopy$1$[ebp], ebx
  00021	56		 push	 esi
  00022	53		 push	 ebx
  00023	e8 00 00 00 00	 call	 _lua_getstack
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002b	85 c0		 test	 eax, eax
  0002d	74 5e		 je	 SHORT $LN17@lastlevel
  0002f	57		 push	 edi
$LL6@lastlevel:
  00030	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  00033	8b fe		 mov	 edi, esi
  00035	50		 push	 eax
  00036	03 f6		 add	 esi, esi
  00038	56		 push	 esi
  00039	53		 push	 ebx
  0003a	e8 00 00 00 00	 call	 _lua_getstack
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	85 c0		 test	 eax, eax
  00044	75 ea		 jne	 SHORT $LL6@lastlevel
; Line 116
  00046	3b fe		 cmp	 edi, esi
  00048	7d 2f		 jge	 SHORT $LN16@lastlevel
  0004a	8d 9b 00 00 00
	00		 npad	 6
$LL4@lastlevel:
; Line 117
  00050	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00053	99		 cdq
  00054	2b c2		 sub	 eax, edx
  00056	8b d8		 mov	 ebx, eax
; Line 118
  00058	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  0005b	50		 push	 eax
  0005c	d1 fb		 sar	 ebx, 1
  0005e	53		 push	 ebx
  0005f	ff 75 94	 push	 DWORD PTR _L$GSCopy$1$[ebp]
  00062	e8 00 00 00 00	 call	 _lua_getstack
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	85 c0		 test	 eax, eax
  0006c	74 05		 je	 SHORT $LN2@lastlevel
  0006e	8d 7b 01	 lea	 edi, DWORD PTR [ebx+1]
  00071	eb 02		 jmp	 SHORT $LN1@lastlevel
$LN2@lastlevel:
; Line 119
  00073	8b f3		 mov	 esi, ebx
$LN1@lastlevel:
; Line 116
  00075	3b fe		 cmp	 edi, esi
  00077	7c d7		 jl	 SHORT $LL4@lastlevel
$LN16@lastlevel:
  00079	5f		 pop	 edi
; Line 121
  0007a	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
; Line 122
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00082	33 cd		 xor	 ecx, ebp
  00084	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
$LN17@lastlevel:
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00093	5e		 pop	 esi
  00094	33 cd		 xor	 ecx, ebp
  00096	5b		 pop	 ebx
  00097	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
_lastlevel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _pushfuncname
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ar$ = 12						; size = 4
_pushfuncname PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 94
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 95
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _ar$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _pushglobalfuncname
  00012	83 c4 08	 add	 esp, 8
  00015	85 c0		 test	 eax, eax
  00017	74 2f		 je	 SHORT $LN8@pushfuncna
; Line 96
  00019	6a 00		 push	 0
  0001b	6a ff		 push	 -1
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 _lua_tolstring
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EHCGJIOP@function?5?8?$CFs?8?$AA@
  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 _lua_pushfstring
; Line 97
  0002f	6a ff		 push	 -1
  00031	6a fe		 push	 -2			; fffffffeH
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _lua_rotate
  00039	6a fe		 push	 -2			; fffffffeH
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _lua_settop
  00041	83 c4 2c	 add	 esp, 44			; 0000002cH
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
; Line 107
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN8@pushfuncna:
; Line 99
  00048	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0004b	80 38 00	 cmp	 BYTE PTR [eax], 0
  0004e	74 16		 je	 SHORT $LN6@pushfuncna
; Line 100
  00050	ff 77 04	 push	 DWORD PTR [edi+4]
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_07JJBIELFA@?$CFs?5?8?$CFs?8?$AA@
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 _lua_pushfstring
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
; Line 107
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
$LN6@pushfuncna:
; Line 101
  00066	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00069	8a 00		 mov	 al, BYTE PTR [eax]
  0006b	3c 6d		 cmp	 al, 109			; 0000006dH
  0006d	75 12		 jne	 SHORT $LN4@pushfuncna
; Line 102
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HEICADBI@main?5chunk?$AA@
; Line 106
  00074	56		 push	 esi
  00075	e8 00 00 00 00	 call	 _lua_pushstring
  0007a	83 c4 08	 add	 esp, 8
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
; Line 107
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN4@pushfuncna:
; Line 103
  00081	3c 43		 cmp	 al, 67			; 00000043H
  00083	74 19		 je	 SHORT $LN2@pushfuncna
; Line 104
  00085	ff 77 18	 push	 DWORD PTR [edi+24]
  00088	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OJHNELPG@function?5?$DM?$CFs?3?$CFd?$DO?$AA@
  00091	56		 push	 esi
  00092	e8 00 00 00 00	 call	 _lua_pushfstring
  00097	83 c4 10	 add	 esp, 16			; 00000010H
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
; Line 107
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN2@pushfuncna:
; Line 106
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_01OGPIMHDM@?$DP?$AA@
  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 _lua_pushstring
  000a9	83 c4 08	 add	 esp, 8
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
; Line 107
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_pushfuncname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _pushglobalfuncname
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ar$ = 12						; size = 4
_pushglobalfuncname PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 73
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 74
  00005	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00008	57		 push	 edi
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _lua_gettop
; Line 75
  0000f	ff 75 0c	 push	 DWORD PTR _ar$[ebp]
  00012	8b f8		 mov	 edi, eax
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_01INIBCBCB@f?$AA@
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 _lua_getinfo
; Line 76
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_07PINPBNPB@_LOADED?$AA@
  00024	68 d8 b9 f0 ff	 push	 -1001000		; fff0b9d8H
  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 _lua_getfield
; Line 77
  0002f	6a 02		 push	 2
  00031	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  00034	53		 push	 ebx
  00035	56		 push	 esi
  00036	e8 00 00 00 00	 call	 _findfield
  0003b	83 c4 28	 add	 esp, 40			; 00000028H
  0003e	85 c0		 test	 eax, eax
  00040	74 5e		 je	 SHORT $LN3@pushglobal
; Line 78
  00042	6a 00		 push	 0
  00044	6a ff		 push	 -1
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 _lua_tolstring
; Line 79
  0004c	6a 03		 push	 3
  0004e	8b f8		 mov	 edi, eax
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_03DDAHKNHO@_G?4?$AA@
  00055	57		 push	 edi
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncmp
  0005c	83 c4 18	 add	 esp, 24			; 00000018H
  0005f	85 c0		 test	 eax, eax
  00061	75 1f		 jne	 SHORT $LN2@pushglobal
; Line 80
  00063	8d 47 03	 lea	 eax, DWORD PTR [edi+3]
  00066	50		 push	 eax
  00067	56		 push	 esi
  00068	e8 00 00 00 00	 call	 _lua_pushstring
; Line 81
  0006d	6a ff		 push	 -1
  0006f	6a fe		 push	 -2			; fffffffeH
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 _lua_rotate
  00077	6a fe		 push	 -2			; fffffffeH
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 _lua_settop
  0007f	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@pushglobal:
; Line 83
  00082	53		 push	 ebx
  00083	6a ff		 push	 -1
  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 _lua_copy
; Line 84
  0008b	6a fd		 push	 -3			; fffffffdH
  0008d	56		 push	 esi
  0008e	e8 00 00 00 00	 call	 _lua_settop
  00093	83 c4 14	 add	 esp, 20			; 00000014H
; Line 85
  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
; Line 91
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
$LN3@pushglobal:
; Line 88
  000a0	57		 push	 edi
  000a1	56		 push	 esi
  000a2	e8 00 00 00 00	 call	 _lua_settop
  000a7	83 c4 08	 add	 esp, 8
; Line 89
  000aa	33 c0		 xor	 eax, eax
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
; Line 91
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
_pushglobalfuncname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _findfield
_TEXT	SEGMENT
_L$ = 8							; size = 4
_objidx$ = 12						; size = 4
_level$ = 16						; size = 4
_findfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 45
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 46
  00004	8b 5d 10	 mov	 ebx, DWORD PTR _level$[ebp]
  00007	56		 push	 esi
  00008	85 db		 test	 ebx, ebx
  0000a	0f 84 d1 00 00
	00		 je	 $LN7@findfield
  00010	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00013	6a ff		 push	 -1
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _lua_type
  0001b	83 c4 08	 add	 esp, 8
  0001e	83 f8 05	 cmp	 eax, 5
  00021	0f 85 ba 00 00
	00		 jne	 $LN7@findfield
; Line 48
  00027	57		 push	 edi
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 _lua_pushnil
; Line 49
  0002e	6a fe		 push	 -2			; fffffffeH
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _lua_next
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	85 c0		 test	 eax, eax
  0003b	74 4c		 je	 SHORT $LN17@findfield
  0003d	8b 7d 0c	 mov	 edi, DWORD PTR _objidx$[ebp]
$LL6@findfield:
; Line 50
  00040	6a fe		 push	 -2			; fffffffeH
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 _lua_type
  00048	83 c4 08	 add	 esp, 8
  0004b	83 f8 04	 cmp	 eax, 4
  0004e	75 22		 jne	 SHORT $LN1@findfield
; Line 51
  00050	6a ff		 push	 -1
  00052	57		 push	 edi
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 _lua_rawequal
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	85 c0		 test	 eax, eax
  0005e	75 6c		 jne	 SHORT $LN12@findfield
; Line 55
  00060	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00063	50		 push	 eax
  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 _findfield
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006e	85 c0		 test	 eax, eax
  00070	75 1e		 jne	 SHORT $LN13@findfield
$LN1@findfield:
; Line 63
  00072	6a fe		 push	 -2			; fffffffeH
  00074	56		 push	 esi
  00075	e8 00 00 00 00	 call	 _lua_settop
  0007a	6a fe		 push	 -2			; fffffffeH
  0007c	56		 push	 esi
  0007d	e8 00 00 00 00	 call	 _lua_next
  00082	83 c4 10	 add	 esp, 16			; 00000010H
  00085	85 c0		 test	 eax, eax
  00087	75 b7		 jne	 SHORT $LL6@findfield
$LN17@findfield:
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
; Line 65
  0008b	33 c0		 xor	 eax, eax
  0008d	5b		 pop	 ebx
; Line 66
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN13@findfield:
; Line 56
  00090	6a ff		 push	 -1
  00092	6a fe		 push	 -2			; fffffffeH
  00094	56		 push	 esi
  00095	e8 00 00 00 00	 call	 _lua_rotate
  0009a	6a fe		 push	 -2			; fffffffeH
  0009c	56		 push	 esi
  0009d	e8 00 00 00 00	 call	 _lua_settop
; Line 57
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4?$AA@
  000a7	56		 push	 esi
  000a8	e8 00 00 00 00	 call	 _lua_pushstring
; Line 58
  000ad	6a 01		 push	 1
  000af	6a fe		 push	 -2			; fffffffeH
  000b1	56		 push	 esi
  000b2	e8 00 00 00 00	 call	 _lua_rotate
; Line 59
  000b7	6a 03		 push	 3
  000b9	56		 push	 esi
  000ba	e8 00 00 00 00	 call	 _lua_concat
  000bf	83 c4 30	 add	 esp, 48			; 00000030H
; Line 60
  000c2	b8 01 00 00 00	 mov	 eax, 1
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
; Line 66
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
$LN12@findfield:
; Line 52
  000cc	6a fe		 push	 -2			; fffffffeH
  000ce	56		 push	 esi
  000cf	e8 00 00 00 00	 call	 _lua_settop
  000d4	83 c4 08	 add	 esp, 8
; Line 60
  000d7	b8 01 00 00 00	 mov	 eax, 1
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
; Line 66
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
$LN7@findfield:
  000e1	5e		 pop	 esi
; Line 47
  000e2	33 c0		 xor	 eax, eax
  000e4	5b		 pop	 ebx
; Line 66
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
_findfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_openlib
_TEXT	SEGMENT
_L$ = 8							; size = 4
_libname$ = 12						; size = 4
_l$ = 16						; size = 4
_nup$ = 20						; size = 4
_luaL_openlib PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 891
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 892
  00005	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00008	57		 push	 edi
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _lua_version
  0000f	6a 00		 push	 0
  00011	8b f8		 mov	 edi, eax
  00013	e8 00 00 00 00	 call	 _lua_version
  00018	83 c4 08	 add	 esp, 8
  0001b	3b f8		 cmp	 edi, eax
  0001d	74 10		 je	 SHORT $LN8@luaL_openl
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DLNLJHN@multiple?5Lua?5VMs?5detected?$AA@
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 _luaL_error
  0002a	83 c4 08	 add	 esp, 8
  0002d	eb 32		 jmp	 SHORT $LN6@luaL_openl
$LN8@luaL_openl:
  0002f	f2 0f 10 0f	 movsd	 xmm1, QWORD PTR [edi]
  00033	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405bc00000000000
  0003b	66 0f 2e c8	 ucomisd xmm1, xmm0
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7b 1c		 jnp	 SHORT $LN6@luaL_openl
  00045	83 ec 10	 sub	 esp, 16			; 00000010H
  00048	f2 0f 11 4c 24
	08		 movsd	 QWORD PTR [esp+8], xmm1
  0004e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@EDLDPMHE@version?5mismatch?3?5app?4?5needs?5?$CFf?0@
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 _luaL_error
  0005e	83 c4 18	 add	 esp, 24			; 00000018H
$LN6@luaL_openl:
; Line 893
  00061	8b 55 0c	 mov	 edx, DWORD PTR _libname$[ebp]
  00064	83 cf ff	 or	 edi, -1
  00067	8b 45 14	 mov	 eax, DWORD PTR _nup$[ebp]
  0006a	8b 5d 10	 mov	 ebx, DWORD PTR _l$[ebp]
  0006d	85 d2		 test	 edx, edx
  0006f	74 36		 je	 SHORT $LN3@luaL_openl
; Line 894
  00071	33 c9		 xor	 ecx, ecx
  00073	8b c3		 mov	 eax, ebx
  00075	85 db		 test	 ebx, ebx
  00077	74 12		 je	 SHORT $LN21@luaL_openl
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL14@luaL_openl:
  00080	83 38 00	 cmp	 DWORD PTR [eax], 0
  00083	74 06		 je	 SHORT $LN21@luaL_openl
  00085	41		 inc	 ecx
  00086	83 c0 08	 add	 eax, 8
  00089	75 f5		 jne	 SHORT $LL14@luaL_openl
$LN21@luaL_openl:
  0008b	51		 push	 ecx
  0008c	52		 push	 edx
  0008d	56		 push	 esi
  0008e	e8 00 00 00 00	 call	 _luaL_pushmodule
; Line 895
  00093	8b c7		 mov	 eax, edi
  00095	2b 45 14	 sub	 eax, DWORD PTR _nup$[ebp]
  00098	6a 01		 push	 1
  0009a	50		 push	 eax
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 _lua_rotate
  000a1	8b 45 14	 mov	 eax, DWORD PTR _nup$[ebp]
  000a4	83 c4 18	 add	 esp, 24			; 00000018H
$LN3@luaL_openl:
; Line 897
  000a7	85 db		 test	 ebx, ebx
  000a9	74 10		 je	 SHORT $LN2@luaL_openl
; Line 898
  000ab	50		 push	 eax
  000ac	53		 push	 ebx
  000ad	56		 push	 esi
  000ae	e8 00 00 00 00	 call	 _luaL_setfuncs
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
; Line 901
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
$LN2@luaL_openl:
; Line 900
  000bb	2b f8		 sub	 edi, eax
  000bd	57		 push	 edi
  000be	56		 push	 esi
  000bf	e8 00 00 00 00	 call	 _lua_settop
  000c4	83 c4 08	 add	 esp, 8
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
; Line 901
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
_luaL_openlib ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_pushmodule
_TEXT	SEGMENT
_L$ = 8							; size = 4
_modname$ = 12						; size = 4
_sizehint$ = 16						; size = 4
_luaL_pushmodule PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 875
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 876
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	6a 01		 push	 1
  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_07PINPBNPB@_LOADED?$AA@
  0000f	68 d8 b9 f0 ff	 push	 -1001000		; fff0b9d8H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _luaL_findtable
; Line 877
  0001a	8b 7d 0c	 mov	 edi, DWORD PTR _modname$[ebp]
  0001d	57		 push	 edi
  0001e	6a ff		 push	 -1
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 _lua_getfield
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	83 f8 05	 cmp	 eax, 5
  0002c	74 4d		 je	 SHORT $LN2@luaL_pushm
; Line 878
  0002e	6a fe		 push	 -2			; fffffffeH
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _lua_settop
; Line 880
  00036	6a 00		 push	 0
  00038	6a 02		 push	 2
  0003a	68 d8 b9 f0 ff	 push	 -1001000		; fff0b9d8H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _lua_rawgeti
; Line 881
  00045	ff 75 10	 push	 DWORD PTR _sizehint$[ebp]
  00048	57		 push	 edi
  00049	6a 00		 push	 0
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 _luaL_findtable
  00051	83 c4 28	 add	 esp, 40			; 00000028H
  00054	85 c0		 test	 eax, eax
  00056	74 0f		 je	 SHORT $LN1@luaL_pushm
; Line 882
  00058	57		 push	 edi
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CBJIAGLF@name?5conflict?5for?5module?5?8?$CFs?8?$AA@
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 _luaL_error
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@luaL_pushm:
; Line 883
  00067	6a ff		 push	 -1
  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 884
  0006f	57		 push	 edi
  00070	6a fd		 push	 -3			; fffffffdH
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 _lua_setfield
  00078	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@luaL_pushm:
; Line 886
  0007b	6a ff		 push	 -1
  0007d	6a fe		 push	 -2			; fffffffeH
  0007f	56		 push	 esi
  00080	e8 00 00 00 00	 call	 _lua_rotate
  00085	6a fe		 push	 -2			; fffffffeH
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 _lua_settop
  0008d	83 c4 14	 add	 esp, 20			; 00000014H
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
; Line 887
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_luaL_pushmodule ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_buffinitsize
_TEXT	SEGMENT
_L$ = 8							; size = 4
_B$ = 12						; size = 4
_sz$ = 16						; size = 4
_luaL_buffinitsize PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 563
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 564
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _B$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
; Line 565
  00009	ff 75 10	 push	 DWORD PTR _sz$[ebp]
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0000f	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00012	51		 push	 ecx
  00013	89 01		 mov	 DWORD PTR [ecx], eax
  00015	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001c	c7 41 04 00 20
	00 00		 mov	 DWORD PTR [ecx+4], 8192	; 00002000H
  00023	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  00028	83 c4 08	 add	 esp, 8
; Line 566
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_luaL_buffinitsize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_pushresultsize
_TEXT	SEGMENT
_B$ = 8							; size = 4
_sz$ = 12						; size = 4
_luaL_pushresultsize PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 538
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 539
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _B$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
; Line 540
  00009	51		 push	 ecx
  0000a	01 41 08	 add	 DWORD PTR [ecx+8], eax
  0000d	e8 00 00 00 00	 call	 _luaL_pushresult
  00012	83 c4 04	 add	 esp, 4
; Line 541
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_luaL_pushresultsize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_pushresult
_TEXT	SEGMENT
_ud$1 = 8						; size = 4
_B$ = 8							; size = 4
_luaL_pushresult PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 528
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 529
  00005	8b 75 08	 mov	 esi, DWORD PTR _B$[ebp]
; Line 530
  00008	ff 76 08	 push	 DWORD PTR [esi+8]
  0000b	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	53		 push	 ebx
  00011	e8 00 00 00 00	 call	 _lua_pushlstring
; Line 531
  00016	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	39 06		 cmp	 DWORD PTR [esi], eax
  0001e	74 42		 je	 SHORT $LN1@luaL_pushr
; Line 532
  00020	57		 push	 edi
  00021	8d 45 08	 lea	 eax, DWORD PTR _ud$1[ebp]
  00024	50		 push	 eax
  00025	53		 push	 ebx
  00026	e8 00 00 00 00	 call	 _lua_getallocf
  0002b	6a fe		 push	 -2			; fffffffeH
  0002d	53		 push	 ebx
  0002e	8b f8		 mov	 edi, eax
  00030	e8 00 00 00 00	 call	 _lua_touserdata
  00035	8b f0		 mov	 esi, eax
  00037	6a 00		 push	 0
  00039	ff 76 04	 push	 DWORD PTR [esi+4]
  0003c	ff 36		 push	 DWORD PTR [esi]
  0003e	ff 75 08	 push	 DWORD PTR _ud$1[ebp]
  00041	ff d7		 call	 edi
; Line 533
  00043	6a ff		 push	 -1
  00045	6a fe		 push	 -2			; fffffffeH
  00047	53		 push	 ebx
  00048	89 06		 mov	 DWORD PTR [esi], eax
  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00051	e8 00 00 00 00	 call	 _lua_rotate
  00056	6a fe		 push	 -2			; fffffffeH
  00058	53		 push	 ebx
  00059	e8 00 00 00 00	 call	 _lua_settop
  0005e	83 c4 34	 add	 esp, 52			; 00000034H
  00061	5f		 pop	 edi
$LN1@luaL_pushr:
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
; Line 535
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_luaL_pushresult ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_addvalue
_TEXT	SEGMENT
_s$1$ = -4						; size = 4
_l$ = 8							; size = 4
_B$ = 8							; size = 4
_luaL_addvalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 544
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; Line 545
  00006	8b 75 08	 mov	 esi, DWORD PTR _B$[ebp]
; Line 547
  00009	8d 45 08	 lea	 eax, DWORD PTR _l$[ebp]
  0000c	57		 push	 edi
  0000d	50		 push	 eax
  0000e	6a ff		 push	 -1
  00010	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00013	57		 push	 edi
  00014	e8 00 00 00 00	 call	 _lua_tolstring
  00019	89 45 fc	 mov	 DWORD PTR _s$1$[ebp], eax
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 548
  0001f	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00022	39 06		 cmp	 DWORD PTR [esi], eax
  00024	74 0d		 je	 SHORT $LN1@luaL_addva
; Line 549
  00026	6a 01		 push	 1
  00028	6a fe		 push	 -2			; fffffffeH
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 _lua_rotate
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@luaL_addva:
; Line 550
  00033	8b 5d 08	 mov	 ebx, DWORD PTR _l$[ebp]
  00036	85 db		 test	 ebx, ebx
  00038	74 17		 je	 SHORT $LN4@luaL_addva
  0003a	53		 push	 ebx
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  00041	53		 push	 ebx
  00042	ff 75 fc	 push	 DWORD PTR _s$1$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _memcpy
  0004b	83 c4 14	 add	 esp, 20			; 00000014H
  0004e	01 5e 08	 add	 DWORD PTR [esi+8], ebx
$LN4@luaL_addva:
; Line 551
  00051	33 c0		 xor	 eax, eax
  00053	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00056	39 0e		 cmp	 DWORD PTR [esi], ecx
  00058	6a ff		 push	 -1
  0005a	0f 94 c0	 sete	 al
  0005d	83 c0 fe	 add	 eax, -2			; fffffffeH
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	e8 00 00 00 00	 call	 _lua_rotate
  00067	6a fe		 push	 -2			; fffffffeH
  00069	57		 push	 edi
  0006a	e8 00 00 00 00	 call	 _lua_settop
  0006f	83 c4 14	 add	 esp, 20			; 00000014H
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
; Line 552
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_luaL_addvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_addstring
_TEXT	SEGMENT
_B$ = 8							; size = 4
_s$ = 12						; size = 4
_luaL_addstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 523
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; Line 524
  00004	8b 7d 0c	 mov	 edi, DWORD PTR _s$[ebp]
  00007	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL6@luaL_addst:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL6@luaL_addst
  00017	2b f9		 sub	 edi, ecx
  00019	74 1c		 je	 SHORT $LN3@luaL_addst
  0001b	56		 push	 esi
  0001c	8b 75 08	 mov	 esi, DWORD PTR _B$[ebp]
  0001f	57		 push	 edi
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  00026	57		 push	 edi
  00027	ff 75 0c	 push	 DWORD PTR _s$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _memcpy
  00030	83 c4 14	 add	 esp, 20			; 00000014H
  00033	01 7e 08	 add	 DWORD PTR [esi+8], edi
  00036	5e		 pop	 esi
$LN3@luaL_addst:
  00037	5f		 pop	 edi
; Line 525
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_luaL_addstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_addlstring
_TEXT	SEGMENT
_B$ = 8							; size = 4
_s$ = 12						; size = 4
_l$ = 16						; size = 4
_luaL_addlstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 514
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; Line 515
  00004	8b 7d 10	 mov	 edi, DWORD PTR _l$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 1c		 je	 SHORT $LN1@luaL_addls
; Line 516
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR _B$[ebp]
  0000f	57		 push	 edi
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 _luaL_prepbuffsize
; Line 517
  00016	57		 push	 edi
  00017	ff 75 0c	 push	 DWORD PTR _s$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _memcpy
  00020	83 c4 14	 add	 esp, 20			; 00000014H
; Line 518
  00023	01 7e 08	 add	 DWORD PTR [esi+8], edi
  00026	5e		 pop	 esi
$LN1@luaL_addls:
  00027	5f		 pop	 edi
; Line 520
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_luaL_addlstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_prepbuffsize
_TEXT	SEGMENT
_B$ = 8							; size = 4
_sz$ = 12						; size = 4
_luaL_prepbuffsize PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 491
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 493
  00003	8b 55 0c	 mov	 edx, DWORD PTR _sz$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _B$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0000f	8b c7		 mov	 eax, edi
  00011	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00014	2b c1		 sub	 eax, ecx
  00016	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00019	3b c2		 cmp	 eax, edx
  0001b	73 66		 jae	 SHORT $LN6@luaL_prepb
; Line 495
  0001d	03 ff		 add	 edi, edi
; Line 496
  0001f	8b c7		 mov	 eax, edi
  00021	2b c1		 sub	 eax, ecx
  00023	3b c2		 cmp	 eax, edx
  00025	73 03		 jae	 SHORT $LN5@luaL_prepb
; Line 497
  00027	8d 3c 11	 lea	 edi, DWORD PTR [ecx+edx]
$LN5@luaL_prepb:
; Line 498
  0002a	3b f9		 cmp	 edi, ecx
  0002c	72 08		 jb	 SHORT $LN3@luaL_prepb
  0002e	8b c7		 mov	 eax, edi
  00030	2b c1		 sub	 eax, ecx
  00032	3b c2		 cmp	 eax, edx
  00034	73 0e		 jae	 SHORT $LN4@luaL_prepb
$LN3@luaL_prepb:
; Line 499
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IIFCFAGL@buffer?5too?5large?$AA@
  0003b	53		 push	 ebx
  0003c	e8 00 00 00 00	 call	 _luaL_error
  00041	83 c4 08	 add	 esp, 8
$LN4@luaL_prepb:
; Line 501
  00044	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; Line 502
  00047	57		 push	 edi
  00048	39 06		 cmp	 DWORD PTR [esi], eax
  0004a	74 1c		 je	 SHORT $LN2@luaL_prepb
  0004c	6a ff		 push	 -1
  0004e	53		 push	 ebx
  0004f	e8 00 00 00 00	 call	 _resizebox
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 508
  00057	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0005a	8b d8		 mov	 ebx, eax
; Line 510
  0005c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0005f	89 1e		 mov	 DWORD PTR [esi], ebx
  00061	03 c3		 add	 eax, ebx
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
; Line 511
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
$LN2@luaL_prepb:
; Line 504
  00068	53		 push	 ebx
  00069	e8 00 00 00 00	 call	 _newbox
; Line 505
  0006e	ff 76 08	 push	 DWORD PTR [esi+8]
  00071	8b d8		 mov	 ebx, eax
  00073	ff 36		 push	 DWORD PTR [esi]
  00075	53		 push	 ebx
  00076	e8 00 00 00 00	 call	 _memcpy
  0007b	83 c4 14	 add	 esp, 20			; 00000014H
; Line 507
  0007e	89 1e		 mov	 DWORD PTR [esi], ebx
; Line 508
  00080	89 7e 04	 mov	 DWORD PTR [esi+4], edi
$LN6@luaL_prepb:
; Line 510
  00083	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00086	03 06		 add	 eax, DWORD PTR [esi]
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
; Line 511
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_luaL_prepbuffsize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_buffinit
_TEXT	SEGMENT
_L$ = 8							; size = 4
_B$ = 12						; size = 4
_luaL_buffinit PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 555
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 556
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _B$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  00009	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; Line 557
  0000c	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
; Line 558
  00011	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; Line 559
  00018	c7 41 04 00 20
	00 00		 mov	 DWORD PTR [ecx+4], 8192	; 00002000H
; Line 560
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_luaL_buffinit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_requiref
_TEXT	SEGMENT
_L$ = 8							; size = 4
_modname$ = 12						; size = 4
_openf$ = 16						; size = 4
_glb$ = 20						; size = 4
_luaL_requiref PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 949
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 950
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_07PINPBNPB@_LOADED?$AA@
  0000d	68 d8 b9 f0 ff	 push	 -1001000		; fff0b9d8H
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 _lua_getfield
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	83 f8 05	 cmp	 eax, 5
  0001e	74 36		 je	 SHORT $LN5@luaL_requi
  00020	6a fe		 push	 -2			; fffffffeH
  00022	57		 push	 edi
  00023	e8 00 00 00 00	 call	 _lua_settop
  00028	68 d8 b9 f0 ff	 push	 -1001000		; fff0b9d8H
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 _lua_absindex
  00033	6a 00		 push	 0
  00035	6a 00		 push	 0
  00037	57		 push	 edi
  00038	8b f0		 mov	 esi, eax
  0003a	e8 00 00 00 00	 call	 _lua_createtable
  0003f	6a ff		 push	 -1
  00041	57		 push	 edi
  00042	e8 00 00 00 00	 call	 _lua_pushvalue
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_07PINPBNPB@_LOADED?$AA@
  0004c	56		 push	 esi
  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 _lua_setfield
  00053	83 c4 30	 add	 esp, 48			; 00000030H
$LN5@luaL_requi:
; Line 951
  00056	8b 75 0c	 mov	 esi, DWORD PTR _modname$[ebp]
  00059	56		 push	 esi
  0005a	6a ff		 push	 -1
  0005c	57		 push	 edi
  0005d	e8 00 00 00 00	 call	 _lua_getfield
; Line 952
  00062	6a ff		 push	 -1
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 _lua_toboolean
  0006a	83 c4 14	 add	 esp, 20			; 00000014H
  0006d	85 c0		 test	 eax, eax
  0006f	75 3c		 jne	 SHORT $LN2@luaL_requi
; Line 953
  00071	6a fe		 push	 -2			; fffffffeH
  00073	57		 push	 edi
  00074	e8 00 00 00 00	 call	 _lua_settop
; Line 954
  00079	6a 00		 push	 0
  0007b	ff 75 10	 push	 DWORD PTR _openf$[ebp]
  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 _lua_pushcclosure
; Line 955
  00084	56		 push	 esi
  00085	57		 push	 edi
  00086	e8 00 00 00 00	 call	 _lua_pushstring
; Line 956
  0008b	6a 00		 push	 0
  0008d	6a 00		 push	 0
  0008f	6a 01		 push	 1
  00091	6a 01		 push	 1
  00093	57		 push	 edi
  00094	e8 00 00 00 00	 call	 _lua_callk
; Line 957
  00099	6a ff		 push	 -1
  0009b	57		 push	 edi
  0009c	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 958
  000a1	56		 push	 esi
  000a2	6a fd		 push	 -3			; fffffffdH
  000a4	57		 push	 edi
  000a5	e8 00 00 00 00	 call	 _lua_setfield
  000aa	83 c4 44	 add	 esp, 68			; 00000044H
$LN2@luaL_requi:
; Line 960
  000ad	6a ff		 push	 -1
  000af	6a fe		 push	 -2			; fffffffeH
  000b1	57		 push	 edi
  000b2	e8 00 00 00 00	 call	 _lua_rotate
  000b7	6a fe		 push	 -2			; fffffffeH
  000b9	57		 push	 edi
  000ba	e8 00 00 00 00	 call	 _lua_settop
  000bf	83 c4 14	 add	 esp, 20			; 00000014H
; Line 961
  000c2	83 7d 14 00	 cmp	 DWORD PTR _glb$[ebp], 0
  000c6	74 12		 je	 SHORT $LN1@luaL_requi
; Line 962
  000c8	6a ff		 push	 -1
  000ca	57		 push	 edi
  000cb	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 963
  000d0	56		 push	 esi
  000d1	57		 push	 edi
  000d2	e8 00 00 00 00	 call	 _lua_setglobal
  000d7	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@luaL_requi:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
; Line 965
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
_luaL_requiref ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_traceback
_TEXT	SEGMENT
_last$1$ = -120						; size = 4
_msg$GSCopy$1$ = -116					; size = 4
_top$1$ = -112						; size = 4
_L1$GSCopy$1$ = -108					; size = 4
_ar$ = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_L1$ = 12						; size = 4
_msg$ = 16						; size = 4
_level$ = 20						; size = 4
_luaL_traceback PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 126
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _msg$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _L1$[ebp]
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0001b	57		 push	 edi
; Line 128
  0001c	56		 push	 esi
  0001d	89 5d 94	 mov	 DWORD PTR _L1$GSCopy$1$[ebp], ebx
  00020	89 45 8c	 mov	 DWORD PTR _msg$GSCopy$1$[ebp], eax
  00023	e8 00 00 00 00	 call	 _lua_gettop
; Line 129
  00028	53		 push	 ebx
  00029	89 45 90	 mov	 DWORD PTR _top$1$[ebp], eax
  0002c	e8 00 00 00 00	 call	 _lastlevel
; Line 130
  00031	8b 7d 14	 mov	 edi, DWORD PTR _level$[ebp]
  00034	8b c8		 mov	 ecx, eax
  00036	2b cf		 sub	 ecx, edi
  00038	89 45 88	 mov	 DWORD PTR _last$1$[ebp], eax
  0003b	83 cb ff	 or	 ebx, -1
  0003e	83 c4 08	 add	 esp, 8
  00041	83 f9 15	 cmp	 ecx, 21			; 00000015H
  00044	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00049	0f 4f d8	 cmovg	 ebx, eax
; Line 131
  0004c	8b 45 8c	 mov	 eax, DWORD PTR _msg$GSCopy$1$[ebp]
  0004f	85 c0		 test	 eax, eax
  00051	74 0f		 je	 SHORT $LN7@luaL_trace
; Line 132
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 _lua_pushfstring
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@luaL_trace:
; Line 133
  00062	6a 1e		 push	 30			; 0000001eH
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 _lua_checkstack
  0006a	83 c4 08	 add	 esp, 8
  0006d	85 c0		 test	 eax, eax
  0006f	75 0e		 jne	 SHORT $LN10@luaL_trace
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 _luaL_error
  0007c	83 c4 08	 add	 esp, 8
$LN10@luaL_trace:
; Line 134
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CJHIJJAH@stack?5traceback?3?$AA@
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 _lua_pushstring
; Line 135
  0008a	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  0008d	50		 push	 eax
  0008e	57		 push	 edi
  0008f	ff 75 94	 push	 DWORD PTR _L1$GSCopy$1$[ebp]
  00092	e8 00 00 00 00	 call	 _lua_getstack
  00097	83 c4 14	 add	 esp, 20			; 00000014H
  0009a	85 c0		 test	 eax, eax
  0009c	0f 84 ae 00 00
	00		 je	 $LN16@luaL_trace
$LL6@luaL_trace:
; Line 136
  000a2	8b c3		 mov	 eax, ebx
  000a4	47		 inc	 edi
  000a5	4b		 dec	 ebx
  000a6	85 c0		 test	 eax, eax
  000a8	75 16		 jne	 SHORT $LN4@luaL_trace
; Line 137
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_05JLIPKFIA@?6?7?4?4?4?$AA@
  000af	56		 push	 esi
  000b0	e8 00 00 00 00	 call	 _lua_pushstring
; Line 138
  000b5	8b 7d 88	 mov	 edi, DWORD PTR _last$1$[ebp]
  000b8	83 c4 08	 add	 esp, 8
  000bb	83 c7 f6	 add	 edi, -10		; fffffff6H
; Line 140
  000be	eb 78		 jmp	 SHORT $LN3@luaL_trace
$LN4@luaL_trace:
; Line 141
  000c0	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  000c3	50		 push	 eax
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_04DOIEKPJK@Slnt?$AA@
  000c9	ff 75 94	 push	 DWORD PTR _L1$GSCopy$1$[ebp]
  000cc	e8 00 00 00 00	 call	 _lua_getinfo
; Line 142
  000d1	8d 45 bc	 lea	 eax, DWORD PTR _ar$[ebp+36]
  000d4	50		 push	 eax
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_05GEEEIDH@?6?7?$CFs?3?$AA@
  000da	56		 push	 esi
  000db	e8 00 00 00 00	 call	 _lua_pushfstring
; Line 143
  000e0	8b 45 ac	 mov	 eax, DWORD PTR _ar$[ebp+20]
  000e3	83 c4 18	 add	 esp, 24			; 00000018H
  000e6	85 c0		 test	 eax, eax
  000e8	7e 0f		 jle	 SHORT $LN2@luaL_trace
; Line 144
  000ea	50		 push	 eax
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_03CDCAMCGK@?$CFd?3?$AA@
  000f0	56		 push	 esi
  000f1	e8 00 00 00 00	 call	 _lua_pushfstring
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@luaL_trace:
; Line 145
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_04GJPPFNOH@?5in?5?$AA@
  000fe	56		 push	 esi
  000ff	e8 00 00 00 00	 call	 _lua_pushstring
; Line 146
  00104	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  00107	50		 push	 eax
  00108	56		 push	 esi
  00109	e8 00 00 00 00	 call	 _pushfuncname
  0010e	83 c4 10	 add	 esp, 16			; 00000010H
; Line 147
  00111	80 7d bb 00	 cmp	 BYTE PTR _ar$[ebp+35], 0
  00115	74 0e		 je	 SHORT $LN1@luaL_trace
; Line 148
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HEPAINJG@?6?7?$CI?4?4?4tail?5calls?4?4?4?$CJ?$AA@
  0011c	56		 push	 esi
  0011d	e8 00 00 00 00	 call	 _lua_pushstring
  00122	83 c4 08	 add	 esp, 8
$LN1@luaL_trace:
; Line 149
  00125	56		 push	 esi
  00126	e8 00 00 00 00	 call	 _lua_gettop
  0012b	2b 45 90	 sub	 eax, DWORD PTR _top$1$[ebp]
  0012e	50		 push	 eax
  0012f	56		 push	 esi
  00130	e8 00 00 00 00	 call	 _lua_concat
  00135	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@luaL_trace:
; Line 135
  00138	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  0013b	50		 push	 eax
  0013c	57		 push	 edi
  0013d	ff 75 94	 push	 DWORD PTR _L1$GSCopy$1$[ebp]
  00140	e8 00 00 00 00	 call	 _lua_getstack
  00145	83 c4 0c	 add	 esp, 12			; 0000000cH
  00148	85 c0		 test	 eax, eax
  0014a	0f 85 52 ff ff
	ff		 jne	 $LL6@luaL_trace
$LN16@luaL_trace:
; Line 152
  00150	56		 push	 esi
  00151	e8 00 00 00 00	 call	 _lua_gettop
  00156	2b 45 90	 sub	 eax, DWORD PTR _top$1$[ebp]
  00159	50		 push	 eax
  0015a	56		 push	 esi
  0015b	e8 00 00 00 00	 call	 _lua_concat
; Line 153
  00160	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00163	83 c4 0c	 add	 esp, 12			; 0000000cH
  00166	33 cd		 xor	 ecx, ebp
  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	5b		 pop	 ebx
  0016b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
_luaL_traceback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_getsubtable
_TEXT	SEGMENT
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
_fname$ = 16						; size = 4
_luaL_getsubtable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 928
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 929
  00004	8b 75 0c	 mov	 esi, DWORD PTR _idx$[ebp]
  00007	57		 push	 edi
  00008	ff 75 10	 push	 DWORD PTR _fname$[ebp]
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	e8 00 00 00 00	 call	 _lua_getfield
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	83 f8 05	 cmp	 eax, 5
  0001b	75 09		 jne	 SHORT $LN2@luaL_getsu
; Line 930
  0001d	5f		 pop	 edi
  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	5e		 pop	 esi
; Line 939
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN2@luaL_getsu:
; Line 932
  00026	6a fe		 push	 -2			; fffffffeH
  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 _lua_settop
; Line 933
  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	e8 00 00 00 00	 call	 _lua_absindex
; Line 934
  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	57		 push	 edi
  0003a	8b f0		 mov	 esi, eax
  0003c	e8 00 00 00 00	 call	 _lua_createtable
; Line 935
  00041	6a ff		 push	 -1
  00043	57		 push	 edi
  00044	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 936
  00049	ff 75 10	 push	 DWORD PTR _fname$[ebp]
  0004c	56		 push	 esi
  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 _lua_setfield
  00053	83 c4 30	 add	 esp, 48			; 00000030H
; Line 937
  00056	33 c0		 xor	 eax, eax
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
; Line 939
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_luaL_getsubtable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_setfuncs
_TEXT	SEGMENT
tv195 = -4						; size = 4
_L$ = 8							; size = 4
_l$ = 12						; size = 4
_nup$ = 16						; size = 4
_luaL_setfuncs PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 911
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; Line 912
  00006	8b 75 10	 mov	 esi, DWORD PTR _nup$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000d	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00010	50		 push	 eax
  00011	57		 push	 edi
  00012	e8 00 00 00 00	 call	 _lua_checkstack
  00017	83 c4 08	 add	 esp, 8
  0001a	85 c0		 test	 eax, eax
  0001c	75 13		 jne	 SHORT $LN9@luaL_setfu
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CDGHCIOF@too?5many?5upvalues?$AA@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CBBDHBEP@stack?5overflow?5?$CI?$CFs?$CJ?$AA@
  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 _luaL_error
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@luaL_setfu:
; Line 913
  00031	8b 5d 0c	 mov	 ebx, DWORD PTR _l$[ebp]
  00034	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  00037	74 4d		 je	 SHORT $LN4@luaL_setfu
  00039	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0003e	2b c6		 sub	 eax, esi
  00040	89 45 fc	 mov	 DWORD PTR tv195[ebp], eax
$LL6@luaL_setfu:
; Line 915
  00043	85 f6		 test	 esi, esi
  00045	7e 1c		 jle	 SHORT $LN1@luaL_setfu
  00047	8b de		 mov	 ebx, esi
  00049	f7 db		 neg	 ebx
  0004b	eb 03 8d 49 00	 npad	 5
$LL3@luaL_setfu:
; Line 916
  00050	53		 push	 ebx
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 _lua_pushvalue
  00057	83 c4 08	 add	 esp, 8
  0005a	4e		 dec	 esi
  0005b	75 f3		 jne	 SHORT $LL3@luaL_setfu
  0005d	8b 75 10	 mov	 esi, DWORD PTR _nup$[ebp]
  00060	8b 5d 0c	 mov	 ebx, DWORD PTR _l$[ebp]
$LN1@luaL_setfu:
; Line 917
  00063	56		 push	 esi
  00064	ff 73 04	 push	 DWORD PTR [ebx+4]
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 _lua_pushcclosure
; Line 918
  0006d	ff 33		 push	 DWORD PTR [ebx]
  0006f	ff 75 fc	 push	 DWORD PTR tv195[ebp]
  00072	57		 push	 edi
  00073	e8 00 00 00 00	 call	 _lua_setfield
  00078	83 c3 08	 add	 ebx, 8
  0007b	83 c4 18	 add	 esp, 24			; 00000018H
  0007e	89 5d 0c	 mov	 DWORD PTR _l$[ebp], ebx
  00081	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  00084	75 bd		 jne	 SHORT $LL6@luaL_setfu
$LN4@luaL_setfu:
; Line 920
  00086	83 c8 ff	 or	 eax, -1
  00089	2b c6		 sub	 eax, esi
  0008b	50		 push	 eax
  0008c	57		 push	 edi
  0008d	e8 00 00 00 00	 call	 _lua_settop
  00092	83 c4 08	 add	 esp, 8
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
; Line 921
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_luaL_setfuncs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_gsub
_TEXT	SEGMENT
_r$GSCopy$1$ = -8228					; size = 4
_L$GSCopy$1$ = -8224					; size = 4
_p$GSCopy$1$ = -8220					; size = 4
_wild$1$ = -8216					; size = 4
_b$ = -8212						; size = 8208
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_s$ = 12						; size = 4
_p$ = 16						; size = 4
_r$ = 20						; size = 4
_luaL_gsub PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 969
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 20 00 00	 mov	 eax, 8228		; 00002024H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 55 10	 mov	 edx, DWORD PTR _p$[ebp]
  0001a	8b 45 14	 mov	 eax, DWORD PTR _r$[ebp]
  0001d	53		 push	 ebx
; Line 971
  0001e	8b da		 mov	 ebx, edx
  00020	89 95 e4 df ff
	ff		 mov	 DWORD PTR _p$GSCopy$1$[ebp], edx
  00026	56		 push	 esi
  00027	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0002a	57		 push	 edi
  0002b	8b 7d 0c	 mov	 edi, DWORD PTR _s$[ebp]
  0002e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00031	89 b5 e0 df ff
	ff		 mov	 DWORD PTR _L$GSCopy$1$[ebp], esi
  00037	89 85 dc df ff
	ff		 mov	 DWORD PTR _r$GSCopy$1$[ebp], eax
  0003d	8d 49 00	 npad	 3
$LL24@luaL_gsub:
  00040	8a 03		 mov	 al, BYTE PTR [ebx]
  00042	43		 inc	 ebx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL24@luaL_gsub
; Line 974
  00047	52		 push	 edx
  00048	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp+16]
  0004e	89 b5 f8 df ff
	ff		 mov	 DWORD PTR _b$[ebp+12], esi
  00054	57		 push	 edi
  00055	2b d9		 sub	 ebx, ecx
  00057	89 85 ec df ff
	ff		 mov	 DWORD PTR _b$[ebp], eax
  0005d	c7 85 f4 df ff
	ff 00 00 00 00	 mov	 DWORD PTR _b$[ebp+8], 0
  00067	c7 85 f0 df ff
	ff 00 20 00 00	 mov	 DWORD PTR _b$[ebp+4], 8192 ; 00002000H
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strstr
  00077	83 c4 08	 add	 esp, 8
  0007a	89 85 e8 df ff
	ff		 mov	 DWORD PTR _wild$1$[ebp], eax
  00080	85 c0		 test	 eax, eax
  00082	74 7a		 je	 SHORT $LN1@luaL_gsub
$LL2@luaL_gsub:
; Line 975
  00084	8b f0		 mov	 esi, eax
  00086	2b f7		 sub	 esi, edi
  00088	74 1e		 je	 SHORT $LN7@luaL_gsub
  0008a	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00090	56		 push	 esi
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  00097	56		 push	 esi
  00098	57		 push	 edi
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _memcpy
  0009f	83 c4 14	 add	 esp, 20			; 00000014H
  000a2	01 b5 f4 df ff
	ff		 add	 DWORD PTR _b$[ebp+8], esi
$LN7@luaL_gsub:
; Line 976
  000a8	8b bd dc df ff
	ff		 mov	 edi, DWORD PTR _r$GSCopy$1$[ebp]
  000ae	8b f7		 mov	 esi, edi
  000b0	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL25@luaL_gsub:
  000b3	8a 06		 mov	 al, BYTE PTR [esi]
  000b5	46		 inc	 esi
  000b6	84 c0		 test	 al, al
  000b8	75 f9		 jne	 SHORT $LL25@luaL_gsub
  000ba	2b f1		 sub	 esi, ecx
  000bc	74 1e		 je	 SHORT $LN12@luaL_gsub
  000be	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  000c4	56		 push	 esi
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  000cb	56		 push	 esi
  000cc	57		 push	 edi
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memcpy
  000d3	83 c4 14	 add	 esp, 20			; 00000014H
  000d6	01 b5 f4 df ff
	ff		 add	 DWORD PTR _b$[ebp+8], esi
$LN12@luaL_gsub:
; Line 977
  000dc	8b bd e8 df ff
	ff		 mov	 edi, DWORD PTR _wild$1$[ebp]
  000e2	ff b5 e4 df ff
	ff		 push	 DWORD PTR _p$GSCopy$1$[ebp]
  000e8	03 fb		 add	 edi, ebx
  000ea	57		 push	 edi
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strstr
  000f1	83 c4 08	 add	 esp, 8
  000f4	89 85 e8 df ff
	ff		 mov	 DWORD PTR _wild$1$[ebp], eax
  000fa	85 c0		 test	 eax, eax
  000fc	75 86		 jne	 SHORT $LL2@luaL_gsub
$LN1@luaL_gsub:
; Line 979
  000fe	8b f7		 mov	 esi, edi
  00100	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL26@luaL_gsub:
  00103	8a 06		 mov	 al, BYTE PTR [esi]
  00105	46		 inc	 esi
  00106	84 c0		 test	 al, al
  00108	75 f9		 jne	 SHORT $LL26@luaL_gsub
  0010a	2b f1		 sub	 esi, ecx
  0010c	74 1e		 je	 SHORT $LN17@luaL_gsub
  0010e	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00114	56		 push	 esi
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  0011b	56		 push	 esi
  0011c	57		 push	 edi
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _memcpy
  00123	83 c4 14	 add	 esp, 20			; 00000014H
  00126	01 b5 f4 df ff
	ff		 add	 DWORD PTR _b$[ebp+8], esi
$LN17@luaL_gsub:
; Line 980
  0012c	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 _luaL_pushresult
; Line 981
  00138	6a 00		 push	 0
  0013a	6a ff		 push	 -1
  0013c	ff b5 e0 df ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  00142	e8 00 00 00 00	 call	 _lua_tolstring
; Line 982
  00147	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014a	83 c4 10	 add	 esp, 16			; 00000010H
  0014d	33 cd		 xor	 ecx, ebp
  0014f	5f		 pop	 edi
  00150	5e		 pop	 esi
  00151	5b		 pop	 ebx
  00152	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c3		 ret	 0
_luaL_gsub ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_len
_TEXT	SEGMENT
_isnum$ = -4						; size = 4
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
_luaL_len PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 784
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; Line 787
  00006	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00009	57		 push	 edi
  0000a	ff 75 0c	 push	 DWORD PTR _idx$[ebp]
  0000d	56		 push	 esi
  0000e	e8 00 00 00 00	 call	 _lua_len
; Line 788
  00013	8d 45 fc	 lea	 eax, DWORD PTR _isnum$[ebp]
  00016	50		 push	 eax
  00017	6a ff		 push	 -1
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 _lua_tointegerx
  0001f	83 c4 14	 add	 esp, 20			; 00000014H
  00022	8b f8		 mov	 edi, eax
; Line 789
  00024	83 7d fc 00	 cmp	 DWORD PTR _isnum$[ebp], 0
  00028	8b da		 mov	 ebx, edx
  0002a	75 0e		 jne	 SHORT $LN1@luaL_len
; Line 790
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GGPBEEGI@object?5length?5is?5not?5an?5integer?$AA@
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 _luaL_error
  00037	83 c4 08	 add	 esp, 8
$LN1@luaL_len:
; Line 791
  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 _lua_settop
  00042	83 c4 08	 add	 esp, 8
; Line 792
  00045	8b c7		 mov	 eax, edi
  00047	8b d3		 mov	 edx, ebx
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
; Line 793
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_luaL_len ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_newstate
_TEXT	SEGMENT
_luaL_newstate PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 1003
  00000	56		 push	 esi
; Line 1004
  00001	6a 00		 push	 0
  00003	68 00 00 00 00	 push	 OFFSET _l_alloc
  00008	e8 00 00 00 00	 call	 _lua_newstate
  0000d	8b f0		 mov	 esi, eax
  0000f	83 c4 08	 add	 esp, 8
; Line 1005
  00012	85 f6		 test	 esi, esi
  00014	74 10		 je	 SHORT $LN1@luaL_newst
  00016	68 00 00 00 00	 push	 OFFSET _panic
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _lua_atpanic
  00021	83 c4 08	 add	 esp, 8
; Line 1006
  00024	8b c6		 mov	 eax, esi
$LN1@luaL_newst:
  00026	5e		 pop	 esi
; Line 1007
  00027	c3		 ret	 0
_luaL_newstate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_loadstring
_TEXT	SEGMENT
_ls$1 = -8						; size = 8
_L$ = 8							; size = 4
_s$ = 12						; size = 4
_luaL_loadstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 750
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 751
  00003	8b 55 0c	 mov	 edx, DWORD PTR _s$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	8b c2		 mov	 eax, edx
  0000b	56		 push	 esi
  0000c	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL5@luaL_loads:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL5@luaL_loads
  00017	2b c6		 sub	 eax, esi
  00019	89 55 f8	 mov	 DWORD PTR _ls$1[ebp], edx
  0001c	6a 00		 push	 0
  0001e	52		 push	 edx
  0001f	89 45 fc	 mov	 DWORD PTR _ls$1[ebp+4], eax
  00022	8d 45 f8	 lea	 eax, DWORD PTR _ls$1[ebp]
  00025	50		 push	 eax
  00026	68 00 00 00 00	 push	 OFFSET _getS
  0002b	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0002e	e8 00 00 00 00	 call	 _lua_load
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	5e		 pop	 esi
; Line 752
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
_luaL_loadstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_loadbufferx
_TEXT	SEGMENT
_ls$ = -8						; size = 8
_L$ = 8							; size = 4
_buff$ = 12						; size = 4
_size$ = 16						; size = 4
_name$ = 20						; size = 4
_mode$ = 24						; size = 4
_luaL_loadbufferx PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 742
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; Line 746
  00006	ff 75 18	 push	 DWORD PTR _mode$[ebp]
  00009	8b 45 0c	 mov	 eax, DWORD PTR _buff$[ebp]
  0000c	ff 75 14	 push	 DWORD PTR _name$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR _ls$[ebp], eax
  00012	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00015	89 45 fc	 mov	 DWORD PTR _ls$[ebp+4], eax
  00018	8d 45 f8	 lea	 eax, DWORD PTR _ls$[ebp]
  0001b	50		 push	 eax
  0001c	68 00 00 00 00	 push	 OFFSET _getS
  00021	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00024	e8 00 00 00 00	 call	 _lua_load
  00029	83 c4 14	 add	 esp, 20			; 00000014H
; Line 747
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_luaL_loadbufferx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_loadfilex
_TEXT	SEGMENT
_mode$GSCopy$1$ = -532					; size = 4
_readstatus$1$ = -532					; size = 4
_status$1$ = -528					; size = 4
_c$ = -528						; size = 4
_lf$ = -524						; size = 520
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_luaL_loadfilex PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 690
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 02 00
	00		 sub	 esp, 532		; 00000214H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 0c	 mov	 ebx, DWORD PTR _filename$[ebp]
  0001a	56		 push	 esi
  0001b	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0001e	57		 push	 edi
; Line 694
  0001f	56		 push	 esi
  00020	89 85 ec fd ff
	ff		 mov	 DWORD PTR _mode$GSCopy$1$[ebp], eax
  00026	e8 00 00 00 00	 call	 _lua_gettop
  0002b	83 c4 04	 add	 esp, 4
  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
; Line 695
  00031	85 db		 test	 ebx, ebx
  00033	0f 85 9e 00 00
	00		 jne	 $LN9@luaL_loadf
; Line 696
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_06CCPPALKB@?$DNstdin?$AA@
  0003e	56		 push	 esi
  0003f	e8 00 00 00 00	 call	 _lua_pushstring
  00044	83 c4 08	 add	 esp, 8
; Line 697
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  0004d	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _lf$[ebp+4], eax
$LN7@luaL_loadf:
; Line 704
  00053	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _c$[ebp]
  00059	50		 push	 eax
  0005a	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _lf$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _skipcomment
  00066	83 c4 08	 add	 esp, 8
  00069	85 c0		 test	 eax, eax
  0006b	74 14		 je	 SHORT $LN13@luaL_loadf
; Line 705
  0006d	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _lf$[ebp]
  00073	c6 84 05 fc fd
	ff ff 0a	 mov	 BYTE PTR _lf$[ebp+eax+8], 10 ; 0000000aH
  0007b	ff 85 f4 fd ff
	ff		 inc	 DWORD PTR _lf$[ebp]
$LN13@luaL_loadf:
; Line 706
  00081	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _c$[ebp]
  00087	83 f9 1b	 cmp	 ecx, 27			; 0000001bH
  0008a	0f 85 ac 00 00
	00		 jne	 $LN5@luaL_loadf
  00090	85 db		 test	 ebx, ebx
  00092	0f 84 a9 00 00
	00		 je	 $LN12@luaL_loadf
; Line 707
  00098	ff b5 f8 fd ff
	ff		 push	 DWORD PTR _lf$[ebp+4]
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  000a3	53		 push	 ebx
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__freopen
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ad	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _lf$[ebp+4], eax
; Line 708
  000b3	85 c0		 test	 eax, eax
  000b5	75 69		 jne	 SHORT $LN4@luaL_loadf
  000b7	57		 push	 edi
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_06IEGCHAII@reopen?$AA@
  000bd	56		 push	 esi
  000be	e8 00 00 00 00	 call	 _errfile
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
; Line 722
  000c9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cc	33 cd		 xor	 ecx, ebp
  000ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN9@luaL_loadf:
; Line 700
  000d7	53		 push	 ebx
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_03HPDLNGOA@?$EA?$CFs?$AA@
  000dd	56		 push	 esi
  000de	e8 00 00 00 00	 call	 _lua_pushfstring
; Line 701
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000e8	53		 push	 ebx
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  000ef	83 c4 14	 add	 esp, 20			; 00000014H
  000f2	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _lf$[ebp+4], eax
; Line 702
  000f8	85 c0		 test	 eax, eax
  000fa	0f 85 53 ff ff
	ff		 jne	 $LN7@luaL_loadf
  00100	57		 push	 edi
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00106	56		 push	 esi
  00107	e8 00 00 00 00	 call	 _errfile
  0010c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
; Line 722
  00112	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00115	33 cd		 xor	 ecx, ebp
  00117	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
$LN4@luaL_loadf:
; Line 709
  00120	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _c$[ebp]
  00126	50		 push	 eax
  00127	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _lf$[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _skipcomment
  00133	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _c$[ebp]
  00139	83 c4 08	 add	 esp, 8
$LN5@luaL_loadf:
; Line 711
  0013c	83 f9 ff	 cmp	 ecx, -1
  0013f	74 13		 je	 SHORT $LN3@luaL_loadf
$LN12@luaL_loadf:
; Line 712
  00141	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _lf$[ebp]
  00147	88 8c 05 fc fd
	ff ff		 mov	 BYTE PTR _lf$[ebp+eax+8], cl
  0014e	ff 85 f4 fd ff
	ff		 inc	 DWORD PTR _lf$[ebp]
$LN3@luaL_loadf:
; Line 713
  00154	ff b5 ec fd ff
	ff		 push	 DWORD PTR _mode$GSCopy$1$[ebp]
  0015a	6a 00		 push	 0
  0015c	6a ff		 push	 -1
  0015e	56		 push	 esi
  0015f	e8 00 00 00 00	 call	 _lua_tolstring
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH
  00167	50		 push	 eax
  00168	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _lf$[ebp]
  0016e	50		 push	 eax
  0016f	68 00 00 00 00	 push	 OFFSET _getF
  00174	56		 push	 esi
  00175	e8 00 00 00 00	 call	 _lua_load
; Line 714
  0017a	ff b5 f8 fd ff
	ff		 push	 DWORD PTR _lf$[ebp+4]
  00180	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _status$1$[ebp], eax
  00186	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ferror
  0018c	83 c4 18	 add	 esp, 24			; 00000018H
  0018f	89 85 ec fd ff
	ff		 mov	 DWORD PTR _readstatus$1$[ebp], eax
; Line 715
  00195	85 db		 test	 ebx, ebx
  00197	74 15		 je	 SHORT $LN2@luaL_loadf
  00199	ff b5 f8 fd ff
	ff		 push	 DWORD PTR _lf$[ebp+4]
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  001a5	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _readstatus$1$[ebp]
  001ab	83 c4 04	 add	 esp, 4
$LN2@luaL_loadf:
; Line 716
  001ae	85 c0		 test	 eax, eax
  001b0	74 27		 je	 SHORT $LN1@luaL_loadf
; Line 717
  001b2	57		 push	 edi
  001b3	56		 push	 esi
  001b4	e8 00 00 00 00	 call	 _lua_settop
; Line 718
  001b9	57		 push	 edi
  001ba	68 00 00 00 00	 push	 OFFSET ??_C@_04POLDLDMI@read?$AA@
  001bf	56		 push	 esi
  001c0	e8 00 00 00 00	 call	 _errfile
; Line 720
  001c5	83 c4 14	 add	 esp, 20			; 00000014H
  001c8	5f		 pop	 edi
  001c9	5e		 pop	 esi
  001ca	5b		 pop	 ebx
; Line 722
  001cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ce	33 cd		 xor	 ecx, ebp
  001d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d5	8b e5		 mov	 esp, ebp
  001d7	5d		 pop	 ebp
  001d8	c3		 ret	 0
$LN1@luaL_loadf:
; Line 720
  001d9	6a ff		 push	 -1
  001db	57		 push	 edi
  001dc	56		 push	 esi
  001dd	e8 00 00 00 00	 call	 _lua_rotate
  001e2	6a fe		 push	 -2			; fffffffeH
  001e4	56		 push	 esi
  001e5	e8 00 00 00 00	 call	 _lua_settop
; Line 722
  001ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ed	83 c4 14	 add	 esp, 20			; 00000014H
  001f0	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _status$1$[ebp]
  001f6	33 cd		 xor	 ecx, ebp
  001f8	5f		 pop	 edi
  001f9	5e		 pop	 esi
  001fa	5b		 pop	 ebx
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	8b e5		 mov	 esp, ebp
  00202	5d		 pop	 ebp
  00203	c3		 ret	 0
_luaL_loadfilex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_unref
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_ref$ = 16						; size = 4
_luaL_unref PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 602
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; Line 603
  00004	8b 7d 10	 mov	 edi, DWORD PTR _ref$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	78 48		 js	 SHORT $LN1@luaL_unref
; Line 604
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	ff 75 0c	 push	 DWORD PTR _t$[ebp]
  00010	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _lua_absindex
; Line 605
  00019	6a 00		 push	 0
  0001b	8b d8		 mov	 ebx, eax
  0001d	6a 00		 push	 0
  0001f	53		 push	 ebx
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 _lua_rawgeti
; Line 606
  00026	8b c7		 mov	 eax, edi
  00028	99		 cdq
  00029	8b f2		 mov	 esi, edx
  0002b	8b f8		 mov	 edi, eax
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	53		 push	 ebx
  00030	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00033	e8 00 00 00 00	 call	 _lua_rawseti
; Line 607
  00038	56		 push	 esi
  00039	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0003c	57		 push	 edi
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _lua_pushinteger
; Line 608
  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	53		 push	 ebx
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 _lua_rawseti
  0004e	83 c4 44	 add	 esp, 68			; 00000044H
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
$LN1@luaL_unref:
  00053	5f		 pop	 edi
; Line 610
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_luaL_unref ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_ref
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_luaL_ref PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 581
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 583
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a ff		 push	 -1
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _lua_type
  0000f	83 c4 08	 add	 esp, 8
  00012	85 c0		 test	 eax, eax
  00014	75 11		 jne	 SHORT $LN3@luaL_ref
; Line 584
  00016	6a fe		 push	 -2			; fffffffeH
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 _lua_settop
  0001e	83 c4 08	 add	 esp, 8
; Line 585
  00021	83 c8 ff	 or	 eax, -1
  00024	5e		 pop	 esi
; Line 599
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN3@luaL_ref:
  00027	53		 push	 ebx
  00028	57		 push	 edi
; Line 587
  00029	ff 75 0c	 push	 DWORD PTR _t$[ebp]
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _lua_absindex
; Line 588
  00032	6a 00		 push	 0
  00034	8b d8		 mov	 ebx, eax
  00036	6a 00		 push	 0
  00038	53		 push	 ebx
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 _lua_rawgeti
; Line 589
  0003f	6a 00		 push	 0
  00041	6a ff		 push	 -1
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _lua_tointegerx
; Line 590
  00049	6a fe		 push	 -2			; fffffffeH
  0004b	56		 push	 esi
  0004c	8b f8		 mov	 edi, eax
  0004e	e8 00 00 00 00	 call	 _lua_settop
  00053	83 c4 2c	 add	 esp, 44			; 0000002cH
; Line 591
  00056	85 ff		 test	 edi, edi
  00058	74 1c		 je	 SHORT $LN2@luaL_ref
; Line 592
  0005a	8b c7		 mov	 eax, edi
  0005c	99		 cdq
  0005d	52		 push	 edx
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 _lua_rawgeti
; Line 593
  00066	6a 00		 push	 0
  00068	6a 00		 push	 0
  0006a	53		 push	 ebx
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 _lua_rawseti
  00071	83 c4 20	 add	 esp, 32			; 00000020H
; Line 595
  00074	eb 0d		 jmp	 SHORT $LN1@luaL_ref
$LN2@luaL_ref:
; Line 596
  00076	53		 push	 ebx
  00077	56		 push	 esi
  00078	e8 00 00 00 00	 call	 _lua_rawlen
  0007d	83 c4 08	 add	 esp, 8
  00080	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LN1@luaL_ref:
; Line 597
  00083	8b c7		 mov	 eax, edi
  00085	99		 cdq
  00086	52		 push	 edx
  00087	50		 push	 eax
  00088	53		 push	 ebx
  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 _lua_rawseti
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
; Line 598
  00092	8b c7		 mov	 eax, edi
  00094	5f		 pop	 edi
  00095	5b		 pop	 ebx
  00096	5e		 pop	 esi
; Line 599
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
_luaL_ref ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_execresult
_TEXT	SEGMENT
_L$ = 8							; size = 4
_stat$ = 12						; size = 4
_luaL_execresult PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 265
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 267
  00005	8b 7d 0c	 mov	 edi, DWORD PTR _stat$[ebp]
  00008	83 ff ff	 cmp	 edi, -1
  0000b	75 36		 jne	 SHORT $LN13@luaL_execr
; Line 268
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  00013	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00016	57		 push	 edi
  00017	8b 30		 mov	 esi, DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 _lua_pushnil
  0001e	56		 push	 esi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strerror
  00025	50		 push	 eax
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _lua_pushstring
  0002c	8b c6		 mov	 eax, esi
  0002e	99		 cdq
  0002f	52		 push	 edx
  00030	50		 push	 eax
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 _lua_pushinteger
  00037	83 c4 1c	 add	 esp, 28			; 0000001cH
; Line 277
  0003a	b8 03 00 00 00	 mov	 eax, 3
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
; Line 279
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN13@luaL_execr:
; Line 272
  00043	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00046	85 ff		 test	 edi, edi
  00048	75 0d		 jne	 SHORT $LN2@luaL_execr
  0004a	6a 01		 push	 1
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 _lua_pushboolean
  00052	83 c4 08	 add	 esp, 8
; Line 273
  00055	eb 09		 jmp	 SHORT $LN1@luaL_execr
$LN2@luaL_execr:
; Line 274
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 _lua_pushnil
  0005d	83 c4 04	 add	 esp, 4
$LN1@luaL_execr:
; Line 275
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_04MKNBDEPB@exit?$AA@
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 _lua_pushstring
; Line 276
  0006b	8b c7		 mov	 eax, edi
  0006d	99		 cdq
  0006e	52		 push	 edx
  0006f	50		 push	 eax
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 _lua_pushinteger
  00076	83 c4 14	 add	 esp, 20			; 00000014H
; Line 277
  00079	b8 03 00 00 00	 mov	 eax, 3
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
; Line 279
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_luaL_execresult ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_fileresult
_TEXT	SEGMENT
_L$ = 8							; size = 4
_stat$ = 12						; size = 4
_fname$ = 16						; size = 4
_luaL_fileresult PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 225
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; Line 226
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
; Line 227
  0000a	83 7d 0c 00	 cmp	 DWORD PTR _stat$[ebp], 0
  0000e	8b 38		 mov	 edi, DWORD PTR [eax]
  00010	74 15		 je	 SHORT $LN4@luaL_filer
; Line 228
  00012	6a 01		 push	 1
  00014	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00017	e8 00 00 00 00	 call	 _lua_pushboolean
  0001c	83 c4 08	 add	 esp, 8
; Line 229
  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	5f		 pop	 edi
; Line 240
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN4@luaL_filer:
  00027	56		 push	 esi
; Line 232
  00028	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 _lua_pushnil
  00031	83 c4 04	 add	 esp, 4
; Line 234
  00034	57		 push	 edi
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strerror
  0003b	83 7d 10 00	 cmp	 DWORD PTR _fname$[ebp], 0
  0003f	50		 push	 eax
  00040	74 13		 je	 SHORT $LN2@luaL_filer
  00042	ff 75 10	 push	 DWORD PTR _fname$[ebp]
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _lua_pushfstring
  00050	83 c4 14	 add	 esp, 20			; 00000014H
; Line 235
  00053	eb 09		 jmp	 SHORT $LN1@luaL_filer
$LN2@luaL_filer:
; Line 236
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 _lua_pushstring
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@luaL_filer:
; Line 237
  0005e	8b c7		 mov	 eax, edi
  00060	99		 cdq
  00061	52		 push	 edx
  00062	50		 push	 eax
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 _lua_pushinteger
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 238
  0006c	b8 03 00 00 00	 mov	 eax, 3
  00071	5e		 pop	 esi
  00072	5f		 pop	 edi
; Line 240
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_luaL_fileresult ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_checkoption
_TEXT	SEGMENT
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_def$ = 16						; size = 4
_lst$ = 20						; size = 4
_luaL_checkoption PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 340
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 342
  00004	8b 5d 10	 mov	 ebx, DWORD PTR _def$[ebp]
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR _arg$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000f	85 db		 test	 ebx, ebx
  00011	74 0e		 je	 SHORT $LN7@luaL_check
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 _lua_type
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	7e 25		 jle	 SHORT $LN24@luaL_check
$LN7@luaL_check:
  00021	6a 00		 push	 0
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _lua_tolstring
  0002a	8b d8		 mov	 ebx, eax
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	85 db		 test	 ebx, ebx
  00031	75 13		 jne	 SHORT $LN24@luaL_check
  00033	6a 04		 push	 4
  00035	57		 push	 edi
  00036	e8 00 00 00 00	 call	 _lua_typename
  0003b	50		 push	 eax
  0003c	56		 push	 esi
  0003d	57		 push	 edi
  0003e	e8 00 00 00 00	 call	 _typeerror
  00043	83 c4 14	 add	 esp, 20			; 00000014H
$LN24@luaL_check:
; Line 344
  00046	8b 45 14	 mov	 eax, DWORD PTR _lst$[ebp]
  00049	33 f6		 xor	 esi, esi
  0004b	8b 00		 mov	 eax, DWORD PTR [eax]
  0004d	85 c0		 test	 eax, eax
  0004f	74 36		 je	 SHORT $LN2@luaL_check
$LL4@luaL_check:
; Line 345
  00051	8b cb		 mov	 ecx, ebx
$LL31@luaL_check:
  00053	8a 10		 mov	 dl, BYTE PTR [eax]
  00055	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00057	75 1a		 jne	 SHORT $LN32@luaL_check
  00059	84 d2		 test	 dl, dl
  0005b	74 12		 je	 SHORT $LN33@luaL_check
  0005d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00060	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00063	75 0e		 jne	 SHORT $LN32@luaL_check
  00065	83 c0 02	 add	 eax, 2
  00068	83 c1 02	 add	 ecx, 2
  0006b	84 d2		 test	 dl, dl
  0006d	75 e4		 jne	 SHORT $LL31@luaL_check
$LN33@luaL_check:
  0006f	33 c0		 xor	 eax, eax
  00071	eb 05		 jmp	 SHORT $LN34@luaL_check
$LN32@luaL_check:
  00073	1b c0		 sbb	 eax, eax
  00075	83 c8 01	 or	 eax, 1
$LN34@luaL_check:
  00078	85 c0		 test	 eax, eax
  0007a	74 29		 je	 SHORT $LN27@luaL_check
; Line 344
  0007c	8b 45 14	 mov	 eax, DWORD PTR _lst$[ebp]
  0007f	46		 inc	 esi
  00080	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00083	85 c0		 test	 eax, eax
  00085	75 ca		 jne	 SHORT $LL4@luaL_check
$LN2@luaL_check:
; Line 348
  00087	53		 push	 ebx
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HBADPNMP@invalid?5option?5?8?$CFs?8?$AA@
  0008d	57		 push	 edi
  0008e	e8 00 00 00 00	 call	 _lua_pushfstring
  00093	50		 push	 eax
  00094	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  00097	57		 push	 edi
  00098	e8 00 00 00 00	 call	 _luaL_argerror
  0009d	83 c4 18	 add	 esp, 24			; 00000018H
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
; Line 349
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN27@luaL_check:
  000a5	5f		 pop	 edi
; Line 346
  000a6	8b c6		 mov	 eax, esi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
; Line 349
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
_luaL_checkoption ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_error
_TEXT	SEGMENT
_L$ = 8							; size = 4
_fmt$ = 12						; size = 4
_luaL_error PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 214
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 217
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 01		 push	 1
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _luaL_where
; Line 218
  0000f	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  00012	50		 push	 eax
  00013	ff 75 0c	 push	 DWORD PTR _fmt$[ebp]
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _lua_pushvfstring
; Line 220
  0001c	6a 02		 push	 2
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _lua_concat
; Line 221
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 _lua_error
  0002a	83 c4 20	 add	 esp, 32			; 00000020H
  0002d	5e		 pop	 esi
; Line 222
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_luaL_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_where
_TEXT	SEGMENT
_ar$ = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_level$ = 12						; size = 4
_luaL_where PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 201
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
; Line 203
  00014	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  00017	50		 push	 eax
  00018	ff 75 0c	 push	 DWORD PTR _level$[ebp]
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _lua_getstack
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	85 c0		 test	 eax, eax
  00026	74 3b		 je	 SHORT $LN1@luaL_where
; Line 204
  00028	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_02KHAMJCKP@Sl?$AA@
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 _lua_getinfo
; Line 205
  00037	8b 45 ac	 mov	 eax, DWORD PTR _ar$[ebp+20]
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	85 c0		 test	 eax, eax
  0003f	7e 22		 jle	 SHORT $LN1@luaL_where
; Line 206
  00041	50		 push	 eax
  00042	8d 45 bc	 lea	 eax, DWORD PTR _ar$[ebp+36]
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_07FCDHCGBN@?$CFs?3?$CFd?3?5?$AA@
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 _lua_pushfstring
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	5e		 pop	 esi
; Line 211
  00055	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00058	33 cd		 xor	 ecx, ebp
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
$LN1@luaL_where:
; Line 210
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 _lua_pushstring
; Line 211
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00071	83 c4 08	 add	 esp, 8
  00074	33 cd		 xor	 ecx, ebp
  00076	5e		 pop	 esi
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
_luaL_where ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_checkudata
_TEXT	SEGMENT
_p$1$ = -4						; size = 4
_L$ = 8							; size = 4
_ud$ = 12						; size = 4
_tname$ = 16						; size = 4
_luaL_checkudata PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 324
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; Line 325
  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _ud$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000d	53		 push	 ebx
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _lua_touserdata
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 fc	 mov	 DWORD PTR _p$1$[ebp], eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 45		 je	 SHORT $LN5@luaL_check
  0001e	53		 push	 ebx
  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 _lua_getmetatable
  00025	83 c4 08	 add	 esp, 8
  00028	85 c0		 test	 eax, eax
  0002a	74 37		 je	 SHORT $LN5@luaL_check
  0002c	ff 75 10	 push	 DWORD PTR _tname$[ebp]
  0002f	68 d8 b9 f0 ff	 push	 -1001000		; fff0b9d8H
  00034	57		 push	 edi
  00035	e8 00 00 00 00	 call	 _lua_getfield
  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	6a ff		 push	 -1
  0003e	57		 push	 edi
  0003f	e8 00 00 00 00	 call	 _lua_rawequal
  00044	8b f0		 mov	 esi, eax
  00046	f7 de		 neg	 esi
  00048	6a fd		 push	 -3			; fffffffdH
  0004a	57		 push	 edi
  0004b	1b f6		 sbb	 esi, esi
  0004d	e8 00 00 00 00	 call	 _lua_settop
  00052	83 c4 20	 add	 esp, 32			; 00000020H
  00055	23 75 fc	 and	 esi, DWORD PTR _p$1$[ebp]
; Line 326
  00058	74 0b		 je	 SHORT $LN9@luaL_check
; Line 327
  0005a	5f		 pop	 edi
  0005b	8b c6		 mov	 eax, esi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
; Line 328
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
; Line 325
$LN5@luaL_check:
  00063	33 f6		 xor	 esi, esi
$LN9@luaL_check:
; Line 326
  00065	ff 75 10	 push	 DWORD PTR _tname$[ebp]
  00068	53		 push	 ebx
  00069	57		 push	 edi
  0006a	e8 00 00 00 00	 call	 _typeerror
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 327
  00072	8b c6		 mov	 eax, esi
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
; Line 328
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_luaL_checkudata ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_testudata
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ud$ = 12						; size = 4
_tname$ = 16						; size = 4
_luaL_testudata PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 309
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 310
  00005	8b 75 0c	 mov	 esi, DWORD PTR _ud$[ebp]
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	e8 00 00 00 00	 call	 _lua_touserdata
  00013	8b d8		 mov	 ebx, eax
  00015	83 c4 08	 add	 esp, 8
; Line 311
  00018	85 db		 test	 ebx, ebx
  0001a	74 3e		 je	 SHORT $LN2@luaL_testu
; Line 312
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 _lua_getmetatable
  00023	83 c4 08	 add	 esp, 8
  00026	85 c0		 test	 eax, eax
  00028	74 30		 je	 SHORT $LN2@luaL_testu
; Line 313
  0002a	ff 75 10	 push	 DWORD PTR _tname$[ebp]
  0002d	68 d8 b9 f0 ff	 push	 -1001000		; fff0b9d8H
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 _lua_getfield
; Line 314
  00038	6a fe		 push	 -2			; fffffffeH
  0003a	6a ff		 push	 -1
  0003c	57		 push	 edi
  0003d	e8 00 00 00 00	 call	 _lua_rawequal
  00042	f7 d8		 neg	 eax
; Line 316
  00044	6a fd		 push	 -3			; fffffffdH
  00046	1b f6		 sbb	 esi, esi
  00048	57		 push	 edi
  00049	23 f3		 and	 esi, ebx
  0004b	e8 00 00 00 00	 call	 _lua_settop
  00050	83 c4 20	 add	 esp, 32			; 00000020H
; Line 317
  00053	8b c6		 mov	 eax, esi
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
; Line 321
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN2@luaL_testu:
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
; Line 320
  0005c	33 c0		 xor	 eax, eax
  0005e	5b		 pop	 ebx
; Line 321
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_luaL_testudata ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_setmetatable
_TEXT	SEGMENT
_L$ = 8							; size = 4
_tname$ = 12						; size = 4
_luaL_setmetatable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 303
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 304
  00003	ff 75 0c	 push	 DWORD PTR _tname$[ebp]
  00006	68 d8 b9 f0 ff	 push	 -1001000		; fff0b9d8H
  0000b	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000e	e8 00 00 00 00	 call	 _lua_getfield
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 305
  00016	c7 45 0c fe ff
	ff ff		 mov	 DWORD PTR _tname$[ebp], -2 ; fffffffeH
; Line 306
  0001d	5d		 pop	 ebp
; Line 305
  0001e	e9 00 00 00 00	 jmp	 _lua_setmetatable
_luaL_setmetatable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_newmetatable
_TEXT	SEGMENT
_L$ = 8							; size = 4
_tname$ = 12						; size = 4
_luaL_newmetatable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 290
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 291
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _tname$[ebp]
  0000b	57		 push	 edi
  0000c	68 d8 b9 f0 ff	 push	 -1001000		; fff0b9d8H
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _lua_getfield
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	85 c0		 test	 eax, eax
  0001c	74 06		 je	 SHORT $LN1@luaL_newme
; Line 292
  0001e	5f		 pop	 edi
  0001f	33 c0		 xor	 eax, eax
  00021	5e		 pop	 esi
; Line 300
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN1@luaL_newme:
; Line 293
  00024	6a fe		 push	 -2			; fffffffeH
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _lua_settop
; Line 294
  0002c	6a 02		 push	 2
  0002e	6a 00		 push	 0
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _lua_createtable
; Line 295
  00036	57		 push	 edi
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _lua_pushstring
; Line 296
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_06LHMLJNCG@__name?$AA@
  00042	6a fe		 push	 -2			; fffffffeH
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 _lua_setfield
; Line 297
  0004a	6a ff		 push	 -1
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 298
  00052	57		 push	 edi
  00053	68 d8 b9 f0 ff	 push	 -1001000		; fff0b9d8H
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 _lua_setfield
  0005e	83 c4 3c	 add	 esp, 60			; 0000003cH
; Line 299
  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
; Line 300
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_luaL_newmetatable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_checkany
_TEXT	SEGMENT
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_luaL_checkany PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 370
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 371
  00003	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  00006	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00009	e8 00 00 00 00	 call	 _lua_type
  0000e	83 c4 08	 add	 esp, 8
  00011	83 f8 ff	 cmp	 eax, -1
  00014	75 13		 jne	 SHORT $LN1@luaL_check
; Line 372
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PDHEKNMA@value?5expected?$AA@
  0001b	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00021	e8 00 00 00 00	 call	 _luaL_argerror
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@luaL_check:
; Line 373
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_luaL_checkany ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_checktype
_TEXT	SEGMENT
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_t$ = 16						; size = 4
_luaL_checktype PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 364
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 365
  00004	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  00007	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _lua_type
  00010	8b 4d 10	 mov	 ecx, DWORD PTR _t$[ebp]
  00013	83 c4 08	 add	 esp, 8
  00016	3b c1		 cmp	 eax, ecx
  00018	74 14		 je	 SHORT $LN4@luaL_check
; Line 366
  0001a	51		 push	 ecx
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _lua_typename
  00021	50		 push	 eax
  00022	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 _typeerror
  0002b	83 c4 14	 add	 esp, 20			; 00000014H
$LN4@luaL_check:
  0002e	5e		 pop	 esi
; Line 367
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_luaL_checktype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_checkstack
_TEXT	SEGMENT
_L$ = 8							; size = 4
_space$ = 12						; size = 4
_msg$ = 16						; size = 4
_luaL_checkstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 352
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 355
  00003	8b 45 0c	 mov	 eax, DWORD PTR _space$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000a	83 c0 14	 add	 eax, 20			; 00000014H
  0000d	50		 push	 eax
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _lua_checkstack
  00014	83 c4 08	 add	 esp, 8
  00017	85 c0		 test	 eax, eax
  00019	75 27		 jne	 SHORT $LN1@luaL_check
; Line 356
  0001b	8b 45 10	 mov	 eax, DWORD PTR _msg$[ebp]
  0001e	85 c0		 test	 eax, eax
  00020	74 12		 je	 SHORT $LN2@luaL_check
; Line 357
  00022	50		 push	 eax
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CBBDHBEP@stack?5overflow?5?$CI?$CFs?$CJ?$AA@
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 _luaL_error
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	5e		 pop	 esi
; Line 361
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN2@luaL_check:
; Line 359
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 _luaL_error
  0003f	83 c4 08	 add	 esp, 8
$LN1@luaL_check:
  00042	5e		 pop	 esi
; Line 361
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_luaL_checkstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_optinteger
_TEXT	SEGMENT
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_def$ = 16						; size = 8
_luaL_optinteger PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 427
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 428
  00003	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  00006	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00009	e8 00 00 00 00	 call	 _lua_type
  0000e	83 c4 08	 add	 esp, 8
  00011	85 c0		 test	 eax, eax
  00013	7f 08		 jg	 SHORT $LN3@luaL_optin
  00015	8b 45 10	 mov	 eax, DWORD PTR _def$[ebp]
  00018	8b 55 14	 mov	 edx, DWORD PTR _def$[ebp+4]
; Line 429
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
$LN3@luaL_optin:
; Line 428
  0001d	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  00020	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00023	e8 00 00 00 00	 call	 _luaL_checkinteger
  00028	83 c4 08	 add	 esp, 8
; Line 429
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_luaL_optinteger ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_checkinteger
_TEXT	SEGMENT
_isnum$ = -8						; size = 4
_d$2$ = -4						; size = 4
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_luaL_checkinteger PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 416
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 418
  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _isnum$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR _arg$[ebp]
  00012	50		 push	 eax
  00013	57		 push	 edi
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _lua_tointegerx
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	8b ca		 mov	 ecx, edx
; Line 419
  0001f	83 7d f8 00	 cmp	 DWORD PTR _isnum$[ebp], 0
  00023	8b d8		 mov	 ebx, eax
  00025	89 4d fc	 mov	 DWORD PTR _d$2$[ebp], ecx
  00028	75 41		 jne	 SHORT $LN8@luaL_check
; Line 420
  0002a	57		 push	 edi
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 _lua_isnumber
  00031	83 c4 08	 add	 esp, 8
  00034	85 c0		 test	 eax, eax
  00036	74 1b		 je	 SHORT $LN5@luaL_check
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@GPCMCKGL@number?5has?5no?5integer?5representa@
  0003d	57		 push	 edi
  0003e	56		 push	 esi
  0003f	e8 00 00 00 00	 call	 _luaL_argerror
; Line 422
  00044	8b 55 fc	 mov	 edx, DWORD PTR _d$2$[ebp]
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	8b c3		 mov	 eax, ebx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
; Line 423
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
; Line 420
$LN5@luaL_check:
  00053	6a 03		 push	 3
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 _lua_typename
  0005b	50		 push	 eax
  0005c	57		 push	 edi
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 _typeerror
; Line 422
  00063	8b 55 fc	 mov	 edx, DWORD PTR _d$2$[ebp]
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	8b c3		 mov	 eax, ebx
$LN8@luaL_check:
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
; Line 423
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_luaL_checkinteger ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_optnumber
_TEXT	SEGMENT
_d$1 = -16						; size = 8
tv71 = -8						; size = 8
_isnum$2 = -4						; size = 4
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_def$ = 16						; size = 8
_luaL_optnumber PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 403
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
; Line 404
  00007	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _arg$[ebp]
  0000e	57		 push	 edi
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _lua_type
  00015	83 c4 08	 add	 esp, 8
  00018	85 c0		 test	 eax, eax
  0001a	7f 13		 jg	 SHORT $LN3@luaL_optnu
  0001c	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _def$[ebp]
  00021	5f		 pop	 edi
  00022	f2 0f 11 45 f8	 movsd	 QWORD PTR tv71[ebp], xmm0
  00027	dd 45 f8	 fld	 QWORD PTR tv71[ebp]
  0002a	5e		 pop	 esi
; Line 405
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN3@luaL_optnu:
; Line 404
  0002f	8d 45 fc	 lea	 eax, DWORD PTR _isnum$2[ebp]
  00032	50		 push	 eax
  00033	57		 push	 edi
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _lua_tonumberx
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	83 7d fc 00	 cmp	 DWORD PTR _isnum$2[ebp], 0
  00041	dd 5d f0	 fstp	 QWORD PTR _d$1[ebp]
  00044	75 13		 jne	 SHORT $LN8@luaL_optnu
  00046	6a 03		 push	 3
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 _lua_typename
  0004e	50		 push	 eax
  0004f	57		 push	 edi
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 _typeerror
  00056	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@luaL_optnu:
  00059	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _d$1[ebp]
  0005e	5f		 pop	 edi
  0005f	f2 0f 11 45 f8	 movsd	 QWORD PTR tv71[ebp], xmm0
  00064	dd 45 f8	 fld	 QWORD PTR tv71[ebp]
  00067	5e		 pop	 esi
; Line 405
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_luaL_optnumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_checknumber
_TEXT	SEGMENT
_d$1$ = -12						; size = 8
_isnum$ = -4						; size = 4
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_luaL_checknumber PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 394
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; Line 396
  00007	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000a	8d 45 fc	 lea	 eax, DWORD PTR _isnum$[ebp]
  0000d	50		 push	 eax
  0000e	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _lua_tonumberx
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 397
  0001a	83 7d fc 00	 cmp	 DWORD PTR _isnum$[ebp], 0
  0001e	dd 55 f4	 fst	 QWORD PTR _d$1$[ebp]
  00021	75 1a		 jne	 SHORT $LN4@luaL_check
; Line 398
  00023	6a 03		 push	 3
  00025	56		 push	 esi
  00026	dd d8		 fstp	 ST(0)
  00028	e8 00 00 00 00	 call	 _lua_typename
  0002d	50		 push	 eax
  0002e	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 _typeerror
; Line 399
  00037	dd 45 f4	 fld	 QWORD PTR _d$1$[ebp]
  0003a	83 c4 14	 add	 esp, 20			; 00000014H
$LN4@luaL_check:
  0003d	5e		 pop	 esi
; Line 400
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_luaL_checknumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_optlstring
_TEXT	SEGMENT
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_def$ = 16						; size = 4
_len$ = 20						; size = 4
_luaL_optlstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 384
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 385
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _arg$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _lua_type
  00012	83 c4 08	 add	 esp, 8
  00015	85 c0		 test	 eax, eax
  00017	7f 32		 jg	 SHORT $LN3@luaL_optls
; Line 386
  00019	8b 75 14	 mov	 esi, DWORD PTR _len$[ebp]
  0001c	8b 55 10	 mov	 edx, DWORD PTR _def$[ebp]
  0001f	85 f6		 test	 esi, esi
  00021	74 22		 je	 SHORT $LN2@luaL_optls
; Line 387
  00023	85 d2		 test	 edx, edx
  00025	74 1a		 je	 SHORT $LN6@luaL_optls
  00027	8b ca		 mov	 ecx, edx
  00029	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0002c	8d 64 24 00	 npad	 4
$LL13@luaL_optls:
  00030	8a 01		 mov	 al, BYTE PTR [ecx]
  00032	41		 inc	 ecx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL13@luaL_optls
  00037	2b cf		 sub	 ecx, edi
; Line 388
  00039	8b c2		 mov	 eax, edx
  0003b	5f		 pop	 edi
  0003c	89 0e		 mov	 DWORD PTR [esi], ecx
  0003e	5e		 pop	 esi
; Line 391
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN6@luaL_optls:
; Line 387
  00041	33 c9		 xor	 ecx, ecx
  00043	89 0e		 mov	 DWORD PTR [esi], ecx
$LN2@luaL_optls:
; Line 388
  00045	5f		 pop	 edi
  00046	8b c2		 mov	 eax, edx
  00048	5e		 pop	 esi
; Line 391
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN3@luaL_optls:
  0004b	53		 push	 ebx
; Line 390
  0004c	ff 75 14	 push	 DWORD PTR _len$[ebp]
  0004f	57		 push	 edi
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 _lua_tolstring
  00056	8b d8		 mov	 ebx, eax
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	85 db		 test	 ebx, ebx
  0005d	75 13		 jne	 SHORT $LN11@luaL_optls
  0005f	6a 04		 push	 4
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _lua_typename
  00067	50		 push	 eax
  00068	57		 push	 edi
  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 _typeerror
  0006f	83 c4 14	 add	 esp, 20			; 00000014H
$LN11@luaL_optls:
  00072	8b c3		 mov	 eax, ebx
  00074	5b		 pop	 ebx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
; Line 391
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_luaL_optlstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_checklstring
_TEXT	SEGMENT
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_len$ = 16						; size = 4
_luaL_checklstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 376
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 377
  00005	ff 75 10	 push	 DWORD PTR _len$[ebp]
  00008	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _lua_tolstring
  00014	8b f0		 mov	 esi, eax
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 378
  00019	85 f6		 test	 esi, esi
  0001b	75 17		 jne	 SHORT $LN4@luaL_check
  0001d	6a 04		 push	 4
  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 _lua_typename
  00025	50		 push	 eax
  00026	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  00029	57		 push	 edi
  0002a	e8 00 00 00 00	 call	 _typeerror
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
; Line 379
  00032	8b c6		 mov	 eax, esi
$LN4@luaL_check:
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
; Line 380
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_luaL_checklstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_argerror
_TEXT	SEGMENT
_ar$ = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_extramsg$ = 16						; size = 4
_luaL_argerror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 164
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 10	 mov	 ebx, DWORD PTR _extramsg$[ebp]
; Line 166
  00014	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0001b	50		 push	 eax
  0001c	6a 00		 push	 0
  0001e	57		 push	 edi
  0001f	e8 00 00 00 00	 call	 _lua_getstack
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	85 c0		 test	 eax, eax
  00029	75 22		 jne	 SHORT $LN4@luaL_arger
; Line 167
  0002b	53		 push	 ebx
  0002c	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CHJGEHJL@bad?5argument?5?$CD?$CFd?5?$CI?$CFs?$CJ?$AA@
  00034	57		 push	 edi
  00035	e8 00 00 00 00	 call	 _luaL_error
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
  0003d	5f		 pop	 edi
  0003e	5b		 pop	 ebx
; Line 179
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00042	33 cd		 xor	 ecx, ebp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN4@luaL_arger:
; Line 168
  0004d	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  00050	50		 push	 eax
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_01EFFIKLCJ@n?$AA@
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 _lua_getinfo
; Line 169
  0005c	8b 45 a0	 mov	 eax, DWORD PTR _ar$[ebp+8]
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_06GABBCIBA@method?$AA@
$LL9@luaL_arger:
  00067	8a 10		 mov	 dl, BYTE PTR [eax]
  00069	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0006b	75 1a		 jne	 SHORT $LN10@luaL_arger
  0006d	84 d2		 test	 dl, dl
  0006f	74 12		 je	 SHORT $LN11@luaL_arger
  00071	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00074	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00077	75 0e		 jne	 SHORT $LN10@luaL_arger
  00079	83 c0 02	 add	 eax, 2
  0007c	83 c1 02	 add	 ecx, 2
  0007f	84 d2		 test	 dl, dl
  00081	75 e4		 jne	 SHORT $LL9@luaL_arger
$LN11@luaL_arger:
  00083	33 c0		 xor	 eax, eax
  00085	eb 05		 jmp	 SHORT $LN12@luaL_arger
$LN10@luaL_arger:
  00087	1b c0		 sbb	 eax, eax
  00089	83 c8 01	 or	 eax, 1
$LN12@luaL_arger:
; Line 170
  0008c	56		 push	 esi
  0008d	8b 75 0c	 mov	 esi, DWORD PTR _arg$[ebp]
  00090	85 c0		 test	 eax, eax
  00092	75 26		 jne	 SHORT $LN2@luaL_arger
  00094	4e		 dec	 esi
; Line 171
  00095	75 23		 jne	 SHORT $LN2@luaL_arger
; Line 173
  00097	53		 push	 ebx
  00098	ff 75 9c	 push	 DWORD PTR _ar$[ebp+4]
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LENGMNDF@calling?5?8?$CFs?8?5on?5bad?5self?5?$CI?$CFs?$CJ?$AA@
  000a0	57		 push	 edi
  000a1	e8 00 00 00 00	 call	 _luaL_error
  000a6	83 c4 10	 add	 esp, 16			; 00000010H
  000a9	5e		 pop	 esi
  000aa	5f		 pop	 edi
  000ab	5b		 pop	 ebx
; Line 179
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000af	33 cd		 xor	 ecx, ebp
  000b1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
$LN2@luaL_arger:
; Line 175
  000ba	8b 45 9c	 mov	 eax, DWORD PTR _ar$[ebp+4]
  000bd	85 c0		 test	 eax, eax
  000bf	75 28		 jne	 SHORT $LN8@luaL_arger
; Line 176
  000c1	8d 45 98	 lea	 eax, DWORD PTR _ar$[ebp]
  000c4	50		 push	 eax
  000c5	57		 push	 edi
  000c6	e8 00 00 00 00	 call	 _pushglobalfuncname
  000cb	83 c4 08	 add	 esp, 8
  000ce	85 c0		 test	 eax, eax
  000d0	74 0f		 je	 SHORT $LN7@luaL_arger
  000d2	6a 00		 push	 0
  000d4	6a ff		 push	 -1
  000d6	57		 push	 edi
  000d7	e8 00 00 00 00	 call	 _lua_tolstring
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000df	eb 05		 jmp	 SHORT $LN15@luaL_arger
$LN7@luaL_arger:
  000e1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_01OGPIMHDM@?$DP?$AA@
$LN15@luaL_arger:
  000e6	89 45 9c	 mov	 DWORD PTR _ar$[ebp+4], eax
$LN8@luaL_arger:
; Line 178
  000e9	53		 push	 ebx
  000ea	50		 push	 eax
  000eb	56		 push	 esi
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GOMKJOAH@bad?5argument?5?$CD?$CFd?5to?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@
  000f1	57		 push	 edi
  000f2	e8 00 00 00 00	 call	 _luaL_error
; Line 179
  000f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fa	83 c4 14	 add	 esp, 20			; 00000014H
  000fd	33 cd		 xor	 ecx, ebp
  000ff	5e		 pop	 esi
  00100	5f		 pop	 edi
  00101	5b		 pop	 ebx
  00102	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
_luaL_argerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_tolstring
_TEXT	SEGMENT
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
_len$ = 16						; size = 4
_luaL_tolstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 796
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 797
  00005	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _idx$[ebp]
  0000c	57		 push	 edi
  0000d	56		 push	 esi
  0000e	e8 00 00 00 00	 call	 _lua_absindex
  00013	8b d8		 mov	 ebx, eax
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _lua_getmetatable
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	85 c0		 test	 eax, eax
  00021	74 25		 je	 SHORT $LN23@luaL_tolst
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HDFPAPPH@__tostring?$AA@
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 _lua_pushstring
  0002e	6a fe		 push	 -2			; fffffffeH
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _lua_rawget
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	85 c0		 test	 eax, eax
  0003b	75 25		 jne	 SHORT $LN17@luaL_tolst
  0003d	6a fd		 push	 -3			; fffffffdH
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _lua_settop
  00045	83 c4 08	 add	 esp, 8
$LN23@luaL_tolst:
; Line 798
  00048	57		 push	 edi
  00049	56		 push	 esi
  0004a	e8 00 00 00 00	 call	 _lua_type
  0004f	83 c4 08	 add	 esp, 8
  00052	83 f8 04	 cmp	 eax, 4
  00055	0f 87 ed 00 00
	00		 ja	 $LN1@luaL_tolst
  0005b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN27@luaL_tolst[eax*4]
; Line 797
$LN17@luaL_tolst:
  00062	6a ff		 push	 -1
  00064	6a fe		 push	 -2			; fffffffeH
  00066	56		 push	 esi
  00067	e8 00 00 00 00	 call	 _lua_rotate
  0006c	6a fe		 push	 -2			; fffffffeH
  0006e	56		 push	 esi
  0006f	e8 00 00 00 00	 call	 _lua_settop
  00074	53		 push	 ebx
  00075	56		 push	 esi
  00076	e8 00 00 00 00	 call	 _lua_pushvalue
  0007b	6a 00		 push	 0
  0007d	6a 00		 push	 0
  0007f	6a 01		 push	 1
  00081	6a 01		 push	 1
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 _lua_callk
  00089	83 c4 30	 add	 esp, 48			; 00000030H
; Line 821
  0008c	ff 75 10	 push	 DWORD PTR _len$[ebp]
  0008f	6a ff		 push	 -1
  00091	56		 push	 esi
  00092	e8 00 00 00 00	 call	 _lua_tolstring
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
; Line 822
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
$LN7@luaL_tolst:
; Line 800
  0009f	57		 push	 edi
  000a0	56		 push	 esi
  000a1	e8 00 00 00 00	 call	 _lua_isinteger
  000a6	83 c4 08	 add	 esp, 8
; Line 801
  000a9	6a 00		 push	 0
  000ab	57		 push	 edi
  000ac	56		 push	 esi
  000ad	85 c0		 test	 eax, eax
  000af	74 28		 je	 SHORT $LN6@luaL_tolst
  000b1	e8 00 00 00 00	 call	 _lua_tointegerx
  000b6	52		 push	 edx
  000b7	50		 push	 eax
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_02BPIDFGKK@?$CFI?$AA@
  000bd	56		 push	 esi
  000be	e8 00 00 00 00	 call	 _lua_pushfstring
  000c3	83 c4 1c	 add	 esp, 28			; 0000001cH
; Line 821
  000c6	ff 75 10	 push	 DWORD PTR _len$[ebp]
  000c9	6a ff		 push	 -1
  000cb	56		 push	 esi
  000cc	e8 00 00 00 00	 call	 _lua_tolstring
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
; Line 822
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
$LN6@luaL_tolst:
; Line 803
  000d9	e8 00 00 00 00	 call	 _lua_tonumberx
  000de	83 c4 04	 add	 esp, 4
  000e1	dd 1c 24	 fstp	 QWORD PTR [esp]
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
; Line 804
  000e9	eb 7f		 jmp	 SHORT $LN24@luaL_tolst
$LN4@luaL_tolst:
; Line 807
  000eb	57		 push	 edi
  000ec	56		 push	 esi
  000ed	e8 00 00 00 00	 call	 _lua_pushvalue
  000f2	83 c4 08	 add	 esp, 8
; Line 821
  000f5	ff 75 10	 push	 DWORD PTR _len$[ebp]
  000f8	6a ff		 push	 -1
  000fa	56		 push	 esi
  000fb	e8 00 00 00 00	 call	 _lua_tolstring
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
; Line 822
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
$LN3@luaL_tolst:
; Line 810
  00108	57		 push	 edi
  00109	56		 push	 esi
  0010a	e8 00 00 00 00	 call	 _lua_toboolean
  0010f	85 c0		 test	 eax, eax
  00111	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05LAPONLG@false?$AA@
  00116	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04LOAJBDKD@true?$AA@
  0011b	0f 44 ca	 cmove	 ecx, edx
  0011e	51		 push	 ecx
  0011f	56		 push	 esi
  00120	e8 00 00 00 00	 call	 _lua_pushstring
; Line 811
  00125	eb 49		 jmp	 SHORT $LN25@luaL_tolst
$LN2@luaL_tolst:
; Line 813
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_03ILAMHENH@nil?$AA@
  0012c	56		 push	 esi
  0012d	e8 00 00 00 00	 call	 _lua_pushstring
  00132	83 c4 08	 add	 esp, 8
; Line 821
  00135	ff 75 10	 push	 DWORD PTR _len$[ebp]
  00138	6a ff		 push	 -1
  0013a	56		 push	 esi
  0013b	e8 00 00 00 00	 call	 _lua_tolstring
  00140	83 c4 0c	 add	 esp, 12			; 0000000cH
  00143	5f		 pop	 edi
  00144	5e		 pop	 esi
  00145	5b		 pop	 ebx
; Line 822
  00146	5d		 pop	 ebp
  00147	c3		 ret	 0
$LN1@luaL_tolst:
; Line 817
  00148	57		 push	 edi
  00149	56		 push	 esi
  0014a	e8 00 00 00 00	 call	 _lua_topointer
  0014f	83 c4 08	 add	 esp, 8
  00152	50		 push	 eax
  00153	57		 push	 edi
  00154	56		 push	 esi
  00155	e8 00 00 00 00	 call	 _lua_type
  0015a	50		 push	 eax
  0015b	56		 push	 esi
  0015c	e8 00 00 00 00	 call	 _lua_typename
  00161	83 c4 10	 add	 esp, 16			; 00000010H
  00164	50		 push	 eax
  00165	68 00 00 00 00	 push	 OFFSET ??_C@_06CILKLLDB@?$CFs?3?5?$CFp?$AA@
$LN24@luaL_tolst:
  0016a	56		 push	 esi
  0016b	e8 00 00 00 00	 call	 _lua_pushfstring
$LN25@luaL_tolst:
  00170	83 c4 10	 add	 esp, 16			; 00000010H
; Line 821
  00173	ff 75 10	 push	 DWORD PTR _len$[ebp]
  00176	6a ff		 push	 -1
  00178	56		 push	 esi
  00179	e8 00 00 00 00	 call	 _lua_tolstring
  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	5b		 pop	 ebx
; Line 822
  00184	5d		 pop	 ebp
  00185	c3		 ret	 0
  00186	8b ff		 npad	 2
$LN27@luaL_tolst:
  00188	00 00 00 00	 DD	 $LN2@luaL_tolst
  0018c	00 00 00 00	 DD	 $LN3@luaL_tolst
  00190	00 00 00 00	 DD	 $LN1@luaL_tolst
  00194	00 00 00 00	 DD	 $LN7@luaL_tolst
  00198	00 00 00 00	 DD	 $LN4@luaL_tolst
_luaL_tolstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_callmeta
_TEXT	SEGMENT
_L$ = 8							; size = 4
_obj$ = 12						; size = 4
_event$ = 16						; size = 4
_luaL_callmeta PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 774
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 775
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	ff 75 0c	 push	 DWORD PTR _obj$[ebp]
  0000b	56		 push	 esi
  0000c	e8 00 00 00 00	 call	 _lua_absindex
; Line 776
  00011	ff 75 10	 push	 DWORD PTR _event$[ebp]
  00014	8b f8		 mov	 edi, eax
  00016	57		 push	 edi
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 _luaL_getmetafield
  0001d	83 c4 14	 add	 esp, 20			; 00000014H
  00020	85 c0		 test	 eax, eax
  00022	75 04		 jne	 SHORT $LN1@luaL_callm
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
; Line 781
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN1@luaL_callm:
; Line 778
  00028	57		 push	 edi
  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 779
  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	6a 01		 push	 1
  00035	6a 01		 push	 1
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _lua_callk
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH
; Line 780
  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
; Line 781
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_luaL_callmeta ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_getmetafield
_TEXT	SEGMENT
_L$ = 8							; size = 4
_obj$ = 12						; size = 4
_event$ = 16						; size = 4
_luaL_getmetafield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 758
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 759
  00004	ff 75 0c	 push	 DWORD PTR _obj$[ebp]
  00007	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _lua_getmetatable
  00010	83 c4 08	 add	 esp, 8
  00013	85 c0		 test	 eax, eax
  00015	75 03		 jne	 SHORT $LN4@luaL_getme
  00017	5e		 pop	 esi
; Line 771
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN4@luaL_getme:
  0001a	57		 push	 edi
; Line 763
  0001b	ff 75 10	 push	 DWORD PTR _event$[ebp]
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _lua_pushstring
; Line 764
  00024	6a fe		 push	 -2			; fffffffeH
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _lua_rawget
  0002c	8b f8		 mov	 edi, eax
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
; Line 765
  00031	85 ff		 test	 edi, edi
  00033	75 11		 jne	 SHORT $LN2@luaL_getme
; Line 766
  00035	6a fd		 push	 -3			; fffffffdH
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _lua_settop
  0003d	83 c4 08	 add	 esp, 8
; Line 769
  00040	8b c7		 mov	 eax, edi
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
; Line 771
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN2@luaL_getme:
; Line 768
  00046	6a ff		 push	 -1
  00048	6a fe		 push	 -2			; fffffffeH
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _lua_rotate
  00050	6a fe		 push	 -2			; fffffffeH
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 _lua_settop
  00058	83 c4 14	 add	 esp, 20			; 00000014H
; Line 769
  0005b	8b c7		 mov	 eax, edi
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
; Line 771
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_luaL_getmetafield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaL_checkversion_
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ver$ = 12						; size = 8
_sz$ = 20						; size = 4
_luaL_checkversion_ PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 1010
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 1011
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 _lua_version
  0000e	83 c4 04	 add	 esp, 4
  00011	8b f8		 mov	 edi, eax
; Line 1012
  00013	81 7d 14 88 00
	00 00		 cmp	 DWORD PTR _sz$[ebp], 136 ; 00000088H
  0001a	74 0e		 je	 SHORT $LN4@luaL_check
; Line 1013
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@FGBFPBHC@core?5and?5library?5have?5incompatib@
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 _luaL_error
  00027	83 c4 08	 add	 esp, 8
$LN4@luaL_check:
; Line 1014
  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 _lua_version
  00031	83 c4 04	 add	 esp, 4
  00034	3b f8		 cmp	 edi, eax
  00036	74 12		 je	 SHORT $LN3@luaL_check
; Line 1015
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DLNLJHN@multiple?5Lua?5VMs?5detected?$AA@
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _luaL_error
  00043	83 c4 08	 add	 esp, 8
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
; Line 1019
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN3@luaL_check:
; Line 1016
  0004a	f2 0f 10 0f	 movsd	 xmm1, QWORD PTR [edi]
  0004e	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR _ver$[ebp]
  00053	66 0f 2e c8	 ucomisd xmm1, xmm0
  00057	9f		 lahf
  00058	f6 c4 44	 test	 ah, 68			; 00000044H
  0005b	7b 1c		 jnp	 SHORT $LN1@luaL_check
; Line 1018
  0005d	83 ec 10	 sub	 esp, 16			; 00000010H
  00060	f2 0f 11 4c 24
	08		 movsd	 QWORD PTR [esp+8], xmm1
  00066	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@EDLDPMHE@version?5mismatch?3?5app?4?5needs?5?$CFf?0@
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 _luaL_error
  00076	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@luaL_check:
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
; Line 1019
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_luaL_checkversion_ ENDP
_TEXT	ENDS
END
