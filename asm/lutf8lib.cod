; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06KLHHMIGM@offset?$AA@			; `string'
PUBLIC	??_C@_09HHCEKEIA@codepoint?$AA@			; `string'
PUBLIC	??_C@_04ENMBGAPA@char?$AA@			; `string'
PUBLIC	??_C@_03BKCJCHLK@len?$AA@			; `string'
PUBLIC	??_C@_05CFHFIAJO@codes?$AA@			; `string'
PUBLIC	??_C@_0M@GMACFGDH@charpattern?$AA@		; `string'
;	COMDAT ??_C@_0M@GMACFGDH@charpattern?$AA@
CONST	SEGMENT
??_C@_0M@GMACFGDH@charpattern?$AA@ DB 'charpattern', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFHFIAJO@codes?$AA@
CONST	SEGMENT
??_C@_05CFHFIAJO@codes?$AA@ DB 'codes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKCJCHLK@len?$AA@
CONST	SEGMENT
??_C@_03BKCJCHLK@len?$AA@ DB 'len', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENMBGAPA@char?$AA@
CONST	SEGMENT
??_C@_04ENMBGAPA@char?$AA@ DB 'char', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HHCEKEIA@codepoint?$AA@
CONST	SEGMENT
??_C@_09HHCEKEIA@codepoint?$AA@ DB 'codepoint', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLHHMIGM@offset?$AA@
CONST	SEGMENT
??_C@_06KLHHMIGM@offset?$AA@ DB 'offset', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
?limits@?1??utf8_decode@@9@9 DD 0ffH			; `utf8_decode'::`2'::limits
	DD	07fH
	DD	07ffH
	DD	0ffffH
_funcs	DD	FLAT:??_C@_06KLHHMIGM@offset?$AA@
	DD	FLAT:_byteoffset
	DD	FLAT:??_C@_09HHCEKEIA@codepoint?$AA@
	DD	FLAT:_codepoint
	DD	FLAT:??_C@_04ENMBGAPA@char?$AA@
	DD	FLAT:_utfchar
	DD	FLAT:??_C@_03BKCJCHLK@len?$AA@
	DD	FLAT:_utflen
	DD	FLAT:??_C@_05CFHFIAJO@codes?$AA@
	DD	FLAT:_iter_codes
	DD	FLAT:??_C@_0M@GMACFGDH@charpattern?$AA@
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_luaopen_utf8
PUBLIC	??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@ ; `string'
PUBLIC	??_C@_0BN@IINPNO@final?5position?5out?5of?5string?$AA@ ; `string'
PUBLIC	??_C@_0N@FCPHIMMG@out?5of?5range?$AA@		; `string'
PUBLIC	??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BD@MJACNLBA@invalid?5UTF?98?5code?$AA@	; `string'
PUBLIC	??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_02PJPEALPH@?$CFU?$AA@			; `string'
PUBLIC	??_C@_0BG@OBAFCJJL@position?5out?5of?5range?$AA@ ; `string'
PUBLIC	??_C@_0CI@HDBIKOFJ@initial?5position?5is?5a?5continuati@ ; `string'
PUBLIC	??_C@_0P@NELPIPKN@?$FL?$AA?9?$HP?B?9?t?$FN?$FL?$IA?9?$LP?$FN?$CK?$AA@ ; `string'
PUBLIC	__real@405bc00000000000
EXTRN	_lua_gettop:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_tointegerx:PROC
EXTRN	_lua_pushnil:PROC
EXTRN	_lua_pushinteger:PROC
EXTRN	_lua_pushlstring:PROC
EXTRN	_lua_pushfstring:PROC
EXTRN	_lua_pushcclosure:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_setfield:PROC
EXTRN	_luaL_checkversion_:PROC
EXTRN	_luaL_argerror:PROC
EXTRN	_luaL_checklstring:PROC
EXTRN	_luaL_checkinteger:PROC
EXTRN	_luaL_optinteger:PROC
EXTRN	_luaL_checkstack:PROC
EXTRN	_luaL_error:PROC
EXTRN	_luaL_setfuncs:PROC
EXTRN	_luaL_buffinit:PROC
EXTRN	_luaL_addvalue:PROC
EXTRN	_luaL_pushresult:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_0P@NELPIPKN@?$FL?$AA?9?$HP?B?9?t?$FN?$FL?$IA?9?$LP?$FN?$CK?$AA@
CONST	SEGMENT
??_C@_0P@NELPIPKN@?$FL?$AA?9?$HP?B?9?t?$FN?$FL?$IA?9?$LP?$FN?$CK?$AA@ DB '['
	DB	00H, '-', 07fH, 0c2H, '-', 0f4H, '][', 080H, '-', 0bfH, ']*', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HDBIKOFJ@initial?5position?5is?5a?5continuati@
CONST	SEGMENT
??_C@_0CI@HDBIKOFJ@initial?5position?5is?5a?5continuati@ DB 'initial posi'
	DB	'tion is a continuation byte', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OBAFCJJL@position?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BG@OBAFCJJL@position?5out?5of?5range?$AA@ DB 'position out of rang'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02PJPEALPH@?$CFU?$AA@
CONST	SEGMENT
??_C@_02PJPEALPH@?$CFU?$AA@ DB '%U', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@ DB 'value out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MJACNLBA@invalid?5UTF?98?5code?$AA@
CONST	SEGMENT
??_C@_0BD@MJACNLBA@invalid?5UTF?98?5code?$AA@ DB 'invalid UTF-8 code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@ DB 'string slice too lon'
	DB	'g', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FCPHIMMG@out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0N@FCPHIMMG@out?5of?5range?$AA@ DB 'out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IINPNO@final?5position?5out?5of?5string?$AA@
CONST	SEGMENT
??_C@_0BN@IINPNO@final?5position?5out?5of?5string?$AA@ DB 'final position'
	DB	' out of string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@
CONST	SEGMENT
??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@ DB 'initial po'
	DB	'sition out of string', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _iter_codes
_TEXT	SEGMENT
_L$ = 8							; size = 4
_iter_codes PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 225
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 226
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 00		 push	 0
  00009	6a 01		 push	 1
  0000b	56		 push	 esi
  0000c	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 227
  00011	6a 00		 push	 0
  00013	68 00 00 00 00	 push	 OFFSET _iter_aux
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 _lua_pushcclosure
; Line 228
  0001e	6a 01		 push	 1
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 229
  00026	6a 00		 push	 0
  00028	6a 00		 push	 0
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 _lua_pushinteger
  00030	83 c4 2c	 add	 esp, 44			; 0000002cH
; Line 230
  00033	b8 03 00 00 00	 mov	 eax, 3
  00038	5e		 pop	 esi
; Line 231
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
_iter_codes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _iter_aux
_TEXT	SEGMENT
_n$ = -12						; size = 8
_code$1 = -8						; size = 4
_len$ = -4						; size = 4
_L$ = 8							; size = 4
_iter_aux PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 201
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 203
  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	8d 45 fc	 lea	 eax, DWORD PTR _len$[ebp]
  0000e	57		 push	 edi
  0000f	50		 push	 eax
  00010	6a 01		 push	 1
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 204
  00018	6a 00		 push	 0
  0001a	6a 02		 push	 2
  0001c	56		 push	 esi
  0001d	8b d8		 mov	 ebx, eax
  0001f	e8 00 00 00 00	 call	 _lua_tointegerx
; Line 205
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  00027	83 c4 18	 add	 esp, 24			; 00000018H
  0002a	8b f0		 mov	 esi, eax
  0002c	8b fa		 mov	 edi, edx
  0002e	83 ee 01	 sub	 esi, 1
  00031	83 df 00	 sbb	 edi, 0
  00034	85 ff		 test	 edi, edi
  00036	7f 52		 jg	 SHORT $LN18@iter_aux
  00038	7c 04		 jl	 SHORT $LN16@iter_aux
  0003a	85 f6		 test	 esi, esi
  0003c	73 10		 jae	 SHORT $LN9@iter_aux
$LN16@iter_aux:
  0003e	0f 57 c0	 xorps	 xmm0, xmm0
; Line 206
  00041	66 0f 13 45 f4	 movlpd	 QWORD PTR _n$[ebp], xmm0
  00046	8b 7d f8	 mov	 edi, DWORD PTR _n$[ebp+4]
  00049	8b 75 f4	 mov	 esi, DWORD PTR _n$[ebp]
  0004c	eb 32		 jmp	 SHORT $LN5@iter_aux
$LN9@iter_aux:
; Line 207
  0004e	85 ff		 test	 edi, edi
  00050	7f 38		 jg	 SHORT $LN18@iter_aux
  00052	7c 04		 jl	 SHORT $LN17@iter_aux
  00054	3b f1		 cmp	 esi, ecx
  00056	73 28		 jae	 SHORT $LN5@iter_aux
$LN17@iter_aux:
; Line 209
  00058	8a 44 1e 01	 mov	 al, BYTE PTR [esi+ebx+1]
  0005c	83 c6 01	 add	 esi, 1
  0005f	83 d7 00	 adc	 edi, 0
  00062	24 c0		 and	 al, 192			; 000000c0H
  00064	3c 80		 cmp	 al, 128			; 00000080H
  00066	75 18		 jne	 SHORT $LN5@iter_aux
  00068	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL6@iter_aux:
  00070	8a 44 1e 01	 mov	 al, BYTE PTR [esi+ebx+1]
  00074	83 c6 01	 add	 esi, 1
  00077	83 d7 00	 adc	 edi, 0
  0007a	24 c0		 and	 al, 192			; 000000c0H
  0007c	3c 80		 cmp	 al, 128			; 00000080H
  0007e	74 f0		 je	 SHORT $LL6@iter_aux
$LN5@iter_aux:
; Line 211
  00080	85 ff		 test	 edi, edi
  00082	7c 0f		 jl	 SHORT $LN4@iter_aux
  00084	7f 04		 jg	 SHORT $LN18@iter_aux
  00086	3b f1		 cmp	 esi, ecx
  00088	72 09		 jb	 SHORT $LN4@iter_aux
$LN18@iter_aux:
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
; Line 212
  0008c	33 c0		 xor	 eax, eax
  0008e	5b		 pop	 ebx
; Line 222
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN4@iter_aux:
; Line 215
  00093	8d 45 f8	 lea	 eax, DWORD PTR _code$1[ebp]
  00096	50		 push	 eax
  00097	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _utf8_decode
  000a0	83 c4 08	 add	 esp, 8
; Line 216
  000a3	85 c0		 test	 eax, eax
  000a5	74 34		 je	 SHORT $LN1@iter_aux
  000a7	8a 00		 mov	 al, BYTE PTR [eax]
  000a9	24 c0		 and	 al, 192			; 000000c0H
  000ab	3c 80		 cmp	 al, 128			; 00000080H
  000ad	74 2c		 je	 SHORT $LN1@iter_aux
; Line 218
  000af	83 c6 01	 add	 esi, 1
  000b2	83 d7 00	 adc	 edi, 0
  000b5	57		 push	 edi
  000b6	56		 push	 esi
  000b7	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 _lua_pushinteger
; Line 219
  000c0	8b 45 f8	 mov	 eax, DWORD PTR _code$1[ebp]
  000c3	99		 cdq
  000c4	52		 push	 edx
  000c5	50		 push	 eax
  000c6	56		 push	 esi
  000c7	e8 00 00 00 00	 call	 _lua_pushinteger
  000cc	83 c4 18	 add	 esp, 24			; 00000018H
; Line 220
  000cf	b8 02 00 00 00	 mov	 eax, 2
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
; Line 222
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
$LN1@iter_aux:
; Line 217
  000db	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MJACNLBA@invalid?5UTF?98?5code?$AA@
  000e3	56		 push	 esi
  000e4	e8 00 00 00 00	 call	 _luaL_error
  000e9	83 c4 08	 add	 esp, 8
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
; Line 222
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c3		 ret	 0
_iter_aux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _byteoffset
_TEXT	SEGMENT
_posi$ = -20						; size = 8
_len$1$ = -16						; size = 4
_n$2$ = -12						; size = 4
_n$1$ = -8						; size = 4
_len$ = -4						; size = 4
_L$ = 8							; size = 4
_byteoffset PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 160
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 162
  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	8d 45 fc	 lea	 eax, DWORD PTR _len$[ebp]
  0000e	57		 push	 edi
  0000f	50		 push	 eax
  00010	6a 01		 push	 1
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 163
  00018	6a 02		 push	 2
  0001a	56		 push	 esi
  0001b	8b d8		 mov	 ebx, eax
  0001d	e8 00 00 00 00	 call	 _luaL_checkinteger
; Line 164
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  00025	83 c4 14	 add	 esp, 20			; 00000014H
  00028	89 45 f8	 mov	 DWORD PTR _n$1$[ebp], eax
  0002b	89 55 f4	 mov	 DWORD PTR _n$2$[ebp], edx
  0002e	89 4d f0	 mov	 DWORD PTR _len$1$[ebp], ecx
  00031	85 d2		 test	 edx, edx
  00033	7c 0d		 jl	 SHORT $LN23@byteoffset
  00035	7f 04		 jg	 SHORT $LN57@byteoffset
  00037	85 c0		 test	 eax, eax
  00039	72 07		 jb	 SHORT $LN23@byteoffset
$LN57@byteoffset:
  0003b	b9 01 00 00 00	 mov	 ecx, 1
  00040	eb 01		 jmp	 SHORT $LN24@byteoffset
$LN23@byteoffset:
  00042	41		 inc	 ecx
$LN24@byteoffset:
; Line 165
  00043	6a 00		 push	 0
  00045	51		 push	 ecx
  00046	6a 03		 push	 3
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 _luaL_optinteger
  0004e	8b fa		 mov	 edi, edx
  00050	83 c4 10	 add	 esp, 16			; 00000010H
  00053	8b f0		 mov	 esi, eax
  00055	85 ff		 test	 edi, edi
  00057	7c 06		 jl	 SHORT $LN30@byteoffset
  00059	7f 35		 jg	 SHORT $LN59@byteoffset
  0005b	85 f6		 test	 esi, esi
  0005d	73 26		 jae	 SHORT $LN27@byteoffset
$LN30@byteoffset:
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR _len$1$[ebp]
  00062	8b c6		 mov	 eax, esi
  00064	f7 d8		 neg	 eax
  00066	3b c1		 cmp	 eax, ecx
  00068	76 10		 jbe	 SHORT $LN28@byteoffset
  0006a	0f 57 c0	 xorps	 xmm0, xmm0
  0006d	66 0f 13 45 ec	 movlpd	 QWORD PTR _posi$[ebp], xmm0
  00072	8b 7d f0	 mov	 edi, DWORD PTR _posi$[ebp+4]
  00075	8b 75 ec	 mov	 esi, DWORD PTR _posi$[ebp]
  00078	eb 25		 jmp	 SHORT $LN60@byteoffset
$LN28@byteoffset:
  0007a	33 c0		 xor	 eax, eax
  0007c	03 f1		 add	 esi, ecx
  0007e	13 f8		 adc	 edi, eax
  00080	83 c6 01	 add	 esi, 1
  00083	13 f8		 adc	 edi, eax
$LN27@byteoffset:
; Line 167
  00085	85 ff		 test	 edi, edi
  00087	7c 16		 jl	 SHORT $LN60@byteoffset
  00089	7f 05		 jg	 SHORT $LN59@byteoffset
  0008b	83 fe 01	 cmp	 esi, 1
  0008e	72 0f		 jb	 SHORT $LN60@byteoffset
$LN59@byteoffset:
  00090	83 c6 ff	 add	 esi, -1
  00093	83 d7 ff	 adc	 edi, -1
  00096	78 19		 js	 SHORT $LN26@byteoffset
  00098	7f 05		 jg	 SHORT $LN60@byteoffset
  0009a	3b 75 fc	 cmp	 esi, DWORD PTR _len$[ebp]
  0009d	76 12		 jbe	 SHORT $LN26@byteoffset
$LN60@byteoffset:
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@OBAFCJJL@position?5out?5of?5range?$AA@
  000a4	6a 03		 push	 3
  000a6	ff 75 08	 push	 DWORD PTR _L$[ebp]
  000a9	e8 00 00 00 00	 call	 _luaL_argerror
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN26@byteoffset:
; Line 168
  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _n$1$[ebp]
  000b4	8b c1		 mov	 eax, ecx
  000b6	8b 55 f4	 mov	 edx, DWORD PTR _n$2$[ebp]
  000b9	0b c2		 or	 eax, edx
  000bb	75 39		 jne	 SHORT $LN20@byteoffset
; Line 170
  000bd	85 ff		 test	 edi, edi
  000bf	0f 8c cf 00 00
	00		 jl	 $LN56@byteoffset
  000c5	7f 09		 jg	 SHORT $LL19@byteoffset
  000c7	85 f6		 test	 esi, esi
  000c9	0f 84 c5 00 00
	00		 je	 $LN56@byteoffset
  000cf	90		 npad	 1
$LL19@byteoffset:
  000d0	8a 04 1e	 mov	 al, BYTE PTR [esi+ebx]
  000d3	24 c0		 and	 al, 192			; 000000c0H
  000d5	3c 80		 cmp	 al, 128			; 00000080H
  000d7	0f 85 b7 00 00
	00		 jne	 $LN56@byteoffset
  000dd	83 c6 ff	 add	 esi, -1
  000e0	83 d7 ff	 adc	 edi, -1
  000e3	85 ff		 test	 edi, edi
  000e5	7f e9		 jg	 SHORT $LL19@byteoffset
  000e7	0f 8c a7 00 00
	00		 jl	 $LN56@byteoffset
  000ed	85 f6		 test	 esi, esi
  000ef	75 df		 jne	 SHORT $LL19@byteoffset
; Line 172
  000f1	e9 9e 00 00 00	 jmp	 $LN56@byteoffset
$LN20@byteoffset:
; Line 173
  000f6	8a 04 1e	 mov	 al, BYTE PTR [esi+ebx]
  000f9	24 c0		 and	 al, 192			; 000000c0H
  000fb	3c 80		 cmp	 al, 128			; 00000080H
  000fd	75 16		 jne	 SHORT $LN16@byteoffset
; Line 174
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HDBIKOFJ@initial?5position?5is?5a?5continuati@
  00104	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00107	e8 00 00 00 00	 call	 _luaL_error
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR _n$1$[ebp]
  0010f	83 c4 08	 add	 esp, 8
  00112	8b 55 f4	 mov	 edx, DWORD PTR _n$2$[ebp]
$LN16@byteoffset:
; Line 175
  00115	85 d2		 test	 edx, edx
  00117	7f 3e		 jg	 SHORT $LN15@byteoffset
  00119	7c 05		 jl	 SHORT $LL14@byteoffset
  0011b	85 c9		 test	 ecx, ecx
  0011d	73 38		 jae	 SHORT $LN15@byteoffset
  0011f	90		 npad	 1
$LL14@byteoffset:
; Line 176
  00120	85 ff		 test	 edi, edi
  00122	7c 6c		 jl	 SHORT $LN80@byteoffset
  00124	7f 0a		 jg	 SHORT $LL12@byteoffset
  00126	85 f6		 test	 esi, esi
  00128	74 66		 je	 SHORT $LN80@byteoffset
  0012a	8d 9b 00 00 00
	00		 npad	 6
$LL12@byteoffset:
; Line 178
  00130	83 c6 ff	 add	 esi, -1
  00133	83 d7 ff	 adc	 edi, -1
; Line 179
  00136	78 0f		 js	 SHORT $LN9@byteoffset
  00138	7f 04		 jg	 SHORT $LN65@byteoffset
  0013a	85 f6		 test	 esi, esi
  0013c	74 09		 je	 SHORT $LN9@byteoffset
$LN65@byteoffset:
  0013e	8a 04 1e	 mov	 al, BYTE PTR [esi+ebx]
  00141	24 c0		 and	 al, 192			; 000000c0H
  00143	3c 80		 cmp	 al, 128			; 00000080H
  00145	74 e9		 je	 SHORT $LL12@byteoffset
$LN9@byteoffset:
; Line 180
  00147	83 c1 01	 add	 ecx, 1
  0014a	83 d2 00	 adc	 edx, 0
  0014d	78 d1		 js	 SHORT $LL14@byteoffset
; Line 176
  0014f	7f 3f		 jg	 SHORT $LN80@byteoffset
  00151	85 c9		 test	 ecx, ecx
  00153	72 cb		 jb	 SHORT $LL14@byteoffset
; Line 183
  00155	eb 39		 jmp	 SHORT $LN80@byteoffset
$LN15@byteoffset:
; Line 184
  00157	83 c1 ff	 add	 ecx, -1
  0015a	83 d2 ff	 adc	 edx, -1
; Line 185
  0015d	78 31		 js	 SHORT $LN80@byteoffset
  0015f	7f 04		 jg	 SHORT $LL7@byteoffset
  00161	85 c9		 test	 ecx, ecx
  00163	74 2b		 je	 SHORT $LN80@byteoffset
$LL7@byteoffset:
  00165	85 ff		 test	 edi, edi
  00167	7f 27		 jg	 SHORT $LN80@byteoffset
  00169	7c 05		 jl	 SHORT $LL5@byteoffset
  0016b	3b 75 fc	 cmp	 esi, DWORD PTR _len$[ebp]
  0016e	73 20		 jae	 SHORT $LN80@byteoffset
$LL5@byteoffset:
; Line 188
  00170	8a 44 1e 01	 mov	 al, BYTE PTR [esi+ebx+1]
  00174	83 c6 01	 add	 esi, 1
  00177	83 d7 00	 adc	 edi, 0
  0017a	24 c0		 and	 al, 192			; 000000c0H
  0017c	3c 80		 cmp	 al, 128			; 00000080H
  0017e	74 f0		 je	 SHORT $LL5@byteoffset
; Line 189
  00180	83 c1 ff	 add	 ecx, -1
  00183	83 d2 ff	 adc	 edx, -1
  00186	85 d2		 test	 edx, edx
  00188	7f db		 jg	 SHORT $LL7@byteoffset
; Line 185
  0018a	7c 04		 jl	 SHORT $LN80@byteoffset
  0018c	85 c9		 test	 ecx, ecx
  0018e	75 d5		 jne	 SHORT $LL7@byteoffset
$LN80@byteoffset:
; Line 193
  00190	0b ca		 or	 ecx, edx
  00192	75 1f		 jne	 SHORT $LN2@byteoffset
$LN56@byteoffset:
; Line 194
  00194	83 c6 01	 add	 esi, 1
  00197	83 d7 00	 adc	 edi, 0
  0019a	57		 push	 edi
  0019b	56		 push	 esi
  0019c	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0019f	e8 00 00 00 00	 call	 _lua_pushinteger
  001a4	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 197
  001a7	b8 01 00 00 00	 mov	 eax, 1
  001ac	5f		 pop	 edi
  001ad	5e		 pop	 esi
  001ae	5b		 pop	 ebx
; Line 198
  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c3		 ret	 0
$LN2@byteoffset:
; Line 196
  001b3	ff 75 08	 push	 DWORD PTR _L$[ebp]
  001b6	e8 00 00 00 00	 call	 _lua_pushnil
  001bb	83 c4 04	 add	 esp, 4
; Line 197
  001be	b8 01 00 00 00	 mov	 eax, 1
  001c3	5f		 pop	 edi
  001c4	5e		 pop	 esi
  001c5	5b		 pop	 ebx
; Line 198
  001c6	8b e5		 mov	 esp, ebp
  001c8	5d		 pop	 ebp
  001c9	c3		 ret	 0
_byteoffset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _utfchar
_TEXT	SEGMENT
_n$1$ = -8216						; size = 4
_b$1 = -8212						; size = 8208
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_utfchar PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 138
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 18 20 00 00	 mov	 eax, 8216		; 00002018H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
; Line 139
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 _lua_gettop
  00023	8b d8		 mov	 ebx, eax
  00025	83 c4 04	 add	 esp, 4
  00028	89 9d e8 df ff
	ff		 mov	 DWORD PTR _n$1$[ebp], ebx
; Line 140
  0002e	83 fb 01	 cmp	 ebx, 1
  00031	75 45		 jne	 SHORT $LN5@utfchar
; Line 141
  00033	50		 push	 eax
  00034	57		 push	 edi
  00035	e8 00 00 00 00	 call	 _luaL_checkinteger
  0003a	83 c4 08	 add	 esp, 8
  0003d	8b f0		 mov	 esi, eax
  0003f	85 d2		 test	 edx, edx
  00041	7c 14		 jl	 SHORT $LN21@utfchar
  00043	7f 12		 jg	 SHORT $LN21@utfchar
  00045	85 f6		 test	 esi, esi
  00047	72 0e		 jb	 SHORT $LN21@utfchar
  00049	85 d2		 test	 edx, edx
  0004b	7c 1a		 jl	 SHORT $LN11@utfchar
  0004d	7f 08		 jg	 SHORT $LN21@utfchar
  0004f	81 fe ff ff 10
	00		 cmp	 esi, 1114111		; 0010ffffH
  00055	76 10		 jbe	 SHORT $LN11@utfchar
$LN21@utfchar:
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
  0005c	6a 01		 push	 1
  0005e	57		 push	 edi
  0005f	e8 00 00 00 00	 call	 _luaL_argerror
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@utfchar:
  00067	56		 push	 esi
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_02PJPEALPH@?$CFU?$AA@
  0006d	57		 push	 edi
  0006e	e8 00 00 00 00	 call	 _lua_pushfstring
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 142
  00076	eb 7f		 jmp	 SHORT $LN26@utfchar
$LN5@utfchar:
; Line 145
  00078	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$1[ebp]
  0007e	50		 push	 eax
  0007f	57		 push	 edi
  00080	e8 00 00 00 00	 call	 _luaL_buffinit
; Line 146
  00085	be 01 00 00 00	 mov	 esi, 1
  0008a	83 c4 08	 add	 esp, 8
  0008d	3b de		 cmp	 ebx, esi
  0008f	7c 57		 jl	 SHORT $LN1@utfchar
$LL3@utfchar:
; Line 147
  00091	56		 push	 esi
  00092	57		 push	 edi
  00093	e8 00 00 00 00	 call	 _luaL_checkinteger
  00098	83 c4 08	 add	 esp, 8
  0009b	8b d8		 mov	 ebx, eax
  0009d	85 d2		 test	 edx, edx
  0009f	7c 14		 jl	 SHORT $LN23@utfchar
  000a1	7f 12		 jg	 SHORT $LN23@utfchar
  000a3	85 db		 test	 ebx, ebx
  000a5	72 0e		 jb	 SHORT $LN23@utfchar
  000a7	85 d2		 test	 edx, edx
  000a9	7c 19		 jl	 SHORT $LN15@utfchar
  000ab	7f 08		 jg	 SHORT $LN23@utfchar
  000ad	81 fb ff ff 10
	00		 cmp	 ebx, 1114111		; 0010ffffH
  000b3	76 0f		 jbe	 SHORT $LN15@utfchar
$LN23@utfchar:
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
  000ba	56		 push	 esi
  000bb	57		 push	 edi
  000bc	e8 00 00 00 00	 call	 _luaL_argerror
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@utfchar:
  000c4	53		 push	 ebx
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_02PJPEALPH@?$CFU?$AA@
  000ca	57		 push	 edi
  000cb	e8 00 00 00 00	 call	 _lua_pushfstring
; Line 148
  000d0	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$1[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _luaL_addvalue
  000dc	46		 inc	 esi
  000dd	83 c4 10	 add	 esp, 16			; 00000010H
  000e0	3b b5 e8 df ff
	ff		 cmp	 esi, DWORD PTR _n$1$[ebp]
  000e6	7e a9		 jle	 SHORT $LL3@utfchar
$LN1@utfchar:
; Line 150
  000e8	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$1[ebp]
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 _luaL_pushresult
  000f4	83 c4 04	 add	 esp, 4
$LN26@utfchar:
; Line 153
  000f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fa	b8 01 00 00 00	 mov	 eax, 1
  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	33 cd		 xor	 ecx, ebp
  00103	5b		 pop	 ebx
  00104	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
_utfchar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _pushutfchar
_TEXT	SEGMENT
_L$ = 8							; size = 4
_arg$ = 12						; size = 4
_pushutfchar PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 128
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 129
  00005	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  00008	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000b	57		 push	 edi
  0000c	e8 00 00 00 00	 call	 _luaL_checkinteger
  00011	83 c4 08	 add	 esp, 8
  00014	8b f0		 mov	 esi, eax
; Line 130
  00016	85 d2		 test	 edx, edx
  00018	7c 14		 jl	 SHORT $LN6@pushutfcha
  0001a	7f 12		 jg	 SHORT $LN6@pushutfcha
  0001c	85 f6		 test	 esi, esi
  0001e	72 0e		 jb	 SHORT $LN6@pushutfcha
  00020	85 d2		 test	 edx, edx
  00022	7c 1b		 jl	 SHORT $LN4@pushutfcha
  00024	7f 08		 jg	 SHORT $LN6@pushutfcha
  00026	81 fe ff ff 10
	00		 cmp	 esi, 1114111		; 0010ffffH
  0002c	76 11		 jbe	 SHORT $LN4@pushutfcha
$LN6@pushutfcha:
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
  00033	ff 75 0c	 push	 DWORD PTR _arg$[ebp]
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 _luaL_argerror
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@pushutfcha:
; Line 131
  0003f	56		 push	 esi
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_02PJPEALPH@?$CFU?$AA@
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 _lua_pushfstring
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
; Line 132
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_pushutfchar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _codepoint
_TEXT	SEGMENT
_s$1$ = -28						; size = 4
_code$1 = -28						; size = 4
tv135 = -24						; size = 8
_pose$ = -24						; size = 8
_posi$ = -24						; size = 8
_len$1$ = -20						; size = 4
_se$1$ = -20						; size = 4
_pose$1$ = -16						; size = 4
_len$ = -12						; size = 4
_posi$2$ = -8						; size = 4
_pose$2$ = -4						; size = 4
_L$ = 8							; size = 4
_codepoint PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 100
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
; Line 102
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  0000a	8d 45 f4	 lea	 eax, DWORD PTR _len$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	50		 push	 eax
  00010	6a 01		 push	 1
  00012	53		 push	 ebx
  00013	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 103
  00018	8b 7d f4	 mov	 edi, DWORD PTR _len$[ebp]
  0001b	6a 00		 push	 0
  0001d	6a 01		 push	 1
  0001f	6a 02		 push	 2
  00021	53		 push	 ebx
  00022	89 45 e4	 mov	 DWORD PTR _s$1$[ebp], eax
  00025	e8 00 00 00 00	 call	 _luaL_optinteger
  0002a	8b ca		 mov	 ecx, edx
  0002c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002f	89 4d f8	 mov	 DWORD PTR _posi$2$[ebp], ecx
  00032	8b f0		 mov	 esi, eax
  00034	85 c9		 test	 ecx, ecx
  00036	7c 06		 jl	 SHORT $LN13@codepoint
  00038	7f 2e		 jg	 SHORT $LN10@codepoint
  0003a	85 f6		 test	 esi, esi
  0003c	73 2a		 jae	 SHORT $LN10@codepoint
$LN13@codepoint:
  0003e	f7 d8		 neg	 eax
  00040	3b c7		 cmp	 eax, edi
  00042	76 13		 jbe	 SHORT $LN11@codepoint
  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	66 0f 13 45 e8	 movlpd	 QWORD PTR _posi$[ebp], xmm0
  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _posi$[ebp+4]
  0004f	8b 75 e8	 mov	 esi, DWORD PTR _posi$[ebp]
  00052	89 4d f8	 mov	 DWORD PTR _posi$2$[ebp], ecx
  00055	eb 11		 jmp	 SHORT $LN10@codepoint
$LN11@codepoint:
  00057	33 c0		 xor	 eax, eax
  00059	03 f7		 add	 esi, edi
  0005b	13 c1		 adc	 eax, ecx
  0005d	83 c6 01	 add	 esi, 1
  00060	83 d0 00	 adc	 eax, 0
  00063	8b c8		 mov	 ecx, eax
  00065	89 45 f8	 mov	 DWORD PTR _posi$2$[ebp], eax
$LN10@codepoint:
; Line 104
  00068	8b 45 f4	 mov	 eax, DWORD PTR _len$[ebp]
  0006b	51		 push	 ecx
  0006c	56		 push	 esi
  0006d	6a 03		 push	 3
  0006f	53		 push	 ebx
  00070	89 45 ec	 mov	 DWORD PTR _len$1$[ebp], eax
  00073	e8 00 00 00 00	 call	 _luaL_optinteger
  00078	8b ca		 mov	 ecx, edx
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
  0007d	89 4d fc	 mov	 DWORD PTR _pose$2$[ebp], ecx
  00080	8b f8		 mov	 edi, eax
  00082	89 7d f0	 mov	 DWORD PTR _pose$1$[ebp], edi
  00085	85 c9		 test	 ecx, ecx
  00087	7c 06		 jl	 SHORT $LN19@codepoint
  00089	7f 31		 jg	 SHORT $LN16@codepoint
  0008b	85 ff		 test	 edi, edi
  0008d	73 2d		 jae	 SHORT $LN16@codepoint
$LN19@codepoint:
  0008f	8b 55 ec	 mov	 edx, DWORD PTR _len$1$[ebp]
  00092	8b c7		 mov	 eax, edi
  00094	f7 d8		 neg	 eax
  00096	3b c2		 cmp	 eax, edx
  00098	76 10		 jbe	 SHORT $LN17@codepoint
  0009a	0f 57 c0	 xorps	 xmm0, xmm0
  0009d	66 0f 13 45 e8	 movlpd	 QWORD PTR _pose$[ebp], xmm0
  000a2	8b 45 ec	 mov	 eax, DWORD PTR _pose$[ebp+4]
  000a5	8b 7d e8	 mov	 edi, DWORD PTR _pose$[ebp]
  000a8	eb 0c		 jmp	 SHORT $LN33@codepoint
$LN17@codepoint:
  000aa	33 c0		 xor	 eax, eax
  000ac	03 fa		 add	 edi, edx
  000ae	13 c1		 adc	 eax, ecx
  000b0	83 c7 01	 add	 edi, 1
  000b3	83 d0 00	 adc	 eax, 0
$LN33@codepoint:
  000b6	89 45 fc	 mov	 DWORD PTR _pose$2$[ebp], eax
  000b9	89 7d f0	 mov	 DWORD PTR _pose$1$[ebp], edi
$LN16@codepoint:
; Line 107
  000bc	83 7d f8 00	 cmp	 DWORD PTR _posi$2$[ebp], 0
  000c0	7f 17		 jg	 SHORT $LN8@codepoint
  000c2	7c 05		 jl	 SHORT $LN29@codepoint
  000c4	83 fe 01	 cmp	 esi, 1
  000c7	73 10		 jae	 SHORT $LN8@codepoint
$LN29@codepoint:
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FCPHIMMG@out?5of?5range?$AA@
  000ce	6a 02		 push	 2
  000d0	53		 push	 ebx
  000d1	e8 00 00 00 00	 call	 _luaL_argerror
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@codepoint:
; Line 108
  000d9	8b 45 fc	 mov	 eax, DWORD PTR _pose$2$[ebp]
  000dc	85 c0		 test	 eax, eax
  000de	7c 1a		 jl	 SHORT $LN9@codepoint
  000e0	7f 05		 jg	 SHORT $LN30@codepoint
  000e2	3b 7d f4	 cmp	 edi, DWORD PTR _len$[ebp]
  000e5	76 13		 jbe	 SHORT $LN9@codepoint
$LN30@codepoint:
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FCPHIMMG@out?5of?5range?$AA@
  000ec	6a 03		 push	 3
  000ee	53		 push	 ebx
  000ef	e8 00 00 00 00	 call	 _luaL_argerror
  000f4	8b 45 fc	 mov	 eax, DWORD PTR _pose$2$[ebp]
  000f7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@codepoint:
; Line 109
  000fa	8b 4d f8	 mov	 ecx, DWORD PTR _posi$2$[ebp]
  000fd	3b c8		 cmp	 ecx, eax
  000ff	7c 0f		 jl	 SHORT $LN5@codepoint
  00101	7f 04		 jg	 SHORT $LN31@codepoint
  00103	3b f7		 cmp	 esi, edi
  00105	76 09		 jbe	 SHORT $LN5@codepoint
$LN31@codepoint:
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	33 c0		 xor	 eax, eax
  0010b	5b		 pop	 ebx
; Line 125
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
$LN5@codepoint:
; Line 110
  00110	8b d7		 mov	 edx, edi
  00112	2b d6		 sub	 edx, esi
  00114	1b c1		 sbb	 eax, ecx
  00116	89 45 ec	 mov	 DWORD PTR tv135[ebp+4], eax
  00119	78 1f		 js	 SHORT $LN4@codepoint
  0011b	7f 08		 jg	 SHORT $LN32@codepoint
  0011d	81 fa ff ff ff
	7f		 cmp	 edx, 2147483647		; 7fffffffH
  00123	72 15		 jb	 SHORT $LN4@codepoint
$LN32@codepoint:
; Line 111
  00125	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
  0012a	53		 push	 ebx
  0012b	e8 00 00 00 00	 call	 _luaL_error
  00130	83 c4 08	 add	 esp, 8
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
; Line 125
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
$LN4@codepoint:
; Line 113
  0013a	8b c7		 mov	 eax, edi
  0013c	2b c6		 sub	 eax, esi
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
  00143	40		 inc	 eax
  00144	50		 push	 eax
  00145	53		 push	 ebx
  00146	e8 00 00 00 00	 call	 _luaL_checkstack
; Line 115
  0014b	8b 45 f0	 mov	 eax, DWORD PTR _pose$1$[ebp]
; Line 116
  0014e	4e		 dec	 esi
  0014f	03 45 e4	 add	 eax, DWORD PTR _s$1$[ebp]
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH
  00155	03 75 e4	 add	 esi, DWORD PTR _s$1$[ebp]
  00158	33 ff		 xor	 edi, edi
  0015a	89 45 ec	 mov	 DWORD PTR _se$1$[ebp], eax
  0015d	3b f0		 cmp	 esi, eax
  0015f	73 28		 jae	 SHORT $LN2@codepoint
$LL3@codepoint:
; Line 118
  00161	8d 45 e4	 lea	 eax, DWORD PTR _code$1[ebp]
  00164	50		 push	 eax
  00165	56		 push	 esi
  00166	e8 00 00 00 00	 call	 _utf8_decode
  0016b	8b f0		 mov	 esi, eax
  0016d	83 c4 08	 add	 esp, 8
; Line 119
  00170	85 f6		 test	 esi, esi
  00172	74 1e		 je	 SHORT $LN23@codepoint
; Line 121
  00174	8b 45 e4	 mov	 eax, DWORD PTR _code$1[ebp]
  00177	99		 cdq
  00178	52		 push	 edx
  00179	50		 push	 eax
  0017a	53		 push	 ebx
  0017b	e8 00 00 00 00	 call	 _lua_pushinteger
  00180	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 122
  00183	47		 inc	 edi
  00184	3b 75 ec	 cmp	 esi, DWORD PTR _se$1$[ebp]
  00187	72 d8		 jb	 SHORT $LL3@codepoint
$LN2@codepoint:
; Line 124
  00189	8b c7		 mov	 eax, edi
  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	5b		 pop	 ebx
; Line 125
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c3		 ret	 0
$LN23@codepoint:
; Line 120
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MJACNLBA@invalid?5UTF?98?5code?$AA@
  00197	53		 push	 ebx
  00198	e8 00 00 00 00	 call	 _luaL_error
  0019d	83 c4 08	 add	 esp, 8
  001a0	5f		 pop	 edi
  001a1	5e		 pop	 esi
  001a2	5b		 pop	 ebx
; Line 125
  001a3	8b e5		 mov	 esp, ebp
  001a5	5d		 pop	 ebp
  001a6	c3		 ret	 0
_codepoint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _utflen
_TEXT	SEGMENT
_n$1$ = -32						; size = 4
_s$1$ = -28						; size = 4
_posj$ = -24						; size = 8
_posi$ = -24						; size = 8
_posj$1$ = -20						; size = 4
_len$ = -16						; size = 4
_posi$2$ = -12						; size = 4
_posi$1$ = -8						; size = 4
_posj$2$ = -4						; size = 4
_L$ = 8							; size = 4
_utflen	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 71
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
; Line 74
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  0000a	8d 45 f0	 lea	 eax, DWORD PTR _len$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	50		 push	 eax
  00010	6a 01		 push	 1
  00012	53		 push	 ebx
  00013	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _n$1$[ebp], 0
  0001a	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 75
  0001f	8b 75 f0	 mov	 esi, DWORD PTR _len$[ebp]
  00022	6a 00		 push	 0
  00024	6a 01		 push	 1
  00026	6a 02		 push	 2
  00028	53		 push	 ebx
  00029	89 45 e4	 mov	 DWORD PTR _s$1$[ebp], eax
  0002c	e8 00 00 00 00	 call	 _luaL_optinteger
  00031	8b fa		 mov	 edi, edx
  00033	83 c4 1c	 add	 esp, 28			; 0000001cH
  00036	89 7d f4	 mov	 DWORD PTR _posi$2$[ebp], edi
  00039	8b d8		 mov	 ebx, eax
  0003b	89 5d f8	 mov	 DWORD PTR _posi$1$[ebp], ebx
  0003e	85 ff		 test	 edi, edi
  00040	7c 06		 jl	 SHORT $LN12@utflen
  00042	7f 31		 jg	 SHORT $LN9@utflen
  00044	85 db		 test	 ebx, ebx
  00046	73 2d		 jae	 SHORT $LN9@utflen
$LN12@utflen:
  00048	f7 d8		 neg	 eax
  0004a	3b c6		 cmp	 eax, esi
  0004c	76 13		 jbe	 SHORT $LN10@utflen
  0004e	0f 57 c0	 xorps	 xmm0, xmm0
  00051	66 0f 13 45 e8	 movlpd	 QWORD PTR _posi$[ebp], xmm0
  00056	8b 7d ec	 mov	 edi, DWORD PTR _posi$[ebp+4]
  00059	8b 5d e8	 mov	 ebx, DWORD PTR _posi$[ebp]
  0005c	89 7d f4	 mov	 DWORD PTR _posi$2$[ebp], edi
  0005f	eb 11		 jmp	 SHORT $LN57@utflen
$LN10@utflen:
  00061	33 c0		 xor	 eax, eax
  00063	03 de		 add	 ebx, esi
  00065	13 c7		 adc	 eax, edi
  00067	83 c3 01	 add	 ebx, 1
  0006a	83 d0 00	 adc	 eax, 0
  0006d	8b f8		 mov	 edi, eax
  0006f	89 45 f4	 mov	 DWORD PTR _posi$2$[ebp], eax
$LN57@utflen:
  00072	89 5d f8	 mov	 DWORD PTR _posi$1$[ebp], ebx
$LN9@utflen:
; Line 76
  00075	8b 75 f0	 mov	 esi, DWORD PTR _len$[ebp]
  00078	6a ff		 push	 -1
  0007a	6a ff		 push	 -1
  0007c	6a 03		 push	 3
  0007e	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00081	e8 00 00 00 00	 call	 _luaL_optinteger
  00086	83 c4 10	 add	 esp, 16			; 00000010H
  00089	89 55 fc	 mov	 DWORD PTR _posj$2$[ebp], edx
  0008c	8b c8		 mov	 ecx, eax
  0008e	85 d2		 test	 edx, edx
  00090	7c 0a		 jl	 SHORT $LN18@utflen
  00092	7f 04		 jg	 SHORT $LN43@utflen
  00094	85 c9		 test	 ecx, ecx
  00096	72 04		 jb	 SHORT $LN18@utflen
$LN43@utflen:
  00098	8b f0		 mov	 esi, eax
  0009a	eb 28		 jmp	 SHORT $LN15@utflen
$LN18@utflen:
  0009c	f7 d8		 neg	 eax
  0009e	3b c6		 cmp	 eax, esi
  000a0	76 13		 jbe	 SHORT $LN16@utflen
  000a2	0f 57 c0	 xorps	 xmm0, xmm0
  000a5	66 0f 13 45 e8	 movlpd	 QWORD PTR _posj$[ebp], xmm0
  000aa	8b 55 ec	 mov	 edx, DWORD PTR _posj$[ebp+4]
  000ad	8b 75 e8	 mov	 esi, DWORD PTR _posj$[ebp]
  000b0	89 55 fc	 mov	 DWORD PTR _posj$2$[ebp], edx
  000b3	eb 0f		 jmp	 SHORT $LN15@utflen
$LN16@utflen:
  000b5	33 c0		 xor	 eax, eax
  000b7	03 f1		 add	 esi, ecx
  000b9	13 c2		 adc	 eax, edx
  000bb	83 c6 01	 add	 esi, 1
  000be	83 d0 00	 adc	 eax, 0
  000c1	89 45 fc	 mov	 DWORD PTR _posj$2$[ebp], eax
$LN15@utflen:
; Line 78
  000c4	85 ff		 test	 edi, edi
  000c6	7c 1e		 jl	 SHORT $LN45@utflen
  000c8	7f 05		 jg	 SHORT $LN44@utflen
  000ca	83 fb 01	 cmp	 ebx, 1
  000cd	72 17		 jb	 SHORT $LN45@utflen
$LN44@utflen:
  000cf	8b 45 f0	 mov	 eax, DWORD PTR _len$[ebp]
  000d2	83 c3 ff	 add	 ebx, -1
  000d5	89 5d f8	 mov	 DWORD PTR _posi$1$[ebp], ebx
  000d8	83 d7 ff	 adc	 edi, -1
  000db	89 7d f4	 mov	 DWORD PTR _posi$2$[ebp], edi
  000de	78 1b		 js	 SHORT $LN7@utflen
  000e0	7f 04		 jg	 SHORT $LN45@utflen
  000e2	3b d8		 cmp	 ebx, eax
  000e4	76 15		 jbe	 SHORT $LN7@utflen
$LN45@utflen:
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@
  000eb	6a 02		 push	 2
  000ed	ff 75 08	 push	 DWORD PTR _L$[ebp]
  000f0	e8 00 00 00 00	 call	 _luaL_argerror
  000f5	8b 45 f0	 mov	 eax, DWORD PTR _len$[ebp]
  000f8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@utflen:
; Line 80
  000fb	8b 4d fc	 mov	 ecx, DWORD PTR _posj$2$[ebp]
  000fe	83 c6 ff	 add	 esi, -1
  00101	89 75 ec	 mov	 DWORD PTR _posj$1$[ebp], esi
  00104	83 d1 ff	 adc	 ecx, -1
  00107	89 4d fc	 mov	 DWORD PTR _posj$2$[ebp], ecx
  0010a	78 1b		 js	 SHORT $LN31@utflen
  0010c	7f 04		 jg	 SHORT $LN46@utflen
  0010e	3b f0		 cmp	 esi, eax
  00110	72 15		 jb	 SHORT $LN31@utflen
$LN46@utflen:
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@IINPNO@final?5position?5out?5of?5string?$AA@
  00117	6a 03		 push	 3
  00119	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0011c	e8 00 00 00 00	 call	 _luaL_argerror
  00121	8b 4d fc	 mov	 ecx, DWORD PTR _posj$2$[ebp]
  00124	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN31@utflen:
; Line 81
  00127	3b f9		 cmp	 edi, ecx
  00129	0f 8f d4 00 00
	00		 jg	 $LN54@utflen
  0012f	7c 0f		 jl	 SHORT $LL3@utflen
  00131	3b de		 cmp	 ebx, esi
  00133	0f 87 ca 00 00
	00		 ja	 $LN54@utflen
  00139	8d a4 24 00 00
	00 00		 npad	 7
$LL3@utflen:
; Line 82
  00140	8b 55 e4	 mov	 edx, DWORD PTR _s$1$[ebp]
  00143	33 f6		 xor	 esi, esi
  00145	8d 3c 13	 lea	 edi, DWORD PTR [ebx+edx]
  00148	0f b6 1f	 movzx	 ebx, BYTE PTR [edi]
  0014b	81 fb 80 00 00
	00		 cmp	 ebx, 128		; 00000080H
  00151	72 55		 jb	 SHORT $LN27@utflen
  00153	33 d2		 xor	 edx, edx
  00155	f6 c3 40	 test	 bl, 64			; 00000040H
  00158	74 26		 je	 SHORT $LN25@utflen
  0015a	8d 9b 00 00 00
	00		 npad	 6
$LL26@utflen:
  00160	0f b6 4c 3a 01	 movzx	 ecx, BYTE PTR [edx+edi+1]
  00165	42		 inc	 edx
  00166	8b c1		 mov	 eax, ecx
  00168	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  0016d	3c 80		 cmp	 al, -128		; ffffff80H
  0016f	75 66		 jne	 SHORT $LN34@utflen
  00171	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00174	c1 e6 06	 shl	 esi, 6
  00177	03 db		 add	 ebx, ebx
  00179	0b f1		 or	 esi, ecx
  0017b	f6 c3 40	 test	 bl, 64			; 00000040H
  0017e	75 e0		 jne	 SHORT $LL26@utflen
$LN25@utflen:
  00180	83 e3 7f	 and	 ebx, 127		; 0000007fH
  00183	8d 0c 92	 lea	 ecx, DWORD PTR [edx+edx*4]
  00186	d3 e3		 shl	 ebx, cl
  00188	0b f3		 or	 esi, ebx
  0018a	83 fa 03	 cmp	 edx, 3
  0018d	7f 48		 jg	 SHORT $LN34@utflen
  0018f	81 fe ff ff 10
	00		 cmp	 esi, 1114111		; 0010ffffH
  00195	77 40		 ja	 SHORT $LN34@utflen
  00197	3b 34 95 00 00
	00 00		 cmp	 esi, DWORD PTR ?limits@?1??utf8_decode@@9@9[edx*4]
  0019e	76 37		 jbe	 SHORT $LN34@utflen
  001a0	8b 4d fc	 mov	 ecx, DWORD PTR _posj$2$[ebp]
  001a3	03 fa		 add	 edi, edx
  001a5	8b 55 e4	 mov	 edx, DWORD PTR _s$1$[ebp]
$LN27@utflen:
  001a8	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; Line 83
  001ab	85 c0		 test	 eax, eax
  001ad	74 28		 je	 SHORT $LN34@utflen
; Line 88
  001af	2b c2		 sub	 eax, edx
  001b1	99		 cdq
  001b2	8b d8		 mov	 ebx, eax
  001b4	8b c2		 mov	 eax, edx
; Line 89
  001b6	8b 55 e0	 mov	 edx, DWORD PTR _n$1$[ebp]
  001b9	42		 inc	 edx
  001ba	89 5d f8	 mov	 DWORD PTR _posi$1$[ebp], ebx
  001bd	89 45 f4	 mov	 DWORD PTR _posi$2$[ebp], eax
  001c0	89 55 e0	 mov	 DWORD PTR _n$1$[ebp], edx
  001c3	3b c1		 cmp	 eax, ecx
  001c5	7f 3e		 jg	 SHORT $LN2@utflen
; Line 81
  001c7	0f 8c 73 ff ff
	ff		 jl	 $LL3@utflen
  001cd	3b 5d ec	 cmp	 ebx, DWORD PTR _posj$1$[ebp]
  001d0	77 33		 ja	 SHORT $LN2@utflen
  001d2	e9 69 ff ff ff	 jmp	 $LL3@utflen
$LN34@utflen:
; Line 84
  001d7	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  001da	53		 push	 ebx
  001db	e8 00 00 00 00	 call	 _lua_pushnil
; Line 85
  001e0	8b 45 f8	 mov	 eax, DWORD PTR _posi$1$[ebp]
  001e3	8b 4d f4	 mov	 ecx, DWORD PTR _posi$2$[ebp]
  001e6	83 c0 01	 add	 eax, 1
  001e9	83 d1 00	 adc	 ecx, 0
  001ec	51		 push	 ecx
  001ed	50		 push	 eax
  001ee	53		 push	 ebx
  001ef	e8 00 00 00 00	 call	 _lua_pushinteger
  001f4	83 c4 10	 add	 esp, 16			; 00000010H
; Line 86
  001f7	b8 02 00 00 00	 mov	 eax, 2
  001fc	5f		 pop	 edi
  001fd	5e		 pop	 esi
  001fe	5b		 pop	 ebx
; Line 93
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c3		 ret	 0
$LN54@utflen:
  00203	33 d2		 xor	 edx, edx
$LN2@utflen:
; Line 91
  00205	8b c2		 mov	 eax, edx
  00207	99		 cdq
  00208	52		 push	 edx
  00209	50		 push	 eax
  0020a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0020d	e8 00 00 00 00	 call	 _lua_pushinteger
  00212	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 92
  00215	b8 01 00 00 00	 mov	 eax, 1
  0021a	5f		 pop	 edi
  0021b	5e		 pop	 esi
  0021c	5b		 pop	 ebx
; Line 93
  0021d	8b e5		 mov	 esp, ebp
  0021f	5d		 pop	 ebp
  00220	c3		 ret	 0
_utflen	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _utf8_decode
_TEXT	SEGMENT
_o$ = 8							; size = 4
_val$ = 12						; size = 4
_utf8_decode PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 40
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; Line 42
  00006	8b 7d 08	 mov	 edi, DWORD PTR _o$[ebp]
; Line 44
  00009	33 d2		 xor	 edx, edx
  0000b	0f b6 1f	 movzx	 ebx, BYTE PTR [edi]
; Line 45
  0000e	81 fb 80 00 00
	00		 cmp	 ebx, 128		; 00000080H
  00014	73 04		 jae	 SHORT $LN8@utf8_decod
; Line 46
  00016	8b d3		 mov	 edx, ebx
; Line 47
  00018	eb 49		 jmp	 SHORT $LN7@utf8_decod
$LN8@utf8_decod:
; Line 48
  0001a	33 f6		 xor	 esi, esi
; Line 49
  0001c	f6 c3 40	 test	 bl, 64			; 00000040H
  0001f	74 20		 je	 SHORT $LN5@utf8_decod
$LL6@utf8_decod:
; Line 50
  00021	0f b6 4c 3e 01	 movzx	 ecx, BYTE PTR [esi+edi+1]
  00026	46		 inc	 esi
; Line 51
  00027	8b c1		 mov	 eax, ecx
  00029	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  0002e	3c 80		 cmp	 al, -128		; ffffff80H
  00030	75 42		 jne	 SHORT $LN2@utf8_decod
; Line 53
  00032	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00035	c1 e2 06	 shl	 edx, 6
; Line 54
  00038	03 db		 add	 ebx, ebx
  0003a	0b d1		 or	 edx, ecx
  0003c	f6 c3 40	 test	 bl, 64			; 00000040H
  0003f	75 e0		 jne	 SHORT $LL6@utf8_decod
$LN5@utf8_decod:
; Line 56
  00041	83 e3 7f	 and	 ebx, 127		; 0000007fH
  00044	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  00047	d3 e3		 shl	 ebx, cl
  00049	0b d3		 or	 edx, ebx
; Line 57
  0004b	83 fe 03	 cmp	 esi, 3
  0004e	7f 24		 jg	 SHORT $LN2@utf8_decod
  00050	81 fa ff ff 10
	00		 cmp	 edx, 1114111		; 0010ffffH
  00056	77 1c		 ja	 SHORT $LN2@utf8_decod
  00058	3b 14 b5 00 00
	00 00		 cmp	 edx, DWORD PTR ?limits@?1??utf8_decode@@9@9[esi*4]
  0005f	76 13		 jbe	 SHORT $LN2@utf8_decod
; Line 59
  00061	03 fe		 add	 edi, esi
$LN7@utf8_decod:
; Line 61
  00063	8b 45 0c	 mov	 eax, DWORD PTR _val$[ebp]
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN1@utf8_decod
  0006a	89 10		 mov	 DWORD PTR [eax], edx
$LN1@utf8_decod:
; Line 62
  0006c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
; Line 63
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN2@utf8_decod:
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
; Line 58
  00076	33 c0		 xor	 eax, eax
  00078	5b		 pop	 ebx
; Line 63
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_utf8_decode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _u_posrelat
_TEXT	SEGMENT
_pos$ = 8						; size = 8
_len$ = 16						; size = 4
_u_posrelat PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 30
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 31
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pos$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR _pos$[ebp+4]
  0000a	85 ff		 test	 edi, edi
  0000c	7c 0d		 jl	 SHORT $LN4@u_posrelat
  0000e	7f 04		 jg	 SHORT $LN7@u_posrelat
  00010	85 c9		 test	 ecx, ecx
  00012	72 07		 jb	 SHORT $LN4@u_posrelat
$LN7@u_posrelat:
  00014	8b d7		 mov	 edx, edi
  00016	8b c1		 mov	 eax, ecx
  00018	5f		 pop	 edi
; Line 34
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN4@u_posrelat:
; Line 32
  0001b	8b c1		 mov	 eax, ecx
  0001d	56		 push	 esi
  0001e	8b 75 10	 mov	 esi, DWORD PTR _len$[ebp]
  00021	f7 d8		 neg	 eax
  00023	3b c6		 cmp	 eax, esi
  00025	76 08		 jbe	 SHORT $LN2@u_posrelat
  00027	5e		 pop	 esi
  00028	33 c0		 xor	 eax, eax
  0002a	33 d2		 xor	 edx, edx
  0002c	5f		 pop	 edi
; Line 34
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN2@u_posrelat:
; Line 33
  0002f	33 d2		 xor	 edx, edx
  00031	03 f1		 add	 esi, ecx
  00033	13 d7		 adc	 edx, edi
  00035	83 c6 01	 add	 esi, 1
  00038	8b c6		 mov	 eax, esi
  0003a	5e		 pop	 esi
  0003b	83 d2 00	 adc	 edx, 0
  0003e	5f		 pop	 edi
; Line 34
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_u_posrelat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaopen_utf8
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaopen_utf8 PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 250
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 251
  00003	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405bc00000000000
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000f	68 88 00 00 00	 push	 136			; 00000088H
  00014	83 ec 08	 sub	 esp, 8
  00017	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _luaL_checkversion_
  00022	6a 06		 push	 6
  00024	6a 00		 push	 0
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _lua_createtable
  0002c	6a 00		 push	 0
  0002e	68 00 00 00 00	 push	 OFFSET _funcs
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _luaL_setfuncs
; Line 252
  00039	6a 0e		 push	 14			; 0000000eH
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NELPIPKN@?$FL?$AA?9?$HP?B?9?t?$FN?$FL?$IA?9?$LP?$FN?$CK?$AA@
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 _lua_pushlstring
; Line 253
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GMACFGDH@charpattern?$AA@
  0004b	6a fe		 push	 -2			; fffffffeH
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 _lua_setfield
  00053	83 c4 40	 add	 esp, 64			; 00000040H
; Line 254
  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	5e		 pop	 esi
; Line 255
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_luaopen_utf8 ENDP
_TEXT	ENDS
END
