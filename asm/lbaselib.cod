; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_____Description_chs
PUBLIC	??_C@_0DHO@IPDEENOO@Lua?J?G?R?$LL?$LI?v?P?$KB?G?I?$LF?D?$LN?E?$LB?$LO?S?o?Q?T?$KB?$KD?J?G?$LA?M?N?w?$MA@ ; `string'
PUBLIC	_____Description_eng
PUBLIC	??_C@_0FFL@EBMBOIJP@Lua?5is?5a?5small?5scripting?5languag@ ; `string'
PUBLIC	_luaB_authors
PUBLIC	_luaB_clear
PUBLIC	_luaB_exit
PUBLIC	_luaB_getDescription
PUBLIC	_luaB_help
PUBLIC	_luaB_usage
PUBLIC	_luaB_version
PUBLIC	_luaB_ztest
PUBLIC	??_C@_08FNIIFOJC@tostring?$AA@			; `string'
PUBLIC	??_C@_04PEGFANN@stop?$AA@			; `string'
PUBLIC	??_C@_07LDHOHMPD@restart?$AA@			; `string'
PUBLIC	??_C@_07JHIJCABF@collect?$AA@			; `string'
PUBLIC	??_C@_05IOMEMJEC@count?$AA@			; `string'
PUBLIC	??_C@_04CNBNFAL@step?$AA@			; `string'
PUBLIC	??_C@_08ONFIAENP@setpause?$AA@			; `string'
PUBLIC	??_C@_0L@KABEJKKP@setstepmul?$AA@		; `string'
PUBLIC	??_C@_09JCKLCKIH@isrunning?$AA@			; `string'
PUBLIC	??_C@_06GMEIIFFN@assert?$AA@			; `string'
PUBLIC	??_C@_07DBBPHNDK@authors?$AA@			; `string'
PUBLIC	??_C@_0P@CKFEAJJE@collectgarbage?$AA@		; `string'
PUBLIC	??_C@_05MEHLAELG@clear?$AA@			; `string'
PUBLIC	??_C@_03LCPHGAHP@cls?$AA@			; `string'
PUBLIC	??_C@_0M@PPJNHBMP@description?$AA@		; `string'
PUBLIC	??_C@_04EBPADADD@desc?$AA@			; `string'
PUBLIC	??_C@_06ONNDGCDK@dofile?$AA@			; `string'
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	??_C@_04MKNBDEPB@exit?$AA@			; `string'
PUBLIC	??_C@_0N@LGLOEPAG@getmetatable?$AA@		; `string'
PUBLIC	??_C@_04PCJFHION@help?$AA@			; `string'
PUBLIC	??_C@_06MGIEFEAJ@ipairs?$AA@			; `string'
PUBLIC	??_C@_08BNNFLGCJ@loadfile?$AA@			; `string'
PUBLIC	??_C@_04EONOHKEP@load?$AA@			; `string'
PUBLIC	??_C@_0L@BBBJLLLK@loadstring?$AA@		; `string'
PUBLIC	??_C@_04CJGEDOF@next?$AA@			; `string'
PUBLIC	??_C@_05PEAECDOC@pairs?$AA@			; `string'
PUBLIC	??_C@_05JAJCNIIJ@pcall?$AA@			; `string'
PUBLIC	??_C@_05IJDJACGD@print?$AA@			; `string'
PUBLIC	??_C@_08LCBKMMAG@rawequal?$AA@			; `string'
PUBLIC	??_C@_06FFKMAGPK@rawlen?$AA@			; `string'
PUBLIC	??_C@_06DCIAHLCA@rawget?$AA@			; `string'
PUBLIC	??_C@_06ONPLLLOI@rawset?$AA@			; `string'
PUBLIC	??_C@_06LGNCCACI@select?$AA@			; `string'
PUBLIC	??_C@_0N@MCAAIDEK@setmetatable?$AA@		; `string'
PUBLIC	??_C@_08JOIMPOJO@tonumber?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_05HNCIIKBA@usage?$AA@			; `string'
PUBLIC	??_C@_07CPCPJPKL@version?$AA@			; `string'
PUBLIC	??_C@_06GDLLDIBI@xpcall?$AA@			; `string'
PUBLIC	??_C@_05PJMKFLDO@ztest?$AA@			; `string'
PUBLIC	??_C@_02NIGGJGKC@_G?$AA@			; `string'
PUBLIC	??_C@_08PMLCGGEP@_VERSION?$AA@			; `string'
PUBLIC	??_C@_0KO@JANFHFAH@?H?g?$LJ?$PL?F?d?$LC?N?J?$PN?5v?5?$LF?D?V?$LF?N?$KK?$LM?Y?$KD?$KInil?5?$LL?r?5fa@ ; `string'
PUBLIC	??_C@_0BG@EMONHILO@?O?T?J?$LOlua?$LK?K?P?D?$LP?b?H?m?$LM?$PO?W?w?U?$NP?$AA@ ; `string'
PUBLIC	??_C@_0BLJ@JAGMBHNF@?$MA?$KM?$LL?x?$LL?X?J?U?5?6?5?$CCstop?$CC?3?5?M?$KD?V?$LJ?$MA?$KM?$LL?x?$LL?X?J?U?$KB@ ; `string'
PUBLIC	??_C@_0BB@DLNNKEPM@?G?e?$LD?$PN?$LF?$LB?G?$LA?F?A?D?$LL?D?Z?H?$NN?$AA@ ; `string'
PUBLIC	??_C@_0BO@DIDGHNKN@?G?e?$LD?$PN?$LF?$LB?G?$LA?F?A?D?$LL?D?Z?H?$NN?$KD?$KM?S?kclear?R?$LL?Q?y?$AA@ ; `string'
PUBLIC	??_C@_0CM@BKHIOMOH@?$LE?r?$LP?$KK?$LI?C?C?$PL?W?V?$LF?D?N?D?$LM?$PO?$KD?$KM?$LC?$KC?V?$LE?P?P?N?D?$LM?$PO?V?P?$LF?D@ ; `string'
PUBLIC	??_C@_0CO@MGGLOCON@?V?U?V?$LJ?K?y?$LB?$KD?$LL?$KE?$LF?D?$LK?$KP?J?$PN?$KD?$KM?E?W?$LD?v?5message?5?O@ ; `string'
PUBLIC	??_C@_08ECHOJKFB@?M?K?$LD?v?$LL?$LH?$LO?$LD?$AA@ ; `string'
PUBLIC	??_C@_06EDAGHKOI@gcinfo?$AA@			; `string'
PUBLIC	??_C@_0L@HMHBHHNF@?$LL?q?H?$KBgc?P?E?O?$KC?$AA@	; `string'
PUBLIC	??_C@_0FI@LNEDBPAH@?H?g?$LJ?$PL?$LG?T?O?s?C?$LL?S?P?T?$KK?$LB?m?$KD?$KM?$LH?$LF?$LL?X?$LP?U?$KD?$LL?H?g?$LJ?$PL?$LG?T@ ; `string'
PUBLIC	??_C@_08ENPOPECB@?O?T?J?$LO?$LA?o?V?z?$AA@	; `string'
PUBLIC	??_C@_0GD@BCHKILID@?$LH?$LF?$LL?X?H?$PN?$LI?v?V?$LF?$KD?$LK?$LF?$PM?$LE?z?F?w?$KB?$KC?$LE?$KL?H?k?$LF?D?$LB?m?5t?$KB?$KC@ ; `string'
PUBLIC	??_C@_0DJ@FJIPOJKF@?$LE?S?N?D?$LM?$PO?V?P?$LL?q?H?$KB?$LE?z?B?k?$LP?i?$KD?$KM?H?g?$LJ?$PL?C?$LL?S?P?V?$LI?$LG?$KI@ ; `string'
PUBLIC	??_C@_0BFP@JCAMCHOC@?M?$KI?$LJ?$PN?$LE?$KL?H?k?$LK?$KP?J?$PN?5func?5?$LF?D?$LH?$LF?$LL?X?V?$LF?$LL?q?H?$KB?$LE?z@ ; `string'
PUBLIC	??_C@_0CL@KDEJAEID@?S?k?5load?5?$MA?$OA?K?F?$KD?$KM?V?$LL?$LC?$LL?$LJ?$PN?J?G?$LE?S?W?V?$LH?$PL?$LE?$KO?V?P@ ; `string'
PUBLIC	??_C@_0BL@PBNINAND@?$LH?$LF?$LL?X?$LE?$KL?H?k?$LF?D?$LB?m?V?P?O?B?R?$LL?$LI?v?$LM?$PM?V?$LF?$LG?T?$AA@ ; `string'
PUBLIC	??_C@_0LM@CCOODELD@?R?T?$LB?$KD?$LL?$KE?D?$KD?J?$LN?$LF?w?S?C?$LE?$KL?H?k?$LF?D?$LK?$KP?J?$PN?$KD?$KM?R?$LC?$LO?M?J?G@ ; `string'
PUBLIC	??_C@_0FN@GIFILDMN@?$LN?v?W?w?N?$KK?$LP?l?K?Y?$LC?i?$LP?$LE?D?$LD?$LI?v?V?$LF?$LF?D?$LJ?$KE?$LO?$NP?$KD?$KM?$LC?$LL?S?C@ ; `string'
PUBLIC	??_C@_0HD@KAAICMEO@?R?T?5raw?5?W?w?N?$KK?G?$LA?W?$LK?$LF?D?$LK?$KP?J?$PN?$LO?y?$LB?m?J?$LO?$LI?C?$LH?$LN?$LH@ ; `string'
PUBLIC	??_C@_0EK@HOOBFFHD@?$LL?q?H?$KB?5table?5?V?P?$LM?$PM?5index?5?$LF?D?$LJ?X?A?$KK?V?$LF?$KD?$KM@ ; `string'
PUBLIC	??_C@_0HL@JIGMHII@?$LN?$KL?5table?$FLindex?$FN?5?$LF?D?V?$LF?I?h?V?C?N?$KK?5value@ ; `string'
PUBLIC	??_C@_0KI@BKGLFMBF@index?5?$LP?I?R?T?J?G?J?$PN?W?V?$LL?r?U?$NP?W?V?$LH?$PL?5?8?$CD?8?5?$KB?$KD?$LF@ ; `string'
PUBLIC	??_C@_0JI@CGNAGBNM@?$LI?x?5table?5?$LJ?X?A?$KK?T?$KK?$LB?m?5metatable?5?$KB?$KD?$LH?$LF@ ; `string'
PUBLIC	??_C@_0ML@FKNGDJCH@?5?$LD?$KC?J?T?$LA?Q?5e?5?$KD?$KI?$LF?Z?R?$LL?$LC?N?J?$PN?$KD?$KJ?W?$KK?$LL?$LL?N?$KK?J?$KO?$LN?x@ ; `string'
PUBLIC	??_C@_0LH@BPMOIOAF@?D?$NM?$LN?$KL?H?N?R?b?$MA?$OA?P?M?$LF?D?V?$LF?W?$KK?$LL?$LL?N?$KK?$LK?O?J?J?$LF?D?W?V?$LH?$PL@ ; `string'
PUBLIC	??_C@_0JD@IBGGALMK@?$LH?$LF?$LL?X?5v?5?$LF?D?$MA?$OA?P?M?$KD?$KM?$MA?$OA?P?M?R?T?W?V?$LH?$PL?$LE?$KO?P?N?J?$LN?$LH@ ; `string'
PUBLIC	??_C@_06FIONAGJL@unpack?$AA@			; `string'
PUBLIC	??_C@_0EK@NGIAAGBN@?$LH?$LF?$LL?X?$LB?m?V?P?$LF?D?$LI?w?$LI?v?S?r?$LF?D?V?$LF?0?$LF?H?$LM?$NL?S?Z?$KD?$LK?6?5r@ ; `string'
PUBLIC	??_C@_0M@PFJHOPOH@?O?T?J?$LOlua?$LA?o?V?z?$AA@	; `string'
PUBLIC	??_C@_0O@EHKFACGH@?O?T?J?$LOlua?$LA?f?$LB?$LO?$LK?E?$AA@ ; `string'
PUBLIC	??_C@_0IK@CAPLCHMD@?S?k?5pcall?5?$CIf?0?5arg1?0?5?4?4?4?$CJ?5?$MA?$OA?K?F?$KB?$KD?$LC?$LL@ ; `string'
PUBLIC	??_C@_08IMDOEIMN@?T?$NN?N?$NO?N?D?$LF?$LF?$AA@	; `string'
PUBLIC	??_C@_0BAL@KMFOEKGD@?5Si?5la?5valeur?5de?5ses?5param?$KI?$KItres@ ; `string'
PUBLIC	??_C@_0DC@CDPJFCGL@?5Biblioth?$KI?$KIque?5centrale?5de?5logic@ ; `string'
PUBLIC	??_C@_0DGC@IPAKCGAD@?5Recyclage?5d?8ordures?5?6?5?$CCStop?$CC?3?5a@ ; `string'
PUBLIC	??_C@_0CG@FJGBEIFH@?5Efface?5le?5contenu?5d?8?$KI?$KGcran?5actu@ ; `string'
PUBLIC	??_C@_0DE@JICLAMHJ@?5Efface?5le?5contenu?5d?8?$KI?$KGcran?5actu@ ; `string'
PUBLIC	??_C@_0FL@FAJHGOBG@?5Ouvrir?5un?5fichier?5pour?5le?5nom?5d@ ; `string'
PUBLIC	??_C@_0EP@PIJCBEIB@?5La?5fonction?5de?5protection?5de?5fi@ ; `string'
PUBLIC	??_C@_0CA@FGHNAFKD@?5Le?5retrait?5de?5l?8environnement?4?$AA@ ; `string'
PUBLIC	??_C@_0CI@NALIMHDF@?5Pour?5acqu?$KI?$KGrir?5des?5informations@ ; `string'
PUBLIC	??_C@_0LJ@FGEIIAGN@Si?5l?8objet?5n?8a?5pas?5d?8?$KI?$KGl?$KI?$KGment?5d@ ; `string'
PUBLIC	??_C@_0BF@CJGBKPP@?5L?8affichage?5d?8aide?4?$AA@ ; `string'
PUBLIC	??_C@_0JO@JADFJLCG@?5Le?5retour?5de?5trois?5valeurs?3?5des@ ; `string'
PUBLIC	??_C@_0HC@JGJODJKM@?$DP?5partir?5d?8un?5fichier?5d?8un?5bloc?5@ ; `string'
PUBLIC	??_C@_0CMD@IPDNPDKH@?5En?5fonction?5de?5la?5valeur?5de?5ret@ ; `string'
PUBLIC	??_C@_0EP@ILNELIKM@?5Et?5de?5charge?5similaires?0?5mais?5d@ ; `string'
PUBLIC	??_C@_0DH@GLINNKKE@?5Renvoie?5une?5table?5en?5entrant?5un@ ; `string'
PUBLIC	??_C@_0BGK@CNELNDDM@?5En?5fonction?5de?5modes?5de?5protect@ ; `string'
PUBLIC	??_C@_0KE@GDPEMNBN@?5Uniquement?5comme?5un?5outil?5de?5v?$KI@ ; `string'
PUBLIC	??_C@_0NG@LLAAJDGI@?5En?5fonction?5de?5brut?5comme?5pr?$KI?$KGf@ ; `string'
PUBLIC	??_C@_0HK@FGIOHHAI@?5Association?5de?5valeurs?5de?5cl?$KI?$KG?5@ ; `string'
PUBLIC	??_C@_0MG@BGPJEELN@?5La?5valeur?5de?5table?5?$FLindex?$FN?5agen@ ; `string'
PUBLIC	??_C@_0BAI@LLPMMAEH@?5Index?5peuvent?5?$KI?$LKtre?5des?5nombres@ ; `string'
PUBLIC	??_C@_0PO@FHCMBDIA@?5Une?5table?5d?8?$KI?$KGl?$KI?$KGments?5?$KI?$KE?5Assoc@ ; `string'
PUBLIC	??_C@_0BIG@GOLMNLDL@?5Essayer?5de?5mettre?5e?5?$CIpremier?5pa@ ; `string'
PUBLIC	??_C@_0BIE@IGMKAOCN@?5Peut?5?$KI?$LKtre?5tout?5type?5de?5convers@ ; `string'
PUBLIC	??_C@_0LN@LBNHJOBO@?5Type?5de?5retour?5de?5type?5V?0?5sous?5@ ; `string'
PUBLIC	??_C@_0HG@JGIEAADH@?5Valeur?5de?5retour?5dans?5la?5table?0@ ; `string'
PUBLIC	??_C@_0BG@NBIOKOFO@?5Afficher?5l?8aide?5lua?4?$AA@ ; `string'
PUBLIC	??_C@_0CE@PGJELJLM@?5Affiche?5le?5num?$KI?$KGro?5de?5version?5l@ ; `string'
PUBLIC	??_C@_0NI@EGNKKADN@?5Et?5pcall?5F?0?5ARG1?0?4?4?4?$CJ?5similaire@ ; `string'
PUBLIC	??_C@_0BC@OHKCJLJF@?5Pas?5de?5document?4?$AA@	; `string'
PUBLIC	??_C@_0PL@PPGPJAOF@?5If?5the?5value?5of?5the?5parameter?5V@ ; `string'
PUBLIC	??_C@_0CL@EGPKEPDF@?5Display?5Lua?5core?5library?5softwa@ ; `string'
PUBLIC	??_C@_0CLG@MHPOFKFP@?5Garbage?5collection?5?6?5?$CCstop?$CC?3sto@ ; `string'
PUBLIC	??_C@_0CD@GIFDFOKH@?5Clear?5the?5current?5screen?5conten@ ; `string'
PUBLIC	??_C@_0DM@FOIOOHIH@?5Clear?5the?5contents?5of?5the?5curre@ ; `string'
PUBLIC	??_C@_0EJ@DGJFFBHF@?5Open?5the?5file?5with?5the?5name?5and@ ; `string'
PUBLIC	??_C@_0FC@EOKDBHAL@?5Terminates?5the?5protected?5functi@ ; `string'
PUBLIC	??_C@_0BD@PJKNDGCE@?5Exit?5environment?4?$AA@	; `string'
PUBLIC	??_C@_0BF@MHOHDPLO@?5Get?5GC?5information?4?$AA@ ; `string'
PUBLIC	??_C@_0LO@DNFGBCFA@?5If?5the?5object?5does?5not?5have?5a?5m@ ; `string'
PUBLIC	??_C@_0P@LLHOPFNO@?5Display?5help?4?$AA@	; `string'
PUBLIC	??_C@_0KM@JGBEJALH@?5Returns?5three?5values?3?5the?5itera@ ; `string'
PUBLIC	??_C@_0FN@KPBHGFLD@?5Gets?5the?5code?5block?5from?5the?5fi@ ; `string'
PUBLIC	??_C@_0CJJ@GDHFJCG@?5Gets?5a?5block?5of?5code?5fragments?5@ ; `string'
PUBLIC	??_C@_0DI@GMENKGGP@?5Like?5load?0?5it?8s?5just?5getting?5co@ ; `string'
PUBLIC	??_C@_0DG@HFJGEFJL@?5Returns?5the?5next?5key?5key?5pair?5i@ ; `string'
PUBLIC	??_C@_0BCK@BOCGOANJ@?5Call?5the?5incoming?5function?5in?5p@ ; `string'
PUBLIC	??_C@_0IK@GDKDFCKG@?5As?5a?5tool?5for?5quickly?5looking?5a@ ; `string'
PUBLIC	??_C@_0LF@PKNDHPCC@?5Functions?5that?5use?5raw?5as?5a?5pre@ ; `string'
PUBLIC	??_C@_0HO@HGCBPGHB@?5Gets?5the?5associated?5value?5of?5th@ ; `string'
PUBLIC	??_C@_0JE@BFCHJBJB@?5Set?5the?5value?5of?5table?$FLindex?$FN?5t@ ; `string'
PUBLIC	??_C@_0PD@CBLGHCJO@?5Index?5can?5be?5a?5number?5or?5charac@ ; `string'
PUBLIC	??_C@_0PO@NGGJNABH@?5Give?5the?5?$CCtable?$CC?5to?5associated?5@ ; `string'
PUBLIC	??_C@_0BFM@CFFEGNIJ@?5Try?5converting?5e?5?$CIfirst?5paramet@ ; `string'
PUBLIC	??_C@_0BBB@PJNMCJFP@?5Converts?5any?5type?5of?5value?5to?5t@ ; `string'
PUBLIC	??_C@_0LC@DPMGNINL@?5Returns?5the?5type?5of?5v?0?5and?5the?5@ ; `string'
PUBLIC	??_C@_0GO@DDDBPCFJ@Returns?5the?5value?5of?5each?5domain@ ; `string'
PUBLIC	??_C@_0BD@GMPIGENL@?5Display?5Lua?5help?4?$AA@	; `string'
PUBLIC	??_C@_0CB@NHLIKOMI@?5Display?5the?5Lua?5version?5number?4@ ; `string'
PUBLIC	??_C@_0OE@KLGOIKF@?5Similar?5to?5pcall?5?$CIF?0?5arg1?0?4?4?4?$CJ?4@ ; `string'
PUBLIC	??_C@_0O@KFENAANH@?5No?5document?4?$AA@		; `string'
PUBLIC	??_C@_03IBJHJIAF@lua?$AA@			; `string'
;	COMDAT ??_C@_03IBJHJIAF@lua?$AA@
CONST	SEGMENT
??_C@_03IBJHJIAF@lua?$AA@ DB 'lua', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KFENAANH@?5No?5document?4?$AA@
CONST	SEGMENT
??_C@_0O@KFENAANH@?5No?5document?4?$AA@ DB ' No document.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0OE@KLGOIKF@?5Similar?5to?5pcall?5?$CIF?0?5arg1?0?4?4?4?$CJ?4@
CONST	SEGMENT
??_C@_0OE@KLGOIKF@?5Similar?5to?5pcall?5?$CIF?0?5arg1?0?4?4?4?$CJ?4@ DB ' '
	DB	'Similar to pcall (F, arg1,...). The difference is that if the'
	DB	' F function throws an error, the xpcall does not return the e'
	DB	'rror information thrown from the f, but instead uses the erro'
	DB	'r information returned by the err function.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHLIKOMI@?5Display?5the?5Lua?5version?5number?4@
CONST	SEGMENT
??_C@_0CB@NHLIKOMI@?5Display?5the?5Lua?5version?5number?4@ DB ' Display t'
	DB	'he Lua version number.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GMPIGENL@?5Display?5Lua?5help?4?$AA@
CONST	SEGMENT
??_C@_0BD@GMPIGENL@?5Display?5Lua?5help?4?$AA@ DB ' Display Lua help.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GO@DDDBPCFJ@Returns?5the?5value?5of?5each?5domain@
CONST	SEGMENT
??_C@_0GO@DDDBPCFJ@Returns?5the?5value?5of?5each?5domain@ DB 'Returns the'
	DB	' value of each domain in the table, which is equivalent to: ', 0aH
	DB	', return, list[i], list[i+1], list[j]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0LC@DPMGNINL@?5Returns?5the?5type?5of?5v?0?5and?5the?5@
CONST	SEGMENT
??_C@_0LC@DPMGNINL@?5Returns?5the?5type?5of?5v?0?5and?5the?5@ DB ' Return'
	DB	's the type of v, and the type returns in string. There are ei'
	DB	'ght kinds of return values: " nil"," number", "string","boole'
	DB	'an", "table", " function", "thread", "userdata".', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BBB@PJNMCJFP@?5Converts?5any?5type?5of?5value?5to?5t@
CONST	SEGMENT
??_C@_0BBB@PJNMCJFP@?5Converts?5any?5type?5of?5value?5to?5t@ DB ' Convert'
	DB	's any type of value to the proper string type. To control the'
	DB	' conversion of numbers to strings, use string.format (FormatS'
	DB	'tring,...). ', 0aH, ' If the value associated with the meta t'
	DB	'able has the __tostring field, the string is obtained using t'
	DB	'he meta method of the field.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BFM@CFFEGNIJ@?5Try?5converting?5e?5?$CIfirst?5paramet@
CONST	SEGMENT
??_C@_0BFM@CFFEGNIJ@?5Try?5converting?5e?5?$CIfirst?5paramet@ DB ' Try co'
	DB	'nverting e (first parameter) to decimal value and return it. '
	DB	'Returns nil if it cannot be converted. ', 0aH, ' The base (se'
	DB	'cond arguments) represents the hexadecimal of the incoming pa'
	DB	'rameter, and defaults to 10. Parameter base has an input rang'
	DB	'e of [2, 36]. Letters higher than 10 are represented by lette'
	DB	'rs, and A - Z represent 11-35 respectively.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0PO@NGGJNABH@?5Give?5the?5?$CCtable?$CC?5to?5associated?5@
CONST	SEGMENT
??_C@_0PO@NGGJNABH@?5Give?5the?5?$CCtable?$CC?5to?5associated?5@ DB ' Giv'
	DB	'e the "table" to associated element table "metatable". Return'
	DB	' parameter table. ', 0aH, ' if the meta table defines the dom'
	DB	'ain, an error is thrown. ', 0aH, ' The metatable parameter (s'
	DB	'econd argument) is nil to indicate that the associated meta t'
	DB	'able has been lifted.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0PD@CBLGHCJO@?5Index?5can?5be?5a?5number?5or?5charac@
CONST	SEGMENT
??_C@_0PD@CBLGHCJO@?5Index?5can?5be?5a?5number?5or?5charac@ DB ' Index ca'
	DB	'n be a number or character''#''. When index is digital, param'
	DB	'eter returns the index + 1 Parameters and behind (support the'
	DB	' negative form of index); when index is''#'', returns the num'
	DB	'ber of parameters (not including the first parameter).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JE@BFCHJBJB@?5Set?5the?5value?5of?5table?$FLindex?$FN?5t@
CONST	SEGMENT
??_C@_0JE@BFCHJBJB@?5Set?5the?5value?5of?5table?$FLindex?$FN?5t@ DB ' Set'
	DB	' the value of table[index] to value. Table must be a table, a'
	DB	'nd index cannot be nil or NaN. Value can be any value. Return'
	DB	's the modified table.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0HO@HGCBPGHB@?5Gets?5the?5associated?5value?5of?5th@
CONST	SEGMENT
??_C@_0HO@HGCBPGHB@?5Gets?5the?5associated?5value?5of?5th@ DB ' Gets the '
	DB	'associated value of the key table in the index. The table par'
	DB	'ameter must be a table and cannot find the return nil.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LF@PKNDHPCC@?5Functions?5that?5use?5raw?5as?5a?5pre@
CONST	SEGMENT
??_C@_0LF@PKNDHPCC@?5Functions?5that?5use?5raw?5as?5a?5pre@ DB ' Function'
	DB	's that use raw as a prefix indicate that the method calls wit'
	DB	'hout triggering any meta methods. ', 0aH, ' Rawequal checks w'
	DB	'hether V1 is equal to V2 and returns a comparison result.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IK@GDKDFCKG@?5As?5a?5tool?5for?5quickly?5looking?5a@
CONST	SEGMENT
??_C@_0IK@GDKDFCKG@?5As?5a?5tool?5for?5quickly?5looking?5a@ DB ' As a too'
	DB	'l for quickly looking at a value, you do not have to format o'
	DB	'utput. For formal formatted output, see string.format and io.'
	DB	'write.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BCK@BOCGOANJ@?5Call?5the?5incoming?5function?5in?5p@
CONST	SEGMENT
??_C@_0BCK@BOCGOANJ@?5Call?5the?5incoming?5function?5in?5p@ DB ' Call the'
	DB	' incoming function in protected mode, that is, no errors are '
	DB	'thrown. If caught out of the error, the first parameter retur'
	DB	'ns false, the second parameter error information is returned;'
	DB	' if no error occurs, the first parameter returns ture, behind'
	DB	' the returned value to a function parameter.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@HFJGEFJL@?5Returns?5the?5next?5key?5key?5pair?5i@
CONST	SEGMENT
??_C@_0DG@HFJGEFJL@?5Returns?5the?5next?5key?5key?5pair?5i@ DB ' Returns '
	DB	'the next key key pair in the incoming table.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@GMENKGGP@?5Like?5load?0?5it?8s?5just?5getting?5co@
CONST	SEGMENT
??_C@_0DI@GMENKGGP@?5Like?5load?0?5it?8s?5just?5getting?5co@ DB ' Like lo'
	DB	'ad, it''s just getting code blocks from strings.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJJ@GDHFJCG@?5Gets?5a?5block?5of?5code?5fragments?5@
CONST	SEGMENT
??_C@_0CJJ@GDHFJCG@?5Gets?5a?5block?5of?5code?5fragments?5@ DB ' Gets a b'
	DB	'lock of code fragments through the return value of the incomi'
	DB	'ng function func. The string returned by the subsequent call '
	DB	'of the func function should be able to link to the string ret'
	DB	'urned from the previous call and eventually get the complete '
	DB	'block of code. When the function returns nil or returns no va'
	DB	'lue, it indicates the end of the block.  ', 0aH, ' The load f'
	DB	'unction returns the resulting block of code as a function. Th'
	DB	'e environment that returns the function is the global environ'
	DB	'ment. If an error occurs, load returns the nil and error mess'
	DB	'ages. ', 0aH, ' Chunkname is used as the name of the block of'
	DB	' code and is used in error information and debug information.'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@KPBHGFLD@?5Gets?5the?5code?5block?5from?5the?5fi@
CONST	SEGMENT
??_C@_0FN@KPBHGFLD@?5Gets?5the?5code?5block?5from?5the?5fi@ DB ' Gets the'
	DB	' code block from the file. If no file is specified, get it fr'
	DB	'om the standard input.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0KM@JGBEJALH@?5Returns?5three?5values?3?5the?5itera@
CONST	SEGMENT
??_C@_0KM@JGBEJALH@?5Returns?5three?5values?3?5the?5itera@ DB ' Returns t'
	DB	'hree values: the iterator, the incoming table t, and the valu'
	DB	'e 0. The iterator can obtain the values of i+1 and t[i+1] bas'
	DB	'ed on the incoming table t and index i.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LLHOPFNO@?5Display?5help?4?$AA@
CONST	SEGMENT
??_C@_0P@LLHOPFNO@?5Display?5help?4?$AA@ DB ' Display help.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LO@DNFGBCFA@?5If?5the?5object?5does?5not?5have?5a?5m@
CONST	SEGMENT
??_C@_0LO@DNFGBCFA@?5If?5the?5object?5does?5not?5have?5a?5m@ DB ' If the '
	DB	'object does not have a meta table, it returns empty; if the o'
	DB	'bject has a __metatable field, the corresponding value is ret'
	DB	'urned; otherwise, the meta table of the object is returned.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MHOHDPLO@?5Get?5GC?5information?4?$AA@
CONST	SEGMENT
??_C@_0BF@MHOHDPLO@?5Get?5GC?5information?4?$AA@ DB ' Get GC information.'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJKNDGCE@?5Exit?5environment?4?$AA@
CONST	SEGMENT
??_C@_0BD@PJKNDGCE@?5Exit?5environment?4?$AA@ DB ' Exit environment.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@EOKDBHAL@?5Terminates?5the?5protected?5functi@
CONST	SEGMENT
??_C@_0FC@EOKDBHAL@?5Terminates?5the?5protected?5functi@ DB ' Terminates '
	DB	'the protected function, throws the message message, and retur'
	DB	'ns none.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@DGJFFBHF@?5Open?5the?5file?5with?5the?5name?5and@
CONST	SEGMENT
??_C@_0EJ@DGJFFBHF@?5Open?5the?5file?5with?5the?5name?5and@ DB ' Open the'
	DB	' file with the name and execute the Lua code block in the fil'
	DB	'e.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@FOIOOHIH@?5Clear?5the?5contents?5of?5the?5curre@
CONST	SEGMENT
??_C@_0DM@FOIOOHIH@?5Clear?5the?5contents?5of?5the?5curre@ DB ' Clear the'
	DB	' contents of the current screen, just like clear.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GIFDFOKH@?5Clear?5the?5current?5screen?5conten@
CONST	SEGMENT
??_C@_0CD@GIFDFOKH@?5Clear?5the?5current?5screen?5conten@ DB ' Clear the '
	DB	'current screen content.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CLG@MHPOFKFP@?5Garbage?5collection?5?6?5?$CCstop?$CC?3sto@
CONST	SEGMENT
??_C@_0CLG@MHPOFKFP@?5Garbage?5collection?5?6?5?$CCstop?$CC?3sto@ DB ' Ga'
	DB	'rbage collection ', 0aH, ' "stop":stop garbage recycling. ', 0aH
	DB	' "restart": restart garbage collection. ', 0aH, ' "collect": '
	DB	'executes the full cycle of garbage collection. ', 0aH, ' "cou'
	DB	'nt": returns the total memory used by Lua (Kb). ', 0aH, '  "s'
	DB	'tep": perform a step (step by step composition) garbage colle'
	DB	'ction. The number of steps can be controlled by the parameter'
	DB	' Arg (the larger the number, the more steps, and the 0 indica'
	DB	'tes the execution step (the smallest step). If the recycle cy'
	DB	'cle is completed after execution, returns true. ', 0aH, ' "se'
	DB	'tpause": take Arg / 100 as the new value of the garbage colle'
	DB	'ction parameter pause. ', 0aH, ' "setstepmul": take Arg / 100'
	DB	' as the new value of the garbage collection parameter step mu'
	DB	'tiplier.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EGPKEPDF@?5Display?5Lua?5core?5library?5softwa@
CONST	SEGMENT
??_C@_0CL@EGPKEPDF@?5Display?5Lua?5core?5library?5softwa@ DB ' Display Lu'
	DB	'a core library software author.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0PL@PPGPJAOF@?5If?5the?5value?5of?5the?5parameter?5V@
CONST	SEGMENT
??_C@_0PL@PPGPJAOF@?5If?5the?5value?5of?5the?5parameter?5V@ DB ' If the v'
	DB	'alue of the parameter V is false (nil or false), it calls err'
	DB	'or; otherwise, all parameters are returned. In the error case'
	DB	', message refers to that error object; if this parameter is n'
	DB	'ot supplied, the parameter defaults to "assertion failed".', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OHKCJLJF@?5Pas?5de?5document?4?$AA@
CONST	SEGMENT
??_C@_0BC@OHKCJLJF@?5Pas?5de?5document?4?$AA@ DB ' Pas de document.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0NI@EGNKKADN@?5Et?5pcall?5F?0?5ARG1?0?4?4?4?$CJ?5similaire@
CONST	SEGMENT
??_C@_0NI@EGNKKADN@?5Et?5pcall?5F?0?5ARG1?0?4?4?4?$CJ?5similaire@ DB ' Et'
	DB	' pcall F, ARG1,...) similaires.C''est diff', 0a8H, 0a6H, 'ren'
	DB	't, si la fonction f lance une erreur, alors xpcall ne renvoie'
	DB	' des informations d''erreur de f jet', 0a8H, 0a6H, ', un mess'
	DB	'age d''erreur mais l''utilisation de la fonction renvoie Err.'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PGJELJLM@?5Affiche?5le?5num?$KI?$KGro?5de?5version?5l@
CONST	SEGMENT
??_C@_0CE@PGJELJLM@?5Affiche?5le?5num?$KI?$KGro?5de?5version?5l@ DB ' Aff'
	DB	'iche le num', 0a8H, 0a6H, 'ro de version lua.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NBIOKOFO@?5Afficher?5l?8aide?5lua?4?$AA@
CONST	SEGMENT
??_C@_0BG@NBIOKOFO@?5Afficher?5l?8aide?5lua?4?$AA@ DB ' Afficher l''aide '
	DB	'lua.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0HG@JGIEAADH@?5Valeur?5de?5retour?5dans?5la?5table?0@
CONST	SEGMENT
??_C@_0HG@JGIEAADH@?5Valeur?5de?5retour?5dans?5la?5table?0@ DB ' Valeur d'
	DB	'e retour dans la table, chaque domaine ', 0a8H, 0a6H, 'quival'
	DB	'ent ', 0a8H, 0a4H, ': ', 0aH, ' return List [i], liste [i + 1'
	DB	'], ', 0a1H, 0a4H, ' ', 0a1H, 0a4H, ' ', 0a1H, 0a4H, ', liste '
	DB	'[j]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0LN@LBNHJOBO@?5Type?5de?5retour?5de?5type?5V?0?5sous?5@
CONST	SEGMENT
??_C@_0LN@LBNHJOBO@?5Type?5de?5retour?5de?5type?5V?0?5sous?5@ DB ' Type d'
	DB	'e retour de type V, sous la forme d''une cha?ne de retour.Les'
	DB	' huit types de valeur de retour: "nil" ,  "number" , "string"'
	DB	' , "boolean" , "table" , "function" , "thread" , "userdata".', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BIE@IGMKAOCN@?5Peut?5?$KI?$LKtre?5tout?5type?5de?5convers@
CONST	SEGMENT
??_C@_0BIE@IGMKAOCN@?5Peut?5?$KI?$LKtre?5tout?5type?5de?5convers@ DB ' Pe'
	DB	'ut ', 0a8H, 0baH, 'tre tout type de conversion de la valeur d'
	DB	'e retour sous forme de cha?ne de caract', 0a8H, 0a8H, 'res ap'
	DB	'propri', 0a8H, 0a6H, '.Pour la commande de la conversion num', 0a8H
	DB	0a6H, 'rique de la forme d''une cha?ne de caract', 0a8H, 0a8H, 'r'
	DB	'es, ', 0a8H, 0a4H, ' l''aide de l'' string.format(formatstrin'
	DB	'g,...). n si les valeurs de corr', 0a8H, 0a6H, 'lation de la '
	DB	'table d''', 0a8H, 0a6H, 'l', 0a8H, 0a6H, 'ments a __tostring '
	DB	'de domaine, qui utilise le proc', 0a8H, 0a6H, 'd', 0a8H, 0a6H
	DB	' ', 0a8H, 0a4H, ' ', 0a8H, 0a6H, 'l', 0a8H, 0a6H, 'ments de d'
	DB	'omaine d''une cha?ne.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BIG@GOLMNLDL@?5Essayer?5de?5mettre?5e?5?$CIpremier?5pa@
CONST	SEGMENT
??_C@_0BIG@GOLMNLDL@?5Essayer?5de?5mettre?5e?5?$CIpremier?5pa@ DB ' Essay'
	DB	'er de mettre e (premier param', 0a8H, 0a8H, 'tre) pour conver'
	DB	'tir le nombre de d', 0a8H, 0a6H, 'cimales et de retour.Si vou'
	DB	's ne pouvez pas une transition revient ', 0a8H, 0a4H, ' z', 0a8H
	DB	0a6H, 'ro. n de base (un second param', 0a8H, 0a8H, 'tre) indi'
	DB	'quant des param', 0a8H, 0a8H, 'tres par d', 0a8H, 0a6H, 'faut'
	DB	' pour le binaire entrant, base 10.La base peut ', 0a8H, 0baH, 't'
	DB	're de la plage d''entr', 0a8H, 0a6H, 'e [2, 36].Sup', 0a8H, 0a6H
	DB	'rieure ', 0a8H, 0a4H, ' 10 chiffres par des lettres, a - Z re'
	DB	'pr', 0a8H, 0a6H, 'sentent respectivement 11 - 35.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0PO@FHCMBDIA@?5Une?5table?5d?8?$KI?$KGl?$KI?$KGments?5?$KI?$KE?5Assoc@
CONST	SEGMENT
??_C@_0PO@FHCMBDIA@?5Une?5table?5d?8?$KI?$KGl?$KI?$KGments?5?$KI?$KE?5Assoc@ DB ' '
	DB	'Une table d''', 0a8H, 0a6H, 'l', 0a8H, 0a6H, 'ments ', 0a8H, 0a4H
	DB	' Association de metatable.Param', 0a8H, 0a8H, 'tres de retour'
	DB	' de la table. n Si Yuan feuille d', 0a8H, 0a6H, 'finit __meta'
	DB	'table, lance une erreur.', 0aH, ' Cha?ne de param', 0a8H, 0a8H
	DB	'tres (deuxi', 0a8H, 0a8H, 'me param', 0a8H, 0a8H, 'tre) est n'
	DB	'ul de mat', 0a8H, 0a6H, 'riel d', 0a8H, 0a6H, 'j', 0a8H, 0a4H
	DB	' associ', 0a8H, 0a6H, ' ', 0a8H, 0a4H, ' la table d''', 0a8H, 0a6H
	DB	'l', 0a8H, 0a6H, 'ments.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BAI@LLPMMAEH@?5Index?5peuvent?5?$KI?$LKtre?5des?5nombres@
CONST	SEGMENT
??_C@_0BAI@LLPMMAEH@?5Index?5peuvent?5?$KI?$LKtre?5des?5nombres@ DB ' Ind'
	DB	'ex peuvent ', 0a8H, 0baH, 'tre des nombres ou caract', 0a8H, 0a8H
	DB	'res "#.Lorsqu''un index num', 0a8H, 0a6H, 'rique, les param', 0a8H
	DB	0a8H, 'tres de renvoyer un index + 1 de param', 0a8H, 0a8H, 't'
	DB	'res et ', 0a8H, 0a4H, ' l''arri', 0a8H, 0a8H, 're (index de s'
	DB	'outien n', 0a8H, 0a6H, 'gatif); lorsque l''#'' retour, le nom'
	DB	'bre de param', 0a8H, 0a8H, 'tres (non compris le premier para'
	DB	'm', 0a8H, 0a8H, 'tre).', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0MG@BGPJEELN@?5La?5valeur?5de?5table?5?$FLindex?$FN?5agen@
CONST	SEGMENT
??_C@_0MG@BGPJEELN@?5La?5valeur?5de?5table?5?$FLindex?$FN?5agen@ DB ' La '
	DB	'valeur de table [index] agenc', 0a8H, 0a6H, ' pour value.Une '
	DB	'table est une table, index ne peut pas ', 0a8H, 0baH, 'tre ni'
	DB	'l ou NaN.La valeur peut ', 0a8H, 0baH, 'tre n''importe quelle'
	DB	' valeur.De retour apr', 0a8H, 0a8H, 's la modification de la '
	DB	'table.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HK@FGIOHHAI@?5Association?5de?5valeurs?5de?5cl?$KI?$KG?5@
CONST	SEGMENT
??_C@_0HK@FGIOHHAI@?5Association?5de?5valeurs?5de?5cl?$KI?$KG?5@ DB ' Ass'
	DB	'ociation de valeurs de cl', 0a8H, 0a6H, ' d''index de table t'
	DB	'able de param', 0a8H, 0a8H, 'tres, doit ', 0a8H, 0baH, 'tre u'
	DB	'ne table, ne trouve pas de retour nil.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0NG@LLAAJDGI@?5En?5fonction?5de?5brut?5comme?5pr?$KI?$KGf@
CONST	SEGMENT
??_C@_0NG@LLAAJDGI@?5En?5fonction?5de?5brut?5comme?5pr?$KI?$KGf@ DB ' En '
	DB	'fonction de brut comme pr', 0a8H, 0a6H, 'fixe ont exprim', 0a8H
	DB	0a6H, ' le cas dans cette m', 0a8H, 0a6H, 'thode de d', 0a8H, 0a6H
	DB	'clenchement de toute yuan appel de proc', 0a8H, 0a6H, 'd', 0a8H
	DB	0a6H, '.V1 et V2 de v', 0a8H, 0a6H, 'rifier rawequal ', 0aH, ' '
	DB	'si ', 0a8H, 0a6H, 'gale, et renvoie le r', 0a8H, 0a6H, 'sulta'
	DB	't de la comparaison.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0KE@GDPEMNBN@?5Uniquement?5comme?5un?5outil?5de?5v?$KI@
CONST	SEGMENT
??_C@_0KE@GDPEMNBN@?5Uniquement?5comme?5un?5outil?5de?5v?$KI@ DB ' Unique'
	DB	'ment comme un outil de v', 0a8H, 0a6H, 'rification rapide d'''
	DB	'une valeur de pas faire de format de sortie.Voir string.forma'
	DB	't officiellement de format de sortie et io.write.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BGK@CNELNDDM@?5En?5fonction?5de?5modes?5de?5protect@
CONST	SEGMENT
??_C@_0BGK@CNELNDDM@?5En?5fonction?5de?5modes?5de?5protect@ DB ' En fonct'
	DB	'ion de modes de protection d''un appel entrant, c''est - ', 0a8H
	DB	0a4H, ' - dire ne lance une erreur.Si l''erreur de capture ', 0a8H
	DB	0a4H, ' la lance, le premier param', 0a8H, 0a8H, 'tre renvoie '
	DB	'false, le second param', 0a8H, 0a8H, 'tre renvoie un message '
	DB	'd''erreur; si aucune erreur, le premier param', 0a8H, 0a8H, 't'
	DB	're de temp', 0a8H, 0a6H, 'rature de true, derri', 0a8H, 0a8H, 'r'
	DB	'e les param', 0a8H, 0a8H, 'tres de retour entrant en fonction'
	DB	' de la valeur de retour.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GLINNKKE@?5Renvoie?5une?5table?5en?5entrant?5un@
CONST	SEGMENT
??_C@_0DH@GLINNKKE@?5Renvoie?5une?5table?5en?5entrant?5un@ DB ' Renvoie u'
	DB	'ne table en entrant une valeur de cl', 0a8H, 0a6H, ' pour.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@ILNELIKM@?5Et?5de?5charge?5similaires?0?5mais?5d@
CONST	SEGMENT
??_C@_0EP@ILNELIKM@?5Et?5de?5charge?5similaires?0?5mais?5d@ DB ' Et de ch'
	DB	'arge similaires, mais dans une cha?ne de blocs de code d''acq'
	DB	'uisition.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CMD@IPDNPDKH@?5En?5fonction?5de?5la?5valeur?5de?5ret@
CONST	SEGMENT
??_C@_0CMD@IPDNPDKH@?5En?5fonction?5de?5la?5valeur?5de?5ret@ DB ' En fonc'
	DB	'tion de la valeur de retour entrant pour obtenir des segments'
	DB	' de bloc de code de fonction.Cha?ne de func fonction apr', 0a8H
	DB	0a8H, 's une fois de retour d''appel devrait ', 0a8H, 0baH, 't'
	DB	're en mesure de cha?ne avant et une fois l''appel de retour r'
	DB	'eli', 0a8H, 0a6H, 's l''un ', 0a8H, 0a4H, ' l''autre, et, fin'
	DB	'alement, l''int', 0a8H, 0a6H, 'grit', 0a8H, 0a6H, ' du bloc d'
	DB	'e code.Lorsque la fonction de retour ', 0a8H, 0a4H, ' z', 0a8H
	DB	0a6H, 'ro ou non la valeur de retour dudit code fin de bloc. n'
	DB	' Load fonction sera de blocs de code en fonction de retour.Re'
	DB	'tour de l''environnement en fonction de l''environnement glob'
	DB	'al.Si une erreur se produit, load  des informations de retour'
	DB	' nil  et les erreurs.', 0aH, '  Chunkname  comme le nom de bl'
	DB	'ocs de code, utilis', 0a8H, 0a6H, ' dans des informations de '
	DB	'd', 0a8H, 0a6H, 'bogage et de fausses informations.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HC@JGJODJKM@?$DP?5partir?5d?8un?5fichier?5d?8un?5bloc?5@
CONST	SEGMENT
??_C@_0HC@JGJODJKM@?$DP?5partir?5d?8un?5fichier?5d?8un?5bloc?5@ DB '? par'
	DB	'tir d''un fichier d''un bloc de code, s''il n''y a pas de fic'
	DB	'hier sp', 0a8H, 0a6H, 'cifi', 0a8H, 0a6H, ', ', 0a8H, 0a4H, ' '
	DB	'partir de l''entr', 0a8H, 0a6H, 'e standard d''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JO@JADFJLCG@?5Le?5retour?5de?5trois?5valeurs?3?5des@
CONST	SEGMENT
??_C@_0JO@JADFJLCG@?5Le?5retour?5de?5trois?5valeurs?3?5des@ DB ' Le retou'
	DB	'r de trois valeurs: des it', 0a8H, 0a6H, 'rateurs, tableau T,'
	DB	' pass', 0a8H, 0a6H, ' de valeur 0.Le g', 0a8H, 0a6H, 'n', 0a8H
	DB	0a6H, 'rateur selon I T et de la table d''index entrant la val'
	DB	'eur i+1 et t[i+1].', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CJGBKPP@?5L?8affichage?5d?8aide?4?$AA@
CONST	SEGMENT
??_C@_0BF@CJGBKPP@?5L?8affichage?5d?8aide?4?$AA@ DB ' L''affichage d''aid'
	DB	'e.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0LJ@FGEIIAGN@Si?5l?8objet?5n?8a?5pas?5d?8?$KI?$KGl?$KI?$KGment?5d@
CONST	SEGMENT
??_C@_0LJ@FGEIIAGN@Si?5l?8objet?5n?8a?5pas?5d?8?$KI?$KGl?$KI?$KGment?5d@ DB 'S'
	DB	'i l''objet n''a pas d''', 0a8H, 0a6H, 'l', 0a8H, 0a6H, 'ment '
	DB	'de table, de revenir ', 0a8H, 0a4H, ' vide; si l''objet a _ _'
	DB	' cha?ne de domaine correspondant ', 0a8H, 0a4H, ' la valeur d'
	DB	'e retour; sinon, retour des objets de la table d''', 0a8H, 0a6H
	DB	'l', 0a8H, 0a6H, 'ments.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NALIMHDF@?5Pour?5acqu?$KI?$KGrir?5des?5informations@
CONST	SEGMENT
??_C@_0CI@NALIMHDF@?5Pour?5acqu?$KI?$KGrir?5des?5informations@ DB ' Pour '
	DB	'acqu', 0a8H, 0a6H, 'rir des informations de GC.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FGHNAFKD@?5Le?5retrait?5de?5l?8environnement?4?$AA@
CONST	SEGMENT
??_C@_0CA@FGHNAFKD@?5Le?5retrait?5de?5l?8environnement?4?$AA@ DB ' Le ret'
	DB	'rait de l''environnement.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@PIJCBEIB@?5La?5fonction?5de?5protection?5de?5fi@
CONST	SEGMENT
??_C@_0EP@PIJCBEIB@?5La?5fonction?5de?5protection?5de?5fi@ DB ' La foncti'
	DB	'on de protection de fin de message, lance le message, pas de '
	DB	'retour.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@FAJHGOBG@?5Ouvrir?5un?5fichier?5pour?5le?5nom?5d@
CONST	SEGMENT
??_C@_0FL@FAJHGOBG@?5Ouvrir?5un?5fichier?5pour?5le?5nom?5d@ DB ' Ouvrir u'
	DB	'n fichier pour le nom de fichier, et de mettre en ?uvre dans '
	DB	'le bloc de code lua.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JICLAMHJ@?5Efface?5le?5contenu?5d?8?$KI?$KGcran?5actu@
CONST	SEGMENT
??_C@_0DE@JICLAMHJ@?5Efface?5le?5contenu?5d?8?$KI?$KGcran?5actu@ DB ' Eff'
	DB	'ace le contenu d''', 0a8H, 0a6H, 'cran actuel, et clair comme'
	DB	'.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FJGBEIFH@?5Efface?5le?5contenu?5d?8?$KI?$KGcran?5actu@
CONST	SEGMENT
??_C@_0CG@FJGBEIFH@?5Efface?5le?5contenu?5d?8?$KI?$KGcran?5actu@ DB ' Eff'
	DB	'ace le contenu d''', 0a8H, 0a6H, 'cran actuelle.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DGC@IPAKCGAD@?5Recyclage?5d?8ordures?5?6?5?$CCStop?$CC?3?5a@
CONST	SEGMENT
??_C@_0DGC@IPAKCGAD@?5Recyclage?5d?8ordures?5?6?5?$CCStop?$CC?3?5a@ DB ' '
	DB	'Recyclage d''ordures ', 0aH, ' "Stop": arr', 0a8H, 0baH, 'te '
	DB	'de recyclage d''ordures. n "red', 0a8H, 0a6H, 'marrage ": le '
	DB	'red', 0a8H, 0a6H, 'marrage de recyclage d''ordures. n "collec'
	DB	't ": le cycle complet de la mise en ?uvre de d', 0a8H, 0a6H, 'c'
	DB	'hets de recyclage. n "count": le retour de m', 0a8H, 0a6H, 'm'
	DB	'oire totale de l''utilisation actuelle de lua (unit', 0a8H, 0a6H
	DB	' pour KB). n "Step ": une ', 0a8H, 0a6H, 'tape d''ex', 0a8H, 0a6H
	DB	'cution (', 0a8H, 0a6H, 'tape peut ', 0a8H, 0baH, 'tre compos', 0a8H
	DB	0a6H, 'e de plusieurs ', 0a8H, 0a6H, 'tapes de r', 0a8H, 0a6H, 'c'
	DB	'up', 0a8H, 0a6H, 'ration de d', 0a8H, 0a6H, 'chets).Le nombre'
	DB	' de pas ', 0a8H, 0a4H, ' partir de param', 0a8H, 0a8H, 'tres '
	DB	'de commande peuvent ', 0a8H, 0baH, 'tre Arg (plus la valeur d'
	DB	'e nombre de pas plus de 0, et une ', 0a8H, 0a6H, 'tape d''ex', 0a8H
	DB	0a6H, 'cution (', 0a8H, 0a6H, 'tape un minimum)).Si la mise en'
	DB	' ?uvre de l''ach', 0a8H, 0a8H, 'vement de la r', 0a8H, 0a6H, 'c'
	DB	'up', 0a8H, 0a6H, 'ration de circulation, renvoie VRAI. n "set'
	DB	'pause ": ARG / 100 comme nouvelle valeur de param', 0a8H, 0a8H
	DB	'tres de r', 0a8H, 0a6H, 'cup', 0a8H, 0a6H, 'ration de pause d'
	DB	'''ordures. n "setstepmul ": ARG / 100 comme nouvelle valeur d'
	DB	'e param', 0a8H, 0a8H, 'tres de r', 0a8H, 0a6H, 'cup', 0a8H, 0a6H
	DB	'ration step mutiplier d''ordures.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CDPJFCGL@?5Biblioth?$KI?$KIque?5centrale?5de?5logic@
CONST	SEGMENT
??_C@_0DC@CDPJFCGL@?5Biblioth?$KI?$KIque?5centrale?5de?5logic@ DB ' Bibli'
	DB	'oth', 0a8H, 0a8H, 'que centrale de logiciel d''auteur lua.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BAL@KMFOEKGD@?5Si?5la?5valeur?5de?5ses?5param?$KI?$KItres@
CONST	SEGMENT
??_C@_0BAL@KMFOEKGD@?5Si?5la?5valeur?5de?5ses?5param?$KI?$KItres@ DB ' Si'
	DB	' la valeur de ses param', 0a8H, 0a8H, 'tres de V est faux (0 '
	DB	'ou faux), qui appelle une erreur; sinon, le retour de tous le'
	DB	's param', 0a8H, 0a8H, 'tres.En cas d''erreur, le message de l'
	DB	'''objet d''erreur; si elle ne fournit pas de ce param', 0a8H, 0a8H
	DB	'tre, un param', 0a8H, 0a8H, 'tre par d', 0a8H, 0a6H, 'faut po'
	DB	'ur "assertion failed!".', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IMDOEIMN@?T?$NN?N?$NO?N?D?$LF?$LF?$AA@
CONST	SEGMENT
??_C@_08IMDOEIMN@?T?$NN?N?$NO?N?D?$LF?$LF?$AA@ DB 0d4H, 0ddH, 0ceH, 0deH, 0ceH
	DB	0c4H, 0b5H, 0b5H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0IK@CAPLCHMD@?S?k?5pcall?5?$CIf?0?5arg1?0?5?4?4?4?$CJ?5?$MA?$OA?K?F?$KB?$KD?$LC?$LL@
CONST	SEGMENT
??_C@_0IK@CAPLCHMD@?S?k?5pcall?5?$CIf?0?5arg1?0?5?4?4?4?$CJ?5?$MA?$OA?K?F?$KB?$KD?$LC?$LL@ DB 0d3H
	DB	0ebH, ' pcall (f, arg1, ...) ', 0c0H, 0e0H, 0cbH, 0c6H, 0a1H, 0a3H
	DB	0b2H, 0bbH, 0cdH, 0acH, 0b5H, 0c4H, 0caH, 0c7H, 0a3H, 0acH, 0c8H
	DB	0e7H, 0b9H, 0fbH, ' f ', 0baH, 0afH, 0caH, 0fdH, 0c5H, 0d7H, 0b3H
	DB	0f6H, 0c1H, 0cbH, 0b4H, 0edH, 0ceH, 0f3H, 0a3H, 0acH, 0c4H, 0c7H
	DB	0c3H, 0b4H, ' xpcall ', 0b2H, 0bbH, 0bbH, 0e1H, 0b7H, 0b5H, 0bbH
	DB	0d8H, 0b4H, 0d3H, ' f ', 0c5H, 0d7H, 0b3H, 0f6H, 0b5H, 0c4H, 0b4H
	DB	0edH, 0ceH, 0f3H, 0d0H, 0c5H, 0cfH, 0a2H, 0a3H, 0acH, 0b6H, 0f8H
	DB	0caH, 0c7H, 0caH, 0b9H, 0d3H, 0c3H, ' err ', 0baH, 0afH, 0caH, 0fdH
	DB	0b7H, 0b5H, 0bbH, 0d8H, 0b5H, 0c4H, 0b4H, 0edH, 0ceH, 0f3H, 0d0H
	DB	0c5H, 0cfH, 0a2H, 0a1H, 0a3H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EHKFACGH@?O?T?J?$LOlua?$LA?f?$LB?$LO?$LK?E?$AA@
CONST	SEGMENT
??_C@_0O@EHKFACGH@?O?T?J?$LOlua?$LA?f?$LB?$LO?$LK?E?$AA@ DB 0cfH, 0d4H, 0caH
	DB	0beH, 'lua', 0b0H, 0e6H, 0b1H, 0beH, 0baH, 0c5H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PFJHOPOH@?O?T?J?$LOlua?$LA?o?V?z?$AA@
CONST	SEGMENT
??_C@_0M@PFJHOPOH@?O?T?J?$LOlua?$LA?o?V?z?$AA@ DB 0cfH, 0d4H, 0caH, 0beH, 'l'
	DB	'ua', 0b0H, 0efH, 0d6H, 0faH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@NGIAAGBN@?$LH?$LF?$LL?X?$LB?m?V?P?$LF?D?$LI?w?$LI?v?S?r?$LF?D?V?$LF?0?$LF?H?$LM?$NL?S?Z?$KD?$LK?6?5r@
CONST	SEGMENT
??_C@_0EK@NGIAAGBN@?$LH?$LF?$LL?X?$LB?m?V?P?$LF?D?$LI?w?$LI?v?S?r?$LF?D?V?$LF?0?$LF?H?$LM?$NL?S?Z?$KD?$LK?6?5r@ DB 0b7H
	DB	0b5H, 0bbH, 0d8H, 0b1H, 0edH, 0d6H, 0d0H, 0b5H, 0c4H, 0b8H, 0f7H
	DB	0b8H, 0f6H, 0d3H, 0f2H, 0b5H, 0c4H, 0d6H, 0b5H, ',', 0b5H, 0c8H
	DB	0bcH, 0dbH, 0d3H, 0daH, 0a3H, 0baH, 0aH, ' return list[i], lis'
	DB	't[i+1], ', 0a1H, 0a4H, 0a1H, 0a4H, 0a1H, 0a4H, ', list[j]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FIONAGJL@unpack?$AA@
CONST	SEGMENT
??_C@_06FIONAGJL@unpack?$AA@ DB 'unpack', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0JD@IBGGALMK@?$LH?$LF?$LL?X?5v?5?$LF?D?$MA?$OA?P?M?$KD?$KM?$MA?$OA?P?M?R?T?W?V?$LH?$PL?$LE?$KO?P?N?J?$LN?$LH@
CONST	SEGMENT
??_C@_0JD@IBGGALMK@?$LH?$LF?$LL?X?5v?5?$LF?D?$MA?$OA?P?M?$KD?$KM?$MA?$OA?P?M?R?T?W?V?$LH?$PL?$LE?$KO?P?N?J?$LN?$LH@ DB 0b7H
	DB	0b5H, 0bbH, 0d8H, ' v ', 0b5H, 0c4H, 0c0H, 0e0H, 0d0H, 0cdH, 0a3H
	DB	0acH, 0c0H, 0e0H, 0d0H, 0cdH, 0d2H, 0d4H, 0d7H, 0d6H, 0b7H, 0fbH
	DB	0b4H, 0aeH, 0d0H, 0ceH, 0caH, 0bdH, 0b7H, 0b5H, 0bbH, 0d8H, 0a1H
	DB	0a3H, ' ', 0d3H, 0d0H, 0d2H, 0d4H, 0cfH, 0c2H, 0b0H, 0cbH, 0d6H
	DB	0d6H, 0b7H, 0b5H, 0bbH, 0d8H, 0d6H, 0b5H, 0a3H, 0baH, ' "nil" '
	DB	0a3H, 0acH, ' "number"', 0a3H, 0acH, ' "string"', 0a3H, 0acH, ' '
	DB	'"boolean"', 0a3H, 0acH, ' "table"', 0a3H, 0acH, ' "function"', 0a3H
	DB	0acH, ' "thread"', 0a3H, 0acH, ' "userdata"', 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LH@BPMOIOAF@?D?$NM?$LN?$KL?H?N?R?b?$MA?$OA?P?M?$LF?D?V?$LF?W?$KK?$LL?$LL?N?$KK?$LK?O?J?J?$LF?D?W?V?$LH?$PL@
CONST	SEGMENT
??_C@_0LH@BPMOIOAF@?D?$NM?$LN?$KL?H?N?R?b?$MA?$OA?P?M?$LF?D?V?$LF?W?$KK?$LL?$LL?N?$KK?$LK?O?J?J?$LF?D?W?V?$LH?$PL@ DB 0c4H
	DB	0dcH, 0bdH, 0abH, 0c8H, 0ceH, 0d2H, 0e2H, 0c0H, 0e0H, 0d0H, 0cdH
	DB	0b5H, 0c4H, 0d6H, 0b5H, 0d7H, 0aaH, 0bbH, 0bbH, 0ceH, 0aaH, 0baH
	DB	0cfH, 0caH, 0caH, 0b5H, 0c4H, 0d7H, 0d6H, 0b7H, 0fbH, 0b4H, 0aeH
	DB	0d0H, 0ceH, 0caH, 0bdH, 0b7H, 0b5H, 0bbH, 0d8H, 0a1H, 0a3H, 0d2H
	DB	0aaH, 0bfH, 0d8H, 0d6H, 0c6H, 0caH, 0fdH, 0d7H, 0d6H, 0d7H, 0aaH
	DB	0bbH, 0bbH, 0ceH, 0aaH, 0d7H, 0d6H, 0b7H, 0fbH, 0b4H, 0aeH, 0b5H
	DB	0c4H, 0b7H, 0bdH, 0caH, 0bdH, 0a3H, 0acH, 0caH, 0b9H, 0d3H, 0c3H
	DB	' string.format(formatstring,...) ', 0a1H, 0a3H, ' ', 0aH, ' ', 0c8H
	DB	0e7H, 0b9H, 0fbH, 0d6H, 0b5H, 0cbH, 0f9H, 0b9H, 0d8H, 0c1H, 0aaH
	DB	0b5H, 0c4H, 0d4H, 0aaH, 0b1H, 0edH, 0d3H, 0d0H, ' __tostring ', 0d3H
	DB	0f2H, 0a3H, 0acH, 0d4H, 0f2H, 0caH, 0b9H, 0d3H, 0c3H, 0b8H, 0c3H
	DB	0d3H, 0f2H, 0b5H, 0c4H, 0d4H, 0aaH, 0b7H, 0bdH, 0b7H, 0a8H, 0bbH
	DB	0f1H, 0c8H, 0a1H, 0d7H, 0d6H, 0b7H, 0fbH, 0b4H, 0aeH, 0a1H, 0a3H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0ML@FKNGDJCH@?5?$LD?$KC?J?T?$LA?Q?5e?5?$KD?$KI?$LF?Z?R?$LL?$LC?N?J?$PN?$KD?$KJ?W?$KK?$LL?$LL?N?$KK?J?$KO?$LN?x@
CONST	SEGMENT
??_C@_0ML@FKNGDJCH@?5?$LD?$KC?J?T?$LA?Q?5e?5?$KD?$KI?$LF?Z?R?$LL?$LC?N?J?$PN?$KD?$KJ?W?$KK?$LL?$LL?N?$KK?J?$KO?$LN?x@ DB ' '
	DB	0b3H, 0a2H, 0caH, 0d4H, 0b0H, 0d1H, ' e ', 0a3H, 0a8H, 0b5H, 0daH
	DB	0d2H, 0bbH, 0b2H, 0ceH, 0caH, 0fdH, 0a3H, 0a9H, 0d7H, 0aaH, 0bbH
	DB	0bbH, 0ceH, 0aaH, 0caH, 0aeH, 0bdH, 0f8H, 0d6H, 0c6H, 0caH, 0fdH
	DB	0d6H, 0b5H, 0b2H, 0a2H, 0b7H, 0b5H, 0bbH, 0d8H, 0a1H, 0a3H, 0c8H
	DB	0e7H, 0b9H, 0fbH, 0ceH, 0deH, 0b7H, 0a8H, 0d7H, 0aaH, 0bbH, 0bbH
	DB	0b7H, 0b5H, 0bbH, 0d8H, ' nil ', 0a1H, 0a3H, ' ', 0aH, ' base', 0a3H
	DB	0a8H, 0b5H, 0daH, 0b6H, 0feH, 0b2H, 0ceH, 0caH, 0fdH, 0a3H, 0a9H
	DB	' ', 0b1H, 0edH, 0caH, 0beH, 0b4H, 0abH, 0c8H, 0ebH, 0b2H, 0ceH
	DB	0caH, 0fdH, 0b5H, 0c4H, 0bdH, 0f8H, 0d6H, 0c6H, 0a3H, 0acH, 0c4H
	DB	0acH, 0c8H, 0cfH, 0ceH, 0aaH, ' 10 ', 0bdH, 0f8H, 0d6H, 0c6H, 0a1H
	DB	0a3H, 'base ', 0b5H, 0c4H, 0bfH, 0c9H, 0caH, 0e4H, 0c8H, 0ebH, 0b7H
	DB	0b6H, 0ceH, 0a7H, '[2, 36]', 0a1H, 0a3H, 0b8H, 0dfH, 0d3H, 0daH
	DB	' 10 ', 0b5H, 0c4H, 0caH, 0fdH, 0d7H, 0d6H, 0d3H, 0c3H, 0d7H, 0d6H
	DB	0c4H, 0b8H, 0b1H, 0edH, 0caH, 0beH, 0a3H, 0acH, 'A - Z ', 0b7H
	DB	0d6H, 0b1H, 0f0H, 0b1H, 0edH, 0caH, 0beH, ' 11 - 35 ', 0a1H, 0a3H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0JI@CGNAGBNM@?$LI?x?5table?5?$LJ?X?A?$KK?T?$KK?$LB?m?5metatable?5?$KB?$KD?$LH?$LF@
CONST	SEGMENT
??_C@_0JI@CGNAGBNM@?$LI?x?5table?5?$LJ?X?A?$KK?T?$KK?$LB?m?5metatable?5?$KB?$KD?$LH?$LF@ DB 0b8H
	DB	0f8H, ' table ', 0b9H, 0d8H, 0c1H, 0aaH, 0d4H, 0aaH, 0b1H, 0edH
	DB	' metatable ', 0a1H, 0a3H, 0b7H, 0b5H, 0bbH, 0d8H, 0b2H, 0ceH, 0caH
	DB	0fdH, ' table ', 0a1H, 0a3H, 0aH, ' ', 0c8H, 0e7H, 0b9H, 0fbH, 0d4H
	DB	0aaH, 0b1H, 0edH, 0b6H, 0a8H, 0d2H, 0e5H, 0c1H, 0cbH, ' __meta'
	DB	'table ', 0d3H, 0f2H, 0a3H, 0acH, 0bbH, 0e1H, 0c5H, 0d7H, 0b3H
	DB	0f6H, 0b4H, 0edH, 0ceH, 0f3H, 0a1H, 0a3H, 0aH, ' metatable ', 0b2H
	DB	0ceH, 0caH, 0fdH, 0a3H, 0a8H, 0b5H, 0daH, 0b6H, 0feH, 0b2H, 0ceH
	DB	0caH, 0fdH, 0a3H, 0a9H, 0ceH, 0aaH, ' nil ', 0b1H, 0edH, 0caH, 0beH
	DB	0bdH, 0e2H, 0b3H, 0fdH, 0d2H, 0d1H, 0beH, 0adH, 0b9H, 0d8H, 0c1H
	DB	0aaH, 0b5H, 0c4H, 0d4H, 0aaH, 0b1H, 0edH, 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0KI@BKGLFMBF@index?5?$LP?I?R?T?J?G?J?$PN?W?V?$LL?r?U?$NP?W?V?$LH?$PL?5?8?$CD?8?5?$KB?$KD?$LF@
CONST	SEGMENT
??_C@_0KI@BKGLFMBF@index?5?$LP?I?R?T?J?G?J?$PN?W?V?$LL?r?U?$NP?W?V?$LH?$PL?5?8?$CD?8?5?$KB?$KD?$LF@ DB 'i'
	DB	'ndex ', 0bfH, 0c9H, 0d2H, 0d4H, 0caH, 0c7H, 0caH, 0fdH, 0d7H, 0d6H
	DB	0bbH, 0f2H, 0d5H, 0dfH, 0d7H, 0d6H, 0b7H, 0fbH, ' ''#'' ', 0a1H
	DB	0a3H, 0b5H, 0b1H, ' index ', 0ceH, 0aaH, 0caH, 0fdH, 0d7H, 0d6H
	DB	0caH, 0b1H, 0a3H, 0acH, 0b7H, 0b5H, 0bbH, 0d8H, 0b5H, 0daH, ' '
	DB	'index + 1 ', 0b8H, 0f6H, 0b2H, 0ceH, 0caH, 0fdH, 0bcH, 0b0H, 0baH
	DB	0f3H, 0c3H, 0e6H, 0b5H, 0c4H, 0b2H, 0ceH, 0caH, 0fdH, 0a3H, 0a8H
	DB	0d6H, 0a7H, 0b3H, 0d6H, 0b8H, 0baH, 0caH, 0fdH, 0d0H, 0ceH, 0caH
	DB	0bdH, 0b5H, 0c4H, ' index', 0a3H, 0a9H, 0a3H, 0bbH, 0b5H, 0b1H
	DB	' index ', 0ceH, 0aaH, ' ''#'' ', 0caH, 0b1H, 0a3H, 0acH, 0b7H
	DB	0b5H, 0bbH, 0d8H, 0b2H, 0ceH, 0caH, 0fdH, 0b5H, 0c4H, 0b8H, 0f6H
	DB	0caH, 0fdH, 0a3H, 0a8H, 0b2H, 0bbH, 0b0H, 0fcH, 0c0H, 0a8H, 0b5H
	DB	0daH, 0d2H, 0bbH, 0b8H, 0f6H, 0b2H, 0ceH, 0caH, 0fdH, 0a3H, 0a9H
	DB	0a1H, 0a3H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HL@JIGMHII@?$LN?$KL?5table?$FLindex?$FN?5?$LF?D?V?$LF?I?h?V?C?N?$KK?5value@
CONST	SEGMENT
??_C@_0HL@JIGMHII@?$LN?$KL?5table?$FLindex?$FN?5?$LF?D?V?$LF?I?h?V?C?N?$KK?5value@ DB 0bdH
	DB	0abH, ' table[index] ', 0b5H, 0c4H, 0d6H, 0b5H, 0c9H, 0e8H, 0d6H
	DB	0c3H, 0ceH, 0aaH, ' value ', 0a1H, 0a3H, 'table ', 0b1H, 0d8H, 0d0H
	DB	0ebH, 0caH, 0c7H, 0d2H, 0bbH, 0d5H, 0c5H, 0b1H, 0edH, 0a3H, 0acH
	DB	'index ', 0b2H, 0bbH, 0c4H, 0dcH, 0caH, 0c7H, ' nil ', 0bbH, 0f2H
	DB	' NaN ', 0a1H, 0a3H, 'value ', 0bfH, 0c9H, 0d2H, 0d4H, 0caH, 0c7H
	DB	0c8H, 0ceH, 0baH, 0ceH, 0d6H, 0b5H, 0a1H, 0a3H, 0b7H, 0b5H, 0bbH
	DB	0d8H, 0d0H, 0deH, 0b8H, 0c4H, 0baH, 0f3H, 0b5H, 0c4H, ' table '
	DB	0a1H, 0a3H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@HOOBFFHD@?$LL?q?H?$KB?5table?5?V?P?$LM?$PM?5index?5?$LF?D?$LJ?X?A?$KK?V?$LF?$KD?$KM@
CONST	SEGMENT
??_C@_0EK@HOOBFFHD@?$LL?q?H?$KB?5table?5?V?P?$LM?$PM?5index?5?$LF?D?$LJ?X?A?$KK?V?$LF?$KD?$KM@ DB 0bbH
	DB	0f1H, 0c8H, 0a1H, ' table ', 0d6H, 0d0H, 0bcH, 0fcH, ' index ', 0b5H
	DB	0c4H, 0b9H, 0d8H, 0c1H, 0aaH, 0d6H, 0b5H, 0a3H, 0acH, 'table ', 0b2H
	DB	0ceH, 0caH, 0fdH, 0b1H, 0d8H, 0d0H, 0ebH, 0caH, 0c7H, 0d2H, 0bbH
	DB	0b8H, 0f6H, 0b1H, 0edH, 0a3H, 0acH, 0d5H, 0d2H, 0b2H, 0bbH, 0b5H
	DB	0bdH, 0b7H, 0b5H, 0bbH, 0d8H, ' nil ', 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HD@KAAICMEO@?R?T?5raw?5?W?w?N?$KK?G?$LA?W?$LK?$LF?D?$LK?$KP?J?$PN?$LO?y?$LB?m?J?$LO?$LI?C?$LH?$LN?$LH@
CONST	SEGMENT
??_C@_0HD@KAAICMEO@?R?T?5raw?5?W?w?N?$KK?G?$LA?W?$LK?$LF?D?$LK?$KP?J?$PN?$LO?y?$LB?m?J?$LO?$LI?C?$LH?$LN?$LH@ DB 0d2H
	DB	0d4H, ' raw ', 0d7H, 0f7H, 0ceH, 0aaH, 0c7H, 0b0H, 0d7H, 0baH, 0b5H
	DB	0c4H, 0baH, 0afH, 0caH, 0fdH, 0beH, 0f9H, 0b1H, 0edH, 0caH, 0beH
	DB	0b8H, 0c3H, 0b7H, 0bdH, 0b7H, 0a8H, 0d4H, 0daH, 0b2H, 0bbH, 0b4H
	DB	0a5H, 0b7H, 0a2H, 0c8H, 0ceH, 0baH, 0ceH, 0d4H, 0aaH, 0b7H, 0bdH
	DB	0b7H, 0a8H, 0b5H, 0c4H, 0c7H, 0e9H, 0bfH, 0f6H, 0cfH, 0c2H, 0b5H
	DB	0f7H, 0d3H, 0c3H, 0a1H, 0a3H, 0aH, ' rawequal ', 0bcH, 0ecH, 0b2H
	DB	0e9H, ' v1 ', 0caH, 0c7H, 0b7H, 0f1H, 0d3H, 0ebH, ' v2 ', 0cfH
	DB	0e0H, 0b5H, 0c8H, 0a3H, 0acH, 0b7H, 0b5H, 0bbH, 0d8H, 0b1H, 0c8H
	DB	0bdH, 0cfH, 0bdH, 0e1H, 0b9H, 0fbH, 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@GIFILDMN@?$LN?v?W?w?N?$KK?$LP?l?K?Y?$LC?i?$LP?$LE?D?$LD?$LI?v?V?$LF?$LF?D?$LJ?$KE?$LO?$NP?$KD?$KM?$LC?$LL?S?C@
CONST	SEGMENT
??_C@_0FN@GIFILDMN@?$LN?v?W?w?N?$KK?$LP?l?K?Y?$LC?i?$LP?$LE?D?$LD?$LI?v?V?$LF?$LF?D?$LJ?$KE?$LO?$NP?$KD?$KM?$LC?$LL?S?C@ DB 0bdH
	DB	0f6H, 0d7H, 0f7H, 0ceH, 0aaH, 0bfH, 0ecH, 0cbH, 0d9H, 0b2H, 0e9H
	DB	0bfH, 0b4H, 0c4H, 0b3H, 0b8H, 0f6H, 0d6H, 0b5H, 0b5H, 0c4H, 0b9H
	DB	0a4H, 0beH, 0dfH, 0a3H, 0acH, 0b2H, 0bbH, 0d3H, 0c3H, 0d7H, 0f6H
	DB	0b8H, 0f1H, 0caH, 0bdH, 0bbH, 0afH, 0caH, 0e4H, 0b3H, 0f6H, 0a1H
	DB	0a3H, 0d5H, 0fdH, 0caH, 0bdH, 0b5H, 0c4H, 0b8H, 0f1H, 0caH, 0bdH
	DB	0bbH, 0afH, 0caH, 0e4H, 0b3H, 0f6H, 0bcH, 0fbH, ' string.forma'
	DB	't ', 0d3H, 0ebH, ' io.write', 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LM@CCOODELD@?R?T?$LB?$KD?$LL?$KE?D?$KD?J?$LN?$LF?w?S?C?$LE?$KL?H?k?$LF?D?$LK?$KP?J?$PN?$KD?$KM?R?$LC?$LO?M?J?G@
CONST	SEGMENT
??_C@_0LM@CCOODELD@?R?T?$LB?$KD?$LL?$KE?D?$KD?J?$LN?$LF?w?S?C?$LE?$KL?H?k?$LF?D?$LK?$KP?J?$PN?$KD?$KM?R?$LC?$LO?M?J?G@ DB 0d2H
	DB	0d4H, 0b1H, 0a3H, 0bbH, 0a4H, 0c4H, 0a3H, 0caH, 0bdH, 0b5H, 0f7H
	DB	0d3H, 0c3H, 0b4H, 0abH, 0c8H, 0ebH, 0b5H, 0c4H, 0baH, 0afH, 0caH
	DB	0fdH, 0a3H, 0acH, 0d2H, 0b2H, 0beH, 0cdH, 0caH, 0c7H, 0cbH, 0b5H
	DB	0b2H, 0bbH, 0bbH, 0e1H, 0c5H, 0d7H, 0b3H, 0f6H, 0b4H, 0edH, 0ceH
	DB	0f3H, 0a1H, 0a3H, 0c8H, 0e7H, 0b9H, 0fbH, 0b2H, 0b6H, 0bbH, 0f1H
	DB	0b5H, 0bdH, 0c5H, 0d7H, 0b3H, 0f6H, 0b5H, 0c4H, 0b4H, 0edH, 0ceH
	DB	0f3H, 0a3H, 0acH, 0b5H, 0daH, 0d2H, 0bbH, 0b8H, 0f6H, 0b2H, 0ceH
	DB	0caH, 0fdH, 0b7H, 0b5H, 0bbH, 0d8H, ' false', 0a3H, 0acH, 0b5H
	DB	0daH, 0b6H, 0feH, 0b8H, 0f6H, 0b2H, 0ceH, 0caH, 0fdH, 0b7H, 0b5H
	DB	0bbH, 0d8H, 0b4H, 0edH, 0ceH, 0f3H, 0d0H, 0c5H, 0cfH, 0a2H, 0a3H
	DB	0bbH, 0c8H, 0e7H, 0b9H, 0fbH, 0c3H, 0bbH, 0d3H, 0d0H, 0b3H, 0f6H
	DB	0cfH, 0d6H, 0b4H, 0edH, 0ceH, 0f3H, 0a3H, 0acH, 0b5H, 0daH, 0d2H
	DB	0bbH, 0b8H, 0f6H, 0b2H, 0ceH, 0caH, 0fdH, 0b7H, 0b5H, 0bbH, 0d8H
	DB	' ture', 0a3H, 0acH, 0baH, 0f3H, 0c3H, 0e6H, 0b5H, 0c4H, 0b2H, 0ceH
	DB	0caH, 0fdH, 0b7H, 0b5H, 0bbH, 0d8H, 0b4H, 0abH, 0c8H, 0ebH, 0baH
	DB	0afH, 0caH, 0fdH, 0b5H, 0c4H, 0b7H, 0b5H, 0bbH, 0d8H, 0d6H, 0b5H
	DB	0a1H, 0a3H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PBNINAND@?$LH?$LF?$LL?X?$LE?$KL?H?k?$LF?D?$LB?m?V?P?O?B?R?$LL?$LI?v?$LM?$PM?V?$LF?$LG?T?$AA@
CONST	SEGMENT
??_C@_0BL@PBNINAND@?$LH?$LF?$LL?X?$LE?$KL?H?k?$LF?D?$LB?m?V?P?O?B?R?$LL?$LI?v?$LM?$PM?V?$LF?$LG?T?$AA@ DB 0b7H
	DB	0b5H, 0bbH, 0d8H, 0b4H, 0abH, 0c8H, 0ebH, 0b5H, 0c4H, 0b1H, 0edH
	DB	0d6H, 0d0H, 0cfH, 0c2H, 0d2H, 0bbH, 0b8H, 0f6H, 0bcH, 0fcH, 0d6H
	DB	0b5H, 0b6H, 0d4H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KDEJAEID@?S?k?5load?5?$MA?$OA?K?F?$KD?$KM?V?$LL?$LC?$LL?$LJ?$PN?J?G?$LE?S?W?V?$LH?$PL?$LE?$KO?V?P@
CONST	SEGMENT
??_C@_0CL@KDEJAEID@?S?k?5load?5?$MA?$OA?K?F?$KD?$KM?V?$LL?$LC?$LL?$LJ?$PN?J?G?$LE?S?W?V?$LH?$PL?$LE?$KO?V?P@ DB 0d3H
	DB	0ebH, ' load ', 0c0H, 0e0H, 0cbH, 0c6H, 0a3H, 0acH, 0d6H, 0bbH
	DB	0b2H, 0bbH, 0b9H, 0fdH, 0caH, 0c7H, 0b4H, 0d3H, 0d7H, 0d6H, 0b7H
	DB	0fbH, 0b4H, 0aeH, 0d6H, 0d0H, 0bbH, 0f1H, 0c8H, 0a1H, 0b4H, 0faH
	DB	0c2H, 0ebH, 0bfH, 0e9H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BFP@JCAMCHOC@?M?$KI?$LJ?$PN?$LE?$KL?H?k?$LK?$KP?J?$PN?5func?5?$LF?D?$LH?$LF?$LL?X?V?$LF?$LL?q?H?$KB?$LE?z@
CONST	SEGMENT
??_C@_0BFP@JCAMCHOC@?M?$KI?$LJ?$PN?$LE?$KL?H?k?$LK?$KP?J?$PN?5func?5?$LF?D?$LH?$LF?$LL?X?V?$LF?$LL?q?H?$KB?$LE?z@ DB 0cdH
	DB	0a8H, 0b9H, 0fdH, 0b4H, 0abH, 0c8H, 0ebH, 0baH, 0afH, 0caH, 0fdH
	DB	' func ', 0b5H, 0c4H, 0b7H, 0b5H, 0bbH, 0d8H, 0d6H, 0b5H, 0bbH
	DB	0f1H, 0c8H, 0a1H, 0b4H, 0faH, 0c2H, 0ebH, 0bfH, 0e9H, 0c6H, 0acH
	DB	0b6H, 0ceH, 0a1H, 0a3H, 'func ', 0baH, 0afH, 0caH, 0fdH, 0b5H, 0c4H
	DB	0baH, 0f3H, 0d2H, 0bbH, 0b4H, 0ceH, 0b5H, 0f7H, 0d3H, 0c3H, 0b7H
	DB	0b5H, 0bbH, 0d8H, 0b5H, 0c4H, 0d7H, 0d6H, 0b7H, 0fbH, 0b4H, 0aeH
	DB	0d3H, 0a6H, 0b5H, 0b1H, 0c4H, 0dcH, 0d3H, 0ebH, 0c7H, 0b0H, 0d2H
	DB	0bbH, 0b4H, 0ceH, 0b5H, 0f7H, 0d3H, 0c3H, 0b7H, 0b5H, 0bbH, 0d8H
	DB	0b5H, 0c4H, 0d7H, 0d6H, 0b7H, 0fbH, 0b4H, 0aeH, 0cfH, 0ceH, 0bdH
	DB	0d3H, 0d4H, 0daH, 0d2H, 0bbH, 0c6H, 0f0H, 0a3H, 0acH, 0d7H, 0eeH
	DB	0d6H, 0d5H, 0b5H, 0c3H, 0b5H, 0bdH, 0cdH, 0eaH, 0d5H, 0fbH, 0b5H
	DB	0c4H, 0b4H, 0faH, 0c2H, 0ebH, 0bfH, 0e9H, 0a1H, 0a3H, 0baH, 0afH
	DB	0caH, 0fdH, 0b7H, 0b5H, 0bbH, 0d8H, ' nil ', 0bbH, 0f2H, 0ceH, 0deH
	DB	0b7H, 0b5H, 0bbH, 0d8H, 0d6H, 0b5H, 0caH, 0b1H, 0b1H, 0edH, 0caH
	DB	0beH, 0b4H, 0faH, 0c2H, 0ebH, 0bfH, 0e9H, 0bdH, 0e1H, 0caH, 0f8H
	DB	0a1H, 0a3H, ' ', 0aH, ' load ', 0baH, 0afH, 0caH, 0fdH, 0bbH, 0e1H
	DB	0bdH, 0abH, 0b5H, 0c3H, 0b5H, 0bdH, 0b5H, 0c4H, 0b4H, 0faH, 0c2H
	DB	0ebH, 0bfH, 0e9H, 0d7H, 0f7H, 0ceH, 0aaH, 0baH, 0afH, 0caH, 0fdH
	DB	0b7H, 0b5H, 0bbH, 0d8H, 0a1H, 0a3H, 0b7H, 0b5H, 0bbH, 0d8H, 0baH
	DB	0afH, 0caH, 0fdH, 0b5H, 0c4H, 0bbH, 0b7H, 0beH, 0b3H, 0ceH, 0aaH
	DB	0c8H, 0abH, 0beH, 0d6H, 0bbH, 0b7H, 0beH, 0b3H, 0a1H, 0a3H, 0c8H
	DB	0e7H, 0b9H, 0fbH, 0b3H, 0f6H, 0cfH, 0d6H, 0b4H, 0edH, 0ceH, 0f3H
	DB	0a3H, 0acH, 'load ', 0bbH, 0e1H, 0b7H, 0b5H, 0bbH, 0d8H, ' nil'
	DB	' ', 0baH, 0cdH, ' ', 0b4H, 0edH, 0ceH, 0f3H, 0d0H, 0c5H, 0cfH
	DB	0a2H, 0a1H, 0a3H, ' ', 0aH, ' chunkname ', 0d7H, 0f7H, 0ceH, 0aaH
	DB	0b8H, 0c3H, 0b4H, 0faH, 0c2H, 0ebH, 0bfH, 0e9H, 0b5H, 0c4H, 0c3H
	DB	0fbH, 0b3H, 0c6H, 0a3H, 0acH, 0d3H, 0c3H, 0d4H, 0daH, 0b4H, 0edH
	DB	0ceH, 0f3H, 0d0H, 0c5H, 0cfH, 0a2H, 0d3H, 0ebH, 0b5H, 0f7H, 0caH
	DB	0d4H, 0d0H, 0c5H, 0cfH, 0a2H, 0d6H, 0d0H, 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FJIPOJKF@?$LE?S?N?D?$LM?$PO?V?P?$LL?q?H?$KB?$LE?z?B?k?$LP?i?$KD?$KM?H?g?$LJ?$PL?C?$LL?S?P?V?$LI?$LG?$KI@
CONST	SEGMENT
??_C@_0DJ@FJIPOJKF@?$LE?S?N?D?$LM?$PO?V?P?$LL?q?H?$KB?$LE?z?B?k?$LP?i?$KD?$KM?H?g?$LJ?$PL?C?$LL?S?P?V?$LI?$LG?$KI@ DB 0b4H
	DB	0d3H, 0ceH, 0c4H, 0bcH, 0feH, 0d6H, 0d0H, 0bbH, 0f1H, 0c8H, 0a1H
	DB	0b4H, 0faH, 0c2H, 0ebH, 0bfH, 0e9H, 0a3H, 0acH, 0c8H, 0e7H, 0b9H
	DB	0fbH, 0c3H, 0bbH, 0d3H, 0d0H, 0d6H, 0b8H, 0b6H, 0a8H, 0ceH, 0c4H
	DB	0bcH, 0feH, 0a3H, 0acH, 0d4H, 0f2H, 0b4H, 0d3H, 0b1H, 0eaH, 0d7H
	DB	0bcH, 0caH, 0e4H, 0c8H, 0ebH, 0d6H, 0d0H, 0bbH, 0f1H, 0c8H, 0a1H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@BCHKILID@?$LH?$LF?$LL?X?H?$PN?$LI?v?V?$LF?$KD?$LK?$LF?$PM?$LE?z?F?w?$KB?$KC?$LE?$KL?H?k?$LF?D?$LB?m?5t?$KB?$KC@
CONST	SEGMENT
??_C@_0GD@BCHKILID@?$LH?$LF?$LL?X?H?$PN?$LI?v?V?$LF?$KD?$LK?$LF?$PM?$LE?z?F?w?$KB?$KC?$LE?$KL?H?k?$LF?D?$LB?m?5t?$KB?$KC@ DB 0b7H
	DB	0b5H, 0bbH, 0d8H, 0c8H, 0fdH, 0b8H, 0f6H, 0d6H, 0b5H, 0a3H, 0baH
	DB	0b5H, 0fcH, 0b4H, 0faH, 0c6H, 0f7H, 0a1H, 0a2H, 0b4H, 0abH, 0c8H
	DB	0ebH, 0b5H, 0c4H, 0b1H, 0edH, ' t', 0a1H, 0a2H, 0d6H, 0b5H, ' '
	DB	'0 ', 0a1H, 0a3H, 0b5H, 0fcH, 0b4H, 0faH, 0c6H, 0f7H, 0c4H, 0dcH
	DB	0b9H, 0bbH, 0b8H, 0f9H, 0beH, 0ddH, 0b4H, 0abH, 0c8H, 0ebH, 0b5H
	DB	0c4H, 0b1H, 0edH, ' t ', 0baH, 0cdH, 0cbH, 0f7H, 0d2H, 0fdH, ' '
	DB	'i ', 0b5H, 0c3H, 0b5H, 0bdH, ' i+1 ', 0baH, 0cdH, ' t[i+1] ', 0b5H
	DB	0c4H, 0d6H, 0b5H, 0a1H, 0a3H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ENPOPECB@?O?T?J?$LO?$LA?o?V?z?$AA@
CONST	SEGMENT
??_C@_08ENPOPECB@?O?T?J?$LO?$LA?o?V?z?$AA@ DB 0cfH, 0d4H, 0caH, 0beH, 0b0H
	DB	0efH, 0d6H, 0faH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@LNEDBPAH@?H?g?$LJ?$PL?$LG?T?O?s?C?$LL?S?P?T?$KK?$LB?m?$KD?$KM?$LH?$LF?$LL?X?$LP?U?$KD?$LL?H?g?$LJ?$PL?$LG?T@
CONST	SEGMENT
??_C@_0FI@LNEDBPAH@?H?g?$LJ?$PL?$LG?T?O?s?C?$LL?S?P?T?$KK?$LB?m?$KD?$KM?$LH?$LF?$LL?X?$LP?U?$KD?$LL?H?g?$LJ?$PL?$LG?T@ DB 0c8H
	DB	0e7H, 0b9H, 0fbH, 0b6H, 0d4H, 0cfH, 0f3H, 0c3H, 0bbH, 0d3H, 0d0H
	DB	0d4H, 0aaH, 0b1H, 0edH, 0a3H, 0acH, 0b7H, 0b5H, 0bbH, 0d8H, 0bfH
	DB	0d5H, 0a3H, 0bbH, 0c8H, 0e7H, 0b9H, 0fbH, 0b6H, 0d4H, 0cfH, 0f3H
	DB	0d3H, 0d0H, ' __metatable ', 0d3H, 0f2H, 0a3H, 0acH, 0b7H, 0b5H
	DB	0bbH, 0d8H, 0b6H, 0d4H, 0d3H, 0a6H, 0b5H, 0c4H, 0d6H, 0b5H, 0a3H
	DB	0bbH, 0b7H, 0f1H, 0d4H, 0f2H, 0a3H, 0acH, 0b7H, 0b5H, 0bbH, 0d8H
	DB	0b6H, 0d4H, 0cfH, 0f3H, 0b5H, 0c4H, 0d4H, 0aaH, 0b1H, 0edH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HMHBHHNF@?$LL?q?H?$KBgc?P?E?O?$KC?$AA@
CONST	SEGMENT
??_C@_0L@HMHBHHNF@?$LL?q?H?$KBgc?P?E?O?$KC?$AA@ DB 0bbH, 0f1H, 0c8H, 0a1H
	DB	'gc', 0d0H, 0c5H, 0cfH, 0a2H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EDAGHKOI@gcinfo?$AA@
CONST	SEGMENT
??_C@_06EDAGHKOI@gcinfo?$AA@ DB 'gcinfo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ECHOJKFB@?M?K?$LD?v?$LL?$LH?$LO?$LD?$AA@
CONST	SEGMENT
??_C@_08ECHOJKFB@?M?K?$LD?v?$LL?$LH?$LO?$LD?$AA@ DB 0cdH, 0cbH, 0b3H, 0f6H
	DB	0bbH, 0b7H, 0beH, 0b3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@MGGLOCON@?V?U?V?$LJ?K?y?$LB?$KD?$LL?$KE?$LF?D?$LK?$KP?J?$PN?$KD?$KM?E?W?$LD?v?5message?5?O@
CONST	SEGMENT
??_C@_0CO@MGGLOCON@?V?U?V?$LJ?K?y?$LB?$KD?$LL?$KE?$LF?D?$LK?$KP?J?$PN?$KD?$KM?E?W?$LD?v?5message?5?O@ DB 0d6H
	DB	0d5H, 0d6H, 0b9H, 0cbH, 0f9H, 0b1H, 0a3H, 0bbH, 0a4H, 0b5H, 0c4H
	DB	0baH, 0afH, 0caH, 0fdH, 0a3H, 0acH, 0c5H, 0d7H, 0b3H, 0f6H, ' '
	DB	'message ', 0cfH, 0fbH, 0cfH, 0a2H, 0a3H, 0acH, 0b2H, 0bbH, 0d4H
	DB	0d9H, 0b7H, 0b5H, 0bbH, 0d8H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BKHIOMOH@?$LE?r?$LP?$KK?$LI?C?C?$PL?W?V?$LF?D?N?D?$LM?$PO?$KD?$KM?$LC?$KC?V?$LE?P?P?N?D?$LM?$PO?V?P?$LF?D@
CONST	SEGMENT
??_C@_0CM@BKHIOMOH@?$LE?r?$LP?$KK?$LI?C?C?$PL?W?V?$LF?D?N?D?$LM?$PO?$KD?$KM?$LC?$KC?V?$LE?P?P?N?D?$LM?$PO?V?P?$LF?D@ DB 0b4H
	DB	0f2H, 0bfH, 0aaH, 0b8H, 0c3H, 0c3H, 0fbH, 0d7H, 0d6H, 0b5H, 0c4H
	DB	0ceH, 0c4H, 0bcH, 0feH, 0a3H, 0acH, 0b2H, 0a2H, 0d6H, 0b4H, 0d0H
	DB	0d0H, 0ceH, 0c4H, 0bcH, 0feH, 0d6H, 0d0H, 0b5H, 0c4H, ' Lua ', 0b4H
	DB	0faH, 0c2H, 0ebH, 0bfH, 0e9H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DIDGHNKN@?G?e?$LD?$PN?$LF?$LB?G?$LA?F?A?D?$LL?D?Z?H?$NN?$KD?$KM?S?kclear?R?$LL?Q?y?$AA@
CONST	SEGMENT
??_C@_0BO@DIDGHNKN@?G?e?$LD?$PN?$LF?$LB?G?$LA?F?A?D?$LL?D?Z?H?$NN?$KD?$KM?S?kclear?R?$LL?Q?y?$AA@ DB 0c7H
	DB	0e5H, 0b3H, 0fdH, 0b5H, 0b1H, 0c7H, 0b0H, 0c6H, 0c1H, 0c4H, 0bbH
	DB	0c4H, 0daH, 0c8H, 0ddH, 0a3H, 0acH, 0d3H, 0ebH, 'clear', 0d2H, 0bbH
	DB	0d1H, 0f9H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DLNNKEPM@?G?e?$LD?$PN?$LF?$LB?G?$LA?F?A?D?$LL?D?Z?H?$NN?$AA@
CONST	SEGMENT
??_C@_0BB@DLNNKEPM@?G?e?$LD?$PN?$LF?$LB?G?$LA?F?A?D?$LL?D?Z?H?$NN?$AA@ DB 0c7H
	DB	0e5H, 0b3H, 0fdH, 0b5H, 0b1H, 0c7H, 0b0H, 0c6H, 0c1H, 0c4H, 0bbH
	DB	0c4H, 0daH, 0c8H, 0ddH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BLJ@JAGMBHNF@?$MA?$KM?$LL?x?$LL?X?J?U?5?6?5?$CCstop?$CC?3?5?M?$KD?V?$LJ?$MA?$KM?$LL?x?$LL?X?J?U?$KB@
CONST	SEGMENT
??_C@_0BLJ@JAGMBHNF@?$MA?$KM?$LL?x?$LL?X?J?U?5?6?5?$CCstop?$CC?3?5?M?$KD?V?$LJ?$MA?$KM?$LL?x?$LL?X?J?U?$KB@ DB 0c0H
	DB	0acH, 0bbH, 0f8H, 0bbH, 0d8H, 0caH, 0d5H, ' ', 0aH, ' "stop": '
	DB	0cdH, 0a3H, 0d6H, 0b9H, 0c0H, 0acH, 0bbH, 0f8H, 0bbH, 0d8H, 0caH
	DB	0d5H, 0a1H, 0a3H, 0aH, ' "restart": ', 0d6H, 0d8H, 0c6H, 0f4H, 0c0H
	DB	0acH, 0bbH, 0f8H, 0bbH, 0d8H, 0caH, 0d5H, 0a1H, 0a3H, 0aH, ' "'
	DB	'collect" : ', 0d6H, 0b4H, 0d0H, 0d0H, 0c0H, 0acH, 0bbH, 0f8H, 0bbH
	DB	0d8H, 0caH, 0d5H, 0b5H, 0c4H, 0cdH, 0eaH, 0d5H, 0fbH, 0d1H, 0adH
	DB	0bbH, 0b7H, 0a1H, 0a3H, 0aH, ' "count" : ', 0b7H, 0b5H, 0bbH, 0d8H
	DB	' Lua ', 0b5H, 0b1H, 0c7H, 0b0H, 0caH, 0b9H, 0d3H, 0c3H, 0b5H, 0c4H
	DB	0d7H, 0dcH, 0c4H, 0daH, 0b4H, 0e6H, 0a3H, 0a8H, 0b5H, 0a5H, 0ceH
	DB	0bbH, 0ceH, 0aaH, ' Kb', 0a3H, 0a9H, 0a1H, 0a3H, 0aH, ' "step"'
	DB	' : ', 0d6H, 0b4H, 0d0H, 0d0H, 0d2H, 0bbH, 0b2H, 0bdH, 0a3H, 0a8H
	DB	0d2H, 0bbH, 0b2H, 0bdH, 0bfH, 0c9H, 0d3H, 0c9H, 0b6H, 0e0H, 0b2H
	DB	0bdH, 0d7H, 0e9H, 0b3H, 0c9H, 0a3H, 0a9H, 0c0H, 0acH, 0bbH, 0f8H
	DB	0bbH, 0d8H, 0caH, 0d5H, 0a1H, 0a3H, 0b2H, 0bdH, 0caH, 0fdH, 0bfH
	DB	0c9H, 0d3H, 0c9H, 0b2H, 0ceH, 0caH, 0fdH, ' arg ', 0bfH, 0d8H, 0d6H
	DB	0c6H, 0a3H, 0a8H, 0d6H, 0b5H, 0d4H, 0bdH, 0b4H, 0f3H, 0a3H, 0acH
	DB	0b2H, 0bdH, 0caH, 0fdH, 0d4H, 0bdH, 0b6H, 0e0H, 0a3H, 0acH, '0'
	DB	' ', 0b1H, 0edH, 0caH, 0beH, 0d6H, 0b4H, 0d0H, 0d0H, 0d2H, 0bbH
	DB	0b2H, 0bdH, 0a3H, 0a8H, 0d6H, 0b8H, 0d7H, 0eeH, 0d0H, 0a1H, 0b5H
	DB	0c4H, 0d2H, 0bbH, 0b2H, 0bdH, 0a3H, 0a9H, 0a3H, 0a9H, 0a1H, 0a3H
	DB	0c8H, 0e7H, 0b9H, 0fbH, 0d6H, 0b4H, 0d0H, 0d0H, 0baH, 0f3H, 0cdH
	DB	0eaH, 0b3H, 0c9H, 0c1H, 0cbH, 0bbH, 0d8H, 0caH, 0d5H, 0d1H, 0adH
	DB	0bbH, 0b7H, 0a3H, 0acH, 0b7H, 0b5H, 0bbH, 0d8H, ' true', 0a1H, 0a3H
	DB	0aH, ' "setpause" : ', 0b0H, 0d1H, ' arg / 100 ', 0d7H, 0f7H, 0ceH
	DB	0aaH, 0c0H, 0acH, 0bbH, 0f8H, 0bbH, 0d8H, 0caH, 0d5H, 0b2H, 0ceH
	DB	0caH, 0fdH, ' pause ', 0b5H, 0c4H, 0d0H, 0c2H, 0d6H, 0b5H, 0a1H
	DB	0a3H, 0aH, ' "setstepmul" : ', 0b0H, 0d1H, ' arg / 100 ', 0d7H
	DB	0f7H, 0ceH, 0aaH, 0c0H, 0acH, 0bbH, 0f8H, 0bbH, 0d8H, 0caH, 0d5H
	DB	0b2H, 0ceH, 0caH, 0fdH, ' step mutiplier ', 0b5H, 0c4H, 0d0H, 0c2H
	DB	0d6H, 0b5H, 0a1H, 0a3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EMONHILO@?O?T?J?$LOlua?$LK?K?P?D?$LP?b?H?m?$LM?$PO?W?w?U?$NP?$AA@
CONST	SEGMENT
??_C@_0BG@EMONHILO@?O?T?J?$LOlua?$LK?K?P?D?$LP?b?H?m?$LM?$PO?W?w?U?$NP?$AA@ DB 0cfH
	DB	0d4H, 0caH, 0beH, 'lua', 0baH, 0cbH, 0d0H, 0c4H, 0bfH, 0e2H, 0c8H
	DB	0edH, 0bcH, 0feH, 0d7H, 0f7H, 0d5H, 0dfH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0KO@JANFHFAH@?H?g?$LJ?$PL?F?d?$LC?N?J?$PN?5v?5?$LF?D?V?$LF?N?$KK?$LM?Y?$KD?$KInil?5?$LL?r?5fa@
CONST	SEGMENT
??_C@_0KO@JANFHFAH@?H?g?$LJ?$PL?F?d?$LC?N?J?$PN?5v?5?$LF?D?V?$LF?N?$KK?$LM?Y?$KD?$KInil?5?$LL?r?5fa@ DB 0c8H
	DB	0e7H, 0b9H, 0fbH, 0c6H, 0e4H, 0b2H, 0ceH, 0caH, 0fdH, ' v ', 0b5H
	DB	0c4H, 0d6H, 0b5H, 0ceH, 0aaH, 0bcH, 0d9H, 0a3H, 0a8H, 'nil ', 0bbH
	DB	0f2H, ' false', 0a3H, 0a9H, 0a3H, 0acH, ' ', 0cbH, 0fcH, 0beH, 0cdH
	DB	0b5H, 0f7H, 0d3H, 0c3H, ' error', 0a3H, 0bbH, ' ', 0b7H, 0f1H, 0d4H
	DB	0f2H, 0a3H, 0acH, 0b7H, 0b5H, 0bbH, 0d8H, 0cbH, 0f9H, 0d3H, 0d0H
	DB	0b5H, 0c4H, 0b2H, 0ceH, 0caH, 0fdH, 0a1H, 0a3H, ' ', 0d4H, 0daH
	DB	0b4H, 0edH, 0ceH, 0f3H, 0c7H, 0e9H, 0bfH, 0f6H, 0caH, 0b1H, 0a3H
	DB	0acH, ' message ', 0d6H, 0b8H, 0c4H, 0c7H, 0b8H, 0f6H, 0b4H, 0edH
	DB	0ceH, 0f3H, 0b6H, 0d4H, 0cfH, 0f3H, 0a3H, 0bbH, ' ', 0c8H, 0e7H
	DB	0b9H, 0fbH, 0b2H, 0bbH, 0ccH, 0e1H, 0b9H, 0a9H, 0d5H, 0e2H, 0b8H
	DB	0f6H, 0b2H, 0ceH, 0caH, 0fdH, 0a3H, 0acH, 0b2H, 0ceH, 0caH, 0fdH
	DB	0c4H, 0acH, 0c8H, 0cfH, 0ceH, 0aaH, ' "assertion failed!" ', 0a1H
	DB	0a3H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08PMLCGGEP@_VERSION?$AA@
CONST	SEGMENT
??_C@_08PMLCGGEP@_VERSION?$AA@ DB '_VERSION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NIGGJGKC@_G?$AA@
CONST	SEGMENT
??_C@_02NIGGJGKC@_G?$AA@ DB '_G', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PJMKFLDO@ztest?$AA@
CONST	SEGMENT
??_C@_05PJMKFLDO@ztest?$AA@ DB 'ztest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDLLDIBI@xpcall?$AA@
CONST	SEGMENT
??_C@_06GDLLDIBI@xpcall?$AA@ DB 'xpcall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version?$AA@
CONST	SEGMENT
??_C@_07CPCPJPKL@version?$AA@ DB 'version', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HNCIIKBA@usage?$AA@
CONST	SEGMENT
??_C@_05HNCIIKBA@usage?$AA@ DB 'usage', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JOIMPOJO@tonumber?$AA@
CONST	SEGMENT
??_C@_08JOIMPOJO@tonumber?$AA@ DB 'tonumber', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MCAAIDEK@setmetatable?$AA@
CONST	SEGMENT
??_C@_0N@MCAAIDEK@setmetatable?$AA@ DB 'setmetatable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGNCCACI@select?$AA@
CONST	SEGMENT
??_C@_06LGNCCACI@select?$AA@ DB 'select', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONPLLLOI@rawset?$AA@
CONST	SEGMENT
??_C@_06ONPLLLOI@rawset?$AA@ DB 'rawset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DCIAHLCA@rawget?$AA@
CONST	SEGMENT
??_C@_06DCIAHLCA@rawget?$AA@ DB 'rawget', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFKMAGPK@rawlen?$AA@
CONST	SEGMENT
??_C@_06FFKMAGPK@rawlen?$AA@ DB 'rawlen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LCBKMMAG@rawequal?$AA@
CONST	SEGMENT
??_C@_08LCBKMMAG@rawequal?$AA@ DB 'rawequal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print?$AA@
CONST	SEGMENT
??_C@_05IJDJACGD@print?$AA@ DB 'print', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JAJCNIIJ@pcall?$AA@
CONST	SEGMENT
??_C@_05JAJCNIIJ@pcall?$AA@ DB 'pcall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PEAECDOC@pairs?$AA@
CONST	SEGMENT
??_C@_05PEAECDOC@pairs?$AA@ DB 'pairs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CJGEDOF@next?$AA@
CONST	SEGMENT
??_C@_04CJGEDOF@next?$AA@ DB 'next', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BBBJLLLK@loadstring?$AA@
CONST	SEGMENT
??_C@_0L@BBBJLLLK@loadstring?$AA@ DB 'loadstring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EONOHKEP@load?$AA@
CONST	SEGMENT
??_C@_04EONOHKEP@load?$AA@ DB 'load', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BNNFLGCJ@loadfile?$AA@
CONST	SEGMENT
??_C@_08BNNFLGCJ@loadfile?$AA@ DB 'loadfile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MGIEFEAJ@ipairs?$AA@
CONST	SEGMENT
??_C@_06MGIEFEAJ@ipairs?$AA@ DB 'ipairs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCJFHION@help?$AA@
CONST	SEGMENT
??_C@_04PCJFHION@help?$AA@ DB 'help', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LGLOEPAG@getmetatable?$AA@
CONST	SEGMENT
??_C@_0N@LGLOEPAG@getmetatable?$AA@ DB 'getmetatable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKNBDEPB@exit?$AA@
CONST	SEGMENT
??_C@_04MKNBDEPB@exit?$AA@ DB 'exit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONNDGCDK@dofile?$AA@
CONST	SEGMENT
??_C@_06ONNDGCDK@dofile?$AA@ DB 'dofile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EBPADADD@desc?$AA@
CONST	SEGMENT
??_C@_04EBPADADD@desc?$AA@ DB 'desc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PPJNHBMP@description?$AA@
CONST	SEGMENT
??_C@_0M@PPJNHBMP@description?$AA@ DB 'description', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LCPHGAHP@cls?$AA@
CONST	SEGMENT
??_C@_03LCPHGAHP@cls?$AA@ DB 'cls', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHLAELG@clear?$AA@
CONST	SEGMENT
??_C@_05MEHLAELG@clear?$AA@ DB 'clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CKFEAJJE@collectgarbage?$AA@
CONST	SEGMENT
??_C@_0P@CKFEAJJE@collectgarbage?$AA@ DB 'collectgarbage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBBPHNDK@authors?$AA@
CONST	SEGMENT
??_C@_07DBBPHNDK@authors?$AA@ DB 'authors', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMEIIFFN@assert?$AA@
CONST	SEGMENT
??_C@_06GMEIIFFN@assert?$AA@ DB 'assert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JCKLCKIH@isrunning?$AA@
CONST	SEGMENT
??_C@_09JCKLCKIH@isrunning?$AA@ DB 'isrunning', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KABEJKKP@setstepmul?$AA@
CONST	SEGMENT
??_C@_0L@KABEJKKP@setstepmul?$AA@ DB 'setstepmul', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08ONFIAENP@setpause?$AA@
CONST	SEGMENT
??_C@_08ONFIAENP@setpause?$AA@ DB 'setpause', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNBNFAL@step?$AA@
CONST	SEGMENT
??_C@_04CNBNFAL@step?$AA@ DB 'step', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count?$AA@
CONST	SEGMENT
??_C@_05IOMEMJEC@count?$AA@ DB 'count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JHIJCABF@collect?$AA@
CONST	SEGMENT
??_C@_07JHIJCABF@collect?$AA@ DB 'collect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LDHOHMPD@restart?$AA@
CONST	SEGMENT
??_C@_07LDHOHMPD@restart?$AA@ DB 'restart', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PEGFANN@stop?$AA@
CONST	SEGMENT
??_C@_04PEGFANN@stop?$AA@ DB 'stop', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
?opts@?1??luaB_collectgarbage@@9@9 DD FLAT:??_C@_04PEGFANN@stop?$AA@ ; `luaB_collectgarbage'::`2'::opts
	DD	FLAT:??_C@_07LDHOHMPD@restart?$AA@
	DD	FLAT:??_C@_07JHIJCABF@collect?$AA@
	DD	FLAT:??_C@_05IOMEMJEC@count?$AA@
	DD	FLAT:??_C@_04CNBNFAL@step?$AA@
	DD	FLAT:??_C@_08ONFIAENP@setpause?$AA@
	DD	FLAT:??_C@_0L@KABEJKKP@setstepmul?$AA@
	DD	FLAT:??_C@_09JCKLCKIH@isrunning?$AA@
	DD	00H
?optsnum@?1??luaB_collectgarbage@@9@9 DD 00H		; `luaB_collectgarbage'::`2'::optsnum
	DD	01H
	DD	02H
	DD	03H
	DD	05H
	DD	06H
	DD	07H
	DD	09H
	ORG $+4
_base_funcs DD	FLAT:??_C@_06GMEIIFFN@assert?$AA@
	DD	FLAT:_luaB_assert
	DD	FLAT:??_C@_07DBBPHNDK@authors?$AA@
	DD	FLAT:_luaB_authors
	DD	FLAT:??_C@_0P@CKFEAJJE@collectgarbage?$AA@
	DD	FLAT:_luaB_collectgarbage
	DD	FLAT:??_C@_05MEHLAELG@clear?$AA@
	DD	FLAT:_luaB_clear
	DD	FLAT:??_C@_03LCPHGAHP@cls?$AA@
	DD	FLAT:_luaB_clear
	DD	FLAT:??_C@_0M@PPJNHBMP@description?$AA@
	DD	FLAT:_luaB_getDescription
	DD	FLAT:??_C@_04EBPADADD@desc?$AA@
	DD	FLAT:_luaB_getDescription
	DD	FLAT:??_C@_06ONNDGCDK@dofile?$AA@
	DD	FLAT:_luaB_dofile
	DD	FLAT:??_C@_05KKCIMGE@error?$AA@
	DD	FLAT:_luaB_error
	DD	FLAT:??_C@_04MKNBDEPB@exit?$AA@
	DD	FLAT:_luaB_exit
	DD	FLAT:??_C@_0N@LGLOEPAG@getmetatable?$AA@
	DD	FLAT:_luaB_getmetatable
	DD	FLAT:??_C@_04PCJFHION@help?$AA@
	DD	FLAT:_luaB_help
	DD	FLAT:??_C@_06MGIEFEAJ@ipairs?$AA@
	DD	FLAT:_luaB_ipairs
	DD	FLAT:??_C@_08BNNFLGCJ@loadfile?$AA@
	DD	FLAT:_luaB_loadfile
	DD	FLAT:??_C@_04EONOHKEP@load?$AA@
	DD	FLAT:_luaB_load
	DD	FLAT:??_C@_0L@BBBJLLLK@loadstring?$AA@
	DD	FLAT:_luaB_load
	DD	FLAT:??_C@_04CJGEDOF@next?$AA@
	DD	FLAT:_luaB_next
	DD	FLAT:??_C@_05PEAECDOC@pairs?$AA@
	DD	FLAT:_luaB_pairs
	DD	FLAT:??_C@_05JAJCNIIJ@pcall?$AA@
	DD	FLAT:_luaB_pcall
	DD	FLAT:??_C@_05IJDJACGD@print?$AA@
	DD	FLAT:_luaB_print
	DD	FLAT:??_C@_08LCBKMMAG@rawequal?$AA@
	DD	FLAT:_luaB_rawequal
	DD	FLAT:??_C@_06FFKMAGPK@rawlen?$AA@
	DD	FLAT:_luaB_rawlen
	DD	FLAT:??_C@_06DCIAHLCA@rawget?$AA@
	DD	FLAT:_luaB_rawget
	DD	FLAT:??_C@_06ONPLLLOI@rawset?$AA@
	DD	FLAT:_luaB_rawset
	DD	FLAT:??_C@_06LGNCCACI@select?$AA@
	DD	FLAT:_luaB_select
	DD	FLAT:??_C@_0N@MCAAIDEK@setmetatable?$AA@
	DD	FLAT:_luaB_setmetatable
	DD	FLAT:??_C@_08JOIMPOJO@tonumber?$AA@
	DD	FLAT:_luaB_tonumber
	DD	FLAT:??_C@_08FNIIFOJC@tostring?$AA@
	DD	FLAT:_luaB_tostring
	DD	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DD	FLAT:_luaB_type
	DD	FLAT:??_C@_05HNCIIKBA@usage?$AA@
	DD	FLAT:_luaB_usage
	DD	FLAT:??_C@_07CPCPJPKL@version?$AA@
	DD	FLAT:_luaB_version
	DD	FLAT:??_C@_06GDLLDIBI@xpcall?$AA@
	DD	FLAT:_luaB_xpcall
	DD	FLAT:??_C@_05PJMKFLDO@ztest?$AA@
	DD	FLAT:_luaB_ztest
	DD	FLAT:??_C@_02NIGGJGKC@_G?$AA@
	DD	00H
	DD	FLAT:??_C@_08PMLCGGEP@_VERSION?$AA@
	DD	00H
	DD	00H
	DD	00H
_base_funcs_note_chs DD FLAT:??_C@_06GMEIIFFN@assert?$AA@
	DD	FLAT:??_C@_0KO@JANFHFAH@?H?g?$LJ?$PL?F?d?$LC?N?J?$PN?5v?5?$LF?D?V?$LF?N?$KK?$LM?Y?$KD?$KInil?5?$LL?r?5fa@
	DD	FLAT:??_C@_07DBBPHNDK@authors?$AA@
	DD	FLAT:??_C@_0BG@EMONHILO@?O?T?J?$LOlua?$LK?K?P?D?$LP?b?H?m?$LM?$PO?W?w?U?$NP?$AA@
	DD	FLAT:??_C@_0P@CKFEAJJE@collectgarbage?$AA@
	DD	FLAT:??_C@_0BLJ@JAGMBHNF@?$MA?$KM?$LL?x?$LL?X?J?U?5?6?5?$CCstop?$CC?3?5?M?$KD?V?$LJ?$MA?$KM?$LL?x?$LL?X?J?U?$KB@
	DD	FLAT:??_C@_05MEHLAELG@clear?$AA@
	DD	FLAT:??_C@_0BB@DLNNKEPM@?G?e?$LD?$PN?$LF?$LB?G?$LA?F?A?D?$LL?D?Z?H?$NN?$AA@
	DD	FLAT:??_C@_03LCPHGAHP@cls?$AA@
	DD	FLAT:??_C@_0BO@DIDGHNKN@?G?e?$LD?$PN?$LF?$LB?G?$LA?F?A?D?$LL?D?Z?H?$NN?$KD?$KM?S?kclear?R?$LL?Q?y?$AA@
	DD	FLAT:??_C@_06ONNDGCDK@dofile?$AA@
	DD	FLAT:??_C@_0CM@BKHIOMOH@?$LE?r?$LP?$KK?$LI?C?C?$PL?W?V?$LF?D?N?D?$LM?$PO?$KD?$KM?$LC?$KC?V?$LE?P?P?N?D?$LM?$PO?V?P?$LF?D@
	DD	FLAT:??_C@_05KKCIMGE@error?$AA@
	DD	FLAT:??_C@_0CO@MGGLOCON@?V?U?V?$LJ?K?y?$LB?$KD?$LL?$KE?$LF?D?$LK?$KP?J?$PN?$KD?$KM?E?W?$LD?v?5message?5?O@
	DD	FLAT:??_C@_04MKNBDEPB@exit?$AA@
	DD	FLAT:??_C@_08ECHOJKFB@?M?K?$LD?v?$LL?$LH?$LO?$LD?$AA@
	DD	FLAT:??_C@_06EDAGHKOI@gcinfo?$AA@
	DD	FLAT:??_C@_0L@HMHBHHNF@?$LL?q?H?$KBgc?P?E?O?$KC?$AA@
	DD	FLAT:??_C@_0N@LGLOEPAG@getmetatable?$AA@
	DD	FLAT:??_C@_0FI@LNEDBPAH@?H?g?$LJ?$PL?$LG?T?O?s?C?$LL?S?P?T?$KK?$LB?m?$KD?$KM?$LH?$LF?$LL?X?$LP?U?$KD?$LL?H?g?$LJ?$PL?$LG?T@
	DD	FLAT:??_C@_04PCJFHION@help?$AA@
	DD	FLAT:??_C@_08ENPOPECB@?O?T?J?$LO?$LA?o?V?z?$AA@
	DD	FLAT:??_C@_06MGIEFEAJ@ipairs?$AA@
	DD	FLAT:??_C@_0GD@BCHKILID@?$LH?$LF?$LL?X?H?$PN?$LI?v?V?$LF?$KD?$LK?$LF?$PM?$LE?z?F?w?$KB?$KC?$LE?$KL?H?k?$LF?D?$LB?m?5t?$KB?$KC@
	DD	FLAT:??_C@_08BNNFLGCJ@loadfile?$AA@
	DD	FLAT:??_C@_0DJ@FJIPOJKF@?$LE?S?N?D?$LM?$PO?V?P?$LL?q?H?$KB?$LE?z?B?k?$LP?i?$KD?$KM?H?g?$LJ?$PL?C?$LL?S?P?V?$LI?$LG?$KI@
	DD	FLAT:??_C@_04EONOHKEP@load?$AA@
	DD	FLAT:??_C@_0BFP@JCAMCHOC@?M?$KI?$LJ?$PN?$LE?$KL?H?k?$LK?$KP?J?$PN?5func?5?$LF?D?$LH?$LF?$LL?X?V?$LF?$LL?q?H?$KB?$LE?z@
	DD	FLAT:??_C@_0L@BBBJLLLK@loadstring?$AA@
	DD	FLAT:??_C@_0CL@KDEJAEID@?S?k?5load?5?$MA?$OA?K?F?$KD?$KM?V?$LL?$LC?$LL?$LJ?$PN?J?G?$LE?S?W?V?$LH?$PL?$LE?$KO?V?P@
	DD	FLAT:??_C@_04CJGEDOF@next?$AA@
	DD	FLAT:??_C@_0BL@PBNINAND@?$LH?$LF?$LL?X?$LE?$KL?H?k?$LF?D?$LB?m?V?P?O?B?R?$LL?$LI?v?$LM?$PM?V?$LF?$LG?T?$AA@
	DD	FLAT:??_C@_05JAJCNIIJ@pcall?$AA@
	DD	FLAT:??_C@_0LM@CCOODELD@?R?T?$LB?$KD?$LL?$KE?D?$KD?J?$LN?$LF?w?S?C?$LE?$KL?H?k?$LF?D?$LK?$KP?J?$PN?$KD?$KM?R?$LC?$LO?M?J?G@
	DD	FLAT:??_C@_05IJDJACGD@print?$AA@
	DD	FLAT:??_C@_0FN@GIFILDMN@?$LN?v?W?w?N?$KK?$LP?l?K?Y?$LC?i?$LP?$LE?D?$LD?$LI?v?V?$LF?$LF?D?$LJ?$KE?$LO?$NP?$KD?$KM?$LC?$LL?S?C@
	DD	FLAT:??_C@_08LCBKMMAG@rawequal?$AA@
	DD	FLAT:??_C@_0HD@KAAICMEO@?R?T?5raw?5?W?w?N?$KK?G?$LA?W?$LK?$LF?D?$LK?$KP?J?$PN?$LO?y?$LB?m?J?$LO?$LI?C?$LH?$LN?$LH@
	DD	FLAT:??_C@_06DCIAHLCA@rawget?$AA@
	DD	FLAT:??_C@_0EK@HOOBFFHD@?$LL?q?H?$KB?5table?5?V?P?$LM?$PM?5index?5?$LF?D?$LJ?X?A?$KK?V?$LF?$KD?$KM@
	DD	FLAT:??_C@_06ONPLLLOI@rawset?$AA@
	DD	FLAT:??_C@_0HL@JIGMHII@?$LN?$KL?5table?$FLindex?$FN?5?$LF?D?V?$LF?I?h?V?C?N?$KK?5value@
	DD	FLAT:??_C@_06LGNCCACI@select?$AA@
	DD	FLAT:??_C@_0KI@BKGLFMBF@index?5?$LP?I?R?T?J?G?J?$PN?W?V?$LL?r?U?$NP?W?V?$LH?$PL?5?8?$CD?8?5?$KB?$KD?$LF@
	DD	FLAT:??_C@_0N@MCAAIDEK@setmetatable?$AA@
	DD	FLAT:??_C@_0JI@CGNAGBNM@?$LI?x?5table?5?$LJ?X?A?$KK?T?$KK?$LB?m?5metatable?5?$KB?$KD?$LH?$LF@
	DD	FLAT:??_C@_08JOIMPOJO@tonumber?$AA@
	DD	FLAT:??_C@_0ML@FKNGDJCH@?5?$LD?$KC?J?T?$LA?Q?5e?5?$KD?$KI?$LF?Z?R?$LL?$LC?N?J?$PN?$KD?$KJ?W?$KK?$LL?$LL?N?$KK?J?$KO?$LN?x@
	DD	FLAT:??_C@_08FNIIFOJC@tostring?$AA@
	DD	FLAT:??_C@_0LH@BPMOIOAF@?D?$NM?$LN?$KL?H?N?R?b?$MA?$OA?P?M?$LF?D?V?$LF?W?$KK?$LL?$LL?N?$KK?$LK?O?J?J?$LF?D?W?V?$LH?$PL@
	DD	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DD	FLAT:??_C@_0JD@IBGGALMK@?$LH?$LF?$LL?X?5v?5?$LF?D?$MA?$OA?P?M?$KD?$KM?$MA?$OA?P?M?R?T?W?V?$LH?$PL?$LE?$KO?P?N?J?$LN?$LH@
	DD	FLAT:??_C@_06FIONAGJL@unpack?$AA@
	DD	FLAT:??_C@_0EK@NGIAAGBN@?$LH?$LF?$LL?X?$LB?m?V?P?$LF?D?$LI?w?$LI?v?S?r?$LF?D?V?$LF?0?$LF?H?$LM?$NL?S?Z?$KD?$LK?6?5r@
	DD	FLAT:??_C@_05HNCIIKBA@usage?$AA@
	DD	FLAT:??_C@_0M@PFJHOPOH@?O?T?J?$LOlua?$LA?o?V?z?$AA@
	DD	FLAT:??_C@_07CPCPJPKL@version?$AA@
	DD	FLAT:??_C@_0O@EHKFACGH@?O?T?J?$LOlua?$LA?f?$LB?$LO?$LK?E?$AA@
	DD	FLAT:??_C@_06GDLLDIBI@xpcall?$AA@
	DD	FLAT:??_C@_0IK@CAPLCHMD@?S?k?5pcall?5?$CIf?0?5arg1?0?5?4?4?4?$CJ?5?$MA?$OA?K?F?$KB?$KD?$LC?$LL@
	DD	FLAT:??_C@_05PJMKFLDO@ztest?$AA@
	DD	FLAT:??_C@_08IMDOEIMN@?T?$NN?N?$NO?N?D?$LF?$LF?$AA@
_base_funcs_note_fre DD FLAT:??_C@_06GMEIIFFN@assert?$AA@
	DD	FLAT:??_C@_0BAL@KMFOEKGD@?5Si?5la?5valeur?5de?5ses?5param?$KI?$KItres@
	DD	FLAT:??_C@_07DBBPHNDK@authors?$AA@
	DD	FLAT:??_C@_0DC@CDPJFCGL@?5Biblioth?$KI?$KIque?5centrale?5de?5logic@
	DD	FLAT:??_C@_0P@CKFEAJJE@collectgarbage?$AA@
	DD	FLAT:??_C@_0DGC@IPAKCGAD@?5Recyclage?5d?8ordures?5?6?5?$CCStop?$CC?3?5a@
	DD	FLAT:??_C@_05MEHLAELG@clear?$AA@
	DD	FLAT:??_C@_0CG@FJGBEIFH@?5Efface?5le?5contenu?5d?8?$KI?$KGcran?5actu@
	DD	FLAT:??_C@_03LCPHGAHP@cls?$AA@
	DD	FLAT:??_C@_0DE@JICLAMHJ@?5Efface?5le?5contenu?5d?8?$KI?$KGcran?5actu@
	DD	FLAT:??_C@_06ONNDGCDK@dofile?$AA@
	DD	FLAT:??_C@_0FL@FAJHGOBG@?5Ouvrir?5un?5fichier?5pour?5le?5nom?5d@
	DD	FLAT:??_C@_05KKCIMGE@error?$AA@
	DD	FLAT:??_C@_0EP@PIJCBEIB@?5La?5fonction?5de?5protection?5de?5fi@
	DD	FLAT:??_C@_04MKNBDEPB@exit?$AA@
	DD	FLAT:??_C@_0CA@FGHNAFKD@?5Le?5retrait?5de?5l?8environnement?4?$AA@
	DD	FLAT:??_C@_06EDAGHKOI@gcinfo?$AA@
	DD	FLAT:??_C@_0CI@NALIMHDF@?5Pour?5acqu?$KI?$KGrir?5des?5informations@
	DD	FLAT:??_C@_0N@LGLOEPAG@getmetatable?$AA@
	DD	FLAT:??_C@_0LJ@FGEIIAGN@Si?5l?8objet?5n?8a?5pas?5d?8?$KI?$KGl?$KI?$KGment?5d@
	DD	FLAT:??_C@_04PCJFHION@help?$AA@
	DD	FLAT:??_C@_0BF@CJGBKPP@?5L?8affichage?5d?8aide?4?$AA@
	DD	FLAT:??_C@_06MGIEFEAJ@ipairs?$AA@
	DD	FLAT:??_C@_0JO@JADFJLCG@?5Le?5retour?5de?5trois?5valeurs?3?5des@
	DD	FLAT:??_C@_08BNNFLGCJ@loadfile?$AA@
	DD	FLAT:??_C@_0HC@JGJODJKM@?$DP?5partir?5d?8un?5fichier?5d?8un?5bloc?5@
	DD	FLAT:??_C@_04EONOHKEP@load?$AA@
	DD	FLAT:??_C@_0CMD@IPDNPDKH@?5En?5fonction?5de?5la?5valeur?5de?5ret@
	DD	FLAT:??_C@_0L@BBBJLLLK@loadstring?$AA@
	DD	FLAT:??_C@_0EP@ILNELIKM@?5Et?5de?5charge?5similaires?0?5mais?5d@
	DD	FLAT:??_C@_04CJGEDOF@next?$AA@
	DD	FLAT:??_C@_0DH@GLINNKKE@?5Renvoie?5une?5table?5en?5entrant?5un@
	DD	FLAT:??_C@_05JAJCNIIJ@pcall?$AA@
	DD	FLAT:??_C@_0BGK@CNELNDDM@?5En?5fonction?5de?5modes?5de?5protect@
	DD	FLAT:??_C@_05IJDJACGD@print?$AA@
	DD	FLAT:??_C@_0KE@GDPEMNBN@?5Uniquement?5comme?5un?5outil?5de?5v?$KI@
	DD	FLAT:??_C@_08LCBKMMAG@rawequal?$AA@
	DD	FLAT:??_C@_0NG@LLAAJDGI@?5En?5fonction?5de?5brut?5comme?5pr?$KI?$KGf@
	DD	FLAT:??_C@_06DCIAHLCA@rawget?$AA@
	DD	FLAT:??_C@_0HK@FGIOHHAI@?5Association?5de?5valeurs?5de?5cl?$KI?$KG?5@
	DD	FLAT:??_C@_06ONPLLLOI@rawset?$AA@
	DD	FLAT:??_C@_0MG@BGPJEELN@?5La?5valeur?5de?5table?5?$FLindex?$FN?5agen@
	DD	FLAT:??_C@_06LGNCCACI@select?$AA@
	DD	FLAT:??_C@_0BAI@LLPMMAEH@?5Index?5peuvent?5?$KI?$LKtre?5des?5nombres@
	DD	FLAT:??_C@_0N@MCAAIDEK@setmetatable?$AA@
	DD	FLAT:??_C@_0PO@FHCMBDIA@?5Une?5table?5d?8?$KI?$KGl?$KI?$KGments?5?$KI?$KE?5Assoc@
	DD	FLAT:??_C@_08JOIMPOJO@tonumber?$AA@
	DD	FLAT:??_C@_0BIG@GOLMNLDL@?5Essayer?5de?5mettre?5e?5?$CIpremier?5pa@
	DD	FLAT:??_C@_08FNIIFOJC@tostring?$AA@
	DD	FLAT:??_C@_0BIE@IGMKAOCN@?5Peut?5?$KI?$LKtre?5tout?5type?5de?5convers@
	DD	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DD	FLAT:??_C@_0LN@LBNHJOBO@?5Type?5de?5retour?5de?5type?5V?0?5sous?5@
	DD	FLAT:??_C@_06FIONAGJL@unpack?$AA@
	DD	FLAT:??_C@_0HG@JGIEAADH@?5Valeur?5de?5retour?5dans?5la?5table?0@
	DD	FLAT:??_C@_05HNCIIKBA@usage?$AA@
	DD	FLAT:??_C@_0BG@NBIOKOFO@?5Afficher?5l?8aide?5lua?4?$AA@
	DD	FLAT:??_C@_07CPCPJPKL@version?$AA@
	DD	FLAT:??_C@_0CE@PGJELJLM@?5Affiche?5le?5num?$KI?$KGro?5de?5version?5l@
	DD	FLAT:??_C@_06GDLLDIBI@xpcall?$AA@
	DD	FLAT:??_C@_0NI@EGNKKADN@?5Et?5pcall?5F?0?5ARG1?0?4?4?4?$CJ?5similaire@
	DD	FLAT:??_C@_05PJMKFLDO@ztest?$AA@
	DD	FLAT:??_C@_0BC@OHKCJLJF@?5Pas?5de?5document?4?$AA@
_base_funcs_note_eng DD FLAT:??_C@_06GMEIIFFN@assert?$AA@
	DD	FLAT:??_C@_0PL@PPGPJAOF@?5If?5the?5value?5of?5the?5parameter?5V@
	DD	FLAT:??_C@_07DBBPHNDK@authors?$AA@
	DD	FLAT:??_C@_0CL@EGPKEPDF@?5Display?5Lua?5core?5library?5softwa@
	DD	FLAT:??_C@_0P@CKFEAJJE@collectgarbage?$AA@
	DD	FLAT:??_C@_0CLG@MHPOFKFP@?5Garbage?5collection?5?6?5?$CCstop?$CC?3sto@
	DD	FLAT:??_C@_05MEHLAELG@clear?$AA@
	DD	FLAT:??_C@_0CD@GIFDFOKH@?5Clear?5the?5current?5screen?5conten@
	DD	FLAT:??_C@_03LCPHGAHP@cls?$AA@
	DD	FLAT:??_C@_0DM@FOIOOHIH@?5Clear?5the?5contents?5of?5the?5curre@
	DD	FLAT:??_C@_06ONNDGCDK@dofile?$AA@
	DD	FLAT:??_C@_0EJ@DGJFFBHF@?5Open?5the?5file?5with?5the?5name?5and@
	DD	FLAT:??_C@_05KKCIMGE@error?$AA@
	DD	FLAT:??_C@_0FC@EOKDBHAL@?5Terminates?5the?5protected?5functi@
	DD	FLAT:??_C@_04MKNBDEPB@exit?$AA@
	DD	FLAT:??_C@_0BD@PJKNDGCE@?5Exit?5environment?4?$AA@
	DD	FLAT:??_C@_06EDAGHKOI@gcinfo?$AA@
	DD	FLAT:??_C@_0BF@MHOHDPLO@?5Get?5GC?5information?4?$AA@
	DD	FLAT:??_C@_0N@LGLOEPAG@getmetatable?$AA@
	DD	FLAT:??_C@_0LO@DNFGBCFA@?5If?5the?5object?5does?5not?5have?5a?5m@
	DD	FLAT:??_C@_04PCJFHION@help?$AA@
	DD	FLAT:??_C@_0P@LLHOPFNO@?5Display?5help?4?$AA@
	DD	FLAT:??_C@_06MGIEFEAJ@ipairs?$AA@
	DD	FLAT:??_C@_0KM@JGBEJALH@?5Returns?5three?5values?3?5the?5itera@
	DD	FLAT:??_C@_08BNNFLGCJ@loadfile?$AA@
	DD	FLAT:??_C@_0FN@KPBHGFLD@?5Gets?5the?5code?5block?5from?5the?5fi@
	DD	FLAT:??_C@_04EONOHKEP@load?$AA@
	DD	FLAT:??_C@_0CJJ@GDHFJCG@?5Gets?5a?5block?5of?5code?5fragments?5@
	DD	FLAT:??_C@_0L@BBBJLLLK@loadstring?$AA@
	DD	FLAT:??_C@_0DI@GMENKGGP@?5Like?5load?0?5it?8s?5just?5getting?5co@
	DD	FLAT:??_C@_04CJGEDOF@next?$AA@
	DD	FLAT:??_C@_0DG@HFJGEFJL@?5Returns?5the?5next?5key?5key?5pair?5i@
	DD	FLAT:??_C@_05JAJCNIIJ@pcall?$AA@
	DD	FLAT:??_C@_0BCK@BOCGOANJ@?5Call?5the?5incoming?5function?5in?5p@
	DD	FLAT:??_C@_05IJDJACGD@print?$AA@
	DD	FLAT:??_C@_0IK@GDKDFCKG@?5As?5a?5tool?5for?5quickly?5looking?5a@
	DD	FLAT:??_C@_08LCBKMMAG@rawequal?$AA@
	DD	FLAT:??_C@_0LF@PKNDHPCC@?5Functions?5that?5use?5raw?5as?5a?5pre@
	DD	FLAT:??_C@_06DCIAHLCA@rawget?$AA@
	DD	FLAT:??_C@_0HO@HGCBPGHB@?5Gets?5the?5associated?5value?5of?5th@
	DD	FLAT:??_C@_06ONPLLLOI@rawset?$AA@
	DD	FLAT:??_C@_0JE@BFCHJBJB@?5Set?5the?5value?5of?5table?$FLindex?$FN?5t@
	DD	FLAT:??_C@_06LGNCCACI@select?$AA@
	DD	FLAT:??_C@_0PD@CBLGHCJO@?5Index?5can?5be?5a?5number?5or?5charac@
	DD	FLAT:??_C@_0N@MCAAIDEK@setmetatable?$AA@
	DD	FLAT:??_C@_0PO@NGGJNABH@?5Give?5the?5?$CCtable?$CC?5to?5associated?5@
	DD	FLAT:??_C@_08JOIMPOJO@tonumber?$AA@
	DD	FLAT:??_C@_0BFM@CFFEGNIJ@?5Try?5converting?5e?5?$CIfirst?5paramet@
	DD	FLAT:??_C@_08FNIIFOJC@tostring?$AA@
	DD	FLAT:??_C@_0BBB@PJNMCJFP@?5Converts?5any?5type?5of?5value?5to?5t@
	DD	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DD	FLAT:??_C@_0LC@DPMGNINL@?5Returns?5the?5type?5of?5v?0?5and?5the?5@
	DD	FLAT:??_C@_06FIONAGJL@unpack?$AA@
	DD	FLAT:??_C@_0GO@DDDBPCFJ@Returns?5the?5value?5of?5each?5domain@
	DD	FLAT:??_C@_05HNCIIKBA@usage?$AA@
	DD	FLAT:??_C@_0BD@GMPIGENL@?5Display?5Lua?5help?4?$AA@
	DD	FLAT:??_C@_07CPCPJPKL@version?$AA@
	DD	FLAT:??_C@_0CB@NHLIKOMI@?5Display?5the?5Lua?5version?5number?4@
	DD	FLAT:??_C@_06GDLLDIBI@xpcall?$AA@
	DD	FLAT:??_C@_0OE@KLGOIKF@?5Similar?5to?5pcall?5?$CIF?0?5arg1?0?4?4?4?$CJ?4@
	DD	FLAT:??_C@_05PJMKFLDO@ztest?$AA@
	DD	FLAT:??_C@_0O@KFENAANH@?5No?5document?4?$AA@
CONST	ENDS
;	COMDAT ??_C@_08FNIIFOJC@tostring?$AA@
CONST	SEGMENT
??_C@_08FNIIFOJC@tostring?$AA@ DB 'tostring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FFL@EBMBOIJP@Lua?5is?5a?5small?5scripting?5languag@
CONST	SEGMENT
??_C@_0FFL@EBMBOIJP@Lua?5is?5a?5small?5scripting?5languag@ DB 'Lua is a s'
	DB	'mall scripting language. Brazil Catholic University of Rio De'
	DB	' Janeiro (Pontifical Catholic University of Rio de Janeiro) a'
	DB	' research team, Roberto Ierusalimschy, Waldemar Celes by Luiz'
	DB	' Henrique and de Figueiredo formed and developed in 1993. The'
	DB	' design is designed to embed applications, providing flexible'
	DB	' extension and customization capabilities for applications. L'
	DB	'ua is written by standard C and can be compiled and run on al'
	DB	'most all operating systems and platforms. Lua does not provid'
	DB	'e a powerful library, which is determined by its location. Th'
	DB	'erefore, Lua is not suitable as a language for developing ind'
	DB	'ependent applications. Lua has a simultaneous JIT project tha'
	DB	't provides immediate compile capabilities on a particular pla'
	DB	'tform. ', 0aH, ' Lua scripts can easily be called by C / C++ '
	DB	'code, and can also call C / C++ functions in turn, which make'
	DB	's Lua available for applications in a wide variety of applica'
	DB	'tions. Not only as an extension script, but also as an ordina'
	DB	'ry configuration file instead of XML, ini and other file form'
	DB	'ats, and easier to understand and maintain. Lua is written by'
	DB	' standard C, which is simple and elegant, and can be compiled'
	DB	' and run on almost all operating systems and platforms. A com'
	DB	'plete Lua interpreter, but 200K, is the fastest Lua in all sc'
	DB	'ripting engines. All this determines that Lua is the best cho'
	DB	'ice as an embedded script.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DHO@IPDEENOO@Lua?J?G?R?$LL?$LI?v?P?$KB?G?I?$LF?D?$LN?E?$LB?$LO?S?o?Q?T?$KB?$KD?J?G?$LA?M?N?w?$MA@
CONST	SEGMENT
??_C@_0DHO@IPDEENOO@Lua?J?G?R?$LL?$LI?v?P?$KB?G?I?$LF?D?$LN?E?$LB?$LO?S?o?Q?T?$KB?$KD?J?G?$LA?M?N?w?$MA@ DB 'L'
	DB	'ua', 0caH, 0c7H, 0d2H, 0bbH, 0b8H, 0f6H, 0d0H, 0a1H, 0c7H, 0c9H
	DB	0b5H, 0c4H, 0bdH, 0c5H, 0b1H, 0beH, 0d3H, 0efH, 0d1H, 0d4H, 0a1H
	DB	0a3H, 0caH, 0c7H, 0b0H, 0cdH, 0ceH, 0f7H, 0c0H, 0efH, 0d4H, 0bcH
	DB	0c8H, 0c8H, 0c4H, 0daH, 0c2H, 0acH, 0ccH, 0ecH, 0d6H, 0f7H, 0bdH
	DB	0ccH, 0b4H, 0f3H, 0d1H, 0a7H, 0a3H, 0a8H, 'Pontifical Catholic'
	DB	' University of Rio de Janeiro', 0a3H, 0a9H, 0c0H, 0efH, 0b5H, 0c4H
	DB	0d2H, 0bbH, 0b8H, 0f6H, 0d1H, 0d0H, 0beH, 0bfH, 0d0H, 0a1H, 0d7H
	DB	0e9H, 0a3H, 0acH, 0d3H, 0c9H, 'Roberto Ierusalimschy', 0a1H, 0a2H
	DB	'Waldemar Celes ', 0baH, 0cdH, ' Luiz Henrique de Figueiredo', 0cbH
	DB	0f9H, 0d7H, 0e9H, 0b3H, 0c9H, 0b2H, 0a2H, 0d3H, 0daH, '1993', 0c4H
	DB	0eaH, 0bfH, 0aaH, 0b7H, 0a2H, 0a1H, 0a3H, ' ', 0c6H, 0e4H, 0c9H
	DB	0e8H, 0bcH, 0c6H, 0c4H, 0bfH, 0b5H, 0c4H, 0caH, 0c7H, 0ceH, 0aaH
	DB	0c1H, 0cbH, 0c7H, 0b6H, 0c8H, 0ebH, 0d3H, 0a6H, 0d3H, 0c3H, 0b3H
	DB	0ccH, 0d0H, 0f2H, 0d6H, 0d0H, 0a3H, 0acH, 0b4H, 0d3H, 0b6H, 0f8H
	DB	0ceH, 0aaH, 0d3H, 0a6H, 0d3H, 0c3H, 0b3H, 0ccH, 0d0H, 0f2H, 0ccH
	DB	0e1H, 0b9H, 0a9H, 0c1H, 0e9H, 0bbH, 0eeH, 0b5H, 0c4H, 0c0H, 0a9H
	DB	0d5H, 0b9H, 0baH, 0cdH, 0b6H, 0a8H, 0d6H, 0c6H, 0b9H, 0a6H, 0c4H
	DB	0dcH, 0a1H, 0a3H, 'Lua', 0d3H, 0c9H, 0b1H, 0eaH, 0d7H, 0bcH, 'C'
	DB	0b1H, 0e0H, 0d0H, 0b4H, 0b6H, 0f8H, 0b3H, 0c9H, 0a3H, 0acH, 0bcH
	DB	0b8H, 0baH, 0f5H, 0d4H, 0daH, 0cbH, 0f9H, 0d3H, 0d0H, 0b2H, 0d9H
	DB	0d7H, 0f7H, 0cfH, 0b5H, 0cdH, 0b3H, 0baH, 0cdH, 0c6H, 0bdH, 0ccH
	DB	0a8H, 0c9H, 0cfH, 0b6H, 0bcH, 0bfH, 0c9H, 0d2H, 0d4H, 0b1H, 0e0H
	DB	0d2H, 0ebH, 0a3H, 0acH, 0d4H, 0cbH, 0d0H, 0d0H, 0a1H, 0a3H, 'L'
	DB	'ua', 0b2H, 0a2H, 0c3H, 0bbH, 0d3H, 0d0H, 0ccH, 0e1H, 0b9H, 0a9H
	DB	0c7H, 0bfH, 0b4H, 0f3H, 0b5H, 0c4H, 0bfH, 0e2H, 0a3H, 0acH, 0d5H
	DB	0e2H, 0caH, 0c7H, 0d3H, 0c9H, 0cbH, 0fcH, 0b5H, 0c4H, 0b6H, 0a8H
	DB	0ceH, 0bbH, 0beH, 0f6H, 0b6H, 0a8H, 0b5H, 0c4H, 0a1H, 0a3H, 0cbH
	DB	0f9H, 0d2H, 0d4H, 'Lua', 0b2H, 0bbH, 0caH, 0caH, 0baH, 0cfH, 0d7H
	DB	0f7H, 0ceH, 0aaH, 0bfH, 0aaH, 0b7H, 0a2H, 0b6H, 0c0H, 0c1H, 0a2H
	DB	0d3H, 0a6H, 0d3H, 0c3H, 0b3H, 0ccH, 0d0H, 0f2H, 0b5H, 0c4H, 0d3H
	DB	0efH, 0d1H, 0d4H, 0a1H, 0a3H, 'Lua ', 0d3H, 0d0H, 0d2H, 0bbH, 0b8H
	DB	0f6H, 0cdH, 0acH, 0caH, 0b1H, 0bdH, 0f8H, 0d0H, 0d0H, 0b5H, 0c4H
	DB	'JIT', 0cfH, 0eeH, 0c4H, 0bfH, 0a3H, 0acH, 0ccH, 0e1H, 0b9H, 0a9H
	DB	0d4H, 0daH, 0ccH, 0d8H, 0b6H, 0a8H, 0c6H, 0bdH, 0ccH, 0a8H, 0c9H
	DB	0cfH, 0b5H, 0c4H, 0bcH, 0b4H, 0caH, 0b1H, 0b1H, 0e0H, 0d2H, 0ebH
	DB	0b9H, 0a6H, 0c4H, 0dcH, 0a1H, 0a3H, 0aH, ' Lua', 0bdH, 0c5H, 0b1H
	DB	0beH, 0bfH, 0c9H, 0d2H, 0d4H, 0baH, 0dcH, 0c8H, 0ddH, 0d2H, 0d7H
	DB	0b5H, 0c4H, 0b1H, 0bbH, 'C / C++ ', 0b4H, 0faH, 0c2H, 0ebH, 0b5H
	DB	0f7H, 0d3H, 0c3H, 0a3H, 0acH, 0d2H, 0b2H, 0bfH, 0c9H, 0d2H, 0d4H
	DB	0b7H, 0b4H, 0b9H, 0fdH, 0c0H, 0b4H, 0b5H, 0f7H, 0d3H, 0c3H, 'C'
	DB	' / C++', 0b5H, 0c4H, 0baH, 0afH, 0caH, 0fdH, 0a3H, 0acH, 0d5H
	DB	0e2H, 0caH, 0b9H, 0b5H, 0c3H, 'Lua', 0d4H, 0daH, 0d3H, 0a6H, 0d3H
	DB	0c3H, 0b3H, 0ccH, 0d0H, 0f2H, 0d6H, 0d0H, 0bfH, 0c9H, 0d2H, 0d4H
	DB	0b1H, 0bbH, 0b9H, 0e3H, 0b7H, 0baH, 0d3H, 0a6H, 0d3H, 0c3H, 0a1H
	DB	0a3H, 0b2H, 0bbH, 0bdH, 0f6H, 0bdH, 0f6H, 0d7H, 0f7H, 0ceH, 0aaH
	DB	0c0H, 0a9H, 0d5H, 0b9H, 0bdH, 0c5H, 0b1H, 0beH, 0a3H, 0acH, 0d2H
	DB	0b2H, 0bfH, 0c9H, 0d2H, 0d4H, 0d7H, 0f7H, 0ceH, 0aaH, 0c6H, 0d5H
	DB	0cdH, 0a8H, 0b5H, 0c4H, 0c5H, 0e4H, 0d6H, 0c3H, 0ceH, 0c4H, 0bcH
	DB	0feH, 0a3H, 0acH, 0b4H, 0faH, 0ccH, 0e6H, 'XML, ini', 0b5H, 0c8H
	DB	0ceH, 0c4H, 0bcH, 0feH, 0b8H, 0f1H, 0caH, 0bdH, 0a3H, 0acH, 0b2H
	DB	0a2H, 0c7H, 0d2H, 0b8H, 0fcH, 0c8H, 0ddH, 0d2H, 0d7H, 0c0H, 0edH
	DB	0bdH, 0e2H, 0baH, 0cdH, 0ceH, 0acH, 0bbH, 0a4H, 0a1H, 0a3H, 'L'
	DB	'ua', 0d3H, 0c9H, 0b1H, 0eaH, 0d7H, 0bcH, 'C', 0b1H, 0e0H, 0d0H
	DB	0b4H, 0b6H, 0f8H, 0b3H, 0c9H, 0a3H, 0acH, 0b4H, 0faH, 0c2H, 0ebH
	DB	0bcH, 0f2H, 0bdH, 0e0H, 0d3H, 0c5H, 0c3H, 0c0H, 0a3H, 0acH, 0bcH
	DB	0b8H, 0baH, 0f5H, 0d4H, 0daH, 0cbH, 0f9H, 0d3H, 0d0H, 0b2H, 0d9H
	DB	0d7H, 0f7H, 0cfH, 0b5H, 0cdH, 0b3H, 0baH, 0cdH, 0c6H, 0bdH, 0ccH
	DB	0a8H, 0c9H, 0cfH, 0b6H, 0bcH, 0bfH, 0c9H, 0d2H, 0d4H, 0b1H, 0e0H
	DB	0d2H, 0ebH, 0a3H, 0acH, 0d4H, 0cbH, 0d0H, 0d0H, 0a1H, 0a3H, ' '
	DB	0d2H, 0bbH, 0b8H, 0f6H, 0cdH, 0eaH, 0d5H, 0fbH, 0b5H, 0c4H, 'L'
	DB	'ua', 0bdH, 0e2H, 0caH, 0cdH, 0c6H, 0f7H, 0b2H, 0bbH, 0b9H, 0fdH
	DB	'200k', 0a3H, 0acH, 0d4H, 0daH, 0c4H, 0bfH, 0c7H, 0b0H, 0cbH, 0f9H
	DB	0d3H, 0d0H, 0bdH, 0c5H, 0b1H, 0beH, 0d2H, 0fdH, 0c7H, 0e6H, 0d6H
	DB	0d0H, 0a3H, 0acH, 'Lua', 0b5H, 0c4H, 0cbH, 0d9H, 0b6H, 0c8H, 0caH
	DB	0c7H, 0d7H, 0eeH, 0bfH, 0ecH, 0b5H, 0c4H, 0a1H, 0a3H, 0d5H, 0e2H
	DB	0d2H, 0bbH, 0c7H, 0d0H, 0b6H, 0bcH, 0beH, 0f6H, 0b6H, 0a8H, 0c1H
	DB	0cbH, 'Lua', 0caH, 0c7H, 0d7H, 0f7H, 0ceH, 0aaH, 0c7H, 0b6H, 0c8H
	DB	0ebH, 0caH, 0bdH, 0bdH, 0c5H, 0b1H, 0beH, 0b5H, 0c4H, 0d7H, 0eeH
	DB	0bcH, 0d1H, 0d1H, 0a1H, 0d4H, 0f1H, 0a1H, 0a3H, ' ', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_____Description_chs DD FLAT:??_C@_0DHO@IPDEENOO@Lua?J?G?R?$LL?$LI?v?P?$KB?G?I?$LF?D?$LN?E?$LB?$LO?S?o?Q?T?$KB?$KD?J?G?$LA?M?N?w?$MA@
_____Description_eng DD FLAT:??_C@_0FFL@EBMBOIJP@Lua?5is?5a?5small?5scripting?5languag@
_progname DD	FLAT:??_C@_03IBJHJIAF@lua?$AA@
_DATA	ENDS
PUBLIC	_luaB_print_spec
PUBLIC	_luaopen_base
PUBLIC	??_C@_0CL@KMHHCBJA@?8tostring?8?5must?5return?5a?5string?5@ ; `string'
PUBLIC	??_C@_01GPOEFGEJ@?7?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_06IOBDPLFO@?5?$AM?6?$AN?7?$AL?$AA@	; `string'
PUBLIC	??_C@_0BC@GGLHLOMM@base?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0M@OKDMMFBL@__metatable?$AA@		; `string'
PUBLIC	??_C@_0BG@HDIIKINN@nil?5or?5table?5expected?$AA@ ; `string'
PUBLIC	??_C@_0CE@LJKICCEL@cannot?5change?5a?5protected?5metata@ ; `string'
PUBLIC	??_C@_0BJ@DDKMCJJM@table?5or?5string?5expected?$AA@ ; `string'
PUBLIC	??_C@_0P@PDHEKNMA@value?5expected?$AA@		; `string'
PUBLIC	??_C@_07HJHPCFBM@__pairs?$AA@			; `string'
PUBLIC	??_C@_08JMAMPABE@__ipairs?$AA@			; `string'
PUBLIC	??_C@_0BK@NJPFPDBN@too?5many?5nested?5functions?$AA@ ; `string'
PUBLIC	??_C@_0CF@IPNALDCD@reader?5function?5must?5return?5a?5st@ ; `string'
PUBLIC	??_C@_02LOIFFB@bt?$AA@				; `string'
PUBLIC	??_C@_07JEBBFCAN@?$DN?$CIload?$CJ?$AA@		; `string'
PUBLIC	??_C@_0BC@ONMFJPBH@assertion?5failed?$CB?$AA@	; `string'
PUBLIC	??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0M@PBPDJEBJ@Lua?5spq?51?41?$AA@		; `string'
PUBLIC	??_C@_0BDD@BBDJGOCB@usage?3?5?$CFs?5?$FLoptions?$FN?5?$FLscript?5?$FLarg@ ; `string'
PUBLIC	??_C@_0BG@HFJBOPML@This?5is?5a?5easter?5egg?4?$AA@ ; `string'
PUBLIC	??_C@_0BK@EADLKGKP@Easter?5egg?5author?3Q?4?5John?$AA@ ; `string'
PUBLIC	??_C@_0DI@IIMDNMFJ@R?4?5Ierusalimschy?0?5L?4?5H?4?5de?5Figue@ ; `string'
PUBLIC	??_C@_0BF@FOKLKONM@Functions?5size?5is?3?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0O@JIOMGDOO@Lua?5spq?51?41?41?$AA@	; `string'
PUBLIC	__real@3f50000000000000
EXTRN	__imp__isdigit:PROC
EXTRN	__imp__isalnum:PROC
EXTRN	__imp__toupper:PROC
EXTRN	__imp__strspn:PROC
EXTRN	__imp__GetStdHandle@4:PROC
EXTRN	__imp__GetSystemDefaultLangID@0:PROC
EXTRN	__imp__FillConsoleOutputCharacterA@20:PROC
EXTRN	__imp__FillConsoleOutputAttribute@20:PROC
EXTRN	__imp__GetConsoleScreenBufferInfo@8:PROC
EXTRN	__imp__SetConsoleCursorPosition@8:PROC
EXTRN	__imp__exit:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__fflush:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp__fputs:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp__printf:PROC
EXTRN	__imp__sprintf_s:PROC
EXTRN	_lua_gettop:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_rotate:PROC
EXTRN	_lua_copy:PROC
EXTRN	_lua_isstring:PROC
EXTRN	_lua_type:PROC
EXTRN	_lua_typename:PROC
EXTRN	_lua_toboolean:PROC
EXTRN	_lua_tolstring:PROC
EXTRN	_lua_rawlen:PROC
EXTRN	_lua_rawequal:PROC
EXTRN	_lua_pushnil:PROC
EXTRN	_lua_pushnumber:PROC
EXTRN	_lua_pushinteger:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_pushcclosure:PROC
EXTRN	_lua_pushboolean:PROC
EXTRN	_lua_getglobal:PROC
EXTRN	_lua_geti:PROC
EXTRN	_lua_rawget:PROC
EXTRN	_lua_rawgeti:PROC
EXTRN	_lua_getmetatable:PROC
EXTRN	_lua_setfield:PROC
EXTRN	_lua_rawset:PROC
EXTRN	_lua_setmetatable:PROC
EXTRN	_lua_callk:PROC
EXTRN	_lua_pcallk:PROC
EXTRN	_lua_load:PROC
EXTRN	_lua_gc:PROC
EXTRN	_lua_error:PROC
EXTRN	_lua_next:PROC
EXTRN	_lua_concat:PROC
EXTRN	_lua_stringtonumber:PROC
EXTRN	_lua_setupvalue:PROC
EXTRN	_luaL_getmetafield:PROC
EXTRN	_luaL_tolstring:PROC
EXTRN	_luaL_argerror:PROC
EXTRN	_luaL_optlstring:PROC
EXTRN	_luaL_checkinteger:PROC
EXTRN	_luaL_optinteger:PROC
EXTRN	_luaL_checkstack:PROC
EXTRN	_luaL_checktype:PROC
EXTRN	_luaL_checkany:PROC
EXTRN	_luaL_where:PROC
EXTRN	_luaL_error:PROC
EXTRN	_luaL_checkoption:PROC
EXTRN	_luaL_loadfilex:PROC
EXTRN	_luaL_loadbufferx:PROC
EXTRN	_luaL_setfuncs:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__allmul:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3f50000000000000
CONST	SEGMENT
__real@3f50000000000000 DQ 03f50000000000000r	; 0.000976563
CONST	ENDS
;	COMDAT ??_C@_0O@JIOMGDOO@Lua?5spq?51?41?41?$AA@
CONST	SEGMENT
??_C@_0O@JIOMGDOO@Lua?5spq?51?41?41?$AA@ DB 'Lua spq 1.1.1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FOKLKONM@Functions?5size?5is?3?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@FOKLKONM@Functions?5size?5is?3?$CFd?$AA@ DB 'Functions size is:'
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@IIMDNMFJ@R?4?5Ierusalimschy?0?5L?4?5H?4?5de?5Figue@
CONST	SEGMENT
??_C@_0DI@IIMDNMFJ@R?4?5Ierusalimschy?0?5L?4?5H?4?5de?5Figue@ DB 'R. Ieru'
	DB	'salimschy, L. H. de Figueiredo, W. Celes,Q. John', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EADLKGKP@Easter?5egg?5author?3Q?4?5John?$AA@
CONST	SEGMENT
??_C@_0BK@EADLKGKP@Easter?5egg?5author?3Q?4?5John?$AA@ DB 'Easter egg aut'
	DB	'hor:Q. John', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HFJBOPML@This?5is?5a?5easter?5egg?4?$AA@
CONST	SEGMENT
??_C@_0BG@HFJBOPML@This?5is?5a?5easter?5egg?4?$AA@ DB 'This is a easter e'
	DB	'gg.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BDD@BBDJGOCB@usage?3?5?$CFs?5?$FLoptions?$FN?5?$FLscript?5?$FLarg@
CONST	SEGMENT
??_C@_0BDD@BBDJGOCB@usage?3?5?$CFs?5?$FLoptions?$FN?5?$FLscript?5?$FLarg@ DB 'u'
	DB	'sage: %s [options] [script [args]].', 0aH, 'Available options'
	DB	' are:', 0aH, '  -e stat  execute string ''stat''', 0aH, '  -l'
	DB	' name  require library ''name''', 0aH, '  -i       enter inte'
	DB	'ractive mode after executing ''script''', 0aH, '  -v       sh'
	DB	'ow version information', 0aH, '  --       stop handling optio'
	DB	'ns', 0aH, '  -        execute stdin and stop handling options'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PBPDJEBJ@Lua?5spq?51?41?$AA@
CONST	SEGMENT
??_C@_0M@PBPDJEBJ@Lua?5spq?51?41?$AA@ DB 'Lua spq 1.1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@ DB 'index out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ONMFJPBH@assertion?5failed?$CB?$AA@
CONST	SEGMENT
??_C@_0BC@ONMFJPBH@assertion?5failed?$CB?$AA@ DB 'assertion failed!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JEBBFCAN@?$DN?$CIload?$CJ?$AA@
CONST	SEGMENT
??_C@_07JEBBFCAN@?$DN?$CIload?$CJ?$AA@ DB '=(load)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LOIFFB@bt?$AA@
CONST	SEGMENT
??_C@_02LOIFFB@bt?$AA@ DB 'bt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IPNALDCD@reader?5function?5must?5return?5a?5st@
CONST	SEGMENT
??_C@_0CF@IPNALDCD@reader?5function?5must?5return?5a?5st@ DB 'reader func'
	DB	'tion must return a string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NJPFPDBN@too?5many?5nested?5functions?$AA@
CONST	SEGMENT
??_C@_0BK@NJPFPDBN@too?5many?5nested?5functions?$AA@ DB 'too many nested '
	DB	'functions', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08JMAMPABE@__ipairs?$AA@
CONST	SEGMENT
??_C@_08JMAMPABE@__ipairs?$AA@ DB '__ipairs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HJHPCFBM@__pairs?$AA@
CONST	SEGMENT
??_C@_07HJHPCFBM@__pairs?$AA@ DB '__pairs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PDHEKNMA@value?5expected?$AA@
CONST	SEGMENT
??_C@_0P@PDHEKNMA@value?5expected?$AA@ DB 'value expected', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DDKMCJJM@table?5or?5string?5expected?$AA@
CONST	SEGMENT
??_C@_0BJ@DDKMCJJM@table?5or?5string?5expected?$AA@ DB 'table or string e'
	DB	'xpected', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LJKICCEL@cannot?5change?5a?5protected?5metata@
CONST	SEGMENT
??_C@_0CE@LJKICCEL@cannot?5change?5a?5protected?5metata@ DB 'cannot chang'
	DB	'e a protected metatable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HDIIKINN@nil?5or?5table?5expected?$AA@
CONST	SEGMENT
??_C@_0BG@HDIIKINN@nil?5or?5table?5expected?$AA@ DB 'nil or table expecte'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OKDMMFBL@__metatable?$AA@
CONST	SEGMENT
??_C@_0M@OKDMMFBL@__metatable?$AA@ DB '__metatable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GGLHLOMM@base?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BC@GGLHLOMM@base?5out?5of?5range?$AA@ DB 'base out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IOBDPLFO@?5?$AM?6?$AN?7?$AL?$AA@
CONST	SEGMENT
??_C@_06IOBDPLFO@?5?$AM?6?$AN?7?$AL?$AA@ DB ' ', 0cH, 0aH, 0dH, 09H, 0bH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GPOEFGEJ@?7?$AA@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7?$AA@ DB 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KMHHCBJA@?8tostring?8?5must?5return?5a?5string?5@
CONST	SEGMENT
??_C@_0CL@KMHHCBJA@?8tostring?8?5must?5return?5a?5string?5@ DB '''tostrin'
	DB	'g'' must return a string to ''print''', 00H	; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_print_spec3
_TEXT	SEGMENT
_cc1$ = 8						; size = 4
_cc2$ = 12						; size = 4
_luaB_print_spec3 PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 857
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 858
  00004	ff 75 08	 push	 DWORD PTR _cc1$[ebp]
  00007	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__printf
  0000d	ff d6		 call	 esi
; Line 859
  0000f	ff 75 0c	 push	 DWORD PTR _cc2$[ebp]
  00012	ff d6		 call	 esi
; Line 860
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00019	ff d6		 call	 esi
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	5e		 pop	 esi
; Line 861
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_luaB_print_spec3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _Test
_TEXT	SEGMENT
_L$ = 8							; size = 4
_Test	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 730
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 732
  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp____iob_func
  0000a	57		 push	 edi
  0000b	ff d3		 call	 ebx
  0000d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__fputs
  00013	83 c0 20	 add	 eax, 32			; 00000020H
  00016	50		 push	 eax
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HFJBOPML@This?5is?5a?5easter?5egg?4?$AA@
  0001c	ff d7		 call	 edi
  0001e	6a fe		 push	 -2			; fffffffeH
  00020	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00023	e8 00 00 00 00	 call	 _lua_settop
  00028	ff d3		 call	 ebx
  0002a	83 c0 20	 add	 eax, 32			; 00000020H
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00033	ff d7		 call	 edi
; Line 734
  00035	ff d3		 call	 ebx
  00037	83 c0 20	 add	 eax, 32			; 00000020H
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EADLKGKP@Easter?5egg?5author?3Q?4?5John?$AA@
  00040	ff d7		 call	 edi
  00042	6a fe		 push	 -2			; fffffffeH
  00044	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00047	e8 00 00 00 00	 call	 _lua_settop
  0004c	ff d3		 call	 ebx
  0004e	83 c0 20	 add	 eax, 32			; 00000020H
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00057	ff d7		 call	 edi
  00059	83 c4 30	 add	 esp, 48			; 00000030H
  0005c	5f		 pop	 edi
  0005d	5b		 pop	 ebx
; Line 735
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_Test	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _print_usage
_TEXT	SEGMENT
_f$ = 8							; size = 4
_print_usage PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 713
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 724
  00003	ff 35 00 00 00
	00		 push	 DWORD PTR _progname
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BDD@BBDJGOCB@usage?3?5?$CFs?5?$FLoptions?$FN?5?$FLscript?5?$FLarg@
  0000e	ff 75 08	 push	 DWORD PTR _f$[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 725
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00020	83 c0 40	 add	 eax, 64			; 00000040H
  00023	89 45 08	 mov	 DWORD PTR _f$[ebp], eax
; Line 726
  00026	5d		 pop	 ebp
; Line 725
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__fflush
_print_usage ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _clrscr
_TEXT	SEGMENT
_cCharsWritten$ = -40					; size = 4
_coordScreen$ = -36					; size = 4
_hConsole$1$ = -32					; size = 4
_csbi$ = -28						; size = 22
__$ArrayPad$ = -4					; size = 4
_clrscr	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 653
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
; Line 654
  00012	33 c0		 xor	 eax, eax
; Line 658
  00014	6a f5		 push	 -11			; fffffff5H
  00016	89 45 dc	 mov	 DWORD PTR _coordScreen$[ebp], eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStdHandle@4
; Line 660
  0001f	8d 4d e4	 lea	 ecx, DWORD PTR _csbi$[ebp]
  00022	89 45 e0	 mov	 DWORD PTR _hConsole$1$[ebp], eax
  00025	51		 push	 ecx
  00026	50		 push	 eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetConsoleScreenBufferInfo@8
; Line 661
  0002d	0f bf 5d e6	 movsx	 ebx, WORD PTR _csbi$[ebp+2]
; Line 662
  00031	8d 45 d8	 lea	 eax, DWORD PTR _cCharsWritten$[ebp]
  00034	0f bf 4d e4	 movsx	 ecx, WORD PTR _csbi$[ebp]
  00038	8b 75 dc	 mov	 esi, DWORD PTR _coordScreen$[ebp]
  0003b	50		 push	 eax
  0003c	0f af d9	 imul	 ebx, ecx
  0003f	56		 push	 esi
  00040	53		 push	 ebx
  00041	6a 20		 push	 32			; 00000020H
  00043	ff 75 e0	 push	 DWORD PTR _hConsole$1$[ebp]
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillConsoleOutputCharacterA@20
; Line 663
  0004c	8d 45 e4	 lea	 eax, DWORD PTR _csbi$[ebp]
  0004f	50		 push	 eax
  00050	ff 75 e0	 push	 DWORD PTR _hConsole$1$[ebp]
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetConsoleScreenBufferInfo@8
; Line 664
  00059	8d 45 d8	 lea	 eax, DWORD PTR _cCharsWritten$[ebp]
  0005c	50		 push	 eax
  0005d	56		 push	 esi
  0005e	53		 push	 ebx
  0005f	ff 75 ec	 push	 DWORD PTR _csbi$[ebp+8]
  00062	8b 5d e0	 mov	 ebx, DWORD PTR _hConsole$1$[ebp]
  00065	53		 push	 ebx
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillConsoleOutputAttribute@20
; Line 665
  0006c	56		 push	 esi
  0006d	53		 push	 ebx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetConsoleCursorPosition@8
; Line 666
  00074	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00077	5e		 pop	 esi
  00078	33 cd		 xor	 ecx, ebp
  0007a	5b		 pop	 ebx
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_clrscr	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_tostring
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_tostring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 449
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 450
  00003	6a 01		 push	 1
  00005	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00008	e8 00 00 00 00	 call	 _luaL_checkany
; Line 451
  0000d	6a 00		 push	 0
  0000f	6a 01		 push	 1
  00011	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00014	e8 00 00 00 00	 call	 _luaL_tolstring
  00019	83 c4 14	 add	 esp, 20			; 00000014H
; Line 452
  0001c	b8 01 00 00 00	 mov	 eax, 1
; Line 453
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_luaB_tostring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_xpcall
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_xpcall PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 437
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 439
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _lua_gettop
; Line 440
  0000e	6a 06		 push	 6
  00010	6a 02		 push	 2
  00012	57		 push	 edi
  00013	8b f0		 mov	 esi, eax
  00015	e8 00 00 00 00	 call	 _luaL_checktype
; Line 441
  0001a	6a 01		 push	 1
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _lua_pushboolean
; Line 442
  00022	6a 01		 push	 1
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 443
  0002a	6a 02		 push	 2
  0002c	6a 03		 push	 3
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 _lua_rotate
; Line 444
  00034	68 00 00 00 00	 push	 OFFSET _finishpcall
  00039	6a 02		 push	 2
  0003b	6a 02		 push	 2
  0003d	6a ff		 push	 -1
  0003f	8d 46 fe	 lea	 eax, DWORD PTR [esi-2]
  00042	50		 push	 eax
  00043	57		 push	 edi
  00044	e8 00 00 00 00	 call	 _lua_pcallk
  00049	83 c4 44	 add	 esp, 68			; 00000044H
; Line 445
  0004c	85 c0		 test	 eax, eax
  0004e	74 21		 je	 SHORT $LN4@luaB_xpcal
  00050	83 f8 01	 cmp	 eax, 1
  00053	74 1c		 je	 SHORT $LN4@luaB_xpcal
  00055	6a 00		 push	 0
  00057	57		 push	 edi
  00058	e8 00 00 00 00	 call	 _lua_pushboolean
  0005d	6a fe		 push	 -2			; fffffffeH
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 _lua_pushvalue
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	b8 02 00 00 00	 mov	 eax, 2
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
; Line 446
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
; Line 445
$LN4@luaB_xpcal:
  00071	57		 push	 edi
  00072	e8 00 00 00 00	 call	 _lua_gettop
  00077	83 c4 04	 add	 esp, 4
  0007a	83 e8 02	 sub	 eax, 2
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
; Line 446
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_luaB_xpcall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_pcall
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_pcall PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 422
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 424
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 01		 push	 1
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _luaL_checkany
; Line 425
  0000f	6a 01		 push	 1
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _lua_pushboolean
; Line 426
  00017	6a 01		 push	 1
  00019	6a 01		 push	 1
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _lua_rotate
  00021	83 c4 1c	 add	 esp, 28			; 0000001cH
; Line 427
  00024	68 00 00 00 00	 push	 OFFSET _finishpcall
  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	6a ff		 push	 -1
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _lua_gettop
  00035	83 c4 04	 add	 esp, 4
  00038	83 e8 02	 sub	 eax, 2
  0003b	50		 push	 eax
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 _lua_pcallk
  00042	83 c4 18	 add	 esp, 24			; 00000018H
; Line 428
  00045	85 c0		 test	 eax, eax
  00047	74 20		 je	 SHORT $LN4@luaB_pcall
  00049	83 f8 01	 cmp	 eax, 1
  0004c	74 1b		 je	 SHORT $LN4@luaB_pcall
  0004e	6a 00		 push	 0
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 _lua_pushboolean
  00056	6a fe		 push	 -2			; fffffffeH
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 _lua_pushvalue
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	b8 02 00 00 00	 mov	 eax, 2
  00066	5e		 pop	 esi
; Line 429
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
; Line 428
$LN4@luaB_pcall:
  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 _lua_gettop
  0006f	83 c4 04	 add	 esp, 4
  00072	5e		 pop	 esi
; Line 429
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_luaB_pcall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _finishpcall
_TEXT	SEGMENT
_L$ = 8							; size = 4
_status$ = 12						; size = 4
_extra$ = 16						; size = 4
_finishpcall PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 411
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 412
  00003	8b 45 0c	 mov	 eax, DWORD PTR _status$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 23		 je	 SHORT $LN2@finishpcal
  0000a	83 f8 01	 cmp	 eax, 1
  0000d	74 1e		 je	 SHORT $LN2@finishpcal
; Line 413
  0000f	6a 00		 push	 0
  00011	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00014	e8 00 00 00 00	 call	 _lua_pushboolean
; Line 414
  00019	6a fe		 push	 -2			; fffffffeH
  0001b	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0001e	e8 00 00 00 00	 call	 _lua_pushvalue
  00023	83 c4 10	 add	 esp, 16			; 00000010H
; Line 415
  00026	b8 02 00 00 00	 mov	 eax, 2
; Line 419
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN2@finishpcal:
; Line 418
  0002d	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00030	e8 00 00 00 00	 call	 _lua_gettop
  00035	83 c4 04	 add	 esp, 4
  00038	2b 45 10	 sub	 eax, DWORD PTR _extra$[ebp]
; Line 419
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_finishpcall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_select
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_select PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 388
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi
; Line 389
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _lua_gettop
; Line 390
  0000e	6a 01		 push	 1
  00010	57		 push	 edi
  00011	8b d8		 mov	 ebx, eax
  00013	e8 00 00 00 00	 call	 _lua_type
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	83 f8 04	 cmp	 eax, 4
  0001e	75 2a		 jne	 SHORT $LN5@luaB_selec
  00020	6a 00		 push	 0
  00022	6a 01		 push	 1
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _lua_tolstring
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002d	80 38 23	 cmp	 BYTE PTR [eax], 35	; 00000023H
  00030	75 18		 jne	 SHORT $LN5@luaB_selec
; Line 391
  00032	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00035	99		 cdq
  00036	52		 push	 edx
  00037	50		 push	 eax
  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 _lua_pushinteger
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 392
  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	5f		 pop	 edi
  00047	5b		 pop	 ebx
; Line 401
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN5@luaB_selec:
  0004a	56		 push	 esi
; Line 395
  0004b	6a 01		 push	 1
  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 _luaL_checkinteger
  00053	8b ca		 mov	 ecx, edx
  00055	83 c4 08	 add	 esp, 8
  00058	8b f0		 mov	 esi, eax
; Line 396
  0005a	85 c9		 test	 ecx, ecx
  0005c	7f 0f		 jg	 SHORT $LN3@luaB_selec
  0005e	7c 04		 jl	 SHORT $LN9@luaB_selec
  00060	85 f6		 test	 esi, esi
  00062	73 09		 jae	 SHORT $LN3@luaB_selec
$LN9@luaB_selec:
  00064	8b c3		 mov	 eax, ebx
  00066	99		 cdq
  00067	03 f0		 add	 esi, eax
  00069	13 ca		 adc	 ecx, edx
  0006b	eb 11		 jmp	 SHORT $LN1@luaB_selec
$LN3@luaB_selec:
; Line 397
  0006d	8b c3		 mov	 eax, ebx
  0006f	99		 cdq
  00070	3b ca		 cmp	 ecx, edx
  00072	7c 0a		 jl	 SHORT $LN1@luaB_selec
  00074	7f 04		 jg	 SHORT $LN10@luaB_selec
  00076	3b f0		 cmp	 esi, eax
  00078	76 04		 jbe	 SHORT $LN1@luaB_selec
$LN10@luaB_selec:
  0007a	8b f0		 mov	 esi, eax
  0007c	8b ca		 mov	 ecx, edx
$LN1@luaB_selec:
; Line 398
  0007e	85 c9		 test	 ecx, ecx
  00080	7f 17		 jg	 SHORT $LN8@luaB_selec
  00082	7c 05		 jl	 SHORT $LN11@luaB_selec
  00084	83 fe 01	 cmp	 esi, 1
  00087	73 10		 jae	 SHORT $LN8@luaB_selec
$LN11@luaB_selec:
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@
  0008e	6a 01		 push	 1
  00090	57		 push	 edi
  00091	e8 00 00 00 00	 call	 _luaL_argerror
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@luaB_selec:
; Line 399
  00099	2b de		 sub	 ebx, esi
  0009b	5e		 pop	 esi
  0009c	5f		 pop	 edi
  0009d	8b c3		 mov	 eax, ebx
  0009f	5b		 pop	 ebx
; Line 401
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
_luaB_select ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_assert
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_assert PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 375
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 376
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 01		 push	 1
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _lua_toboolean
  0000f	83 c4 08	 add	 esp, 8
  00012	85 c0		 test	 eax, eax
  00014	74 0c		 je	 SHORT $LN2@luaB_asser
; Line 377
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _lua_gettop
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
; Line 385
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN2@luaB_asser:
; Line 379
  00022	6a 01		 push	 1
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 _luaL_checkany
; Line 380
  0002a	6a ff		 push	 -1
  0002c	6a 01		 push	 1
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _lua_rotate
  00034	6a fe		 push	 -2			; fffffffeH
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 _lua_settop
; Line 381
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ONMFJPBH@assertion?5failed?$CB?$AA@
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 _lua_pushstring
; Line 382
  00047	6a 01		 push	 1
  00049	56		 push	 esi
  0004a	e8 00 00 00 00	 call	 _lua_settop
; Line 383
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 _luaB_error
  00055	83 c4 30	 add	 esp, 48			; 00000030H
  00058	5e		 pop	 esi
; Line 385
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_luaB_assert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_dofile
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_dofile PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 365
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 366
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 01		 push	 1
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _luaL_optlstring
; Line 367
  00014	6a 01		 push	 1
  00016	57		 push	 edi
  00017	8b f0		 mov	 esi, eax
  00019	e8 00 00 00 00	 call	 _lua_settop
; Line 368
  0001e	6a 00		 push	 0
  00020	56		 push	 esi
  00021	57		 push	 edi
  00022	e8 00 00 00 00	 call	 _luaL_loadfilex
  00027	83 c4 24	 add	 esp, 36			; 00000024H
  0002a	85 c0		 test	 eax, eax
  0002c	74 0d		 je	 SHORT $LN1@luaB_dofil
; Line 369
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 _lua_error
  00034	83 c4 04	 add	 esp, 4
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
; Line 372
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN1@luaB_dofil:
; Line 370
  0003b	68 00 00 00 00	 push	 OFFSET _dofilecont
  00040	6a 00		 push	 0
  00042	6a ff		 push	 -1
  00044	6a 00		 push	 0
  00046	57		 push	 edi
  00047	e8 00 00 00 00	 call	 _lua_callk
; Line 371
  0004c	57		 push	 edi
  0004d	e8 00 00 00 00	 call	 _lua_gettop
  00052	83 c4 18	 add	 esp, 24			; 00000018H
  00055	48		 dec	 eax
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
; Line 372
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_luaB_dofile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _dofilecont
_TEXT	SEGMENT
_L$ = 8							; size = 4
_d1$ = 12						; size = 4
_d2$ = 16						; size = 4
_dofilecont PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 359
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 361
  00003	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00006	e8 00 00 00 00	 call	 _lua_gettop
  0000b	83 c4 04	 add	 esp, 4
  0000e	48		 dec	 eax
; Line 362
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_dofilecont ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_load
_TEXT	SEGMENT
_l$ = -8						; size = 4
_mode$1$ = -4						; size = 4
_L$ = 8							; size = 4
_luaB_load PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 337
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; Line 340
  00009	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000c	8d 45 f8	 lea	 eax, DWORD PTR _l$[ebp]
  0000f	50		 push	 eax
  00010	6a 01		 push	 1
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 _lua_tolstring
; Line 341
  00018	6a 00		 push	 0
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_02LOIFFB@bt?$AA@
  0001f	6a 03		 push	 3
  00021	57		 push	 edi
  00022	8b f0		 mov	 esi, eax
  00024	e8 00 00 00 00	 call	 _luaL_optlstring
; Line 342
  00029	6a 04		 push	 4
  0002b	57		 push	 edi
  0002c	89 45 fc	 mov	 DWORD PTR _mode$1$[ebp], eax
  0002f	e8 00 00 00 00	 call	 _lua_type
  00034	83 c4 24	 add	 esp, 36			; 00000024H
  00037	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  0003a	f7 db		 neg	 ebx
; Line 344
  0003c	6a 00		 push	 0
  0003e	1b db		 sbb	 ebx, ebx
  00040	83 e3 04	 and	 ebx, 4
  00043	85 f6		 test	 esi, esi
  00045	74 1c		 je	 SHORT $LN2@luaB_load
  00047	56		 push	 esi
  00048	6a 02		 push	 2
  0004a	57		 push	 edi
  0004b	e8 00 00 00 00	 call	 _luaL_optlstring
; Line 345
  00050	ff 75 fc	 push	 DWORD PTR _mode$1$[ebp]
  00053	50		 push	 eax
  00054	ff 75 f8	 push	 DWORD PTR _l$[ebp]
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 _luaL_loadbufferx
  0005e	83 c4 24	 add	 esp, 36			; 00000024H
; Line 347
  00061	eb 35		 jmp	 SHORT $LN1@luaB_load
$LN2@luaB_load:
; Line 348
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_07JEBBFCAN@?$DN?$CIload?$CJ?$AA@
  00068	6a 02		 push	 2
  0006a	57		 push	 edi
  0006b	e8 00 00 00 00	 call	 _luaL_optlstring
; Line 349
  00070	6a 06		 push	 6
  00072	6a 01		 push	 1
  00074	57		 push	 edi
  00075	8b f0		 mov	 esi, eax
  00077	e8 00 00 00 00	 call	 _luaL_checktype
; Line 350
  0007c	6a 05		 push	 5
  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 _lua_settop
; Line 351
  00084	ff 75 fc	 push	 DWORD PTR _mode$1$[ebp]
  00087	56		 push	 esi
  00088	6a 00		 push	 0
  0008a	68 00 00 00 00	 push	 OFFSET _generic_reader
  0008f	57		 push	 edi
  00090	e8 00 00 00 00	 call	 _lua_load
  00095	83 c4 38	 add	 esp, 56			; 00000038H
$LN1@luaB_load:
; Line 353
  00098	85 c0		 test	 eax, eax
  0009a	75 33		 jne	 SHORT $LN8@luaB_load
  0009c	85 db		 test	 ebx, ebx
  0009e	74 23		 je	 SHORT $LN6@luaB_load
  000a0	53		 push	 ebx
  000a1	57		 push	 edi
  000a2	e8 00 00 00 00	 call	 _lua_pushvalue
  000a7	6a 01		 push	 1
  000a9	6a fe		 push	 -2			; fffffffeH
  000ab	57		 push	 edi
  000ac	e8 00 00 00 00	 call	 _lua_setupvalue
  000b1	83 c4 14	 add	 esp, 20			; 00000014H
  000b4	85 c0		 test	 eax, eax
  000b6	75 0b		 jne	 SHORT $LN6@luaB_load
  000b8	6a fe		 push	 -2			; fffffffeH
  000ba	57		 push	 edi
  000bb	e8 00 00 00 00	 call	 _lua_settop
  000c0	83 c4 08	 add	 esp, 8
$LN6@luaB_load:
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	b8 01 00 00 00	 mov	 eax, 1
  000ca	5b		 pop	 ebx
; Line 354
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
; Line 353
$LN8@luaB_load:
  000cf	57		 push	 edi
  000d0	e8 00 00 00 00	 call	 _lua_pushnil
  000d5	6a 01		 push	 1
  000d7	6a fe		 push	 -2			; fffffffeH
  000d9	57		 push	 edi
  000da	e8 00 00 00 00	 call	 _lua_rotate
  000df	83 c4 10	 add	 esp, 16			; 00000010H
  000e2	b8 02 00 00 00	 mov	 eax, 2
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
; Line 354
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c3		 ret	 0
_luaB_load ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _generic_reader
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ud$ = 12						; size = 4
_size$ = 16						; size = 4
_generic_reader PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 320
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 322
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NJPFPDBN@too?5many?5nested?5functions?$AA@
  0000c	6a 02		 push	 2
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _luaL_checkstack
; Line 323
  00014	6a 01		 push	 1
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 324
  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 01		 push	 1
  00022	6a 00		 push	 0
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 _lua_callk
; Line 325
  0002a	6a ff		 push	 -1
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _lua_type
  00032	83 c4 30	 add	 esp, 48			; 00000030H
  00035	85 c0		 test	 eax, eax
  00037	75 19		 jne	 SHORT $LN3@generic_re
; Line 326
  00039	6a fe		 push	 -2			; fffffffeH
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _lua_settop
; Line 327
  00041	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00044	83 c4 08	 add	 esp, 8
  00047	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; Line 328
  0004d	33 c0		 xor	 eax, eax
  0004f	5e		 pop	 esi
; Line 334
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN3@generic_re:
; Line 330
  00052	6a ff		 push	 -1
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 _lua_isstring
  0005a	83 c4 08	 add	 esp, 8
  0005d	85 c0		 test	 eax, eax
  0005f	75 0e		 jne	 SHORT $LN1@generic_re
; Line 331
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IPNALDCD@reader?5function?5must?5return?5a?5st@
  00066	56		 push	 esi
  00067	e8 00 00 00 00	 call	 _luaL_error
  0006c	83 c4 08	 add	 esp, 8
$LN1@generic_re:
; Line 332
  0006f	6a 05		 push	 5
  00071	6a ff		 push	 -1
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 _lua_copy
  00079	6a fe		 push	 -2			; fffffffeH
  0007b	56		 push	 esi
  0007c	e8 00 00 00 00	 call	 _lua_settop
; Line 333
  00081	ff 75 10	 push	 DWORD PTR _size$[ebp]
  00084	6a 05		 push	 5
  00086	56		 push	 esi
  00087	e8 00 00 00 00	 call	 _lua_tolstring
  0008c	83 c4 20	 add	 esp, 32			; 00000020H
  0008f	5e		 pop	 esi
; Line 334
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
_generic_reader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_loadfile
_TEXT	SEGMENT
_env$1$ = -4						; size = 4
_L$ = 8							; size = 4
_luaB_loadfile PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 290
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; Line 291
  00005	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	6a 01		 push	 1
  00010	53		 push	 ebx
  00011	e8 00 00 00 00	 call	 _luaL_optlstring
; Line 292
  00016	6a 00		 push	 0
  00018	6a 00		 push	 0
  0001a	6a 02		 push	 2
  0001c	53		 push	 ebx
  0001d	8b f8		 mov	 edi, eax
  0001f	e8 00 00 00 00	 call	 _luaL_optlstring
; Line 293
  00024	6a 03		 push	 3
  00026	53		 push	 ebx
  00027	8b f0		 mov	 esi, eax
  00029	e8 00 00 00 00	 call	 _lua_type
  0002e	40		 inc	 eax
  0002f	f7 d8		 neg	 eax
; Line 294
  00031	56		 push	 esi
  00032	1b c0		 sbb	 eax, eax
  00034	83 e0 03	 and	 eax, 3
  00037	57		 push	 edi
  00038	53		 push	 ebx
  00039	89 45 fc	 mov	 DWORD PTR _env$1$[ebp], eax
  0003c	e8 00 00 00 00	 call	 _luaL_loadfilex
  00041	83 c4 34	 add	 esp, 52			; 00000034H
; Line 295
  00044	85 c0		 test	 eax, eax
  00046	75 36		 jne	 SHORT $LN6@luaB_loadf
  00048	8b 45 fc	 mov	 eax, DWORD PTR _env$1$[ebp]
  0004b	85 c0		 test	 eax, eax
  0004d	74 23		 je	 SHORT $LN4@luaB_loadf
  0004f	50		 push	 eax
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 _lua_pushvalue
  00056	6a 01		 push	 1
  00058	6a fe		 push	 -2			; fffffffeH
  0005a	53		 push	 ebx
  0005b	e8 00 00 00 00	 call	 _lua_setupvalue
  00060	83 c4 14	 add	 esp, 20			; 00000014H
  00063	85 c0		 test	 eax, eax
  00065	75 0b		 jne	 SHORT $LN4@luaB_loadf
  00067	6a fe		 push	 -2			; fffffffeH
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 _lua_settop
  0006f	83 c4 08	 add	 esp, 8
$LN4@luaB_loadf:
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	b8 01 00 00 00	 mov	 eax, 1
  00079	5b		 pop	 ebx
; Line 296
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
; Line 295
$LN6@luaB_loadf:
  0007e	53		 push	 ebx
  0007f	e8 00 00 00 00	 call	 _lua_pushnil
  00084	6a 01		 push	 1
  00086	6a fe		 push	 -2			; fffffffeH
  00088	53		 push	 ebx
  00089	e8 00 00 00 00	 call	 _lua_rotate
  0008e	83 c4 10	 add	 esp, 16			; 00000010H
  00091	b8 02 00 00 00	 mov	 eax, 2
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
; Line 296
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_luaB_loadfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _load_aux
_TEXT	SEGMENT
_L$ = 8							; size = 4
_status$ = 12						; size = 4
_envidx$ = 16						; size = 4
_load_aux PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 273
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 274
  00003	83 7d 0c 00	 cmp	 DWORD PTR _status$[ebp], 0
  00007	56		 push	 esi
  00008	75 35		 jne	 SHORT $LN4@load_aux
; Line 275
  0000a	8b 45 10	 mov	 eax, DWORD PTR _envidx$[ebp]
  0000d	85 c0		 test	 eax, eax
  0000f	74 26		 je	 SHORT $LN2@load_aux
; Line 276
  00011	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00014	50		 push	 eax
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 277
  0001b	6a 01		 push	 1
  0001d	6a fe		 push	 -2			; fffffffeH
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _lua_setupvalue
  00025	83 c4 14	 add	 esp, 20			; 00000014H
  00028	85 c0		 test	 eax, eax
  0002a	75 0b		 jne	 SHORT $LN2@load_aux
; Line 278
  0002c	6a fe		 push	 -2			; fffffffeH
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _lua_settop
  00034	83 c4 08	 add	 esp, 8
$LN2@load_aux:
; Line 280
  00037	b8 01 00 00 00	 mov	 eax, 1
  0003c	5e		 pop	 esi
; Line 287
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN4@load_aux:
; Line 283
  0003f	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 _lua_pushnil
; Line 284
  00048	6a 01		 push	 1
  0004a	6a fe		 push	 -2			; fffffffeH
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 _lua_rotate
  00052	83 c4 10	 add	 esp, 16			; 00000010H
; Line 285
  00055	b8 02 00 00 00	 mov	 eax, 2
  0005a	5e		 pop	 esi
; Line 287
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_load_aux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_ipairs
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_ipairs PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 260
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 262
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_08JMAMPABE@__ipairs?$AA@
  0000c	6a 01		 push	 1
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _luaL_getmetafield
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	85 c0		 test	 eax, eax
  00019	75 34		 jne	 SHORT $LN6@luaB_ipair
  0001b	6a 05		 push	 5
  0001d	6a 01		 push	 1
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _luaL_checktype
  00025	6a 00		 push	 0
  00027	68 00 00 00 00	 push	 OFFSET _ipairsaux
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _lua_pushcclosure
  00032	6a 01		 push	 1
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _lua_pushvalue
  0003a	6a 00		 push	 0
  0003c	6a 00		 push	 0
  0003e	56		 push	 esi
  0003f	e8 00 00 00 00	 call	 _lua_pushinteger
  00044	83 c4 2c	 add	 esp, 44			; 0000002cH
  00047	b8 03 00 00 00	 mov	 eax, 3
  0004c	5e		 pop	 esi
; Line 270
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
; Line 262
$LN6@luaB_ipair:
  0004f	6a 01		 push	 1
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 _lua_pushvalue
  00057	6a 00		 push	 0
  00059	6a 00		 push	 0
  0005b	6a 03		 push	 3
  0005d	6a 01		 push	 1
  0005f	56		 push	 esi
  00060	e8 00 00 00 00	 call	 _lua_callk
  00065	83 c4 1c	 add	 esp, 28			; 0000001cH
  00068	b8 03 00 00 00	 mov	 eax, 3
  0006d	5e		 pop	 esi
; Line 270
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_luaB_ipairs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _ipairsaux
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ipairsaux PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 248
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 249
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	6a 02		 push	 2
  0000b	53		 push	 ebx
  0000c	e8 00 00 00 00	 call	 _luaL_checkinteger
  00011	8b f8		 mov	 edi, eax
  00013	8b f2		 mov	 esi, edx
  00015	83 c7 01	 add	 edi, 1
  00018	83 d6 00	 adc	 esi, 0
; Line 250
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 _lua_pushinteger
; Line 251
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	6a 01		 push	 1
  00027	53		 push	 ebx
  00028	e8 00 00 00 00	 call	 _lua_geti
  0002d	83 c4 24	 add	 esp, 36			; 00000024H
  00030	f7 d8		 neg	 eax
  00032	1b c0		 sbb	 eax, eax
  00034	f7 d8		 neg	 eax
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	40		 inc	 eax
  00039	5b		 pop	 ebx
; Line 252
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
_ipairsaux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_pairs
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_pairs PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 240
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 241
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_07HJHPCFBM@__pairs?$AA@
  0000c	6a 01		 push	 1
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _luaL_getmetafield
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	85 c0		 test	 eax, eax
  00019	75 30		 jne	 SHORT $LN6@luaB_pairs
  0001b	6a 05		 push	 5
  0001d	6a 01		 push	 1
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _luaL_checktype
  00025	6a 00		 push	 0
  00027	68 00 00 00 00	 push	 OFFSET _luaB_next
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _lua_pushcclosure
  00032	6a 01		 push	 1
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _lua_pushvalue
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _lua_pushnil
  00040	83 c4 24	 add	 esp, 36			; 00000024H
  00043	b8 03 00 00 00	 mov	 eax, 3
  00048	5e		 pop	 esi
; Line 242
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
; Line 241
$LN6@luaB_pairs:
  0004b	6a 01		 push	 1
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 _lua_pushvalue
  00053	6a 00		 push	 0
  00055	6a 00		 push	 0
  00057	6a 03		 push	 3
  00059	6a 01		 push	 1
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 _lua_callk
  00061	83 c4 1c	 add	 esp, 28			; 0000001cH
  00064	b8 03 00 00 00	 mov	 eax, 3
  00069	5e		 pop	 esi
; Line 242
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_luaB_pairs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_next
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_next PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 228
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 229
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 05		 push	 5
  00009	6a 01		 push	 1
  0000b	56		 push	 esi
  0000c	e8 00 00 00 00	 call	 _luaL_checktype
; Line 230
  00011	6a 02		 push	 2
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _lua_settop
; Line 231
  00019	6a 01		 push	 1
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _lua_next
  00021	83 c4 1c	 add	 esp, 28			; 0000001cH
  00024	85 c0		 test	 eax, eax
  00026	74 08		 je	 SHORT $LN2@luaB_next
; Line 232
  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	5e		 pop	 esi
; Line 237
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN2@luaB_next:
; Line 234
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _lua_pushnil
  00036	83 c4 04	 add	 esp, 4
; Line 235
  00039	b8 01 00 00 00	 mov	 eax, 1
  0003e	5e		 pop	 esi
; Line 237
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_luaB_next ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _pairsmeta
_TEXT	SEGMENT
_L$ = 8							; size = 4
_method$ = 12						; size = 4
_iszero$ = 16						; size = 4
_iter$ = 20						; size = 4
_pairsmeta PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 212
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 213
  00004	ff 75 0c	 push	 DWORD PTR _method$[ebp]
  00007	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000a	6a 01		 push	 1
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _luaL_getmetafield
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	85 c0		 test	 eax, eax
  00017	75 4c		 jne	 SHORT $LN4@pairsmeta
; Line 214
  00019	6a 05		 push	 5
  0001b	6a 01		 push	 1
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 _luaL_checktype
; Line 215
  00023	6a 00		 push	 0
  00025	ff 75 14	 push	 DWORD PTR _iter$[ebp]
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 _lua_pushcclosure
; Line 216
  0002e	6a 01		 push	 1
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _lua_pushvalue
  00036	83 c4 20	 add	 esp, 32			; 00000020H
; Line 217
  00039	83 7d 10 00	 cmp	 DWORD PTR _iszero$[ebp], 0
  0003d	74 15		 je	 SHORT $LN3@pairsmeta
  0003f	6a 00		 push	 0
  00041	6a 00		 push	 0
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _lua_pushinteger
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 224
  0004c	b8 03 00 00 00	 mov	 eax, 3
  00051	5e		 pop	 esi
; Line 225
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
$LN3@pairsmeta:
; Line 218
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 _lua_pushnil
  0005a	83 c4 04	 add	 esp, 4
; Line 224
  0005d	b8 03 00 00 00	 mov	 eax, 3
  00062	5e		 pop	 esi
; Line 225
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
$LN4@pairsmeta:
; Line 221
  00065	6a 01		 push	 1
  00067	56		 push	 esi
  00068	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 222
  0006d	6a 00		 push	 0
  0006f	6a 00		 push	 0
  00071	6a 03		 push	 3
  00073	6a 01		 push	 1
  00075	56		 push	 esi
  00076	e8 00 00 00 00	 call	 _lua_callk
  0007b	83 c4 1c	 add	 esp, 28			; 0000001cH
; Line 224
  0007e	b8 03 00 00 00	 mov	 eax, 3
  00083	5e		 pop	 esi
; Line 225
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_pairsmeta ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_type
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_type PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 203
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 204
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	6a 01		 push	 1
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _lua_type
  00010	8b f8		 mov	 edi, eax
  00012	83 c4 08	 add	 esp, 8
; Line 205
  00015	83 ff ff	 cmp	 edi, -1
  00018	75 10		 jne	 SHORT $LN3@luaB_type
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PDHEKNMA@value?5expected?$AA@
  0001f	6a 01		 push	 1
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 _luaL_argerror
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@luaB_type:
; Line 206
  0002a	57		 push	 edi
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 _lua_typename
  00031	50		 push	 eax
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 _lua_pushstring
  00038	83 c4 10	 add	 esp, 16			; 00000010H
; Line 207
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
; Line 208
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_luaB_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_collectgarbage
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_collectgarbage PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 175
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; Line 182
  00006	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00009	68 00 00 00 00	 push	 OFFSET ?opts@?1??luaB_collectgarbage@@9@9
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_07JHIJCABF@collect?$AA@
  00013	6a 01		 push	 1
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 _luaL_checkoption
; Line 183
  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	6a 02		 push	 2
  00021	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?optsnum@?1??luaB_collectgarbage@@9@9[eax*4]
  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 _luaL_optinteger
; Line 184
  0002e	50		 push	 eax
  0002f	56		 push	 esi
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 _lua_gc
  00036	83 c4 2c	 add	 esp, 44			; 0000002cH
  00039	8b d8		 mov	 ebx, eax
; Line 185
  0003b	83 ee 03	 sub	 esi, 3
  0003e	74 34		 je	 SHORT $LN3@luaB_colle
  00040	83 ee 02	 sub	 esi, 2
  00043	74 1b		 je	 SHORT $LN2@luaB_colle
  00045	83 ee 04	 sub	 esi, 4
  00048	74 16		 je	 SHORT $LN2@luaB_colle
; Line 196
  0004a	99		 cdq
  0004b	52		 push	 edx
  0004c	50		 push	 eax
  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 _lua_pushinteger
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
; Line 200
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN2@luaB_colle:
; Line 192
  00060	53		 push	 ebx
  00061	57		 push	 edi
  00062	e8 00 00 00 00	 call	 _lua_pushboolean
  00067	83 c4 08	 add	 esp, 8
  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
; Line 200
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN3@luaB_colle:
; Line 187
  00074	6a 00		 push	 0
  00076	6a 04		 push	 4
  00078	57		 push	 edi
  00079	e8 00 00 00 00	 call	 _lua_gc
  0007e	66 0f 6e c3	 movd	 xmm0, ebx
; Line 188
  00082	83 c4 04	 add	 esp, 4
  00085	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00089	66 0f 6e c8	 movd	 xmm1, eax
  0008d	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  00091	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f50000000000000
  00099	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0009d	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000a2	57		 push	 edi
  000a3	e8 00 00 00 00	 call	 _lua_pushnumber
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 189
  000ab	b8 01 00 00 00	 mov	 eax, 1
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
; Line 200
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
_luaB_collectgarbage ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_rawset
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_rawset PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 165
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 166
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 05		 push	 5
  00009	6a 01		 push	 1
  0000b	56		 push	 esi
  0000c	e8 00 00 00 00	 call	 _luaL_checktype
; Line 167
  00011	6a 02		 push	 2
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _luaL_checkany
; Line 168
  00019	6a 03		 push	 3
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _luaL_checkany
; Line 169
  00021	6a 03		 push	 3
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 _lua_settop
; Line 170
  00029	6a 01		 push	 1
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 _lua_rawset
  00031	83 c4 2c	 add	 esp, 44			; 0000002cH
; Line 171
  00034	b8 01 00 00 00	 mov	 eax, 1
  00039	5e		 pop	 esi
; Line 172
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
_luaB_rawset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_rawget
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_rawget PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 157
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 158
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 05		 push	 5
  00009	6a 01		 push	 1
  0000b	56		 push	 esi
  0000c	e8 00 00 00 00	 call	 _luaL_checktype
; Line 159
  00011	6a 02		 push	 2
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _luaL_checkany
; Line 160
  00019	6a 02		 push	 2
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _lua_settop
; Line 161
  00021	6a 01		 push	 1
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 _lua_rawget
  00029	83 c4 24	 add	 esp, 36			; 00000024H
; Line 162
  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	5e		 pop	 esi
; Line 163
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
_luaB_rawget ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_rawlen
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_rawlen PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 148
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 149
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 01		 push	 1
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _lua_type
  0000f	83 c4 08	 add	 esp, 8
; Line 151
  00012	83 f8 05	 cmp	 eax, 5
  00015	74 15		 je	 SHORT $LN3@luaB_rawle
  00017	83 f8 04	 cmp	 eax, 4
  0001a	74 10		 je	 SHORT $LN3@luaB_rawle
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DDKMCJJM@table?5or?5string?5expected?$AA@
  00021	6a 01		 push	 1
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 _luaL_argerror
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@luaB_rawle:
; Line 152
  0002c	6a 01		 push	 1
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _lua_rawlen
  00034	6a 00		 push	 0
  00036	50		 push	 eax
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _lua_pushinteger
  0003d	83 c4 14	 add	 esp, 20			; 00000014H
; Line 153
  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	5e		 pop	 esi
; Line 154
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_luaB_rawlen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_rawequal
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_rawequal PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 140
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 141
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 01		 push	 1
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _luaL_checkany
; Line 142
  0000f	6a 02		 push	 2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _luaL_checkany
; Line 143
  00017	6a 02		 push	 2
  00019	6a 01		 push	 1
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _lua_rawequal
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _lua_pushboolean
  00028	83 c4 24	 add	 esp, 36			; 00000024H
; Line 144
  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	5e		 pop	 esi
; Line 145
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_luaB_rawequal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_setmetatable
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_setmetatable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 127
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 128
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	6a 02		 push	 2
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _lua_type
; Line 129
  00010	6a 05		 push	 5
  00012	6a 01		 push	 1
  00014	56		 push	 esi
  00015	8b f8		 mov	 edi, eax
  00017	e8 00 00 00 00	 call	 _luaL_checktype
  0001c	83 c4 14	 add	 esp, 20			; 00000014H
; Line 131
  0001f	85 ff		 test	 edi, edi
  00021	74 15		 je	 SHORT $LN4@luaB_setme
  00023	83 ff 05	 cmp	 edi, 5
  00026	74 10		 je	 SHORT $LN4@luaB_setme
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HDIIKINN@nil?5or?5table?5expected?$AA@
  0002d	6a 02		 push	 2
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _luaL_argerror
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@luaB_setme:
; Line 132
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OKDMMFBL@__metatable?$AA@
  0003d	6a 01		 push	 1
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _luaL_getmetafield
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	85 c0		 test	 eax, eax
  0004a	74 12		 je	 SHORT $LN1@luaB_setme
; Line 133
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LJKICCEL@cannot?5change?5a?5protected?5metata@
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 _luaL_error
  00057	83 c4 08	 add	 esp, 8
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
; Line 137
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN1@luaB_setme:
; Line 134
  0005e	6a 02		 push	 2
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 _lua_settop
; Line 135
  00066	6a 01		 push	 1
  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 _lua_setmetatable
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
; Line 136
  00071	b8 01 00 00 00	 mov	 eax, 1
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
; Line 137
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_luaB_setmetatable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_getmetatable
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_getmetatable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 116
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 117
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 01		 push	 1
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _luaL_checkany
; Line 118
  0000f	6a 01		 push	 1
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _lua_getmetatable
  00017	83 c4 10	 add	 esp, 16			; 00000010H
  0001a	85 c0		 test	 eax, eax
  0001c	75 11		 jne	 SHORT $LN1@luaB_getme
; Line 119
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _lua_pushnil
  00024	83 c4 04	 add	 esp, 4
; Line 123
  00027	b8 01 00 00 00	 mov	 eax, 1
  0002c	5e		 pop	 esi
; Line 124
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN1@luaB_getme:
; Line 122
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OKDMMFBL@__metatable?$AA@
  00034	6a 01		 push	 1
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 _luaL_getmetafield
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 123
  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	5e		 pop	 esi
; Line 124
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_luaB_getmetatable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_error
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_error PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 104
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 105
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	6a 00		 push	 0
  0000a	6a 01		 push	 1
  0000c	6a 02		 push	 2
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _luaL_optinteger
; Line 106
  00014	6a 01		 push	 1
  00016	56		 push	 esi
  00017	8b f8		 mov	 edi, eax
  00019	e8 00 00 00 00	 call	 _lua_settop
; Line 107
  0001e	6a 01		 push	 1
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 _lua_isstring
  00026	83 c4 20	 add	 esp, 32			; 00000020H
  00029	85 c0		 test	 eax, eax
  0002b	74 1e		 je	 SHORT $LN1@luaB_error
  0002d	85 ff		 test	 edi, edi
  0002f	7e 1a		 jle	 SHORT $LN1@luaB_error
; Line 108
  00031	57		 push	 edi
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 _luaL_where
; Line 109
  00038	6a 01		 push	 1
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 110
  00040	6a 02		 push	 2
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 _lua_concat
  00048	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@luaB_error:
; Line 112
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 _lua_error
  00051	83 c4 04	 add	 esp, 4
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
; Line 113
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_luaB_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_tonumber
_TEXT	SEGMENT
_n$1 = -16						; size = 8
_l$2 = -8						; size = 4
_s$1$ = -4						; size = 4
_l$3 = -4						; size = 4
_L$ = 8							; size = 4
_luaB_tonumber PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 71
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
; Line 72
  00007	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000a	6a 02		 push	 2
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _lua_type
  00012	83 c4 08	 add	 esp, 8
  00015	85 c0		 test	 eax, eax
  00017	7f 65		 jg	 SHORT $LN6@luaB_tonum
; Line 73
  00019	6a 01		 push	 1
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _luaL_checkany
; Line 74
  00021	6a 01		 push	 1
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 _lua_type
  00029	83 c4 10	 add	 esp, 16			; 00000010H
  0002c	83 f8 03	 cmp	 eax, 3
  0002f	75 15		 jne	 SHORT $LN5@luaB_tonum
; Line 75
  00031	6a 01		 push	 1
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _lua_settop
  00039	83 c4 08	 add	 esp, 8
; Line 100
  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	5e		 pop	 esi
; Line 101
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN5@luaB_tonum:
; Line 80
  00046	8d 45 fc	 lea	 eax, DWORD PTR _l$3[ebp]
  00049	50		 push	 eax
  0004a	6a 01		 push	 1
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 _lua_tolstring
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 81
  00055	85 c0		 test	 eax, eax
  00057	74 12		 je	 SHORT $LN1@luaB_tonum
  00059	50		 push	 eax
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 _lua_stringtonumber
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _l$3[ebp]
  00063	83 c4 08	 add	 esp, 8
  00066	41		 inc	 ecx
  00067	3b c1		 cmp	 eax, ecx
  00069	74 09		 je	 SHORT $LN13@luaB_tonum
$LN1@luaB_tonum:
; Line 99
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 _lua_pushnil
  00071	83 c4 04	 add	 esp, 4
$LN13@luaB_tonum:
; Line 100
  00074	b8 01 00 00 00	 mov	 eax, 1
  00079	5e		 pop	 esi
; Line 101
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
$LN6@luaB_tonum:
  0007e	53		 push	 ebx
  0007f	57		 push	 edi
  00080	0f 57 c0	 xorps	 xmm0, xmm0
; Line 90
  00083	6a 02		 push	 2
  00085	56		 push	 esi
  00086	66 0f 13 45 f0	 movlpd	 QWORD PTR _n$1[ebp], xmm0
  0008b	e8 00 00 00 00	 call	 _luaL_checkinteger
; Line 91
  00090	6a 04		 push	 4
  00092	6a 01		 push	 1
  00094	56		 push	 esi
  00095	8b f8		 mov	 edi, eax
  00097	8b da		 mov	 ebx, edx
  00099	e8 00 00 00 00	 call	 _luaL_checktype
; Line 92
  0009e	8d 45 f8	 lea	 eax, DWORD PTR _l$2[ebp]
  000a1	50		 push	 eax
  000a2	6a 01		 push	 1
  000a4	56		 push	 esi
  000a5	e8 00 00 00 00	 call	 _lua_tolstring
  000aa	83 c4 20	 add	 esp, 32			; 00000020H
  000ad	89 45 fc	 mov	 DWORD PTR _s$1$[ebp], eax
; Line 93
  000b0	85 db		 test	 ebx, ebx
  000b2	7c 12		 jl	 SHORT $LN12@luaB_tonum
  000b4	7f 10		 jg	 SHORT $LN12@luaB_tonum
  000b6	83 ff 02	 cmp	 edi, 2
  000b9	72 0b		 jb	 SHORT $LN12@luaB_tonum
  000bb	85 db		 test	 ebx, ebx
  000bd	7c 1a		 jl	 SHORT $LN10@luaB_tonum
  000bf	7f 05		 jg	 SHORT $LN12@luaB_tonum
  000c1	83 ff 24	 cmp	 edi, 36			; 00000024H
  000c4	76 13		 jbe	 SHORT $LN10@luaB_tonum
$LN12@luaB_tonum:
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GGLHLOMM@base?5out?5of?5range?$AA@
  000cb	6a 02		 push	 2
  000cd	56		 push	 esi
  000ce	e8 00 00 00 00	 call	 _luaL_argerror
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@luaB_tonum:
; Line 94
  000d9	8d 4d f0	 lea	 ecx, DWORD PTR _n$1[ebp]
  000dc	51		 push	 ecx
  000dd	57		 push	 edi
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _b_str2int
  000e4	8b 4d f8	 mov	 ecx, DWORD PTR _l$2[ebp]
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ea	03 4d fc	 add	 ecx, DWORD PTR _s$1$[ebp]
  000ed	5f		 pop	 edi
  000ee	5b		 pop	 ebx
  000ef	3b c1		 cmp	 eax, ecx
  000f1	0f 85 74 ff ff
	ff		 jne	 $LN1@luaB_tonum
; Line 95
  000f7	ff 75 f4	 push	 DWORD PTR _n$1[ebp+4]
  000fa	ff 75 f0	 push	 DWORD PTR _n$1[ebp]
  000fd	56		 push	 esi
  000fe	e8 00 00 00 00	 call	 _lua_pushinteger
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 100
  00106	b8 01 00 00 00	 mov	 eax, 1
  0010b	5e		 pop	 esi
; Line 101
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
_luaB_tonumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_str2int
_TEXT	SEGMENT
_n$ = -12						; size = 8
_neg$1$ = -4						; size = 4
_n$1$ = 8						; size = 4
_s$ = 8							; size = 4
_base$ = 12						; size = 4
_pn$ = 16						; size = 4
_b_str2int PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 50
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; Line 53
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_06IOBDPLFO@?5?$AM?6?$AN?7?$AL?$AA@
  00012	56		 push	 esi
  00013	66 0f 13 45 f4	 movlpd	 QWORD PTR _n$[ebp], xmm0
  00018	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _neg$1$[ebp], 0
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strspn
  00025	03 f0		 add	 esi, eax
  00027	83 c4 08	 add	 esp, 8
; Line 54
  0002a	8a 06		 mov	 al, BYTE PTR [esi]
  0002c	3c 2d		 cmp	 al, 45			; 0000002dH
  0002e	75 09		 jne	 SHORT $LN8@b_str2int
  00030	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _neg$1$[ebp], 1
  00037	eb 04		 jmp	 SHORT $LN26@b_str2int
$LN8@b_str2int:
; Line 55
  00039	3c 2b		 cmp	 al, 43			; 0000002bH
  0003b	75 01		 jne	 SHORT $LN6@b_str2int
$LN26@b_str2int:
  0003d	46		 inc	 esi
$LN6@b_str2int:
; Line 56
  0003e	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isalnum
  00048	83 c4 04	 add	 esp, 4
  0004b	85 c0		 test	 eax, eax
  0004d	75 05		 jne	 SHORT $LN23@b_str2int
  0004f	5e		 pop	 esi
; Line 68
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
$LN23@b_str2int:
; Line 57
  00054	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00057	53		 push	 ebx
  00058	8b 5d f8	 mov	 ebx, DWORD PTR _n$[ebp+4]
  0005b	89 45 08	 mov	 DWORD PTR _n$1$[ebp], eax
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL4@b_str2int:
; Line 60
  00060	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isdigit
  0006a	83 c4 04	 add	 esp, 4
  0006d	85 c0		 test	 eax, eax
  0006f	74 08		 je	 SHORT $LN11@b_str2int
  00071	0f be 3e	 movsx	 edi, BYTE PTR [esi]
  00074	83 ef 30	 sub	 edi, 48			; 00000030H
  00077	eb 10		 jmp	 SHORT $LN12@b_str2int
$LN11@b_str2int:
  00079	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0007c	50		 push	 eax
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00083	83 c4 04	 add	 esp, 4
  00086	8d 78 c9	 lea	 edi, DWORD PTR [eax-55]
$LN12@b_str2int:
; Line 61
  00089	8b 45 0c	 mov	 eax, DWORD PTR _base$[ebp]
  0008c	3b f8		 cmp	 edi, eax
  0008e	7d 5f		 jge	 SHORT $LN16@b_str2int
; Line 62
  00090	53		 push	 ebx
  00091	ff 75 08	 push	 DWORD PTR _n$1$[ebp]
  00094	99		 cdq
  00095	52		 push	 edx
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 __allmul
  0009c	8b c8		 mov	 ecx, eax
  0009e	8b da		 mov	 ebx, edx
  000a0	8b c7		 mov	 eax, edi
  000a2	99		 cdq
  000a3	03 c8		 add	 ecx, eax
; Line 64
  000a5	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  000a9	50		 push	 eax
  000aa	13 da		 adc	 ebx, edx
  000ac	89 4d 08	 mov	 DWORD PTR _n$1$[ebp], ecx
  000af	46		 inc	 esi
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isalnum
  000b6	83 c4 04	 add	 esp, 4
  000b9	85 c0		 test	 eax, eax
  000bb	75 a3		 jne	 SHORT $LL4@b_str2int
; Line 65
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_06IOBDPLFO@?5?$AM?6?$AN?7?$AL?$AA@
  000c2	56		 push	 esi
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strspn
  000c9	03 f0		 add	 esi, eax
  000cb	83 c4 08	 add	 esp, 8
; Line 66
  000ce	83 7d fc 00	 cmp	 DWORD PTR _neg$1$[ebp], 0
  000d2	8b 45 08	 mov	 eax, DWORD PTR _n$1$[ebp]
  000d5	74 07		 je	 SHORT $LN14@b_str2int
  000d7	f7 d8		 neg	 eax
  000d9	83 d3 00	 adc	 ebx, 0
  000dc	f7 db		 neg	 ebx
$LN14@b_str2int:
  000de	8b 4d 10	 mov	 ecx, DWORD PTR _pn$[ebp]
  000e1	5f		 pop	 edi
  000e2	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
  000e5	89 01		 mov	 DWORD PTR [ecx], eax
; Line 67
  000e7	8b c6		 mov	 eax, esi
  000e9	5b		 pop	 ebx
  000ea	5e		 pop	 esi
; Line 68
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
$LN16@b_str2int:
  000ef	5f		 pop	 edi
  000f0	5b		 pop	 ebx
; Line 61
  000f1	33 c0		 xor	 eax, eax
  000f3	5e		 pop	 esi
; Line 68
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_b_str2int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_print
_TEXT	SEGMENT
_n$1$ = -8						; size = 4
_l$1 = -4						; size = 4
_L$ = 8							; size = 4
_luaB_print PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 26
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 27
  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _lua_gettop
  00012	8b d8		 mov	 ebx, eax
; Line 29
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_08FNIIFOJC@tostring?$AA@
  00019	56		 push	 esi
  0001a	89 5d f8	 mov	 DWORD PTR _n$1$[ebp], ebx
  0001d	e8 00 00 00 00	 call	 _lua_getglobal
; Line 30
  00022	bf 01 00 00 00	 mov	 edi, 1
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	3b df		 cmp	 ebx, edi
  0002c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp____iob_func
  00032	0f 8c 80 00 00
	00		 jl	 $LN3@luaB_print
$LL5@luaB_print:
; Line 33
  00038	6a ff		 push	 -1
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 34
  00040	57		 push	 edi
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 35
  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	6a 01		 push	 1
  0004d	6a 01		 push	 1
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 _lua_callk
; Line 36
  00055	8d 45 fc	 lea	 eax, DWORD PTR _l$1[ebp]
  00058	50		 push	 eax
  00059	6a ff		 push	 -1
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 _lua_tolstring
  00061	8b d8		 mov	 ebx, eax
  00063	83 c4 30	 add	 esp, 48			; 00000030H
; Line 37
  00066	85 db		 test	 ebx, ebx
  00068	74 7b		 je	 SHORT $LN9@luaB_print
; Line 39
  0006a	83 ff 01	 cmp	 edi, 1
  0006d	7e 1c		 jle	 SHORT $LN1@luaB_print
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00075	83 c0 20	 add	 eax, 32			; 00000020H
  00078	50		 push	 eax
  00079	6a 01		 push	 1
  0007b	6a 01		 push	 1
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00088	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@luaB_print:
; Line 40
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00091	83 c0 20	 add	 eax, 32			; 00000020H
  00094	50		 push	 eax
  00095	ff 75 fc	 push	 DWORD PTR _l$1[ebp]
  00098	6a 01		 push	 1
  0009a	53		 push	 ebx
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
; Line 41
  000a1	6a fe		 push	 -2			; fffffffeH
  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 _lua_settop
  000a9	47		 inc	 edi
  000aa	83 c4 18	 add	 esp, 24			; 00000018H
  000ad	3b 7d f8	 cmp	 edi, DWORD PTR _n$1$[ebp]
  000b0	7e 86		 jle	 SHORT $LL5@luaB_print
; Line 37
  000b2	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp____iob_func
$LN3@luaB_print:
; Line 43
  000b8	ff d3		 call	 ebx
  000ba	83 c0 20	 add	 eax, 32			; 00000020H
  000bd	50		 push	 eax
  000be	6a 01		 push	 1
  000c0	6a 01		 push	 1
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000cd	ff d3		 call	 ebx
  000cf	83 c0 20	 add	 eax, 32			; 00000020H
  000d2	50		 push	 eax
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fflush
  000d9	83 c4 14	 add	 esp, 20			; 00000014H
; Line 44
  000dc	33 c0		 xor	 eax, eax
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
; Line 45
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
$LN9@luaB_print:
; Line 38
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KMHHCBJA@?8tostring?8?5must?5return?5a?5string?5@
  000ea	56		 push	 esi
  000eb	e8 00 00 00 00	 call	 _luaL_error
  000f0	83 c4 08	 add	 esp, 8
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	5b		 pop	 ebx
; Line 45
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
_luaB_print ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaopen_base
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaopen_base PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 530
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 532
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 00		 push	 0
  00009	6a 02		 push	 2
  0000b	68 d8 b9 f0 ff	 push	 -1001000		; fff0b9d8H
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 _lua_rawgeti
; Line 533
  00016	6a 00		 push	 0
  00018	68 00 00 00 00	 push	 OFFSET _base_funcs
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 _luaL_setfuncs
; Line 535
  00023	6a ff		 push	 -1
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 536
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_02NIGGJGKC@_G?$AA@
  00030	6a fe		 push	 -2			; fffffffeH
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 _lua_setfield
; Line 538
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PBPDJEBJ@Lua?5spq?51?41?$AA@
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _lua_pushstring
; Line 539
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_08PMLCGGEP@_VERSION?$AA@
  00048	6a fe		 push	 -2			; fffffffeH
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _lua_setfield
  00050	83 c4 44	 add	 esp, 68			; 00000044H
; Line 540
  00053	b8 01 00 00 00	 mov	 eax, 1
  00058	5e		 pop	 esi
; Line 541
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_luaopen_base ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_print_spec
_TEXT	SEGMENT
_L$ = 8							; size = 4
_cc$ = 12						; size = 4
_luaB_print_spec PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 752
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 753
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00009	83 c0 20	 add	 eax, 32			; 00000020H
  0000c	50		 push	 eax
  0000d	ff 75 0c	 push	 DWORD PTR _cc$[ebp]
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
; Line 754
  00016	6a fe		 push	 -2			; fffffffeH
  00018	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0001b	e8 00 00 00 00	 call	 _lua_settop
; Line 755
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00026	83 c0 20	 add	 eax, 32			; 00000020H
  00029	50		 push	 eax
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  00035	83 c4 18	 add	 esp, 24			; 00000018H
; Line 756
  00038	33 c0		 xor	 eax, eax
; Line 757
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
_luaB_print_spec ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_ztest
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_ztest PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 736
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 737
  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp____iob_func
  0000a	57		 push	 edi
  0000b	ff d3		 call	 ebx
  0000d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__fputs
  00013	83 c0 20	 add	 eax, 32			; 00000020H
  00016	50		 push	 eax
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HFJBOPML@This?5is?5a?5easter?5egg?4?$AA@
  0001c	ff d7		 call	 edi
  0001e	6a fe		 push	 -2			; fffffffeH
  00020	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00023	e8 00 00 00 00	 call	 _lua_settop
  00028	ff d3		 call	 ebx
  0002a	83 c0 20	 add	 eax, 32			; 00000020H
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00033	ff d7		 call	 edi
  00035	ff d3		 call	 ebx
  00037	83 c0 20	 add	 eax, 32			; 00000020H
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EADLKGKP@Easter?5egg?5author?3Q?4?5John?$AA@
  00040	ff d7		 call	 edi
  00042	6a fe		 push	 -2			; fffffffeH
  00044	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00047	e8 00 00 00 00	 call	 _lua_settop
  0004c	ff d3		 call	 ebx
  0004e	83 c0 20	 add	 eax, 32			; 00000020H
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00057	ff d7		 call	 edi
  00059	83 c4 30	 add	 esp, 48			; 00000030H
; Line 738
  0005c	33 c0		 xor	 eax, eax
  0005e	5f		 pop	 edi
  0005f	5b		 pop	 ebx
; Line 739
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_luaB_ztest ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_version
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_version PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 816
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 817
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00009	83 c0 20	 add	 eax, 32			; 00000020H
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JIOMGDOO@Lua?5spq?51?41?41?$AA@
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  00018	6a fe		 push	 -2			; fffffffeH
  0001a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0001d	e8 00 00 00 00	 call	 _lua_settop
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00028	83 c0 20	 add	 eax, 32			; 00000020H
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  00037	83 c4 18	 add	 esp, 24			; 00000018H
  0003a	33 c0		 xor	 eax, eax
; Line 818
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_luaB_version ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_usage
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_usage PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 748
  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00006	ff 35 00 00 00
	00		 push	 DWORD PTR _progname
  0000c	83 c0 20	 add	 eax, 32			; 00000020H
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BDD@BBDJGOCB@usage?3?5?$CFs?5?$FLoptions?$FN?5?$FLscript?5?$FLarg@
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00021	83 c0 40	 add	 eax, 64			; 00000040H
  00024	50		 push	 eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fflush
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
; Line 749
  0002e	33 c0		 xor	 eax, eax
; Line 750
  00030	c3		 ret	 0
_luaB_usage ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_help
_TEXT	SEGMENT
_lid$1$ = -108						; size = 4
_result$ = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_luaB_help PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 759
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
; Line 760
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDefaultLangID@0
; Line 768
  0001c	6a 1f		 push	 31			; 0000001fH
  0001e	0f b7 c0	 movzx	 eax, ax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FOKLKONM@Functions?5size?5is?3?$CFd?$AA@
  00026	89 45 94	 mov	 DWORD PTR _lid$1$[ebp], eax
  00029	8d 45 98	 lea	 eax, DWORD PTR _result$[ebp]
  0002c	6a 64		 push	 100			; 00000064H
  0002e	50		 push	 eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf_s
; Line 769
  00035	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp____iob_func
  0003b	ff d7		 call	 edi
  0003d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__fputs
  00043	83 c0 20	 add	 eax, 32			; 00000020H
  00046	50		 push	 eax
  00047	8d 45 98	 lea	 eax, DWORD PTR _result$[ebp]
  0004a	50		 push	 eax
  0004b	ff d6		 call	 esi
  0004d	6a fe		 push	 -2			; fffffffeH
  0004f	53		 push	 ebx
  00050	e8 00 00 00 00	 call	 _lua_settop
  00055	ff d7		 call	 edi
  00057	83 c0 20	 add	 eax, 32			; 00000020H
  0005a	50		 push	 eax
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00060	ff d6		 call	 esi
; Line 770
  00062	8b 45 94	 mov	 eax, DWORD PTR _lid$1$[ebp]
  00065	83 c4 28	 add	 esp, 40			; 00000028H
  00068	0f b7 c0	 movzx	 eax, ax
  0006b	3d 0c 10 00 00	 cmp	 eax, 4108		; 0000100cH
  00070	0f 8f f1 00 00
	00		 jg	 $LN17@luaB_help
  00076	0f 84 1d 01 00
	00		 je	 $LN4@luaB_help
  0007c	3d 0c 08 00 00	 cmp	 eax, 2060		; 0000080cH
  00081	7f 54		 jg	 SHORT $LN18@luaB_help
  00083	0f 84 10 01 00
	00		 je	 $LN4@luaB_help
  00089	3d 04 08 00 00	 cmp	 eax, 2052		; 00000804H
  0008e	7f 29		 jg	 SHORT $LN19@luaB_help
  00090	74 75		 je	 SHORT $LN12@luaB_help
  00092	2d 09 04 00 00	 sub	 eax, 1033		; 00000409H
  00097	0f 84 6c 01 00
	00		 je	 $LN8@luaB_help
  0009d	83 e8 03	 sub	 eax, 3
  000a0	0f 84 f3 00 00
	00		 je	 $LN4@luaB_help
; Line 814
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	33 c0		 xor	 eax, eax
  000aa	5b		 pop	 ebx
; Line 815
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	33 cd		 xor	 ecx, ebp
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
$LN19@luaB_help:
; Line 770
  000b9	3d 09 08 00 00	 cmp	 eax, 2057		; 00000809H
  000be	0f 84 45 01 00
	00		 je	 $LN8@luaB_help
; Line 814
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	33 c0		 xor	 eax, eax
  000c8	5b		 pop	 ebx
; Line 815
  000c9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cc	33 cd		 xor	 ecx, ebp
  000ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN18@luaB_help:
; Line 770
  000d7	3d 04 10 00 00	 cmp	 eax, 4100		; 00001004H
  000dc	7f 6b		 jg	 SHORT $LN20@luaB_help
  000de	74 27		 je	 SHORT $LN12@luaB_help
  000e0	2d 09 0c 00 00	 sub	 eax, 3081		; 00000c09H
  000e5	0f 84 1e 01 00
	00		 je	 $LN8@luaB_help
  000eb	83 e8 03	 sub	 eax, 3
  000ee	0f 84 a5 00 00
	00		 je	 $LN4@luaB_help
; Line 814
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	33 c0		 xor	 eax, eax
  000f8	5b		 pop	 ebx
; Line 815
  000f9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fc	33 cd		 xor	 ecx, ebp
  000fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
$LN12@luaB_help:
; Line 777
  00107	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__printf
  0010d	33 ff		 xor	 edi, edi
  0010f	90		 npad	 1
$LL11@luaB_help:
; Line 779
  00110	ff b7 00 00 00
	00		 push	 DWORD PTR _base_funcs_note_chs[edi]
  00116	8b b7 04 00 00
	00		 mov	 esi, DWORD PTR _base_funcs_note_chs[edi+4]
  0011c	ff d3		 call	 ebx
  0011e	56		 push	 esi
  0011f	ff d3		 call	 ebx
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00126	ff d3		 call	 ebx
  00128	83 c7 08	 add	 edi, 8
  0012b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012e	81 ff f8 00 00
	00		 cmp	 edi, 248		; 000000f8H
  00134	72 da		 jb	 SHORT $LL11@luaB_help
; Line 814
  00136	5f		 pop	 edi
  00137	5e		 pop	 esi
  00138	33 c0		 xor	 eax, eax
  0013a	5b		 pop	 ebx
; Line 815
  0013b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013e	33 cd		 xor	 ecx, ebp
  00140	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c3		 ret	 0
$LN20@luaB_help:
; Line 770
  00149	3d 09 10 00 00	 cmp	 eax, 4105		; 00001009H
  0014e	0f 84 b5 00 00
	00		 je	 $LN8@luaB_help
; Line 814
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	33 c0		 xor	 eax, eax
  00158	5b		 pop	 ebx
; Line 815
  00159	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015c	33 cd		 xor	 ecx, ebp
  0015e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c3		 ret	 0
$LN17@luaB_help:
; Line 770
  00167	3d 09 20 00 00	 cmp	 eax, 8201		; 00002009H
  0016c	0f 8f 82 00 00
	00		 jg	 $LN21@luaB_help
  00172	0f 84 91 00 00
	00		 je	 $LN8@luaB_help
  00178	3d 09 18 00 00	 cmp	 eax, 6153		; 00001809H
  0017d	7f 5b		 jg	 SHORT $LN22@luaB_help
  0017f	0f 84 84 00 00
	00		 je	 $LN8@luaB_help
  00185	2d 09 14 00 00	 sub	 eax, 5129		; 00001409H
  0018a	0f 84 79 00 00
	00		 je	 $LN8@luaB_help
  00190	83 e8 03	 sub	 eax, 3
  00193	0f 85 9e 00 00
	00		 jne	 $LN5@luaB_help
$LN4@luaB_help:
; Line 807
  00199	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__printf
  0019f	33 ff		 xor	 edi, edi
$LL3@luaB_help:
; Line 809
  001a1	ff b7 00 00 00
	00		 push	 DWORD PTR _base_funcs_note_fre[edi]
  001a7	8b b7 04 00 00
	00		 mov	 esi, DWORD PTR _base_funcs_note_fre[edi+4]
  001ad	ff d3		 call	 ebx
  001af	56		 push	 esi
  001b0	ff d3		 call	 ebx
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  001b7	ff d3		 call	 ebx
  001b9	83 c7 08	 add	 edi, 8
  001bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bf	81 ff f8 00 00
	00		 cmp	 edi, 248		; 000000f8H
  001c5	72 da		 jb	 SHORT $LL3@luaB_help
; Line 814
  001c7	5f		 pop	 edi
  001c8	5e		 pop	 esi
  001c9	33 c0		 xor	 eax, eax
  001cb	5b		 pop	 ebx
; Line 815
  001cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cf	33 cd		 xor	 ecx, ebp
  001d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c3		 ret	 0
$LN22@luaB_help:
; Line 770
  001da	3d 09 1c 00 00	 cmp	 eax, 7177		; 00001c09H
  001df	74 28		 je	 SHORT $LN8@luaB_help
; Line 814
  001e1	5f		 pop	 edi
  001e2	5e		 pop	 esi
  001e3	33 c0		 xor	 eax, eax
  001e5	5b		 pop	 ebx
; Line 815
  001e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c3		 ret	 0
$LN21@luaB_help:
; Line 770
  001f4	3d 09 24 00 00	 cmp	 eax, 9225		; 00002409H
  001f9	74 0e		 je	 SHORT $LN8@luaB_help
  001fb	3d 09 28 00 00	 cmp	 eax, 10249		; 00002809H
  00200	74 07		 je	 SHORT $LN8@luaB_help
  00202	3d 09 2c 00 00	 cmp	 eax, 11273		; 00002c09H
  00207	75 2e		 jne	 SHORT $LN5@luaB_help
$LN8@luaB_help:
; Line 795
  00209	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__printf
  0020f	33 ff		 xor	 edi, edi
$LL7@luaB_help:
; Line 797
  00211	ff b7 00 00 00
	00		 push	 DWORD PTR _base_funcs_note_eng[edi]
  00217	8b b7 04 00 00
	00		 mov	 esi, DWORD PTR _base_funcs_note_eng[edi+4]
  0021d	ff d3		 call	 ebx
  0021f	56		 push	 esi
  00220	ff d3		 call	 ebx
  00222	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00227	ff d3		 call	 ebx
  00229	83 c7 08	 add	 edi, 8
  0022c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022f	81 ff f8 00 00
	00		 cmp	 edi, 248		; 000000f8H
  00235	72 da		 jb	 SHORT $LL7@luaB_help
$LN5@luaB_help:
; Line 815
  00237	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023a	33 c0		 xor	 eax, eax
  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	33 cd		 xor	 ecx, ebp
  00240	5b		 pop	 ebx
  00241	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c3		 ret	 0
_luaB_help ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_getDescription
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_getDescription PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 821
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 823
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDefaultLangID@0
; Line 824
  00009	0f b7 c0	 movzx	 eax, ax
  0000c	3d 09 14 00 00	 cmp	 eax, 5129		; 00001409H
  00011	7f 47		 jg	 SHORT $LN8@luaB_getDe
  00013	74 75		 je	 SHORT $LN2@luaB_getDe
  00015	3d 09 0c 00 00	 cmp	 eax, 3081		; 00000c09H
  0001a	7f 19		 jg	 SHORT $LN9@luaB_getDe
  0001c	74 6c		 je	 SHORT $LN2@luaB_getDe
  0001e	2d 09 04 00 00	 sub	 eax, 1033		; 00000409H
  00023	74 65		 je	 SHORT $LN2@luaB_getDe
  00025	2d fb 03 00 00	 sub	 eax, 1019		; 000003fbH
  0002a	74 19		 je	 SHORT $LN3@luaB_getDe
  0002c	83 e8 05	 sub	 eax, 5
  0002f	74 59		 je	 SHORT $LN2@luaB_getDe
; Line 854
  00031	33 c0		 xor	 eax, eax
; Line 855
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN9@luaB_getDe:
; Line 824
  00035	2d 04 10 00 00	 sub	 eax, 4100		; 00001004H
  0003a	74 09		 je	 SHORT $LN3@luaB_getDe
  0003c	83 e8 05	 sub	 eax, 5
  0003f	74 49		 je	 SHORT $LN2@luaB_getDe
; Line 854
  00041	33 c0		 xor	 eax, eax
; Line 855
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN3@luaB_getDe:
; Line 831
  00045	ff 35 00 00 00
	00		 push	 DWORD PTR _____Description_chs
  0004b	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0004e	e8 00 00 00 00	 call	 _luaB_print_spec
  00053	83 c4 08	 add	 esp, 8
; Line 854
  00056	33 c0		 xor	 eax, eax
; Line 855
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN8@luaB_getDe:
; Line 824
  0005a	3d 09 24 00 00	 cmp	 eax, 9225		; 00002409H
  0005f	7f 1b		 jg	 SHORT $LN10@luaB_getDe
  00061	74 27		 je	 SHORT $LN2@luaB_getDe
  00063	3d 09 18 00 00	 cmp	 eax, 6153		; 00001809H
  00068	74 20		 je	 SHORT $LN2@luaB_getDe
  0006a	3d 09 1c 00 00	 cmp	 eax, 7177		; 00001c09H
  0006f	74 19		 je	 SHORT $LN2@luaB_getDe
  00071	3d 09 20 00 00	 cmp	 eax, 8201		; 00002009H
  00076	74 12		 je	 SHORT $LN2@luaB_getDe
; Line 854
  00078	33 c0		 xor	 eax, eax
; Line 855
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN10@luaB_getDe:
; Line 824
  0007c	3d 09 28 00 00	 cmp	 eax, 10249		; 00002809H
  00081	74 07		 je	 SHORT $LN2@luaB_getDe
  00083	3d 09 2c 00 00	 cmp	 eax, 11273		; 00002c09H
  00088	75 39		 jne	 SHORT $LN14@luaB_getDe
$LN2@luaB_getDe:
  0008a	56		 push	 esi
; Line 846
  0008b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _____Description_eng
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00097	83 c0 20	 add	 eax, 32			; 00000020H
  0009a	50		 push	 eax
  0009b	56		 push	 esi
  0009c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__fputs
  000a2	ff d6		 call	 esi
  000a4	6a fe		 push	 -2			; fffffffeH
  000a6	ff 75 08	 push	 DWORD PTR _L$[ebp]
  000a9	e8 00 00 00 00	 call	 _lua_settop
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  000b4	83 c0 20	 add	 eax, 32			; 00000020H
  000b7	50		 push	 eax
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  000bd	ff d6		 call	 esi
  000bf	83 c4 18	 add	 esp, 24			; 00000018H
  000c2	5e		 pop	 esi
$LN14@luaB_getDe:
; Line 854
  000c3	33 c0		 xor	 eax, eax
; Line 855
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
_luaB_getDescription ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_exit
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_exit PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 744
  00000	6a 00		 push	 0
  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
$LN4@luaB_exit:
$LN3@luaB_exit:
  00008	cc		 int	 3
_luaB_exit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_clear
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_clear PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 704
  00000	e8 00 00 00 00	 call	 _clrscr
; Line 708
  00005	33 c0		 xor	 eax, eax
; Line 709
  00007	c3		 ret	 0
_luaB_clear ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaB_authors
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaB_authors PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbaselib.c
; Line 740
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 741
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00009	83 c0 20	 add	 eax, 32			; 00000020H
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@IIMDNMFJ@R?4?5Ierusalimschy?0?5L?4?5H?4?5de?5Figue@
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  00018	6a fe		 push	 -2			; fffffffeH
  0001a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0001d	e8 00 00 00 00	 call	 _lua_settop
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00028	83 c0 20	 add	 eax, 32			; 00000020H
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  00037	83 c4 18	 add	 esp, 24			; 00000018H
  0003a	33 c0		 xor	 eax, eax
; Line 742
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_luaB_authors ENDP
_TEXT	ENDS
END
