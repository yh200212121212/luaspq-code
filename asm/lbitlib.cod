; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07JILILBLL@arshift?$AA@			; `string'
PUBLIC	??_C@_04BKGNPECA@band?$AA@			; `string'
PUBLIC	??_C@_04JAOJMBA@bnot?$AA@			; `string'
PUBLIC	??_C@_03BBBGIIAC@bor?$AA@			; `string'
PUBLIC	??_C@_04CKCGDDNF@bxor?$AA@			; `string'
PUBLIC	??_C@_05BGEPNLMI@btest?$AA@			; `string'
PUBLIC	??_C@_07EMKILFJA@extract?$AA@			; `string'
PUBLIC	??_C@_07FLHGGAOI@lrotate?$AA@			; `string'
PUBLIC	??_C@_06ELFGPGBK@lshift?$AA@			; `string'
PUBLIC	??_C@_07CLEHDIEJ@replace?$AA@			; `string'
PUBLIC	??_C@_07DCEHEDPB@rrotate?$AA@			; `string'
PUBLIC	??_C@_06HMLHBBIJ@rshift?$AA@			; `string'
;	COMDAT ??_C@_06HMLHBBIJ@rshift?$AA@
CONST	SEGMENT
??_C@_06HMLHBBIJ@rshift?$AA@ DB 'rshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCEHEDPB@rrotate?$AA@
CONST	SEGMENT
??_C@_07DCEHEDPB@rrotate?$AA@ DB 'rrotate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLEHDIEJ@replace?$AA@
CONST	SEGMENT
??_C@_07CLEHDIEJ@replace?$AA@ DB 'replace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELFGPGBK@lshift?$AA@
CONST	SEGMENT
??_C@_06ELFGPGBK@lshift?$AA@ DB 'lshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FLHGGAOI@lrotate?$AA@
CONST	SEGMENT
??_C@_07FLHGGAOI@lrotate?$AA@ DB 'lrotate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EMKILFJA@extract?$AA@
CONST	SEGMENT
??_C@_07EMKILFJA@extract?$AA@ DB 'extract', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BGEPNLMI@btest?$AA@
CONST	SEGMENT
??_C@_05BGEPNLMI@btest?$AA@ DB 'btest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CKCGDDNF@bxor?$AA@
CONST	SEGMENT
??_C@_04CKCGDDNF@bxor?$AA@ DB 'bxor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBBGIIAC@bor?$AA@
CONST	SEGMENT
??_C@_03BBBGIIAC@bor?$AA@ DB 'bor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JAOJMBA@bnot?$AA@
CONST	SEGMENT
??_C@_04JAOJMBA@bnot?$AA@ DB 'bnot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKGNPECA@band?$AA@
CONST	SEGMENT
??_C@_04BKGNPECA@band?$AA@ DB 'band', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JILILBLL@arshift?$AA@
CONST	SEGMENT
??_C@_07JILILBLL@arshift?$AA@ DB 'arshift', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_bitlib	DD	FLAT:??_C@_07JILILBLL@arshift?$AA@
	DD	FLAT:_b_arshift
	DD	FLAT:??_C@_04BKGNPECA@band?$AA@
	DD	FLAT:_b_and
	DD	FLAT:??_C@_04JAOJMBA@bnot?$AA@
	DD	FLAT:_b_not
	DD	FLAT:??_C@_03BBBGIIAC@bor?$AA@
	DD	FLAT:_b_or
	DD	FLAT:??_C@_04CKCGDDNF@bxor?$AA@
	DD	FLAT:_b_xor
	DD	FLAT:??_C@_05BGEPNLMI@btest?$AA@
	DD	FLAT:_b_test
	DD	FLAT:??_C@_07EMKILFJA@extract?$AA@
	DD	FLAT:_b_extract
	DD	FLAT:??_C@_07FLHGGAOI@lrotate?$AA@
	DD	FLAT:_b_lrot
	DD	FLAT:??_C@_06ELFGPGBK@lshift?$AA@
	DD	FLAT:_b_lshift
	DD	FLAT:??_C@_07CLEHDIEJ@replace?$AA@
	DD	FLAT:_b_replace
	DD	FLAT:??_C@_07DCEHEDPB@rrotate?$AA@
	DD	FLAT:_b_rrot
	DD	FLAT:??_C@_06HMLHBBIJ@rshift?$AA@
	DD	FLAT:_b_rshift
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_luaopen_bit32
PUBLIC	??_C@_0BJ@DJLBNAFE@field?5cannot?5be?5negative?$AA@ ; `string'
PUBLIC	??_C@_0BH@OOEDMGHP@width?5must?5be?5positive?$AA@ ; `string'
PUBLIC	??_C@_0CD@GMCNEKB@trying?5to?5access?5non?9existent?5bi@ ; `string'
PUBLIC	__real@405bc00000000000
EXTRN	_lua_gettop:PROC
EXTRN	_lua_pushinteger:PROC
EXTRN	_lua_pushboolean:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_luaL_checkversion_:PROC
EXTRN	_luaL_argerror:PROC
EXTRN	_luaL_checkinteger:PROC
EXTRN	_luaL_optinteger:PROC
EXTRN	_luaL_error:PROC
EXTRN	_luaL_setfuncs:PROC
EXTRN	__allshl:PROC
EXTRN	__aullshr:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_0CD@GMCNEKB@trying?5to?5access?5non?9existent?5bi@
CONST	SEGMENT
??_C@_0CD@GMCNEKB@trying?5to?5access?5non?9existent?5bi@ DB 'trying to ac'
	DB	'cess non-existent bits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OOEDMGHP@width?5must?5be?5positive?$AA@
CONST	SEGMENT
??_C@_0BH@OOEDMGHP@width?5must?5be?5positive?$AA@ DB 'width must be posit'
	DB	'ive', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DJLBNAFE@field?5cannot?5be?5negative?$AA@
CONST	SEGMENT
??_C@_0BJ@DJLBNAFE@field?5cannot?5be?5negative?$AA@ DB 'field cannot be n'
	DB	'egative', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_replace
_TEXT	SEGMENT
_f$1$ = -24						; size = 4
_v$2$ = -20						; size = 4
_v$1$ = -16						; size = 4
_r$2$ = -12						; size = 4
_r$1$ = -8						; size = 4
_m$2$ = -4						; size = 4
_w$ = -4						; size = 4
_L$ = 8							; size = 4
_b_replace PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 190
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
; Line 192
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	6a 01		 push	 1
  0000e	53		 push	 ebx
  0000f	e8 00 00 00 00	 call	 _luaL_checkinteger
  00014	33 c9		 xor	 ecx, ecx
  00016	89 45 f8	 mov	 DWORD PTR _r$1$[ebp], eax
; Line 193
  00019	6a 02		 push	 2
  0001b	53		 push	 ebx
  0001c	89 4d f4	 mov	 DWORD PTR _r$2$[ebp], ecx
  0001f	e8 00 00 00 00	 call	 _luaL_checkinteger
  00024	89 45 f0	 mov	 DWORD PTR _v$1$[ebp], eax
  00027	33 c9		 xor	 ecx, ecx
; Line 194
  00029	8d 45 fc	 lea	 eax, DWORD PTR _w$[ebp]
  0002c	89 4d ec	 mov	 DWORD PTR _v$2$[ebp], ecx
  0002f	50		 push	 eax
  00030	6a 03		 push	 3
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 _fieldargs
; Line 195
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _w$[ebp]
  0003b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003e	8b f0		 mov	 esi, eax
  00040	49		 dec	 ecx
  00041	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00046	89 75 e8	 mov	 DWORD PTR _f$1$[ebp], esi
  00049	ba 01 00 00 00	 mov	 edx, 1
  0004e	e8 00 00 00 00	 call	 __allshl
  00053	8b d8		 mov	 ebx, eax
  00055	f7 d2		 not	 edx
  00057	f7 d3		 not	 ebx
  00059	89 55 fc	 mov	 DWORD PTR _m$2$[ebp], edx
; Line 196
  0005c	8b c3		 mov	 eax, ebx
  0005e	8b ce		 mov	 ecx, esi
  00060	e8 00 00 00 00	 call	 __allshl
  00065	23 5d f0	 and	 ebx, DWORD PTR _v$1$[ebp]
  00068	8b f2		 mov	 esi, edx
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _m$2$[ebp]
  0006d	8b f8		 mov	 edi, eax
  0006f	23 55 ec	 and	 edx, DWORD PTR _v$2$[ebp]
  00072	f7 d7		 not	 edi
  00074	8b 4d e8	 mov	 ecx, DWORD PTR _f$1$[ebp]
  00077	f7 d6		 not	 esi
  00079	23 7d f8	 and	 edi, DWORD PTR _r$1$[ebp]
  0007c	8b c3		 mov	 eax, ebx
  0007e	23 75 f4	 and	 esi, DWORD PTR _r$2$[ebp]
  00081	e8 00 00 00 00	 call	 __allshl
  00086	0b f2		 or	 esi, edx
  00088	0b f8		 or	 edi, eax
; Line 197
  0008a	56		 push	 esi
  0008b	57		 push	 edi
  0008c	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0008f	e8 00 00 00 00	 call	 _lua_pushinteger
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 198
  00097	b8 01 00 00 00	 mov	 eax, 1
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
; Line 199
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_b_replace ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_extract
_TEXT	SEGMENT
_r$2$ = -12						; size = 4
_r$1$ = -8						; size = 4
_w$ = -4						; size = 4
_L$ = 8							; size = 4
_b_extract PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 180
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
; Line 182
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	6a 01		 push	 1
  0000e	53		 push	 ebx
  0000f	e8 00 00 00 00	 call	 _luaL_checkinteger
  00014	89 45 f8	 mov	 DWORD PTR _r$1$[ebp], eax
  00017	33 c9		 xor	 ecx, ecx
; Line 183
  00019	8d 45 fc	 lea	 eax, DWORD PTR _w$[ebp]
  0001c	89 4d f4	 mov	 DWORD PTR _r$2$[ebp], ecx
  0001f	50		 push	 eax
  00020	6a 02		 push	 2
  00022	53		 push	 ebx
  00023	e8 00 00 00 00	 call	 _fieldargs
; Line 184
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _w$[ebp]
  0002b	83 c4 14	 add	 esp, 20			; 00000014H
  0002e	8b d8		 mov	 ebx, eax
  00030	ba 01 00 00 00	 mov	 edx, 1
  00035	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0003a	8d 49 ff	 lea	 ecx, DWORD PTR [ecx-1]
  0003d	e8 00 00 00 00	 call	 __allshl
  00042	8b f8		 mov	 edi, eax
  00044	8b f2		 mov	 esi, edx
  00046	8b 45 f8	 mov	 eax, DWORD PTR _r$1$[ebp]
  00049	8b cb		 mov	 ecx, ebx
  0004b	8b 55 f4	 mov	 edx, DWORD PTR _r$2$[ebp]
  0004e	f7 d7		 not	 edi
  00050	f7 d6		 not	 esi
  00052	e8 00 00 00 00	 call	 __aullshr
  00057	23 f2		 and	 esi, edx
  00059	23 f8		 and	 edi, eax
; Line 185
  0005b	56		 push	 esi
  0005c	57		 push	 edi
  0005d	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00060	e8 00 00 00 00	 call	 _lua_pushinteger
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 186
  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
; Line 187
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_b_extract ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _fieldargs
_TEXT	SEGMENT
tv92 = -16						; size = 8
tv168 = -12						; size = 4
_f$2$ = -8						; size = 4
_w$2$ = -4						; size = 4
_L$ = 8							; size = 4
_farg$ = 12						; size = 4
_width$ = 16						; size = 4
_fieldargs PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 168
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
; Line 169
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _farg$[ebp]
  0000e	57		 push	 edi
  0000f	56		 push	 esi
  00010	53		 push	 ebx
  00011	e8 00 00 00 00	 call	 _luaL_checkinteger
; Line 170
  00016	6a 00		 push	 0
  00018	8b f8		 mov	 edi, eax
  0001a	89 55 f8	 mov	 DWORD PTR _f$2$[ebp], edx
  0001d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00020	6a 01		 push	 1
  00022	50		 push	 eax
  00023	53		 push	 ebx
  00024	89 45 f4	 mov	 DWORD PTR tv168[ebp], eax
  00027	e8 00 00 00 00	 call	 _luaL_optinteger
  0002c	83 c4 18	 add	 esp, 24			; 00000018H
  0002f	8b ca		 mov	 ecx, edx
; Line 171
  00031	83 7d f8 00	 cmp	 DWORD PTR _f$2$[ebp], 0
  00035	8b f0		 mov	 esi, eax
  00037	89 4d fc	 mov	 DWORD PTR _w$2$[ebp], ecx
  0003a	7f 1a		 jg	 SHORT $LN4@fieldargs
  0003c	7c 04		 jl	 SHORT $LN6@fieldargs
  0003e	85 ff		 test	 edi, edi
  00040	73 14		 jae	 SHORT $LN4@fieldargs
$LN6@fieldargs:
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DJLBNAFE@field?5cannot?5be?5negative?$AA@
  00047	ff 75 0c	 push	 DWORD PTR _farg$[ebp]
  0004a	53		 push	 ebx
  0004b	e8 00 00 00 00	 call	 _luaL_argerror
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _w$2$[ebp]
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@fieldargs:
; Line 172
  00056	85 c9		 test	 ecx, ecx
  00058	7f 1a		 jg	 SHORT $LN5@fieldargs
  0005a	7c 04		 jl	 SHORT $LN7@fieldargs
  0005c	85 f6		 test	 esi, esi
  0005e	75 14		 jne	 SHORT $LN5@fieldargs
$LN7@fieldargs:
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OOEDMGHP@width?5must?5be?5positive?$AA@
  00065	ff 75 f4	 push	 DWORD PTR tv168[ebp]
  00068	53		 push	 ebx
  00069	e8 00 00 00 00	 call	 _luaL_argerror
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _w$2$[ebp]
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@fieldargs:
; Line 173
  00074	8b c6		 mov	 eax, esi
  00076	03 c7		 add	 eax, edi
  00078	13 4d f8	 adc	 ecx, DWORD PTR _f$2$[ebp]
  0007b	89 4d f4	 mov	 DWORD PTR tv92[ebp+4], ecx
  0007e	78 15		 js	 SHORT $LN10@fieldargs
  00080	7f 05		 jg	 SHORT $LN8@fieldargs
  00082	83 f8 20	 cmp	 eax, 32			; 00000020H
  00085	76 0e		 jbe	 SHORT $LN10@fieldargs
$LN8@fieldargs:
; Line 174
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@GMCNEKB@trying?5to?5access?5non?9existent?5bi@
  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 _luaL_error
  00092	83 c4 08	 add	 esp, 8
$LN10@fieldargs:
; Line 175
  00095	8b 45 10	 mov	 eax, DWORD PTR _width$[ebp]
  00098	89 30		 mov	 DWORD PTR [eax], esi
; Line 176
  0009a	8b c7		 mov	 eax, edi
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
; Line 177
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_fieldargs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_rrot
_TEXT	SEGMENT
_L$ = 8							; size = 4
_b_rrot	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 157
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 158
  00003	6a 02		 push	 2
  00005	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00008	e8 00 00 00 00	 call	 _luaL_checkinteger
  0000d	f7 d8		 neg	 eax
  0000f	83 d2 00	 adc	 edx, 0
  00012	f7 da		 neg	 edx
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00019	e8 00 00 00 00	 call	 _b_rot
  0001e	83 c4 14	 add	 esp, 20			; 00000014H
; Line 159
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_b_rrot	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_lrot
_TEXT	SEGMENT
_L$ = 8							; size = 4
_b_lrot	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 152
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 153
  00003	6a 02		 push	 2
  00005	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00008	e8 00 00 00 00	 call	 _luaL_checkinteger
  0000d	52		 push	 edx
  0000e	50		 push	 eax
  0000f	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00012	e8 00 00 00 00	 call	 _b_rot
  00017	83 c4 14	 add	 esp, 20			; 00000014H
; Line 154
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_b_lrot	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_rot
_TEXT	SEGMENT
_L$ = 8							; size = 4
_r$ = 12						; size = 8
_d$ = 12						; size = 8
_b_rot	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 141
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 143
  00004	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00007	6a 01		 push	 1
  00009	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000c	e8 00 00 00 00	 call	 _luaL_checkinteger
; Line 144
  00011	33 d2		 xor	 edx, edx
  00013	89 45 0c	 mov	 DWORD PTR _r$[ebp], eax
  00016	83 c4 08	 add	 esp, 8
  00019	89 55 10	 mov	 DWORD PTR _r$[ebp+4], edx
  0001c	83 e6 1f	 and	 esi, 31			; 0000001fH
; Line 145
  0001f	74 2d		 je	 SHORT $LN1@b_rot
; Line 146
  00021	f3 0f 7e 55 0c	 movq	 xmm2, QWORD PTR _r$[ebp]
  00026	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0002b	f3 0f 7e 4d 0c	 movq	 xmm1, QWORD PTR _r$[ebp]
  00030	2b c6		 sub	 eax, esi
  00032	66 0f 6e c0	 movd	 xmm0, eax
  00036	66 0f d3 d0	 psrlq	 xmm2, xmm0
  0003a	66 0f 6e c6	 movd	 xmm0, esi
  0003e	66 0f f3 c8	 psllq	 xmm1, xmm0
  00042	66 0f eb d1	 por	 xmm2, xmm1
  00046	66 0f d6 55 0c	 movq	 QWORD PTR _r$[ebp], xmm2
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _r$[ebp]
$LN1@b_rot:
; Line 147
  0004e	6a 00		 push	 0
  00050	50		 push	 eax
  00051	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00054	e8 00 00 00 00	 call	 _lua_pushinteger
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 148
  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	5e		 pop	 esi
; Line 149
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_b_rot	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_arshift
_TEXT	SEGMENT
_r$4$ = -4						; size = 4
_L$ = 8							; size = 4
_b_arshift PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 126
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
; Line 127
  00007	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000a	6a 01		 push	 1
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _luaL_checkinteger
; Line 128
  00012	6a 02		 push	 2
  00014	57		 push	 edi
  00015	8b d8		 mov	 ebx, eax
  00017	89 55 fc	 mov	 DWORD PTR _r$4$[ebp], edx
  0001a	e8 00 00 00 00	 call	 _luaL_checkinteger
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
  00022	8b f0		 mov	 esi, eax
; Line 129
  00024	85 d2		 test	 edx, edx
  00026	7c 59		 jl	 SHORT $LN4@b_arshift
  00028	7f 04		 jg	 SHORT $LN8@b_arshift
  0002a	85 f6		 test	 esi, esi
  0002c	72 53		 jb	 SHORT $LN4@b_arshift
$LN8@b_arshift:
  0002e	8b c3		 mov	 eax, ebx
  00030	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00035	83 c8 00	 or	 eax, 0
  00038	74 47		 je	 SHORT $LN4@b_arshift
; Line 132
  0003a	85 d2		 test	 edx, edx
  0003c	7c 0c		 jl	 SHORT $LN2@b_arshift
  0003e	7f 05		 jg	 SHORT $LN9@b_arshift
  00040	83 fe 20	 cmp	 esi, 32			; 00000020H
  00043	72 05		 jb	 SHORT $LN2@b_arshift
$LN9@b_arshift:
  00045	83 cb ff	 or	 ebx, -1
; Line 133
  00048	eb 1e		 jmp	 SHORT $LN10@b_arshift
$LN2@b_arshift:
; Line 134
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _r$4$[ebp]
  0004d	8b c3		 mov	 eax, ebx
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 __aullshr
  00056	8b d8		 mov	 ebx, eax
  00058	33 d2		 xor	 edx, edx
  0005a	83 c8 ff	 or	 eax, -1
  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 __aullshr
  00064	f7 d0		 not	 eax
  00066	0b d8		 or	 ebx, eax
$LN10@b_arshift:
  00068	33 c0		 xor	 eax, eax
; Line 135
  0006a	50		 push	 eax
  0006b	53		 push	 ebx
  0006c	57		 push	 edi
  0006d	e8 00 00 00 00	 call	 _lua_pushinteger
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 136
  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
; Line 138
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN4@b_arshift:
; Line 130
  00081	f7 de		 neg	 esi
  00083	83 d2 00	 adc	 edx, 0
  00086	f7 da		 neg	 edx
  00088	52		 push	 edx
  00089	56		 push	 esi
  0008a	ff 75 fc	 push	 DWORD PTR _r$4$[ebp]
  0008d	53		 push	 ebx
  0008e	57		 push	 edi
  0008f	e8 00 00 00 00	 call	 _b_shift
  00094	83 c4 14	 add	 esp, 20			; 00000014H
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
; Line 138
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
_b_arshift ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_rshift
_TEXT	SEGMENT
_L$ = 8							; size = 4
_b_rshift PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 121
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 122
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 02		 push	 2
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _luaL_checkinteger
  0000f	83 c4 08	 add	 esp, 8
  00012	f7 d8		 neg	 eax
  00014	83 d2 00	 adc	 edx, 0
  00017	f7 da		 neg	 edx
  00019	52		 push	 edx
  0001a	50		 push	 eax
  0001b	6a 01		 push	 1
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 _luaL_checkinteger
  00023	83 c4 08	 add	 esp, 8
  00026	52		 push	 edx
  00027	50		 push	 eax
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 _b_shift
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	5e		 pop	 esi
; Line 123
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
_b_rshift ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_lshift
_TEXT	SEGMENT
_L$ = 8							; size = 4
_b_lshift PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 116
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 117
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 02		 push	 2
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _luaL_checkinteger
  0000f	83 c4 08	 add	 esp, 8
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	6a 01		 push	 1
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _luaL_checkinteger
  0001c	83 c4 08	 add	 esp, 8
  0001f	52		 push	 edx
  00020	50		 push	 eax
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 _b_shift
  00027	83 c4 14	 add	 esp, 20			; 00000014H
  0002a	5e		 pop	 esi
; Line 118
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_b_lshift ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_shift
_TEXT	SEGMENT
_L$ = 8							; size = 4
_r$ = 12						; size = 8
_i$ = 20						; size = 8
_b_shift PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 99
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 100
  00003	8b 45 18	 mov	 eax, DWORD PTR _i$[ebp+4]
  00006	8b 4d 14	 mov	 ecx, DWORD PTR _i$[ebp]
  00009	85 c0		 test	 eax, eax
  0000b	7f 55		 jg	 SHORT $LN11@b_shift
  0000d	7c 04		 jl	 SHORT $LN9@b_shift
  0000f	85 c9		 test	 ecx, ecx
  00011	73 44		 jae	 SHORT $LN6@b_shift
$LN9@b_shift:
; Line 101
  00013	f7 d9		 neg	 ecx
; Line 102
  00015	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _r$[ebp+4], 0
  0001c	83 d0 00	 adc	 eax, 0
  0001f	f7 d8		 neg	 eax
  00021	89 45 18	 mov	 DWORD PTR _i$[ebp+4], eax
  00024	8b 45 0c	 mov	 eax, DWORD PTR _r$[ebp]
  00027	89 45 0c	 mov	 DWORD PTR _r$[ebp], eax
; Line 103
  0002a	78 14		 js	 SHORT $LN5@b_shift
  0002c	7f 05		 jg	 SHORT $LN10@b_shift
  0002e	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00031	72 0d		 jb	 SHORT $LN5@b_shift
$LN10@b_shift:
  00033	0f 57 c0	 xorps	 xmm0, xmm0
  00036	66 0f 13 45 0c	 movlpd	 QWORD PTR _r$[ebp], xmm0
  0003b	8b 45 10	 mov	 eax, DWORD PTR _r$[ebp+4]
  0003e	eb 40		 jmp	 SHORT $LN14@b_shift
$LN5@b_shift:
; Line 104
  00040	f3 0f 7e 4d 0c	 movq	 xmm1, QWORD PTR _r$[ebp]
  00045	66 0f 6e c1	 movd	 xmm0, ecx
  00049	66 0f d3 c8	 psrlq	 xmm1, xmm0
  0004d	66 0f d6 4d 0c	 movq	 QWORD PTR _r$[ebp], xmm1
; Line 106
  00052	8b 45 10	 mov	 eax, DWORD PTR _r$[ebp+4]
  00055	eb 29		 jmp	 SHORT $LN14@b_shift
$LN6@b_shift:
; Line 107
  00057	85 c0		 test	 eax, eax
  00059	7c 11		 jl	 SHORT $LN2@b_shift
  0005b	7f 05		 jg	 SHORT $LN11@b_shift
  0005d	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00060	72 0a		 jb	 SHORT $LN2@b_shift
$LN11@b_shift:
  00062	0f 57 c0	 xorps	 xmm0, xmm0
  00065	66 0f 13 45 0c	 movlpd	 QWORD PTR _r$[ebp], xmm0
  0006a	eb 12		 jmp	 SHORT $LN1@b_shift
$LN2@b_shift:
; Line 108
  0006c	f3 0f 7e 4d 0c	 movq	 xmm1, QWORD PTR _r$[ebp]
  00071	66 0f 6e c1	 movd	 xmm0, ecx
  00075	66 0f f3 c8	 psllq	 xmm1, xmm0
  00079	66 0f d6 4d 0c	 movq	 QWORD PTR _r$[ebp], xmm1
$LN1@b_shift:
; Line 109
  0007e	33 c0		 xor	 eax, eax
$LN14@b_shift:
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
; Line 111
  00083	50		 push	 eax
  00084	51		 push	 ecx
  00085	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00088	e8 00 00 00 00	 call	 _lua_pushinteger
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 112
  00090	b8 01 00 00 00	 mov	 eax, 1
; Line 113
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_b_shift ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_not
_TEXT	SEGMENT
_r$ = -8						; size = 8
_L$ = 8							; size = 4
_b_not	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 92
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; Line 93
  00006	6a 01		 push	 1
  00008	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000b	e8 00 00 00 00	 call	 _luaL_checkinteger
  00010	f7 d0		 not	 eax
  00012	f7 d2		 not	 edx
; Line 94
  00014	6a 00		 push	 0
  00016	50		 push	 eax
  00017	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0001a	89 55 fc	 mov	 DWORD PTR _r$[ebp+4], edx
  0001d	e8 00 00 00 00	 call	 _lua_pushinteger
  00022	83 c4 14	 add	 esp, 20			; 00000014H
; Line 95
  00025	b8 01 00 00 00	 mov	 eax, 1
; Line 96
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_b_not	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_xor
_TEXT	SEGMENT
_r$ = -12						; size = 8
_n$1$ = -4						; size = 4
_L$ = 8							; size = 4
_b_xor	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 82
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
; Line 83
  00008	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000b	e8 00 00 00 00	 call	 _lua_gettop
  00010	0f 57 c0	 xorps	 xmm0, xmm0
  00013	89 45 fc	 mov	 DWORD PTR _n$1$[ebp], eax
; Line 85
  00016	be 01 00 00 00	 mov	 esi, 1
  0001b	66 0f 13 45 f4	 movlpd	 QWORD PTR _r$[ebp], xmm0
  00020	8b 7d f4	 mov	 edi, DWORD PTR _r$[ebp]
  00023	83 c4 04	 add	 esp, 4
  00026	3b c6		 cmp	 eax, esi
  00028	7c 1d		 jl	 SHORT $LN1@b_xor
  0002a	53		 push	 ebx
  0002b	8b 5d f8	 mov	 ebx, DWORD PTR _r$[ebp+4]
  0002e	8b ff		 npad	 2
$LL3@b_xor:
; Line 86
  00030	56		 push	 esi
  00031	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00034	e8 00 00 00 00	 call	 _luaL_checkinteger
  00039	46		 inc	 esi
  0003a	83 c4 08	 add	 esp, 8
  0003d	33 f8		 xor	 edi, eax
  0003f	33 da		 xor	 ebx, edx
  00041	3b 75 fc	 cmp	 esi, DWORD PTR _n$1$[ebp]
  00044	7e ea		 jle	 SHORT $LL3@b_xor
  00046	5b		 pop	 ebx
$LN1@b_xor:
; Line 87
  00047	6a 00		 push	 0
  00049	57		 push	 edi
  0004a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0004d	e8 00 00 00 00	 call	 _lua_pushinteger
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 88
  00055	b8 01 00 00 00	 mov	 eax, 1
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
; Line 89
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_b_xor	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_or
_TEXT	SEGMENT
_r$ = -12						; size = 8
_n$1$ = -4						; size = 4
_L$ = 8							; size = 4
_b_or	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 72
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
; Line 73
  00008	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000b	e8 00 00 00 00	 call	 _lua_gettop
  00010	0f 57 c0	 xorps	 xmm0, xmm0
  00013	89 45 fc	 mov	 DWORD PTR _n$1$[ebp], eax
; Line 75
  00016	be 01 00 00 00	 mov	 esi, 1
  0001b	66 0f 13 45 f4	 movlpd	 QWORD PTR _r$[ebp], xmm0
  00020	8b 7d f4	 mov	 edi, DWORD PTR _r$[ebp]
  00023	83 c4 04	 add	 esp, 4
  00026	3b c6		 cmp	 eax, esi
  00028	7c 1d		 jl	 SHORT $LN1@b_or
  0002a	53		 push	 ebx
  0002b	8b 5d f8	 mov	 ebx, DWORD PTR _r$[ebp+4]
  0002e	8b ff		 npad	 2
$LL3@b_or:
; Line 76
  00030	56		 push	 esi
  00031	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00034	e8 00 00 00 00	 call	 _luaL_checkinteger
  00039	46		 inc	 esi
  0003a	83 c4 08	 add	 esp, 8
  0003d	0b f8		 or	 edi, eax
  0003f	0b da		 or	 ebx, edx
  00041	3b 75 fc	 cmp	 esi, DWORD PTR _n$1$[ebp]
  00044	7e ea		 jle	 SHORT $LL3@b_or
  00046	5b		 pop	 ebx
$LN1@b_or:
; Line 77
  00047	6a 00		 push	 0
  00049	57		 push	 edi
  0004a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0004d	e8 00 00 00 00	 call	 _lua_pushinteger
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 78
  00055	b8 01 00 00 00	 mov	 eax, 1
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
; Line 79
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_b_or	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_test
_TEXT	SEGMENT
_n$1$ = -4						; size = 4
_L$ = 8							; size = 4
_b_test	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 65
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
; Line 66
  00007	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000a	e8 00 00 00 00	 call	 _lua_gettop
  0000f	be 01 00 00 00	 mov	 esi, 1
  00014	89 45 fc	 mov	 DWORD PTR _n$1$[ebp], eax
  00017	83 c4 04	 add	 esp, 4
  0001a	83 cf ff	 or	 edi, -1
  0001d	83 cb ff	 or	 ebx, -1
  00020	3b c6		 cmp	 eax, esi
  00022	7c 16		 jl	 SHORT $LN5@b_test
$LL7@b_test:
  00024	56		 push	 esi
  00025	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00028	e8 00 00 00 00	 call	 _luaL_checkinteger
  0002d	46		 inc	 esi
  0002e	83 c4 08	 add	 esp, 8
  00031	23 f8		 and	 edi, eax
  00033	23 da		 and	 ebx, edx
  00035	3b 75 fc	 cmp	 esi, DWORD PTR _n$1$[ebp]
  00038	7e ea		 jle	 SHORT $LL7@b_test
$LN5@b_test:
; Line 67
  0003a	83 cf 00	 or	 edi, 0
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	74 07		 je	 SHORT $LN3@b_test
  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	eb 02		 jmp	 SHORT $LN4@b_test
$LN3@b_test:
  00049	33 c0		 xor	 eax, eax
$LN4@b_test:
  0004b	50		 push	 eax
  0004c	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0004f	e8 00 00 00 00	 call	 _lua_pushboolean
  00054	83 c4 08	 add	 esp, 8
; Line 68
  00057	b8 01 00 00 00	 mov	 eax, 1
; Line 69
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_b_test	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _b_and
_TEXT	SEGMENT
_n$1$ = -4						; size = 4
_L$ = 8							; size = 4
_b_and	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 58
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
; Line 59
  00007	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000a	e8 00 00 00 00	 call	 _lua_gettop
  0000f	be 01 00 00 00	 mov	 esi, 1
  00014	89 45 fc	 mov	 DWORD PTR _n$1$[ebp], eax
  00017	83 c4 04	 add	 esp, 4
  0001a	83 cf ff	 or	 edi, -1
  0001d	83 cb ff	 or	 ebx, -1
  00020	3b c6		 cmp	 eax, esi
  00022	7c 16		 jl	 SHORT $LN3@b_and
$LL5@b_and:
  00024	56		 push	 esi
  00025	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00028	e8 00 00 00 00	 call	 _luaL_checkinteger
  0002d	46		 inc	 esi
  0002e	83 c4 08	 add	 esp, 8
  00031	23 f8		 and	 edi, eax
  00033	23 da		 and	 ebx, edx
  00035	3b 75 fc	 cmp	 esi, DWORD PTR _n$1$[ebp]
  00038	7e ea		 jle	 SHORT $LL5@b_and
$LN3@b_and:
; Line 60
  0003a	6a 00		 push	 0
  0003c	57		 push	 edi
  0003d	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00040	e8 00 00 00 00	 call	 _lua_pushinteger
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 61
  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
; Line 62
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_b_and	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _andaux
_TEXT	SEGMENT
_n$1$ = -4						; size = 4
_L$ = 8							; size = 4
_andaux	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 49
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
; Line 50
  00007	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000a	e8 00 00 00 00	 call	 _lua_gettop
; Line 52
  0000f	be 01 00 00 00	 mov	 esi, 1
  00014	89 45 fc	 mov	 DWORD PTR _n$1$[ebp], eax
  00017	83 c4 04	 add	 esp, 4
  0001a	83 cf ff	 or	 edi, -1
  0001d	83 cb ff	 or	 ebx, -1
  00020	3b c6		 cmp	 eax, esi
  00022	7c 16		 jl	 SHORT $LN10@andaux
$LL3@andaux:
; Line 53
  00024	56		 push	 esi
  00025	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00028	e8 00 00 00 00	 call	 _luaL_checkinteger
  0002d	46		 inc	 esi
  0002e	83 c4 08	 add	 esp, 8
  00031	23 f8		 and	 edi, eax
  00033	23 da		 and	 ebx, edx
  00035	3b 75 fc	 cmp	 esi, DWORD PTR _n$1$[ebp]
  00038	7e ea		 jle	 SHORT $LL3@andaux
$LN10@andaux:
; Line 54
  0003a	8b c7		 mov	 eax, edi
  0003c	33 d2		 xor	 edx, edx
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
; Line 55
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_andaux	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaopen_bit32
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaopen_bit32 PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 220
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 221
  00003	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405bc00000000000
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000f	68 88 00 00 00	 push	 136			; 00000088H
  00014	83 ec 08	 sub	 esp, 8
  00017	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _luaL_checkversion_
  00022	6a 0c		 push	 12			; 0000000cH
  00024	6a 00		 push	 0
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _lua_createtable
  0002c	6a 00		 push	 0
  0002e	68 00 00 00 00	 push	 OFFSET _bitlib
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _luaL_setfuncs
  00039	83 c4 28	 add	 esp, 40			; 00000028H
; Line 222
  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	5e		 pop	 esi
; Line 223
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_luaopen_bit32 ENDP
_TEXT	ENDS
END
