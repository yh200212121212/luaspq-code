; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_dummynode_ DD	00H
	ORG $+4
	DD	00H
	ORG $+4
	DD	00H
	ORG $+4
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_luaH_getint
PUBLIC	_luaH_setint
PUBLIC	_luaH_getshortstr
PUBLIC	_luaH_getstr
PUBLIC	_luaH_get
PUBLIC	_luaH_newkey
PUBLIC	_luaH_set
PUBLIC	_luaH_new
PUBLIC	_luaH_resize
PUBLIC	_luaH_resizearray
PUBLIC	_luaH_free
PUBLIC	_luaH_next
PUBLIC	_luaH_getn
PUBLIC	??_C@_0BG@FEBJBDLJ@invalid?5key?5to?5?8next?8?$AA@ ; `string'
PUBLIC	??_C@_0P@KKABOKCO@table?5overflow?$AA@		; `string'
PUBLIC	??_C@_0BD@BDIKLFBP@table?5index?5is?5nil?$AA@	; `string'
PUBLIC	??_C@_0BD@BKBJANLJ@table?5index?5is?5NaN?$AA@	; `string'
PUBLIC	__real@41e0000000000000
PUBLIC	__real@43e0000000000000
PUBLIC	__real@c3e0000000000000
EXTRN	__imp__frexp:PROC
EXTRN	_luaO_ceillog2:PROC
EXTRN	_luaM_toobig:PROC
EXTRN	_luaM_realloc_:PROC
EXTRN	_luaG_runerror:PROC
EXTRN	_luaC_newobj:PROC
EXTRN	_luaC_barrierback_:PROC
EXTRN	_luaS_hashlongstr:PROC
EXTRN	_luaV_equalobj:PROC
EXTRN	_luaV_tointeger:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__dtol3:PROC
EXTRN	_luaO_nilobject_:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@c3e0000000000000
CONST	SEGMENT
__real@c3e0000000000000 DQ 0c3e0000000000000r	; -9.22337e+018
CONST	ENDS
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+018
CONST	ENDS
;	COMDAT __real@41e0000000000000
CONST	SEGMENT
__real@41e0000000000000 DQ 041e0000000000000r	; 2.14748e+009
CONST	ENDS
;	COMDAT ??_C@_0BD@BKBJANLJ@table?5index?5is?5NaN?$AA@
CONST	SEGMENT
??_C@_0BD@BKBJANLJ@table?5index?5is?5NaN?$AA@ DB 'table index is NaN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BDIKLFBP@table?5index?5is?5nil?$AA@
CONST	SEGMENT
??_C@_0BD@BDIKLFBP@table?5index?5is?5nil?$AA@ DB 'table index is nil', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KKABOKCO@table?5overflow?$AA@
CONST	SEGMENT
??_C@_0P@KKABOKCO@table?5overflow?$AA@ DB 'table overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FEBJBDLJ@invalid?5key?5to?5?8next?8?$AA@
CONST	SEGMENT
??_C@_0BG@FEBJBDLJ@invalid?5key?5to?5?8next?8?$AA@ DB 'invalid key to ''n'
	DB	'ext''', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _unbound_search
_TEXT	SEGMENT
_t$ = 8							; size = 4
_j$ = 12						; size = 4
_unbound_search PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 613
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 617
  00003	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR _j$[ebp]
  0000b	8b de		 mov	 ebx, esi
  0000d	57		 push	 edi
  0000e	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00011	46		 inc	 esi
$LL9@unbound_se:
  00012	8b ce		 mov	 ecx, esi
  00014	b8 00 00 00 00	 mov	 eax, 0
  00019	83 c1 ff	 add	 ecx, -1
  0001c	83 d0 ff	 adc	 eax, -1
  0001f	85 c0		 test	 eax, eax
  00021	77 15		 ja	 SHORT $LN18@unbound_se
  00023	72 04		 jb	 SHORT $LN39@unbound_se
  00025	3b cf		 cmp	 ecx, edi
  00027	73 0f		 jae	 SHORT $LN18@unbound_se
$LN39@unbound_se:
  00029	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0002c	8b ce		 mov	 ecx, esi
  0002e	c1 e1 04	 shl	 ecx, 4
  00031	83 c0 f0	 add	 eax, -16		; fffffff0H
  00034	03 c1		 add	 eax, ecx
  00036	eb 3c		 jmp	 SHORT $LN17@unbound_se
$LN18@unbound_se:
  00038	8a 4a 07	 mov	 cl, BYTE PTR [edx+7]
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	d3 e0		 shl	 eax, cl
  00042	48		 dec	 eax
  00043	23 c6		 and	 eax, esi
  00045	c1 e0 05	 shl	 eax, 5
  00048	03 42 10	 add	 eax, DWORD PTR [edx+16]
  0004b	eb 03 8d 49 00	 npad	 5
$LL16@unbound_se:
  00050	83 78 18 13	 cmp	 DWORD PTR [eax+24], 19	; 00000013H
  00054	75 0b		 jne	 SHORT $LN40@unbound_se
  00056	39 70 10	 cmp	 DWORD PTR [eax+16], esi
  00059	75 06		 jne	 SHORT $LN40@unbound_se
  0005b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0005f	74 13		 je	 SHORT $LN17@unbound_se
$LN40@unbound_se:
  00061	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00064	85 c9		 test	 ecx, ecx
  00066	74 07		 je	 SHORT $LN28@unbound_se
  00068	c1 e1 05	 shl	 ecx, 5
  0006b	03 c1		 add	 eax, ecx
  0006d	eb e1		 jmp	 SHORT $LL16@unbound_se
$LN28@unbound_se:
  0006f	b8 00 00 00 00	 mov	 eax, OFFSET _luaO_nilobject_
$LN17@unbound_se:
  00074	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00078	74 43		 je	 SHORT $LN25@unbound_se
; Line 618
  0007a	8b de		 mov	 ebx, esi
; Line 619
  0007c	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00082	77 04		 ja	 SHORT $LN29@unbound_se
; Line 625
  00084	03 f6		 add	 esi, esi
  00086	eb 8a		 jmp	 SHORT $LL9@unbound_se
$LN29@unbound_se:
; Line 622
  00088	6a 00		 push	 0
  0008a	be 01 00 00 00	 mov	 esi, 1
  0008f	56		 push	 esi
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 _luaH_getint
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH
  00099	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0009d	74 16		 je	 SHORT $LN5@unbound_se
  0009f	8b 7d 08	 mov	 edi, DWORD PTR _t$[ebp]
$LL6@unbound_se:
  000a2	6a 00		 push	 0
  000a4	46		 inc	 esi
  000a5	56		 push	 esi
  000a6	57		 push	 edi
  000a7	e8 00 00 00 00	 call	 _luaH_getint
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  000af	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000b3	75 ed		 jne	 SHORT $LL6@unbound_se
$LN5@unbound_se:
  000b5	5f		 pop	 edi
; Line 623
  000b6	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
; Line 634
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN25@unbound_se:
; Line 628
  000bd	8b c6		 mov	 eax, esi
  000bf	2b c3		 sub	 eax, ebx
  000c1	83 f8 01	 cmp	 eax, 1
  000c4	76 29		 jbe	 SHORT $LN3@unbound_se
$LL4@unbound_se:
; Line 629
  000c6	8d 3c 33	 lea	 edi, DWORD PTR [ebx+esi]
; Line 630
  000c9	6a 00		 push	 0
  000cb	d1 ef		 shr	 edi, 1
  000cd	57		 push	 edi
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 _luaH_getint
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000db	75 04		 jne	 SHORT $LN2@unbound_se
  000dd	8b f7		 mov	 esi, edi
  000df	eb 02		 jmp	 SHORT $LN1@unbound_se
$LN2@unbound_se:
; Line 631
  000e1	8b df		 mov	 ebx, edi
$LN1@unbound_se:
; Line 628
  000e3	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  000e6	8b ce		 mov	 ecx, esi
  000e8	2b cb		 sub	 ecx, ebx
  000ea	83 f9 01	 cmp	 ecx, 1
  000ed	77 d7		 ja	 SHORT $LL4@unbound_se
$LN3@unbound_se:
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
; Line 633
  000f1	8b c3		 mov	 eax, ebx
  000f3	5b		 pop	 ebx
; Line 634
  000f4	5d		 pop	 ebp
  000f5	c3		 ret	 0
_unbound_search ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getgeneric
_TEXT	SEGMENT
_t$ = 8							; size = 4
_key$ = 12						; size = 4
_getgeneric PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 541
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 542
  00005	8b 7d 0c	 mov	 edi, DWORD PTR _key$[ebp]
  00008	57		 push	 edi
  00009	ff 75 08	 push	 DWORD PTR _t$[ebp]
  0000c	e8 00 00 00 00	 call	 _mainposition
  00011	8b f0		 mov	 esi, eax
; Line 544
  00013	57		 push	 edi
  00014	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00017	51		 push	 ecx
  00018	6a 00		 push	 0
  0001a	e8 00 00 00 00	 call	 _luaV_equalobj
  0001f	83 c4 14	 add	 esp, 20			; 00000014H
  00022	85 c0		 test	 eax, eax
  00024	75 1f		 jne	 SHORT $LN10@getgeneric
$LL5@getgeneric:
; Line 547
  00026	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; Line 548
  00029	85 c0		 test	 eax, eax
  0002b	74 1e		 je	 SHORT $LN11@getgeneric
; Line 550
  0002d	c1 e0 05	 shl	 eax, 5
  00030	03 f0		 add	 esi, eax
  00032	57		 push	 edi
  00033	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00036	50		 push	 eax
  00037	6a 00		 push	 0
  00039	e8 00 00 00 00	 call	 _luaV_equalobj
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	85 c0		 test	 eax, eax
  00043	74 e1		 je	 SHORT $LL5@getgeneric
$LN10@getgeneric:
  00045	5f		 pop	 edi
; Line 545
  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
; Line 553
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN11@getgeneric:
  0004b	5f		 pop	 edi
; Line 549
  0004c	b8 00 00 00 00	 mov	 eax, OFFSET _luaO_nilobject_
  00051	5e		 pop	 esi
; Line 553
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_getgeneric ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getfreepos
_TEXT	SEGMENT
_t$ = 8							; size = 4
_getfreepos PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 424
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 425
  00003	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00006	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00009	39 50 14	 cmp	 DWORD PTR [eax+20], edx
  0000c	76 13		 jbe	 SHORT $LN2@getfreepos
  0000e	8b ff		 npad	 2
$LL3@getfreepos:
; Line 426
  00010	83 40 14 e0	 add	 DWORD PTR [eax+20], -32	; ffffffe0H
  00014	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
; Line 427
  00017	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  0001b	74 08		 je	 SHORT $LN7@getfreepos
; Line 425
  0001d	3b ca		 cmp	 ecx, edx
  0001f	77 ef		 ja	 SHORT $LL3@getfreepos
$LN2@getfreepos:
; Line 430
  00021	33 c0		 xor	 eax, eax
; Line 431
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN7@getfreepos:
; Line 428
  00025	8b c1		 mov	 eax, ecx
; Line 431
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_getfreepos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _rehash
_TEXT	SEGMENT
_L$GSCopy$1$ = -140					; size = 4
_na$ = -136						; size = 4
_nums$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_ek$ = 16						; size = 4
_rehash	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 378
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	53		 push	 ebx
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR _t$[ebp]
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8b 7d 10	 mov	 edi, DWORD PTR _ek$[ebp]
  00022	89 85 74 ff ff
	ff		 mov	 DWORD PTR _L$GSCopy$1$[ebp], eax
; Line 385
  00028	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _nums$[ebp]
  0002e	50		 push	 eax
  0002f	53		 push	 ebx
  00030	f3 0f 7f 85 7c
	ff ff ff	 movdqu	 XMMWORD PTR _nums$[ebp], xmm0
  00038	f3 0f 7f 45 8c	 movdqu	 XMMWORD PTR _nums$[ebp+16], xmm0
  0003d	f3 0f 7f 45 9c	 movdqu	 XMMWORD PTR _nums$[ebp+32], xmm0
  00042	f3 0f 7f 45 ac	 movdqu	 XMMWORD PTR _nums$[ebp+48], xmm0
  00047	f3 0f 7f 45 bc	 movdqu	 XMMWORD PTR _nums$[ebp+64], xmm0
  0004c	f3 0f 7f 45 cc	 movdqu	 XMMWORD PTR _nums$[ebp+80], xmm0
  00051	f3 0f 7f 45 dc	 movdqu	 XMMWORD PTR _nums$[ebp+96], xmm0
  00056	f3 0f 7f 45 ec	 movdqu	 XMMWORD PTR _nums$[ebp+112], xmm0
  0005b	e8 00 00 00 00	 call	 _numusearray
  00060	8b f0		 mov	 esi, eax
; Line 387
  00062	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _na$[ebp]
  00068	50		 push	 eax
  00069	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _nums$[ebp]
  0006f	89 b5 78 ff ff
	ff		 mov	 DWORD PTR _na$[ebp], esi
  00075	50		 push	 eax
  00076	53		 push	 ebx
  00077	e8 00 00 00 00	 call	 _numusehash
  0007c	83 c4 14	 add	 esp, 20			; 00000014H
  0007f	03 f0		 add	 esi, eax
; Line 389
  00081	83 7f 08 13	 cmp	 DWORD PTR [edi+8], 19	; 00000013H
  00085	75 3e		 jne	 SHORT $LN7@rehash
  00087	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0008a	8b 07		 mov	 eax, DWORD PTR [edi]
  0008c	85 c9		 test	 ecx, ecx
  0008e	7c 35		 jl	 SHORT $LN7@rehash
  00090	7f 06		 jg	 SHORT $LN79@rehash
  00092	85 c0		 test	 eax, eax
  00094	74 2f		 je	 SHORT $LN7@rehash
  00096	85 c9		 test	 ecx, ecx
$LN79@rehash:
  00098	77 2b		 ja	 SHORT $LN7@rehash
  0009a	72 07		 jb	 SHORT $LN78@rehash
  0009c	3d 00 00 00 80	 cmp	 eax, -2147483648	; 80000000H
  000a1	77 22		 ja	 SHORT $LN7@rehash
$LN78@rehash:
  000a3	85 c0		 test	 eax, eax
  000a5	74 1e		 je	 SHORT $LN7@rehash
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _luaO_ceillog2
  000ad	83 c4 04	 add	 esp, 4
  000b0	ff 84 85 7c ff
	ff ff		 inc	 DWORD PTR _nums$[ebp+eax*4]
  000b7	8d 84 85 7c ff
	ff ff		 lea	 eax, DWORD PTR _nums$[ebp+eax*4]
  000be	b8 01 00 00 00	 mov	 eax, 1
  000c3	eb 02		 jmp	 SHORT $LN6@rehash
$LN7@rehash:
  000c5	33 c0		 xor	 eax, eax
$LN6@rehash:
  000c7	01 85 78 ff ff
	ff		 add	 DWORD PTR _na$[ebp], eax
; Line 392
  000cd	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _na$[ebp]
  000d3	50		 push	 eax
  000d4	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _nums$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _computesizes
; Line 394
  000e0	2b b5 78 ff ff
	ff		 sub	 esi, DWORD PTR _na$[ebp]
  000e6	46		 inc	 esi
  000e7	56		 push	 esi
  000e8	50		 push	 eax
  000e9	53		 push	 ebx
  000ea	ff b5 74 ff ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  000f0	e8 00 00 00 00	 call	 _luaH_resize
; Line 395
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	83 c4 18	 add	 esp, 24			; 00000018H
  000fb	33 cd		 xor	 ecx, ebp
  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
_rehash	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _setnodevector
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_size$ = 16						; size = 4
_setnodevector PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 310
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 312
  00005	8b 75 10	 mov	 esi, DWORD PTR _size$[ebp]
  00008	57		 push	 edi
  00009	85 f6		 test	 esi, esi
  0000b	75 1d		 jne	 SHORT $LN6@setnodevec
; Line 313
  0000d	8b 7d 0c	 mov	 edi, DWORD PTR _t$[ebp]
; Line 314
  00010	33 db		 xor	 ebx, ebx
; Line 331
  00012	c1 e6 05	 shl	 esi, 5
  00015	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], OFFSET _dummynode_
  0001c	03 77 10	 add	 esi, DWORD PTR [edi+16]
  0001f	88 5f 07	 mov	 BYTE PTR [edi+7], bl
  00022	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
; Line 332
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN6@setnodevec:
; Line 318
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 _luaO_ceillog2
  00030	8b d8		 mov	 ebx, eax
  00032	83 c4 04	 add	 esp, 4
; Line 319
  00035	83 fb 1e	 cmp	 ebx, 30			; 0000001eH
  00038	7f 68		 jg	 SHORT $LN16@setnodevec
; Line 321
  0003a	be 01 00 00 00	 mov	 esi, 1
  0003f	8b cb		 mov	 ecx, ebx
  00041	d3 e6		 shl	 esi, cl
; Line 322
  00043	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00046	3d ff ff ff 07	 cmp	 eax, 134217727		; 07ffffffH
  0004b	77 62		 ja	 SHORT $LN18@setnodevec
  0004d	8b 7d 0c	 mov	 edi, DWORD PTR _t$[ebp]
  00050	8b c6		 mov	 eax, esi
  00052	c1 e0 05	 shl	 eax, 5
  00055	50		 push	 eax
  00056	6a 00		 push	 0
  00058	6a 00		 push	 0
  0005a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0005d	e8 00 00 00 00	 call	 _luaM_realloc_
  00062	83 c4 10	 add	 esp, 16			; 00000010H
  00065	89 47 10	 mov	 DWORD PTR [edi+16], eax
; Line 323
  00068	85 f6		 test	 esi, esi
  0006a	7e 25		 jle	 SHORT $LN1@setnodevec
; Line 322
  0006c	33 c9		 xor	 ecx, ecx
  0006e	8b d6		 mov	 edx, esi
$LL3@setnodevec:
; Line 323
  00070	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00073	8d 49 20	 lea	 ecx, DWORD PTR [ecx+32]
; Line 325
  00076	c7 44 08 fc 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-4], 0
; Line 326
  0007e	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], 0
; Line 327
  00086	c7 44 08 e8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-24], 0
  0008e	4a		 dec	 edx
  0008f	75 df		 jne	 SHORT $LL3@setnodevec
$LN1@setnodevec:
; Line 331
  00091	c1 e6 05	 shl	 esi, 5
  00094	03 77 10	 add	 esi, DWORD PTR [edi+16]
  00097	88 5f 07	 mov	 BYTE PTR [edi+7], bl
  0009a	89 77 14	 mov	 DWORD PTR [edi+20], esi
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
; Line 332
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
$LN16@setnodevec:
; Line 320
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KKABOKCO@table?5overflow?$AA@
  000a7	ff 75 08	 push	 DWORD PTR _L$[ebp]
  000aa	e8 00 00 00 00	 call	 _luaG_runerror
$LN19@setnodevec:
$LN18@setnodevec:
; Line 322
  000af	ff 75 08	 push	 DWORD PTR _L$[ebp]
  000b2	e8 00 00 00 00	 call	 _luaM_toobig
$LN20@setnodevec:
$LN15@setnodevec:
  000b7	cc		 int	 3
_setnodevector ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _setarrayvector
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_size$ = 16						; size = 4
_setarrayvector PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 301
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 303
  00005	8b 7d 10	 mov	 edi, DWORD PTR _size$[ebp]
  00008	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0000b	3d ff ff ff 0f	 cmp	 eax, 268435455		; 0fffffffH
  00010	77 56		 ja	 SHORT $LN13@setarrayve
  00012	8b 75 0c	 mov	 esi, DWORD PTR _t$[ebp]
  00015	8b c7		 mov	 eax, edi
  00017	c1 e0 04	 shl	 eax, 4
  0001a	50		 push	 eax
  0001b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001e	c1 e0 04	 shl	 eax, 4
  00021	50		 push	 eax
  00022	ff 76 0c	 push	 DWORD PTR [esi+12]
  00025	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00028	e8 00 00 00 00	 call	 _luaM_realloc_
  0002d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00030	83 c4 10	 add	 esp, 16			; 00000010H
; Line 304
  00033	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00036	3b c7		 cmp	 eax, edi
  00038	73 27		 jae	 SHORT $LN1@setarrayve
; Line 303
  0003a	8b c8		 mov	 ecx, eax
  0003c	8b d7		 mov	 edx, edi
  0003e	c1 e1 04	 shl	 ecx, 4
  00041	2b d0		 sub	 edx, eax
  00043	eb 0b 8d a4 24
	00 00 00 00 8d
	64 24 00	 npad	 13
$LL3@setarrayve:
; Line 305
  00050	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00053	8d 49 10	 lea	 ecx, DWORD PTR [ecx+16]
  00056	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], 0
  0005e	4a		 dec	 edx
  0005f	75 ef		 jne	 SHORT $LL3@setarrayve
$LN1@setarrayve:
; Line 306
  00061	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
; Line 307
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
$LN13@setarrayve:
; Line 303
  00068	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0006b	e8 00 00 00 00	 call	 _luaM_toobig
$LN15@setarrayve:
$LN12@setarrayve:
  00070	cc		 int	 3
_setarrayvector ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _numusehash
_TEXT	SEGMENT
_ause$1$ = -4						; size = 4
_t$ = 8							; size = 4
_nums$ = 12						; size = 4
_pna$ = 16						; size = 4
_numusehash PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 285
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 288
  00004	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	be 01 00 00 00	 mov	 esi, 1
  00010	89 55 fc	 mov	 DWORD PTR _ause$1$[ebp], edx
  00013	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00016	33 db		 xor	 ebx, ebx
  00018	d3 e6		 shl	 esi, cl
; Line 289
  0001a	85 f6		 test	 esi, esi
  0001c	74 76		 je	 SHORT $LN20@numusehash
; Line 286
  0001e	57		 push	 edi
  0001f	8b fe		 mov	 edi, esi
  00021	c1 e7 05	 shl	 edi, 5
$LL3@numusehash:
; Line 289
  00024	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00027	83 ef 20	 sub	 edi, 32			; 00000020H
  0002a	03 c7		 add	 eax, edi
  0002c	4e		 dec	 esi
; Line 291
  0002d	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00031	74 4c		 je	 SHORT $LN1@numusehash
; Line 292
  00033	83 78 18 13	 cmp	 DWORD PTR [eax+24], 19	; 00000013H
  00037	75 3e		 jne	 SHORT $LN7@numusehash
  00039	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003c	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0003f	85 c0		 test	 eax, eax
  00041	7c 34		 jl	 SHORT $LN7@numusehash
  00043	7f 06		 jg	 SHORT $LN21@numusehash
  00045	85 c9		 test	 ecx, ecx
  00047	74 2e		 je	 SHORT $LN7@numusehash
  00049	85 c0		 test	 eax, eax
$LN21@numusehash:
  0004b	77 2a		 ja	 SHORT $LN7@numusehash
  0004d	72 08		 jb	 SHORT $LN19@numusehash
  0004f	81 f9 00 00 00
	80		 cmp	 ecx, -2147483648	; 80000000H
  00055	77 20		 ja	 SHORT $LN7@numusehash
$LN19@numusehash:
  00057	85 c9		 test	 ecx, ecx
  00059	74 1c		 je	 SHORT $LN7@numusehash
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 _luaO_ceillog2
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _nums$[ebp]
  00064	83 c4 04	 add	 esp, 4
  00067	ff 04 81	 inc	 DWORD PTR [ecx+eax*4]
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _ause$1$[ebp]
  0006d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00070	b8 01 00 00 00	 mov	 eax, 1
  00075	eb 02		 jmp	 SHORT $LN6@numusehash
$LN7@numusehash:
  00077	33 c0		 xor	 eax, eax
$LN6@numusehash:
  00079	03 d0		 add	 edx, eax
; Line 293
  0007b	43		 inc	 ebx
  0007c	89 55 fc	 mov	 DWORD PTR _ause$1$[ebp], edx
$LN1@numusehash:
; Line 289
  0007f	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00082	85 f6		 test	 esi, esi
  00084	75 9e		 jne	 SHORT $LL3@numusehash
; Line 296
  00086	8b 4d 10	 mov	 ecx, DWORD PTR _pna$[ebp]
; Line 297
  00089	8b c3		 mov	 eax, ebx
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	01 11		 add	 DWORD PTR [ecx], edx
; Line 298
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
$LN20@numusehash:
; Line 296
  00094	8b 45 10	 mov	 eax, DWORD PTR _pna$[ebp]
  00097	5e		 pop	 esi
  00098	01 10		 add	 DWORD PTR [eax], edx
; Line 297
  0009a	8b c3		 mov	 eax, ebx
  0009c	5b		 pop	 ebx
; Line 298
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_numusehash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _numusearray
_TEXT	SEGMENT
_lg$1$ = -8						; size = 4
_ause$1$ = -4						; size = 4
_t$ = 8							; size = 4
_nums$ = 12						; size = 4
_numusearray PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 259
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
; Line 262
  00007	33 c0		 xor	 eax, eax
; Line 263
  00009	bb 01 00 00 00	 mov	 ebx, 1
  0000e	56		 push	 esi
; Line 265
  0000f	33 c9		 xor	 ecx, ecx
  00011	89 45 fc	 mov	 DWORD PTR _ause$1$[ebp], eax
  00014	57		 push	 edi
  00015	89 4d f8	 mov	 DWORD PTR _lg$1$[ebp], ecx
  00018	8b fb		 mov	 edi, ebx
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL9@numusearra:
; Line 268
  00020	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00023	33 f6		 xor	 esi, esi
  00025	8b d7		 mov	 edx, edi
  00027	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002a	3b f8		 cmp	 edi, eax
  0002c	76 10		 jbe	 SHORT $LN5@numusearra
; Line 269
  0002e	8b d0		 mov	 edx, eax
; Line 270
  00030	3b da		 cmp	 ebx, edx
  00032	76 0e		 jbe	 SHORT $LN24@numusearra
; Line 281
  00034	8b 45 fc	 mov	 eax, DWORD PTR _ause$1$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
; Line 282
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN5@numusearra:
; Line 274
  0003e	3b df		 cmp	 ebx, edi
  00040	77 24		 ja	 SHORT $LN2@numusearra
$LN24@numusearra:
; Line 275
  00042	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00045	8b cb		 mov	 ecx, ebx
  00047	2b d3		 sub	 edx, ebx
  00049	c1 e1 04	 shl	 ecx, 4
  0004c	42		 inc	 edx
  0004d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00050	83 c0 f8	 add	 eax, -8			; fffffff8H
  00053	03 c1		 add	 eax, ecx
  00055	03 da		 add	 ebx, edx
$LL17@numusearra:
  00057	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005a	74 01		 je	 SHORT $LN18@numusearra
; Line 276
  0005c	46		 inc	 esi
$LN18@numusearra:
; Line 274
  0005d	83 c0 10	 add	 eax, 16			; 00000010H
  00060	4a		 dec	 edx
  00061	75 f4		 jne	 SHORT $LL17@numusearra
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _lg$1$[ebp]
$LN2@numusearra:
; Line 278
  00066	8b 45 0c	 mov	 eax, DWORD PTR _nums$[ebp]
  00069	03 ff		 add	 edi, edi
  0006b	01 34 88	 add	 DWORD PTR [eax+ecx*4], esi
  0006e	41		 inc	 ecx
; Line 279
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _ause$1$[ebp]
  00072	03 c6		 add	 eax, esi
  00074	89 4d f8	 mov	 DWORD PTR _lg$1$[ebp], ecx
  00077	89 45 fc	 mov	 DWORD PTR _ause$1$[ebp], eax
  0007a	83 f9 1f	 cmp	 ecx, 31			; 0000001fH
  0007d	7e a1		 jle	 SHORT $LL9@numusearra
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
; Line 282
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_numusearray ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _countint
_TEXT	SEGMENT
_key$ = 8						; size = 4
_nums$ = 12						; size = 4
_countint PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 243
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 244
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _key$[ebp]
  00006	83 79 08 13	 cmp	 DWORD PTR [ecx+8], 19	; 00000013H
  0000a	75 39		 jne	 SHORT $LN2@countint
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00011	85 c9		 test	 ecx, ecx
  00013	7c 30		 jl	 SHORT $LN2@countint
  00015	7f 06		 jg	 SHORT $LN11@countint
  00017	85 c0		 test	 eax, eax
  00019	74 2a		 je	 SHORT $LN2@countint
  0001b	85 c9		 test	 ecx, ecx
$LN11@countint:
  0001d	77 26		 ja	 SHORT $LN2@countint
  0001f	72 07		 jb	 SHORT $LN10@countint
  00021	3d 00 00 00 80	 cmp	 eax, -2147483648	; 80000000H
  00026	77 1d		 ja	 SHORT $LN2@countint
$LN10@countint:
; Line 245
  00028	85 c0		 test	 eax, eax
  0002a	74 19		 je	 SHORT $LN2@countint
; Line 246
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _luaO_ceillog2
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _nums$[ebp]
  00035	83 c4 04	 add	 esp, 4
  00038	ff 04 81	 inc	 DWORD PTR [ecx+eax*4]
  0003b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
; Line 247
  0003e	b8 01 00 00 00	 mov	 eax, 1
; Line 251
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN2@countint:
; Line 250
  00045	33 c0		 xor	 eax, eax
; Line 251
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_countint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _computesizes
_TEXT	SEGMENT
_optimal$1$ = -4					; size = 4
_nums$ = 8						; size = 4
_pna$ = 12						; size = 4
_computesizes PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 221
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; Line 228
  00006	8b 75 0c	 mov	 esi, DWORD PTR _pna$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	33 c0		 xor	 eax, eax
  0000d	33 db		 xor	 ebx, ebx
  0000f	89 45 fc	 mov	 DWORD PTR _optimal$1$[ebp], eax
  00012	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00015	39 06		 cmp	 DWORD PTR [esi], eax
  00017	76 39		 jbe	 SHORT $LN12@computesiz
; Line 224
  00019	57		 push	 edi
  0001a	8b 7d 08	 mov	 edi, DWORD PTR _nums$[ebp]
  0001d	8d 49 00	 npad	 3
$LL5@computesiz:
; Line 229
  00020	8b 37		 mov	 esi, DWORD PTR [edi]
  00022	85 f6		 test	 esi, esi
  00024	74 0b		 je	 SHORT $LN4@computesiz
; Line 230
  00026	03 ce		 add	 ecx, esi
; Line 231
  00028	3b c8		 cmp	 ecx, eax
  0002a	76 05		 jbe	 SHORT $LN4@computesiz
; Line 232
  0002c	89 55 fc	 mov	 DWORD PTR _optimal$1$[ebp], edx
; Line 233
  0002f	8b d9		 mov	 ebx, ecx
$LN4@computesiz:
; Line 228
  00031	8b 75 0c	 mov	 esi, DWORD PTR _pna$[ebp]
  00034	03 d2		 add	 edx, edx
  00036	8b c2		 mov	 eax, edx
  00038	83 c7 04	 add	 edi, 4
  0003b	d1 e8		 shr	 eax, 1
  0003d	39 06		 cmp	 DWORD PTR [esi], eax
  0003f	8b 75 fc	 mov	 esi, DWORD PTR _optimal$1$[ebp]
  00042	77 dc		 ja	 SHORT $LL5@computesiz
; Line 238
  00044	8b 45 0c	 mov	 eax, DWORD PTR _pna$[ebp]
  00047	5f		 pop	 edi
  00048	89 18		 mov	 DWORD PTR [eax], ebx
; Line 239
  0004a	8b c6		 mov	 eax, esi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
; Line 240
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN12@computesiz:
; Line 238
  00052	89 1e		 mov	 DWORD PTR [esi], ebx
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
; Line 240
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_computesizes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _findindex
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_key$ = 16						; size = 4
_findindex PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 161
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; Line 163
  00004	8b 7d 10	 mov	 edi, DWORD PTR _key$[ebp]
  00007	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0000a	85 c0		 test	 eax, eax
  0000c	75 03		 jne	 SHORT $LN9@findindex
  0000e	5f		 pop	 edi
; Line 185
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN9@findindex:
; Line 164
  00011	83 f8 13	 cmp	 eax, 19			; 00000013H
  00014	75 2b		 jne	 SHORT $LN27@findindex
  00016	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00019	8b 07		 mov	 eax, DWORD PTR [edi]
  0001b	85 c9		 test	 ecx, ecx
  0001d	7c 22		 jl	 SHORT $LN27@findindex
  0001f	7f 06		 jg	 SHORT $LN30@findindex
  00021	85 c0		 test	 eax, eax
  00023	74 1c		 je	 SHORT $LN27@findindex
  00025	85 c9		 test	 ecx, ecx
$LN30@findindex:
  00027	77 18		 ja	 SHORT $LN27@findindex
  00029	72 07		 jb	 SHORT $LN22@findindex
  0002b	3d 00 00 00 80	 cmp	 eax, -2147483648	; 80000000H
  00030	77 0f		 ja	 SHORT $LN27@findindex
$LN22@findindex:
; Line 165
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _t$[ebp]
  00035	85 c0		 test	 eax, eax
  00037	74 0b		 je	 SHORT $LN8@findindex
  00039	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0003c	77 06		 ja	 SHORT $LN8@findindex
  0003e	5f		 pop	 edi
; Line 185
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN27@findindex:
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _t$[ebp]
$LN8@findindex:
  00044	53		 push	 ebx
  00045	56		 push	 esi
; Line 169
  00046	57		 push	 edi
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 _mainposition
  0004d	8b f0		 mov	 esi, eax
; Line 174
  0004f	57		 push	 edi
  00050	8d 5e 10	 lea	 ebx, DWORD PTR [esi+16]
  00053	53		 push	 ebx
  00054	6a 00		 push	 0
  00056	e8 00 00 00 00	 call	 _luaV_equalobj
  0005b	83 c4 14	 add	 esp, 20			; 00000014H
  0005e	85 c0		 test	 eax, eax
  00060	75 31		 jne	 SHORT $LN3@findindex
$LL6@findindex:
  00062	83 7e 18 0a	 cmp	 DWORD PTR [esi+24], 10	; 0000000aH
  00066	75 0c		 jne	 SHORT $LN4@findindex
  00068	f6 47 08 40	 test	 BYTE PTR [edi+8], 64	; 00000040H
  0006c	74 06		 je	 SHORT $LN4@findindex
  0006e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00070	3b 07		 cmp	 eax, DWORD PTR [edi]
  00072	74 1f		 je	 SHORT $LN3@findindex
$LN4@findindex:
; Line 179
  00074	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; Line 180
  00077	85 c0		 test	 eax, eax
  00079	74 2c		 je	 SHORT $LN31@findindex
; Line 182
  0007b	c1 e0 05	 shl	 eax, 5
  0007e	03 f0		 add	 esi, eax
  00080	57		 push	 edi
  00081	8d 5e 10	 lea	 ebx, DWORD PTR [esi+16]
  00084	53		 push	 ebx
  00085	6a 00		 push	 0
  00087	e8 00 00 00 00	 call	 _luaV_equalobj
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	85 c0		 test	 eax, eax
  00091	74 cf		 je	 SHORT $LL6@findindex
$LN3@findindex:
; Line 175
  00093	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]
  00096	2b 70 10	 sub	 esi, DWORD PTR [eax+16]
; Line 177
  00099	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0009c	c1 fe 05	 sar	 esi, 5
  0009f	40		 inc	 eax
  000a0	03 c6		 add	 eax, esi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	5f		 pop	 edi
; Line 185
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
$LN31@findindex:
; Line 181
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FEBJBDLJ@invalid?5key?5to?5?8next?8?$AA@
  000ac	ff 75 08	 push	 DWORD PTR _L$[ebp]
  000af	e8 00 00 00 00	 call	 _luaG_runerror
$LN32@findindex:
$LN29@findindex:
  000b4	cc		 int	 3
_findindex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _arrayindex
_TEXT	SEGMENT
_key$ = 8						; size = 4
_arrayindex PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 146
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 147
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _key$[ebp]
  00006	83 79 08 13	 cmp	 DWORD PTR [ecx+8], 19	; 00000013H
  0000a	75 1c		 jne	 SHORT $LN1@arrayindex
; Line 148
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
; Line 149
  00011	85 c9		 test	 ecx, ecx
  00013	7c 13		 jl	 SHORT $LN1@arrayindex
  00015	7f 06		 jg	 SHORT $LN7@arrayindex
  00017	85 c0		 test	 eax, eax
  00019	74 0d		 je	 SHORT $LN1@arrayindex
  0001b	85 c9		 test	 ecx, ecx
$LN7@arrayindex:
  0001d	77 09		 ja	 SHORT $LN1@arrayindex
  0001f	72 09		 jb	 SHORT $LN3@arrayindex
  00021	3d 00 00 00 80	 cmp	 eax, -2147483648	; 80000000H
  00026	76 02		 jbe	 SHORT $LN3@arrayindex
$LN1@arrayindex:
; Line 152
  00028	33 c0		 xor	 eax, eax
$LN3@arrayindex:
; Line 153
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_arrayindex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _mainposition
_TEXT	SEGMENT
_t$ = 8							; size = 4
_key$ = 12						; size = 4
_mainposition PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 119
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 120
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _key$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0000c	83 e0 3f	 and	 eax, 63			; 0000003fH
  0000f	48		 dec	 eax
  00010	83 f8 15	 cmp	 eax, 21			; 00000015H
  00013	0f 87 a7 00 00
	00		 ja	 $LN1@mainpositi
  00019	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN13@mainpositi[eax]
  00020	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN17@mainpositi[eax*4]
$LN8@mainpositi:
; Line 122
  00027	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  0002a	ba 01 00 00 00	 mov	 edx, 1
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00034	d3 e2		 shl	 edx, cl
  00036	4a		 dec	 edx
  00037	23 13		 and	 edx, DWORD PTR [ebx]
  00039	c1 e2 05	 shl	 edx, 5
  0003c	03 50 10	 add	 edx, DWORD PTR [eax+16]
; Line 137
  0003f	8b c2		 mov	 eax, edx
  00041	5b		 pop	 ebx
; Line 139
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
$LN7@mainpositi:
; Line 124
  00044	f2 0f 10 03	 movsd	 xmm0, QWORD PTR [ebx]
  00048	83 ec 08	 sub	 esp, 8
  0004b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00050	e8 00 00 00 00	 call	 _l_hashfloat
  00055	8b 7d 08	 mov	 edi, DWORD PTR _t$[ebp]
  00058	be 01 00 00 00	 mov	 esi, 1
  0005d	99		 cdq
  0005e	83 c4 08	 add	 esp, 8
  00061	8a 4f 07	 mov	 cl, BYTE PTR [edi+7]
  00064	d3 e6		 shl	 esi, cl
  00066	4e		 dec	 esi
  00067	83 ce 01	 or	 esi, 1
  0006a	f7 fe		 idiv	 esi
; Line 137
  0006c	c1 e2 05	 shl	 edx, 5
  0006f	03 57 10	 add	 edx, DWORD PTR [edi+16]
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	8b c2		 mov	 eax, edx
  00076	5b		 pop	 ebx
; Line 139
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN6@mainpositi:
; Line 126
  00079	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  0007c	be 01 00 00 00	 mov	 esi, 1
  00081	8b 03		 mov	 eax, DWORD PTR [ebx]
  00083	5f		 pop	 edi
  00084	8a 4a 07	 mov	 cl, BYTE PTR [edx+7]
  00087	d3 e6		 shl	 esi, cl
  00089	4e		 dec	 esi
  0008a	23 70 08	 and	 esi, DWORD PTR [eax+8]
  0008d	c1 e6 05	 shl	 esi, 5
  00090	03 72 10	 add	 esi, DWORD PTR [edx+16]
  00093	8b c6		 mov	 eax, esi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
; Line 139
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
$LN5@mainpositi:
; Line 128
  00099	ff 33		 push	 DWORD PTR [ebx]
  0009b	e8 00 00 00 00	 call	 _luaS_hashlongstr
  000a0	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  000a3	8b f0		 mov	 esi, eax
  000a5	83 c4 04	 add	 esp, 4
  000a8	b8 01 00 00 00	 mov	 eax, 1
  000ad	8a 4a 07	 mov	 cl, BYTE PTR [edx+7]
  000b0	d3 e0		 shl	 eax, cl
  000b2	48		 dec	 eax
  000b3	23 c6		 and	 eax, esi
  000b5	5f		 pop	 edi
  000b6	c1 e0 05	 shl	 eax, 5
  000b9	03 42 10	 add	 eax, DWORD PTR [edx+16]
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
; Line 139
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN1@mainpositi:
; Line 137
  000c0	8b 7d 08	 mov	 edi, DWORD PTR _t$[ebp]
  000c3	be 01 00 00 00	 mov	 esi, 1
  000c8	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ca	33 d2		 xor	 edx, edx
  000cc	8a 4f 07	 mov	 cl, BYTE PTR [edi+7]
  000cf	d3 e6		 shl	 esi, cl
  000d1	4e		 dec	 esi
  000d2	83 ce 01	 or	 esi, 1
  000d5	f7 f6		 div	 esi
  000d7	c1 e2 05	 shl	 edx, 5
  000da	03 57 10	 add	 edx, DWORD PTR [edi+16]
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	8b c2		 mov	 eax, edx
  000e1	5b		 pop	 ebx
; Line 139
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN17@mainpositi:
  000e4	00 00 00 00	 DD	 $LN8@mainpositi
  000e8	00 00 00 00	 DD	 $LN1@mainpositi
  000ec	00 00 00 00	 DD	 $LN7@mainpositi
  000f0	00 00 00 00	 DD	 $LN6@mainpositi
  000f4	00 00 00 00	 DD	 $LN5@mainpositi
  000f8	00 00 00 00	 DD	 $LN1@mainpositi
$LN13@mainpositi:
  000fc	00		 DB	 0
  000fd	01		 DB	 1
  000fe	02		 DB	 2
  000ff	03		 DB	 3
  00100	05		 DB	 5
  00101	05		 DB	 5
  00102	05		 DB	 5
  00103	05		 DB	 5
  00104	05		 DB	 5
  00105	05		 DB	 5
  00106	05		 DB	 5
  00107	05		 DB	 5
  00108	05		 DB	 5
  00109	05		 DB	 5
  0010a	05		 DB	 5
  0010b	05		 DB	 5
  0010c	05		 DB	 5
  0010d	05		 DB	 5
  0010e	00		 DB	 0
  0010f	04		 DB	 4
  00110	05		 DB	 5
  00111	01		 DB	 1
_mainposition ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _l_hashfloat
_TEXT	SEGMENT
_i$ = -4						; size = 4
tv136 = 8						; size = 8
_n$ = 8							; size = 8
_l_hashfloat PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 99
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 102
  00004	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _n$[ebp]
  00009	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0000c	50		 push	 eax
  0000d	83 ec 08	 sub	 esp, 8
  00010	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__frexp
  0001b	dd 5d 08	 fstp	 QWORD PTR tv136[ebp]
  0001e	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR tv136[ebp]
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@41e0000000000000
; Line 103
  0002e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@c3e0000000000000
  00036	72 23		 jb	 SHORT $LN2@l_hashfloa
  00038	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@43e0000000000000
  00040	66 0f 2f c8	 comisd	 xmm1, xmm0
  00044	76 15		 jbe	 SHORT $LN2@l_hashfloa
  00046	e8 00 00 00 00	 call	 __dtol3
; Line 108
  0004b	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
; Line 109
  0004e	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00053	76 08		 jbe	 SHORT $LN1@l_hashfloa
  00055	f7 d0		 not	 eax
; Line 111
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN2@l_hashfloa:
; Line 105
  0005b	33 c0		 xor	 eax, eax
$LN1@l_hashfloa:
; Line 111
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_l_hashfloat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_getn
_TEXT	SEGMENT
_t$ = 8							; size = 4
_luaH_getn PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 641
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 642
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _t$[ebp]
  00006	57		 push	 edi
  00007	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
; Line 643
  0000a	85 d2		 test	 edx, edx
  0000c	74 3b		 je	 SHORT $LN8@luaH_getn
  0000e	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]
  00011	8b c2		 mov	 eax, edx
  00013	03 c0		 add	 eax, eax
  00015	83 7c c7 f8 00	 cmp	 DWORD PTR [edi+eax*8-8], 0
  0001a	75 2d		 jne	 SHORT $LN8@luaH_getn
; Line 645
  0001c	56		 push	 esi
  0001d	33 f6		 xor	 esi, esi
; Line 646
  0001f	83 fa 01	 cmp	 edx, 1
  00022	76 1f		 jbe	 SHORT $LN6@luaH_getn
$LL7@luaH_getn:
; Line 647
  00024	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]
  00027	d1 e9		 shr	 ecx, 1
; Line 648
  00029	8b c1		 mov	 eax, ecx
  0002b	03 c0		 add	 eax, eax
  0002d	83 7c c7 f8 00	 cmp	 DWORD PTR [edi+eax*8-8], 0
  00032	75 04		 jne	 SHORT $LN5@luaH_getn
  00034	8b d1		 mov	 edx, ecx
  00036	eb 02		 jmp	 SHORT $LN4@luaH_getn
$LN5@luaH_getn:
; Line 649
  00038	8b f1		 mov	 esi, ecx
$LN4@luaH_getn:
; Line 646
  0003a	8b c2		 mov	 eax, edx
  0003c	2b c6		 sub	 eax, esi
  0003e	83 f8 01	 cmp	 eax, 1
  00041	77 e1		 ja	 SHORT $LL7@luaH_getn
$LN6@luaH_getn:
; Line 651
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi
  00046	5f		 pop	 edi
; Line 657
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN8@luaH_getn:
; Line 654
  00049	81 79 10 00 00
	00 00		 cmp	 DWORD PTR [ecx+16], OFFSET _dummynode_
  00050	75 05		 jne	 SHORT $LN2@luaH_getn
; Line 655
  00052	8b c2		 mov	 eax, edx
  00054	5f		 pop	 edi
; Line 657
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN2@luaH_getn:
; Line 656
  00057	52		 push	 edx
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 _unbound_search
  0005e	83 c4 08	 add	 esp, 8
  00061	5f		 pop	 edi
; Line 657
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_luaH_getn ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_next
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_key$ = 16						; size = 4
_luaH_next PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 188
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 189
  00004	8b 5d 10	 mov	 ebx, DWORD PTR _key$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _t$[ebp]
  0000c	53		 push	 ebx
  0000d	57		 push	 edi
  0000e	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00011	e8 00 00 00 00	 call	 _findindex
  00016	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 190
  0001c	3b c6		 cmp	 eax, esi
  0001e	73 1d		 jae	 SHORT $LN6@luaH_next
; Line 191
  00020	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00023	8b c8		 mov	 ecx, eax
  00025	c1 e1 04	 shl	 ecx, 4
  00028	83 c2 08	 add	 edx, 8
  0002b	03 ca		 add	 ecx, edx
  0002d	8d 49 00	 npad	 3
$LL8@luaH_next:
  00030	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00033	75 3f		 jne	 SHORT $LN13@luaH_next
; Line 190
  00035	40		 inc	 eax
  00036	83 c1 10	 add	 ecx, 16			; 00000010H
  00039	3b c6		 cmp	 eax, esi
  0003b	72 f3		 jb	 SHORT $LL8@luaH_next
$LN6@luaH_next:
; Line 197
  0003d	8a 4f 07	 mov	 cl, BYTE PTR [edi+7]
  00040	ba 01 00 00 00	 mov	 edx, 1
  00045	2b c6		 sub	 eax, esi
  00047	d3 e2		 shl	 edx, cl
  00049	3b c2		 cmp	 eax, edx
  0004b	7d 20		 jge	 SHORT $LN2@luaH_next
; Line 198
  0004d	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00050	8b c8		 mov	 ecx, eax
  00052	c1 e1 05	 shl	 ecx, 5
  00055	83 c1 08	 add	 ecx, 8
  00058	03 ce		 add	 ecx, esi
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL4@luaH_next:
  00060	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00063	75 3b		 jne	 SHORT $LN14@luaH_next
; Line 197
  00065	40		 inc	 eax
  00066	83 c1 20	 add	 ecx, 32			; 00000020H
  00069	3b c2		 cmp	 eax, edx
  0006b	7c f3		 jl	 SHORT $LL4@luaH_next
$LN2@luaH_next:
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
; Line 204
  0006f	33 c0		 xor	 eax, eax
  00071	5b		 pop	 ebx
; Line 205
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN13@luaH_next:
; Line 192
  00074	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00077	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  0007e	89 0b		 mov	 DWORD PTR [ebx], ecx
  00080	c7 43 08 13 00
	00 00		 mov	 DWORD PTR [ebx+8], 19	; 00000013H
; Line 193
  00087	c1 e0 04	 shl	 eax, 4
  0008a	03 47 0c	 add	 eax, DWORD PTR [edi+12]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
; Line 194
  00093	b8 01 00 00 00	 mov	 eax, 1
  00098	f3 0f 7f 43 10	 movdqu	 XMMWORD PTR [ebx+16], xmm0
  0009d	5b		 pop	 ebx
; Line 205
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
$LN14@luaH_next:
; Line 199
  000a0	c1 e0 05	 shl	 eax, 5
  000a3	f3 0f 6f 44 06
	10		 movdqu	 xmm0, XMMWORD PTR [esi+eax+16]
  000a9	f3 0f 7f 03	 movdqu	 XMMWORD PTR [ebx], xmm0
; Line 200
  000ad	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	f3 0f 6f 04 01	 movdqu	 xmm0, XMMWORD PTR [ecx+eax]
; Line 201
  000b7	b8 01 00 00 00	 mov	 eax, 1
  000bc	f3 0f 7f 43 10	 movdqu	 XMMWORD PTR [ebx+16], xmm0
  000c1	5b		 pop	 ebx
; Line 205
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_luaH_next ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_free
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_luaH_free PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 416
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 417
  00004	8b 75 0c	 mov	 esi, DWORD PTR _t$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000b	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0000e	81 fa 00 00 00
	00		 cmp	 edx, OFFSET _dummynode_
  00014	74 1a		 je	 SHORT $LN1@luaH_free
; Line 418
  00016	8a 4e 07	 mov	 cl, BYTE PTR [esi+7]
  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	d3 e0		 shl	 eax, cl
  00020	6a 00		 push	 0
  00022	c1 e0 05	 shl	 eax, 5
  00025	50		 push	 eax
  00026	52		 push	 edx
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 _luaM_realloc_
  0002d	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@luaH_free:
; Line 419
  00030	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00033	6a 00		 push	 0
  00035	c1 e0 04	 shl	 eax, 4
  00038	50		 push	 eax
  00039	ff 76 0c	 push	 DWORD PTR [esi+12]
  0003c	57		 push	 edi
  0003d	e8 00 00 00 00	 call	 _luaM_realloc_
; Line 420
  00042	6a 00		 push	 0
  00044	6a 20		 push	 32			; 00000020H
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	e8 00 00 00 00	 call	 _luaM_realloc_
  0004d	83 c4 20	 add	 esp, 32			; 00000020H
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
; Line 421
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_luaH_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_resizearray
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_nasize$ = 16						; size = 4
_luaH_resizearray PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 370
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 371
  00003	8b 55 0c	 mov	 edx, DWORD PTR _t$[ebp]
  00006	81 7a 10 00 00
	00 00		 cmp	 DWORD PTR [edx+16], OFFSET _dummynode_
  0000d	75 14		 jne	 SHORT $LN3@luaH_resiz
  0000f	33 c0		 xor	 eax, eax
; Line 372
  00011	50		 push	 eax
  00012	ff 75 10	 push	 DWORD PTR _nasize$[ebp]
  00015	52		 push	 edx
  00016	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00019	e8 00 00 00 00	 call	 _luaH_resize
  0001e	83 c4 10	 add	 esp, 16			; 00000010H
; Line 373
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN3@luaH_resiz:
; Line 371
  00023	8a 4a 07	 mov	 cl, BYTE PTR [edx+7]
  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	d3 e0		 shl	 eax, cl
; Line 372
  0002d	50		 push	 eax
  0002e	ff 75 10	 push	 DWORD PTR _nasize$[ebp]
  00031	52		 push	 edx
  00032	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00035	e8 00 00 00 00	 call	 _luaH_resize
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
; Line 373
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_luaH_resizearray ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_resize
_TEXT	SEGMENT
_k$1 = -32						; size = 16
_oldhsize$1$ = -16					; size = 4
tv385 = -12						; size = 4
_value$1$ = -8						; size = 4
_nold$1$ = -4						; size = 4
_L$ = 8							; size = 4
_oldasize$1$ = 12					; size = 4
_t$ = 12						; size = 4
tv379 = 16						; size = 4
_nasize$ = 16						; size = 4
_nhsize$ = 20						; size = 4
_luaH_resize PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 336
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
; Line 342
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _nasize$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR _t$[ebp]
  00012	0f b6 4f 07	 movzx	 ecx, BYTE PTR [edi+7]
  00016	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00019	89 4d f0	 mov	 DWORD PTR _oldhsize$1$[ebp], ecx
  0001c	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0001f	89 45 0c	 mov	 DWORD PTR _oldasize$1$[ebp], eax
  00022	89 4d fc	 mov	 DWORD PTR _nold$1$[ebp], ecx
  00025	3b f0		 cmp	 esi, eax
  00027	76 0b		 jbe	 SHORT $LN11@luaH_resiz
; Line 343
  00029	56		 push	 esi
  0002a	57		 push	 edi
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 _setarrayvector
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@luaH_resiz:
; Line 345
  00034	ff 75 14	 push	 DWORD PTR _nhsize$[ebp]
  00037	57		 push	 edi
  00038	53		 push	 ebx
  00039	e8 00 00 00 00	 call	 _setnodevector
; Line 346
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _oldasize$1$[ebp]
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b f1		 cmp	 esi, ecx
  00046	0f 83 99 00 00
	00		 jae	 $LN10@luaH_resiz
; Line 347
  0004c	8b c6		 mov	 eax, esi
  0004e	89 77 08	 mov	 DWORD PTR [edi+8], esi
  00051	c1 e0 04	 shl	 eax, 4
  00054	89 45 f4	 mov	 DWORD PTR tv385[ebp], eax
  00057	8b d8		 mov	 ebx, eax
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL9@luaH_resiz:
; Line 350
  00060	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00063	03 c3		 add	 eax, ebx
  00065	89 45 f8	 mov	 DWORD PTR _value$1$[ebp], eax
  00068	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0006c	74 48		 je	 SHORT $LN8@luaH_resiz
; Line 351
  0006e	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00071	6a 00		 push	 0
  00073	50		 push	 eax
  00074	57		 push	 edi
  00075	e8 00 00 00 00	 call	 _luaH_getint
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	3d 00 00 00 00	 cmp	 eax, OFFSET _luaO_nilobject_
  00082	75 24		 jne	 SHORT $LN16@luaH_resiz
  00084	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00087	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _k$1[ebp+4], 0
  0008e	89 45 e0	 mov	 DWORD PTR _k$1[ebp], eax
  00091	8d 45 e0	 lea	 eax, DWORD PTR _k$1[ebp]
  00094	50		 push	 eax
  00095	57		 push	 edi
  00096	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00099	c7 45 e8 13 00
	00 00		 mov	 DWORD PTR _k$1[ebp+8], 19 ; 00000013H
  000a0	e8 00 00 00 00	 call	 _luaH_newkey
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@luaH_resiz:
  000a8	8b 4d f8	 mov	 ecx, DWORD PTR _value$1$[ebp]
  000ab	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  000af	8b 4d 0c	 mov	 ecx, DWORD PTR _oldasize$1$[ebp]
  000b2	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
$LN8@luaH_resiz:
; Line 349
  000b6	46		 inc	 esi
  000b7	83 c3 10	 add	 ebx, 16			; 00000010H
  000ba	3b f1		 cmp	 esi, ecx
  000bc	72 a2		 jb	 SHORT $LL9@luaH_resiz
; Line 354
  000be	8b 45 10	 mov	 eax, DWORD PTR _nasize$[ebp]
  000c1	40		 inc	 eax
  000c2	3d ff ff ff 0f	 cmp	 eax, 268435455		; 0fffffffH
  000c7	0f 87 93 00 00
	00		 ja	 $LN33@luaH_resiz
  000cd	ff 75 f4	 push	 DWORD PTR tv385[ebp]
  000d0	c1 e1 04	 shl	 ecx, 4
  000d3	51		 push	 ecx
  000d4	ff 77 0c	 push	 DWORD PTR [edi+12]
  000d7	ff 75 08	 push	 DWORD PTR _L$[ebp]
  000da	e8 00 00 00 00	 call	 _luaM_realloc_
  000df	83 c4 10	 add	 esp, 16			; 00000010H
  000e2	89 47 0c	 mov	 DWORD PTR [edi+12], eax
$LN10@luaH_resiz:
; Line 357
  000e5	8b 4d f0	 mov	 ecx, DWORD PTR _oldhsize$1$[ebp]
  000e8	b8 01 00 00 00	 mov	 eax, 1
  000ed	d3 e0		 shl	 eax, cl
  000ef	89 45 10	 mov	 DWORD PTR tv379[ebp], eax
  000f2	8d 58 ff	 lea	 ebx, DWORD PTR [eax-1]
  000f5	85 db		 test	 ebx, ebx
  000f7	78 43		 js	 SHORT $LN3@luaH_resiz
  000f9	8b 75 fc	 mov	 esi, DWORD PTR _nold$1$[ebp]
  000fc	8b c3		 mov	 eax, ebx
  000fe	c1 e0 05	 shl	 eax, 5
  00101	83 c6 10	 add	 esi, 16			; 00000010H
  00104	03 f0		 add	 esi, eax
$LL5@luaH_resiz:
; Line 359
  00106	83 7e f8 00	 cmp	 DWORD PTR [esi-8], 0
  0010a	74 27		 je	 SHORT $LN4@luaH_resiz
; Line 362
  0010c	56		 push	 esi
  0010d	57		 push	 edi
  0010e	e8 00 00 00 00	 call	 _luaH_get
  00113	83 c4 08	 add	 esp, 8
  00116	3d 00 00 00 00	 cmp	 eax, OFFSET _luaO_nilobject_
  0011b	75 0d		 jne	 SHORT $LN20@luaH_resiz
  0011d	56		 push	 esi
  0011e	57		 push	 edi
  0011f	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00122	e8 00 00 00 00	 call	 _luaH_newkey
  00127	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN20@luaH_resiz:
  0012a	f3 0f 6f 46 f0	 movdqu	 xmm0, XMMWORD PTR [esi-16]
  0012f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
$LN4@luaH_resiz:
; Line 357
  00133	83 ee 20	 sub	 esi, 32			; 00000020H
  00136	4b		 dec	 ebx
  00137	79 cd		 jns	 SHORT $LL5@luaH_resiz
  00139	8b 45 10	 mov	 eax, DWORD PTR tv379[ebp]
$LN3@luaH_resiz:
; Line 365
  0013c	8b 4d fc	 mov	 ecx, DWORD PTR _nold$1$[ebp]
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET _dummynode_
  00148	74 12		 je	 SHORT $LN1@luaH_resiz
; Line 366
  0014a	6a 00		 push	 0
  0014c	c1 e0 05	 shl	 eax, 5
  0014f	50		 push	 eax
  00150	51		 push	 ecx
  00151	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00154	e8 00 00 00 00	 call	 _luaM_realloc_
  00159	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@luaH_resiz:
; Line 367
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
$LN33@luaH_resiz:
; Line 354
  00160	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00163	e8 00 00 00 00	 call	 _luaM_toobig
$LN35@luaH_resiz:
$LN32@luaH_resiz:
  00168	cc		 int	 3
_luaH_resize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_new
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaH_new PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 404
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 405
  00003	6a 20		 push	 32			; 00000020H
  00005	6a 05		 push	 5
  00007	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000a	e8 00 00 00 00	 call	 _luaC_newobj
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 407
  00012	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
; Line 408
  00019	66 c7 40 06 ff
	00		 mov	 WORD PTR [eax+6], 255	; 000000ffH
; Line 409
  0001f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
; Line 410
  00026	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
; Line 411
  0002d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _dummynode_
  00034	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _dummynode_
; Line 413
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_luaH_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_set
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_key$ = 16						; size = 4
_luaH_set PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 591
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 592
  00003	ff 75 10	 push	 DWORD PTR _key$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _t$[ebp]
  00009	e8 00 00 00 00	 call	 _luaH_get
  0000e	83 c4 08	 add	 esp, 8
; Line 593
  00011	3d 00 00 00 00	 cmp	 eax, OFFSET _luaO_nilobject_
  00016	75 06		 jne	 SHORT $LN1@luaH_set
; Line 596
  00018	5d		 pop	 ebp
; Line 595
  00019	e9 00 00 00 00	 jmp	 _luaH_newkey
$LN1@luaH_set:
; Line 596
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_luaH_set ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_newkey
_TEXT	SEGMENT
_aux$ = -24						; size = 16
_k$1 = -8						; size = 8
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_key$ = 16						; size = 4
_luaH_newkey PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 442
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
; Line 445
  00007	8b 5d 10	 mov	 ebx, DWORD PTR _key$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0000f	85 c0		 test	 eax, eax
  00011	0f 84 86 01 00
	00		 je	 $LN42@luaH_newke
; Line 446
  00017	83 f8 03	 cmp	 eax, 3
  0001a	75 30		 jne	 SHORT $LN11@luaH_newke
; Line 448
  0001c	6a 00		 push	 0
  0001e	8d 45 f8	 lea	 eax, DWORD PTR _k$1[ebp]
  00021	50		 push	 eax
  00022	53		 push	 ebx
  00023	e8 00 00 00 00	 call	 _luaV_tointeger
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 84 00 00
	00		 je	 $LN13@luaH_newke
; Line 449
  00033	8b 45 f8	 mov	 eax, DWORD PTR _k$1[ebp]
; Line 450
  00036	8d 5d e8	 lea	 ebx, DWORD PTR _aux$[ebp]
  00039	89 45 e8	 mov	 DWORD PTR _aux$[ebp], eax
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _k$1[ebp+4]
  0003f	89 45 ec	 mov	 DWORD PTR _aux$[ebp+4], eax
  00042	c7 45 f0 13 00
	00 00		 mov	 DWORD PTR _aux$[ebp+8], 19 ; 00000013H
  00049	89 5d 10	 mov	 DWORD PTR _key$[ebp], ebx
$LN11@luaH_newke:
; Line 455
  0004c	8b 75 0c	 mov	 esi, DWORD PTR _t$[ebp]
  0004f	53		 push	 ebx
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 _mainposition
  00056	8b f8		 mov	 edi, eax
  00058	83 c4 08	 add	 esp, 8
; Line 456
  0005b	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  0005f	75 0c		 jne	 SHORT $LN30@luaH_newke
  00061	81 ff 00 00 00
	00		 cmp	 edi, OFFSET _dummynode_
  00067	0f 85 f6 00 00
	00		 jne	 $LN3@luaH_newke
$LN30@luaH_newke:
; Line 458
  0006d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00070	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00073	76 14		 jbe	 SHORT $LN38@luaH_newke
$LL23@luaH_newke:
  00075	83 46 14 e0	 add	 DWORD PTR [esi+20], -32	; ffffffe0H
  00079	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  0007c	83 7b 18 00	 cmp	 DWORD PTR [ebx+24], 0
  00080	74 48		 je	 SHORT $LN32@luaH_newke
  00082	3b d8		 cmp	 ebx, eax
  00084	77 ef		 ja	 SHORT $LL23@luaH_newke
$LN39@luaH_newke:
  00086	8b 5d 10	 mov	 ebx, DWORD PTR _key$[ebp]
$LN38@luaH_newke:
; Line 460
  00089	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0008c	53		 push	 ebx
  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	e8 00 00 00 00	 call	 _rehash
; Line 462
  00094	53		 push	 ebx
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 _luaH_get
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	3d 00 00 00 00	 cmp	 eax, OFFSET _luaO_nilobject_
  000a3	75 0b		 jne	 SHORT $LN17@luaH_newke
  000a5	53		 push	 ebx
  000a6	56		 push	 esi
  000a7	57		 push	 edi
  000a8	e8 00 00 00 00	 call	 _luaH_newkey
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN17@luaH_newke:
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
; Line 491
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
$LN13@luaH_newke:
; Line 452
  000b7	f2 0f 10 03	 movsd	 xmm0, QWORD PTR [ebx]
  000bb	66 0f 2e c0	 ucomisd xmm0, xmm0
  000bf	9f		 lahf
  000c0	f6 c4 44	 test	 ah, 68			; 00000044H
  000c3	7b 87		 jnp	 SHORT $LN11@luaH_newke
  000c5	e9 e0 00 00 00	 jmp	 $LN44@luaH_newke
$LN32@luaH_newke:
; Line 459
  000ca	85 db		 test	 ebx, ebx
  000cc	74 b8		 je	 SHORT $LN39@luaH_newke
; Line 465
  000ce	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  000d1	50		 push	 eax
  000d2	56		 push	 esi
  000d3	e8 00 00 00 00	 call	 _mainposition
  000d8	8b d0		 mov	 edx, eax
  000da	83 c4 08	 add	 esp, 8
; Line 466
  000dd	3b d7		 cmp	 edx, edi
  000df	74 5f		 je	 SHORT $LN7@luaH_newke
; Line 468
  000e1	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  000e4	c1 e1 05	 shl	 ecx, 5
  000e7	03 ca		 add	 ecx, edx
  000e9	3b cf		 cmp	 ecx, edi
  000eb	74 17		 je	 SHORT $LN5@luaH_newke
  000ed	8d 49 00	 npad	 3
$LL6@luaH_newke:
; Line 469
  000f0	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000f3	c1 e0 05	 shl	 eax, 5
  000f6	03 d0		 add	 edx, eax
  000f8	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000fb	c1 e0 05	 shl	 eax, 5
  000fe	03 c2		 add	 eax, edx
  00100	3b c7		 cmp	 eax, edi
  00102	75 ec		 jne	 SHORT $LL6@luaH_newke
$LN5@luaH_newke:
; Line 470
  00104	8b c3		 mov	 eax, ebx
  00106	2b c2		 sub	 eax, edx
  00108	c1 f8 05	 sar	 eax, 5
  0010b	89 42 1c	 mov	 DWORD PTR [edx+28], eax
; Line 471
  0010e	f3 0f 6f 07	 movdqu	 xmm0, XMMWORD PTR [edi]
  00112	f3 0f 7f 03	 movdqu	 XMMWORD PTR [ebx], xmm0
  00116	f3 0f 6f 47 10	 movdqu	 xmm0, XMMWORD PTR [edi+16]
  0011b	f3 0f 7f 43 10	 movdqu	 XMMWORD PTR [ebx+16], xmm0
; Line 472
  00120	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  00124	74 11		 je	 SHORT $LN4@luaH_newke
; Line 473
  00126	8b c7		 mov	 eax, edi
  00128	2b c3		 sub	 eax, ebx
  0012a	c1 f8 05	 sar	 eax, 5
  0012d	01 43 1c	 add	 DWORD PTR [ebx+28], eax
; Line 474
  00130	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
$LN4@luaH_newke:
; Line 476
  00137	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
; Line 478
  0013e	eb 20		 jmp	 SHORT $LN41@luaH_newke
$LN7@luaH_newke:
; Line 480
  00140	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00143	85 c0		 test	 eax, eax
  00145	74 0d		 je	 SHORT $LN2@luaH_newke
; Line 481
  00147	c1 e0 05	 shl	 eax, 5
  0014a	2b c3		 sub	 eax, ebx
  0014c	03 c7		 add	 eax, edi
  0014e	c1 f8 05	 sar	 eax, 5
  00151	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
$LN2@luaH_newke:
; Line 483
  00154	8b c3		 mov	 eax, ebx
  00156	2b c7		 sub	 eax, edi
  00158	c1 f8 05	 sar	 eax, 5
  0015b	89 47 1c	 mov	 DWORD PTR [edi+28], eax
; Line 484
  0015e	8b fb		 mov	 edi, ebx
$LN41@luaH_newke:
  00160	8b 5d 10	 mov	 ebx, DWORD PTR _key$[ebp]
$LN3@luaH_newke:
; Line 487
  00163	8b 03		 mov	 eax, DWORD PTR [ebx]
  00165	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00168	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0016b	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0016e	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00171	89 47 18	 mov	 DWORD PTR [edi+24], eax
; Line 488
  00174	f6 43 08 40	 test	 BYTE PTR [ebx+8], 64	; 00000040H
  00178	74 1a		 je	 SHORT $LN19@luaH_newke
  0017a	f6 46 05 04	 test	 BYTE PTR [esi+5], 4
  0017e	74 14		 je	 SHORT $LN19@luaH_newke
  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	f6 40 05 03	 test	 BYTE PTR [eax+5], 3
  00186	74 0c		 je	 SHORT $LN19@luaH_newke
  00188	56		 push	 esi
  00189	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0018c	e8 00 00 00 00	 call	 _luaC_barrierback_
  00191	83 c4 08	 add	 esp, 8
$LN19@luaH_newke:
; Line 490
  00194	8b c7		 mov	 eax, edi
  00196	5f		 pop	 edi
  00197	5e		 pop	 esi
  00198	5b		 pop	 ebx
; Line 491
  00199	8b e5		 mov	 esp, ebp
  0019b	5d		 pop	 ebp
  0019c	c3		 ret	 0
$LN42@luaH_newke:
; Line 445
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BDIKLFBP@table?5index?5is?5nil?$AA@
  001a2	ff 75 08	 push	 DWORD PTR _L$[ebp]
  001a5	e8 00 00 00 00	 call	 _luaG_runerror
$LN45@luaH_newke:
$LN44@luaH_newke:
; Line 453
  001aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BKBJANLJ@table?5index?5is?5NaN?$AA@
  001af	ff 75 08	 push	 DWORD PTR _L$[ebp]
  001b2	e8 00 00 00 00	 call	 _luaG_runerror
$LN46@luaH_newke:
$LN40@luaH_newke:
  001b7	cc		 int	 3
_luaH_newkey ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_get
_TEXT	SEGMENT
_k$1 = -8						; size = 8
_t$ = 8							; size = 4
_key$ = 12						; size = 4
_luaH_get PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 570
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
; Line 571
  00007	8b 75 0c	 mov	 esi, DWORD PTR _key$[ebp]
  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	83 e0 3f	 and	 eax, 63			; 0000003fH
  00010	83 f8 13	 cmp	 eax, 19			; 00000013H
  00013	77 68		 ja	 SHORT $LN2@luaH_get
  00015	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN11@luaH_get[eax]
  0001c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@luaH_get[eax*4]
$LN6@luaH_get:
; Line 572
  00023	ff 36		 push	 DWORD PTR [esi]
  00025	ff 75 08	 push	 DWORD PTR _t$[ebp]
  00028	e8 00 00 00 00	 call	 _luaH_getshortstr
; Line 582
  0002d	83 c4 08	 add	 esp, 8
  00030	5e		 pop	 esi
; Line 584
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN5@luaH_get:
; Line 573
  00035	ff 76 04	 push	 DWORD PTR [esi+4]
  00038	ff 36		 push	 DWORD PTR [esi]
  0003a	ff 75 08	 push	 DWORD PTR _t$[ebp]
  0003d	e8 00 00 00 00	 call	 _luaH_getint
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	5e		 pop	 esi
; Line 584
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN4@luaH_get:
; Line 574
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET _luaO_nilobject_
  0004f	5e		 pop	 esi
; Line 584
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
$LN3@luaH_get:
; Line 577
  00054	6a 00		 push	 0
  00056	8d 45 f8	 lea	 eax, DWORD PTR _k$1[ebp]
  00059	50		 push	 eax
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 _luaV_tointeger
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	85 c0		 test	 eax, eax
  00065	74 16		 je	 SHORT $LN2@luaH_get
; Line 578
  00067	ff 75 fc	 push	 DWORD PTR _k$1[ebp+4]
  0006a	ff 75 f8	 push	 DWORD PTR _k$1[ebp]
  0006d	ff 75 08	 push	 DWORD PTR _t$[ebp]
  00070	e8 00 00 00 00	 call	 _luaH_getint
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
  00078	5e		 pop	 esi
; Line 584
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
$LN2@luaH_get:
; Line 582
  0007d	56		 push	 esi
  0007e	ff 75 08	 push	 DWORD PTR _t$[ebp]
  00081	e8 00 00 00 00	 call	 _getgeneric
  00086	83 c4 08	 add	 esp, 8
  00089	5e		 pop	 esi
; Line 584
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
  0008e	8b ff		 npad	 2
$LN14@luaH_get:
  00090	00 00 00 00	 DD	 $LN4@luaH_get
  00094	00 00 00 00	 DD	 $LN3@luaH_get
  00098	00 00 00 00	 DD	 $LN6@luaH_get
  0009c	00 00 00 00	 DD	 $LN5@luaH_get
  000a0	00 00 00 00	 DD	 $LN2@luaH_get
$LN11@luaH_get:
  000a4	00		 DB	 0
  000a5	04		 DB	 4
  000a6	04		 DB	 4
  000a7	01		 DB	 1
  000a8	02		 DB	 2
  000a9	04		 DB	 4
  000aa	04		 DB	 4
  000ab	04		 DB	 4
  000ac	04		 DB	 4
  000ad	04		 DB	 4
  000ae	04		 DB	 4
  000af	04		 DB	 4
  000b0	04		 DB	 4
  000b1	04		 DB	 4
  000b2	04		 DB	 4
  000b3	04		 DB	 4
  000b4	04		 DB	 4
  000b5	04		 DB	 4
  000b6	04		 DB	 4
  000b7	03		 DB	 3
_luaH_get ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_getstr
_TEXT	SEGMENT
_ko$1 = -16						; size = 16
_t$ = 8							; size = 4
_key$ = 12						; size = 4
_luaH_getstr PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 556
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 557
  00003	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  0000c	80 f9 04	 cmp	 cl, 4
  0000f	75 10		 jne	 SHORT $LN2@luaH_getst
; Line 558
  00011	50		 push	 eax
  00012	ff 75 08	 push	 DWORD PTR _t$[ebp]
  00015	e8 00 00 00 00	 call	 _luaH_getshortstr
; Line 562
  0001a	83 c4 08	 add	 esp, 8
; Line 564
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN2@luaH_getst:
; Line 561
  00021	89 45 f0	 mov	 DWORD PTR _ko$1[ebp], eax
  00024	0f b6 c1	 movzx	 eax, cl
  00027	83 c8 40	 or	 eax, 64			; 00000040H
  0002a	89 45 f8	 mov	 DWORD PTR _ko$1[ebp+8], eax
; Line 562
  0002d	8d 45 f0	 lea	 eax, DWORD PTR _ko$1[ebp]
  00030	50		 push	 eax
  00031	ff 75 08	 push	 DWORD PTR _t$[ebp]
  00034	e8 00 00 00 00	 call	 _getgeneric
  00039	83 c4 08	 add	 esp, 8
; Line 564
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_luaH_getstr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_getshortstr
_TEXT	SEGMENT
_t$ = 8							; size = 4
_key$ = 12						; size = 4
_luaH_getshortstr PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 520
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 521
  00003	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  00006	b8 01 00 00 00	 mov	 eax, 1
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR _key$[ebp]
  0000f	8a 4a 07	 mov	 cl, BYTE PTR [edx+7]
  00012	d3 e0		 shl	 eax, cl
  00014	48		 dec	 eax
  00015	23 46 08	 and	 eax, DWORD PTR [esi+8]
  00018	c1 e0 05	 shl	 eax, 5
  0001b	03 42 10	 add	 eax, DWORD PTR [edx+16]
  0001e	8b ff		 npad	 2
$LL5@luaH_getsh:
; Line 525
  00020	83 78 18 44	 cmp	 DWORD PTR [eax+24], 68	; 00000044H
  00024	75 05		 jne	 SHORT $LN3@luaH_getsh
  00026	39 70 10	 cmp	 DWORD PTR [eax+16], esi
  00029	74 13		 je	 SHORT $LN4@luaH_getsh
$LN3@luaH_getsh:
; Line 528
  0002b	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
; Line 529
  0002e	85 c9		 test	 ecx, ecx
  00030	74 07		 je	 SHORT $LN11@luaH_getsh
; Line 531
  00032	c1 e1 05	 shl	 ecx, 5
  00035	03 c1		 add	 eax, ecx
; Line 533
  00037	eb e7		 jmp	 SHORT $LL5@luaH_getsh
$LN11@luaH_getsh:
; Line 530
  00039	b8 00 00 00 00	 mov	 eax, OFFSET _luaO_nilobject_
$LN4@luaH_getsh:
  0003e	5e		 pop	 esi
; Line 534
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_luaH_getshortstr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_setint
_TEXT	SEGMENT
_k$1 = -16						; size = 16
_L$ = 8							; size = 4
_t$ = 12						; size = 4
_key$ = 16						; size = 8
_value$ = 24						; size = 4
_luaH_setint PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 599
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
; Line 600
  00007	8b 75 14	 mov	 esi, DWORD PTR _key$[ebp+4]
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR _key$[ebp]
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	ff 75 0c	 push	 DWORD PTR _t$[ebp]
  00013	e8 00 00 00 00	 call	 _luaH_getint
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 602
  0001b	3d 00 00 00 00	 cmp	 eax, OFFSET _luaO_nilobject_
  00020	75 1f		 jne	 SHORT $LN5@luaH_setin
; Line 607
  00022	8d 45 f0	 lea	 eax, DWORD PTR _k$1[ebp]
  00025	89 7d f0	 mov	 DWORD PTR _k$1[ebp], edi
  00028	50		 push	 eax
  00029	ff 75 0c	 push	 DWORD PTR _t$[ebp]
  0002c	89 75 f4	 mov	 DWORD PTR _k$1[ebp+4], esi
  0002f	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00032	c7 45 f8 13 00
	00 00		 mov	 DWORD PTR _k$1[ebp+8], 19 ; 00000013H
  00039	e8 00 00 00 00	 call	 _luaH_newkey
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@luaH_setin:
; Line 609
  00041	8b 4d 18	 mov	 ecx, DWORD PTR _value$[ebp]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  0004a	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
; Line 610
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_luaH_setint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaH_getint
_TEXT	SEGMENT
_t$ = 8							; size = 4
_key$ = 12						; size = 8
_luaH_getint PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 497
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 499
  00003	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  00006	8b ca		 mov	 ecx, edx
  00008	56		 push	 esi
  00009	8b 75 10	 mov	 esi, DWORD PTR _key$[ebp+4]
  0000c	83 c1 ff	 add	 ecx, -1
  0000f	8b c6		 mov	 eax, esi
  00011	83 d0 ff	 adc	 eax, -1
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _t$[ebp]
  00018	85 c0		 test	 eax, eax
  0001a	77 16		 ja	 SHORT $LN7@luaH_getin
  0001c	72 05		 jb	 SHORT $LN16@luaH_getin
  0001e	3b 4f 08	 cmp	 ecx, DWORD PTR [edi+8]
  00021	73 0f		 jae	 SHORT $LN7@luaH_getin
$LN16@luaH_getin:
; Line 500
  00023	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00026	c1 e2 04	 shl	 edx, 4
  00029	83 c0 f0	 add	 eax, -16		; fffffff0H
  0002c	5f		 pop	 edi
  0002d	03 c2		 add	 eax, edx
  0002f	5e		 pop	 esi
; Line 514
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN7@luaH_getin:
; Line 502
  00032	8a 4f 07	 mov	 cl, BYTE PTR [edi+7]
  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	d3 e0		 shl	 eax, cl
  0003c	48		 dec	 eax
  0003d	23 c2		 and	 eax, edx
  0003f	c1 e0 05	 shl	 eax, 5
  00042	03 47 10	 add	 eax, DWORD PTR [edi+16]
$LL5@luaH_getin:
; Line 504
  00045	83 78 18 13	 cmp	 DWORD PTR [eax+24], 19	; 00000013H
  00049	75 0a		 jne	 SHORT $LN17@luaH_getin
  0004b	39 50 10	 cmp	 DWORD PTR [eax+16], edx
  0004e	75 05		 jne	 SHORT $LN17@luaH_getin
  00050	39 70 14	 cmp	 DWORD PTR [eax+20], esi
  00053	74 13		 je	 SHORT $LN6@luaH_getin
$LN17@luaH_getin:
; Line 507
  00055	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
; Line 508
  00058	85 c9		 test	 ecx, ecx
  0005a	74 07		 je	 SHORT $LN13@luaH_getin
; Line 509
  0005c	c1 e1 05	 shl	 ecx, 5
  0005f	03 c1		 add	 eax, ecx
; Line 511
  00061	eb e2		 jmp	 SHORT $LL5@luaH_getin
$LN13@luaH_getin:
; Line 512
  00063	b8 00 00 00 00	 mov	 eax, OFFSET _luaO_nilobject_
$LN6@luaH_getin:
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
; Line 514
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_luaH_getint ENDP
_TEXT	ENDS
END
