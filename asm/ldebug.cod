; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_lua_getstack
PUBLIC	_lua_getinfo
PUBLIC	_lua_getlocal
PUBLIC	_lua_setlocal
PUBLIC	_lua_sethook
PUBLIC	_lua_gethook
PUBLIC	_lua_gethookmask
PUBLIC	_lua_gethookcount
PUBLIC	_luaG_typeerror
PUBLIC	_luaG_concaterror
PUBLIC	_luaG_opinterror
PUBLIC	_luaG_tointerror
PUBLIC	_luaG_ordererror
PUBLIC	_luaG_runerror
PUBLIC	_luaG_addinfo
PUBLIC	_luaG_errormsg
PUBLIC	_luaG_traceexec
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	??_C@_09DKIONLLI@?$CI?$CKvararg?$CJ?$AA@	; `string'
PUBLIC	??_C@_0N@NCKPGBEC@?$CI?$CKtemporary?$CJ?$AA@	; `string'
PUBLIC	??_C@_04BKJOMPG@?$DN?$FLC?$FN?$AA@		; `string'
PUBLIC	??_C@_01GFHCPBMG@C?$AA@				; `string'
PUBLIC	??_C@_02HENDHKBC@?$DN?$DP?$AA@			; `string'
PUBLIC	??_C@_04GHJNJNPO@main?$AA@			; `string'
PUBLIC	??_C@_03CBKFDHDL@Lua?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_05IDKHKMLA@local?$AA@			; `string'
PUBLIC	??_C@_04LJLBKCOP@_ENV?$AA@			; `string'
PUBLIC	??_C@_06FJKEMHGD@global?$AA@			; `string'
PUBLIC	??_C@_05EIBGDMPB@field?$AA@			; `string'
PUBLIC	??_C@_07NAGMKCIK@upvalue?$AA@			; `string'
PUBLIC	??_C@_08KFDOCAEB@constant?$AA@			; `string'
PUBLIC	??_C@_06GABBCIBA@method?$AA@			; `string'
PUBLIC	??_C@_04DGFIONEK@hook?$AA@			; `string'
PUBLIC	??_C@_0N@LEHLDOCH@for?5iterator?$AA@		; `string'
PUBLIC	??_C@_0L@ILHKGAHF@metamethod?$AA@		; `string'
PUBLIC	??_C@_0L@HICMLPOF@?5?$CI?$CFs?5?8?$CFs?8?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BL@BEEJNDFB@attempt?5to?5?$CFs?5a?5?$CFs?5value?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0M@LPKAOE@concatenate?$AA@		; `string'
PUBLIC	??_C@_0CH@EHJFDOFM@number?$CFs?5has?5no?5integer?5represen@ ; `string'
PUBLIC	??_C@_0CB@DEJMKNMB@attempt?5to?5compare?5two?5?$CFs?5values@ ; `string'
PUBLIC	??_C@_0BO@DNBGDDFP@attempt?5to?5compare?5?$CFs?5with?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_09BHPFBFOI@?$CFs?3?$CFd?3?5?$CFs?$AA@	; `string'
EXTRN	__imp__strchr:PROC
EXTRN	_luaO_pushvfstring:PROC
EXTRN	_luaO_pushfstring:PROC
EXTRN	_luaO_chunkid:PROC
EXTRN	_luaD_hook:PROC
EXTRN	_luaD_callnoyield:PROC
EXTRN	_luaD_throw:PROC
EXTRN	_luaF_getlocalname:PROC
EXTRN	_luaH_setint:PROC
EXTRN	_luaH_new:PROC
EXTRN	_luaV_tonumber_:PROC
EXTRN	_luaV_tointeger:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_luaT_typenames_:BYTE
EXTRN	_luaP_opmodes:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_09BHPFBFOI@?$CFs?3?$CFd?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_09BHPFBFOI@?$CFs?3?$CFd?3?5?$CFs?$AA@ DB '%s:%d: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DNBGDDFP@attempt?5to?5compare?5?$CFs?5with?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BO@DNBGDDFP@attempt?5to?5compare?5?$CFs?5with?5?$CFs?$AA@ DB 'atte'
	DB	'mpt to compare %s with %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DEJMKNMB@attempt?5to?5compare?5two?5?$CFs?5values@
CONST	SEGMENT
??_C@_0CB@DEJMKNMB@attempt?5to?5compare?5two?5?$CFs?5values@ DB 'attempt '
	DB	'to compare two %s values', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EHJFDOFM@number?$CFs?5has?5no?5integer?5represen@
CONST	SEGMENT
??_C@_0CH@EHJFDOFM@number?$CFs?5has?5no?5integer?5represen@ DB 'number%s '
	DB	'has no integer representation', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LPKAOE@concatenate?$AA@
CONST	SEGMENT
??_C@_0M@LPKAOE@concatenate?$AA@ DB 'concatenate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BEEJNDFB@attempt?5to?5?$CFs?5a?5?$CFs?5value?$CFs?$AA@
CONST	SEGMENT
??_C@_0BL@BEEJNDFB@attempt?5to?5?$CFs?5a?5?$CFs?5value?$CFs?$AA@ DB 'atte'
	DB	'mpt to %s a %s value%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HICMLPOF@?5?$CI?$CFs?5?8?$CFs?8?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@HICMLPOF@?5?$CI?$CFs?5?8?$CFs?8?$CJ?$AA@ DB ' (%s ''%s'')', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ILHKGAHF@metamethod?$AA@
CONST	SEGMENT
??_C@_0L@ILHKGAHF@metamethod?$AA@ DB 'metamethod', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEHLDOCH@for?5iterator?$AA@
CONST	SEGMENT
??_C@_0N@LEHLDOCH@for?5iterator?$AA@ DB 'for iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DGFIONEK@hook?$AA@
CONST	SEGMENT
??_C@_04DGFIONEK@hook?$AA@ DB 'hook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GABBCIBA@method?$AA@
CONST	SEGMENT
??_C@_06GABBCIBA@method?$AA@ DB 'method', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFDOCAEB@constant?$AA@
CONST	SEGMENT
??_C@_08KFDOCAEB@constant?$AA@ DB 'constant', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NAGMKCIK@upvalue?$AA@
CONST	SEGMENT
??_C@_07NAGMKCIK@upvalue?$AA@ DB 'upvalue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EIBGDMPB@field?$AA@
CONST	SEGMENT
??_C@_05EIBGDMPB@field?$AA@ DB 'field', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJKEMHGD@global?$AA@
CONST	SEGMENT
??_C@_06FJKEMHGD@global?$AA@ DB 'global', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LJLBKCOP@_ENV?$AA@
CONST	SEGMENT
??_C@_04LJLBKCOP@_ENV?$AA@ DB '_ENV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDKHKMLA@local?$AA@
CONST	SEGMENT
??_C@_05IDKHKMLA@local?$AA@ DB 'local', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03CBKFDHDL@Lua?$AA@
CONST	SEGMENT
??_C@_03CBKFDHDL@Lua?$AA@ DB 'Lua', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHJNJNPO@main?$AA@
CONST	SEGMENT
??_C@_04GHJNJNPO@main?$AA@ DB 'main', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HENDHKBC@?$DN?$DP?$AA@
CONST	SEGMENT
??_C@_02HENDHKBC@?$DN?$DP?$AA@ DB '=?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT
??_C@_01GFHCPBMG@C?$AA@ DB 'C', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKJOMPG@?$DN?$FLC?$FN?$AA@
CONST	SEGMENT
??_C@_04BKJOMPG@?$DN?$FLC?$FN?$AA@ DB '=[C]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NCKPGBEC@?$CI?$CKtemporary?$CJ?$AA@
CONST	SEGMENT
??_C@_0N@NCKPGBEC@?$CI?$CKtemporary?$CJ?$AA@ DB '(*temporary)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DKIONLLI@?$CI?$CKvararg?$CJ?$AA@
CONST	SEGMENT
??_C@_09DKIONLLI@?$CI?$CKvararg?$CJ?$AA@ DB '(*vararg)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _varinfo
_TEXT	SEGMENT
_name$ = -4						; size = 4
_L$ = 8							; size = 4
_o$ = 12						; size = 4
_varinfo PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 546
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; Line 548
  00005	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  00008	56		 push	 esi
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _name$[ebp], 0
  00010	57		 push	 edi
  00011	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]
; Line 550
  00014	f6 46 22 02	 test	 BYTE PTR [esi+34], 2
  00018	74 77		 je	 SHORT $LN5@varinfo
; Line 551
  0001a	8b 7d 0c	 mov	 edi, DWORD PTR _o$[ebp]
  0001d	8d 45 fc	 lea	 eax, DWORD PTR _name$[ebp]
  00020	50		 push	 eax
  00021	57		 push	 edi
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _getupvalname
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 552
  0002b	85 c0		 test	 eax, eax
  0002d	75 49		 jne	 SHORT $LN13@varinfo
  0002f	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00032	8b d7		 mov	 edx, edi
  00034	2b d1		 sub	 edx, ecx
  00036	c1 fa 04	 sar	 edx, 4
  00039	85 d2		 test	 edx, edx
  0003b	78 54		 js	 SHORT $LN5@varinfo
  0003d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00040	2b c1		 sub	 eax, ecx
  00042	c1 f8 04	 sar	 eax, 4
  00045	3b d0		 cmp	 edx, eax
  00047	7d 48		 jge	 SHORT $LN5@varinfo
  00049	8b c2		 mov	 eax, edx
  0004b	c1 e0 04	 shl	 eax, 4
  0004e	03 c1		 add	 eax, ecx
  00050	3b c7		 cmp	 eax, edi
  00052	75 3d		 jne	 SHORT $LN5@varinfo
; Line 554
  00054	8b 06		 mov	 eax, DWORD PTR [esi]
  00056	8b 00		 mov	 eax, DWORD PTR [eax]
  00058	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	8d 75 fc	 lea	 esi, DWORD PTR _name$[ebp]
  00061	56		 push	 esi
  00062	52		 push	 edx
  00063	2b 41 30	 sub	 eax, DWORD PTR [ecx+48]
  00066	c1 f8 02	 sar	 eax, 2
  00069	48		 dec	 eax
  0006a	50		 push	 eax
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _getobjname
  00071	83 c4 10	 add	 esp, 16			; 00000010H
; Line 556
  00074	85 c0		 test	 eax, eax
  00076	74 19		 je	 SHORT $LN5@varinfo
$LN13@varinfo:
  00078	ff 75 fc	 push	 DWORD PTR _name$[ebp]
  0007b	50		 push	 eax
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HICMLPOF@?5?$CI?$CFs?5?8?$CFs?8?$CJ?$AA@
  00081	53		 push	 ebx
  00082	e8 00 00 00 00	 call	 _luaO_pushfstring
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
; Line 557
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN5@varinfo:
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
; Line 556
  00093	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00098	5b		 pop	 ebx
; Line 557
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_varinfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getupvalname
_TEXT	SEGMENT
_ci$ = 8						; size = 4
_o$ = 12						; size = 4
_name$ = 16						; size = 4
_getupvalname PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 533
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 534
  00003	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
; Line 536
  00006	33 c9		 xor	 ecx, ecx
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	8b 18		 mov	 ebx, DWORD PTR [eax]
  0000f	0f b6 73 06	 movzx	 esi, BYTE PTR [ebx+6]
  00013	85 f6		 test	 esi, esi
  00015	7e 17		 jle	 SHORT $LN2@getupvalna
; Line 534
  00017	8b 7d 0c	 mov	 edi, DWORD PTR _o$[ebp]
  0001a	8d 53 10	 lea	 edx, DWORD PTR [ebx+16]
  0001d	8d 49 00	 npad	 3
$LL4@getupvalna:
; Line 537
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	39 38		 cmp	 DWORD PTR [eax], edi
  00024	74 0f		 je	 SHORT $LN12@getupvalna
; Line 536
  00026	41		 inc	 ecx
  00027	83 c2 04	 add	 edx, 4
  0002a	3b ce		 cmp	 ecx, esi
  0002c	7c f2		 jl	 SHORT $LL4@getupvalna
$LN2@getupvalna:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
; Line 542
  00030	33 c0		 xor	 eax, eax
  00032	5b		 pop	 ebx
; Line 543
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN12@getupvalna:
; Line 538
  00035	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00038	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0003b	8b 0c c8	 mov	 ecx, DWORD PTR [eax+ecx*8]
  0003e	85 c9		 test	 ecx, ecx
  00040	75 14		 jne	 SHORT $LN8@getupvalna
  00042	8b 45 10	 mov	 eax, DWORD PTR _name$[ebp]
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01OGPIMHDM@?$DP?$AA@
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	89 08		 mov	 DWORD PTR [eax], ecx
; Line 539
  0004f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07NAGMKCIK@upvalue?$AA@
; Line 543
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
; Line 538
$LN8@getupvalna:
  00056	8b 45 10	 mov	 eax, DWORD PTR _name$[ebp]
  00059	83 c1 10	 add	 ecx, 16			; 00000010H
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	89 08		 mov	 DWORD PTR [eax], ecx
; Line 539
  00061	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07NAGMKCIK@upvalue?$AA@
; Line 543
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_getupvalname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _isinstack
_TEXT	SEGMENT
_ci$ = 8						; size = 4
_o$ = 12						; size = 4
_isinstack PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 521
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 522
  00003	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _o$[ebp]
  00009	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0000c	2b ca		 sub	 ecx, edx
  0000e	c1 f9 04	 sar	 ecx, 4
; Line 523
  00011	85 c9		 test	 ecx, ecx
  00013	78 1d		 js	 SHORT $LN3@isinstack
  00015	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00018	2b c2		 sub	 eax, edx
  0001a	c1 f8 04	 sar	 eax, 4
  0001d	3b c8		 cmp	 ecx, eax
  0001f	7d 11		 jge	 SHORT $LN3@isinstack
  00021	c1 e1 04	 shl	 ecx, 4
  00024	03 ca		 add	 ecx, edx
  00026	3b 4d 0c	 cmp	 ecx, DWORD PTR _o$[ebp]
  00029	75 07		 jne	 SHORT $LN3@isinstack
  0002b	b8 01 00 00 00	 mov	 eax, 1
; Line 524
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN3@isinstack:
; Line 523
  00032	33 c0		 xor	 eax, eax
; Line 524
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_isinstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _findsetreg
_TEXT	SEGMENT
_jmptarget$1$ = -8					; size = 4
tv261 = -4						; size = 4
_p$ = 8							; size = 4
_lastpc$ = 12						; size = 4
_reg$ = 16						; size = 4
_findsetreg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 368
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; Line 372
  00006	33 c9		 xor	 ecx, ecx
  00008	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _jmptarget$1$[ebp], 0
  0000f	83 ca ff	 or	 edx, -1
  00012	39 4d 0c	 cmp	 DWORD PTR _lastpc$[ebp], ecx
  00015	0f 8e ce 00 00
	00		 jle	 $LN40@findsetreg
; Line 373
  0001b	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00024	89 45 fc	 mov	 DWORD PTR tv261[ebp], eax
$LL16@findsetreg:
  00027	8b 38		 mov	 edi, DWORD PTR [eax]
; Line 374
  00029	8b df		 mov	 ebx, edi
  0002b	83 e3 3f	 and	 ebx, 63			; 0000003fH
; Line 375
  0002e	8b f7		 mov	 esi, edi
  00030	c1 ee 06	 shr	 esi, 6
  00033	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
; Line 376
  00039	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  0003c	83 f8 25	 cmp	 eax, 37			; 00000025H
  0003f	8b 45 fc	 mov	 eax, DWORD PTR tv261[ebp]
  00042	77 70		 ja	 SHORT $LN2@findsetreg
  00044	0f b6 83 fc ff
	ff ff		 movzx	 eax, BYTE PTR $LN39@findsetreg[ebx-4]
  0004b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN54@findsetreg[eax*4]
$LN11@findsetreg:
; Line 379
  00052	8b 45 10	 mov	 eax, DWORD PTR _reg$[ebp]
  00055	3b f0		 cmp	 esi, eax
  00057	7f 78		 jg	 SHORT $LN47@findsetreg
; Line 381
  00059	8b 5d 0c	 mov	 ebx, DWORD PTR _lastpc$[ebp]
  0005c	c1 ef 17	 shr	 edi, 23			; 00000017H
  0005f	03 fe		 add	 edi, esi
  00061	3b c7		 cmp	 eax, edi
  00063	7f 0d		 jg	 SHORT $LN52@findsetreg
$LN51@findsetreg:
; Line 380
  00065	3b 4d f8	 cmp	 ecx, DWORD PTR _jmptarget$1$[ebp]
  00068	8b d1		 mov	 edx, ecx
  0006a	b8 ff ff ff ff	 mov	 eax, -1
  0006f	0f 4c d0	 cmovl	 edx, eax
$LN52@findsetreg:
; Line 381
  00072	8b 45 fc	 mov	 eax, DWORD PTR tv261[ebp]
  00075	eb 60		 jmp	 SHORT $LN15@findsetreg
$LN9@findsetreg:
; Line 386
  00077	8b 5d 0c	 mov	 ebx, DWORD PTR _lastpc$[ebp]
  0007a	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  0007d	39 45 10	 cmp	 DWORD PTR _reg$[ebp], eax
  00080	7c f0		 jl	 SHORT $LN52@findsetreg
  00082	eb e1		 jmp	 SHORT $LN51@findsetreg
$LN7@findsetreg:
; Line 392
  00084	8b 5d 0c	 mov	 ebx, DWORD PTR _lastpc$[ebp]
  00087	39 75 10	 cmp	 DWORD PTR _reg$[ebp], esi
  0008a	7c e6		 jl	 SHORT $LN52@findsetreg
  0008c	eb d7		 jmp	 SHORT $LN51@findsetreg
$LN5@findsetreg:
; Line 398
  0008e	8b 5d 0c	 mov	 ebx, DWORD PTR _lastpc$[ebp]
  00091	8d 81 02 00 fe
	ff		 lea	 eax, DWORD PTR [ecx-131070]
  00097	c1 ef 0e	 shr	 edi, 14			; 0000000eH
  0009a	03 c7		 add	 eax, edi
  0009c	3b c8		 cmp	 ecx, eax
  0009e	7d d2		 jge	 SHORT $LN52@findsetreg
  000a0	3b c3		 cmp	 eax, ebx
  000a2	7f ce		 jg	 SHORT $LN52@findsetreg
; Line 399
  000a4	3b 45 f8	 cmp	 eax, DWORD PTR _jmptarget$1$[ebp]
  000a7	7e c9		 jle	 SHORT $LN52@findsetreg
; Line 400
  000a9	89 45 f8	 mov	 DWORD PTR _jmptarget$1$[ebp], eax
  000ac	8b 45 fc	 mov	 eax, DWORD PTR tv261[ebp]
  000af	eb 26		 jmp	 SHORT $LN15@findsetreg
$LN48@findsetreg:
  000b1	8b 45 fc	 mov	 eax, DWORD PTR tv261[ebp]
$LN2@findsetreg:
; Line 405
  000b4	f6 83 00 00 00
	00 40		 test	 BYTE PTR _luaP_opmodes[ebx], 64 ; 00000040H
  000bb	74 17		 je	 SHORT $LN50@findsetreg
  000bd	39 75 10	 cmp	 DWORD PTR _reg$[ebp], esi
  000c0	75 12		 jne	 SHORT $LN50@findsetreg
; Line 406
  000c2	3b 4d f8	 cmp	 ecx, DWORD PTR _jmptarget$1$[ebp]
  000c5	8b d1		 mov	 edx, ecx
  000c7	bb ff ff ff ff	 mov	 ebx, -1
  000cc	0f 4c d3	 cmovl	 edx, ebx
  000cf	eb 03		 jmp	 SHORT $LN50@findsetreg
$LN47@findsetreg:
  000d1	8b 45 fc	 mov	 eax, DWORD PTR tv261[ebp]
$LN50@findsetreg:
  000d4	8b 5d 0c	 mov	 ebx, DWORD PTR _lastpc$[ebp]
$LN15@findsetreg:
; Line 372
  000d7	41		 inc	 ecx
  000d8	83 c0 04	 add	 eax, 4
  000db	89 45 fc	 mov	 DWORD PTR tv261[ebp], eax
  000de	3b cb		 cmp	 ecx, ebx
  000e0	0f 8c 41 ff ff
	ff		 jl	 $LL16@findsetreg
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
$LN40@findsetreg:
; Line 410
  000e9	8b c2		 mov	 eax, edx
; Line 411
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
  000ef	90		 npad	 1
$LN54@findsetreg:
  000f0	00 00 00 00	 DD	 $LN11@findsetreg
  000f4	00 00 00 00	 DD	 $LN5@findsetreg
  000f8	00 00 00 00	 DD	 $LN7@findsetreg
  000fc	00 00 00 00	 DD	 $LN9@findsetreg
  00100	00 00 00 00	 DD	 $LN48@findsetreg
$LN39@findsetreg:
  00104	00		 DB	 0
  00105	04		 DB	 4
  00106	04		 DB	 4
  00107	04		 DB	 4
  00108	04		 DB	 4
  00109	04		 DB	 4
  0010a	04		 DB	 4
  0010b	04		 DB	 4
  0010c	04		 DB	 4
  0010d	04		 DB	 4
  0010e	04		 DB	 4
  0010f	04		 DB	 4
  00110	04		 DB	 4
  00111	04		 DB	 4
  00112	04		 DB	 4
  00113	04		 DB	 4
  00114	04		 DB	 4
  00115	04		 DB	 4
  00116	04		 DB	 4
  00117	04		 DB	 4
  00118	04		 DB	 4
  00119	04		 DB	 4
  0011a	04		 DB	 4
  0011b	04		 DB	 4
  0011c	04		 DB	 4
  0011d	04		 DB	 4
  0011e	01		 DB	 1
  0011f	04		 DB	 4
  00120	04		 DB	 4
  00121	04		 DB	 4
  00122	04		 DB	 4
  00123	04		 DB	 4
  00124	02		 DB	 2
  00125	02		 DB	 2
  00126	04		 DB	 4
  00127	04		 DB	 4
  00128	04		 DB	 4
  00129	03		 DB	 3
_findsetreg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _filterpc
_TEXT	SEGMENT
_pc$ = 8						; size = 4
_jmptarget$ = 12					; size = 4
_filterpc PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 358
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 359
  00003	8b 45 08	 mov	 eax, DWORD PTR _pc$[ebp]
  00006	83 c9 ff	 or	 ecx, -1
  00009	3b 45 0c	 cmp	 eax, DWORD PTR _jmptarget$[ebp]
  0000c	0f 4c c1	 cmovl	 eax, ecx
; Line 362
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_filterpc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _kname
_TEXT	SEGMENT
_p$ = 8							; size = 4
_pc$ = 12						; size = 4
_c$ = 16						; size = 4
_name$ = 20						; size = 4
_kname	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 338
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 339
  00003	8b 4d 10	 mov	 ecx, DWORD PTR _c$[ebp]
  00006	56		 push	 esi
  00007	8b 75 14	 mov	 esi, DWORD PTR _name$[ebp]
  0000a	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  00010	74 24		 je	 SHORT $LN4@kname
; Line 340
  00012	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00015	81 e1 ff fe ff
	ff		 and	 ecx, -257		; fffffeffH
  0001b	c1 e1 04	 shl	 ecx, 4
  0001e	03 48 2c	 add	 ecx, DWORD PTR [eax+44]
; Line 341
  00021	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00024	24 0f		 and	 al, 15			; 0000000fH
  00026	3c 04		 cmp	 al, 4
  00028	75 25		 jne	 SHORT $LN1@kname
; Line 342
  0002a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0002c	8b c6		 mov	 eax, esi
  0002e	83 c1 10	 add	 ecx, 16			; 00000010H
  00031	5e		 pop	 esi
  00032	89 08		 mov	 DWORD PTR [eax], ecx
; Line 355
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN4@kname:
; Line 348
  00036	56		 push	 esi
  00037	51		 push	 ecx
  00038	ff 75 0c	 push	 DWORD PTR _pc$[ebp]
  0003b	ff 75 08	 push	 DWORD PTR _p$[ebp]
  0003e	e8 00 00 00 00	 call	 _getobjname
  00043	83 c4 10	 add	 esp, 16			; 00000010H
; Line 349
  00046	85 c0		 test	 eax, eax
  00048	74 05		 je	 SHORT $LN1@kname
  0004a	80 38 63	 cmp	 BYTE PTR [eax], 99	; 00000063H
  0004d	74 06		 je	 SHORT $LN5@kname
$LN1@kname:
; Line 354
  0004f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_C@_01OGPIMHDM@?$DP?$AA@
$LN5@kname:
  00055	5e		 pop	 esi
; Line 355
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_kname	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getobjname
_TEXT	SEGMENT
_p$ = 8							; size = 4
_lastpc$ = 12						; size = 4
_k$1$ = 16						; size = 4
_reg$ = 16						; size = 4
_name$ = 20						; size = 4
_getobjname PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 415
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 417
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _p$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _reg$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _lastpc$[ebp]
  0000f	57		 push	 edi
  00010	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00013	50		 push	 eax
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 _luaF_getlocalname
  0001a	8b 4d 14	 mov	 ecx, DWORD PTR _name$[ebp]
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	89 01		 mov	 DWORD PTR [ecx], eax
; Line 418
  00022	85 c0		 test	 eax, eax
  00024	75 65		 jne	 SHORT $LN23@getobjname
$LL21@getobjname:
; Line 421
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 _findsetreg
  0002e	8b f8		 mov	 edi, eax
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 422
  00033	83 ff ff	 cmp	 edi, -1
  00036	0f 84 50 01 00
	00		 je	 $LN1@getobjname
; Line 423
  0003c	8b 4b 30	 mov	 ecx, DWORD PTR [ebx+48]
  0003f	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
; Line 424
  00042	8b d1		 mov	 edx, ecx
  00044	83 e2 3f	 and	 edx, 63			; 0000003fH
; Line 425
  00047	83 fa 0c	 cmp	 edx, 12			; 0000000cH
  0004a	0f 87 3c 01 00
	00		 ja	 $LN1@getobjname
  00050	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN27@getobjname[edx]
  00057	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN34@getobjname[eax*4]
$LN8@getobjname:
; Line 427
  0005e	8b f1		 mov	 esi, ecx
; Line 428
  00060	c1 e9 06	 shr	 ecx, 6
  00063	c1 ee 17	 shr	 esi, 23			; 00000017H
  00066	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0006c	3b f1		 cmp	 esi, ecx
  0006e	0f 8d 18 01 00
	00		 jge	 $LN1@getobjname
; Line 417
  00074	57		 push	 edi
  00075	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00078	50		 push	 eax
  00079	53		 push	 ebx
  0007a	e8 00 00 00 00	 call	 _luaF_getlocalname
  0007f	8b 4d 14	 mov	 ecx, DWORD PTR _name$[ebp]
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH
  00085	89 01		 mov	 DWORD PTR [ecx], eax
; Line 418
  00087	85 c0		 test	 eax, eax
  00089	74 9b		 je	 SHORT $LL21@getobjname
$LN23@getobjname:
; Line 419
  0008b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05IDKHKMLA@local?$AA@
$LN13@getobjname:
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
; Line 465
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
$LN6@getobjname:
; Line 434
  00095	8b c1		 mov	 eax, ecx
; Line 435
  00097	c1 e9 17	 shr	 ecx, 23			; 00000017H
  0009a	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  0009d	25 ff 01 00 00	 and	 eax, 511		; 000001ffH
  000a2	89 45 10	 mov	 DWORD PTR _k$1$[ebp], eax
; Line 438
  000a5	83 fa 07	 cmp	 edx, 7
  000a8	75 10		 jne	 SHORT $LN15@getobjname
  000aa	57		 push	 edi
  000ab	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000ae	50		 push	 eax
  000af	53		 push	 ebx
  000b0	e8 00 00 00 00	 call	 _luaF_getlocalname
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b8	eb 0a		 jmp	 SHORT $LN32@getobjname
$LN15@getobjname:
  000ba	51		 push	 ecx
  000bb	53		 push	 ebx
  000bc	e8 00 00 00 00	 call	 _upvalname
  000c1	83 c4 08	 add	 esp, 8
$LN32@getobjname:
; Line 439
  000c4	ff 75 14	 push	 DWORD PTR _name$[ebp]
  000c7	8b f0		 mov	 esi, eax
  000c9	ff 75 10	 push	 DWORD PTR _k$1$[ebp]
  000cc	57		 push	 edi
  000cd	53		 push	 ebx
  000ce	e8 00 00 00 00	 call	 _kname
  000d3	83 c4 10	 add	 esp, 16			; 00000010H
; Line 440
  000d6	85 f6		 test	 esi, esi
  000d8	74 34		 je	 SHORT $LN17@getobjname
  000da	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LJLBKCOP@_ENV?$AA@
  000df	90		 npad	 1
$LL28@getobjname:
  000e0	8a 0e		 mov	 cl, BYTE PTR [esi]
  000e2	3a 08		 cmp	 cl, BYTE PTR [eax]
  000e4	75 1a		 jne	 SHORT $LN29@getobjname
  000e6	84 c9		 test	 cl, cl
  000e8	74 12		 je	 SHORT $LN30@getobjname
  000ea	8a 4e 01	 mov	 cl, BYTE PTR [esi+1]
  000ed	3a 48 01	 cmp	 cl, BYTE PTR [eax+1]
  000f0	75 0e		 jne	 SHORT $LN29@getobjname
  000f2	83 c6 02	 add	 esi, 2
  000f5	83 c0 02	 add	 eax, 2
  000f8	84 c9		 test	 cl, cl
  000fa	75 e4		 jne	 SHORT $LL28@getobjname
$LN30@getobjname:
  000fc	33 c0		 xor	 eax, eax
  000fe	eb 05		 jmp	 SHORT $LN31@getobjname
$LN29@getobjname:
  00100	1b c0		 sbb	 eax, eax
  00102	83 c8 01	 or	 eax, 1
$LN31@getobjname:
  00105	85 c0		 test	 eax, eax
  00107	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06FJKEMHGD@global?$AA@
  0010c	74 82		 je	 SHORT $LN13@getobjname
$LN17@getobjname:
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05EIBGDMPB@field?$AA@
  00115	5b		 pop	 ebx
; Line 465
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
$LN5@getobjname:
; Line 443
  00118	c1 e9 17	 shr	 ecx, 23			; 00000017H
  0011b	51		 push	 ecx
  0011c	53		 push	 ebx
  0011d	e8 00 00 00 00	 call	 _upvalname
  00122	8b 4d 14	 mov	 ecx, DWORD PTR _name$[ebp]
  00125	83 c4 08	 add	 esp, 8
  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	89 01		 mov	 DWORD PTR [ecx], eax
; Line 444
  0012c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07NAGMKCIK@upvalue?$AA@
  00131	5b		 pop	 ebx
; Line 465
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
$LN4@getobjname:
; Line 449
  00134	83 fa 01	 cmp	 edx, 1
  00137	75 05		 jne	 SHORT $LN19@getobjname
  00139	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  0013c	eb 0a		 jmp	 SHORT $LN20@getobjname
$LN19@getobjname:
  0013e	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  00141	8b 4c b8 04	 mov	 ecx, DWORD PTR [eax+edi*4+4]
  00145	c1 e9 06	 shr	 ecx, 6
$LN20@getobjname:
; Line 450
  00148	c1 e1 04	 shl	 ecx, 4
  0014b	03 4b 2c	 add	 ecx, DWORD PTR [ebx+44]
  0014e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00151	24 0f		 and	 al, 15			; 0000000fH
  00153	3c 04		 cmp	 al, 4
  00155	75 35		 jne	 SHORT $LN1@getobjname
; Line 451
  00157	8b 01		 mov	 eax, DWORD PTR [ecx]
  00159	8b 4d 14	 mov	 ecx, DWORD PTR _name$[ebp]
  0015c	83 c0 10	 add	 eax, 16			; 00000010H
  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	5b		 pop	 ebx
  00162	89 01		 mov	 DWORD PTR [ecx], eax
; Line 452
  00164	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08KFDOCAEB@constant?$AA@
; Line 465
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN2@getobjname:
; Line 458
  0016b	ff 75 14	 push	 DWORD PTR _name$[ebp]
  0016e	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  00171	81 e1 ff 01 00
	00		 and	 ecx, 511		; 000001ffH
  00177	51		 push	 ecx
  00178	57		 push	 edi
  00179	53		 push	 ebx
  0017a	e8 00 00 00 00	 call	 _kname
  0017f	83 c4 10	 add	 esp, 16			; 00000010H
; Line 459
  00182	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06GABBCIBA@method?$AA@
  00187	5f		 pop	 edi
  00188	5e		 pop	 esi
  00189	5b		 pop	 ebx
; Line 465
  0018a	5d		 pop	 ebp
  0018b	c3		 ret	 0
$LN1@getobjname:
  0018c	5f		 pop	 edi
  0018d	5e		 pop	 esi
; Line 464
  0018e	33 c0		 xor	 eax, eax
  00190	5b		 pop	 ebx
; Line 465
  00191	5d		 pop	 ebp
  00192	c3		 ret	 0
  00193	90		 npad	 1
$LN34@getobjname:
  00194	00 00 00 00	 DD	 $LN8@getobjname
  00198	00 00 00 00	 DD	 $LN4@getobjname
  0019c	00 00 00 00	 DD	 $LN5@getobjname
  001a0	00 00 00 00	 DD	 $LN6@getobjname
  001a4	00 00 00 00	 DD	 $LN2@getobjname
  001a8	00 00 00 00	 DD	 $LN1@getobjname
$LN27@getobjname:
  001ac	00		 DB	 0
  001ad	01		 DB	 1
  001ae	01		 DB	 1
  001af	05		 DB	 5
  001b0	05		 DB	 5
  001b1	02		 DB	 2
  001b2	03		 DB	 3
  001b3	03		 DB	 3
  001b4	05		 DB	 5
  001b5	05		 DB	 5
  001b6	05		 DB	 5
  001b7	05		 DB	 5
  001b8	04		 DB	 4
_getobjname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _auxgetinfo
_TEXT	SEGMENT
_status$1$ = -4						; size = 4
_L$ = 8							; size = 4
_what$ = 12						; size = 4
_ar$ = 16						; size = 4
_f$ = 20						; size = 4
_ci$ = 24						; size = 4
_auxgetinfo PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 242
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
; Line 244
  00005	8b 75 0c	 mov	 esi, DWORD PTR _what$[ebp]
  00008	b9 01 00 00 00	 mov	 ecx, 1
  0000d	89 4d fc	 mov	 DWORD PTR _status$1$[ebp], ecx
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	84 c0		 test	 al, al
  00014	0f 84 0e 01 00
	00		 je	 $LN32@auxgetinfo
  0001a	53		 push	 ebx
  0001b	8b 5d 18	 mov	 ebx, DWORD PTR _ci$[ebp]
  0001e	57		 push	 edi
  0001f	8b 7d 10	 mov	 edi, DWORD PTR _ar$[ebp]
$LL18@auxgetinfo:
; Line 245
  00022	0f be c0	 movsx	 eax, al
  00025	83 c0 b4	 add	 eax, -76		; ffffffb4H
  00028	83 f8 29	 cmp	 eax, 41			; 00000029H
  0002b	0f 87 e4 00 00
	00		 ja	 $LN1@auxgetinfo
  00031	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN31@auxgetinfo[eax]
  00038	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN34@auxgetinfo[eax*4]
$LN13@auxgetinfo:
; Line 247
  0003f	ff 75 14	 push	 DWORD PTR _f$[ebp]
  00042	57		 push	 edi
  00043	e8 00 00 00 00	 call	 _funcinfo
; Line 248
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _status$1$[ebp]
  0004b	83 c4 08	 add	 esp, 8
  0004e	e9 c7 00 00 00	 jmp	 $LN17@auxgetinfo
$LN12@auxgetinfo:
; Line 251
  00053	85 db		 test	 ebx, ebx
  00055	74 1a		 je	 SHORT $LN21@auxgetinfo
  00057	f6 43 22 02	 test	 BYTE PTR [ebx+34], 2
  0005b	74 14		 je	 SHORT $LN21@auxgetinfo
  0005d	53		 push	 ebx
  0005e	e8 00 00 00 00	 call	 _currentline
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _status$1$[ebp]
  00066	83 c4 04	 add	 esp, 4
  00069	89 47 14	 mov	 DWORD PTR [edi+20], eax
; Line 252
  0006c	e9 a9 00 00 00	 jmp	 $LN17@auxgetinfo
$LN21@auxgetinfo:
; Line 251
  00071	83 c8 ff	 or	 eax, -1
  00074	89 47 14	 mov	 DWORD PTR [edi+20], eax
; Line 252
  00077	e9 9e 00 00 00	 jmp	 $LN17@auxgetinfo
$LN11@auxgetinfo:
; Line 255
  0007c	8b 55 14	 mov	 edx, DWORD PTR _f$[ebp]
  0007f	85 d2		 test	 edx, edx
  00081	75 04		 jne	 SHORT $LN23@auxgetinfo
  00083	33 c0		 xor	 eax, eax
  00085	eb 04		 jmp	 SHORT $LN24@auxgetinfo
$LN23@auxgetinfo:
  00087	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
$LN24@auxgetinfo:
  0008b	88 47 20	 mov	 BYTE PTR [edi+32], al
; Line 256
  0008e	85 d2		 test	 edx, edx
  00090	74 1c		 je	 SHORT $LN9@auxgetinfo
  00092	80 7a 04 26	 cmp	 BYTE PTR [edx+4], 38	; 00000026H
  00096	74 16		 je	 SHORT $LN9@auxgetinfo
; Line 261
  00098	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0009b	0f b6 40 07	 movzx	 eax, BYTE PTR [eax+7]
  0009f	88 47 22	 mov	 BYTE PTR [edi+34], al
; Line 262
  000a2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000a5	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  000a9	88 47 21	 mov	 BYTE PTR [edi+33], al
  000ac	eb 6c		 jmp	 SHORT $LN17@auxgetinfo
$LN9@auxgetinfo:
; Line 258
  000ae	66 c7 47 21 00
	01		 mov	 WORD PTR [edi+33], 256	; 00000100H
; Line 264
  000b4	eb 64		 jmp	 SHORT $LN17@auxgetinfo
$LN7@auxgetinfo:
; Line 267
  000b6	85 db		 test	 ebx, ebx
  000b8	74 0c		 je	 SHORT $LN25@auxgetinfo
  000ba	0f b6 43 22	 movzx	 eax, BYTE PTR [ebx+34]
  000be	83 e0 20	 and	 eax, 32			; 00000020H
  000c1	88 47 23	 mov	 BYTE PTR [edi+35], al
; Line 268
  000c4	eb 54		 jmp	 SHORT $LN17@auxgetinfo
$LN25@auxgetinfo:
; Line 267
  000c6	33 c0		 xor	 eax, eax
  000c8	88 47 23	 mov	 BYTE PTR [edi+35], al
; Line 268
  000cb	eb 4d		 jmp	 SHORT $LN17@auxgetinfo
$LN6@auxgetinfo:
; Line 272
  000cd	85 db		 test	 ebx, ebx
  000cf	74 27		 je	 SHORT $LN5@auxgetinfo
  000d1	f6 43 22 20	 test	 BYTE PTR [ebx+34], 32	; 00000020H
  000d5	75 21		 jne	 SHORT $LN5@auxgetinfo
  000d7	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000da	f6 42 22 02	 test	 BYTE PTR [edx+34], 2
  000de	74 18		 je	 SHORT $LN5@auxgetinfo
; Line 273
  000e0	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e3	50		 push	 eax
  000e4	52		 push	 edx
  000e5	ff 75 08	 push	 DWORD PTR _L$[ebp]
  000e8	e8 00 00 00 00	 call	 _getfuncname
; Line 274
  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _status$1$[ebp]
  000f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f3	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000f6	eb 07		 jmp	 SHORT $LN4@auxgetinfo
$LN5@auxgetinfo:
; Line 275
  000f8	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@auxgetinfo:
; Line 276
  000ff	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  00103	75 15		 jne	 SHORT $LN17@auxgetinfo
; Line 277
  00105	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_C@_00CNPNBAHC@?$AA@
; Line 278
  0010c	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; Line 280
  00113	eb 05		 jmp	 SHORT $LN17@auxgetinfo
$LN1@auxgetinfo:
; Line 285
  00115	33 c9		 xor	 ecx, ecx
  00117	89 4d fc	 mov	 DWORD PTR _status$1$[ebp], ecx
$LN17@auxgetinfo:
; Line 244
  0011a	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  0011d	46		 inc	 esi
  0011e	84 c0		 test	 al, al
  00120	0f 85 fc fe ff
	ff		 jne	 $LL18@auxgetinfo
  00126	5f		 pop	 edi
  00127	5b		 pop	 ebx
$LN32@auxgetinfo:
; Line 288
  00128	8b c1		 mov	 eax, ecx
  0012a	5e		 pop	 esi
; Line 289
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c3		 ret	 0
  0012f	90		 npad	 1
$LN34@auxgetinfo:
  00130	00 00 00 00	 DD	 $LN17@auxgetinfo
  00134	00 00 00 00	 DD	 $LN13@auxgetinfo
  00138	00 00 00 00	 DD	 $LN12@auxgetinfo
  0013c	00 00 00 00	 DD	 $LN6@auxgetinfo
  00140	00 00 00 00	 DD	 $LN7@auxgetinfo
  00144	00 00 00 00	 DD	 $LN11@auxgetinfo
  00148	00 00 00 00	 DD	 $LN1@auxgetinfo
$LN31@auxgetinfo:
  0014c	00		 DB	 0
  0014d	06		 DB	 6
  0014e	06		 DB	 6
  0014f	06		 DB	 6
  00150	06		 DB	 6
  00151	06		 DB	 6
  00152	06		 DB	 6
  00153	01		 DB	 1
  00154	06		 DB	 6
  00155	06		 DB	 6
  00156	06		 DB	 6
  00157	06		 DB	 6
  00158	06		 DB	 6
  00159	06		 DB	 6
  0015a	06		 DB	 6
  0015b	06		 DB	 6
  0015c	06		 DB	 6
  0015d	06		 DB	 6
  0015e	06		 DB	 6
  0015f	06		 DB	 6
  00160	06		 DB	 6
  00161	06		 DB	 6
  00162	06		 DB	 6
  00163	06		 DB	 6
  00164	06		 DB	 6
  00165	06		 DB	 6
  00166	00		 DB	 0
  00167	06		 DB	 6
  00168	06		 DB	 6
  00169	06		 DB	 6
  0016a	06		 DB	 6
  0016b	06		 DB	 6
  0016c	02		 DB	 2
  0016d	06		 DB	 6
  0016e	03		 DB	 3
  0016f	06		 DB	 6
  00170	06		 DB	 6
  00171	06		 DB	 6
  00172	06		 DB	 6
  00173	06		 DB	 6
  00174	04		 DB	 4
  00175	05		 DB	 5
_auxgetinfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _collectvalidlines
_TEXT	SEGMENT
_v$1 = -20						; size = 16
_t$1$ = -4						; size = 4
_L$ = 8							; size = 4
_lineinfo$1$ = 12					; size = 4
_f$ = 12						; size = 4
_collectvalidlines PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 222
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	57		 push	 edi
; Line 223
  00007	8b 7d 0c	 mov	 edi, DWORD PTR _f$[ebp]
  0000a	85 ff		 test	 edi, edi
  0000c	74 71		 je	 SHORT $LN5@collectval
  0000e	80 7f 04 26	 cmp	 BYTE PTR [edi+4], 38	; 00000026H
  00012	74 6b		 je	 SHORT $LN5@collectval
; Line 230
  00014	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00017	53		 push	 ebx
; Line 231
  00018	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  0001b	56		 push	 esi
  0001c	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0001f	53		 push	 ebx
  00020	89 45 0c	 mov	 DWORD PTR _lineinfo$1$[ebp], eax
  00023	e8 00 00 00 00	 call	 _luaH_new
; Line 232
  00028	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
; Line 235
  0002b	33 f6		 xor	 esi, esi
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 fc	 mov	 DWORD PTR _t$1$[ebp], eax
  00033	89 01		 mov	 DWORD PTR [ecx], eax
  00035	c7 41 08 45 00
	00 00		 mov	 DWORD PTR [ecx+8], 69	; 00000045H
  0003c	83 43 0c 10	 add	 DWORD PTR [ebx+12], 16	; 00000010H
  00040	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00043	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _v$1[ebp], 1
  0004a	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _v$1[ebp+8], 1
  00051	39 71 18	 cmp	 DWORD PTR [ecx+24], esi
  00054	7e 22		 jle	 SHORT $LN13@collectval
$LL3@collectval:
; Line 236
  00056	8d 45 ec	 lea	 eax, DWORD PTR _v$1[ebp]
  00059	50		 push	 eax
  0005a	8b 45 0c	 mov	 eax, DWORD PTR _lineinfo$1$[ebp]
  0005d	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00060	99		 cdq
  00061	52		 push	 edx
  00062	50		 push	 eax
  00063	ff 75 fc	 push	 DWORD PTR _t$1$[ebp]
  00066	53		 push	 ebx
  00067	e8 00 00 00 00	 call	 _luaH_setint
  0006c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0006f	46		 inc	 esi
  00070	83 c4 14	 add	 esp, 20			; 00000014H
  00073	3b 70 18	 cmp	 esi, DWORD PTR [eax+24]
  00076	7c de		 jl	 SHORT $LL3@collectval
$LN13@collectval:
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	5f		 pop	 edi
; Line 238
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
$LN5@collectval:
; Line 224
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _L$[ebp]
  00082	5f		 pop	 edi
  00083	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00086	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
; Line 225
  0008d	83 41 0c 10	 add	 DWORD PTR [ecx+12], 16	; 00000010H
; Line 238
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
_collectvalidlines ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _funcinfo
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_cl$ = 12						; size = 4
_funcinfo PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 204
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 205
  00003	8b 45 0c	 mov	 eax, DWORD PTR _cl$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 53		 je	 SHORT $LN2@funcinfo
  0000a	80 78 04 26	 cmp	 BYTE PTR [eax+4], 38	; 00000026H
  0000e	74 4d		 je	 SHORT $LN2@funcinfo
; Line 212
  00010	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
; Line 213
  00013	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00016	85 c0		 test	 eax, eax
  00018	74 05		 je	 SHORT $LN6@funcinfo
  0001a	83 c0 10	 add	 eax, 16			; 00000010H
  0001d	eb 05		 jmp	 SHORT $LN7@funcinfo
$LN6@funcinfo:
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02HENDHKBC@?$DN?$DP?$AA@
$LN7@funcinfo:
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; Line 218
  00027	6a 3c		 push	 60			; 0000003cH
  00029	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0002c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0002f	ff 71 10	 push	 DWORD PTR [ecx+16]
  00032	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00035	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00038	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_03CBKFDHDL@Lua?$AA@
  0003d	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00041	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00044	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04GHJNJNPO@main?$AA@
  00049	0f 45 c2	 cmovne	 eax, edx
  0004c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0004f	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _luaO_chunkid
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 219
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN2@funcinfo:
; Line 206
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; Line 218
  00060	6a 3c		 push	 60			; 0000003cH
  00062	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET ??_C@_04BKJOMPG@?$DN?$FLC?$FN?$AA@
  00069	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  0006c	ff 71 10	 push	 DWORD PTR [ecx+16]
  0006f	c7 41 18 ff ff
	ff ff		 mov	 DWORD PTR [ecx+24], -1
  00076	50		 push	 eax
  00077	c7 41 1c ff ff
	ff ff		 mov	 DWORD PTR [ecx+28], -1
  0007e	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], OFFSET ??_C@_01GFHCPBMG@C?$AA@
  00085	e8 00 00 00 00	 call	 _luaO_chunkid
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 219
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_funcinfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _findlocal
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ci$ = 12						; size = 4
_n$ = 16						; size = 4
_pos$ = 20						; size = 4
_findlocal PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 139
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 142
  00005	8b 75 10	 mov	 esi, DWORD PTR _n$[ebp]
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _ci$[ebp]
  0000c	f6 47 22 02	 test	 BYTE PTR [edi+34], 2
  00010	74 5c		 je	 SHORT $LN7@findlocal
; Line 143
  00012	85 f6		 test	 esi, esi
  00014	79 31		 jns	 SHORT $LN6@findlocal
; Line 144
  00016	8b 17		 mov	 edx, DWORD PTR [edi]
  00018	f7 de		 neg	 esi
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0001f	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00023	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00026	2b c2		 sub	 eax, edx
  00028	c1 f8 04	 sar	 eax, 4
  0002b	2b c1		 sub	 eax, ecx
  0002d	3b f0		 cmp	 esi, eax
  0002f	7d 7a		 jge	 SHORT $LN2@findlocal
  00031	8b 45 14	 mov	 eax, DWORD PTR _pos$[ebp]
  00034	03 ce		 add	 ecx, esi
  00036	c1 e1 04	 shl	 ecx, 4
  00039	5f		 pop	 edi
  0003a	03 ca		 add	 ecx, edx
  0003c	5e		 pop	 esi
  0003d	89 08		 mov	 DWORD PTR [eax], ecx
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09DKIONLLI@?$CI?$CKvararg?$CJ?$AA@
  00044	5b		 pop	 ebx
; Line 161
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN6@findlocal:
; Line 147
  00047	8b 07		 mov	 eax, DWORD PTR [edi]
  00049	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  0004c	8b 00		 mov	 eax, DWORD PTR [eax]
  0004e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00051	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00054	2b 41 30	 sub	 eax, DWORD PTR [ecx+48]
  00057	c1 f8 02	 sar	 eax, 2
  0005a	48		 dec	 eax
  0005b	50		 push	 eax
  0005c	56		 push	 esi
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 _luaF_getlocalname
  00063	8b d0		 mov	 edx, eax
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 152
  00068	85 d2		 test	 edx, edx
  0006a	75 2b		 jne	 SHORT $LN1@findlocal
  0006c	eb 05		 jmp	 SHORT $LN18@findlocal
$LN7@findlocal:
; Line 151
  0006e	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00070	83 c3 10	 add	 ebx, 16			; 00000010H
$LN18@findlocal:
; Line 153
  00073	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  00076	3b 78 14	 cmp	 edi, DWORD PTR [eax+20]
  00079	75 05		 jne	 SHORT $LN10@findlocal
  0007b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0007e	eb 05		 jmp	 SHORT $LN11@findlocal
$LN10@findlocal:
  00080	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00083	8b 00		 mov	 eax, DWORD PTR [eax]
$LN11@findlocal:
; Line 154
  00085	2b c3		 sub	 eax, ebx
  00087	c1 f8 04	 sar	 eax, 4
  0008a	3b c6		 cmp	 eax, esi
  0008c	7c 1d		 jl	 SHORT $LN2@findlocal
  0008e	85 f6		 test	 esi, esi
  00090	7e 19		 jle	 SHORT $LN2@findlocal
; Line 155
  00092	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0N@NCKPGBEC@?$CI?$CKtemporary?$CJ?$AA@
$LN1@findlocal:
; Line 159
  00097	8b 45 14	 mov	 eax, DWORD PTR _pos$[ebp]
  0009a	c1 e6 04	 shl	 esi, 4
  0009d	5f		 pop	 edi
  0009e	8d 4e f0	 lea	 ecx, DWORD PTR [esi-16]
  000a1	03 cb		 add	 ecx, ebx
  000a3	5e		 pop	 esi
  000a4	89 08		 mov	 DWORD PTR [eax], ecx
; Line 160
  000a6	8b c2		 mov	 eax, edx
  000a8	5b		 pop	 ebx
; Line 161
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
$LN2@findlocal:
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
; Line 157
  000ad	33 c0		 xor	 eax, eax
  000af	5b		 pop	 ebx
; Line 161
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_findlocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _findvararg
_TEXT	SEGMENT
_ci$ = 8						; size = 4
_n$ = 12						; size = 4
_pos$ = 16						; size = 4
_findvararg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 127
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 128
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00006	56		 push	 esi
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000e	0f b6 70 06	 movzx	 esi, BYTE PTR [eax+6]
; Line 129
  00012	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00018	2b c2		 sub	 eax, edx
  0001a	c1 f8 04	 sar	 eax, 4
  0001d	2b c6		 sub	 eax, esi
  0001f	3b c8		 cmp	 ecx, eax
  00021	7c 05		 jl	 SHORT $LN2@findvararg
; Line 130
  00023	33 c0		 xor	 eax, eax
  00025	5e		 pop	 esi
; Line 135
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN2@findvararg:
; Line 132
  00028	8b 45 10	 mov	 eax, DWORD PTR _pos$[ebp]
  0002b	03 ce		 add	 ecx, esi
  0002d	c1 e1 04	 shl	 ecx, 4
  00030	03 ca		 add	 ecx, edx
  00032	5e		 pop	 esi
  00033	89 08		 mov	 DWORD PTR [eax], ecx
; Line 133
  00035	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09DKIONLLI@?$CI?$CKvararg?$CJ?$AA@
; Line 135
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
_findvararg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _upvalname
_TEXT	SEGMENT
_p$ = 8							; size = 4
_uv$ = 12						; size = 4
_upvalname PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 120
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 121
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00009	8b 45 0c	 mov	 eax, DWORD PTR _uv$[ebp]
  0000c	8b 04 c1	 mov	 eax, DWORD PTR [ecx+eax*8]
; Line 122
  0000f	85 c0		 test	 eax, eax
  00011	75 07		 jne	 SHORT $LN2@upvalname
  00013	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_01OGPIMHDM@?$DP?$AA@
; Line 124
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN2@upvalname:
; Line 123
  0001a	83 c0 10	 add	 eax, 16			; 00000010H
; Line 124
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
_upvalname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _swapextra
_TEXT	SEGMENT
_L$ = 8							; size = 4
_swapextra PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 61
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 62
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	80 7e 08 01	 cmp	 BYTE PTR [esi+8], 1
  0000b	75 13		 jne	 SHORT $LN1@swapextra
; Line 63
  0000d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
; Line 65
  00010	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00013	03 42 1c	 add	 eax, DWORD PTR [edx+28]
  00016	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00018	89 02		 mov	 DWORD PTR [edx], eax
; Line 66
  0001a	2b 4e 20	 sub	 ecx, DWORD PTR [esi+32]
  0001d	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN1@swapextra:
  00020	5e		 pop	 esi
; Line 68
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_swapextra ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _currentline
_TEXT	SEGMENT
_ci$ = 8						; size = 4
_currentline PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 50
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 51
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00006	56		 push	 esi
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0000e	8b 72 38	 mov	 esi, DWORD PTR [edx+56]
  00011	85 f6		 test	 esi, esi
  00013	74 10		 je	 SHORT $LN3@currentlin
  00015	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00018	2b 42 30	 sub	 eax, DWORD PTR [edx+48]
  0001b	c1 f8 02	 sar	 eax, 2
  0001e	8b 44 86 fc	 mov	 eax, DWORD PTR [esi+eax*4-4]
  00022	5e		 pop	 esi
; Line 52
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN3@currentlin:
; Line 51
  00025	83 c8 ff	 or	 eax, -1
  00028	5e		 pop	 esi
; Line 52
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_currentline ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _currentpc
_TEXT	SEGMENT
_ci$ = 8						; size = 4
_currentpc PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 44
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 46
  00003	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
  0000a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0000d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00010	2b 41 30	 sub	 eax, DWORD PTR [ecx+48]
  00013	c1 f8 02	 sar	 eax, 2
  00016	48		 dec	 eax
; Line 47
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
_currentpc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getfuncname
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ci$ = 12						; size = 4
_name$ = 16						; size = 4
_getfuncname PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 468
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 470
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _ci$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]
; Line 471
  0000d	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00015	2b 7b 30	 sub	 edi, DWORD PTR [ebx+48]
; Line 472
  00018	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	4f		 dec	 edi
; Line 473
  0001f	f6 41 22 04	 test	 BYTE PTR [ecx+34], 4
  00023	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
  00026	74 13		 je	 SHORT $LN16@getfuncnam
; Line 474
  00028	8b 45 10	 mov	 eax, DWORD PTR _name$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_C@_01OGPIMHDM@?$DP?$AA@
; Line 475
  00034	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04DGFIONEK@hook?$AA@
; Line 510
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN16@getfuncnam:
; Line 477
  0003b	8b ce		 mov	 ecx, esi
  0003d	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00040	8d 41 fa	 lea	 eax, DWORD PTR [ecx-6]
  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	77 7c		 ja	 SHORT $LN1@getfuncnam
  00048	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN21@getfuncnam[eax]
  0004f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@getfuncnam[eax*4]
$LN13@getfuncnam:
; Line 480
  00056	ff 75 10	 push	 DWORD PTR _name$[ebp]
  00059	c1 ee 06	 shr	 esi, 6
  0005c	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00062	56		 push	 esi
  00063	57		 push	 edi
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 _getobjname
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
; Line 510
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
$LN12@getfuncnam:
; Line 482
  00072	8b 45 10	 mov	 eax, DWORD PTR _name$[ebp]
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_C@_0N@LEHLDOCH@for?5iterator?$AA@
; Line 483
  0007e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@LEHLDOCH@for?5iterator?$AA@
; Line 510
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN11@getfuncnam:
; Line 487
  00085	33 d2		 xor	 edx, edx
; Line 488
  00087	eb 3b		 jmp	 SHORT $LN1@getfuncnam
$LN10@getfuncnam:
; Line 490
  00089	ba 01 00 00 00	 mov	 edx, 1
; Line 491
  0008e	eb 34		 jmp	 SHORT $LN1@getfuncnam
$LN9@getfuncnam:
; Line 496
  00090	8d 51 f9	 lea	 edx, DWORD PTR [ecx-7]
; Line 497
  00093	eb 2f		 jmp	 SHORT $LN1@getfuncnam
$LN8@getfuncnam:
; Line 499
  00095	ba 12 00 00 00	 mov	 edx, 18			; 00000012H
  0009a	eb 28		 jmp	 SHORT $LN1@getfuncnam
$LN7@getfuncnam:
; Line 500
  0009c	ba 13 00 00 00	 mov	 edx, 19			; 00000013H
  000a1	eb 21		 jmp	 SHORT $LN1@getfuncnam
$LN6@getfuncnam:
; Line 501
  000a3	ba 04 00 00 00	 mov	 edx, 4
  000a8	eb 1a		 jmp	 SHORT $LN1@getfuncnam
$LN5@getfuncnam:
; Line 502
  000aa	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  000af	eb 13		 jmp	 SHORT $LN1@getfuncnam
$LN4@getfuncnam:
; Line 503
  000b1	ba 05 00 00 00	 mov	 edx, 5
  000b6	eb 0c		 jmp	 SHORT $LN1@getfuncnam
$LN3@getfuncnam:
; Line 504
  000b8	ba 14 00 00 00	 mov	 edx, 20			; 00000014H
  000bd	eb 05		 jmp	 SHORT $LN1@getfuncnam
$LN2@getfuncnam:
; Line 505
  000bf	ba 15 00 00 00	 mov	 edx, 21			; 00000015H
$LN1@getfuncnam:
; Line 508
  000c4	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000cd	8b 8c 90 88 00
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+136]
  000d4	8b 45 10	 mov	 eax, DWORD PTR _name$[ebp]
  000d7	83 c1 10	 add	 ecx, 16			; 00000010H
  000da	89 08		 mov	 DWORD PTR [eax], ecx
; Line 509
  000dc	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@ILHKGAHF@metamethod?$AA@
; Line 510
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
  000e3	90		 npad	 1
$LN23@getfuncnam:
  000e4	00 00 00 00	 DD	 $LN11@getfuncnam
  000e8	00 00 00 00	 DD	 $LN10@getfuncnam
  000ec	00 00 00 00	 DD	 $LN9@getfuncnam
  000f0	00 00 00 00	 DD	 $LN8@getfuncnam
  000f4	00 00 00 00	 DD	 $LN7@getfuncnam
  000f8	00 00 00 00	 DD	 $LN6@getfuncnam
  000fc	00 00 00 00	 DD	 $LN5@getfuncnam
  00100	00 00 00 00	 DD	 $LN4@getfuncnam
  00104	00 00 00 00	 DD	 $LN3@getfuncnam
  00108	00 00 00 00	 DD	 $LN2@getfuncnam
  0010c	00 00 00 00	 DD	 $LN13@getfuncnam
  00110	00 00 00 00	 DD	 $LN12@getfuncnam
  00114	00 00 00 00	 DD	 $LN1@getfuncnam
$LN21@getfuncnam:
  00118	00		 DB	 0
  00119	00		 DB	 0
  0011a	01		 DB	 1
  0011b	0c		 DB	 12			; 0000000cH
  0011c	01		 DB	 1
  0011d	0c		 DB	 12			; 0000000cH
  0011e	00		 DB	 0
  0011f	02		 DB	 2
  00120	02		 DB	 2
  00121	02		 DB	 2
  00122	02		 DB	 2
  00123	02		 DB	 2
  00124	02		 DB	 2
  00125	02		 DB	 2
  00126	02		 DB	 2
  00127	02		 DB	 2
  00128	02		 DB	 2
  00129	02		 DB	 2
  0012a	02		 DB	 2
  0012b	03		 DB	 3
  0012c	04		 DB	 4
  0012d	0c		 DB	 12			; 0000000cH
  0012e	05		 DB	 5
  0012f	06		 DB	 6
  00130	0c		 DB	 12			; 0000000cH
  00131	07		 DB	 7
  00132	08		 DB	 8
  00133	09		 DB	 9
  00134	0c		 DB	 12			; 0000000cH
  00135	0c		 DB	 12			; 0000000cH
  00136	0a		 DB	 10			; 0000000aH
  00137	0a		 DB	 10			; 0000000aH
  00138	0c		 DB	 12			; 0000000cH
  00139	0c		 DB	 12			; 0000000cH
  0013a	0c		 DB	 12			; 0000000cH
  0013b	0b		 DB	 11			; 0000000bH
_getfuncname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaG_traceexec
_TEXT	SEGMENT
tv305 = -4						; size = 4
_counthook$1$ = 8					; size = 4
_L$ = 8							; size = 4
_luaG_traceexec PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 640
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; Line 641
  00006	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00009	57		 push	 edi
; Line 643
  0000a	ff 4e 68	 dec	 DWORD PTR [esi+104]
  0000d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00010	8a 5e 70	 mov	 bl, BYTE PTR [esi+112]
  00013	75 15		 jne	 SHORT $LN13@luaG_trace
  00015	f6 c3 08	 test	 bl, 8
  00018	74 10		 je	 SHORT $LN13@luaG_trace
; Line 645
  0001a	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  0001d	b9 01 00 00 00	 mov	 ecx, 1
  00022	89 4d 08	 mov	 DWORD PTR _counthook$1$[ebp], ecx
  00025	89 46 68	 mov	 DWORD PTR [esi+104], eax
  00028	eb 0a		 jmp	 SHORT $LN8@luaG_trace
$LN13@luaG_trace:
; Line 643
  0002a	33 c9		 xor	 ecx, ecx
  0002c	89 4d 08	 mov	 DWORD PTR _counthook$1$[ebp], ecx
; Line 646
  0002f	f6 c3 04	 test	 bl, 4
  00032	74 0c		 je	 SHORT $LN2@luaG_trace
$LN8@luaG_trace:
; Line 648
  00034	8a 47 22	 mov	 al, BYTE PTR [edi+34]
  00037	a8 40		 test	 al, 64			; 00000040H
  00039	74 0c		 je	 SHORT $LN7@luaG_trace
; Line 649
  0003b	24 bf		 and	 al, 191			; 000000bfH
  0003d	88 47 22	 mov	 BYTE PTR [edi+34], al
$LN2@luaG_trace:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
; Line 672
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN7@luaG_trace:
; Line 652
  00047	85 c9		 test	 ecx, ecx
  00049	74 0d		 je	 SHORT $LN6@luaG_trace
; Line 653
  0004b	6a ff		 push	 -1
  0004d	6a 03		 push	 3
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 _luaD_hook
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@luaG_trace:
; Line 654
  00058	f6 c3 04	 test	 bl, 4
  0005b	74 54		 je	 SHORT $LN4@luaG_trace
; Line 655
  0005d	8b 07		 mov	 eax, DWORD PTR [edi]
; Line 656
  0005f	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00062	8b 00		 mov	 eax, DWORD PTR [eax]
  00064	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00067	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  0006a	2b ca		 sub	 ecx, edx
; Line 657
  0006c	8b 58 38	 mov	 ebx, DWORD PTR [eax+56]
  0006f	c1 f9 02	 sar	 ecx, 2
  00072	49		 dec	 ecx
  00073	89 55 fc	 mov	 DWORD PTR tv305[ebp], edx
  00076	85 db		 test	 ebx, ebx
  00078	74 05		 je	 SHORT $LN15@luaG_trace
  0007a	8b 14 8b	 mov	 edx, DWORD PTR [ebx+ecx*4]
  0007d	eb 03		 jmp	 SHORT $LN16@luaG_trace
$LN15@luaG_trace:
  0007f	83 ca ff	 or	 edx, -1
$LN16@luaG_trace:
; Line 660
  00082	85 c9		 test	 ecx, ecx
  00084	74 1f		 je	 SHORT $LN3@luaG_trace
  00086	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00089	39 47 14	 cmp	 DWORD PTR [edi+20], eax
  0008c	76 17		 jbe	 SHORT $LN3@luaG_trace
  0008e	85 db		 test	 ebx, ebx
  00090	74 0c		 je	 SHORT $LN17@luaG_trace
  00092	2b 45 fc	 sub	 eax, DWORD PTR tv305[ebp]
  00095	c1 f8 02	 sar	 eax, 2
  00098	8b 44 83 fc	 mov	 eax, DWORD PTR [ebx+eax*4-4]
  0009c	eb 03		 jmp	 SHORT $LN18@luaG_trace
$LN17@luaG_trace:
  0009e	83 c8 ff	 or	 eax, -1
$LN18@luaG_trace:
  000a1	3b d0		 cmp	 edx, eax
  000a3	74 0c		 je	 SHORT $LN4@luaG_trace
$LN3@luaG_trace:
; Line 661
  000a5	52		 push	 edx
  000a6	6a 02		 push	 2
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 _luaD_hook
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@luaG_trace:
; Line 664
  000b1	80 7e 08 01	 cmp	 BYTE PTR [esi+8], 1
  000b5	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  000b8	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000bb	75 83		 jne	 SHORT $LN2@luaG_trace
; Line 665
  000bd	83 7d 08 00	 cmp	 DWORD PTR _counthook$1$[ebp], 0
  000c1	74 07		 je	 SHORT $LN1@luaG_trace
; Line 666
  000c3	c7 46 68 01 00
	00 00		 mov	 DWORD PTR [esi+104], 1
$LN1@luaG_trace:
; Line 667
  000ca	83 47 14 fc	 add	 DWORD PTR [edi+20], -4	; fffffffcH
; Line 668
  000ce	80 4f 22 40	 or	 BYTE PTR [edi+34], 64	; 00000040H
; Line 669
  000d2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; Line 670
  000d5	6a 01		 push	 1
  000d7	83 e8 10	 sub	 eax, 16			; 00000010H
  000da	56		 push	 esi
  000db	89 07		 mov	 DWORD PTR [edi], eax
  000dd	e8 00 00 00 00	 call	 _luaD_throw
$LN23@luaG_trace:
$LN20@luaG_trace:
  000e2	cc		 int	 3
_luaG_traceexec ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaG_errormsg
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaG_errormsg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 615
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 616
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0000a	85 c0		 test	 eax, eax
  0000c	74 33		 je	 SHORT $LN1@luaG_error
; Line 617
  0000e	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00011	03 c8		 add	 ecx, eax
; Line 618
  00013	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; Line 621
  00016	6a 01		 push	 1
  00018	f3 0f 6f 40 f0	 movdqu	 xmm0, XMMWORD PTR [eax-16]
  0001d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
  00021	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00024	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  00028	f3 0f 7f 40 f0	 movdqu	 XMMWORD PTR [eax-16], xmm0
  0002d	83 46 0c 10	 add	 DWORD PTR [esi+12], 16	; 00000010H
  00031	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00034	83 c0 e0	 add	 eax, -32		; ffffffe0H
  00037	50		 push	 eax
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _luaD_callnoyield
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@luaG_error:
; Line 623
  00041	6a 02		 push	 2
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _luaD_throw
$LN5@luaG_error:
$LN4@luaG_error:
  00049	cc		 int	 3
_luaG_errormsg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaG_addinfo
_TEXT	SEGMENT
_buff$ = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_msg$ = 12						; size = 4
_src$ = 16						; size = 4
_line$ = 20						; size = 4
_luaG_addinfo PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 604
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _src$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 14	 mov	 ebx, DWORD PTR _line$[ebp]
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0001b	57		 push	 edi
  0001c	8b 7d 0c	 mov	 edi, DWORD PTR _msg$[ebp]
; Line 606
  0001f	85 c0		 test	 eax, eax
  00021	74 14		 je	 SHORT $LN2@luaG_addin
; Line 607
  00023	83 c0 10	 add	 eax, 16			; 00000010H
  00026	6a 3c		 push	 60			; 0000003cH
  00028	50		 push	 eax
  00029	8d 45 c0	 lea	 eax, DWORD PTR _buff$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _luaO_chunkid
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 608
  00035	eb 06		 jmp	 SHORT $LN1@luaG_addin
$LN2@luaG_addin:
; Line 609
  00037	66 c7 45 c0 3f
	00		 mov	 WORD PTR _buff$[ebp], 63 ; 0000003fH
$LN1@luaG_addin:
; Line 611
  0003d	57		 push	 edi
  0003e	53		 push	 ebx
  0003f	8d 45 c0	 lea	 eax, DWORD PTR _buff$[ebp]
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_09BHPFBFOI@?$CFs?3?$CFd?3?5?$CFs?$AA@
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 _luaO_pushfstring
; Line 612
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	83 c4 14	 add	 esp, 20			; 00000014H
  00054	33 cd		 xor	 ecx, ebp
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_luaG_addinfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaG_runerror
_TEXT	SEGMENT
_buff$1 = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_fmt$ = 12						; size = 4
_luaG_runerror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 627
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
; Line 632
  00015	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  00018	57		 push	 edi
  00019	50		 push	 eax
  0001a	ff 75 0c	 push	 DWORD PTR _fmt$[ebp]
  0001d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 _luaO_pushvfstring
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	8b d8		 mov	 ebx, eax
; Line 634
  0002b	f6 47 22 02	 test	 BYTE PTR [edi+34], 2
  0002f	74 55		 je	 SHORT $LN12@luaG_runer
; Line 635
  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00035	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00038	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0003b	85 d2		 test	 edx, edx
  0003d	74 0f		 je	 SHORT $LN6@luaG_runer
  0003f	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00042	2b 41 30	 sub	 eax, DWORD PTR [ecx+48]
  00045	c1 f8 02	 sar	 eax, 2
  00048	8b 7c 82 fc	 mov	 edi, DWORD PTR [edx+eax*4-4]
  0004c	eb 03		 jmp	 SHORT $LN7@luaG_runer
$LN6@luaG_runer:
  0004e	83 cf ff	 or	 edi, -1
$LN7@luaG_runer:
  00051	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  00054	85 c0		 test	 eax, eax
  00056	74 14		 je	 SHORT $LN11@luaG_runer
  00058	83 c0 10	 add	 eax, 16			; 00000010H
  0005b	6a 3c		 push	 60			; 0000003cH
  0005d	50		 push	 eax
  0005e	8d 45 c0	 lea	 eax, DWORD PTR _buff$1[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _luaO_chunkid
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	eb 06		 jmp	 SHORT $LN10@luaG_runer
$LN11@luaG_runer:
  0006c	66 c7 45 c0 3f
	00		 mov	 WORD PTR _buff$1[ebp], 63 ; 0000003fH
$LN10@luaG_runer:
  00072	53		 push	 ebx
  00073	57		 push	 edi
  00074	8d 45 c0	 lea	 eax, DWORD PTR _buff$1[ebp]
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_09BHPFBFOI@?$CFs?3?$CFd?3?5?$CFs?$AA@
  0007d	56		 push	 esi
  0007e	e8 00 00 00 00	 call	 _luaO_pushfstring
  00083	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@luaG_runer:
; Line 636
  00086	56		 push	 esi
  00087	e8 00 00 00 00	 call	 _luaG_errormsg
$LN18@luaG_runer:
$LN17@luaG_runer:
  0008c	cc		 int	 3
_luaG_runerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaG_ordererror
_TEXT	SEGMENT
_L$ = 8							; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
_luaG_ordererror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 592
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 593
  00003	8b 45 0c	 mov	 eax, DWORD PTR _p1$[ebp]
  00006	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00009	83 e0 0f	 and	 eax, 15			; 0000000fH
  0000c	8b 0c 85 04 00
	00 00		 mov	 ecx, DWORD PTR _luaT_typenames_[eax*4+4]
; Line 594
  00013	8b 45 10	 mov	 eax, DWORD PTR _p2$[ebp]
  00016	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00019	83 e0 0f	 and	 eax, 15			; 0000000fH
  0001c	8b 04 85 04 00
	00 00		 mov	 eax, DWORD PTR _luaT_typenames_[eax*4+4]
; Line 595
  00023	3b c8		 cmp	 ecx, eax
  00025	75 0e		 jne	 SHORT $LN2@luaG_order
; Line 596
  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@DEJMKNMB@attempt?5to?5compare?5two?5?$CFs?5values@
  0002d	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00030	e8 00 00 00 00	 call	 _luaG_runerror
$LN6@luaG_order:
$LN2@luaG_order:
; Line 598
  00035	50		 push	 eax
  00036	51		 push	 ecx
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DNBGDDFP@attempt?5to?5compare?5?$CFs?5with?5?$CFs?$AA@
  0003c	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0003f	e8 00 00 00 00	 call	 _luaG_runerror
$LN7@luaG_order:
$LN5@luaG_order:
  00044	cc		 int	 3
_luaG_ordererror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaG_tointerror
_TEXT	SEGMENT
_temp$ = -8						; size = 8
_L$ = 8							; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
_luaG_tointerror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 584
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
; Line 586
  00007	8b 75 0c	 mov	 esi, DWORD PTR _p1$[ebp]
  0000a	83 7e 08 13	 cmp	 DWORD PTR [esi+8], 19	; 00000013H
  0000e	75 10		 jne	 SHORT $LN4@luaG_toint
  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	8b 4d 10	 mov	 ecx, DWORD PTR _p2$[ebp]
  00015	89 45 f8	 mov	 DWORD PTR _temp$[ebp], eax
  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	89 45 fc	 mov	 DWORD PTR _temp$[ebp+4], eax
  0001e	eb 17		 jmp	 SHORT $LN1@luaG_toint
$LN4@luaG_toint:
  00020	6a 00		 push	 0
  00022	8d 45 f8	 lea	 eax, DWORD PTR _temp$[ebp]
  00025	50		 push	 eax
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _luaV_tointeger
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _p2$[ebp]
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	85 c0		 test	 eax, eax
  00034	0f 44 ce	 cmove	 ecx, esi
$LN1@luaG_toint:
; Line 588
  00037	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0003a	51		 push	 ecx
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _varinfo
  00041	83 c4 08	 add	 esp, 8
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@EHJFDOFM@number?$CFs?5has?5no?5integer?5represen@
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _luaG_runerror
$LN7@luaG_toint:
$LN6@luaG_toint:
  00050	cc		 int	 3
_luaG_tointerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaG_opinterror
_TEXT	SEGMENT
_temp$ = -8						; size = 8
_L$ = 8							; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
_msg$ = 20						; size = 4
_luaG_opinterror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 573
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
; Line 575
  00007	8b 75 0c	 mov	 esi, DWORD PTR _p1$[ebp]
  0000a	83 7e 08 03	 cmp	 DWORD PTR [esi+8], 3
  0000e	75 0e		 jne	 SHORT $LN4@luaG_opint
  00010	f2 0f 10 06	 movsd	 xmm0, QWORD PTR [esi]
  00014	8b 4d 10	 mov	 ecx, DWORD PTR _p2$[ebp]
  00017	f2 0f 11 45 f8	 movsd	 QWORD PTR _temp$[ebp], xmm0
  0001c	eb 15		 jmp	 SHORT $LN1@luaG_opint
$LN4@luaG_opint:
  0001e	8d 45 f8	 lea	 eax, DWORD PTR _temp$[ebp]
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _luaV_tonumber_
  00028	8b 4d 10	 mov	 ecx, DWORD PTR _p2$[ebp]
  0002b	83 c4 08	 add	 esp, 8
  0002e	85 c0		 test	 eax, eax
  00030	0f 44 ce	 cmove	 ecx, esi
$LN1@luaG_opint:
; Line 577
  00033	ff 75 14	 push	 DWORD PTR _msg$[ebp]
  00036	51		 push	 ecx
  00037	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0003a	e8 00 00 00 00	 call	 _luaG_typeerror
$LN7@luaG_opint:
$LN6@luaG_opint:
  0003f	cc		 int	 3
_luaG_opinterror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaG_concaterror
_TEXT	SEGMENT
_L$ = 8							; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
_luaG_concaterror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 566
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 567
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _p1$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	83 e0 0f	 and	 eax, 15			; 0000000fH
  0000c	83 f8 04	 cmp	 eax, 4
  0000f	74 05		 je	 SHORT $LN1@luaG_conca
  00011	83 f8 03	 cmp	 eax, 3
  00014	75 03		 jne	 SHORT $LN2@luaG_conca
$LN1@luaG_conca:
  00016	8b 4d 10	 mov	 ecx, DWORD PTR _p2$[ebp]
$LN2@luaG_conca:
; Line 568
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LPKAOE@concatenate?$AA@
  0001e	51		 push	 ecx
  0001f	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00022	e8 00 00 00 00	 call	 _luaG_typeerror
$LN6@luaG_conca:
$LN5@luaG_conca:
  00027	cc		 int	 3
_luaG_concaterror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaG_typeerror
_TEXT	SEGMENT
_L$ = 8							; size = 4
_o$ = 12						; size = 4
_op$ = 16						; size = 4
_luaG_typeerror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 560
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 561
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _o$[ebp]
  00006	56		 push	 esi
; Line 562
  00007	51		 push	 ecx
  00008	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000e	83 e0 0f	 and	 eax, 15			; 0000000fH
  00011	8b 34 85 04 00
	00 00		 mov	 esi, DWORD PTR _luaT_typenames_[eax*4+4]
  00018	e8 00 00 00 00	 call	 _varinfo
  0001d	83 c4 08	 add	 esp, 8
  00020	50		 push	 eax
  00021	56		 push	 esi
  00022	ff 75 10	 push	 DWORD PTR _op$[ebp]
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BEEJNDFB@attempt?5to?5?$CFs?5a?5?$CFs?5value?$CFs?$AA@
  0002a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0002d	e8 00 00 00 00	 call	 _luaG_runerror
$LN4@luaG_typee:
$LN3@luaG_typee:
  00032	cc		 int	 3
_luaG_typeerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lua_gethookcount
_TEXT	SEGMENT
_L$ = 8							; size = 4
_lua_gethookcount PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 98
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 99
  00003	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  00006	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
; Line 100
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_lua_gethookcount ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lua_gethookmask
_TEXT	SEGMENT
_L$ = 8							; size = 4
_lua_gethookmask PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 93
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 94
  00003	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  00006	0f b6 40 70	 movzx	 eax, BYTE PTR [eax+112]
; Line 95
  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
_lua_gethookmask ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lua_gethook
_TEXT	SEGMENT
_L$ = 8							; size = 4
_lua_gethook PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 88
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 89
  00003	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  00006	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
; Line 90
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_lua_gethook ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lua_sethook
_TEXT	SEGMENT
_L$ = 8							; size = 4
_func$ = 12						; size = 4
_mask$ = 16						; size = 4
_count$ = 20						; size = 4
_lua_sethook PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 74
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 75
  00003	8b 55 0c	 mov	 edx, DWORD PTR _func$[ebp]
  00006	53		 push	 ebx
  00007	85 d2		 test	 edx, edx
  00009	74 07		 je	 SHORT $LN2@lua_sethoo
  0000b	8b 5d 10	 mov	 ebx, DWORD PTR _mask$[ebp]
  0000e	85 db		 test	 ebx, ebx
  00010	75 04		 jne	 SHORT $LN3@lua_sethoo
$LN2@lua_sethoo:
; Line 76
  00012	33 db		 xor	 ebx, ebx
; Line 77
  00014	33 d2		 xor	 edx, edx
$LN3@lua_sethoo:
; Line 79
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _L$[ebp]
  00019	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001c	f6 40 22 02	 test	 BYTE PTR [eax+34], 2
  00020	74 06		 je	 SHORT $LN1@lua_sethoo
; Line 80
  00022	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00025	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN1@lua_sethoo:
; Line 82
  00028	8b 45 14	 mov	 eax, DWORD PTR _count$[ebp]
; Line 84
  0002b	88 59 70	 mov	 BYTE PTR [ecx+112], bl
  0002e	89 51 58	 mov	 DWORD PTR [ecx+88], edx
  00031	89 41 64	 mov	 DWORD PTR [ecx+100], eax
  00034	89 41 68	 mov	 DWORD PTR [ecx+104], eax
  00037	5b		 pop	 ebx
; Line 85
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_lua_sethook ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lua_setlocal
_TEXT	SEGMENT
_pos$ = -4						; size = 4
_L$ = 8							; size = 4
_ar$ = 12						; size = 4
_n$ = 16						; size = 4
_lua_setlocal PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 188
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
; Line 192
  00005	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00008	57		 push	 edi
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pos$[ebp], 0
  00010	80 7e 08 01	 cmp	 BYTE PTR [esi+8], 1
  00014	75 13		 jne	 SHORT $LN4@lua_setloc
  00016	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00019	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0001c	03 42 1c	 add	 eax, DWORD PTR [edx+28]
  0001f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00021	89 02		 mov	 DWORD PTR [edx], eax
  00023	2b 4e 20	 sub	 ecx, DWORD PTR [esi+32]
  00026	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN4@lua_setloc:
; Line 193
  00029	8d 45 fc	 lea	 eax, DWORD PTR _pos$[ebp]
  0002c	50		 push	 eax
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _ar$[ebp]
  00030	ff 75 10	 push	 DWORD PTR _n$[ebp]
  00033	ff 70 60	 push	 DWORD PTR [eax+96]
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 _findlocal
  0003c	8b f8		 mov	 edi, eax
  0003e	83 c4 10	 add	 esp, 16			; 00000010H
; Line 194
  00041	85 ff		 test	 edi, edi
  00043	74 13		 je	 SHORT $LN1@lua_setloc
; Line 195
  00045	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00048	f3 0f 6f 41 f0	 movdqu	 xmm0, XMMWORD PTR [ecx-16]
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _pos$[ebp]
  00050	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
; Line 196
  00054	83 46 0c f0	 add	 DWORD PTR [esi+12], -16	; fffffff0H
$LN1@lua_setloc:
; Line 198
  00058	80 7e 08 01	 cmp	 BYTE PTR [esi+8], 1
  0005c	75 15		 jne	 SHORT $LN7@lua_setloc
  0005e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00061	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00064	03 42 1c	 add	 eax, DWORD PTR [edx+28]
  00067	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00069	89 02		 mov	 DWORD PTR [edx], eax
; Line 200
  0006b	8b c7		 mov	 eax, edi
  0006d	2b 4e 20	 sub	 ecx, DWORD PTR [esi+32]
  00070	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN7@lua_setloc:
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
; Line 201
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_lua_setlocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lua_getlocal
_TEXT	SEGMENT
_pos$1 = 8						; size = 4
_L$ = 8							; size = 4
_ar$ = 12						; size = 4
_n$ = 16						; size = 4
_lua_getlocal PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 164
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 167
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	57		 push	 edi
  00008	80 7e 08 01	 cmp	 BYTE PTR [esi+8], 1
  0000c	75 13		 jne	 SHORT $LN8@lua_getloc
  0000e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00011	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00014	03 42 1c	 add	 eax, DWORD PTR [edx+28]
  00017	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00019	89 02		 mov	 DWORD PTR [edx], eax
  0001b	2b 4e 20	 sub	 ecx, DWORD PTR [esi+32]
  0001e	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN8@lua_getloc:
; Line 168
  00021	8b 45 0c	 mov	 eax, DWORD PTR _ar$[ebp]
  00024	85 c0		 test	 eax, eax
  00026	75 24		 jne	 SHORT $LN5@lua_getloc
; Line 169
  00028	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0002b	83 78 f8 46	 cmp	 DWORD PTR [eax-8], 70	; 00000046H
  0002f	74 04		 je	 SHORT $LN4@lua_getloc
; Line 170
  00031	33 ff		 xor	 edi, edi
; Line 171
  00033	eb 49		 jmp	 SHORT $LN1@lua_getloc
$LN4@lua_getloc:
; Line 172
  00035	8b 40 f0	 mov	 eax, DWORD PTR [eax-16]
  00038	6a 00		 push	 0
  0003a	ff 75 10	 push	 DWORD PTR _n$[ebp]
  0003d	ff 70 0c	 push	 DWORD PTR [eax+12]
  00040	e8 00 00 00 00	 call	 _luaF_getlocalname
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	8b f8		 mov	 edi, eax
; Line 174
  0004a	eb 32		 jmp	 SHORT $LN1@lua_getloc
$LN5@lua_getloc:
; Line 176
  0004c	8d 4d 08	 lea	 ecx, DWORD PTR _pos$1[ebp]
  0004f	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _pos$1[ebp], 0
  00056	51		 push	 ecx
  00057	ff 75 10	 push	 DWORD PTR _n$[ebp]
  0005a	ff 70 60	 push	 DWORD PTR [eax+96]
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 _findlocal
  00063	8b f8		 mov	 edi, eax
  00065	83 c4 10	 add	 esp, 16			; 00000010H
; Line 177
  00068	85 ff		 test	 edi, edi
  0006a	74 12		 je	 SHORT $LN1@lua_getloc
; Line 178
  0006c	8b 45 08	 mov	 eax, DWORD PTR _pos$1[ebp]
  0006f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00072	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00076	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
; Line 179
  0007a	83 46 0c 10	 add	 DWORD PTR [esi+12], 16	; 00000010H
$LN1@lua_getloc:
; Line 182
  0007e	80 7e 08 01	 cmp	 BYTE PTR [esi+8], 1
  00082	75 13		 jne	 SHORT $LN14@lua_getloc
  00084	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00087	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0008a	03 42 1c	 add	 eax, DWORD PTR [edx+28]
  0008d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0008f	89 02		 mov	 DWORD PTR [edx], eax
  00091	2b 4e 20	 sub	 ecx, DWORD PTR [esi+32]
  00094	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN14@lua_getloc:
; Line 184
  00097	8b c7		 mov	 eax, edi
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
; Line 185
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_lua_getlocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lua_getinfo
_TEXT	SEGMENT
_cl$1$ = 8						; size = 4
_L$ = 8							; size = 4
_status$1$ = 12						; size = 4
_what$ = 12						; size = 4
_ar$ = 16						; size = 4
_lua_getinfo PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 292
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 298
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	80 7e 08 01	 cmp	 BYTE PTR [esi+8], 1
  0000b	75 13		 jne	 SHORT $LN9@lua_getinf
  0000d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00010	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00013	03 42 1c	 add	 eax, DWORD PTR [edx+28]
  00016	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00018	89 02		 mov	 DWORD PTR [edx], eax
  0001a	2b 4e 20	 sub	 ecx, DWORD PTR [esi+32]
  0001d	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN9@lua_getinf:
; Line 299
  00020	8b 55 10	 mov	 edx, DWORD PTR _ar$[ebp]
  00023	53		 push	 ebx
  00024	57		 push	 edi
  00025	8b 7d 0c	 mov	 edi, DWORD PTR _what$[ebp]
  00028	80 3f 3e	 cmp	 BYTE PTR [edi], 62	; 0000003eH
  0002b	75 0e		 jne	 SHORT $LN4@lua_getinf
; Line 301
  0002d	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00030	33 c9		 xor	 ecx, ecx
  00032	83 c3 f0	 add	 ebx, -16		; fffffff0H
; Line 303
  00035	47		 inc	 edi
; Line 304
  00036	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
; Line 306
  00039	eb 05		 jmp	 SHORT $LN3@lua_getinf
$LN4@lua_getinf:
; Line 307
  0003b	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
; Line 308
  0003e	8b 19		 mov	 ebx, DWORD PTR [ecx]
$LN3@lua_getinf:
; Line 311
  00040	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00043	83 e0 1f	 and	 eax, 31			; 0000001fH
  00046	3c 06		 cmp	 al, 6
  00048	75 04		 jne	 SHORT $LN7@lua_getinf
  0004a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004c	eb 02		 jmp	 SHORT $LN16@lua_getinf
$LN7@lua_getinf:
  0004e	33 c0		 xor	 eax, eax
$LN16@lua_getinf:
; Line 312
  00050	51		 push	 ecx
  00051	50		 push	 eax
  00052	52		 push	 edx
  00053	57		 push	 edi
  00054	56		 push	 esi
  00055	89 45 08	 mov	 DWORD PTR _cl$1$[ebp], eax
  00058	e8 00 00 00 00	 call	 _auxgetinfo
; Line 313
  0005d	6a 66		 push	 102			; 00000066H
  0005f	57		 push	 edi
  00060	89 45 0c	 mov	 DWORD PTR _status$1$[ebp], eax
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00069	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006c	85 c0		 test	 eax, eax
  0006e	74 0f		 je	 SHORT $LN2@lua_getinf
; Line 314
  00070	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00073	f3 0f 6f 03	 movdqu	 xmm0, XMMWORD PTR [ebx]
  00077	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
; Line 315
  0007b	83 46 0c 10	 add	 DWORD PTR [esi+12], 16	; 00000010H
$LN2@lua_getinf:
; Line 317
  0007f	80 7e 08 01	 cmp	 BYTE PTR [esi+8], 1
  00083	75 13		 jne	 SHORT $LN12@lua_getinf
  00085	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00088	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0008b	03 46 20	 add	 eax, DWORD PTR [esi+32]
  0008e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00090	89 02		 mov	 DWORD PTR [edx], eax
  00092	2b 4e 20	 sub	 ecx, DWORD PTR [esi+32]
  00095	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN12@lua_getinf:
; Line 318
  00098	6a 4c		 push	 76			; 0000004cH
  0009a	57		 push	 edi
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  000a1	83 c4 08	 add	 esp, 8
  000a4	5f		 pop	 edi
  000a5	5b		 pop	 ebx
  000a6	85 c0		 test	 eax, eax
  000a8	74 0c		 je	 SHORT $LN15@lua_getinf
; Line 319
  000aa	ff 75 08	 push	 DWORD PTR _cl$1$[ebp]
  000ad	56		 push	 esi
  000ae	e8 00 00 00 00	 call	 _collectvalidlines
  000b3	83 c4 08	 add	 esp, 8
$LN15@lua_getinf:
; Line 321
  000b6	8b 45 0c	 mov	 eax, DWORD PTR _status$1$[ebp]
  000b9	5e		 pop	 esi
; Line 322
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_lua_getinfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lua_getstack
_TEXT	SEGMENT
_L$ = 8							; size = 4
_level$ = 12						; size = 4
_ar$ = 16						; size = 4
_lua_getstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 103
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 106
  00003	8b 45 0c	 mov	 eax, DWORD PTR _level$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	79 04		 jns	 SHORT $LN6@lua_getsta
  0000a	33 c0		 xor	 eax, eax
; Line 117
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN6@lua_getsta:
  0000e	56		 push	 esi
; Line 108
  0000f	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00012	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00015	85 c0		 test	 eax, eax
  00017	7e 15		 jle	 SHORT $LN14@lua_getsta
  00019	8d 56 34	 lea	 edx, DWORD PTR [esi+52]
  0001c	8d 64 24 00	 npad	 4
$LL5@lua_getsta:
  00020	3b ca		 cmp	 ecx, edx
  00022	74 08		 je	 SHORT $LN13@lua_getsta
  00024	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
; Line 109
  00027	48		 dec	 eax
  00028	85 c0		 test	 eax, eax
  0002a	7f f4		 jg	 SHORT $LL5@lua_getsta
$LN13@lua_getsta:
; Line 110
  0002c	85 c0		 test	 eax, eax
$LN14@lua_getsta:
  0002e	75 17		 jne	 SHORT $LN2@lua_getsta
  00030	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  00033	3b c8		 cmp	 ecx, eax
  00035	74 10		 je	 SHORT $LN2@lua_getsta
; Line 112
  00037	8b 45 10	 mov	 eax, DWORD PTR _ar$[ebp]
  0003a	ba 01 00 00 00	 mov	 edx, 1
  0003f	5e		 pop	 esi
  00040	89 48 60	 mov	 DWORD PTR [eax+96], ecx
; Line 116
  00043	8b c2		 mov	 eax, edx
; Line 117
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN2@lua_getsta:
; Line 114
  00047	33 d2		 xor	 edx, edx
; Line 116
  00049	8b c2		 mov	 eax, edx
  0004b	5e		 pop	 esi
; Line 117
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_lua_getstack ENDP
_TEXT	ENDS
END
