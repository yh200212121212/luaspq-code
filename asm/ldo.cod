; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_lua_yieldk
PUBLIC	_lua_resume
PUBLIC	_lua_isyieldable
PUBLIC	_luaD_protectedparser
PUBLIC	_luaD_hook
PUBLIC	_luaD_precall
PUBLIC	_luaD_call
PUBLIC	_luaD_callnoyield
PUBLIC	_luaD_pcall
PUBLIC	_luaD_poscall
PUBLIC	_luaD_reallocstack
PUBLIC	_luaD_growstack
PUBLIC	_luaD_shrinkstack
PUBLIC	_luaD_inctop
PUBLIC	_luaD_throw
PUBLIC	_luaD_rawrunprotected
PUBLIC	??_C@_0BI@KGOCJOGJ@error?5in?5error?5handling?$AA@ ; `string'
PUBLIC	??_C@_0P@EODJGPIM@stack?5overflow?$AA@		; `string'
PUBLIC	??_C@_04OMFAIDPG@call?$AA@			; `string'
PUBLIC	??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@	; `string'
PUBLIC	??_C@_0CG@NAAHDPPN@cannot?5resume?5non?9suspended?5coro@ ; `string'
PUBLIC	??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@ ; `string'
PUBLIC	??_C@_0CK@PNAEIJLG@attempt?5to?5yield?5across?5a?5C?9call@ ; `string'
PUBLIC	??_C@_0CK@CHKMHBBM@attempt?5to?5yield?5from?5outside?5a?5@ ; `string'
PUBLIC	??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@ ; `string'
PUBLIC	??_C@_06FNFBAEBE@binary?$AA@			; `string'
PUBLIC	??_C@_04CIMGMMMG@text?$AA@			; `string'
EXTRN	__imp__longjmp:PROC
EXTRN	__imp__abort:PROC
EXTRN	__imp__strchr:PROC
EXTRN	_luaO_pushfstring:PROC
EXTRN	_luaT_gettmbyobj:PROC
EXTRN	_luaM_toobig:PROC
EXTRN	_luaM_realloc_:PROC
EXTRN	_luaZ_fill:PROC
EXTRN	_luaE_extendCI:PROC
EXTRN	_luaE_freeCI:PROC
EXTRN	_luaE_shrinkCI:PROC
EXTRN	_luaG_typeerror:PROC
EXTRN	_luaG_runerror:PROC
EXTRN	_luaF_initupvals:PROC
EXTRN	_luaF_close:PROC
EXTRN	_luaC_step:PROC
EXTRN	_luaY_parser:PROC
EXTRN	_luaS_newlstr:PROC
EXTRN	_luaS_new:PROC
EXTRN	_luaU_undump:PROC
EXTRN	_luaV_finishOp:PROC
EXTRN	_luaV_execute:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__setjmp3:PROC
EXTRN	_luaO_nilobject_:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_04CIMGMMMG@text?$AA@
CONST	SEGMENT
??_C@_04CIMGMMMG@text?$AA@ DB 'text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNFBAEBE@binary?$AA@
CONST	SEGMENT
??_C@_06FNFBAEBE@binary?$AA@ DB 'binary', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@
CONST	SEGMENT
??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@ DB 'atte'
	DB	'mpt to load a %s chunk (mode is ''%s'')', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CHKMHBBM@attempt?5to?5yield?5from?5outside?5a?5@
CONST	SEGMENT
??_C@_0CK@CHKMHBBM@attempt?5to?5yield?5from?5outside?5a?5@ DB 'attempt to'
	DB	' yield from outside a coroutine', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PNAEIJLG@attempt?5to?5yield?5across?5a?5C?9call@
CONST	SEGMENT
??_C@_0CK@PNAEIJLG@attempt?5to?5yield?5across?5a?5C?9call@ DB 'attempt to'
	DB	' yield across a C-call boundary', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@
CONST	SEGMENT
??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@ DB 'cannot resume'
	DB	' dead coroutine', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NAAHDPPN@cannot?5resume?5non?9suspended?5coro@
CONST	SEGMENT
??_C@_0CG@NAAHDPPN@cannot?5resume?5non?9suspended?5coro@ DB 'cannot resum'
	DB	'e non-suspended coroutine', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@
CONST	SEGMENT
??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@ DB 'C stack overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OMFAIDPG@call?$AA@
CONST	SEGMENT
??_C@_04OMFAIDPG@call?$AA@ DB 'call', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EODJGPIM@stack?5overflow?$AA@
CONST	SEGMENT
??_C@_0P@EODJGPIM@stack?5overflow?$AA@ DB 'stack overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KGOCJOGJ@error?5in?5error?5handling?$AA@
CONST	SEGMENT
??_C@_0BI@KGOCJOGJ@error?5in?5error?5handling?$AA@ DB 'error in error han'
	DB	'dling', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _f_parser
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ud$ = 12						; size = 4
_f_parser PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 759
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 762
  00005	8b 75 0c	 mov	 esi, DWORD PTR _ud$[ebp]
  00008	57		 push	 edi
  00009	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000d	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00010	89 01		 mov	 DWORD PTR [ecx], eax
  00012	85 d2		 test	 edx, edx
  00014	74 0e		 je	 SHORT $LN5@f_parser
  00016	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	0f b6 18	 movzx	 ebx, BYTE PTR [eax]
  0001e	40		 inc	 eax
  0001f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00022	eb 0c		 jmp	 SHORT $LN6@f_parser
$LN5@f_parser:
  00024	ff 36		 push	 DWORD PTR [esi]
  00026	e8 00 00 00 00	 call	 _luaZ_fill
  0002b	83 c4 04	 add	 esp, 4
  0002e	8b d8		 mov	 ebx, eax
$LN6@f_parser:
; Line 764
  00030	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  00033	83 fb 1b	 cmp	 ebx, 27			; 0000001bH
  00036	75 34		 jne	 SHORT $LN2@f_parser
  00038	85 ff		 test	 edi, edi
  0003a	74 10		 je	 SHORT $LN7@f_parser
  0003c	6a 62		 push	 98			; 00000062H
  0003e	57		 push	 edi
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00045	83 c4 08	 add	 esp, 8
  00048	85 c0		 test	 eax, eax
  0004a	74 5d		 je	 SHORT $LN15@f_parser
$LN7@f_parser:
; Line 765
  0004c	ff 76 38	 push	 DWORD PTR [esi+56]
  0004f	ff 36		 push	 DWORD PTR [esi]
  00051	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 _luaU_undump
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 772
  0005d	50		 push	 eax
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 _luaF_initupvals
  00064	83 c4 08	 add	 esp, 8
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
; Line 773
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
$LN2@f_parser:
; Line 768
  0006c	85 ff		 test	 edi, edi
  0006e	74 10		 je	 SHORT $LN11@f_parser
  00070	6a 74		 push	 116			; 00000074H
  00072	57		 push	 edi
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00079	83 c4 08	 add	 esp, 8
  0007c	85 c0		 test	 eax, eax
  0007e	74 48		 je	 SHORT $LN17@f_parser
$LN11@f_parser:
; Line 769
  00080	53		 push	 ebx
  00081	ff 76 38	 push	 DWORD PTR [esi+56]
  00084	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00087	50		 push	 eax
  00088	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0008b	50		 push	 eax
  0008c	ff 36		 push	 DWORD PTR [esi]
  0008e	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00091	56		 push	 esi
  00092	e8 00 00 00 00	 call	 _luaY_parser
  00097	83 c4 18	 add	 esp, 24			; 00000018H
; Line 772
  0009a	50		 push	 eax
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 _luaF_initupvals
  000a1	83 c4 08	 add	 esp, 8
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
; Line 773
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
$LN15@f_parser:
; Line 764
  000a9	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  000ac	57		 push	 edi
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_06FNFBAEBE@binary?$AA@
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@
  000b7	56		 push	 esi
  000b8	e8 00 00 00 00	 call	 _luaO_pushfstring
  000bd	83 c4 10	 add	 esp, 16			; 00000010H
  000c0	6a 03		 push	 3
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 _luaD_throw
$LN18@f_parser:
$LN17@f_parser:
; Line 768
  000c8	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  000cb	57		 push	 edi
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_04CIMGMMMG@text?$AA@
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@
  000d6	56		 push	 esi
  000d7	e8 00 00 00 00	 call	 _luaO_pushfstring
  000dc	83 c4 10	 add	 esp, 16			; 00000010H
  000df	6a 03		 push	 3
  000e1	56		 push	 esi
  000e2	e8 00 00 00 00	 call	 _luaD_throw
$LN19@f_parser:
$LN14@f_parser:
  000e7	cc		 int	 3
_f_parser ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _checkmode
_TEXT	SEGMENT
_L$ = 8							; size = 4
_mode$ = 12						; size = 4
_x$ = 16						; size = 4
_checkmode PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 750
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 751
  00004	8b 75 0c	 mov	 esi, DWORD PTR _mode$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 17		 je	 SHORT $LN1@checkmode
  0000b	57		 push	 edi
  0000c	8b 7d 10	 mov	 edi, DWORD PTR _x$[ebp]
  0000f	0f be 07	 movsx	 eax, BYTE PTR [edi]
  00012	50		 push	 eax
  00013	56		 push	 esi
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	74 04		 je	 SHORT $LN6@checkmode
  00021	5f		 pop	 edi
$LN1@checkmode:
  00022	5e		 pop	 esi
; Line 756
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN6@checkmode:
; Line 753
  00025	56		 push	 esi
  00026	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00029	57		 push	 edi
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _luaO_pushfstring
  00035	83 c4 10	 add	 esp, 16			; 00000010H
; Line 754
  00038	6a 03		 push	 3
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _luaD_throw
$LN8@checkmode:
$LN5@checkmode:
  00040	cc		 int	 3
_checkmode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _resume
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ud$ = 12						; size = 4
_resume	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 612
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 614
  00003	8b 45 0c	 mov	 eax, DWORD PTR _ud$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 615
  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	8b 18		 mov	 ebx, DWORD PTR [eax]
  0000d	8b c3		 mov	 eax, ebx
  0000f	c1 e0 04	 shl	 eax, 4
  00012	57		 push	 edi
  00013	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
; Line 616
  00016	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00019	2b d0		 sub	 edx, eax
; Line 617
  0001b	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  00020	66 39 46 6e	 cmp	 WORD PTR [esi+110], ax
  00024	0f 83 9c 00 00
	00		 jae	 $LN14@resume
; Line 619
  0002a	8a 46 08	 mov	 al, BYTE PTR [esi+8]
  0002d	84 c0		 test	 al, al
  0002f	75 2c		 jne	 SHORT $LN9@resume
; Line 620
  00031	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  00034	3b f8		 cmp	 edi, eax
  00036	0f 85 96 00 00
	00		 jne	 $LN16@resume
; Line 623
  0003c	6a ff		 push	 -1
  0003e	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  00041	50		 push	 eax
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 _luaD_precall
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	85 c0		 test	 eax, eax
  0004d	75 72		 jne	 SHORT $LN4@resume
; Line 624
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 _luaV_execute
  00055	83 c4 04	 add	 esp, 4
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
; Line 646
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN9@resume:
; Line 626
  0005d	3c 01		 cmp	 al, 1
  0005f	75 7d		 jne	 SHORT $LN17@resume
; Line 629
  00061	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
; Line 630
  00065	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00068	03 46 20	 add	 eax, DWORD PTR [esi+32]
; Line 631
  0006b	f6 47 22 02	 test	 BYTE PTR [edi+34], 2
  0006f	89 07		 mov	 DWORD PTR [edi], eax
  00071	74 19		 je	 SHORT $LN3@resume
; Line 632
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 _luaV_execute
  00079	83 c4 04	 add	 esp, 4
; Line 643
  0007c	6a 00		 push	 0
  0007e	56		 push	 esi
  0007f	e8 00 00 00 00	 call	 _unroll
  00084	83 c4 08	 add	 esp, 8
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
; Line 646
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
$LN3@resume:
; Line 634
  0008c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0008f	85 c0		 test	 eax, eax
  00091	74 17		 je	 SHORT $LN1@resume
; Line 636
  00093	ff 77 18	 push	 DWORD PTR [edi+24]
  00096	6a 01		 push	 1
  00098	56		 push	 esi
  00099	ff d0		 call	 eax
; Line 639
  0009b	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0009e	8b d8		 mov	 ebx, eax
  000a0	8b cb		 mov	 ecx, ebx
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	c1 e1 04	 shl	 ecx, 4
  000a8	2b d1		 sub	 edx, ecx
$LN1@resume:
; Line 641
  000aa	53		 push	 ebx
  000ab	52		 push	 edx
  000ac	57		 push	 edi
  000ad	56		 push	 esi
  000ae	e8 00 00 00 00	 call	 _luaD_poscall
  000b3	83 c4 10	 add	 esp, 16			; 00000010H
; Line 643
  000b6	6a 00		 push	 0
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 _unroll
  000be	83 c4 08	 add	 esp, 8
$LN4@resume:
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
; Line 646
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
$LN14@resume:
; Line 618
  000c6	52		 push	 edx
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@
  000cc	56		 push	 esi
  000cd	e8 00 00 00 00	 call	 _resume_error
$LN18@resume:
$LN16@resume:
; Line 621
  000d2	52		 push	 edx
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NAAHDPPN@cannot?5resume?5non?9suspended?5coro@
  000d8	56		 push	 esi
  000d9	e8 00 00 00 00	 call	 _resume_error
$LN19@resume:
$LN17@resume:
; Line 627
  000de	52		 push	 edx
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@
  000e4	56		 push	 esi
  000e5	e8 00 00 00 00	 call	 _resume_error
$LN20@resume:
$LN13@resume:
  000ea	cc		 int	 3
_resume	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _resume_error
_TEXT	SEGMENT
_L$ = 8							; size = 4
_msg$ = 12						; size = 4
_firstArg$ = 16						; size = 4
_resume_error PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 597
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 598
  00004	8b 75 10	 mov	 esi, DWORD PTR _firstArg$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
; Line 599
  0000b	ff 75 0c	 push	 DWORD PTR _msg$[ebp]
  0000e	57		 push	 edi
  0000f	89 77 0c	 mov	 DWORD PTR [edi+12], esi
  00012	e8 00 00 00 00	 call	 _luaS_new
  00017	83 c4 08	 add	 esp, 8
  0001a	89 06		 mov	 DWORD PTR [esi], eax
  0001c	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  00020	83 c8 40	 or	 eax, 64			; 00000040H
; Line 601
  00023	6a ff		 push	 -1
  00025	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00028	83 47 0c 10	 add	 DWORD PTR [edi+12], 16	; 00000010H
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 _luaD_throw
$LN4@resume_err:
$LN3@resume_err:
  00032	cc		 int	 3
_resume_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _recover
_TEXT	SEGMENT
_L$ = 8							; size = 4
_status$ = 12						; size = 4
_recover PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 575
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 577
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  00007	56		 push	 esi
  00008	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]
  0000b	85 f6		 test	 esi, esi
  0000d	74 0e		 je	 SHORT $LN15@recover
  0000f	90		 npad	 1
$LL7@recover:
  00010	f6 46 22 10	 test	 BYTE PTR [esi+34], 16	; 00000010H
  00014	75 0d		 jne	 SHORT $LN1@recover
  00016	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00019	85 f6		 test	 esi, esi
  0001b	75 f3		 jne	 SHORT $LL7@recover
$LN15@recover:
  0001d	5e		 pop	 esi
; Line 578
  0001e	33 c0		 xor	 eax, eax
  00020	5b		 pop	 ebx
; Line 589
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN1@recover:
  00023	57		 push	 edi
; Line 580
  00024	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00027	03 7b 20	 add	 edi, DWORD PTR [ebx+32]
; Line 581
  0002a	57		 push	 edi
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 _luaF_close
; Line 582
  00031	57		 push	 edi
  00032	ff 75 0c	 push	 DWORD PTR _status$[ebp]
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 _seterrorobj
; Line 583
  0003b	89 73 14	 mov	 DWORD PTR [ebx+20], esi
; Line 584
  0003e	8a 46 22	 mov	 al, BYTE PTR [esi+34]
  00041	24 01		 and	 al, 1
  00043	88 43 71	 mov	 BYTE PTR [ebx+113], al
; Line 585
  00046	33 c0		 xor	 eax, eax
; Line 586
  00048	53		 push	 ebx
  00049	66 89 43 6c	 mov	 WORD PTR [ebx+108], ax
  0004d	e8 00 00 00 00	 call	 _luaD_shrinkstack
; Line 587
  00052	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00055	83 c4 18	 add	 esp, 24			; 00000018H
  00058	89 43 5c	 mov	 DWORD PTR [ebx+92], eax
; Line 588
  0005b	b8 01 00 00 00	 mov	 eax, 1
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
; Line 589
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_recover ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _findpcall
_TEXT	SEGMENT
_L$ = 8							; size = 4
_findpcall PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 560
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 562
  00003	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  00006	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00009	85 c0		 test	 eax, eax
  0000b	74 10		 je	 SHORT $LN2@findpcall
  0000d	8d 49 00	 npad	 3
$LL4@findpcall:
; Line 563
  00010	f6 40 22 10	 test	 BYTE PTR [eax+34], 16	; 00000010H
  00014	75 09		 jne	 SHORT $LN5@findpcall
; Line 562
  00016	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00019	85 c0		 test	 eax, eax
  0001b	75 f3		 jne	 SHORT $LL4@findpcall
$LN2@findpcall:
; Line 566
  0001d	33 c0		 xor	 eax, eax
$LN5@findpcall:
; Line 567
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_findpcall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _unroll
_TEXT	SEGMENT
_wanted$1$ = 8						; size = 4
_L$ = 8							; size = 4
_n$1$ = 12						; size = 4
_ud$ = 12						; size = 4
_unroll	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 542
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 543
  00003	8b 45 0c	 mov	 eax, DWORD PTR _ud$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000a	85 c0		 test	 eax, eax
  0000c	74 0b		 je	 SHORT $LN16@unroll
; Line 544
  0000e	ff 30		 push	 DWORD PTR [eax]
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 _finishCcall
  00016	83 c4 08	 add	 esp, 8
$LN16@unroll:
; Line 545
  00019	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  0001c	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  0001f	0f 84 c9 00 00
	00		 je	 $LN3@unroll
  00025	53		 push	 ebx
  00026	57		 push	 edi
  00027	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL4@unroll:
; Line 546
  00030	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00033	f6 43 22 02	 test	 BYTE PTR [ebx+34], 2
  00037	0f 85 94 00 00
	00		 jne	 $LN2@unroll
; Line 547
  0003d	8a 43 22	 mov	 al, BYTE PTR [ebx+34]
  00040	a8 10		 test	 al, 16			; 00000010H
  00042	74 0b		 je	 SHORT $LN9@unroll
  00044	24 ef		 and	 al, 239			; 000000efH
  00046	88 43 22	 mov	 BYTE PTR [ebx+34], al
  00049	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0004c	89 46 5c	 mov	 DWORD PTR [esi+92], eax
$LN9@unroll:
  0004f	66 83 7b 20 ff	 cmp	 WORD PTR [ebx+32], -1
  00054	75 0e		 jne	 SHORT $LN8@unroll
  00056	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00059	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005c	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0005f	73 03		 jae	 SHORT $LN8@unroll
  00061	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN8@unroll:
  00064	ff 73 18	 push	 DWORD PTR [ebx+24]
  00067	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0006a	6a 01		 push	 1
  0006c	56		 push	 esi
  0006d	ff d0		 call	 eax
  0006f	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00072	8b f8		 mov	 edi, eax
  00074	0f bf 43 20	 movsx	 eax, WORD PTR [ebx+32]
  00078	8b cf		 mov	 ecx, edi
  0007a	c1 e1 04	 shl	 ecx, 4
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	2b d1		 sub	 edx, ecx
  00082	89 7d 0c	 mov	 DWORD PTR _n$1$[ebp], edi
  00085	8a 4e 70	 mov	 cl, BYTE PTR [esi+112]
  00088	89 45 08	 mov	 DWORD PTR _wanted$1$[ebp], eax
  0008b	f6 c1 06	 test	 cl, 6
  0008e	74 28		 je	 SHORT $LN13@unroll
  00090	f6 c1 02	 test	 cl, 2
  00093	74 1a		 je	 SHORT $LN12@unroll
  00095	2b 56 20	 sub	 edx, DWORD PTR [esi+32]
  00098	6a ff		 push	 -1
  0009a	6a 01		 push	 1
  0009c	56		 push	 esi
  0009d	8b fa		 mov	 edi, edx
  0009f	e8 00 00 00 00	 call	 _luaD_hook
  000a4	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000aa	03 d7		 add	 edx, edi
  000ac	8b 7d 0c	 mov	 edi, DWORD PTR _n$1$[ebp]
$LN12@unroll:
  000af	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000b2	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  000b5	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN13@unroll:
  000b8	ff 75 08	 push	 DWORD PTR _wanted$1$[ebp]
  000bb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000bd	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000c0	57		 push	 edi
  000c1	51		 push	 ecx
  000c2	52		 push	 edx
  000c3	56		 push	 esi
  000c4	89 46 14	 mov	 DWORD PTR [esi+20], eax
  000c7	e8 00 00 00 00	 call	 _moveresults
  000cc	83 c4 14	 add	 esp, 20			; 00000014H
; Line 548
  000cf	eb 0f		 jmp	 SHORT $LN1@unroll
$LN2@unroll:
; Line 549
  000d1	56		 push	 esi
  000d2	e8 00 00 00 00	 call	 _luaV_finishOp
; Line 550
  000d7	56		 push	 esi
  000d8	e8 00 00 00 00	 call	 _luaV_execute
  000dd	83 c4 08	 add	 esp, 8
$LN1@unroll:
; Line 545
  000e0	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  000e3	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  000e6	0f 85 44 ff ff
	ff		 jne	 $LL4@unroll
  000ec	5f		 pop	 edi
  000ed	5b		 pop	 ebx
$LN3@unroll:
  000ee	5e		 pop	 esi
; Line 553
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
_unroll	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _finishCcall
_TEXT	SEGMENT
_L$ = 8							; size = 4
_status$ = 12						; size = 4
_finishCcall PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 510
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 511
  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
; Line 517
  0000b	8a 46 22	 mov	 al, BYTE PTR [esi+34]
  0000e	a8 10		 test	 al, 16			; 00000010H
  00010	74 0b		 je	 SHORT $LN2@finishCcal
; Line 518
  00012	24 ef		 and	 al, 239			; 000000efH
  00014	88 46 22	 mov	 BYTE PTR [esi+34], al
; Line 519
  00017	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001a	89 47 5c	 mov	 DWORD PTR [edi+92], eax
$LN2@finishCcal:
; Line 523
  0001d	66 83 7e 20 ff	 cmp	 WORD PTR [esi+32], -1
  00022	75 0e		 jne	 SHORT $LN1@finishCcal
  00024	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00027	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0002a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0002d	73 03		 jae	 SHORT $LN1@finishCcal
  0002f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@finishCcal:
; Line 526
  00032	ff 76 18	 push	 DWORD PTR [esi+24]
  00035	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00038	ff 75 0c	 push	 DWORD PTR _status$[ebp]
  0003b	57		 push	 edi
  0003c	ff d0		 call	 eax
; Line 530
  0003e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00041	50		 push	 eax
  00042	c1 e0 04	 shl	 eax, 4
  00045	2b c8		 sub	 ecx, eax
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	57		 push	 edi
  0004a	e8 00 00 00 00	 call	 _luaD_poscall
  0004f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
; Line 531
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_finishCcall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _stackerror
_TEXT	SEGMENT
_L$ = 8							; size = 4
_stackerror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 473
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 474
  00003	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  00006	ba c8 00 00 00	 mov	 edx, 200		; 000000c8H
  0000b	0f b7 48 6e	 movzx	 ecx, WORD PTR [eax+110]
  0000f	66 3b ca	 cmp	 cx, dx
  00012	74 0c		 je	 SHORT $LN7@stackerror
; Line 476
  00014	ba e1 00 00 00	 mov	 edx, 225		; 000000e1H
  00019	66 3b ca	 cmp	 cx, dx
  0001c	73 0d		 jae	 SHORT $LN9@stackerror
; Line 478
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
$LN7@stackerror:
; Line 475
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _luaG_runerror
$LN10@stackerror:
$LN9@stackerror:
; Line 477
  0002b	6a 06		 push	 6
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _luaD_throw
$LN11@stackerror:
$LN6@stackerror:
  00033	cc		 int	 3
_stackerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _moveresults
_TEXT	SEGMENT
_L$ = 8							; size = 4
_firstResult$ = 12					; size = 4
_res$ = 16						; size = 4
_nres$ = 20						; size = 4
_wanted$ = 24						; size = 4
_moveresults PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 407
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 408
  00003	8b 4d 18	 mov	 ecx, DWORD PTR _wanted$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	83 f9 ff	 cmp	 ecx, -1
  0000b	0f 84 ac 00 00
	00		 je	 $LN16@moveresult
  00011	8b 75 10	 mov	 esi, DWORD PTR _res$[ebp]
  00014	53		 push	 ebx
  00015	85 c9		 test	 ecx, ecx
  00017	0f 84 8b 00 00
	00		 je	 $LN19@moveresult
  0001d	83 f9 01	 cmp	 ecx, 1
  00020	74 71		 je	 SHORT $LN18@moveresult
; Line 425
  00022	8b 55 14	 mov	 edx, DWORD PTR _nres$[ebp]
  00025	3b ca		 cmp	 ecx, edx
  00027	7f 2a		 jg	 SHORT $LN11@moveresult
; Line 426
  00029	85 c9		 test	 ecx, ecx
  0002b	7e 7b		 jle	 SHORT $LN19@moveresult
  0002d	8b 7d 0c	 mov	 edi, DWORD PTR _firstResult$[ebp]
  00030	8b c6		 mov	 eax, esi
  00032	2b fe		 sub	 edi, esi
  00034	8b d1		 mov	 edx, ecx
  00036	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL10@moveresult:
  00040	8d 40 10	 lea	 eax, DWORD PTR [eax+16]
; Line 427
  00043	f3 0f 6f 44 07
	f0		 movdqu	 xmm0, XMMWORD PTR [edi+eax-16]
  00049	f3 0f 7f 40 f0	 movdqu	 XMMWORD PTR [eax-16], xmm0
  0004e	4a		 dec	 edx
  0004f	75 ef		 jne	 SHORT $LL10@moveresult
; Line 429
  00051	eb 55		 jmp	 SHORT $LN19@moveresult
$LN11@moveresult:
; Line 430
  00053	33 db		 xor	 ebx, ebx
  00055	85 d2		 test	 edx, edx
  00057	7e 1a		 jle	 SHORT $LN4@moveresult
  00059	8b 7d 0c	 mov	 edi, DWORD PTR _firstResult$[ebp]
  0005c	8b c6		 mov	 eax, esi
  0005e	2b fe		 sub	 edi, esi
  00060	8b da		 mov	 ebx, edx
$LL6@moveresult:
  00062	8d 40 10	 lea	 eax, DWORD PTR [eax+16]
; Line 431
  00065	f3 0f 6f 44 38
	f0		 movdqu	 xmm0, XMMWORD PTR [eax+edi-16]
  0006b	f3 0f 7f 40 f0	 movdqu	 XMMWORD PTR [eax-16], xmm0
  00070	4a		 dec	 edx
  00071	75 ef		 jne	 SHORT $LL6@moveresult
$LN4@moveresult:
; Line 432
  00073	3b d9		 cmp	 ebx, ecx
  00075	7d 31		 jge	 SHORT $LN19@moveresult
  00077	8b c3		 mov	 eax, ebx
  00079	8b d1		 mov	 edx, ecx
  0007b	c1 e0 04	 shl	 eax, 4
  0007e	83 c0 08	 add	 eax, 8
  00081	03 c6		 add	 eax, esi
  00083	2b d3		 sub	 edx, ebx
$LL3@moveresult:
; Line 433
  00085	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0008b	8d 40 10	 lea	 eax, DWORD PTR [eax+16]
  0008e	4a		 dec	 edx
  0008f	75 f4		 jne	 SHORT $LL3@moveresult
; Line 435
  00091	eb 15		 jmp	 SHORT $LN19@moveresult
$LN18@moveresult:
; Line 411
  00093	83 7d 14 00	 cmp	 DWORD PTR _nres$[ebp], 0
  00097	b8 00 00 00 00	 mov	 eax, OFFSET _luaO_nilobject_
  0009c	0f 45 45 0c	 cmovne	 eax, DWORD PTR _firstResult$[ebp]
; Line 413
  000a0	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  000a4	f3 0f 7f 06	 movdqu	 XMMWORD PTR [esi], xmm0
$LN19@moveresult:
; Line 438
  000a8	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  000ab	c1 e1 04	 shl	 ecx, 4
  000ae	5b		 pop	 ebx
  000af	03 ce		 add	 ecx, esi
  000b1	5f		 pop	 edi
  000b2	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; Line 439
  000b5	b8 01 00 00 00	 mov	 eax, 1
  000ba	5e		 pop	 esi
; Line 440
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN16@moveresult:
; Line 418
  000bd	8b 4d 14	 mov	 ecx, DWORD PTR _nres$[ebp]
  000c0	8b 7d 10	 mov	 edi, DWORD PTR _res$[ebp]
  000c3	85 c9		 test	 ecx, ecx
  000c5	7e 1a		 jle	 SHORT $LN13@moveresult
  000c7	8b 75 0c	 mov	 esi, DWORD PTR _firstResult$[ebp]
  000ca	8b c7		 mov	 eax, edi
  000cc	2b f7		 sub	 esi, edi
  000ce	8b d1		 mov	 edx, ecx
$LL15@moveresult:
  000d0	8d 40 10	 lea	 eax, DWORD PTR [eax+16]
; Line 419
  000d3	f3 0f 6f 44 30
	f0		 movdqu	 xmm0, XMMWORD PTR [eax+esi-16]
  000d9	f3 0f 7f 40 f0	 movdqu	 XMMWORD PTR [eax-16], xmm0
  000de	4a		 dec	 edx
  000df	75 ef		 jne	 SHORT $LL15@moveresult
$LN13@moveresult:
; Line 420
  000e1	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  000e4	c1 e1 04	 shl	 ecx, 4
  000e7	03 cf		 add	 ecx, edi
  000e9	5f		 pop	 edi
  000ea	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; Line 421
  000ed	33 c0		 xor	 eax, eax
  000ef	5e		 pop	 esi
; Line 440
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
_moveresults ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _tryfuncTM
_TEXT	SEGMENT
_L$ = 8							; size = 4
_func$ = 12						; size = 4
_tryfuncTM PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 307
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 308
  00004	8b 75 0c	 mov	 esi, DWORD PTR _func$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000b	6a 17		 push	 23			; 00000017H
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _luaT_gettmbyobj
  00014	8b d0		 mov	 edx, eax
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 310
  00019	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0001c	83 e1 0f	 and	 ecx, 15			; 0000000fH
  0001f	80 f9 06	 cmp	 cl, 6
  00022	75 2e		 jne	 SHORT $LN12@tryfuncTM
; Line 313
  00024	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00027	3b c6		 cmp	 eax, esi
  00029	76 17		 jbe	 SHORT $LN1@tryfuncTM
  0002b	8d 48 f0	 lea	 ecx, DWORD PTR [eax-16]
  0002e	8b ff		 npad	 2
$LL3@tryfuncTM:
; Line 314
  00030	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  00034	8d 49 f0	 lea	 ecx, DWORD PTR [ecx-16]
  00037	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
  0003b	83 e8 10	 sub	 eax, 16			; 00000010H
  0003e	3b c6		 cmp	 eax, esi
  00040	77 ee		 ja	 SHORT $LL3@tryfuncTM
$LN1@tryfuncTM:
; Line 315
  00042	83 47 0c 10	 add	 DWORD PTR [edi+12], 16	; 00000010H
; Line 316
  00046	f3 0f 6f 02	 movdqu	 xmm0, XMMWORD PTR [edx]
  0004a	5f		 pop	 edi
  0004b	f3 0f 7f 06	 movdqu	 XMMWORD PTR [esi], xmm0
  0004f	5e		 pop	 esi
; Line 317
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN12@tryfuncTM:
; Line 311
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_04OMFAIDPG@call?$AA@
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 _luaG_typeerror
$LN14@tryfuncTM:
$LN11@tryfuncTM:
  0005e	cc		 int	 3
_tryfuncTM ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _adjust_varargs
_TEXT	SEGMENT
_L$ = 8							; size = 4
_base$1$ = 12						; size = 4
_p$ = 12						; size = 4
_actual$ = 16						; size = 4
_adjust_varargs PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 285
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 287
  00003	8b 45 0c	 mov	 eax, DWORD PTR _p$[ebp]
; Line 290
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _L$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _actual$[ebp]
  0000e	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00011	8b da		 mov	 ebx, edx
  00013	57		 push	 edi
  00014	0f b6 78 06	 movzx	 edi, BYTE PTR [eax+6]
  00018	8b c6		 mov	 eax, esi
  0001a	c1 e0 04	 shl	 eax, 4
  0001d	2b d8		 sub	 ebx, eax
  0001f	89 55 0c	 mov	 DWORD PTR _base$1$[ebp], edx
; Line 292
  00022	33 c0		 xor	 eax, eax
  00024	85 ff		 test	 edi, edi
  00026	7e 51		 jle	 SHORT $LN18@adjust_var
$LL6@adjust_var:
  00028	3b c6		 cmp	 eax, esi
  0002a	7d 2b		 jge	 SHORT $LN4@adjust_var
; Line 293
  0002c	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  0002f	40		 inc	 eax
  00030	8d 56 10	 lea	 edx, DWORD PTR [esi+16]
  00033	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00036	f3 0f 6f 03	 movdqu	 xmm0, XMMWORD PTR [ebx]
  0003a	f3 0f 7f 06	 movdqu	 XMMWORD PTR [esi], xmm0
  0003e	8b 75 10	 mov	 esi, DWORD PTR _actual$[ebp]
; Line 294
  00041	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00048	83 c3 10	 add	 ebx, 16			; 00000010H
  0004b	3b c7		 cmp	 eax, edi
  0004d	7c d9		 jl	 SHORT $LL6@adjust_var
$LN17@adjust_var:
; Line 298
  0004f	8b 45 0c	 mov	 eax, DWORD PTR _base$1$[ebp]
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
; Line 299
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN4@adjust_var:
; Line 296
  00057	3b c7		 cmp	 eax, edi
  00059	7d f4		 jge	 SHORT $LN17@adjust_var
  0005b	2b f8		 sub	 edi, eax
  0005d	8d 49 00	 npad	 3
$LL3@adjust_var:
; Line 297
  00060	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00063	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0006a	83 41 0c 10	 add	 DWORD PTR [ecx+12], 16	; 00000010H
  0006e	4f		 dec	 edi
  0006f	75 ef		 jne	 SHORT $LL3@adjust_var
; Line 298
  00071	8b 45 0c	 mov	 eax, DWORD PTR _base$1$[ebp]
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
; Line 299
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN18@adjust_var:
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
; Line 298
  0007b	8b c2		 mov	 eax, edx
  0007d	5b		 pop	 ebx
; Line 299
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
_adjust_varargs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _callhook
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ci$ = 12						; size = 4
_callhook PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 272
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 274
  00004	8b 75 0c	 mov	 esi, DWORD PTR _ci$[ebp]
  00007	33 c9		 xor	 ecx, ecx
; Line 276
  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	83 46 14 04	 add	 DWORD PTR [esi+20], 4
  00010	f6 40 22 02	 test	 BYTE PTR [eax+34], 2
  00014	74 16		 je	 SHORT $LN1@callhook
  00016	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00019	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
  0001c	83 e0 3f	 and	 eax, 63			; 0000003fH
  0001f	3c 25		 cmp	 al, 37			; 00000025H
  00021	75 09		 jne	 SHORT $LN1@callhook
; Line 277
  00023	80 4e 22 20	 or	 BYTE PTR [esi+34], 32	; 00000020H
; Line 278
  00027	b9 04 00 00 00	 mov	 ecx, 4
$LN1@callhook:
; Line 280
  0002c	6a ff		 push	 -1
  0002e	51		 push	 ecx
  0002f	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00032	e8 00 00 00 00	 call	 _luaD_hook
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 281
  0003a	83 46 14 fc	 add	 DWORD PTR [esi+20], -4	; fffffffcH
  0003e	5e		 pop	 esi
; Line 282
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_callhook ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _stackinuse
_TEXT	SEGMENT
_L$ = 8							; size = 4
_stackinuse PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 210
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 212
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
; Line 213
  00007	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0000a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000d	85 d2		 test	 edx, edx
  0000f	74 0e		 je	 SHORT $LN2@stackinuse
$LL4@stackinuse:
; Line 215
  00011	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00014	0f 42 42 04	 cmovb	 eax, DWORD PTR [edx+4]
  00018	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0001b	85 d2		 test	 edx, edx
  0001d	75 f2		 jne	 SHORT $LL4@stackinuse
$LN2@stackinuse:
; Line 217
  0001f	2b 46 20	 sub	 eax, DWORD PTR [esi+32]
  00022	c1 f8 04	 sar	 eax, 4
  00025	40		 inc	 eax
  00026	5e		 pop	 esi
; Line 218
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_stackinuse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _correctstack
_TEXT	SEGMENT
_L$ = 8							; size = 4
_oldstack$ = 12						; size = 4
_correctstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 158
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 161
  00003	8b 55 08	 mov	 edx, DWORD PTR _L$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _oldstack$[ebp]
  0000a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
; Line 162
  0000d	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  00010	2b c6		 sub	 eax, esi
  00012	83 e0 f0	 and	 eax, -16		; fffffff0H
  00015	03 42 20	 add	 eax, DWORD PTR [edx+32]
  00018	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  0001b	85 c9		 test	 ecx, ecx
  0001d	74 14		 je	 SHORT $LN5@correctsta
  0001f	90		 npad	 1
$LL7@correctsta:
; Line 163
  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	2b c6		 sub	 eax, esi
  00024	83 e0 f0	 and	 eax, -16		; fffffff0H
  00027	03 42 20	 add	 eax, DWORD PTR [edx+32]
  0002a	89 01		 mov	 DWORD PTR [ecx], eax
  0002c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0002f	85 c9		 test	 ecx, ecx
  00031	75 ed		 jne	 SHORT $LL7@correctsta
$LN5@correctsta:
; Line 164
  00033	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00036	85 c0		 test	 eax, eax
  00038	74 3b		 je	 SHORT $LN2@correctsta
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL4@correctsta:
; Line 165
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	2b ce		 sub	 ecx, esi
  00045	83 e1 f0	 and	 ecx, -16		; fffffff0H
  00048	03 4a 20	 add	 ecx, DWORD PTR [edx+32]
  0004b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; Line 166
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	2b ce		 sub	 ecx, esi
  00052	83 e1 f0	 and	 ecx, -16		; fffffff0H
  00055	03 4a 20	 add	 ecx, DWORD PTR [edx+32]
; Line 167
  00058	f6 40 22 02	 test	 BYTE PTR [eax+34], 2
  0005c	89 08		 mov	 DWORD PTR [eax], ecx
  0005e	74 0e		 je	 SHORT $LN3@correctsta
; Line 168
  00060	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00063	2b ce		 sub	 ecx, esi
  00065	83 e1 f0	 and	 ecx, -16		; fffffff0H
  00068	03 4a 20	 add	 ecx, DWORD PTR [edx+32]
  0006b	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN3@correctsta:
; Line 164
  0006e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00071	85 c0		 test	 eax, eax
  00073	75 cb		 jne	 SHORT $LL4@correctsta
$LN2@correctsta:
  00075	5e		 pop	 esi
; Line 170
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_correctstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _seterrorobj
_TEXT	SEGMENT
_L$ = 8							; size = 4
_errcode$ = 12						; size = 4
_oldtop$ = 16						; size = 4
_seterrorobj PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 91
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 92
  00003	8b 45 0c	 mov	 eax, DWORD PTR _errcode$[ebp]
  00006	83 e8 04	 sub	 eax, 4
  00009	74 4b		 je	 SHORT $LN3@seterrorob
  0000b	83 e8 02	 sub	 eax, 2
  0000e	74 1a		 je	 SHORT $LN2@seterrorob
; Line 102
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _L$[ebp]
  00013	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00016	f3 0f 6f 40 f0	 movdqu	 xmm0, XMMWORD PTR [eax-16]
  0001b	8b 45 10	 mov	 eax, DWORD PTR _oldtop$[ebp]
  0001e	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
; Line 106
  00022	83 c0 10	 add	 eax, 16			; 00000010H
  00025	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; Line 107
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN2@seterrorob:
  0002a	56		 push	 esi
; Line 98
  0002b	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0002e	6a 17		 push	 23			; 00000017H
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KGOCJOGJ@error?5in?5error?5handling?$AA@
  00035	56		 push	 esi
  00036	e8 00 00 00 00	 call	 _luaS_newlstr
  0003b	8b 4d 10	 mov	 ecx, DWORD PTR _oldtop$[ebp]
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	89 01		 mov	 DWORD PTR [ecx], eax
  00043	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  00047	83 c8 40	 or	 eax, 64			; 00000040H
  0004a	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; Line 106
  0004d	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00050	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00053	5e		 pop	 esi
; Line 107
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN3@seterrorob:
; Line 94
  00056	8b 55 08	 mov	 edx, DWORD PTR _L$[ebp]
  00059	8b 4d 10	 mov	 ecx, DWORD PTR _oldtop$[ebp]
  0005c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0005f	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  00065	89 01		 mov	 DWORD PTR [ecx], eax
  00067	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0006b	83 c8 40	 or	 eax, 64			; 00000040H
  0006e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; Line 106
  00071	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00074	89 42 0c	 mov	 DWORD PTR [edx+12], eax
; Line 107
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_seterrorobj ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_rawrunprotected
_TEXT	SEGMENT
_ud$GSCopy$ = -92					; size = 4
_L$GSCopy$ = -88					; size = 4
_oldnCcalls$ = -84					; size = 2
_f$GSCopy$ = -80					; size = 4
_lj$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_f$ = 12						; size = 4
_ud$ = 16						; size = 4
_luaD_rawrunprotected PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 136
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _L$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _f$[ebp]
  00016	89 45 b0	 mov	 DWORD PTR _f$GSCopy$[ebp], eax
  00019	8b 45 10	 mov	 eax, DWORD PTR _ud$[ebp]
  0001c	89 45 a4	 mov	 DWORD PTR _ud$GSCopy$[ebp], eax
; Line 137
  0001f	0f b7 41 6e	 movzx	 eax, WORD PTR [ecx+110]
  00023	89 45 ac	 mov	 DWORD PTR _oldnCcalls$[ebp], eax
  00026	89 4d a8	 mov	 DWORD PTR _L$GSCopy$[ebp], ecx
; Line 139
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _lj$[ebp+68], 0
; Line 140
  00030	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00033	89 45 b4	 mov	 DWORD PTR _lj$[ebp], eax
; Line 141
  00036	8d 45 b4	 lea	 eax, DWORD PTR _lj$[ebp]
  00039	56		 push	 esi
  0003a	89 41 30	 mov	 DWORD PTR [ecx+48], eax
; Line 144
  0003d	8d 45 b8	 lea	 eax, DWORD PTR _lj$[ebp+4]
  00040	6a 00		 push	 0
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 __setjmp3
  00048	8b 75 a8	 mov	 esi, DWORD PTR _L$GSCopy$[ebp]
  0004b	83 c4 08	 add	 esp, 8
  0004e	85 c0		 test	 eax, eax
  00050	75 0a		 jne	 SHORT $LN1@luaD_rawru
  00052	ff 75 a4	 push	 DWORD PTR _ud$GSCopy$[ebp]
  00055	56		 push	 esi
  00056	ff 55 b0	 call	 DWORD PTR _f$GSCopy$[ebp]
  00059	83 c4 08	 add	 esp, 8
$LN1@luaD_rawru:
; Line 145
  0005c	8b 45 b4	 mov	 eax, DWORD PTR _lj$[ebp]
  0005f	89 46 30	 mov	 DWORD PTR [esi+48], eax
; Line 146
  00062	66 8b 45 ac	 mov	 ax, WORD PTR _oldnCcalls$[ebp]
  00066	66 89 46 6e	 mov	 WORD PTR [esi+110], ax
; Line 147
  0006a	8b 45 f8	 mov	 eax, DWORD PTR _lj$[ebp+68]
; Line 148
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	5e		 pop	 esi
  00073	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_luaD_rawrunprotected ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_throw
_TEXT	SEGMENT
_L$ = 8							; size = 4
_errcode$ = 12						; size = 4
_luaD_throw PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 110
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 111
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _errcode$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	57		 push	 edi
  0000c	83 7e 30 00	 cmp	 DWORD PTR [esi+48], 0
  00010	75 2d		 jne	 SHORT $LN11@luaD_throw
$LL9@luaD_throw:
; Line 116
  00012	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
; Line 117
  00015	88 5e 08	 mov	 BYTE PTR [esi+8], bl
; Line 118
  00018	8b 57 7c	 mov	 edx, DWORD PTR [edi+124]
  0001b	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  0001f	74 33		 je	 SHORT $LN4@luaD_throw
; Line 119
  00021	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00024	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00027	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  0002a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0002d	f3 0f 6f 40 f0	 movdqu	 xmm0, XMMWORD PTR [eax-16]
  00032	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
; Line 120
  00036	8b 77 7c	 mov	 esi, DWORD PTR [edi+124]
  00039	83 7e 30 00	 cmp	 DWORD PTR [esi+48], 0
  0003d	74 d3		 je	 SHORT $LL9@luaD_throw
$LN11@luaD_throw:
; Line 112
  0003f	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; Line 113
  00042	6a 01		 push	 1
  00044	89 58 44	 mov	 DWORD PTR [eax+68], ebx
  00047	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0004a	83 c0 04	 add	 eax, 4
  0004d	50		 push	 eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__longjmp
$LN16@luaD_throw:
$LN4@luaD_throw:
; Line 123
  00054	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  00058	74 24		 je	 SHORT $LN2@luaD_throw
; Line 124
  0005a	ff 76 0c	 push	 DWORD PTR [esi+12]
  0005d	53		 push	 ebx
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 _seterrorobj
; Line 125
  00064	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0006d	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00070	73 03		 jae	 SHORT $LN1@luaD_throw
; Line 126
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@luaD_throw:
; Line 128
  00075	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00078	56		 push	 esi
  00079	ff d0		 call	 eax
  0007b	83 c4 04	 add	 esp, 4
$LN2@luaD_throw:
; Line 130
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__abort
$LN17@luaD_throw:
$LN15@luaD_throw:
  00084	cc		 int	 3
_luaD_throw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_inctop
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaD_inctop PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 237
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 238
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000a	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  0000d	83 e0 f0	 and	 eax, -16		; fffffff0H
  00010	83 f8 10	 cmp	 eax, 16			; 00000010H
  00013	7f 0b		 jg	 SHORT $LN5@luaD_incto
  00015	6a 01		 push	 1
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 _luaD_growstack
  0001d	83 c4 08	 add	 esp, 8
$LN5@luaD_incto:
; Line 239
  00020	83 46 0c 10	 add	 DWORD PTR [esi+12], 16	; 00000010H
  00024	5e		 pop	 esi
; Line 240
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_luaD_inctop ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_shrinkstack
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaD_shrinkstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 221
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; Line 222
  00006	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00009	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0000c	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 0e		 je	 SHORT $LN9@luaD_shrin
$LL11@luaD_shrin:
  00013	3b 71 04	 cmp	 esi, DWORD PTR [ecx+4]
  00016	0f 42 71 04	 cmovb	 esi, DWORD PTR [ecx+4]
  0001a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0001d	85 c9		 test	 ecx, ecx
  0001f	75 f2		 jne	 SHORT $LL11@luaD_shrin
$LN9@luaD_shrin:
  00021	2b 77 20	 sub	 esi, DWORD PTR [edi+32]
  00024	c1 fe 04	 sar	 esi, 4
  00027	46		 inc	 esi
; Line 223
  00028	8b c6		 mov	 eax, esi
  0002a	99		 cdq
  0002b	83 e2 07	 and	 edx, 7
; Line 226
  0002e	57		 push	 edi
  0002f	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]
  00032	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  00037	c1 fb 03	 sar	 ebx, 3
  0003a	83 c3 0a	 add	 ebx, 10			; 0000000aH
  0003d	03 de		 add	 ebx, esi
  0003f	3b d8		 cmp	 ebx, eax
  00041	0f 4f d8	 cmovg	 ebx, eax
  00044	39 47 60	 cmp	 DWORD PTR [edi+96], eax
  00047	7e 07		 jle	 SHORT $LN4@luaD_shrin
  00049	e8 00 00 00 00	 call	 _luaE_freeCI
; Line 227
  0004e	eb 05		 jmp	 SHORT $LN18@luaD_shrin
$LN4@luaD_shrin:
; Line 228
  00050	e8 00 00 00 00	 call	 _luaE_shrinkCI
$LN18@luaD_shrin:
  00055	83 c4 04	 add	 esp, 4
; Line 230
  00058	81 fe 40 42 0f
	00		 cmp	 esi, 1000000		; 000f4240H
  0005e	7f 0f		 jg	 SHORT $LN2@luaD_shrin
  00060	3b 5f 60	 cmp	 ebx, DWORD PTR [edi+96]
  00063	7d 0a		 jge	 SHORT $LN2@luaD_shrin
; Line 231
  00065	53		 push	 ebx
  00066	57		 push	 edi
  00067	e8 00 00 00 00	 call	 _luaD_reallocstack
  0006c	83 c4 08	 add	 esp, 8
$LN2@luaD_shrin:
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
; Line 234
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_luaD_shrinkstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_growstack
_TEXT	SEGMENT
_L$ = 8							; size = 4
_n$ = 12						; size = 4
_luaD_growstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 191
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 192
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	8b 56 60	 mov	 edx, DWORD PTR [esi+96]
; Line 193
  0000a	81 fa 40 42 0f
	00		 cmp	 edx, 1000000		; 000f4240H
  00010	7f 34		 jg	 SHORT $LN10@luaD_grows
; Line 196
  00012	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00015	2b 4e 20	 sub	 ecx, DWORD PTR [esi+32]
  00018	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  0001b	c1 f9 04	 sar	 ecx, 4
  0001e	83 c0 05	 add	 eax, 5
  00021	03 c1		 add	 eax, ecx
; Line 197
  00023	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]
; Line 198
  00026	ba 40 42 0f 00	 mov	 edx, 1000000		; 000f4240H
  0002b	3b ca		 cmp	 ecx, edx
  0002d	0f 4f ca	 cmovg	 ecx, edx
; Line 199
  00030	3b c8		 cmp	 ecx, eax
  00032	0f 4c c8	 cmovl	 ecx, eax
; Line 200
  00035	3b ca		 cmp	 ecx, edx
  00037	7f 15		 jg	 SHORT $LN12@luaD_grows
; Line 205
  00039	51		 push	 ecx
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _luaD_reallocstack
  00040	83 c4 08	 add	 esp, 8
  00043	5e		 pop	 esi
; Line 207
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN10@luaD_grows:
; Line 194
  00046	6a 06		 push	 6
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 _luaD_throw
$LN13@luaD_grows:
$LN12@luaD_grows:
; Line 201
  0004e	68 08 43 0f 00	 push	 1000200			; 000f4308H
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 _luaD_reallocstack
  00059	83 c4 08	 add	 esp, 8
; Line 202
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _luaG_runerror
$LN14@luaD_grows:
$LN9@luaD_grows:
  00067	cc		 int	 3
_luaD_growstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_reallocstack
_TEXT	SEGMENT
_lim$1$ = 8						; size = 4
_L$ = 8							; size = 4
_newsize$ = 12						; size = 4
_luaD_reallocstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 177
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 182
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _newsize$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000a	57		 push	 edi
  0000b	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0000e	8b 56 60	 mov	 edx, DWORD PTR [esi+96]
  00011	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  00014	89 55 08	 mov	 DWORD PTR _lim$1$[ebp], edx
  00017	3d ff ff ff 0f	 cmp	 eax, 268435455		; 0fffffffH
  0001c	0f 87 b7 00 00
	00		 ja	 $LN30@luaD_reall
  00022	53		 push	 ebx
  00023	8b c1		 mov	 eax, ecx
  00025	8b da		 mov	 ebx, edx
  00027	c1 e0 04	 shl	 eax, 4
  0002a	50		 push	 eax
  0002b	c1 e3 04	 shl	 ebx, 4
  0002e	53		 push	 ebx
  0002f	57		 push	 edi
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _luaM_realloc_
; Line 183
  00036	8b 55 0c	 mov	 edx, DWORD PTR _newsize$[ebp]
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0003f	8b 45 08	 mov	 eax, DWORD PTR _lim$1$[ebp]
  00042	3b c2		 cmp	 eax, edx
  00044	7d 1b		 jge	 SHORT $LN1@luaD_reall
; Line 182
  00046	8b ca		 mov	 ecx, edx
  00048	2b c8		 sub	 ecx, eax
  0004a	8d 9b 00 00 00
	00		 npad	 6
$LL3@luaD_reall:
; Line 184
  00050	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00053	8d 5b 10	 lea	 ebx, DWORD PTR [ebx+16]
  00056	c7 44 03 f8 00
	00 00 00	 mov	 DWORD PTR [ebx+eax-8], 0
  0005e	49		 dec	 ecx
  0005f	75 ef		 jne	 SHORT $LL3@luaD_reall
$LN1@luaD_reall:
; Line 187
  00061	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00064	8d 42 fb	 lea	 eax, DWORD PTR [edx-5]
  00067	c1 e0 04	 shl	 eax, 4
  0006a	03 46 20	 add	 eax, DWORD PTR [esi+32]
  0006d	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00070	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00073	2b c7		 sub	 eax, edi
  00075	89 56 60	 mov	 DWORD PTR [esi+96], edx
  00078	83 e0 f0	 and	 eax, -16		; fffffff0H
  0007b	03 46 20	 add	 eax, DWORD PTR [esi+32]
  0007e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00081	5b		 pop	 ebx
  00082	85 c9		 test	 ecx, ecx
  00084	74 13		 je	 SHORT $LN12@luaD_reall
$LL14@luaD_reall:
  00086	8b 01		 mov	 eax, DWORD PTR [ecx]
  00088	2b c7		 sub	 eax, edi
  0008a	83 e0 f0	 and	 eax, -16		; fffffff0H
  0008d	03 46 20	 add	 eax, DWORD PTR [esi+32]
  00090	89 01		 mov	 DWORD PTR [ecx], eax
  00092	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00095	85 c9		 test	 ecx, ecx
  00097	75 ed		 jne	 SHORT $LL14@luaD_reall
$LN12@luaD_reall:
  00099	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0009c	85 c0		 test	 eax, eax
  0009e	74 35		 je	 SHORT $LN9@luaD_reall
$LL11@luaD_reall:
  000a0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a3	2b cf		 sub	 ecx, edi
  000a5	83 e1 f0	 and	 ecx, -16		; fffffff0H
  000a8	03 4e 20	 add	 ecx, DWORD PTR [esi+32]
  000ab	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	2b cf		 sub	 ecx, edi
  000b2	83 e1 f0	 and	 ecx, -16		; fffffff0H
  000b5	03 4e 20	 add	 ecx, DWORD PTR [esi+32]
  000b8	f6 40 22 02	 test	 BYTE PTR [eax+34], 2
  000bc	89 08		 mov	 DWORD PTR [eax], ecx
  000be	74 0e		 je	 SHORT $LN10@luaD_reall
  000c0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000c3	2b cf		 sub	 ecx, edi
  000c5	83 e1 f0	 and	 ecx, -16		; fffffff0H
  000c8	03 4e 20	 add	 ecx, DWORD PTR [esi+32]
  000cb	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN10@luaD_reall:
  000ce	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000d1	85 c0		 test	 eax, eax
  000d3	75 cb		 jne	 SHORT $LL11@luaD_reall
$LN9@luaD_reall:
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
; Line 188
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
$LN30@luaD_reall:
; Line 182
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 _luaM_toobig
$LN32@luaD_reall:
$LN29@luaD_reall:
  000df	cc		 int	 3
_luaD_reallocstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_poscall
_TEXT	SEGMENT
_L$ = 8							; size = 4
_wanted$1$ = 12						; size = 4
_ci$ = 12						; size = 4
_firstResult$ = 16					; size = 4
_nres$ = 20						; size = 4
_luaD_poscall PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 448
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 450
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _ci$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
; Line 451
  00009	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000c	0f bf 73 20	 movsx	 esi, WORD PTR [ebx+32]
  00010	89 75 0c	 mov	 DWORD PTR _wanted$1$[ebp], esi
  00013	8a 47 70	 mov	 al, BYTE PTR [edi+112]
  00016	a8 06		 test	 al, 6
  00018	74 38		 je	 SHORT $LN6@luaD_posca
; Line 452
  0001a	a8 02		 test	 al, 2
  0001c	74 26		 je	 SHORT $LN5@luaD_posca
; Line 453
  0001e	8b 75 10	 mov	 esi, DWORD PTR _firstResult$[ebp]
  00021	2b 77 20	 sub	 esi, DWORD PTR [edi+32]
; Line 454
  00024	6a ff		 push	 -1
  00026	6a 01		 push	 1
  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 _luaD_hook
; Line 457
  0002e	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	8b 57 20	 mov	 edx, DWORD PTR [edi+32]
  00037	03 d6		 add	 edx, esi
  00039	8b 75 0c	 mov	 esi, DWORD PTR _wanted$1$[ebp]
  0003c	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0003f	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00042	eb 11		 jmp	 SHORT $LN2@luaD_posca
$LN5@luaD_posca:
  00044	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00047	8b 55 10	 mov	 edx, DWORD PTR _firstResult$[ebp]
  0004a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0004d	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00050	eb 03		 jmp	 SHORT $LN2@luaD_posca
$LN6@luaD_posca:
  00052	8b 55 10	 mov	 edx, DWORD PTR _firstResult$[ebp]
$LN2@luaD_posca:
; Line 459
  00055	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; Line 460
  00057	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
; Line 462
  0005a	56		 push	 esi
  0005b	ff 75 14	 push	 DWORD PTR _nres$[ebp]
  0005e	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00061	51		 push	 ecx
  00062	52		 push	 edx
  00063	57		 push	 edi
  00064	e8 00 00 00 00	 call	 _moveresults
  00069	83 c4 14	 add	 esp, 20			; 00000014H
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
; Line 463
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_luaD_poscall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_pcall
_TEXT	SEGMENT
_old_errfunc$1$ = -12					; size = 4
_old_nny$1$ = -8					; size = 4
_old_ci$1$ = -4						; size = 4
_L$ = 8							; size = 4
_old_allowhooks$1$ = 11					; size = 1
_func$ = 12						; size = 4
_u$ = 16						; size = 4
_old_top$ = 20						; size = 4
_ef$ = 24						; size = 4
_luaD_pcall PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 715
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; Line 717
  00009	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
; Line 722
  0000c	ff 75 10	 push	 DWORD PTR _u$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR _func$[ebp]
  00012	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00015	8b 77 5c	 mov	 esi, DWORD PTR [edi+92]
  00018	89 45 fc	 mov	 DWORD PTR _old_ci$1$[ebp], eax
  0001b	8a 47 71	 mov	 al, BYTE PTR [edi+113]
  0001e	88 45 0b	 mov	 BYTE PTR _old_allowhooks$1$[ebp], al
  00021	0f b7 47 6c	 movzx	 eax, WORD PTR [edi+108]
  00025	89 45 f8	 mov	 DWORD PTR _old_nny$1$[ebp], eax
  00028	8b 45 18	 mov	 eax, DWORD PTR _ef$[ebp]
  0002b	57		 push	 edi
  0002c	89 75 f4	 mov	 DWORD PTR _old_errfunc$1$[ebp], esi
  0002f	89 47 5c	 mov	 DWORD PTR [edi+92], eax
  00032	e8 00 00 00 00	 call	 _luaD_rawrunprotected
  00037	8b d8		 mov	 ebx, eax
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 723
  0003c	85 db		 test	 ebx, ebx
  0003e	74 40		 je	 SHORT $LN4@luaD_pcall
; Line 724
  00040	8b 77 20	 mov	 esi, DWORD PTR [edi+32]
  00043	03 75 14	 add	 esi, DWORD PTR _old_top$[ebp]
; Line 725
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	e8 00 00 00 00	 call	 _luaF_close
; Line 726
  0004d	56		 push	 esi
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 _seterrorobj
; Line 727
  00055	8b 45 fc	 mov	 eax, DWORD PTR _old_ci$1$[ebp]
  00058	89 47 14	 mov	 DWORD PTR [edi+20], eax
; Line 728
  0005b	8a 45 0b	 mov	 al, BYTE PTR _old_allowhooks$1$[ebp]
  0005e	88 47 71	 mov	 BYTE PTR [edi+113], al
; Line 729
  00061	8b 45 f8	 mov	 eax, DWORD PTR _old_nny$1$[ebp]
; Line 730
  00064	57		 push	 edi
  00065	66 89 47 6c	 mov	 WORD PTR [edi+108], ax
  00069	e8 00 00 00 00	 call	 _luaD_shrinkstack
; Line 732
  0006e	8b 45 f4	 mov	 eax, DWORD PTR _old_errfunc$1$[ebp]
  00071	83 c4 18	 add	 esp, 24			; 00000018H
  00074	89 47 5c	 mov	 DWORD PTR [edi+92], eax
; Line 733
  00077	8b c3		 mov	 eax, ebx
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
; Line 734
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN4@luaD_pcall:
; Line 732
  00080	89 77 5c	 mov	 DWORD PTR [edi+92], esi
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
; Line 734
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_luaD_pcall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_callnoyield
_TEXT	SEGMENT
_L$ = 8							; size = 4
_func$ = 12						; size = 4
_nResults$ = 16						; size = 4
_luaD_callnoyield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 499
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 501
  00004	ff 75 10	 push	 DWORD PTR _nResults$[ebp]
  00007	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR _func$[ebp]
  0000d	56		 push	 esi
  0000e	66 ff 46 6c	 inc	 WORD PTR [esi+108]
  00012	e8 00 00 00 00	 call	 _luaD_call
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 502
  0001a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0001f	66 01 46 6c	 add	 WORD PTR [esi+108], ax
  00023	5e		 pop	 esi
; Line 503
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_luaD_callnoyield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_call
_TEXT	SEGMENT
_L$ = 8							; size = 4
_func$ = 12						; size = 4
_nResults$ = 16						; size = 4
_luaD_call PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 487
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 488
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  0000c	66 ff 46 6e	 inc	 WORD PTR [esi+110]
  00010	66 8b 46 6e	 mov	 ax, WORD PTR [esi+110]
  00014	66 3b c1	 cmp	 ax, cx
  00017	72 0c		 jb	 SHORT $LN5@luaD_call
; Line 489
  00019	74 32		 je	 SHORT $LN12@luaD_call
  0001b	b9 e1 00 00 00	 mov	 ecx, 225		; 000000e1H
  00020	66 3b c1	 cmp	 ax, cx
  00023	73 33		 jae	 SHORT $LN14@luaD_call
$LN5@luaD_call:
; Line 490
  00025	ff 75 10	 push	 DWORD PTR _nResults$[ebp]
  00028	ff 75 0c	 push	 DWORD PTR _func$[ebp]
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 _luaD_precall
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	85 c0		 test	 eax, eax
  00036	75 09		 jne	 SHORT $LN1@luaD_call
; Line 491
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _luaV_execute
  0003e	83 c4 04	 add	 esp, 4
$LN1@luaD_call:
; Line 492
  00041	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00046	66 01 46 6e	 add	 WORD PTR [esi+110], ax
  0004a	5e		 pop	 esi
; Line 493
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN12@luaD_call:
; Line 489
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 _luaG_runerror
$LN15@luaD_call:
$LN14@luaD_call:
  00058	6a 06		 push	 6
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 _luaD_throw
$LN16@luaD_call:
$LN11@luaD_call:
  00060	cc		 int	 3
_luaD_call ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_precall
_TEXT	SEGMENT
_p$1$ = -8						; size = 4
_base$1$ = -4						; size = 4
_t__$1$ = -4						; size = 4
_L$ = 8							; size = 4
_fsize$1$ = 12						; size = 4
_f$1$ = 12						; size = 4
_func$ = 12						; size = 4
_nresults$ = 16						; size = 4
_luaD_precall PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 339
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 342
  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _func$[ebp]
  0000f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00012	83 e0 3f	 and	 eax, 63			; 0000003fH
  00015	83 f8 06	 cmp	 eax, 6
  00018	74 62		 je	 SHORT $LN14@luaD_preca
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL32@luaD_preca:
  00020	83 f8 16	 cmp	 eax, 22			; 00000016H
  00023	0f 84 e1 00 00
	00		 je	 $LN19@luaD_preca
  00029	83 f8 26	 cmp	 eax, 38			; 00000026H
  0002c	0f 84 ce 00 00
	00		 je	 $LN20@luaD_preca
; Line 392
  00032	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00035	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  00038	83 e0 f0	 and	 eax, -16		; fffffff0H
  0003b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0003e	7f 27		 jg	 SHORT $LN3@luaD_preca
  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	2b 7e 20	 sub	 edi, DWORD PTR [esi+32]
  00046	8b df		 mov	 ebx, edi
  00048	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0004c	7e 09		 jle	 SHORT $LN2@luaD_preca
  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 _luaC_step
  00054	83 c4 04	 add	 esp, 4
$LN2@luaD_preca:
  00057	6a 01		 push	 1
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 _luaD_growstack
  0005f	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  00062	83 c4 08	 add	 esp, 8
  00065	03 fb		 add	 edi, ebx
$LN3@luaD_preca:
; Line 393
  00067	57		 push	 edi
  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 _tryfuncTM
  0006e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00071	83 c4 08	 add	 esp, 8
  00074	83 e0 3f	 and	 eax, 63			; 0000003fH
  00077	83 f8 06	 cmp	 eax, 6
  0007a	75 a4		 jne	 SHORT $LL32@luaD_preca
$LN14@luaD_preca:
; Line 368
  0007c	8b 07		 mov	 eax, DWORD PTR [edi]
; Line 369
  0007e	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00081	2b df		 sub	 ebx, edi
  00083	c1 fb 04	 sar	 ebx, 4
  00086	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00089	4b		 dec	 ebx
  0008a	89 55 f8	 mov	 DWORD PTR _p$1$[ebp], edx
; Line 370
  0008d	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  00091	89 45 0c	 mov	 DWORD PTR _fsize$1$[ebp], eax
; Line 371
  00094	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00097	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  0009a	c1 f8 04	 sar	 eax, 4
  0009d	3b 45 0c	 cmp	 eax, DWORD PTR _fsize$1$[ebp]
  000a0	7f 2d		 jg	 SHORT $LN13@luaD_preca
  000a2	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000a5	2b 7e 20	 sub	 edi, DWORD PTR [esi+32]
  000a8	89 7d fc	 mov	 DWORD PTR _t__$1$[ebp], edi
  000ab	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000af	7e 09		 jle	 SHORT $LN12@luaD_preca
  000b1	56		 push	 esi
  000b2	e8 00 00 00 00	 call	 _luaC_step
  000b7	83 c4 04	 add	 esp, 4
$LN12@luaD_preca:
  000ba	ff 75 0c	 push	 DWORD PTR _fsize$1$[ebp]
  000bd	56		 push	 esi
  000be	e8 00 00 00 00	 call	 _luaD_growstack
  000c3	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  000c6	83 c4 08	 add	 esp, 8
  000c9	03 7d fc	 add	 edi, DWORD PTR _t__$1$[ebp]
  000cc	8b 55 f8	 mov	 edx, DWORD PTR _p$1$[ebp]
$LN13@luaD_preca:
; Line 372
  000cf	80 7a 07 01	 cmp	 BYTE PTR [edx+7], 1
  000d3	0f 84 d6 00 00
	00		 je	 $LN10@luaD_preca
; Line 373
  000d9	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
  000dd	3b d8		 cmp	 ebx, eax
  000df	7d 17		 jge	 SHORT $LN7@luaD_preca
$LL9@luaD_preca:
; Line 374
  000e1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000e4	43		 inc	 ebx
  000e5	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000ec	83 46 0c 10	 add	 DWORD PTR [esi+12], 16	; 00000010H
  000f0	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
  000f4	3b d8		 cmp	 ebx, eax
  000f6	7c e9		 jl	 SHORT $LL9@luaD_preca
$LN7@luaD_preca:
; Line 375
  000f8	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; Line 377
  000fb	e9 ba 00 00 00	 jmp	 $LN41@luaD_preca
$LN20@luaD_preca:
; Line 344
  00100	8b 07		 mov	 eax, DWORD PTR [edi]
  00102	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00105	89 4d 0c	 mov	 DWORD PTR _f$1$[ebp], ecx
; Line 345
  00108	eb 05		 jmp	 SHORT $Cfunc$43
$LN19@luaD_preca:
; Line 347
  0010a	8b 07		 mov	 eax, DWORD PTR [edi]
  0010c	89 45 0c	 mov	 DWORD PTR _f$1$[ebp], eax
$Cfunc$43:
; Line 350
  0010f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00112	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  00115	83 e0 f0	 and	 eax, -16		; fffffff0H
  00118	3d 40 01 00 00	 cmp	 eax, 320		; 00000140H
  0011d	7f 27		 jg	 SHORT $LN18@luaD_preca
  0011f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00122	2b 7e 20	 sub	 edi, DWORD PTR [esi+32]
  00125	8b df		 mov	 ebx, edi
  00127	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0012b	7e 09		 jle	 SHORT $LN17@luaD_preca
  0012d	56		 push	 esi
  0012e	e8 00 00 00 00	 call	 _luaC_step
  00133	83 c4 04	 add	 esp, 4
$LN17@luaD_preca:
  00136	6a 14		 push	 20			; 00000014H
  00138	56		 push	 esi
  00139	e8 00 00 00 00	 call	 _luaD_growstack
  0013e	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  00141	83 c4 08	 add	 esp, 8
  00144	03 fb		 add	 edi, ebx
$LN18@luaD_preca:
; Line 351
  00146	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00149	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  0014c	85 db		 test	 ebx, ebx
  0014e	75 0b		 jne	 SHORT $LN26@luaD_preca
  00150	56		 push	 esi
  00151	e8 00 00 00 00	 call	 _luaE_extendCI
  00156	83 c4 04	 add	 esp, 4
  00159	8b d8		 mov	 ebx, eax
$LN26@luaD_preca:
; Line 352
  0015b	66 8b 4d 10	 mov	 cx, WORD PTR _nresults$[ebp]
  0015f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00162	66 89 4b 20	 mov	 WORD PTR [ebx+32], cx
; Line 353
  00166	89 3b		 mov	 DWORD PTR [ebx], edi
; Line 354
  00168	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0016b	81 c1 40 01 00
	00		 add	 ecx, 320		; 00000140H
; Line 356
  00171	c6 43 22 00	 mov	 BYTE PTR [ebx+34], 0
  00175	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
; Line 357
  00178	f6 46 70 01	 test	 BYTE PTR [esi+112], 1
  0017c	74 0d		 je	 SHORT $LN15@luaD_preca
; Line 358
  0017e	6a ff		 push	 -1
  00180	6a 00		 push	 0
  00182	56		 push	 esi
  00183	e8 00 00 00 00	 call	 _luaD_hook
  00188	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@luaD_preca:
; Line 360
  0018b	56		 push	 esi
  0018c	ff 55 0c	 call	 DWORD PTR _f$1$[ebp]
; Line 363
  0018f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00192	50		 push	 eax
  00193	c1 e0 04	 shl	 eax, 4
  00196	2b c8		 sub	 ecx, eax
  00198	51		 push	 ecx
  00199	53		 push	 ebx
  0019a	56		 push	 esi
  0019b	e8 00 00 00 00	 call	 _luaD_poscall
  001a0	83 c4 14	 add	 esp, 20			; 00000014H
; Line 364
  001a3	b8 01 00 00 00	 mov	 eax, 1
  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx
; Line 397
  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c3		 ret	 0
$LN10@luaD_preca:
; Line 378
  001af	53		 push	 ebx
  001b0	52		 push	 edx
  001b1	56		 push	 esi
  001b2	e8 00 00 00 00	 call	 _adjust_varargs
  001b7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@luaD_preca:
; Line 379
  001ba	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001bd	89 45 fc	 mov	 DWORD PTR _base$1$[ebp], eax
  001c0	8b 59 0c	 mov	 ebx, DWORD PTR [ecx+12]
  001c3	85 db		 test	 ebx, ebx
  001c5	75 0b		 jne	 SHORT $LN28@luaD_preca
  001c7	56		 push	 esi
  001c8	e8 00 00 00 00	 call	 _luaE_extendCI
  001cd	83 c4 04	 add	 esp, 4
  001d0	8b d8		 mov	 ebx, eax
$LN28@luaD_preca:
; Line 380
  001d2	66 8b 4d 10	 mov	 cx, WORD PTR _nresults$[ebp]
; Line 382
  001d6	8b 45 fc	 mov	 eax, DWORD PTR _base$1$[ebp]
  001d9	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  001dc	66 89 4b 20	 mov	 WORD PTR [ebx+32], cx
; Line 383
  001e0	8b 4d 0c	 mov	 ecx, DWORD PTR _fsize$1$[ebp]
  001e3	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  001e6	c1 e1 04	 shl	 ecx, 4
  001e9	03 c1		 add	 eax, ecx
  001eb	89 3b		 mov	 DWORD PTR [ebx], edi
  001ed	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  001f0	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; Line 385
  001f3	8b 45 f8	 mov	 eax, DWORD PTR _p$1$[ebp]
  001f6	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  001f9	89 43 14	 mov	 DWORD PTR [ebx+20], eax
; Line 386
  001fc	c6 43 22 02	 mov	 BYTE PTR [ebx+34], 2
; Line 387
  00200	f6 46 70 01	 test	 BYTE PTR [esi+112], 1
  00204	74 35		 je	 SHORT $LN30@luaD_preca
; Line 388
  00206	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00209	33 c9		 xor	 ecx, ecx
  0020b	83 43 14 04	 add	 DWORD PTR [ebx+20], 4
  0020f	f6 40 22 02	 test	 BYTE PTR [eax+34], 2
  00213	74 16		 je	 SHORT $LN29@luaD_preca
  00215	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00218	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
  0021b	83 e0 3f	 and	 eax, 63			; 0000003fH
  0021e	3c 25		 cmp	 al, 37			; 00000025H
  00220	75 09		 jne	 SHORT $LN29@luaD_preca
  00222	c6 43 22 22	 mov	 BYTE PTR [ebx+34], 34	; 00000022H
  00226	b9 04 00 00 00	 mov	 ecx, 4
$LN29@luaD_preca:
  0022b	6a ff		 push	 -1
  0022d	51		 push	 ecx
  0022e	56		 push	 esi
  0022f	e8 00 00 00 00	 call	 _luaD_hook
  00234	83 c4 0c	 add	 esp, 12			; 0000000cH
  00237	83 43 14 fc	 add	 DWORD PTR [ebx+20], -4	; fffffffcH
$LN30@luaD_preca:
; Line 389
  0023b	5f		 pop	 edi
  0023c	5e		 pop	 esi
  0023d	33 c0		 xor	 eax, eax
  0023f	5b		 pop	 ebx
; Line 397
  00240	8b e5		 mov	 esp, ebp
  00242	5d		 pop	 ebp
  00243	c3		 ret	 0
_luaD_precall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_hook
_TEXT	SEGMENT
_ci_top$1$ = -112					; size = 4
_top$1$ = -108						; size = 4
_ar$1 = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_event$ = 12						; size = 4
_line$ = 16						; size = 4
_luaD_hook PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 245
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
; Line 246
  00015	8b 5e 58	 mov	 ebx, DWORD PTR [esi+88]
; Line 247
  00018	85 db		 test	 ebx, ebx
  0001a	74 7e		 je	 SHORT $LN3@luaD_hook
  0001c	80 7e 71 00	 cmp	 BYTE PTR [esi+113], 0
  00020	74 78		 je	 SHORT $LN3@luaD_hook
; Line 249
  00022	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00025	2b 56 20	 sub	 edx, DWORD PTR [esi+32]
; Line 252
  00028	8b 45 0c	 mov	 eax, DWORD PTR _event$[ebp]
  0002b	57		 push	 edi
  0002c	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0002f	89 55 94	 mov	 DWORD PTR _top$1$[ebp], edx
  00032	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00035	2b 56 20	 sub	 edx, DWORD PTR [esi+32]
  00038	89 45 98	 mov	 DWORD PTR _ar$1[ebp], eax
; Line 253
  0003b	8b 45 10	 mov	 eax, DWORD PTR _line$[ebp]
  0003e	89 45 ac	 mov	 DWORD PTR _ar$1[ebp+20], eax
; Line 255
  00041	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00044	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  00047	83 e0 f0	 and	 eax, -16		; fffffff0H
  0004a	89 55 90	 mov	 DWORD PTR _ci_top$1$[ebp], edx
  0004d	89 7d f8	 mov	 DWORD PTR _ar$1[ebp+96], edi
  00050	3d 40 01 00 00	 cmp	 eax, 320		; 00000140H
  00055	7f 0b		 jg	 SHORT $LN2@luaD_hook
  00057	6a 14		 push	 20			; 00000014H
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 _luaD_growstack
  0005f	83 c4 08	 add	 esp, 8
$LN2@luaD_hook:
; Line 256
  00062	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00065	05 40 01 00 00	 add	 eax, 320		; 00000140H
  0006a	89 47 04	 mov	 DWORD PTR [edi+4], eax
; Line 261
  0006d	8d 45 98	 lea	 eax, DWORD PTR _ar$1[ebp]
  00070	50		 push	 eax
  00071	c6 46 71 00	 mov	 BYTE PTR [esi+113], 0
  00075	80 4f 22 04	 or	 BYTE PTR [edi+34], 4
  00079	56		 push	 esi
  0007a	ff d3		 call	 ebx
; Line 265
  0007c	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0007f	83 c4 08	 add	 esp, 8
  00082	03 45 90	 add	 eax, DWORD PTR _ci_top$1$[ebp]
  00085	c6 46 71 01	 mov	 BYTE PTR [esi+113], 1
  00089	89 47 04	 mov	 DWORD PTR [edi+4], eax
; Line 266
  0008c	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0008f	03 45 94	 add	 eax, DWORD PTR _top$1$[ebp]
  00092	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; Line 267
  00095	80 67 22 fb	 and	 BYTE PTR [edi+34], 251	; 000000fbH
  00099	5f		 pop	 edi
$LN3@luaD_hook:
; Line 269
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009d	5e		 pop	 esi
  0009e	33 cd		 xor	 ecx, ebp
  000a0	5b		 pop	 ebx
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_luaD_hook ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaD_protectedparser
_TEXT	SEGMENT
_p$ = -60						; size = 60
_L$ = 8							; size = 4
_z$ = 12						; size = 4
_name$ = 16						; size = 4
_mode$ = 20						; size = 4
_luaD_protectedparser PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 777
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
; Line 781
  00006	8b 45 0c	 mov	 eax, DWORD PTR _z$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000e	89 45 c4	 mov	 DWORD PTR _p$[ebp], eax
  00011	8b 45 10	 mov	 eax, DWORD PTR _name$[ebp]
  00014	89 45 fc	 mov	 DWORD PTR _p$[ebp+56], eax
  00017	8b 45 14	 mov	 eax, DWORD PTR _mode$[ebp]
; Line 786
  0001a	ff 77 5c	 push	 DWORD PTR [edi+92]
  0001d	66 ff 47 6c	 inc	 WORD PTR [edi+108]
  00021	89 45 f8	 mov	 DWORD PTR _p$[ebp+52], eax
  00024	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00027	2b 47 20	 sub	 eax, DWORD PTR [edi+32]
  0002a	50		 push	 eax
  0002b	8d 45 c4	 lea	 eax, DWORD PTR _p$[ebp]
  0002e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+16], 0
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET _f_parser
  0003b	57		 push	 edi
  0003c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+24], 0
  00043	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+28], 0
  0004a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+36], 0
  00051	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+40], 0
  00058	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+48], 0
  0005f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+4], 0
  00066	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+12], 0
  0006d	e8 00 00 00 00	 call	 _luaD_pcall
; Line 787
  00072	6a 00		 push	 0
  00074	ff 75 d0	 push	 DWORD PTR _p$[ebp+12]
  00077	8b f0		 mov	 esi, eax
  00079	ff 75 c8	 push	 DWORD PTR _p$[ebp+4]
  0007c	57		 push	 edi
  0007d	e8 00 00 00 00	 call	 _luaM_realloc_
  00082	89 45 c8	 mov	 DWORD PTR _p$[ebp+4], eax
; Line 788
  00085	8b 45 dc	 mov	 eax, DWORD PTR _p$[ebp+24]
  00088	6a 00		 push	 0
  0008a	03 c0		 add	 eax, eax
  0008c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+12], 0
  00093	50		 push	 eax
  00094	ff 75 d4	 push	 DWORD PTR _p$[ebp+16]
  00097	57		 push	 edi
  00098	e8 00 00 00 00	 call	 _luaM_realloc_
; Line 789
  0009d	8b 45 e8	 mov	 eax, DWORD PTR _p$[ebp+36]
  000a0	6a 00		 push	 0
  000a2	c1 e0 04	 shl	 eax, 4
  000a5	50		 push	 eax
  000a6	ff 75 e0	 push	 DWORD PTR _p$[ebp+28]
  000a9	57		 push	 edi
  000aa	e8 00 00 00 00	 call	 _luaM_realloc_
; Line 790
  000af	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp+48]
  000b2	83 c4 44	 add	 esp, 68			; 00000044H
  000b5	c1 e0 04	 shl	 eax, 4
  000b8	6a 00		 push	 0
  000ba	50		 push	 eax
  000bb	ff 75 ec	 push	 DWORD PTR _p$[ebp+40]
  000be	57		 push	 edi
  000bf	e8 00 00 00 00	 call	 _luaM_realloc_
  000c4	83 c4 10	 add	 esp, 16			; 00000010H
; Line 791
  000c7	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000cc	66 01 47 6c	 add	 WORD PTR [edi+108], ax
; Line 792
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
; Line 793
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_luaD_protectedparser ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lua_isyieldable
_TEXT	SEGMENT
_L$ = 8							; size = 4
_lua_isyieldable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 680
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 681
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _L$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	66 39 41 6c	 cmp	 WORD PTR [ecx+108], ax
  0000c	0f 94 c0	 sete	 al
; Line 682
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_lua_isyieldable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lua_resume
_TEXT	SEGMENT
_oldnny$1$ = -4						; size = 4
_status$ = 8						; size = 4
_L$ = 8							; size = 4
_status$1$ = 12						; size = 4
_from$ = 12						; size = 4
_nargs$ = 16						; size = 4
_lua_resume PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 649
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; Line 651
  00005	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  00008	0f b7 43 6c	 movzx	 eax, WORD PTR [ebx+108]
  0000c	89 45 fc	 mov	 DWORD PTR _oldnny$1$[ebp], eax
; Line 654
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _from$[ebp]
  00012	85 c0		 test	 eax, eax
  00014	74 07		 je	 SHORT $LN9@lua_resume
  00016	0f b7 40 6e	 movzx	 eax, WORD PTR [eax+110]
  0001a	40		 inc	 eax
  0001b	eb 05		 jmp	 SHORT $LN10@lua_resume
$LN9@lua_resume:
  0001d	b8 01 00 00 00	 mov	 eax, 1
$LN10@lua_resume:
  00022	66 89 43 6e	 mov	 WORD PTR [ebx+110], ax
; Line 655
  00026	33 c0		 xor	 eax, eax
  00028	66 89 43 6c	 mov	 WORD PTR [ebx+108], ax
; Line 657
  0002c	8d 45 10	 lea	 eax, DWORD PTR _nargs$[ebp]
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET _resume
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 _luaD_rawrunprotected
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	89 45 0c	 mov	 DWORD PTR _status$1$[ebp], eax
  00041	89 45 08	 mov	 DWORD PTR _status$[ebp], eax
; Line 658
  00044	83 f8 ff	 cmp	 eax, -1
  00047	75 07		 jne	 SHORT $LN20@lua_resume
; Line 659
  00049	b8 02 00 00 00	 mov	 eax, 2
; Line 660
  0004e	eb 40		 jmp	 SHORT $LN2@lua_resume
$LN20@lua_resume:
; Line 661
  00050	83 f8 01	 cmp	 eax, 1
  00053	7e 3b		 jle	 SHORT $LN2@lua_resume
  00055	56		 push	 esi
  00056	57		 push	 edi
$LL4@lua_resume:
  00057	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]
  0005a	85 f6		 test	 esi, esi
  0005c	74 0f		 je	 SHORT $LN3@lua_resume
  0005e	8b ff		 npad	 2
$LL17@lua_resume:
  00060	f6 46 22 10	 test	 BYTE PTR [esi+34], 16	; 00000010H
  00064	75 3f		 jne	 SHORT $LN22@lua_resume
  00066	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00069	85 f6		 test	 esi, esi
  0006b	75 f3		 jne	 SHORT $LL17@lua_resume
$LN3@lua_resume:
; Line 665
  0006d	83 f8 01	 cmp	 eax, 1
  00070	7e 1c		 jle	 SHORT $LN33@lua_resume
; Line 667
  00072	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00075	88 43 08	 mov	 BYTE PTR [ebx+8], al
  00078	50		 push	 eax
  00079	53		 push	 ebx
  0007a	e8 00 00 00 00	 call	 _seterrorobj
; Line 668
  0007f	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH
  00085	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00088	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0008b	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
$LN33@lua_resume:
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
$LN2@lua_resume:
; Line 672
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _oldnny$1$[ebp]
  00093	66 89 4b 6c	 mov	 WORD PTR [ebx+108], cx
; Line 673
  00097	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0009c	66 01 4b 6e	 add	 WORD PTR [ebx+110], cx
  000a0	5b		 pop	 ebx
; Line 677
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN22@lua_resume:
; Line 661
  000a5	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  000a8	03 7b 20	 add	 edi, DWORD PTR [ebx+32]
  000ab	57		 push	 edi
  000ac	53		 push	 ebx
  000ad	e8 00 00 00 00	 call	 _luaF_close
  000b2	57		 push	 edi
  000b3	ff 75 0c	 push	 DWORD PTR _status$1$[ebp]
  000b6	53		 push	 ebx
  000b7	e8 00 00 00 00	 call	 _seterrorobj
  000bc	89 73 14	 mov	 DWORD PTR [ebx+20], esi
  000bf	8a 46 22	 mov	 al, BYTE PTR [esi+34]
  000c2	24 01		 and	 al, 1
  000c4	88 43 71	 mov	 BYTE PTR [ebx+113], al
  000c7	33 c0		 xor	 eax, eax
  000c9	53		 push	 ebx
  000ca	66 89 43 6c	 mov	 WORD PTR [ebx+108], ax
  000ce	e8 00 00 00 00	 call	 _luaD_shrinkstack
  000d3	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000d6	89 43 5c	 mov	 DWORD PTR [ebx+92], eax
; Line 663
  000d9	8d 45 08	 lea	 eax, DWORD PTR _status$[ebp]
  000dc	50		 push	 eax
  000dd	68 00 00 00 00	 push	 OFFSET _unroll
  000e2	53		 push	 ebx
  000e3	e8 00 00 00 00	 call	 _luaD_rawrunprotected
  000e8	83 c4 24	 add	 esp, 36			; 00000024H
  000eb	89 45 0c	 mov	 DWORD PTR _status$1$[ebp], eax
  000ee	89 45 08	 mov	 DWORD PTR _status$[ebp], eax
  000f1	83 f8 01	 cmp	 eax, 1
  000f4	0f 8f 5d ff ff
	ff		 jg	 $LL4@lua_resume
; Line 661
  000fa	eb 92		 jmp	 SHORT $LN33@lua_resume
_lua_resume ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lua_yieldk
_TEXT	SEGMENT
_L$ = 8							; size = 4
_nresults$ = 12						; size = 4
_ctx$ = 16						; size = 4
_k$ = 20						; size = 4
_lua_yieldk PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 686
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 687
  00003	8b 55 08	 mov	 edx, DWORD PTR _L$[ebp]
  00006	56		 push	 esi
; Line 691
  00007	66 83 7a 6c 00	 cmp	 WORD PTR [edx+108], 0
  0000c	8b 72 14	 mov	 esi, DWORD PTR [edx+20]
  0000f	76 0a		 jbe	 SHORT $LN4@lua_yieldk
; Line 692
  00011	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00014	3b 50 7c	 cmp	 edx, DWORD PTR [eax+124]
  00017	75 25		 jne	 SHORT $LN10@lua_yieldk
  00019	eb 2e		 jmp	 SHORT $LN12@lua_yieldk
$LN4@lua_yieldk:
; Line 697
  0001b	c6 42 08 01	 mov	 BYTE PTR [edx+8], 1
; Line 698
  0001f	8b 06		 mov	 eax, DWORD PTR [esi]
  00021	2b 42 20	 sub	 eax, DWORD PTR [edx+32]
; Line 699
  00024	f6 46 22 02	 test	 BYTE PTR [esi+34], 2
  00028	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002b	74 05		 je	 SHORT $LN3@lua_yieldk
; Line 710
  0002d	33 c0		 xor	 eax, eax
  0002f	5e		 pop	 esi
; Line 711
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN3@lua_yieldk:
; Line 703
  00032	8b 45 14	 mov	 eax, DWORD PTR _k$[ebp]
  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	85 c0		 test	 eax, eax
  0003a	74 1e		 je	 SHORT $LN1@lua_yieldk
  0003c	eb 16		 jmp	 SHORT $LN13@lua_yieldk
$LN10@lua_yieldk:
; Line 693
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PNAEIJLG@attempt?5to?5yield?5across?5a?5C?9call@
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 _luaG_runerror
$LN14@lua_yieldk:
$LN12@lua_yieldk:
; Line 695
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CHKMHBBM@attempt?5to?5yield?5from?5outside?5a?5@
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _luaG_runerror
$LN15@lua_yieldk:
$LN13@lua_yieldk:
; Line 704
  00054	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  00057	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN1@lua_yieldk:
; Line 705
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _nresults$[ebp]
  0005d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
; Line 706
  00060	6a 01		 push	 1
  00062	52		 push	 edx
  00063	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00066	c1 e1 04	 shl	 ecx, 4
  00069	2b c1		 sub	 eax, ecx
  0006b	89 06		 mov	 DWORD PTR [esi], eax
  0006d	e8 00 00 00 00	 call	 _luaD_throw
$LN16@lua_yieldk:
$LN9@lua_yieldk:
  00072	cc		 int	 3
_lua_yieldk ENDP
_TEXT	ENDS
END
