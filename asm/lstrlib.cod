; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04IHGKJMLH@byte?$AA@			; `string'
PUBLIC	??_C@_04ENMBGAPA@char?$AA@			; `string'
PUBLIC	??_C@_04GGLOKIEE@dump?$AA@			; `string'
PUBLIC	??_C@_04CKFJHKAP@find?$AA@			; `string'
PUBLIC	??_C@_06DLEPGFEF@format?$AA@			; `string'
PUBLIC	??_C@_06DPFCLDIO@gmatch?$AA@			; `string'
PUBLIC	??_C@_04GOLEAPFD@gsub?$AA@			; `string'
PUBLIC	??_C@_03BKCJCHLK@len?$AA@			; `string'
PUBLIC	??_C@_05IPJEPLHL@lower?$AA@			; `string'
PUBLIC	??_C@_05FNONLPDI@match?$AA@			; `string'
PUBLIC	??_C@_03HOKODIMJ@rep?$AA@			; `string'
PUBLIC	??_C@_07KOIEOCCE@reverse?$AA@			; `string'
PUBLIC	??_C@_03KCMAIMAP@sub?$AA@			; `string'
PUBLIC	??_C@_05NECKJAMC@upper?$AA@			; `string'
PUBLIC	??_C@_04IPANLPFO@pack?$AA@			; `string'
PUBLIC	??_C@_08JEMJHBLC@packsize?$AA@			; `string'
PUBLIC	??_C@_06FIONAGJL@unpack?$AA@			; `string'
;	COMDAT ??_C@_06FIONAGJL@unpack?$AA@
CONST	SEGMENT
??_C@_06FIONAGJL@unpack?$AA@ DB 'unpack', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JEMJHBLC@packsize?$AA@
CONST	SEGMENT
??_C@_08JEMJHBLC@packsize?$AA@ DB 'packsize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IPANLPFO@pack?$AA@
CONST	SEGMENT
??_C@_04IPANLPFO@pack?$AA@ DB 'pack', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NECKJAMC@upper?$AA@
CONST	SEGMENT
??_C@_05NECKJAMC@upper?$AA@ DB 'upper', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCMAIMAP@sub?$AA@
CONST	SEGMENT
??_C@_03KCMAIMAP@sub?$AA@ DB 'sub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOIEOCCE@reverse?$AA@
CONST	SEGMENT
??_C@_07KOIEOCCE@reverse?$AA@ DB 'reverse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HOKODIMJ@rep?$AA@
CONST	SEGMENT
??_C@_03HOKODIMJ@rep?$AA@ DB 'rep', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FNONLPDI@match?$AA@
CONST	SEGMENT
??_C@_05FNONLPDI@match?$AA@ DB 'match', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPJEPLHL@lower?$AA@
CONST	SEGMENT
??_C@_05IPJEPLHL@lower?$AA@ DB 'lower', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKCJCHLK@len?$AA@
CONST	SEGMENT
??_C@_03BKCJCHLK@len?$AA@ DB 'len', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOLEAPFD@gsub?$AA@
CONST	SEGMENT
??_C@_04GOLEAPFD@gsub?$AA@ DB 'gsub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPFCLDIO@gmatch?$AA@
CONST	SEGMENT
??_C@_06DPFCLDIO@gmatch?$AA@ DB 'gmatch', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLEPGFEF@format?$AA@
CONST	SEGMENT
??_C@_06DLEPGFEF@format?$AA@ DB 'format', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CKFJHKAP@find?$AA@
CONST	SEGMENT
??_C@_04CKFJHKAP@find?$AA@ DB 'find', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGLOKIEE@dump?$AA@
CONST	SEGMENT
??_C@_04GGLOKIEE@dump?$AA@ DB 'dump', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENMBGAPA@char?$AA@
CONST	SEGMENT
??_C@_04ENMBGAPA@char?$AA@ DB 'char', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHGKJMLH@byte?$AA@
CONST	SEGMENT
??_C@_04IHGKJMLH@byte?$AA@ DB 'byte', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_nativeendian DD 01H
	ORG $+4
_strlib	DD	FLAT:??_C@_04IHGKJMLH@byte?$AA@
	DD	FLAT:_str_byte
	DD	FLAT:??_C@_04ENMBGAPA@char?$AA@
	DD	FLAT:_str_char
	DD	FLAT:??_C@_04GGLOKIEE@dump?$AA@
	DD	FLAT:_str_dump
	DD	FLAT:??_C@_04CKFJHKAP@find?$AA@
	DD	FLAT:_str_find
	DD	FLAT:??_C@_06DLEPGFEF@format?$AA@
	DD	FLAT:_str_format
	DD	FLAT:??_C@_06DPFCLDIO@gmatch?$AA@
	DD	FLAT:_gmatch
	DD	FLAT:??_C@_04GOLEAPFD@gsub?$AA@
	DD	FLAT:_str_gsub
	DD	FLAT:??_C@_03BKCJCHLK@len?$AA@
	DD	FLAT:_str_len
	DD	FLAT:??_C@_05IPJEPLHL@lower?$AA@
	DD	FLAT:_str_lower
	DD	FLAT:??_C@_05FNONLPDI@match?$AA@
	DD	FLAT:_str_match
	DD	FLAT:??_C@_03HOKODIMJ@rep?$AA@
	DD	FLAT:_str_rep
	DD	FLAT:??_C@_07KOIEOCCE@reverse?$AA@
	DD	FLAT:_str_reverse
	DD	FLAT:??_C@_03KCMAIMAP@sub?$AA@
	DD	FLAT:_str_sub
	DD	FLAT:??_C@_05NECKJAMC@upper?$AA@
	DD	FLAT:_str_upper
	DD	FLAT:??_C@_04IPANLPFO@pack?$AA@
	DD	FLAT:_str_pack
	DD	FLAT:??_C@_08JEMJHBLC@packsize?$AA@
	DD	FLAT:_str_packsize
	DD	FLAT:??_C@_06FIONAGJL@unpack?$AA@
	DD	FLAT:_str_unpack
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_luaopen_string
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BL@JPPPHHNK@resulting?5string?5too?5large?$AA@ ; `string'
PUBLIC	??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0BO@BNLBHKJN@unable?5to?5dump?5given?5function?$AA@ ; `string'
PUBLIC	??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BI@ECNPHIBF@invalid?5pattern?5capture?$AA@ ; `string'
PUBLIC	??_C@_0CD@PLJBIEHA@malformed?5pattern?5?$CIends?5with?5?8?$CF?$CF@ ; `string'
PUBLIC	??_C@_0CA@CFGACOGB@malformed?5pattern?5?$CImissing?5?8?$FN?8?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CP@FCNHBCLO@malformed?5pattern?5?$CImissing?5argum@ ; `string'
PUBLIC	??_C@_0BC@IMEAEJPD@too?5many?5captures?$AA@	; `string'
PUBLIC	??_C@_0BE@LPFFPFJG@pattern?5too?5complex?$AA@	; `string'
PUBLIC	??_C@_0CD@LOJJMDBH@missing?5?8?$FL?8?5after?5?8?$CF?$CFf?8?5in?5patte@ ; `string'
PUBLIC	??_C@_0BD@BFKNEALP@unfinished?5capture?$AA@	; `string'
PUBLIC	??_C@_0L@NLFJOONJ@?$FO$?$CK?$CL?$DP?4?$CI?$FL?$CF?9?$AA@ ; `string'
PUBLIC	??_C@_0CK@KLCOLAN@invalid?5use?5of?5?8?$CFc?8?5in?5replaceme@ ; `string'
PUBLIC	??_C@_0CB@LPDIHGGA@invalid?5replacement?5value?5?$CIa?5?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0BP@PPPOBACA@string?1function?1table?5expected?$AA@ ; `string'
PUBLIC	??_C@_03GAHHLKFB@?2?$CFd?$AA@			; `string'
PUBLIC	??_C@_05OLMHDLGP@?2?$CF03d?$AA@			; `string'
PUBLIC	??_C@_05GGBDHNF@?9?$CL?5?$CD0?$AA@		; `string'
PUBLIC	??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precisi@ ; `string'
PUBLIC	??_C@_08JEIPHCP@no?5value?$AA@			; `string'
PUBLIC	??_C@_02IIDLDAAC@ll?$AA@			; `string'
PUBLIC	??_C@_0BG@FHCNDFMO@string?5contains?5zeros?$AA@	; `string'
PUBLIC	??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8format@ ; `string'
PUBLIC	??_C@_0CI@CNGGJHEE@integral?5size?5?$CI?$CFd?$CJ?5out?5of?5limits@ ; `string'
PUBLIC	??_C@_0CD@KNDEAFDL@missing?5size?5for?5format?5option?5?8@ ; `string'
PUBLIC	??_C@_0BL@EBKLKADF@invalid?5format?5option?5?8?$CFc?8?$AA@ ; `string'
PUBLIC	??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@ ; `string'
PUBLIC	??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@ ; `string'
PUBLIC	??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@	; `string'
PUBLIC	??_C@_0BC@HFAHIBAH@unsigned?5overflow?$AA@	; `string'
PUBLIC	??_C@_0CJ@JDDCIIOM@string?5length?5does?5not?5fit?5in?5gi@ ; `string'
PUBLIC	??_C@_0BI@IHIBMINB@format?5result?5too?5large?$AA@ ; `string'
PUBLIC	??_C@_0BH@BCBEHJHD@variable?9length?5format?$AA@ ; `string'
PUBLIC	??_C@_0CO@PPAGINFB@?$CFd?9byte?5integer?5does?5not?5fit?5int@ ; `string'
PUBLIC	??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@ ; `string'
PUBLIC	??_C@_0BG@KKKAHMHM@data?5string?5too?5short?$AA@ ; `string'
PUBLIC	??_C@_0BB@JAJHLPBA@too?5many?5results?$AA@	; `string'
PUBLIC	??_C@_07NHABFFHN@__index?$AA@			; `string'
PUBLIC	__real@405bc00000000000
EXTRN	__imp__isalpha:PROC
EXTRN	__imp__isupper:PROC
EXTRN	__imp__islower:PROC
EXTRN	__imp__isdigit:PROC
EXTRN	__imp__isxdigit:PROC
EXTRN	__imp__isspace:PROC
EXTRN	__imp__ispunct:PROC
EXTRN	__imp__isalnum:PROC
EXTRN	__imp__isgraph:PROC
EXTRN	__imp__iscntrl:PROC
EXTRN	__imp__toupper:PROC
EXTRN	__imp__tolower:PROC
EXTRN	__imp___snprintf:PROC
EXTRN	__imp__memchr:PROC
EXTRN	__imp__strchr:PROC
EXTRN	__imp__strpbrk:PROC
EXTRN	_lua_gettop:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_rotate:PROC
EXTRN	_lua_isstring:PROC
EXTRN	_lua_type:PROC
EXTRN	_lua_typename:PROC
EXTRN	_lua_toboolean:PROC
EXTRN	_lua_tolstring:PROC
EXTRN	_lua_touserdata:PROC
EXTRN	_lua_pushnil:PROC
EXTRN	_lua_pushnumber:PROC
EXTRN	_lua_pushinteger:PROC
EXTRN	_lua_pushlstring:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_pushcclosure:PROC
EXTRN	_lua_gettable:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_newuserdata:PROC
EXTRN	_lua_setfield:PROC
EXTRN	_lua_setmetatable:PROC
EXTRN	_lua_callk:PROC
EXTRN	_lua_dump:PROC
EXTRN	_luaL_checkversion_:PROC
EXTRN	_luaL_tolstring:PROC
EXTRN	_luaL_argerror:PROC
EXTRN	_luaL_checklstring:PROC
EXTRN	_luaL_optlstring:PROC
EXTRN	_luaL_checknumber:PROC
EXTRN	_luaL_checkinteger:PROC
EXTRN	_luaL_optinteger:PROC
EXTRN	_luaL_checkstack:PROC
EXTRN	_luaL_checktype:PROC
EXTRN	_luaL_error:PROC
EXTRN	_luaL_setfuncs:PROC
EXTRN	_luaL_buffinit:PROC
EXTRN	_luaL_prepbuffsize:PROC
EXTRN	_luaL_addlstring:PROC
EXTRN	_luaL_addstring:PROC
EXTRN	_luaL_addvalue:PROC
EXTRN	_luaL_pushresult:PROC
EXTRN	_luaL_pushresultsize:PROC
EXTRN	_luaL_buffinitsize:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__alldiv:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_07NHABFFHN@__index?$AA@
CONST	SEGMENT
??_C@_07NHABFFHN@__index?$AA@ DB '__index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JAJHLPBA@too?5many?5results?$AA@
CONST	SEGMENT
??_C@_0BB@JAJHLPBA@too?5many?5results?$AA@ DB 'too many results', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KKKAHMHM@data?5string?5too?5short?$AA@
CONST	SEGMENT
??_C@_0BG@KKKAHMHM@data?5string?5too?5short?$AA@ DB 'data string too shor'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@
CONST	SEGMENT
??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@ DB 'initial po'
	DB	'sition out of string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PPAGINFB@?$CFd?9byte?5integer?5does?5not?5fit?5int@
CONST	SEGMENT
??_C@_0CO@PPAGINFB@?$CFd?9byte?5integer?5does?5not?5fit?5int@ DB '%d-byte'
	DB	' integer does not fit into Lua Integer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BCBEHJHD@variable?9length?5format?$AA@
CONST	SEGMENT
??_C@_0BH@BCBEHJHD@variable?9length?5format?$AA@ DB 'variable-length form'
	DB	'at', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IHIBMINB@format?5result?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BI@IHIBMINB@format?5result?5too?5large?$AA@ DB 'format result too '
	DB	'large', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JDDCIIOM@string?5length?5does?5not?5fit?5in?5gi@
CONST	SEGMENT
??_C@_0CJ@JDDCIIOM@string?5length?5does?5not?5fit?5in?5gi@ DB 'string len'
	DB	'gth does not fit in given size', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HFAHIBAH@unsigned?5overflow?$AA@
CONST	SEGMENT
??_C@_0BC@HFAHIBAH@unsigned?5overflow?$AA@ DB 'unsigned overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@
CONST	SEGMENT
??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@ DB 'integer overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@
CONST	SEGMENT
??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@ DB 'format asks'
	DB	' for alignment not power of 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@
CONST	SEGMENT
??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@ DB 'invalid ne'
	DB	'xt option for option ''X''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EBKLKADF@invalid?5format?5option?5?8?$CFc?8?$AA@
CONST	SEGMENT
??_C@_0BL@EBKLKADF@invalid?5format?5option?5?8?$CFc?8?$AA@ DB 'invalid fo'
	DB	'rmat option ''%c''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KNDEAFDL@missing?5size?5for?5format?5option?5?8@
CONST	SEGMENT
??_C@_0CD@KNDEAFDL@missing?5size?5for?5format?5option?5?8@ DB 'missing si'
	DB	'ze for format option ''c''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CNGGJHEE@integral?5size?5?$CI?$CFd?$CJ?5out?5of?5limits@
CONST	SEGMENT
??_C@_0CI@CNGGJHEE@integral?5size?5?$CI?$CFd?$CJ?5out?5of?5limits@ DB 'in'
	DB	'tegral size (%d) out of limits [1,%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8format@
CONST	SEGMENT
??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8format@ DB 'i'
	DB	'nvalid option ''%%%c'' to ''format''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FHCNDFMO@string?5contains?5zeros?$AA@
CONST	SEGMENT
??_C@_0BG@FHCNDFMO@string?5contains?5zeros?$AA@ DB 'string contains zeros'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02IIDLDAAC@ll?$AA@
CONST	SEGMENT
??_C@_02IIDLDAAC@ll?$AA@ DB 'll', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JEIPHCP@no?5value?$AA@
CONST	SEGMENT
??_C@_08JEIPHCP@no?5value?$AA@ DB 'no value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precisi@
CONST	SEGMENT
??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precisi@ DB 'invalid f'
	DB	'ormat (width or precision too long)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ?$AA@
CONST	SEGMENT
??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ?$AA@ DB 'inva'
	DB	'lid format (repeated flags)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGBDHNF@?9?$CL?5?$CD0?$AA@
CONST	SEGMENT
??_C@_05GGBDHNF@?9?$CL?5?$CD0?$AA@ DB '-+ #0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLMHDLGP@?2?$CF03d?$AA@
CONST	SEGMENT
??_C@_05OLMHDLGP@?2?$CF03d?$AA@ DB '\%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GAHHLKFB@?2?$CFd?$AA@
CONST	SEGMENT
??_C@_03GAHHLKFB@?2?$CFd?$AA@ DB '\%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PPPOBACA@string?1function?1table?5expected?$AA@
CONST	SEGMENT
??_C@_0BP@PPPOBACA@string?1function?1table?5expected?$AA@ DB 'string/func'
	DB	'tion/table expected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LPDIHGGA@invalid?5replacement?5value?5?$CIa?5?$CFs?$CJ@
CONST	SEGMENT
??_C@_0CB@LPDIHGGA@invalid?5replacement?5value?5?$CIa?5?$CFs?$CJ@ DB 'inv'
	DB	'alid replacement value (a %s)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KLCOLAN@invalid?5use?5of?5?8?$CFc?8?5in?5replaceme@
CONST	SEGMENT
??_C@_0CK@KLCOLAN@invalid?5use?5of?5?8?$CFc?8?5in?5replaceme@ DB 'invalid'
	DB	' use of ''%c'' in replacement string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NLFJOONJ@?$FO$?$CK?$CL?$DP?4?$CI?$FL?$CF?9?$AA@
CONST	SEGMENT
??_C@_0L@NLFJOONJ@?$FO$?$CK?$CL?$DP?4?$CI?$FL?$CF?9?$AA@ DB '^$*+?.([%-', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BFKNEALP@unfinished?5capture?$AA@
CONST	SEGMENT
??_C@_0BD@BFKNEALP@unfinished?5capture?$AA@ DB 'unfinished capture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LOJJMDBH@missing?5?8?$FL?8?5after?5?8?$CF?$CFf?8?5in?5patte@
CONST	SEGMENT
??_C@_0CD@LOJJMDBH@missing?5?8?$FL?8?5after?5?8?$CF?$CFf?8?5in?5patte@ DB 'm'
	DB	'issing ''['' after ''%%f'' in pattern', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LPFFPFJG@pattern?5too?5complex?$AA@
CONST	SEGMENT
??_C@_0BE@LPFFPFJG@pattern?5too?5complex?$AA@ DB 'pattern too complex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMEAEJPD@too?5many?5captures?$AA@
CONST	SEGMENT
??_C@_0BC@IMEAEJPD@too?5many?5captures?$AA@ DB 'too many captures', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@FCNHBCLO@malformed?5pattern?5?$CImissing?5argum@
CONST	SEGMENT
??_C@_0CP@FCNHBCLO@malformed?5pattern?5?$CImissing?5argum@ DB 'malformed '
	DB	'pattern (missing arguments to ''%%b'')', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CFGACOGB@malformed?5pattern?5?$CImissing?5?8?$FN?8?$CJ?$AA@
CONST	SEGMENT
??_C@_0CA@CFGACOGB@malformed?5pattern?5?$CImissing?5?8?$FN?8?$CJ?$AA@ DB 'm'
	DB	'alformed pattern (missing '']'')', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PLJBIEHA@malformed?5pattern?5?$CIends?5with?5?8?$CF?$CF@
CONST	SEGMENT
??_C@_0CD@PLJBIEHA@malformed?5pattern?5?$CIends?5with?5?8?$CF?$CF@ DB 'ma'
	DB	'lformed pattern (ends with ''%%'')', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ECNPHIBF@invalid?5pattern?5capture?$AA@
CONST	SEGMENT
??_C@_0BI@ECNPHIBF@invalid?5pattern?5capture?$AA@ DB 'invalid pattern cap'
	DB	'ture', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@
CONST	SEGMENT
??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@ DB 'invalid'
	DB	' capture index %%%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BNLBHKJN@unable?5to?5dump?5given?5function?$AA@
CONST	SEGMENT
??_C@_0BO@BNLBHKJN@unable?5to?5dump?5given?5function?$AA@ DB 'unable to d'
	DB	'ump given function', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@ DB 'value out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@ DB 'string slice too lon'
	DB	'g', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JPPPHHNK@resulting?5string?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BL@JPPPHHNK@resulting?5string?5too?5large?$AA@ DB 'resulting strin'
	DB	'g too large', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _createmetatable
_TEXT	SEGMENT
_L$ = 8							; size = 4
_createmetatable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1533
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 1534
  00004	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00007	6a 01		 push	 1
  00009	6a 00		 push	 0
  0000b	56		 push	 esi
  0000c	e8 00 00 00 00	 call	 _lua_createtable
; Line 1535
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _lua_pushstring
; Line 1536
  0001c	6a fe		 push	 -2			; fffffffeH
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 1537
  00024	6a fe		 push	 -2			; fffffffeH
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _lua_setmetatable
; Line 1538
  0002c	6a fe		 push	 -2			; fffffffeH
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _lua_settop
; Line 1539
  00034	6a fe		 push	 -2			; fffffffeH
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 1540
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_07NHABFFHN@__index?$AA@
  00041	6a fe		 push	 -2			; fffffffeH
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _lua_setfield
  00049	83 c4 40	 add	 esp, 64			; 00000040H
; Line 1541
  0004c	6a fe		 push	 -2			; fffffffeH
  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 _lua_settop
  00054	83 c4 08	 add	 esp, 8
  00057	5e		 pop	 esi
; Line 1542
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_createmetatable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_unpack
_TEXT	SEGMENT
_h$ = -88						; size = 12
_ntoalign$1 = -76					; size = 4
_size$2 = -72						; size = 4
_fmt$ = -68						; size = 4
$T3 = -64						; size = 8
_len$1$ = -60						; size = 4
_opt$1$ = -60						; size = 4
_ld$ = -56						; size = 4
_n$1$ = -52						; size = 4
_data$1$ = -48						; size = 4
_u$4 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_str_unpack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1445
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
; Line 1447
  00016	6a 00		 push	 0
  00018	6a 01		 push	 1
  0001a	53		 push	 ebx
  0001b	e8 00 00 00 00	 call	 _luaL_checklstring
  00020	89 45 bc	 mov	 DWORD PTR _fmt$[ebp], eax
; Line 1449
  00023	8d 45 c8	 lea	 eax, DWORD PTR _ld$[ebp]
  00026	50		 push	 eax
  00027	6a 02		 push	 2
  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 1450
  0002f	8b 75 c8	 mov	 esi, DWORD PTR _ld$[ebp]
  00032	6a 00		 push	 0
  00034	6a 01		 push	 1
  00036	6a 03		 push	 3
  00038	53		 push	 ebx
  00039	89 45 d0	 mov	 DWORD PTR _data$1$[ebp], eax
  0003c	e8 00 00 00 00	 call	 _luaL_optinteger
  00041	83 c4 28	 add	 esp, 40			; 00000028H
  00044	8b f8		 mov	 edi, eax
  00046	85 d2		 test	 edx, edx
  00048	7c 0b		 jl	 SHORT $LN24@str_unpack
  0004a	7f 04		 jg	 SHORT $LN33@str_unpack
  0004c	85 ff		 test	 edi, edi
  0004e	72 05		 jb	 SHORT $LN24@str_unpack
$LN33@str_unpack:
  00050	89 55 c4	 mov	 DWORD PTR $T3[ebp+4], edx
  00053	eb 22		 jmp	 SHORT $LN21@str_unpack
$LN24@str_unpack:
  00055	f7 d8		 neg	 eax
  00057	3b c6		 cmp	 eax, esi
  00059	76 0d		 jbe	 SHORT $LN22@str_unpack
  0005b	0f 57 c0	 xorps	 xmm0, xmm0
  0005e	66 0f 13 45 c0	 movlpd	 QWORD PTR $T3[ebp], xmm0
  00063	8b 7d c0	 mov	 edi, DWORD PTR $T3[ebp]
  00066	eb 0f		 jmp	 SHORT $LN21@str_unpack
$LN22@str_unpack:
  00068	33 c0		 xor	 eax, eax
  0006a	03 fe		 add	 edi, esi
  0006c	13 c2		 adc	 eax, edx
  0006e	83 c7 01	 add	 edi, 1
  00071	83 d0 00	 adc	 eax, 0
  00074	89 45 c4	 mov	 DWORD PTR $T3[ebp+4], eax
$LN21@str_unpack:
  00077	4f		 dec	 edi
; Line 1451
  00078	33 f6		 xor	 esi, esi
  0007a	89 75 cc	 mov	 DWORD PTR _n$1$[ebp], esi
; Line 1452
  0007d	3b 7d c8	 cmp	 edi, DWORD PTR _ld$[ebp]
  00080	76 10		 jbe	 SHORT $LN19@str_unpack
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@
  00087	6a 03		 push	 3
  00089	53		 push	 ebx
  0008a	e8 00 00 00 00	 call	 _luaL_argerror
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@str_unpack:
; Line 1454
  00092	8b 45 bc	 mov	 eax, DWORD PTR _fmt$[ebp]
  00095	89 5d a8	 mov	 DWORD PTR _h$[ebp], ebx
  00098	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR _h$[ebp+4], 1
  0009f	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _h$[ebp+8], 1
  000a6	80 38 00	 cmp	 BYTE PTR [eax], 0
  000a9	0f 84 78 01 00
	00		 je	 $LN15@str_unpack
  000af	90		 npad	 1
$LL16@str_unpack:
; Line 1456
  000b0	8d 45 b4	 lea	 eax, DWORD PTR _ntoalign$1[ebp]
  000b3	50		 push	 eax
  000b4	8d 45 b8	 lea	 eax, DWORD PTR _size$2[ebp]
  000b7	50		 push	 eax
  000b8	8d 45 bc	 lea	 eax, DWORD PTR _fmt$[ebp]
  000bb	50		 push	 eax
  000bc	8d 45 a8	 lea	 eax, DWORD PTR _h$[ebp]
  000bf	57		 push	 edi
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 _getdetails
; Line 1457
  000c6	8b 75 b8	 mov	 esi, DWORD PTR _size$2[ebp]
  000c9	8b cf		 mov	 ecx, edi
  000cb	89 45 c4	 mov	 DWORD PTR _opt$1$[ebp], eax
  000ce	f7 d1		 not	 ecx
  000d0	8b 45 b4	 mov	 eax, DWORD PTR _ntoalign$1[ebp]
  000d3	83 c4 14	 add	 esp, 20			; 00000014H
  000d6	8d 14 06	 lea	 edx, DWORD PTR [esi+eax]
  000d9	3b d1		 cmp	 edx, ecx
  000db	77 08		 ja	 SHORT $LN13@str_unpack
  000dd	8d 0c 3a	 lea	 ecx, DWORD PTR [edx+edi]
  000e0	3b 4d c8	 cmp	 ecx, DWORD PTR _ld$[ebp]
  000e3	76 13		 jbe	 SHORT $LN14@str_unpack
$LN13@str_unpack:
; Line 1458
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KKKAHMHM@data?5string?5too?5short?$AA@
  000ea	6a 02		 push	 2
  000ec	53		 push	 ebx
  000ed	e8 00 00 00 00	 call	 _luaL_argerror
  000f2	8b 45 b4	 mov	 eax, DWORD PTR _ntoalign$1[ebp]
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@str_unpack:
; Line 1461
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JAJHLPBA@too?5many?5results?$AA@
  000fd	6a 02		 push	 2
  000ff	53		 push	 ebx
  00100	03 f8		 add	 edi, eax
  00102	e8 00 00 00 00	 call	 _luaL_checkstack
; Line 1462
  00107	8b 45 cc	 mov	 eax, DWORD PTR _n$1$[ebp]
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1463
  0010d	8b 4d c4	 mov	 ecx, DWORD PTR _opt$1$[ebp]
  00110	40		 inc	 eax
  00111	89 45 cc	 mov	 DWORD PTR _n$1$[ebp], eax
  00114	83 f9 08	 cmp	 ecx, 8
  00117	0f 87 f9 00 00
	00		 ja	 $LN11@str_unpack
  0011d	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN36@str_unpack[ecx*4]
$LN10@str_unpack:
; Line 1467
  00124	33 c0		 xor	 eax, eax
  00126	85 c9		 test	 ecx, ecx
  00128	0f 94 c0	 sete	 al
  0012b	50		 push	 eax
  0012c	8b 45 d0	 mov	 eax, DWORD PTR _data$1$[ebp]
  0012f	56		 push	 esi
  00130	ff 75 ac	 push	 DWORD PTR _h$[ebp+4]
  00133	03 c7		 add	 eax, edi
  00135	50		 push	 eax
  00136	53		 push	 ebx
  00137	e8 00 00 00 00	 call	 _unpackint
; Line 1468
  0013c	52		 push	 edx
  0013d	50		 push	 eax
  0013e	53		 push	 ebx
  0013f	e8 00 00 00 00	 call	 _lua_pushinteger
  00144	83 c4 20	 add	 esp, 32			; 00000020H
; Line 1469
  00147	e9 ca 00 00 00	 jmp	 $LN11@str_unpack
$LN9@str_unpack:
; Line 1474
  0014c	ff 75 ac	 push	 DWORD PTR _h$[ebp+4]
  0014f	8b 45 d0	 mov	 eax, DWORD PTR _data$1$[ebp]
  00152	03 c7		 add	 eax, edi
  00154	56		 push	 esi
  00155	50		 push	 eax
  00156	8d 45 d4	 lea	 eax, DWORD PTR _u$4[ebp]
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 _copywithendian
  0015f	83 c4 10	 add	 esp, 16			; 00000010H
; Line 1475
  00162	83 fe 04	 cmp	 esi, 4
  00165	75 0a		 jne	 SHORT $LN8@str_unpack
  00167	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _u$4[ebp]
  0016c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0016f	eb 05		 jmp	 SHORT $LN5@str_unpack
$LN8@str_unpack:
; Line 1476
  00171	f2 0f 10 45 d4	 movsd	 xmm0, QWORD PTR _u$4[ebp]
$LN5@str_unpack:
; Line 1478
  00176	83 ec 08	 sub	 esp, 8
  00179	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0017e	53		 push	 ebx
  0017f	e8 00 00 00 00	 call	 _lua_pushnumber
; Line 1479
  00184	8b 75 b8	 mov	 esi, DWORD PTR _size$2[ebp]
  00187	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018a	e9 87 00 00 00	 jmp	 $LN11@str_unpack
$LN4@str_unpack:
; Line 1482
  0018f	8b 45 d0	 mov	 eax, DWORD PTR _data$1$[ebp]
  00192	56		 push	 esi
  00193	03 c7		 add	 eax, edi
  00195	50		 push	 eax
  00196	53		 push	 ebx
  00197	e8 00 00 00 00	 call	 _lua_pushlstring
  0019c	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1483
  0019f	eb 75		 jmp	 SHORT $LN11@str_unpack
$LN3@str_unpack:
; Line 1486
  001a1	8b 45 d0	 mov	 eax, DWORD PTR _data$1$[ebp]
  001a4	6a 00		 push	 0
  001a6	56		 push	 esi
  001a7	ff 75 ac	 push	 DWORD PTR _h$[ebp+4]
  001aa	03 c7		 add	 eax, edi
  001ac	50		 push	 eax
  001ad	53		 push	 ebx
  001ae	e8 00 00 00 00	 call	 _unpackint
  001b3	83 c4 14	 add	 esp, 20			; 00000014H
  001b6	89 45 c4	 mov	 DWORD PTR _len$1$[ebp], eax
; Line 1487
  001b9	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  001bc	03 cf		 add	 ecx, edi
  001be	3b 4d c8	 cmp	 ecx, DWORD PTR _ld$[ebp]
  001c1	76 13		 jbe	 SHORT $LN20@str_unpack
  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KKKAHMHM@data?5string?5too?5short?$AA@
  001c8	6a 02		 push	 2
  001ca	53		 push	 ebx
  001cb	e8 00 00 00 00	 call	 _luaL_argerror
  001d0	8b 45 c4	 mov	 eax, DWORD PTR _len$1$[ebp]
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN20@str_unpack:
; Line 1488
  001d6	50		 push	 eax
  001d7	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  001da	03 45 d0	 add	 eax, DWORD PTR _data$1$[ebp]
  001dd	50		 push	 eax
  001de	53		 push	 ebx
  001df	e8 00 00 00 00	 call	 _lua_pushlstring
  001e4	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1489
  001e7	03 7d c4	 add	 edi, DWORD PTR _len$1$[ebp]
; Line 1490
  001ea	eb 2a		 jmp	 SHORT $LN11@str_unpack
$LN2@str_unpack:
; Line 1493
  001ec	8b 4d d0	 mov	 ecx, DWORD PTR _data$1$[ebp]
  001ef	03 cf		 add	 ecx, edi
  001f1	8b f1		 mov	 esi, ecx
  001f3	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
$LL34@str_unpack:
  001f6	8a 06		 mov	 al, BYTE PTR [esi]
  001f8	46		 inc	 esi
  001f9	84 c0		 test	 al, al
  001fb	75 f9		 jne	 SHORT $LL34@str_unpack
  001fd	2b f2		 sub	 esi, edx
; Line 1494
  001ff	56		 push	 esi
  00200	51		 push	 ecx
  00201	53		 push	 ebx
  00202	e8 00 00 00 00	 call	 _lua_pushlstring
; Line 1495
  00207	46		 inc	 esi
  00208	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020b	03 fe		 add	 edi, esi
; Line 1496
  0020d	8b 75 b8	 mov	 esi, DWORD PTR _size$2[ebp]
  00210	eb 04		 jmp	 SHORT $LN11@str_unpack
$LN1@str_unpack:
; Line 1499
  00212	48		 dec	 eax
  00213	89 45 cc	 mov	 DWORD PTR _n$1$[ebp], eax
$LN11@str_unpack:
; Line 1502
  00216	8b 45 bc	 mov	 eax, DWORD PTR _fmt$[ebp]
  00219	03 fe		 add	 edi, esi
  0021b	80 38 00	 cmp	 BYTE PTR [eax], 0
  0021e	0f 85 8c fe ff
	ff		 jne	 $LL16@str_unpack
  00224	8b 75 cc	 mov	 esi, DWORD PTR _n$1$[ebp]
$LN15@str_unpack:
; Line 1504
  00227	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0022a	6a 00		 push	 0
  0022c	50		 push	 eax
  0022d	53		 push	 ebx
  0022e	e8 00 00 00 00	 call	 _lua_pushinteger
; Line 1506
  00233	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00236	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00239	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023c	33 cd		 xor	 ecx, ebp
  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	5b		 pop	 ebx
  00241	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c3		 ret	 0
  0024a	8b ff		 npad	 2
$LN36@str_unpack:
  0024c	00 00 00 00	 DD	 $LN10@str_unpack
  00250	00 00 00 00	 DD	 $LN10@str_unpack
  00254	00 00 00 00	 DD	 $LN9@str_unpack
  00258	00 00 00 00	 DD	 $LN4@str_unpack
  0025c	00 00 00 00	 DD	 $LN3@str_unpack
  00260	00 00 00 00	 DD	 $LN2@str_unpack
  00264	00 00 00 00	 DD	 $LN1@str_unpack
  00268	00 00 00 00	 DD	 $LN1@str_unpack
  0026c	00 00 00 00	 DD	 $LN1@str_unpack
_str_unpack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _unpackint
_TEXT	SEGMENT
_res$ = -20						; size = 8
_i$2$ = -12						; size = 4
tv245 = -8						; size = 4
_res$1$ = -8						; size = 4
_res$2$ = -4						; size = 4
_L$ = 8							; size = 4
_str$ = 12						; size = 4
_islittle$ = 16						; size = 4
_mask$1$ = 20						; size = 4
_size$ = 20						; size = 4
_issigned$ = 24						; size = 4
_unpackint PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1420
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
; Line 1424
  00006	8b 55 10	 mov	 edx, DWORD PTR _islittle$[ebp]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	be 08 00 00 00	 mov	 esi, 8
  00013	66 0f 13 45 ec	 movlpd	 QWORD PTR _res$[ebp], xmm0
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _res$[ebp+4]
  0001b	8b 5d ec	 mov	 ebx, DWORD PTR _res$[ebp]
  0001e	57		 push	 edi
  0001f	8b 7d 14	 mov	 edi, DWORD PTR _size$[ebp]
  00022	3b fe		 cmp	 edi, esi
  00024	0f 4e f7	 cmovle	 esi, edi
  00027	89 75 f4	 mov	 DWORD PTR _i$2$[ebp], esi
  0002a	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0002d	85 c0		 test	 eax, eax
  0002f	78 2c		 js	 SHORT $LN29@unpackint
; Line 1421
  00031	8b f0		 mov	 esi, eax
  00033	2b fe		 sub	 edi, esi
  00035	4f		 dec	 edi
$LL11@unpackint:
; Line 1425
  00036	0f a4 d9 08	 shld	 ecx, ebx, 8
; Line 1426
  0003a	8b c7		 mov	 eax, edi
  0003c	c1 e3 08	 shl	 ebx, 8
  0003f	85 d2		 test	 edx, edx
  00041	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  00044	0f 45 c6	 cmovne	 eax, esi
  00047	47		 inc	 edi
  00048	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  0004c	99		 cdq
  0004d	0b ca		 or	 ecx, edx
  0004f	0b d8		 or	 ebx, eax
  00051	4e		 dec	 esi
  00052	8b 55 10	 mov	 edx, DWORD PTR _islittle$[ebp]
  00055	79 df		 jns	 SHORT $LL11@unpackint
  00057	8b 75 f4	 mov	 esi, DWORD PTR _i$2$[ebp]
  0005a	8b 7d 14	 mov	 edi, DWORD PTR _size$[ebp]
$LN29@unpackint:
; Line 1424
  0005d	89 5d f8	 mov	 DWORD PTR _res$1$[ebp], ebx
  00060	89 4d fc	 mov	 DWORD PTR _res$2$[ebp], ecx
; Line 1428
  00063	83 ff 08	 cmp	 edi, 8
  00066	7d 40		 jge	 SHORT $LN33@unpackint
; Line 1429
  00068	83 7d 18 00	 cmp	 DWORD PTR _issigned$[ebp], 0
  0006c	0f 84 8c 00 00
	00		 je	 $LN32@unpackint
; Line 1430
  00072	8d 04 fd ff ff
	ff ff		 lea	 eax, DWORD PTR [edi*8-1]
  00079	33 d2		 xor	 edx, edx
; Line 1431
  0007b	8b 7d fc	 mov	 edi, DWORD PTR _res$2$[ebp]
  0007e	0f ab c2	 bts	 edx, eax
  00081	33 f6		 xor	 esi, esi
  00083	83 f8 20	 cmp	 eax, 32			; 00000020H
  00086	0f 43 f2	 cmovae	 esi, edx
  00089	33 d6		 xor	 edx, esi
  0008b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0008e	8b ca		 mov	 ecx, edx
  00090	0f 43 f2	 cmovae	 esi, edx
  00093	33 cb		 xor	 ecx, ebx
  00095	8b c6		 mov	 eax, esi
  00097	33 f8		 xor	 edi, eax
  00099	2b ca		 sub	 ecx, edx
; Line 1441
  0009b	8b c1		 mov	 eax, ecx
  0009d	1b fe		 sbb	 edi, esi
  0009f	8b d7		 mov	 edx, edi
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
; Line 1442
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
$LN33@unpackint:
; Line 1434
  000a8	7e 54		 jle	 SHORT $LN32@unpackint
; Line 1435
  000aa	83 7d 18 00	 cmp	 DWORD PTR _issigned$[ebp], 0
  000ae	74 13		 je	 SHORT $LN16@unpackint
  000b0	85 c9		 test	 ecx, ecx
  000b2	7f 0f		 jg	 SHORT $LN16@unpackint
  000b4	7c 04		 jl	 SHORT $LN28@unpackint
  000b6	85 db		 test	 ebx, ebx
  000b8	73 09		 jae	 SHORT $LN16@unpackint
$LN28@unpackint:
  000ba	c7 45 14 ff 00
	00 00		 mov	 DWORD PTR _mask$1$[ebp], 255 ; 000000ffH
  000c1	eb 05		 jmp	 SHORT $LN17@unpackint
$LN16@unpackint:
  000c3	33 c9		 xor	 ecx, ecx
  000c5	89 4d 14	 mov	 DWORD PTR _mask$1$[ebp], ecx
$LN17@unpackint:
; Line 1436
  000c8	3b f7		 cmp	 esi, edi
  000ca	7d 32		 jge	 SHORT $LN32@unpackint
  000cc	8b df		 mov	 ebx, edi
  000ce	2b de		 sub	 ebx, esi
  000d0	4b		 dec	 ebx
$LL4@unpackint:
; Line 1437
  000d1	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  000d4	85 d2		 test	 edx, edx
  000d6	8b c3		 mov	 eax, ebx
  000d8	0f 45 c6	 cmovne	 eax, esi
  000db	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  000df	3b 45 14	 cmp	 eax, DWORD PTR _mask$1$[ebp]
  000e2	74 14		 je	 SHORT $LN3@unpackint
; Line 1438
  000e4	57		 push	 edi
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@PPAGINFB@?$CFd?9byte?5integer?5does?5not?5fit?5int@
  000ea	ff 75 08	 push	 DWORD PTR _L$[ebp]
  000ed	e8 00 00 00 00	 call	 _luaL_error
  000f2	8b 55 10	 mov	 edx, DWORD PTR _islittle$[ebp]
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@unpackint:
; Line 1436
  000f8	46		 inc	 esi
  000f9	4b		 dec	 ebx
  000fa	3b f7		 cmp	 esi, edi
  000fc	7c d3		 jl	 SHORT $LL4@unpackint
$LN32@unpackint:
  000fe	8b 7d fc	 mov	 edi, DWORD PTR _res$2$[ebp]
; Line 1441
  00101	8b d7		 mov	 edx, edi
  00103	8b 4d f8	 mov	 ecx, DWORD PTR _res$1$[ebp]
  00106	8b c1		 mov	 eax, ecx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
; Line 1442
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
_unpackint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_packsize
_TEXT	SEGMENT
_h$ = -28						; size = 12
_opt$1$ = -16						; size = 4
_totalsize$1$ = -12					; size = 4
tv222 = -8						; size = 4
_align$1 = -8						; size = 4
_size$2 = -8						; size = 4
_fmt$ = -4						; size = 4
_L$ = 8							; size = 4
_str_packsize PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1386
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 1388
  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	6a 00		 push	 0
  0000d	6a 01		 push	 1
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 1389
  00015	33 db		 xor	 ebx, ebx
  00017	89 45 fc	 mov	 DWORD PTR _fmt$[ebp], eax
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	89 5d f4	 mov	 DWORD PTR _totalsize$1$[ebp], ebx
; Line 1390
  00020	89 75 e4	 mov	 DWORD PTR _h$[ebp], esi
  00023	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _h$[ebp+4], 1
  0002a	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _h$[ebp+8], 1
; Line 1391
  00031	38 18		 cmp	 BYTE PTR [eax], bl
  00033	0f 84 fc 00 00
	00		 je	 $LN5@str_packsi
  00039	57		 push	 edi
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL6@str_packsi:
; Line 1393
  00040	8d 45 f8	 lea	 eax, DWORD PTR _size$2[ebp]
  00043	50		 push	 eax
  00044	8d 45 fc	 lea	 eax, DWORD PTR _fmt$[ebp]
  00047	50		 push	 eax
  00048	8d 45 e4	 lea	 eax, DWORD PTR _h$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _getoption
  00051	8b 7d f8	 mov	 edi, DWORD PTR _size$2[ebp]
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	89 45 f0	 mov	 DWORD PTR _opt$1$[ebp], eax
  0005a	8b f7		 mov	 esi, edi
  0005c	89 75 f8	 mov	 DWORD PTR _align$1[ebp], esi
  0005f	83 f8 07	 cmp	 eax, 7
  00062	75 3d		 jne	 SHORT $LN27@str_packsi
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00067	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0006a	74 20		 je	 SHORT $LN17@str_packsi
  0006c	8d 45 f8	 lea	 eax, DWORD PTR _align$1[ebp]
  0006f	50		 push	 eax
  00070	8d 45 fc	 lea	 eax, DWORD PTR _fmt$[ebp]
  00073	50		 push	 eax
  00074	8d 45 e4	 lea	 eax, DWORD PTR _h$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _getoption
  0007d	8b 75 f8	 mov	 esi, DWORD PTR _align$1[ebp]
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	83 f8 03	 cmp	 eax, 3
  00086	74 04		 je	 SHORT $LN17@str_packsi
  00088	85 f6		 test	 esi, esi
  0008a	75 15		 jne	 SHORT $LN27@str_packsi
$LN17@str_packsi:
  0008c	8b 5d e4	 mov	 ebx, DWORD PTR _h$[ebp]
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@
  00094	6a 01		 push	 1
  00096	53		 push	 ebx
  00097	e8 00 00 00 00	 call	 _luaL_argerror
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	eb 03		 jmp	 SHORT $LN18@str_packsi
$LN27@str_packsi:
  000a1	8b 5d e4	 mov	 ebx, DWORD PTR _h$[ebp]
$LN18@str_packsi:
  000a4	83 fe 01	 cmp	 esi, 1
  000a7	7e 37		 jle	 SHORT $LN15@str_packsi
  000a9	83 7d f0 03	 cmp	 DWORD PTR _opt$1$[ebp], 3
  000ad	74 31		 je	 SHORT $LN15@str_packsi
  000af	3b 75 ec	 cmp	 esi, DWORD PTR _h$[ebp+8]
  000b2	0f 4f 75 ec	 cmovg	 esi, DWORD PTR _h$[ebp+8]
  000b6	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
  000b9	89 4d f8	 mov	 DWORD PTR tv222[ebp], ecx
  000bc	85 ce		 test	 ecx, esi
  000be	74 13		 je	 SHORT $LN12@str_packsi
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@
  000c5	6a 01		 push	 1
  000c7	53		 push	 ebx
  000c8	e8 00 00 00 00	 call	 _luaL_argerror
  000cd	8b 4d f8	 mov	 ecx, DWORD PTR tv222[ebp]
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@str_packsi:
  000d3	8b 5d f4	 mov	 ebx, DWORD PTR _totalsize$1$[ebp]
  000d6	8b c1		 mov	 eax, ecx
  000d8	23 c3		 and	 eax, ebx
  000da	2b f0		 sub	 esi, eax
  000dc	23 f1		 and	 esi, ecx
  000de	eb 05		 jmp	 SHORT $LN14@str_packsi
$LN15@str_packsi:
  000e0	8b 5d f4	 mov	 ebx, DWORD PTR _totalsize$1$[ebp]
  000e3	33 f6		 xor	 esi, esi
$LN14@str_packsi:
; Line 1394
  000e5	03 fe		 add	 edi, esi
; Line 1396
  000e7	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000ec	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  000ef	2b c7		 sub	 eax, edi
  000f1	89 7d f8	 mov	 DWORD PTR _size$2[ebp], edi
  000f4	3b d8		 cmp	 ebx, eax
  000f6	76 10		 jbe	 SHORT $LN9@str_packsi
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IHIBMINB@format?5result?5too?5large?$AA@
  000fd	6a 01		 push	 1
  000ff	56		 push	 esi
  00100	e8 00 00 00 00	 call	 _luaL_argerror
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@str_packsi:
; Line 1398
  00108	8b 45 f0	 mov	 eax, DWORD PTR _opt$1$[ebp]
  0010b	03 df		 add	 ebx, edi
  0010d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00110	89 5d f4	 mov	 DWORD PTR _totalsize$1$[ebp], ebx
  00113	83 f8 01	 cmp	 eax, 1
  00116	77 10		 ja	 SHORT $LN1@str_packsi
; Line 1401
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BCBEHJHD@variable?9length?5format?$AA@
  0011d	6a 01		 push	 1
  0011f	56		 push	 esi
  00120	e8 00 00 00 00	 call	 _luaL_argerror
  00125	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@str_packsi:
; Line 1391
  00128	8b 45 fc	 mov	 eax, DWORD PTR _fmt$[ebp]
  0012b	80 38 00	 cmp	 BYTE PTR [eax], 0
  0012e	0f 85 0c ff ff
	ff		 jne	 $LL6@str_packsi
  00134	5f		 pop	 edi
$LN5@str_packsi:
; Line 1406
  00135	6a 00		 push	 0
  00137	53		 push	 ebx
  00138	56		 push	 esi
  00139	e8 00 00 00 00	 call	 _lua_pushinteger
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1407
  00141	b8 01 00 00 00	 mov	 eax, 1
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
; Line 1408
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
_str_packsize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_pack
_TEXT	SEGMENT
_size$1 = -8312						; size = 4
_h$ = -8308						; size = 12
_fmt$ = -8296						; size = 4
_ntoalign$2 = -8292					; size = 4
_n$3 = -8288						; size = 8
_n$2$ = -8284						; size = 4
_lim$1$ = -8284						; size = 4
_len$4 = -8280						; size = 4
tv518 = -8276						; size = 4
_len$5 = -8272						; size = 4
_len$6 = -8268						; size = 4
_n$1$ = -8264						; size = 4
_n$2$ = -8264						; size = 4
_opt$1$ = -8264						; size = 4
_L$GSCopy$1$ = -8260					; size = 4
_totalsize$1$ = -8256					; size = 4
_b$ = -8252						; size = 8208
_u$7 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_str_pack PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1297
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 78 20 00 00	 mov	 eax, 8312		; 00002078H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
; Line 1300
  0001d	6a 00		 push	 0
  0001f	6a 01		 push	 1
  00021	57		 push	 edi
  00022	89 bd bc df ff
	ff		 mov	 DWORD PTR _L$GSCopy$1$[ebp], edi
  00028	e8 00 00 00 00	 call	 _luaL_checklstring
  0002d	8b f0		 mov	 esi, eax
; Line 1302
  0002f	c7 85 c0 df ff
	ff 00 00 00 00	 mov	 DWORD PTR _totalsize$1$[ebp], 0
  00039	bb 01 00 00 00	 mov	 ebx, 1
  0003e	89 b5 98 df ff
	ff		 mov	 DWORD PTR _fmt$[ebp], esi
; Line 1304
  00044	57		 push	 edi
  00045	89 bd 8c df ff
	ff		 mov	 DWORD PTR _h$[ebp], edi
  0004b	89 9d 90 df ff
	ff		 mov	 DWORD PTR _h$[ebp+4], ebx
  00051	89 9d 94 df ff
	ff		 mov	 DWORD PTR _h$[ebp+8], ebx
  00057	e8 00 00 00 00	 call	 _lua_pushnil
; Line 1305
  0005c	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00062	50		 push	 eax
  00063	57		 push	 edi
  00064	e8 00 00 00 00	 call	 _luaL_buffinit
  00069	83 c4 18	 add	 esp, 24			; 00000018H
; Line 1306
  0006c	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0006f	0f 84 85 04 00
	00		 je	 $LN23@str_pack
  00075	33 d2		 xor	 edx, edx
  00077	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL24@str_pack:
; Line 1308
  00080	8d 85 9c df ff
	ff		 lea	 eax, DWORD PTR _ntoalign$2[ebp]
  00086	50		 push	 eax
  00087	8d 85 88 df ff
	ff		 lea	 eax, DWORD PTR _size$1[ebp]
  0008d	50		 push	 eax
  0008e	8d 85 98 df ff
	ff		 lea	 eax, DWORD PTR _fmt$[ebp]
  00094	50		 push	 eax
  00095	52		 push	 edx
  00096	8d 85 8c df ff
	ff		 lea	 eax, DWORD PTR _h$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _getdetails
; Line 1309
  000a2	8b b5 9c df ff
	ff		 mov	 esi, DWORD PTR _ntoalign$2[ebp]
  000a8	83 c4 14	 add	 esp, 20			; 00000014H
  000ab	8b bd 88 df ff
	ff		 mov	 edi, DWORD PTR _size$1[ebp]
  000b1	89 85 b8 df ff
	ff		 mov	 DWORD PTR _opt$1$[ebp], eax
  000b7	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
  000ba	01 8d c0 df ff
	ff		 add	 DWORD PTR _totalsize$1$[ebp], ecx
; Line 1310
  000c0	8b 8d cc df ff
	ff		 mov	 ecx, DWORD PTR _b$[ebp+8]
  000c6	85 f6		 test	 esi, esi
  000c8	7e 47		 jle	 SHORT $LN43@str_pack
  000ca	8d 9b 00 00 00
	00		 npad	 6
$LL22@str_pack:
  000d0	4e		 dec	 esi
; Line 1311
  000d1	3b 8d c8 df ff
	ff		 cmp	 ecx, DWORD PTR _b$[ebp+4]
  000d7	72 17		 jb	 SHORT $LN27@str_pack
  000d9	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  000df	6a 01		 push	 1
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  000e7	8b 8d cc df ff
	ff		 mov	 ecx, DWORD PTR _b$[ebp+8]
  000ed	83 c4 08	 add	 esp, 8
$LN27@str_pack:
  000f0	8b 85 c4 df ff
	ff		 mov	 eax, DWORD PTR _b$[ebp]
  000f6	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000fa	8b 8d cc df ff
	ff		 mov	 ecx, DWORD PTR _b$[ebp+8]
  00100	41		 inc	 ecx
  00101	89 8d cc df ff
	ff		 mov	 DWORD PTR _b$[ebp+8], ecx
  00107	85 f6		 test	 esi, esi
  00109	7f c5		 jg	 SHORT $LL22@str_pack
  0010b	8b 85 b8 df ff
	ff		 mov	 eax, DWORD PTR _opt$1$[ebp]
$LN43@str_pack:
; Line 1310
  00111	4e		 dec	 esi
; Line 1312
  00112	43		 inc	 ebx
  00113	89 b5 9c df ff
	ff		 mov	 DWORD PTR _ntoalign$2[ebp], esi
; Line 1313
  00119	83 f8 08	 cmp	 eax, 8
  0011c	0f 87 c3 03 00
	00		 ja	 $LN61@str_pack
  00122	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN63@str_pack[eax*4]
$LN18@str_pack:
; Line 1315
  00129	53		 push	 ebx
  0012a	ff b5 bc df ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  00130	e8 00 00 00 00	 call	 _luaL_checkinteger
  00135	83 c4 08	 add	 esp, 8
  00138	89 95 b8 df ff
	ff		 mov	 DWORD PTR _n$2$[ebp], edx
  0013e	8b f0		 mov	 esi, eax
; Line 1316
  00140	83 ff 08	 cmp	 edi, 8
  00143	7d 6f		 jge	 SHORT $LN29@str_pack
; Line 1317
  00145	33 c0		 xor	 eax, eax
  00147	8d 0c fd ff ff
	ff ff		 lea	 ecx, DWORD PTR [edi*8-1]
  0014e	0f ab c8	 bts	 eax, ecx
  00151	33 d2		 xor	 edx, edx
  00153	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00156	0f 43 d0	 cmovae	 edx, eax
  00159	33 c2		 xor	 eax, edx
  0015b	83 f9 40	 cmp	 ecx, 64			; 00000040H
  0015e	89 85 a4 df ff
	ff		 mov	 DWORD PTR _lim$1$[ebp], eax
  00164	8b ca		 mov	 ecx, edx
; Line 1318
  00166	8b 95 b8 df ff
	ff		 mov	 edx, DWORD PTR _n$2$[ebp]
  0016c	0f 43 c8	 cmovae	 ecx, eax
  0016f	f7 d8		 neg	 eax
  00171	89 85 ac df ff
	ff		 mov	 DWORD PTR tv518[ebp], eax
  00177	8b c1		 mov	 eax, ecx
  00179	83 d0 00	 adc	 eax, 0
  0017c	f7 d8		 neg	 eax
  0017e	3b c2		 cmp	 eax, edx
  00180	7f 18		 jg	 SHORT $LN54@str_pack
  00182	7c 08		 jl	 SHORT $LN53@str_pack
  00184	39 b5 ac df ff
	ff		 cmp	 DWORD PTR tv518[ebp], esi
  0018a	77 0e		 ja	 SHORT $LN54@str_pack
$LN53@str_pack:
  0018c	3b d1		 cmp	 edx, ecx
  0018e	7c 24		 jl	 SHORT $LN29@str_pack
  00190	7f 08		 jg	 SHORT $LN54@str_pack
  00192	3b b5 a4 df ff
	ff		 cmp	 esi, DWORD PTR _lim$1$[ebp]
  00198	72 1a		 jb	 SHORT $LN29@str_pack
$LN54@str_pack:
  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@
  0019f	53		 push	 ebx
  001a0	ff b5 bc df ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  001a6	e8 00 00 00 00	 call	 _luaL_argerror
  001ab	8b 95 b8 df ff
	ff		 mov	 edx, DWORD PTR _n$2$[ebp]
  001b1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN29@str_pack:
; Line 1320
  001b4	85 d2		 test	 edx, edx
  001b6	7f 0d		 jg	 SHORT $LN30@str_pack
  001b8	7c 04		 jl	 SHORT $LN55@str_pack
  001ba	85 f6		 test	 esi, esi
  001bc	73 07		 jae	 SHORT $LN30@str_pack
$LN55@str_pack:
  001be	b8 01 00 00 00	 mov	 eax, 1
  001c3	eb 02		 jmp	 SHORT $LN31@str_pack
$LN30@str_pack:
  001c5	33 c0		 xor	 eax, eax
$LN31@str_pack:
  001c7	50		 push	 eax
  001c8	57		 push	 edi
  001c9	ff b5 90 df ff
	ff		 push	 DWORD PTR _h$[ebp+4]
  001cf	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  001d5	52		 push	 edx
  001d6	56		 push	 esi
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 _packint
  001dd	83 c4 18	 add	 esp, 24			; 00000018H
; Line 1321
  001e0	e9 00 03 00 00	 jmp	 $LN61@str_pack
$LN16@str_pack:
; Line 1324
  001e5	53		 push	 ebx
  001e6	ff b5 bc df ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  001ec	e8 00 00 00 00	 call	 _luaL_checkinteger
  001f1	83 c4 08	 add	 esp, 8
  001f4	89 85 b8 df ff
	ff		 mov	 DWORD PTR _n$1$[ebp], eax
  001fa	89 95 a4 df ff
	ff		 mov	 DWORD PTR _n$2$[ebp], edx
; Line 1325
  00200	83 ff 08	 cmp	 edi, 8
  00203	7d 44		 jge	 SHORT $LN32@str_pack
; Line 1327
  00205	33 c0		 xor	 eax, eax
  00207	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  0020e	33 f6		 xor	 esi, esi
  00210	0f ab c8	 bts	 eax, ecx
  00213	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00216	0f 43 f0	 cmovae	 esi, eax
  00219	33 c6		 xor	 eax, esi
  0021b	83 f9 40	 cmp	 ecx, 64			; 00000040H
  0021e	0f 43 f0	 cmovae	 esi, eax
  00221	3b d6		 cmp	 edx, esi
  00223	72 24		 jb	 SHORT $LN32@str_pack
  00225	77 08		 ja	 SHORT $LN56@str_pack
  00227	39 85 b8 df ff
	ff		 cmp	 DWORD PTR _n$1$[ebp], eax
  0022d	72 1a		 jb	 SHORT $LN32@str_pack
$LN56@str_pack:
  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HFAHIBAH@unsigned?5overflow?$AA@
  00234	53		 push	 ebx
  00235	ff b5 bc df ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  0023b	e8 00 00 00 00	 call	 _luaL_argerror
  00240	8b 95 a4 df ff
	ff		 mov	 edx, DWORD PTR _n$2$[ebp]
  00246	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN32@str_pack:
; Line 1328
  00249	6a 00		 push	 0
  0024b	57		 push	 edi
  0024c	ff b5 90 df ff
	ff		 push	 DWORD PTR _h$[ebp+4]
  00252	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00258	52		 push	 edx
  00259	ff b5 b8 df ff
	ff		 push	 DWORD PTR _n$1$[ebp]
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 _packint
  00265	83 c4 18	 add	 esp, 24			; 00000018H
; Line 1329
  00268	e9 78 02 00 00	 jmp	 $LN61@str_pack
$LN14@str_pack:
; Line 1333
  0026d	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00273	57		 push	 edi
  00274	50		 push	 eax
  00275	e8 00 00 00 00	 call	 _luaL_prepbuffsize
; Line 1334
  0027a	53		 push	 ebx
  0027b	ff b5 bc df ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  00281	8b f0		 mov	 esi, eax
  00283	e8 00 00 00 00	 call	 _luaL_checknumber
  00288	dd 9d a0 df ff
	ff		 fstp	 QWORD PTR _n$3[ebp]
  0028e	f2 0f 10 85 a0
	df ff ff	 movsd	 xmm0, QWORD PTR _n$3[ebp]
  00296	83 c4 10	 add	 esp, 16			; 00000010H
; Line 1335
  00299	83 ff 04	 cmp	 edi, 4
  0029c	75 0b		 jne	 SHORT $LN13@str_pack
  0029e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  002a2	f3 0f 11 45 d4	 movss	 DWORD PTR _u$7[ebp], xmm0
  002a7	eb 05		 jmp	 SHORT $LN11@str_pack
$LN13@str_pack:
; Line 1336
  002a9	f2 0f 11 45 d4	 movsd	 QWORD PTR _u$7[ebp], xmm0
$LN11@str_pack:
; Line 1339
  002ae	ff b5 90 df ff
	ff		 push	 DWORD PTR _h$[ebp+4]
  002b4	8d 45 d4	 lea	 eax, DWORD PTR _u$7[ebp]
  002b7	57		 push	 edi
  002b8	50		 push	 eax
  002b9	56		 push	 esi
  002ba	e8 00 00 00 00	 call	 _copywithendian
  002bf	83 c4 10	 add	 esp, 16			; 00000010H
; Line 1340
  002c2	01 bd cc df ff
	ff		 add	 DWORD PTR _b$[ebp+8], edi
; Line 1341
  002c8	e9 18 02 00 00	 jmp	 $LN61@str_pack
$LN9@str_pack:
; Line 1345
  002cd	8b b5 bc df ff
	ff		 mov	 esi, DWORD PTR _L$GSCopy$1$[ebp]
  002d3	8d 85 b4 df ff
	ff		 lea	 eax, DWORD PTR _len$6[ebp]
  002d9	50		 push	 eax
  002da	53		 push	 ebx
  002db	56		 push	 esi
  002dc	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 1346
  002e1	8b 8d b4 df ff
	ff		 mov	 ecx, DWORD PTR _len$6[ebp]
  002e7	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ea	3b f9		 cmp	 edi, ecx
  002ec	77 16		 ja	 SHORT $LN8@str_pack
; Line 1347
  002ee	57		 push	 edi
  002ef	50		 push	 eax
  002f0	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 _luaL_addlstring
  002fc	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1348
  002ff	e9 e1 01 00 00	 jmp	 $LN61@str_pack
$LN8@str_pack:
; Line 1349
  00304	51		 push	 ecx
  00305	50		 push	 eax
  00306	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0030c	50		 push	 eax
  0030d	e8 00 00 00 00	 call	 _luaL_addlstring
; Line 1350
  00312	8b 85 b4 df ff
	ff		 mov	 eax, DWORD PTR _len$6[ebp]
  00318	83 c4 0c	 add	 esp, 12			; 0000000cH
  0031b	3b c7		 cmp	 eax, edi
  0031d	73 58		 jae	 SHORT $LN45@str_pack
  0031f	8b 8d cc df ff
	ff		 mov	 ecx, DWORD PTR _b$[ebp+8]
  00325	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL6@str_pack:
  00330	40		 inc	 eax
  00331	89 85 b4 df ff
	ff		 mov	 DWORD PTR _len$6[ebp], eax
; Line 1351
  00337	3b 8d c8 df ff
	ff		 cmp	 ecx, DWORD PTR _b$[ebp+4]
  0033d	72 17		 jb	 SHORT $LN33@str_pack
  0033f	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00345	6a 01		 push	 1
  00347	50		 push	 eax
  00348	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  0034d	8b 8d cc df ff
	ff		 mov	 ecx, DWORD PTR _b$[ebp+8]
  00353	83 c4 08	 add	 esp, 8
$LN33@str_pack:
  00356	8b 85 c4 df ff
	ff		 mov	 eax, DWORD PTR _b$[ebp]
  0035c	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  00360	8b 8d cc df ff
	ff		 mov	 ecx, DWORD PTR _b$[ebp+8]
  00366	8b 85 b4 df ff
	ff		 mov	 eax, DWORD PTR _len$6[ebp]
  0036c	41		 inc	 ecx
  0036d	89 8d cc df ff
	ff		 mov	 DWORD PTR _b$[ebp+8], ecx
  00373	3b c7		 cmp	 eax, edi
  00375	72 b9		 jb	 SHORT $LL6@str_pack
$LN45@str_pack:
; Line 1350
  00377	40		 inc	 eax
  00378	89 85 b4 df ff
	ff		 mov	 DWORD PTR _len$6[ebp], eax
; Line 1353
  0037e	e9 62 01 00 00	 jmp	 $LN61@str_pack
$LN4@str_pack:
; Line 1357
  00383	8d 85 b0 df ff
	ff		 lea	 eax, DWORD PTR _len$5[ebp]
  00389	50		 push	 eax
  0038a	53		 push	 ebx
  0038b	ff b5 bc df ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  00391	e8 00 00 00 00	 call	 _luaL_checklstring
  00396	83 c4 0c	 add	 esp, 12			; 0000000cH
  00399	8b f0		 mov	 esi, eax
; Line 1360
  0039b	83 ff 04	 cmp	 edi, 4
  0039e	7d 2a		 jge	 SHORT $LN59@str_pack
  003a0	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  003a7	ba 01 00 00 00	 mov	 edx, 1
  003ac	d3 e2		 shl	 edx, cl
  003ae	39 95 b0 df ff
	ff		 cmp	 DWORD PTR _len$5[ebp], edx
  003b4	72 14		 jb	 SHORT $LN59@str_pack
  003b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JDDCIIOM@string?5length?5does?5not?5fit?5in?5gi@
  003bb	53		 push	 ebx
  003bc	ff b5 bc df ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  003c2	e8 00 00 00 00	 call	 _luaL_argerror
  003c7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN59@str_pack:
; Line 1361
  003ca	6a 00		 push	 0
  003cc	57		 push	 edi
  003cd	ff b5 90 df ff
	ff		 push	 DWORD PTR _h$[ebp+4]
  003d3	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  003d9	6a 00		 push	 0
  003db	ff b5 b0 df ff
	ff		 push	 DWORD PTR _len$5[ebp]
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 _packint
; Line 1362
  003e7	ff b5 b0 df ff
	ff		 push	 DWORD PTR _len$5[ebp]
  003ed	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  003f3	56		 push	 esi
  003f4	50		 push	 eax
  003f5	e8 00 00 00 00	 call	 _luaL_addlstring
; Line 1363
  003fa	8b 95 c0 df ff
	ff		 mov	 edx, DWORD PTR _totalsize$1$[ebp]
  00400	83 c4 24	 add	 esp, 36			; 00000024H
  00403	03 95 b0 df ff
	ff		 add	 edx, DWORD PTR _len$5[ebp]
  00409	89 95 c0 df ff
	ff		 mov	 DWORD PTR _totalsize$1$[ebp], edx
; Line 1364
  0040f	e9 d7 00 00 00	 jmp	 $LN19@str_pack
$LN3@str_pack:
; Line 1368
  00414	8b b5 bc df ff
	ff		 mov	 esi, DWORD PTR _L$GSCopy$1$[ebp]
  0041a	8d 85 a8 df ff
	ff		 lea	 eax, DWORD PTR _len$4[ebp]
  00420	50		 push	 eax
  00421	53		 push	 ebx
  00422	56		 push	 esi
  00423	e8 00 00 00 00	 call	 _luaL_checklstring
  00428	8b f8		 mov	 edi, eax
  0042a	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1369
  0042d	8b d7		 mov	 edx, edi
  0042f	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
$LL57@str_pack:
  00432	8a 0a		 mov	 cl, BYTE PTR [edx]
  00434	42		 inc	 edx
  00435	84 c9		 test	 cl, cl
  00437	75 f9		 jne	 SHORT $LL57@str_pack
  00439	2b d0		 sub	 edx, eax
  0043b	8b 85 a8 df ff
	ff		 mov	 eax, DWORD PTR _len$4[ebp]
  00441	3b d0		 cmp	 edx, eax
  00443	74 15		 je	 SHORT $LN35@str_pack
  00445	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FHCNDFMO@string?5contains?5zeros?$AA@
  0044a	53		 push	 ebx
  0044b	56		 push	 esi
  0044c	e8 00 00 00 00	 call	 _luaL_argerror
  00451	8b 85 a8 df ff
	ff		 mov	 eax, DWORD PTR _len$4[ebp]
  00457	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN35@str_pack:
; Line 1370
  0045a	50		 push	 eax
  0045b	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00461	57		 push	 edi
  00462	50		 push	 eax
  00463	e8 00 00 00 00	 call	 _luaL_addlstring
; Line 1371
  00468	8b 8d cc df ff
	ff		 mov	 ecx, DWORD PTR _b$[ebp+8]
  0046e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00471	3b 8d c8 df ff
	ff		 cmp	 ecx, DWORD PTR _b$[ebp+4]
  00477	72 17		 jb	 SHORT $LN36@str_pack
  00479	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0047f	6a 01		 push	 1
  00481	50		 push	 eax
  00482	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  00487	8b 8d cc df ff
	ff		 mov	 ecx, DWORD PTR _b$[ebp+8]
  0048d	83 c4 08	 add	 esp, 8
$LN36@str_pack:
  00490	8b 85 c4 df ff
	ff		 mov	 eax, DWORD PTR _b$[ebp]
; Line 1372
  00496	8b 95 c0 df ff
	ff		 mov	 edx, DWORD PTR _totalsize$1$[ebp]
  0049c	42		 inc	 edx
  0049d	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  004a1	ff 85 cc df ff
	ff		 inc	 DWORD PTR _b$[ebp+8]
  004a7	03 95 a8 df ff
	ff		 add	 edx, DWORD PTR _len$4[ebp]
  004ad	89 95 c0 df ff
	ff		 mov	 DWORD PTR _totalsize$1$[ebp], edx
; Line 1373
  004b3	eb 36		 jmp	 SHORT $LN19@str_pack
$LN2@str_pack:
; Line 1375
  004b5	3b 8d c8 df ff
	ff		 cmp	 ecx, DWORD PTR _b$[ebp+4]
  004bb	72 17		 jb	 SHORT $LN37@str_pack
  004bd	8d 85 c4 df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  004c3	6a 01		 push	 1
  004c5	50		 push	 eax
  004c6	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  004cb	8b 8d cc df ff
	ff		 mov	 ecx, DWORD PTR _b$[ebp+8]
  004d1	83 c4 08	 add	 esp, 8
$LN37@str_pack:
  004d4	8b 85 c4 df ff
	ff		 mov	 eax, DWORD PTR _b$[ebp]
  004da	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  004de	ff 85 cc df ff
	ff		 inc	 DWORD PTR _b$[ebp+8]
$LN1@str_pack:
; Line 1377
  004e4	4b		 dec	 ebx
$LN61@str_pack:
  004e5	8b 95 c0 df ff
	ff		 mov	 edx, DWORD PTR _totalsize$1$[ebp]
$LN19@str_pack:
; Line 1306
  004eb	8b 8d 98 df ff
	ff		 mov	 ecx, DWORD PTR _fmt$[ebp]
  004f1	80 39 00	 cmp	 BYTE PTR [ecx], 0
  004f4	0f 85 86 fb ff
	ff		 jne	 $LL24@str_pack
$LN23@str_pack:
; Line 1381
  004fa	8d 8d c4 df ff
	ff		 lea	 ecx, DWORD PTR _b$[ebp]
  00500	51		 push	 ecx
  00501	e8 00 00 00 00	 call	 _luaL_pushresult
; Line 1383
  00506	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00509	83 c4 04	 add	 esp, 4
  0050c	33 cd		 xor	 ecx, ebp
  0050e	b8 01 00 00 00	 mov	 eax, 1
  00513	5f		 pop	 edi
  00514	5e		 pop	 esi
  00515	5b		 pop	 ebx
  00516	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0051b	8b e5		 mov	 esp, ebp
  0051d	5d		 pop	 ebp
  0051e	c3		 ret	 0
  0051f	90		 npad	 1
$LN63@str_pack:
  00520	00 00 00 00	 DD	 $LN18@str_pack
  00524	00 00 00 00	 DD	 $LN16@str_pack
  00528	00 00 00 00	 DD	 $LN14@str_pack
  0052c	00 00 00 00	 DD	 $LN9@str_pack
  00530	00 00 00 00	 DD	 $LN4@str_pack
  00534	00 00 00 00	 DD	 $LN3@str_pack
  00538	00 00 00 00	 DD	 $LN2@str_pack
  0053c	00 00 00 00	 DD	 $LN1@str_pack
  00540	00 00 00 00	 DD	 $LN1@str_pack
_str_pack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _copywithendian
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_islittle$ = 20						; size = 4
_copywithendian PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1284
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1285
  00003	83 7d 14 01	 cmp	 DWORD PTR _islittle$[ebp], 1
  00007	56		 push	 esi
  00008	75 25		 jne	 SHORT $LN6@copywithen
; Line 1286
  0000a	8b 55 10	 mov	 edx, DWORD PTR _size$[ebp]
  0000d	85 d2		 test	 edx, edx
  0000f	74 3d		 je	 SHORT $LN13@copywithen
  00011	8b 75 08	 mov	 esi, DWORD PTR _dest$[ebp]
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  00017	2b f1		 sub	 esi, ecx
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL5@copywithen:
; Line 1287
  00020	8a 01		 mov	 al, BYTE PTR [ecx]
  00022	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00025	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  00029	4a		 dec	 edx
  0002a	75 f4		 jne	 SHORT $LL5@copywithen
  0002c	5e		 pop	 esi
; Line 1294
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN6@copywithen:
; Line 1290
  0002f	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  00032	8d 71 ff	 lea	 esi, DWORD PTR [ecx-1]
  00035	03 75 08	 add	 esi, DWORD PTR _dest$[ebp]
; Line 1291
  00038	85 c9		 test	 ecx, ecx
  0003a	74 12		 je	 SHORT $LN13@copywithen
  0003c	8b 55 0c	 mov	 edx, DWORD PTR _src$[ebp]
  0003f	90		 npad	 1
$LL2@copywithen:
; Line 1292
  00040	8a 02		 mov	 al, BYTE PTR [edx]
  00042	8d 76 ff	 lea	 esi, DWORD PTR [esi-1]
  00045	88 46 01	 mov	 BYTE PTR [esi+1], al
  00048	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0004b	49		 dec	 ecx
  0004c	75 f2		 jne	 SHORT $LL2@copywithen
$LN13@copywithen:
  0004e	5e		 pop	 esi
; Line 1294
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_copywithendian ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _packint
_TEXT	SEGMENT
_buff$1$ = -4						; size = 4
_b$ = 8							; size = 4
_n$ = 12						; size = 8
_islittle$ = 20						; size = 4
tv243 = 24						; size = 4
_size$ = 24						; size = 4
_neg$ = 28						; size = 4
_packint PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1263
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; Line 1264
  00006	8b 75 18	 mov	 esi, DWORD PTR _size$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR _b$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _luaL_prepbuffsize
; Line 1266
  00014	8b 5d 14	 mov	 ebx, DWORD PTR _islittle$[ebp]
  00017	83 c4 08	 add	 esp, 8
  0001a	89 45 fc	 mov	 DWORD PTR _buff$1$[ebp], eax
  0001d	85 db		 test	 ebx, ebx
  0001f	74 04		 je	 SHORT $LN10@packint
  00021	33 c9		 xor	 ecx, ecx
  00023	eb 03		 jmp	 SHORT $LN11@packint
$LN10@packint:
  00025	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
$LN11@packint:
  00028	8b 55 0c	 mov	 edx, DWORD PTR _n$[ebp]
  0002b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
; Line 1267
  0002e	83 fe 01	 cmp	 esi, 1
  00031	7e 32		 jle	 SHORT $LN5@packint
; Line 1266
  00033	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp+4]
  00036	8d 46 fe	 lea	 eax, DWORD PTR [esi-2]
  00039	89 45 18	 mov	 DWORD PTR tv243[ebp], eax
  0003c	bf 01 00 00 00	 mov	 edi, 1
$LL7@packint:
; Line 1268
  00041	0f ac ca 08	 shrd	 edx, ecx, 8
  00045	c1 e9 08	 shr	 ecx, 8
; Line 1269
  00048	85 db		 test	 ebx, ebx
  0004a	8b 5d fc	 mov	 ebx, DWORD PTR _buff$1$[ebp]
  0004d	0f 45 c7	 cmovne	 eax, edi
  00050	47		 inc	 edi
  00051	88 14 18	 mov	 BYTE PTR [eax+ebx], dl
  00054	8b 45 18	 mov	 eax, DWORD PTR tv243[ebp]
  00057	8b 5d 14	 mov	 ebx, DWORD PTR _islittle$[ebp]
  0005a	48		 dec	 eax
  0005b	89 45 18	 mov	 DWORD PTR tv243[ebp], eax
  0005e	3b fe		 cmp	 edi, esi
  00060	7c df		 jl	 SHORT $LL7@packint
  00062	8b 7d 08	 mov	 edi, DWORD PTR _b$[ebp]
$LN5@packint:
; Line 1271
  00065	83 7d 1c 00	 cmp	 DWORD PTR _neg$[ebp], 0
  00069	74 29		 je	 SHORT $LN24@packint
  0006b	83 fe 08	 cmp	 esi, 8
  0006e	7e 24		 jle	 SHORT $LN24@packint
; Line 1272
  00070	b9 08 00 00 00	 mov	 ecx, 8
  00075	3b f1		 cmp	 esi, ecx
  00077	7e 1b		 jle	 SHORT $LN24@packint
  00079	8b 7d fc	 mov	 edi, DWORD PTR _buff$1$[ebp]
  0007c	8d 56 f7	 lea	 edx, DWORD PTR [esi-9]
  0007f	90		 npad	 1
$LL3@packint:
; Line 1273
  00080	85 db		 test	 ebx, ebx
  00082	8b c2		 mov	 eax, edx
  00084	0f 45 c1	 cmovne	 eax, ecx
  00087	41		 inc	 ecx
  00088	4a		 dec	 edx
  00089	c6 04 38 ff	 mov	 BYTE PTR [eax+edi], -1
  0008d	3b ce		 cmp	 ecx, esi
  0008f	7c ef		 jl	 SHORT $LL3@packint
; Line 1275
  00091	8b 7d 08	 mov	 edi, DWORD PTR _b$[ebp]
$LN24@packint:
  00094	01 77 08	 add	 DWORD PTR [edi+8], esi
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
; Line 1276
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
_packint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getdetails
_TEXT	SEGMENT
_h$ = 8							; size = 4
_totalsize$ = 12					; size = 4
_fmt$ = 16						; size = 4
tv184 = 20						; size = 4
_align$ = 20						; size = 4
_psize$ = 20						; size = 4
_ntoalign$ = 24						; size = 4
_getdetails PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1236
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 1237
  00005	8b 75 14	 mov	 esi, DWORD PTR _psize$[ebp]
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _h$[ebp]
  0000c	56		 push	 esi
  0000d	ff 75 10	 push	 DWORD PTR _fmt$[ebp]
  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 _getoption
; Line 1238
  00016	8b 36		 mov	 esi, DWORD PTR [esi]
  00018	8b d8		 mov	 ebx, eax
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	89 75 14	 mov	 DWORD PTR _align$[ebp], esi
; Line 1239
  00020	83 fb 07	 cmp	 ebx, 7
  00023	75 35		 jne	 SHORT $LN7@getdetails
; Line 1240
  00025	8b 45 10	 mov	 eax, DWORD PTR _fmt$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0002d	74 1a		 je	 SHORT $LN6@getdetails
  0002f	8d 4d 14	 lea	 ecx, DWORD PTR _align$[ebp]
  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	57		 push	 edi
  00035	e8 00 00 00 00	 call	 _getoption
  0003a	8b 75 14	 mov	 esi, DWORD PTR _align$[ebp]
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	83 f8 03	 cmp	 eax, 3
  00043	74 04		 je	 SHORT $LN6@getdetails
  00045	85 f6		 test	 esi, esi
  00047	75 11		 jne	 SHORT $LN7@getdetails
$LN6@getdetails:
; Line 1241
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@
  0004e	6a 01		 push	 1
  00050	ff 37		 push	 DWORD PTR [edi]
  00052	e8 00 00 00 00	 call	 _luaL_argerror
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@getdetails:
; Line 1243
  0005a	83 fe 01	 cmp	 esi, 1
  0005d	7e 3f		 jle	 SHORT $LN4@getdetails
  0005f	83 fb 03	 cmp	 ebx, 3
  00062	74 3a		 je	 SHORT $LN4@getdetails
; Line 1246
  00064	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00067	0f 4f 77 08	 cmovg	 esi, DWORD PTR [edi+8]
; Line 1248
  0006b	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
  0006e	89 4d 14	 mov	 DWORD PTR tv184[ebp], ecx
  00071	85 ce		 test	 ecx, esi
  00073	74 14		 je	 SHORT $LN1@getdetails
; Line 1249
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@
  0007a	6a 01		 push	 1
  0007c	ff 37		 push	 DWORD PTR [edi]
  0007e	e8 00 00 00 00	 call	 _luaL_argerror
  00083	8b 4d 14	 mov	 ecx, DWORD PTR tv184[ebp]
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@getdetails:
; Line 1250
  00089	8b c1		 mov	 eax, ecx
  0008b	23 45 0c	 and	 eax, DWORD PTR _totalsize$[ebp]
  0008e	2b f0		 sub	 esi, eax
  00090	8b 45 18	 mov	 eax, DWORD PTR _ntoalign$[ebp]
  00093	23 f1		 and	 esi, ecx
  00095	5f		 pop	 edi
  00096	89 30		 mov	 DWORD PTR [eax], esi
; Line 1252
  00098	8b c3		 mov	 eax, ebx
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
; Line 1253
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN4@getdetails:
; Line 1244
  0009e	8b 45 18	 mov	 eax, DWORD PTR _ntoalign$[ebp]
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; Line 1252
  000a9	8b c3		 mov	 eax, ebx
  000ab	5b		 pop	 ebx
; Line 1253
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_getdetails ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getoption
_TEXT	SEGMENT
_h$ = 8							; size = 4
_fmt$ = 12						; size = 4
_size$ = 16						; size = 4
_getoption PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1188
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1189
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00006	56		 push	 esi
; Line 1190
  00007	8b 75 10	 mov	 esi, DWORD PTR _size$[ebp]
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	0f be 10	 movsx	 edx, BYTE PTR [eax]
  0000f	40		 inc	 eax
  00010	89 01		 mov	 DWORD PTR [ecx], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; Line 1191
  00018	8d 42 e0	 lea	 eax, DWORD PTR [edx-32]
  0001b	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  0001e	0f 87 5b 01 00
	00		 ja	 $LN1@getoption
  00024	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN31@getoption[eax]
  0002b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN34@getoption[eax*4]
$LN26@getoption:
; Line 1192
  00032	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  00038	33 c0		 xor	 eax, eax
  0003a	5e		 pop	 esi
; Line 1223
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
$LN25@getoption:
; Line 1193
  0003d	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	5e		 pop	 esi
; Line 1223
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN24@getoption:
; Line 1194
  0004b	c7 06 02 00 00
	00		 mov	 DWORD PTR [esi], 2
  00051	33 c0		 xor	 eax, eax
  00053	5e		 pop	 esi
; Line 1223
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN23@getoption:
; Line 1195
  00056	c7 06 02 00 00
	00		 mov	 DWORD PTR [esi], 2
  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	5e		 pop	 esi
; Line 1223
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
$LN22@getoption:
; Line 1196
  00064	c7 06 04 00 00
	00		 mov	 DWORD PTR [esi], 4
  0006a	33 c0		 xor	 eax, eax
  0006c	5e		 pop	 esi
; Line 1223
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN21@getoption:
; Line 1197
  0006f	c7 06 04 00 00
	00		 mov	 DWORD PTR [esi], 4
  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	5e		 pop	 esi
; Line 1223
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
$LN20@getoption:
; Line 1198
  0007d	c7 06 08 00 00
	00		 mov	 DWORD PTR [esi], 8
  00083	33 c0		 xor	 eax, eax
  00085	5e		 pop	 esi
; Line 1223
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN19@getoption:
; Line 1199
  00088	c7 06 08 00 00
	00		 mov	 DWORD PTR [esi], 8
  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	5e		 pop	 esi
; Line 1223
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$LN17@getoption:
; Line 1201
  00096	c7 06 04 00 00
	00		 mov	 DWORD PTR [esi], 4
  0009c	b8 02 00 00 00	 mov	 eax, 2
  000a1	5e		 pop	 esi
; Line 1223
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
$LN16@getoption:
; Line 1202
  000a4	c7 06 08 00 00
	00		 mov	 DWORD PTR [esi], 8
  000aa	b8 02 00 00 00	 mov	 eax, 2
  000af	5e		 pop	 esi
; Line 1223
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
$LN14@getoption:
; Line 1204
  000b2	6a 04		 push	 4
  000b4	51		 push	 ecx
  000b5	ff 75 08	 push	 DWORD PTR _h$[ebp]
  000b8	e8 00 00 00 00	 call	 _getnumlimit
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c0	89 06		 mov	 DWORD PTR [esi], eax
  000c2	33 c0		 xor	 eax, eax
  000c4	5e		 pop	 esi
; Line 1223
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
$LN13@getoption:
; Line 1205
  000c7	6a 04		 push	 4
  000c9	51		 push	 ecx
  000ca	ff 75 08	 push	 DWORD PTR _h$[ebp]
  000cd	e8 00 00 00 00	 call	 _getnumlimit
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d5	89 06		 mov	 DWORD PTR [esi], eax
  000d7	b8 01 00 00 00	 mov	 eax, 1
  000dc	5e		 pop	 esi
; Line 1223
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
$LN12@getoption:
; Line 1206
  000df	6a 04		 push	 4
  000e1	51		 push	 ecx
  000e2	ff 75 08	 push	 DWORD PTR _h$[ebp]
  000e5	e8 00 00 00 00	 call	 _getnumlimit
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ed	89 06		 mov	 DWORD PTR [esi], eax
  000ef	b8 04 00 00 00	 mov	 eax, 4
  000f4	5e		 pop	 esi
; Line 1223
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
$LN11@getoption:
; Line 1208
  000f7	6a ff		 push	 -1
  000f9	51		 push	 ecx
  000fa	e8 00 00 00 00	 call	 _getnum
  000ff	83 c4 08	 add	 esp, 8
  00102	89 06		 mov	 DWORD PTR [esi], eax
; Line 1209
  00104	83 f8 ff	 cmp	 eax, -1
  00107	75 12		 jne	 SHORT $LN10@getoption
; Line 1210
  00109	8b 45 08	 mov	 eax, DWORD PTR _h$[ebp]
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KNDEAFDL@missing?5size?5for?5format?5option?5?8@
  00111	ff 30		 push	 DWORD PTR [eax]
  00113	e8 00 00 00 00	 call	 _luaL_error
  00118	83 c4 08	 add	 esp, 8
$LN10@getoption:
; Line 1211
  0011b	b8 03 00 00 00	 mov	 eax, 3
  00120	5e		 pop	 esi
; Line 1223
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
$LN9@getoption:
; Line 1212
  00123	b8 05 00 00 00	 mov	 eax, 5
  00128	5e		 pop	 esi
; Line 1223
  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
$LN8@getoption:
; Line 1213
  0012b	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  00131	b8 06 00 00 00	 mov	 eax, 6
  00136	5e		 pop	 esi
; Line 1223
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
$LN7@getoption:
; Line 1214
  00139	b8 07 00 00 00	 mov	 eax, 7
  0013e	5e		 pop	 esi
; Line 1223
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN5@getoption:
; Line 1216
  00141	8b 45 08	 mov	 eax, DWORD PTR _h$[ebp]
  00144	5e		 pop	 esi
  00145	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1
; Line 1222
  0014c	b8 08 00 00 00	 mov	 eax, 8
; Line 1223
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
$LN4@getoption:
; Line 1217
  00153	8b 45 08	 mov	 eax, DWORD PTR _h$[ebp]
  00156	5e		 pop	 esi
  00157	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; Line 1222
  0015e	b8 08 00 00 00	 mov	 eax, 8
; Line 1223
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
$LN2@getoption:
; Line 1219
  00165	8b 75 08	 mov	 esi, DWORD PTR _h$[ebp]
  00168	6a 08		 push	 8
  0016a	51		 push	 ecx
  0016b	56		 push	 esi
  0016c	e8 00 00 00 00	 call	 _getnumlimit
; Line 1220
  00171	83 c4 0c	 add	 esp, 12			; 0000000cH
  00174	89 46 08	 mov	 DWORD PTR [esi+8], eax
; Line 1222
  00177	b8 08 00 00 00	 mov	 eax, 8
  0017c	5e		 pop	 esi
; Line 1223
  0017d	5d		 pop	 ebp
  0017e	c3		 ret	 0
$LN1@getoption:
; Line 1220
  0017f	8b 45 08	 mov	 eax, DWORD PTR _h$[ebp]
  00182	52		 push	 edx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EBKLKADF@invalid?5format?5option?5?8?$CFc?8?$AA@
  00188	ff 30		 push	 DWORD PTR [eax]
  0018a	e8 00 00 00 00	 call	 _luaL_error
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@getoption:
; Line 1222
  00192	b8 08 00 00 00	 mov	 eax, 8
  00197	5e		 pop	 esi
; Line 1223
  00198	5d		 pop	 ebp
  00199	c3		 ret	 0
  0019a	8b ff		 npad	 2
$LN34@getoption:
  0019c	00 00 00 00	 DD	 $LN27@getoption
  001a0	00 00 00 00	 DD	 $LN2@getoption
  001a4	00 00 00 00	 DD	 $LN5@getoption
  001a8	00 00 00 00	 DD	 $LN4@getoption
  001ac	00 00 00 00	 DD	 $LN25@getoption
  001b0	00 00 00 00	 DD	 $LN23@getoption
  001b4	00 00 00 00	 DD	 $LN13@getoption
  001b8	00 00 00 00	 DD	 $LN19@getoption
  001bc	00 00 00 00	 DD	 $LN21@getoption
  001c0	00 00 00 00	 DD	 $LN7@getoption
  001c4	00 00 00 00	 DD	 $LN26@getoption
  001c8	00 00 00 00	 DD	 $LN11@getoption
  001cc	00 00 00 00	 DD	 $LN16@getoption
  001d0	00 00 00 00	 DD	 $LN17@getoption
  001d4	00 00 00 00	 DD	 $LN24@getoption
  001d8	00 00 00 00	 DD	 $LN14@getoption
  001dc	00 00 00 00	 DD	 $LN20@getoption
  001e0	00 00 00 00	 DD	 $LN22@getoption
  001e4	00 00 00 00	 DD	 $LN12@getoption
  001e8	00 00 00 00	 DD	 $LN8@getoption
  001ec	00 00 00 00	 DD	 $LN9@getoption
  001f0	00 00 00 00	 DD	 $LN1@getoption
$LN31@getoption:
  001f4	00		 DB	 0
  001f5	01		 DB	 1
  001f6	15		 DB	 21			; 00000015H
  001f7	15		 DB	 21			; 00000015H
  001f8	15		 DB	 21			; 00000015H
  001f9	15		 DB	 21			; 00000015H
  001fa	15		 DB	 21			; 00000015H
  001fb	15		 DB	 21			; 00000015H
  001fc	15		 DB	 21			; 00000015H
  001fd	15		 DB	 21			; 00000015H
  001fe	15		 DB	 21			; 00000015H
  001ff	15		 DB	 21			; 00000015H
  00200	15		 DB	 21			; 00000015H
  00201	15		 DB	 21			; 00000015H
  00202	15		 DB	 21			; 00000015H
  00203	15		 DB	 21			; 00000015H
  00204	15		 DB	 21			; 00000015H
  00205	15		 DB	 21			; 00000015H
  00206	15		 DB	 21			; 00000015H
  00207	15		 DB	 21			; 00000015H
  00208	15		 DB	 21			; 00000015H
  00209	15		 DB	 21			; 00000015H
  0020a	15		 DB	 21			; 00000015H
  0020b	15		 DB	 21			; 00000015H
  0020c	15		 DB	 21			; 00000015H
  0020d	15		 DB	 21			; 00000015H
  0020e	15		 DB	 21			; 00000015H
  0020f	15		 DB	 21			; 00000015H
  00210	02		 DB	 2
  00211	02		 DB	 2
  00212	03		 DB	 3
  00213	15		 DB	 21			; 00000015H
  00214	15		 DB	 21			; 00000015H
  00215	15		 DB	 21			; 00000015H
  00216	04		 DB	 4
  00217	15		 DB	 21			; 00000015H
  00218	15		 DB	 21			; 00000015H
  00219	15		 DB	 21			; 00000015H
  0021a	15		 DB	 21			; 00000015H
  0021b	15		 DB	 21			; 00000015H
  0021c	05		 DB	 5
  0021d	06		 DB	 6
  0021e	07		 DB	 7
  0021f	15		 DB	 21			; 00000015H
  00220	08		 DB	 8
  00221	15		 DB	 21			; 00000015H
  00222	15		 DB	 21			; 00000015H
  00223	15		 DB	 21			; 00000015H
  00224	15		 DB	 21			; 00000015H
  00225	15		 DB	 21			; 00000015H
  00226	15		 DB	 21			; 00000015H
  00227	15		 DB	 21			; 00000015H
  00228	08		 DB	 8
  00229	15		 DB	 21			; 00000015H
  0022a	15		 DB	 21			; 00000015H
  0022b	15		 DB	 21			; 00000015H
  0022c	09		 DB	 9
  0022d	15		 DB	 21			; 00000015H
  0022e	15		 DB	 21			; 00000015H
  0022f	15		 DB	 21			; 00000015H
  00230	15		 DB	 21			; 00000015H
  00231	15		 DB	 21			; 00000015H
  00232	15		 DB	 21			; 00000015H
  00233	15		 DB	 21			; 00000015H
  00234	15		 DB	 21			; 00000015H
  00235	15		 DB	 21			; 00000015H
  00236	0a		 DB	 10			; 0000000aH
  00237	0b		 DB	 11			; 0000000bH
  00238	0c		 DB	 12			; 0000000cH
  00239	15		 DB	 21			; 00000015H
  0023a	0d		 DB	 13			; 0000000dH
  0023b	15		 DB	 21			; 00000015H
  0023c	0e		 DB	 14			; 0000000eH
  0023d	0f		 DB	 15			; 0000000fH
  0023e	10		 DB	 16			; 00000010H
  0023f	15		 DB	 21			; 00000015H
  00240	11		 DB	 17			; 00000011H
  00241	15		 DB	 21			; 00000015H
  00242	0c		 DB	 12			; 0000000cH
  00243	15		 DB	 21			; 00000015H
  00244	15		 DB	 21			; 00000015H
  00245	15		 DB	 21			; 00000015H
  00246	15		 DB	 21			; 00000015H
  00247	12		 DB	 18			; 00000012H
  00248	15		 DB	 21			; 00000015H
  00249	15		 DB	 21			; 00000015H
  0024a	15		 DB	 21			; 00000015H
  0024b	15		 DB	 21			; 00000015H
  0024c	13		 DB	 19			; 00000013H
  0024d	15		 DB	 21			; 00000015H
  0024e	14		 DB	 20			; 00000014H
_getoption ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _initheader
_TEXT	SEGMENT
_L$ = 8							; size = 4
_h$ = 12						; size = 4
_initheader PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1178
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1179
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _h$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  00009	89 01		 mov	 DWORD PTR [ecx], eax
; Line 1180
  0000b	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1
; Line 1181
  00012	c7 41 08 01 00
	00 00		 mov	 DWORD PTR [ecx+8], 1
; Line 1182
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_initheader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getnumlimit
_TEXT	SEGMENT
_h$ = 8							; size = 4
_fmt$ = 12						; size = 4
_df$ = 16						; size = 4
_getnumlimit PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1166
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 1167
  00004	ff 75 10	 push	 DWORD PTR _df$[ebp]
  00007	ff 75 0c	 push	 DWORD PTR _fmt$[ebp]
  0000a	e8 00 00 00 00	 call	 _getnum
  0000f	8b f0		 mov	 esi, eax
  00011	83 c4 08	 add	 esp, 8
; Line 1168
  00014	83 fe 10	 cmp	 esi, 16			; 00000010H
  00017	7f 04		 jg	 SHORT $LN1@getnumlimi
  00019	85 f6		 test	 esi, esi
  0001b	7f 17		 jg	 SHORT $LN2@getnumlimi
$LN1@getnumlimi:
; Line 1170
  0001d	8b 45 08	 mov	 eax, DWORD PTR _h$[ebp]
  00020	6a 10		 push	 16			; 00000010H
  00022	56		 push	 esi
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CNGGJHEE@integral?5size?5?$CI?$CFd?$CJ?5out?5of?5limits@
  00028	ff 30		 push	 DWORD PTR [eax]
  0002a	e8 00 00 00 00	 call	 _luaL_error
  0002f	83 c4 10	 add	 esp, 16			; 00000010H
; Line 1171
  00032	8b c6		 mov	 eax, esi
$LN2@getnumlimi:
  00034	5e		 pop	 esi
; Line 1172
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_getnumlimit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getnum
_TEXT	SEGMENT
_fmt$ = 8						; size = 4
_df$ = 12						; size = 4
_getnum	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1149
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 1150
  00004	8b 75 08	 mov	 esi, DWORD PTR _fmt$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0000c	83 c0 d0	 add	 eax, -48		; ffffffd0H
  0000f	83 f8 09	 cmp	 eax, 9
  00012	76 06		 jbe	 SHORT $LN6@getnum
; Line 1151
  00014	8b 45 0c	 mov	 eax, DWORD PTR _df$[ebp]
  00017	5e		 pop	 esi
; Line 1159
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN6@getnum:
; Line 1153
  0001a	33 c0		 xor	 eax, eax
  0001c	8d 64 24 00	 npad	 4
$LL4@getnum:
; Line 1155
  00020	8b 16		 mov	 edx, DWORD PTR [esi]
  00022	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00025	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00028	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0002b	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  0002e	83 c0 d0	 add	 eax, -48		; ffffffd0H
  00031	89 0e		 mov	 DWORD PTR [esi], ecx
; Line 1156
  00033	0f be 09	 movsx	 ecx, BYTE PTR [ecx]
  00036	83 c1 d0	 add	 ecx, -48		; ffffffd0H
  00039	83 f9 09	 cmp	 ecx, 9
  0003c	77 07		 ja	 SHORT $LN5@getnum
  0003e	3d cb cc cc 0c	 cmp	 eax, 214748363		; 0ccccccbH
  00043	7e db		 jle	 SHORT $LL4@getnum
$LN5@getnum:
  00045	5e		 pop	 esi
; Line 1159
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_getnum	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _digit
_TEXT	SEGMENT
_c$ = 8							; size = 4
_digit	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1147
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  00006	b9 09 00 00 00	 mov	 ecx, 9
  0000b	83 c0 d0	 add	 eax, -48		; ffffffd0H
  0000e	3b c8		 cmp	 ecx, eax
  00010	1b c0		 sbb	 eax, eax
  00012	40		 inc	 eax
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_digit	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_format
_TEXT	SEGMENT
_L$GSCopy$1$ = -8276					; size = 4
_top$1$ = -8272						; size = 4
_sfl$ = -8268						; size = 4
_l$1 = -8264						; size = 4
_strfrmt_end$1$ = -8260					; size = 4
_n$1$ = -8256						; size = 4
_s$1$ = -8256						; size = 4
_buff$1$ = -8252					; size = 4
_n$2$ = -8248						; size = 4
_nb$1$ = -8248						; size = 4
_b$ = -8244						; size = 8208
_form$2 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_str_format PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 984
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 54 20 00 00	 mov	 eax, 8276		; 00002054H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
; Line 985
  0001d	57		 push	 edi
  0001e	89 bd ac df ff
	ff		 mov	 DWORD PTR _L$GSCopy$1$[ebp], edi
  00024	e8 00 00 00 00	 call	 _lua_gettop
  00029	89 85 b0 df ff
	ff		 mov	 DWORD PTR _top$1$[ebp], eax
; Line 986
  0002f	bb 01 00 00 00	 mov	 ebx, 1
; Line 988
  00034	8d 85 b4 df ff
	ff		 lea	 eax, DWORD PTR _sfl$[ebp]
  0003a	50		 push	 eax
  0003b	53		 push	 ebx
  0003c	57		 push	 edi
  0003d	e8 00 00 00 00	 call	 _luaL_checklstring
  00042	8b f0		 mov	 esi, eax
; Line 989
  00044	8b 85 b4 df ff
	ff		 mov	 eax, DWORD PTR _sfl$[ebp]
  0004a	03 c6		 add	 eax, esi
  0004c	89 85 bc df ff
	ff		 mov	 DWORD PTR _strfrmt_end$1$[ebp], eax
; Line 991
  00052	8d 85 cc df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00058	50		 push	 eax
  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 _luaL_buffinit
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
; Line 992
  00062	3b b5 bc df ff
	ff		 cmp	 esi, DWORD PTR _strfrmt_end$1$[ebp]
  00068	0f 83 b7 02 00
	00		 jae	 $LN19@str_format
  0006e	8b 95 d4 df ff
	ff		 mov	 edx, DWORD PTR _b$[ebp+8]
$LL20@str_format:
; Line 993
  00074	80 3e 25	 cmp	 BYTE PTR [esi], 37	; 00000025H
  00077	74 37		 je	 SHORT $LN18@str_format
; Line 994
  00079	3b 95 d0 df ff
	ff		 cmp	 edx, DWORD PTR _b$[ebp+4]
  0007f	72 17		 jb	 SHORT $LN23@str_format
  00081	8d 85 cc df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00087	6a 01		 push	 1
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  0008f	8b 95 d4 df ff
	ff		 mov	 edx, DWORD PTR _b$[ebp+8]
  00095	83 c4 08	 add	 esp, 8
$LN23@str_format:
  00098	8b 85 cc df ff
	ff		 mov	 eax, DWORD PTR _b$[ebp]
  0009e	8a 0e		 mov	 cl, BYTE PTR [esi]
  000a0	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000a3	8b 95 d4 df ff
	ff		 mov	 edx, DWORD PTR _b$[ebp+8]
  000a9	42		 inc	 edx
  000aa	46		 inc	 esi
  000ab	e9 63 02 00 00	 jmp	 $LN38@str_format
$LN18@str_format:
; Line 995
  000b0	46		 inc	 esi
  000b1	80 3e 25	 cmp	 BYTE PTR [esi], 37	; 00000025H
  000b4	75 37		 jne	 SHORT $LN16@str_format
; Line 996
  000b6	3b 95 d0 df ff
	ff		 cmp	 edx, DWORD PTR _b$[ebp+4]
  000bc	72 da		 jb	 SHORT $LN23@str_format
  000be	8d 85 cc df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  000c4	6a 01		 push	 1
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  000cc	8b 95 d4 df ff
	ff		 mov	 edx, DWORD PTR _b$[ebp+8]
  000d2	83 c4 08	 add	 esp, 8
  000d5	8b 85 cc df ff
	ff		 mov	 eax, DWORD PTR _b$[ebp]
  000db	8a 0e		 mov	 cl, BYTE PTR [esi]
  000dd	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000e0	8b 95 d4 df ff
	ff		 mov	 edx, DWORD PTR _b$[ebp+8]
  000e6	42		 inc	 edx
  000e7	46		 inc	 esi
; Line 997
  000e8	e9 26 02 00 00	 jmp	 $LN38@str_format
$LN16@str_format:
; Line 999
  000ed	8d 85 cc df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  000f3	68 ac 01 00 00	 push	 428			; 000001acH
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _luaL_prepbuffsize
; Line 1001
  000fe	43		 inc	 ebx
  000ff	89 85 c4 df ff
	ff		 mov	 DWORD PTR _buff$1$[ebp], eax
  00105	83 c4 08	 add	 esp, 8
  00108	c7 85 c8 df ff
	ff 00 00 00 00	 mov	 DWORD PTR _nb$1$[ebp], 0
  00112	3b 9d b0 df ff
	ff		 cmp	 ebx, DWORD PTR _top$1$[ebp]
  00118	7e 0f		 jle	 SHORT $LN14@str_format
; Line 1002
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_08JEIPHCP@no?5value?$AA@
  0011f	53		 push	 ebx
  00120	57		 push	 edi
  00121	e8 00 00 00 00	 call	 _luaL_argerror
  00126	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@str_format:
; Line 1003
  00129	8d 45 dc	 lea	 eax, DWORD PTR _form$2[ebp]
  0012c	50		 push	 eax
  0012d	56		 push	 esi
  0012e	57		 push	 edi
  0012f	e8 00 00 00 00	 call	 _scanformat
  00134	8b f0		 mov	 esi, eax
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1004
  00139	0f be 06	 movsx	 eax, BYTE PTR [esi]
  0013c	46		 inc	 esi
  0013d	83 e8 41	 sub	 eax, 65			; 00000041H
  00140	83 f8 37	 cmp	 eax, 55			; 00000037H
  00143	0f 87 01 02 00
	00		 ja	 $LN1@str_format
  00149	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN35@str_format[eax]
  00150	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN41@str_format[eax*4]
$LN11@str_format:
; Line 1006
  00157	53		 push	 ebx
  00158	57		 push	 edi
  00159	e8 00 00 00 00	 call	 _luaL_checkinteger
  0015e	50		 push	 eax
  0015f	8d 45 dc	 lea	 eax, DWORD PTR _form$2[ebp]
  00162	50		 push	 eax
  00163	68 ac 01 00 00	 push	 428			; 000001acH
  00168	ff b5 c4 df ff
	ff		 push	 DWORD PTR _buff$1$[ebp]
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
; Line 1007
  00174	e9 8f 01 00 00	 jmp	 $LN39@str_format
$LN10@str_format:
; Line 1011
  00179	53		 push	 ebx
  0017a	57		 push	 edi
  0017b	e8 00 00 00 00	 call	 _luaL_checkinteger
; Line 1012
  00180	8d 7d dc	 lea	 edi, DWORD PTR _form$2[ebp]
  00183	89 85 c0 df ff
	ff		 mov	 DWORD PTR _n$1$[ebp], eax
  00189	83 c4 08	 add	 esp, 8
  0018c	89 95 c8 df ff
	ff		 mov	 DWORD PTR _n$2$[ebp], edx
  00192	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL36@str_format:
  00195	8a 07		 mov	 al, BYTE PTR [edi]
  00197	47		 inc	 edi
  00198	84 c0		 test	 al, al
  0019a	75 f9		 jne	 SHORT $LL36@str_format
  0019c	2b f9		 sub	 edi, ecx
  0019e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_02IIDLDAAC@ll?$AA@
  001a3	8a 64 3d db	 mov	 ah, BYTE PTR _form$2[ebp+edi-1]
  001a7	8d 54 3d db	 lea	 edx, DWORD PTR _form$2[ebp+edi-1]
  001ab	2b d1		 sub	 edx, ecx
  001ad	8d 49 00	 npad	 3
$LL28@str_format:
  001b0	8a 01		 mov	 al, BYTE PTR [ecx]
  001b2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  001b5	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  001b9	84 c0		 test	 al, al
  001bb	75 f3		 jne	 SHORT $LL28@str_format
; Line 1013
  001bd	ff b5 c8 df ff
	ff		 push	 DWORD PTR _n$2$[ebp]
  001c3	8d 4d de	 lea	 ecx, DWORD PTR _form$2[ebp+2]
  001c6	ff b5 c0 df ff
	ff		 push	 DWORD PTR _n$1$[ebp]
  001cc	88 64 39 ff	 mov	 BYTE PTR [ecx+edi-1], ah
  001d0	88 04 39	 mov	 BYTE PTR [ecx+edi], al
  001d3	8d 45 dc	 lea	 eax, DWORD PTR _form$2[ebp]
  001d6	50		 push	 eax
  001d7	68 ac 01 00 00	 push	 428			; 000001acH
  001dc	ff b5 c4 df ff
	ff		 push	 DWORD PTR _buff$1$[ebp]
  001e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
; Line 1014
  001e8	8b bd ac df ff
	ff		 mov	 edi, DWORD PTR _L$GSCopy$1$[ebp]
  001ee	83 c4 14	 add	 esp, 20			; 00000014H
  001f1	e9 15 01 00 00	 jmp	 $LN2@str_format
$LN9@str_format:
; Line 1017
  001f6	8d 45 dc	 lea	 eax, DWORD PTR _form$2[ebp]
  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 _addlenmod
; Line 1019
  00204	53		 push	 ebx
  00205	57		 push	 edi
  00206	e8 00 00 00 00	 call	 _luaL_checknumber
  0020b	83 c4 08	 add	 esp, 8
  0020e	8d 45 dc	 lea	 eax, DWORD PTR _form$2[ebp]
  00211	dd 1c 24	 fstp	 QWORD PTR [esp]
  00214	50		 push	 eax
  00215	68 ac 01 00 00	 push	 428			; 000001acH
  0021a	ff b5 c4 df ff
	ff		 push	 DWORD PTR _buff$1$[ebp]
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
  00226	83 c4 14	 add	 esp, 20			; 00000014H
; Line 1020
  00229	e9 dd 00 00 00	 jmp	 $LN2@str_format
$LN7@str_format:
; Line 1028
  0022e	53		 push	 ebx
  0022f	8d 85 cc df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00235	50		 push	 eax
  00236	57		 push	 edi
  00237	e8 00 00 00 00	 call	 _addquoted
; Line 1029
  0023c	8b 85 c8 df ff
	ff		 mov	 eax, DWORD PTR _nb$1$[ebp]
  00242	83 c4 0c	 add	 esp, 12			; 0000000cH
  00245	e9 c1 00 00 00	 jmp	 $LN2@str_format
$LN6@str_format:
; Line 1033
  0024a	8d 85 b8 df ff
	ff		 lea	 eax, DWORD PTR _l$1[ebp]
  00250	50		 push	 eax
  00251	53		 push	 ebx
  00252	57		 push	 edi
  00253	e8 00 00 00 00	 call	 _luaL_tolstring
  00258	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025b	89 85 c0 df ff
	ff		 mov	 DWORD PTR _s$1$[ebp], eax
; Line 1034
  00261	80 7d de 00	 cmp	 BYTE PTR _form$2[ebp+2], 0
  00265	75 1a		 jne	 SHORT $LN5@str_format
; Line 1035
  00267	8d 85 cc df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 _luaL_addvalue
; Line 1036
  00273	8b 85 c8 df ff
	ff		 mov	 eax, DWORD PTR _nb$1$[ebp]
  00279	83 c4 04	 add	 esp, 4
  0027c	e9 8a 00 00 00	 jmp	 $LN2@str_format
$LN5@str_format:
; Line 1037
  00281	8b c8		 mov	 ecx, eax
  00283	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL37@str_format:
  00286	8a 01		 mov	 al, BYTE PTR [ecx]
  00288	41		 inc	 ecx
  00289	84 c0		 test	 al, al
  0028b	75 f9		 jne	 SHORT $LL37@str_format
  0028d	2b ca		 sub	 ecx, edx
  0028f	39 8d b8 df ff
	ff		 cmp	 DWORD PTR _l$1[ebp], ecx
  00295	74 0f		 je	 SHORT $LN25@str_format
  00297	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FHCNDFMO@string?5contains?5zeros?$AA@
  0029c	53		 push	 ebx
  0029d	57		 push	 edi
  0029e	e8 00 00 00 00	 call	 _luaL_argerror
  002a3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@str_format:
; Line 1038
  002a6	8d 45 dc	 lea	 eax, DWORD PTR _form$2[ebp]
  002a9	6a 2e		 push	 46			; 0000002eH
  002ab	50		 push	 eax
  002ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  002b2	83 c4 08	 add	 esp, 8
  002b5	85 c0		 test	 eax, eax
  002b7	75 20		 jne	 SHORT $LN3@str_format
  002b9	83 bd b8 df ff
	ff 64		 cmp	 DWORD PTR _l$1[ebp], 100 ; 00000064H
  002c0	72 17		 jb	 SHORT $LN3@str_format
; Line 1040
  002c2	8d 85 cc df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 _luaL_addvalue
; Line 1042
  002ce	8b 85 c8 df ff
	ff		 mov	 eax, DWORD PTR _nb$1$[ebp]
  002d4	83 c4 04	 add	 esp, 4
  002d7	eb 32		 jmp	 SHORT $LN2@str_format
$LN3@str_format:
; Line 1043
  002d9	ff b5 c0 df ff
	ff		 push	 DWORD PTR _s$1$[ebp]
  002df	8d 45 dc	 lea	 eax, DWORD PTR _form$2[ebp]
  002e2	50		 push	 eax
  002e3	68 ac 01 00 00	 push	 428			; 000001acH
  002e8	ff b5 c4 df ff
	ff		 push	 DWORD PTR _buff$1$[ebp]
  002ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
; Line 1044
  002f4	6a fe		 push	 -2			; fffffffeH
  002f6	57		 push	 edi
  002f7	89 85 c8 df ff
	ff		 mov	 DWORD PTR _nb$1$[ebp], eax
  002fd	e8 00 00 00 00	 call	 _lua_settop
  00302	8b 85 c8 df ff
	ff		 mov	 eax, DWORD PTR _nb$1$[ebp]
$LN39@str_format:
  00308	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@str_format:
; Line 1055
  0030b	8b 95 d4 df ff
	ff		 mov	 edx, DWORD PTR _b$[ebp+8]
  00311	03 d0		 add	 edx, eax
$LN38@str_format:
  00313	89 95 d4 df ff
	ff		 mov	 DWORD PTR _b$[ebp+8], edx
  00319	3b b5 bc df ff
	ff		 cmp	 esi, DWORD PTR _strfrmt_end$1$[ebp]
  0031f	0f 82 4f fd ff
	ff		 jb	 $LL20@str_format
$LN19@str_format:
; Line 1058
  00325	8d 85 cc df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 _luaL_pushresult
  00331	83 c4 04	 add	 esp, 4
; Line 1059
  00334	b8 01 00 00 00	 mov	 eax, 1
  00339	5f		 pop	 edi
  0033a	5e		 pop	 esi
  0033b	5b		 pop	 ebx
; Line 1060
  0033c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033f	33 cd		 xor	 ecx, ebp
  00341	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00346	8b e5		 mov	 esp, ebp
  00348	5d		 pop	 ebp
  00349	c3		 ret	 0
$LN1@str_format:
; Line 1051
  0034a	0f be 46 ff	 movsx	 eax, BYTE PTR [esi-1]
  0034e	50		 push	 eax
  0034f	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8format@
  00354	57		 push	 edi
  00355	e8 00 00 00 00	 call	 _luaL_error
; Line 1060
  0035a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0035d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00360	33 cd		 xor	 ecx, ebp
  00362	5f		 pop	 edi
  00363	5e		 pop	 esi
  00364	5b		 pop	 ebx
  00365	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036a	8b e5		 mov	 esp, ebp
  0036c	5d		 pop	 ebp
  0036d	c3		 ret	 0
  0036e	8b ff		 npad	 2
$LN41@str_format:
  00370	00 00 00 00	 DD	 $LN9@str_format
  00374	00 00 00 00	 DD	 $LN10@str_format
  00378	00 00 00 00	 DD	 $LN11@str_format
  0037c	00 00 00 00	 DD	 $LN7@str_format
  00380	00 00 00 00	 DD	 $LN6@str_format
  00384	00 00 00 00	 DD	 $LN1@str_format
$LN35@str_format:
  00388	00		 DB	 0
  00389	05		 DB	 5
  0038a	05		 DB	 5
  0038b	05		 DB	 5
  0038c	00		 DB	 0
  0038d	05		 DB	 5
  0038e	00		 DB	 0
  0038f	05		 DB	 5
  00390	05		 DB	 5
  00391	05		 DB	 5
  00392	05		 DB	 5
  00393	05		 DB	 5
  00394	05		 DB	 5
  00395	05		 DB	 5
  00396	05		 DB	 5
  00397	05		 DB	 5
  00398	05		 DB	 5
  00399	05		 DB	 5
  0039a	05		 DB	 5
  0039b	05		 DB	 5
  0039c	05		 DB	 5
  0039d	05		 DB	 5
  0039e	05		 DB	 5
  0039f	01		 DB	 1
  003a0	05		 DB	 5
  003a1	05		 DB	 5
  003a2	05		 DB	 5
  003a3	05		 DB	 5
  003a4	05		 DB	 5
  003a5	05		 DB	 5
  003a6	05		 DB	 5
  003a7	05		 DB	 5
  003a8	00		 DB	 0
  003a9	05		 DB	 5
  003aa	02		 DB	 2
  003ab	01		 DB	 1
  003ac	00		 DB	 0
  003ad	00		 DB	 0
  003ae	00		 DB	 0
  003af	05		 DB	 5
  003b0	01		 DB	 1
  003b1	05		 DB	 5
  003b2	05		 DB	 5
  003b3	05		 DB	 5
  003b4	05		 DB	 5
  003b5	05		 DB	 5
  003b6	01		 DB	 1
  003b7	05		 DB	 5
  003b8	03		 DB	 3
  003b9	05		 DB	 5
  003ba	04		 DB	 4
  003bb	05		 DB	 5
  003bc	01		 DB	 1
  003bd	05		 DB	 5
  003be	05		 DB	 5
  003bf	01		 DB	 1
_str_format ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _addlenmod
_TEXT	SEGMENT
_form$ = 8						; size = 4
_lenmod$ = 12						; size = 4
_addlenmod PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 974
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 975
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _form$[ebp]
  00007	8b c3		 mov	 eax, ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000e	8b ff		 npad	 2
$LL7@addlenmod:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@addlenmod
  00017	2b c2		 sub	 eax, edx
; Line 976
  00019	8b 55 0c	 mov	 edx, DWORD PTR _lenmod$[ebp]
  0001c	8b f2		 mov	 esi, edx
  0001e	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
$LL8@addlenmod:
  00021	8a 0e		 mov	 cl, BYTE PTR [esi]
  00023	46		 inc	 esi
  00024	84 c9		 test	 cl, cl
  00026	75 f9		 jne	 SHORT $LL8@addlenmod
  00028	2b f7		 sub	 esi, edi
; Line 977
  0002a	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
  0002d	03 f8		 add	 edi, eax
  0002f	8a 2f		 mov	 ch, BYTE PTR [edi]
; Line 978
  00031	2b fa		 sub	 edi, edx
$LL3@addlenmod:
  00033	8a 0a		 mov	 cl, BYTE PTR [edx]
  00035	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00038	88 4c 17 ff	 mov	 BYTE PTR [edi+edx-1], cl
  0003c	84 c9		 test	 cl, cl
  0003e	75 f3		 jne	 SHORT $LL3@addlenmod
; Line 979
  00040	03 c6		 add	 eax, esi
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	88 6c 18 ff	 mov	 BYTE PTR [eax+ebx-1], ch
; Line 980
  00048	88 0c 18	 mov	 BYTE PTR [eax+ebx], cl
  0004b	5b		 pop	 ebx
; Line 981
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_addlenmod ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _scanformat
_TEXT	SEGMENT
_L$ = 8							; size = 4
_strfrmt$ = 12						; size = 4
_form$ = 16						; size = 4
_scanformat PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 949
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 950
  00005	8b 75 0c	 mov	 esi, DWORD PTR _strfrmt$[ebp]
  00008	8b de		 mov	 ebx, esi
  0000a	57		 push	 edi
; Line 951
  0000b	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000e	74 1e		 je	 SHORT $LN16@scanformat
  00010	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__strchr
$LL9@scanformat:
  00016	0f be 03	 movsx	 eax, BYTE PTR [ebx]
  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_05GGBDHNF@?9?$CL?5?$CD0?$AA@
  0001f	ff d7		 call	 edi
  00021	83 c4 08	 add	 esp, 8
  00024	85 c0		 test	 eax, eax
  00026	74 06		 je	 SHORT $LN16@scanformat
  00028	43		 inc	 ebx
  00029	80 3b 00	 cmp	 BYTE PTR [ebx], 0
  0002c	75 e8		 jne	 SHORT $LL9@scanformat
$LN16@scanformat:
; Line 952
  0002e	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00031	8b c3		 mov	 eax, ebx
  00033	2b c6		 sub	 eax, esi
  00035	83 f8 06	 cmp	 eax, 6
  00038	72 0e		 jb	 SHORT $LN7@scanformat
; Line 953
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ?$AA@
  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 _luaL_error
  00045	83 c4 08	 add	 esp, 8
$LN7@scanformat:
; Line 954
  00048	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  0004b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__isdigit
  00051	50		 push	 eax
  00052	ff d6		 call	 esi
  00054	83 c4 04	 add	 esp, 4
  00057	85 c0		 test	 eax, eax
  00059	74 01		 je	 SHORT $LN6@scanformat
  0005b	43		 inc	 ebx
$LN6@scanformat:
; Line 955
  0005c	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  0005f	50		 push	 eax
  00060	ff d6		 call	 esi
  00062	83 c4 04	 add	 esp, 4
  00065	85 c0		 test	 eax, eax
  00067	74 01		 je	 SHORT $LN5@scanformat
  00069	43		 inc	 ebx
$LN5@scanformat:
; Line 956
  0006a	80 3b 2e	 cmp	 BYTE PTR [ebx], 46	; 0000002eH
  0006d	75 1e		 jne	 SHORT $LN2@scanformat
; Line 958
  0006f	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  00073	43		 inc	 ebx
  00074	50		 push	 eax
  00075	ff d6		 call	 esi
  00077	83 c4 04	 add	 esp, 4
  0007a	85 c0		 test	 eax, eax
  0007c	74 01		 je	 SHORT $LN3@scanformat
  0007e	43		 inc	 ebx
$LN3@scanformat:
; Line 959
  0007f	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00082	50		 push	 eax
  00083	ff d6		 call	 esi
  00085	83 c4 04	 add	 esp, 4
  00088	85 c0		 test	 eax, eax
  0008a	74 01		 je	 SHORT $LN2@scanformat
  0008c	43		 inc	 ebx
$LN2@scanformat:
; Line 961
  0008d	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00090	50		 push	 eax
  00091	ff d6		 call	 esi
  00093	83 c4 04	 add	 esp, 4
  00096	85 c0		 test	 eax, eax
  00098	74 0e		 je	 SHORT $LN1@scanformat
; Line 962
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precisi@
  0009f	57		 push	 edi
  000a0	e8 00 00 00 00	 call	 _luaL_error
  000a5	83 c4 08	 add	 esp, 8
$LN1@scanformat:
; Line 964
  000a8	8b 45 0c	 mov	 eax, DWORD PTR _strfrmt$[ebp]
  000ab	8b f3		 mov	 esi, ebx
  000ad	8b 7d 10	 mov	 edi, DWORD PTR _form$[ebp]
  000b0	2b f0		 sub	 esi, eax
  000b2	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  000b5	c6 07 25	 mov	 BYTE PTR [edi], 37	; 00000025H
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	47		 inc	 edi
  000bb	57		 push	 edi
  000bc	e8 00 00 00 00	 call	 _memcpy
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 966
  000c4	c6 44 3e 01 00	 mov	 BYTE PTR [esi+edi+1], 0
; Line 967
  000c9	8b c3		 mov	 eax, ebx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
; Line 968
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_scanformat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _addquoted
_TEXT	SEGMENT
_l$ = -20						; size = 4
_buff$1 = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_b$ = 12						; size = 4
_arg$ = 16						; size = 4
_addquoted PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 925
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _arg$[ebp]
; Line 927
  00013	8d 55 ec	 lea	 edx, DWORD PTR _l$[ebp]
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _L$[ebp]
  00019	56		 push	 esi
  0001a	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0001d	57		 push	 edi
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 928
  00026	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	8b f8		 mov	 edi, eax
  0002e	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00031	72 0b		 jb	 SHORT $LN13@addquoted
  00033	6a 01		 push	 1
  00035	56		 push	 esi
  00036	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  0003b	83 c4 08	 add	 esp, 8
$LN13@addquoted:
  0003e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00041	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00043	c6 04 01 22	 mov	 BYTE PTR [ecx+eax], 34	; 00000022H
  00047	ff 46 08	 inc	 DWORD PTR [esi+8]
; Line 929
  0004a	8b 45 ec	 mov	 eax, DWORD PTR _l$[ebp]
  0004d	85 c0		 test	 eax, eax
  0004f	0f 84 ba 00 00
	00		 je	 $LN19@addquoted
  00055	53		 push	 ebx
  00056	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___snprintf
  0005c	8d 64 24 00	 npad	 4
$LL10@addquoted:
  00060	48		 dec	 eax
  00061	89 45 ec	 mov	 DWORD PTR _l$[ebp], eax
; Line 930
  00064	8a 07		 mov	 al, BYTE PTR [edi]
  00066	3c 22		 cmp	 al, 34			; 00000022H
  00068	74 59		 je	 SHORT $LN7@addquoted
  0006a	3c 5c		 cmp	 al, 92			; 0000005cH
  0006c	74 55		 je	 SHORT $LN7@addquoted
  0006e	3c 0a		 cmp	 al, 10			; 0000000aH
  00070	74 51		 je	 SHORT $LN7@addquoted
; Line 934
  00072	84 c0		 test	 al, al
  00074	74 11		 je	 SHORT $LN4@addquoted
  00076	0f b6 c0	 movzx	 eax, al
  00079	50		 push	 eax
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__iscntrl
  00080	83 c4 04	 add	 esp, 4
  00083	85 c0		 test	 eax, eax
  00085	74 5b		 je	 SHORT $LN25@addquoted
$LN4@addquoted:
; Line 936
  00087	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  0008b	50		 push	 eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isdigit
  00092	83 c4 04	 add	 esp, 4
  00095	85 c0		 test	 eax, eax
; Line 937
  00097	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0009a	50		 push	 eax
  0009b	8d 45 f0	 lea	 eax, DWORD PTR _buff$1[ebp]
  0009e	75 07		 jne	 SHORT $LN3@addquoted
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_03GAHHLKFB@?2?$CFd?$AA@
; Line 938
  000a5	eb 05		 jmp	 SHORT $LN26@addquoted
$LN3@addquoted:
; Line 939
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_05OLMHDLGP@?2?$CF03d?$AA@
$LN26@addquoted:
  000ac	6a 0a		 push	 10			; 0000000aH
  000ae	50		 push	 eax
  000af	ff d3		 call	 ebx
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
; Line 940
  000b4	8d 45 f0	 lea	 eax, DWORD PTR _buff$1[ebp]
  000b7	50		 push	 eax
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 _luaL_addstring
  000be	83 c4 08	 add	 esp, 8
; Line 942
  000c1	eb 3f		 jmp	 SHORT $LN1@addquoted
$LN7@addquoted:
; Line 931
  000c3	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000c6	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000c9	72 0b		 jb	 SHORT $LN14@addquoted
  000cb	6a 01		 push	 1
  000cd	56		 push	 esi
  000ce	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  000d3	83 c4 08	 add	 esp, 8
$LN14@addquoted:
  000d6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000d9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000db	c6 04 01 5c	 mov	 BYTE PTR [ecx+eax], 92	; 0000005cH
  000df	ff 46 08	 inc	 DWORD PTR [esi+8]
$LN25@addquoted:
  000e2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; Line 932
  000e5	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000e8	72 0b		 jb	 SHORT $LN15@addquoted
  000ea	6a 01		 push	 1
  000ec	56		 push	 esi
  000ed	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  000f2	83 c4 08	 add	 esp, 8
$LN15@addquoted:
  000f5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000f8	8b 16		 mov	 edx, DWORD PTR [esi]
  000fa	8a 07		 mov	 al, BYTE PTR [edi]
  000fc	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000ff	ff 46 08	 inc	 DWORD PTR [esi+8]
$LN1@addquoted:
; Line 944
  00102	8b 45 ec	 mov	 eax, DWORD PTR _l$[ebp]
  00105	47		 inc	 edi
  00106	85 c0		 test	 eax, eax
  00108	0f 85 52 ff ff
	ff		 jne	 $LL10@addquoted
  0010e	5b		 pop	 ebx
$LN19@addquoted:
; Line 929
  0010f	48		 dec	 eax
  00110	89 45 ec	 mov	 DWORD PTR _l$[ebp], eax
; Line 946
  00113	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00116	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00119	72 0b		 jb	 SHORT $LN17@addquoted
  0011b	6a 01		 push	 1
  0011d	56		 push	 esi
  0011e	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  00123	83 c4 08	 add	 esp, 8
$LN17@addquoted:
  00126	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00128	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0012b	5f		 pop	 edi
  0012c	c6 04 01 22	 mov	 BYTE PTR [ecx+eax], 34	; 00000022H
; Line 947
  00130	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00133	ff 46 08	 inc	 DWORD PTR [esi+8]
  00136	33 cd		 xor	 ecx, ebp
  00138	5e		 pop	 esi
  00139	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c3		 ret	 0
_addquoted ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_gsub
_TEXT	SEGMENT
_tr$1$ = -8536						; size = 4
_srcl$ = -8532						; size = 4
_max_s$2$ = -8528					; size = 4
_max_s$1$ = -8524					; size = 4
_anchor$1$ = -8520					; size = 4
_p$1$ = -8516						; size = 4
_lp$ = -8512						; size = 4
_n$ = -8508						; size = 8
_n$1$ = -8504						; size = 4
_L$GSCopy$1$ = -8500					; size = 4
_b$ = -8496						; size = 8208
_ms$ = -288						; size = 284
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_str_gsub PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 779
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 58 21 00 00	 mov	 eax, 8536		; 00002158H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
; Line 781
  0001b	8d 85 ac de ff
	ff		 lea	 eax, DWORD PTR _srcl$[ebp]
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	6a 01		 push	 1
  00026	53		 push	 ebx
  00027	89 9d cc de ff
	ff		 mov	 DWORD PTR _L$GSCopy$1$[ebp], ebx
  0002d	e8 00 00 00 00	 call	 _luaL_checklstring
  00032	8b f0		 mov	 esi, eax
; Line 782
  00034	8d 85 c0 de ff
	ff		 lea	 eax, DWORD PTR _lp$[ebp]
  0003a	50		 push	 eax
  0003b	6a 02		 push	 2
  0003d	53		 push	 ebx
  0003e	e8 00 00 00 00	 call	 _luaL_checklstring
  00043	8b f8		 mov	 edi, eax
; Line 783
  00045	6a 03		 push	 3
  00047	53		 push	 ebx
  00048	89 bd bc de ff
	ff		 mov	 DWORD PTR _p$1$[ebp], edi
  0004e	e8 00 00 00 00	 call	 _lua_type
; Line 784
  00053	8b 8d ac de ff
	ff		 mov	 ecx, DWORD PTR _srcl$[ebp]
  00059	8b d8		 mov	 ebx, eax
  0005b	6a 00		 push	 0
  0005d	41		 inc	 ecx
  0005e	89 9d a8 de ff
	ff		 mov	 DWORD PTR _tr$1$[ebp], ebx
  00064	51		 push	 ecx
  00065	6a 04		 push	 4
  00067	ff b5 cc de ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  0006d	e8 00 00 00 00	 call	 _luaL_optinteger
  00072	89 85 b4 de ff
	ff		 mov	 DWORD PTR _max_s$1$[ebp], eax
  00078	83 c4 30	 add	 esp, 48			; 00000030H
; Line 785
  0007b	33 c0		 xor	 eax, eax
  0007d	89 95 b0 de ff
	ff		 mov	 DWORD PTR _max_s$2$[ebp], edx
  00083	80 3f 5e	 cmp	 BYTE PTR [edi], 94	; 0000005eH
  00086	0f 57 c0	 xorps	 xmm0, xmm0
; Line 786
  00089	66 0f 13 85 c4
	de ff ff	 movlpd	 QWORD PTR _n$[ebp], xmm0
  00091	0f 94 c0	 sete	 al
  00094	89 85 b8 de ff
	ff		 mov	 DWORD PTR _anchor$1$[ebp], eax
; Line 791
  0009a	83 fb 03	 cmp	 ebx, 3
  0009d	74 24		 je	 SHORT $LN12@str_gsub
  0009f	83 fb 04	 cmp	 ebx, 4
  000a2	74 1f		 je	 SHORT $LN12@str_gsub
  000a4	83 fb 06	 cmp	 ebx, 6
  000a7	74 1a		 je	 SHORT $LN12@str_gsub
  000a9	83 fb 05	 cmp	 ebx, 5
  000ac	74 15		 je	 SHORT $LN12@str_gsub
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@PPPOBACA@string?1function?1table?5expected?$AA@
  000b3	6a 03		 push	 3
  000b5	ff b5 cc de ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  000bb	e8 00 00 00 00	 call	 _luaL_argerror
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@str_gsub:
; Line 792
  000c3	8d 85 d0 de ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  000c9	50		 push	 eax
  000ca	ff b5 cc de ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  000d0	e8 00 00 00 00	 call	 _luaL_buffinit
; Line 794
  000d5	8b 8d c0 de ff
	ff		 mov	 ecx, DWORD PTR _lp$[ebp]
  000db	83 c4 08	 add	 esp, 8
  000de	83 bd b8 de ff
	ff 00		 cmp	 DWORD PTR _anchor$1$[ebp], 0
  000e5	74 0e		 je	 SHORT $LN9@str_gsub
  000e7	47		 inc	 edi
  000e8	49		 dec	 ecx
  000e9	89 bd bc de ff
	ff		 mov	 DWORD PTR _p$1$[ebp], edi
  000ef	89 8d c0 de ff
	ff		 mov	 DWORD PTR _lp$[ebp], ecx
$LN9@str_gsub:
; Line 796
  000f5	8b 95 ac de ff
	ff		 mov	 edx, DWORD PTR _srcl$[ebp]
  000fb	8b 85 cc de ff
	ff		 mov	 eax, DWORD PTR _L$GSCopy$1$[ebp]
  00101	89 85 ec fe ff
	ff		 mov	 DWORD PTR _ms$[ebp+12], eax
  00107	c7 85 f4 fe ff
	ff c8 00 00 00	 mov	 DWORD PTR _ms$[ebp+20], 200 ; 000000c8H
  00111	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _ms$[ebp], esi
  00117	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  0011a	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ms$[ebp+4], eax
  00120	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  00123	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _ms$[ebp+8], eax
  00129	81 fa 57 9e ff
	3f		 cmp	 edx, 1073716823		; 3fff9e57H
  0012f	73 0f		 jae	 SHORT $LN15@str_gsub
  00131	8d 04 95 a0 86
	01 00		 lea	 eax, DWORD PTR [edx*4+100000]
  00138	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _ms$[ebp+16], eax
  0013e	eb 0a		 jmp	 SHORT $LN20@str_gsub
$LN15@str_gsub:
  00140	c7 85 f0 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _ms$[ebp+16], -1
$LN20@str_gsub:
; Line 797
  0014a	83 bd b0 de ff
	ff 00		 cmp	 DWORD PTR _max_s$2$[ebp], 0
  00151	0f 8c e2 00 00
	00		 jl	 $LN29@str_gsub
  00157	7f 0d		 jg	 SHORT $LN26@str_gsub
  00159	83 bd b4 de ff
	ff 00		 cmp	 DWORD PTR _max_s$1$[ebp], 0
  00160	0f 86 d3 00 00
	00		 jbe	 $LN29@str_gsub
$LN26@str_gsub:
  00166	8b 9d c8 de ff
	ff		 mov	 ebx, DWORD PTR _n$[ebp+4]
  0016c	8b 85 c4 de ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  00172	89 85 c8 de ff
	ff		 mov	 DWORD PTR _n$1$[ebp], eax
$LL8@str_gsub:
; Line 800
  00178	57		 push	 edi
  00179	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _ms$[ebp]
  0017f	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ms$[ebp+24], 0
  00189	56		 push	 esi
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 _match
  00190	8b f8		 mov	 edi, eax
  00192	83 c4 0c	 add	 esp, 12			; 0000000cH
  00195	85 ff		 test	 edi, edi
  00197	74 30		 je	 SHORT $LN5@str_gsub
; Line 802
  00199	ff b5 a8 de ff
	ff		 push	 DWORD PTR _tr$1$[ebp]
  0019f	83 85 c8 de ff
	ff 01		 add	 DWORD PTR _n$1$[ebp], 1
  001a6	8d 85 d0 de ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  001ac	57		 push	 edi
  001ad	56		 push	 esi
  001ae	50		 push	 eax
  001af	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _ms$[ebp]
  001b5	83 d3 00	 adc	 ebx, 0
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 _add_value
  001be	83 c4 14	 add	 esp, 20			; 00000014H
; Line 804
  001c1	3b fe		 cmp	 edi, esi
  001c3	76 04		 jbe	 SHORT $LN5@str_gsub
; Line 805
  001c5	8b f7		 mov	 esi, edi
  001c7	eb 3f		 jmp	 SHORT $LN2@str_gsub
$LN5@str_gsub:
; Line 806
  001c9	3b b5 e4 fe ff
	ff		 cmp	 esi, DWORD PTR _ms$[ebp+4]
  001cf	73 7a		 jae	 SHORT $LN25@str_gsub
; Line 807
  001d1	8b 95 d8 de ff
	ff		 mov	 edx, DWORD PTR _b$[ebp+8]
  001d7	3b 95 d4 de ff
	ff		 cmp	 edx, DWORD PTR _b$[ebp+4]
  001dd	72 17		 jb	 SHORT $LN13@str_gsub
  001df	8d 85 d0 de ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  001e5	6a 01		 push	 1
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  001ed	8b 95 d8 de ff
	ff		 mov	 edx, DWORD PTR _b$[ebp+8]
  001f3	83 c4 08	 add	 esp, 8
$LN13@str_gsub:
  001f6	8b 85 d0 de ff
	ff		 mov	 eax, DWORD PTR _b$[ebp]
  001fc	8a 0e		 mov	 cl, BYTE PTR [esi]
  001fe	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00201	ff 85 d8 de ff
	ff		 inc	 DWORD PTR _b$[ebp+8]
  00207	46		 inc	 esi
$LN2@str_gsub:
; Line 809
  00208	83 bd b8 de ff
	ff 00		 cmp	 DWORD PTR _anchor$1$[ebp], 0
  0020f	75 3a		 jne	 SHORT $LN25@str_gsub
; Line 797
  00211	8b bd bc de ff
	ff		 mov	 edi, DWORD PTR _p$1$[ebp]
  00217	3b 9d b0 de ff
	ff		 cmp	 ebx, DWORD PTR _max_s$2$[ebp]
  0021d	0f 8c 55 ff ff
	ff		 jl	 $LL8@str_gsub
  00223	7f 26		 jg	 SHORT $LN25@str_gsub
  00225	8b 85 b4 de ff
	ff		 mov	 eax, DWORD PTR _max_s$1$[ebp]
  0022b	39 85 c8 de ff
	ff		 cmp	 DWORD PTR _n$1$[ebp], eax
  00231	0f 82 41 ff ff
	ff		 jb	 $LL8@str_gsub
  00237	eb 12		 jmp	 SHORT $LN25@str_gsub
$LN29@str_gsub:
  00239	8b 9d c8 de ff
	ff		 mov	 ebx, DWORD PTR _n$[ebp+4]
  0023f	8b 85 c4 de ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  00245	89 85 c8 de ff
	ff		 mov	 DWORD PTR _n$1$[ebp], eax
$LN25@str_gsub:
; Line 811
  0024b	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _ms$[ebp+4]
  00251	2b c6		 sub	 eax, esi
  00253	50		 push	 eax
  00254	8d 85 d0 de ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0025a	56		 push	 esi
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 _luaL_addlstring
; Line 812
  00261	8d 85 d0 de ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00267	50		 push	 eax
  00268	e8 00 00 00 00	 call	 _luaL_pushresult
; Line 813
  0026d	53		 push	 ebx
  0026e	ff b5 c8 de ff
	ff		 push	 DWORD PTR _n$1$[ebp]
  00274	ff b5 cc de ff
	ff		 push	 DWORD PTR _L$GSCopy$1$[ebp]
  0027a	e8 00 00 00 00	 call	 _lua_pushinteger
; Line 815
  0027f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00282	83 c4 1c	 add	 esp, 28			; 0000001cH
  00285	33 cd		 xor	 ecx, ebp
  00287	b8 02 00 00 00	 mov	 eax, 2
  0028c	5f		 pop	 edi
  0028d	5e		 pop	 esi
  0028e	5b		 pop	 ebx
  0028f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00294	8b e5		 mov	 esp, ebp
  00296	5d		 pop	 ebp
  00297	c3		 ret	 0
_str_gsub ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _add_value
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_b$ = 12						; size = 4
_s$ = 16						; size = 4
_e$ = 20						; size = 4
_tr$ = 24						; size = 4
_add_value PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 749
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 750
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ms$[ebp]
; Line 751
  00006	8b 45 18	 mov	 eax, DWORD PTR _tr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  0000e	57		 push	 edi
  0000f	83 e8 05	 sub	 eax, 5
  00012	74 44		 je	 SHORT $LN5@add_value
  00014	48		 dec	 eax
  00015	74 17		 je	 SHORT $LN6@add_value
; Line 765
  00017	ff 75 14	 push	 DWORD PTR _e$[ebp]
  0001a	ff 75 10	 push	 DWORD PTR _s$[ebp]
  0001d	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 _add_s
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
; Line 776
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN6@add_value:
; Line 754
  0002e	6a 03		 push	 3
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _lua_pushvalue
; Line 755
  00036	8b 7d 14	 mov	 edi, DWORD PTR _e$[ebp]
  00039	8b 5d 10	 mov	 ebx, DWORD PTR _s$[ebp]
  0003c	57		 push	 edi
  0003d	53		 push	 ebx
  0003e	ff 75 08	 push	 DWORD PTR _ms$[ebp]
  00041	e8 00 00 00 00	 call	 _push_captures
; Line 756
  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	6a 01		 push	 1
  0004c	50		 push	 eax
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 _lua_callk
  00053	83 c4 28	 add	 esp, 40			; 00000028H
; Line 757
  00056	eb 1b		 jmp	 SHORT $LN7@add_value
$LN5@add_value:
; Line 760
  00058	8b 7d 14	 mov	 edi, DWORD PTR _e$[ebp]
  0005b	8b 5d 10	 mov	 ebx, DWORD PTR _s$[ebp]
  0005e	57		 push	 edi
  0005f	53		 push	 ebx
  00060	6a 00		 push	 0
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _push_onecapture
; Line 761
  00068	6a 03		 push	 3
  0006a	56		 push	 esi
  0006b	e8 00 00 00 00	 call	 _lua_gettable
  00070	83 c4 18	 add	 esp, 24			; 00000018H
$LN7@add_value:
; Line 769
  00073	6a ff		 push	 -1
  00075	56		 push	 esi
  00076	e8 00 00 00 00	 call	 _lua_toboolean
  0007b	83 c4 08	 add	 esp, 8
  0007e	85 c0		 test	 eax, eax
  00080	75 25		 jne	 SHORT $LN3@add_value
; Line 770
  00082	6a fe		 push	 -2			; fffffffeH
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 _lua_settop
; Line 771
  0008a	2b fb		 sub	 edi, ebx
  0008c	57		 push	 edi
  0008d	53		 push	 ebx
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 _lua_pushlstring
  00094	83 c4 14	 add	 esp, 20			; 00000014H
; Line 775
  00097	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0009a	e8 00 00 00 00	 call	 _luaL_addvalue
  0009f	83 c4 04	 add	 esp, 4
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
; Line 776
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
$LN3@add_value:
; Line 773
  000a7	6a ff		 push	 -1
  000a9	56		 push	 esi
  000aa	e8 00 00 00 00	 call	 _lua_isstring
  000af	83 c4 08	 add	 esp, 8
  000b2	85 c0		 test	 eax, eax
  000b4	75 1e		 jne	 SHORT $LN1@add_value
; Line 774
  000b6	6a ff		 push	 -1
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 _lua_type
  000be	50		 push	 eax
  000bf	56		 push	 esi
  000c0	e8 00 00 00 00	 call	 _lua_typename
  000c5	50		 push	 eax
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LPDIHGGA@invalid?5replacement?5value?5?$CIa?5?$CFs?$CJ@
  000cb	56		 push	 esi
  000cc	e8 00 00 00 00	 call	 _luaL_error
  000d1	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1@add_value:
; Line 775
  000d4	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  000d7	e8 00 00 00 00	 call	 _luaL_addvalue
  000dc	83 c4 04	 add	 esp, 4
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
; Line 776
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
_add_value ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _add_s
_TEXT	SEGMENT
_l$ = -8						; size = 4
_news$1$ = -4						; size = 4
_ms$ = 8						; size = 4
_b$ = 12						; size = 4
_s$ = 16						; size = 4
_e$ = 20						; size = 4
_add_s	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 721
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
; Line 723
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _ms$[ebp]
; Line 724
  0000a	8d 45 f8	 lea	 eax, DWORD PTR _l$[ebp]
  0000d	57		 push	 edi
  0000e	50		 push	 eax
  0000f	6a 03		 push	 3
  00011	8b 5b 0c	 mov	 ebx, DWORD PTR [ebx+12]
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 _lua_tolstring
; Line 725
  0001a	33 ff		 xor	 edi, edi
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	8b c8		 mov	 ecx, eax
  00021	89 4d fc	 mov	 DWORD PTR _news$1$[ebp], ecx
  00024	39 7d f8	 cmp	 DWORD PTR _l$[ebp], edi
  00027	0f 86 ea 00 00
	00		 jbe	 $LN8@add_s
  0002d	56		 push	 esi
  0002e	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
$LL10@add_s:
; Line 726
  00031	80 3c 0f 25	 cmp	 BYTE PTR [edi+ecx], 37	; 00000025H
  00035	74 29		 je	 SHORT $LN7@add_s
; Line 727
  00037	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0003a	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0003d	72 61		 jb	 SHORT $LN14@add_s
  0003f	6a 01		 push	 1
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  00047	8b 45 fc	 mov	 eax, DWORD PTR _news$1$[ebp]
  0004a	83 c4 08	 add	 esp, 8
  0004d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00050	8b 16		 mov	 edx, DWORD PTR [esi]
  00052	8a 04 07	 mov	 al, BYTE PTR [edi+eax]
  00055	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00058	ff 46 08	 inc	 DWORD PTR [esi+8]
; Line 728
  0005b	e9 a9 00 00 00	 jmp	 $LN9@add_s
$LN7@add_s:
; Line 730
  00060	0f b6 44 0f 01	 movzx	 eax, BYTE PTR [edi+ecx+1]
  00065	47		 inc	 edi
  00066	50		 push	 eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isdigit
  0006d	83 c4 04	 add	 esp, 4
  00070	85 c0		 test	 eax, eax
; Line 731
  00072	8b 45 fc	 mov	 eax, DWORD PTR _news$1$[ebp]
  00075	75 3c		 jne	 SHORT $LN5@add_s
  00077	80 3c 07 25	 cmp	 BYTE PTR [edi+eax], 37	; 00000025H
  0007b	74 10		 je	 SHORT $LN4@add_s
; Line 732
  0007d	6a 25		 push	 37			; 00000025H
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KLCOLAN@invalid?5use?5of?5?8?$CFc?8?5in?5replaceme@
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 _luaL_error
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@add_s:
; Line 733
  0008d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00090	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00093	72 0b		 jb	 SHORT $LN14@add_s
  00095	6a 01		 push	 1
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 _luaL_prepbuffsize
  0009d	83 c4 08	 add	 esp, 8
$LN14@add_s:
  000a0	8b 45 fc	 mov	 eax, DWORD PTR _news$1$[ebp]
  000a3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a6	8b 16		 mov	 edx, DWORD PTR [esi]
  000a8	8a 04 07	 mov	 al, BYTE PTR [edi+eax]
  000ab	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000ae	ff 46 08	 inc	 DWORD PTR [esi+8]
  000b1	eb 56		 jmp	 SHORT $LN9@add_s
$LN5@add_s:
; Line 735
  000b3	8a 04 07	 mov	 al, BYTE PTR [edi+eax]
  000b6	3c 30		 cmp	 al, 48			; 00000030H
  000b8	75 15		 jne	 SHORT $LN2@add_s
; Line 736
  000ba	8b 4d 10	 mov	 ecx, DWORD PTR _s$[ebp]
  000bd	8b 45 14	 mov	 eax, DWORD PTR _e$[ebp]
  000c0	2b c1		 sub	 eax, ecx
  000c2	50		 push	 eax
  000c3	51		 push	 ecx
  000c4	56		 push	 esi
  000c5	e8 00 00 00 00	 call	 _luaL_addlstring
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 737
  000cd	eb 3a		 jmp	 SHORT $LN9@add_s
$LN2@add_s:
; Line 738
  000cf	ff 75 14	 push	 DWORD PTR _e$[ebp]
  000d2	0f be c0	 movsx	 eax, al
  000d5	ff 75 10	 push	 DWORD PTR _s$[ebp]
  000d8	83 e8 31	 sub	 eax, 49			; 00000031H
  000db	50		 push	 eax
  000dc	ff 75 08	 push	 DWORD PTR _ms$[ebp]
  000df	e8 00 00 00 00	 call	 _push_onecapture
; Line 739
  000e4	6a 00		 push	 0
  000e6	6a ff		 push	 -1
  000e8	53		 push	 ebx
  000e9	e8 00 00 00 00	 call	 _luaL_tolstring
; Line 740
  000ee	6a ff		 push	 -1
  000f0	6a fe		 push	 -2			; fffffffeH
  000f2	53		 push	 ebx
  000f3	e8 00 00 00 00	 call	 _lua_rotate
  000f8	6a fe		 push	 -2			; fffffffeH
  000fa	53		 push	 ebx
  000fb	e8 00 00 00 00	 call	 _lua_settop
; Line 741
  00100	56		 push	 esi
  00101	e8 00 00 00 00	 call	 _luaL_addvalue
  00106	83 c4 34	 add	 esp, 52			; 00000034H
$LN9@add_s:
; Line 725
  00109	8b 4d fc	 mov	 ecx, DWORD PTR _news$1$[ebp]
  0010c	47		 inc	 edi
  0010d	3b 7d f8	 cmp	 edi, DWORD PTR _l$[ebp]
  00110	0f 82 1b ff ff
	ff		 jb	 $LL10@add_s
  00116	5e		 pop	 esi
$LN8@add_s:
  00117	5f		 pop	 edi
  00118	5b		 pop	 ebx
; Line 745
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
_add_s	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _gmatch
_TEXT	SEGMENT
_ls$1$ = -12						; size = 4
_p$1$ = -8						; size = 4
_ls$ = -4						; size = 4
_lp$ = 8						; size = 4
_L$ = 8							; size = 4
_gmatch	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 706
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; Line 708
  00009	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR _ls$[ebp]
  0000f	50		 push	 eax
  00010	6a 01		 push	 1
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 _luaL_checklstring
  00018	8b d8		 mov	 ebx, eax
; Line 709
  0001a	8d 45 08	 lea	 eax, DWORD PTR _lp$[ebp]
  0001d	50		 push	 eax
  0001e	6a 02		 push	 2
  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 711
  00026	6a 02		 push	 2
  00028	57		 push	 edi
  00029	89 45 f8	 mov	 DWORD PTR _p$1$[ebp], eax
  0002c	e8 00 00 00 00	 call	 _lua_settop
; Line 712
  00031	68 24 01 00 00	 push	 292			; 00000124H
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 _lua_newuserdata
; Line 713
  0003c	8b 55 08	 mov	 edx, DWORD PTR _lp$[ebp]
  0003f	8b f0		 mov	 esi, eax
  00041	8b 45 fc	 mov	 eax, DWORD PTR _ls$[ebp]
  00044	83 c4 28	 add	 esp, 40			; 00000028H
  00047	89 45 f4	 mov	 DWORD PTR _ls$1$[ebp], eax
  0004a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0004d	8d 0c 18	 lea	 ecx, DWORD PTR [eax+ebx]
  00050	c7 46 1c c8 00
	00 00		 mov	 DWORD PTR [esi+28], 200	; 000000c8H
  00057	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _p$1$[ebp]
  0005d	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00060	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00063	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00066	8b 45 f4	 mov	 eax, DWORD PTR _ls$1$[ebp]
  00069	3d 57 9e ff 3f	 cmp	 eax, 1073716823		; 3fff9e57H
  0006e	73 0c		 jae	 SHORT $LN4@gmatch
  00070	8d 04 85 a0 86
	01 00		 lea	 eax, DWORD PTR [eax*4+100000]
  00077	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0007a	eb 07		 jmp	 SHORT $LN3@gmatch
$LN4@gmatch:
  0007c	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1
$LN3@gmatch:
; Line 715
  00083	6a 03		 push	 3
  00085	68 00 00 00 00	 push	 OFFSET _gmatch_aux
  0008a	57		 push	 edi
  0008b	89 1e		 mov	 DWORD PTR [esi], ebx
  0008d	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00090	e8 00 00 00 00	 call	 _lua_pushcclosure
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 716
  00098	b8 01 00 00 00	 mov	 eax, 1
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
; Line 717
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
_gmatch	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _gmatch_aux
_TEXT	SEGMENT
_L$ = 8							; size = 4
_gmatch_aux PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 688
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; Line 689
  00006	68 d5 b9 f0 ff	 push	 -1001003		; fff0b9d5H
  0000b	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000e	e8 00 00 00 00	 call	 _lua_touserdata
  00013	8b f8		 mov	 edi, eax
  00015	83 c4 08	 add	 esp, 8
; Line 691
  00018	8b 37		 mov	 esi, DWORD PTR [edi]
  0001a	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
  0001d	77 23		 ja	 SHORT $LN4@gmatch_aux
  0001f	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
$LL6@gmatch_aux:
; Line 694
  00022	ff 77 04	 push	 DWORD PTR [edi+4]
  00025	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 _match
  00033	8b c8		 mov	 ecx, eax
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
  00038	85 c9		 test	 ecx, ecx
  0003a	75 0d		 jne	 SHORT $LN12@gmatch_aux
; Line 691
  0003c	46		 inc	 esi
  0003d	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
  00040	76 e0		 jbe	 SHORT $LL6@gmatch_aux
$LN4@gmatch_aux:
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
; Line 702
  00044	33 c0		 xor	 eax, eax
  00046	5b		 pop	 ebx
; Line 703
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN12@gmatch_aux:
; Line 695
  00049	3b ce		 cmp	 ecx, esi
  0004b	75 15		 jne	 SHORT $LN2@gmatch_aux
; Line 699
  0004d	51		 push	 ecx
  0004e	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00051	56		 push	 esi
  00052	53		 push	 ebx
  00053	89 07		 mov	 DWORD PTR [edi], eax
  00055	e8 00 00 00 00	 call	 _push_captures
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
; Line 703
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN2@gmatch_aux:
; Line 699
  00062	51		 push	 ecx
  00063	56		 push	 esi
  00064	53		 push	 ebx
  00065	89 0f		 mov	 DWORD PTR [edi], ecx
  00067	e8 00 00 00 00	 call	 _push_captures
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
; Line 703
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_gmatch_aux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_match
_TEXT	SEGMENT
_L$ = 8							; size = 4
_str_match PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 675
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 676
  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00008	e8 00 00 00 00	 call	 _str_find_aux
  0000d	83 c4 08	 add	 esp, 8
; Line 677
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
_str_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_find
_TEXT	SEGMENT
_L$ = 8							; size = 4
_str_find PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 670
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 671
  00003	6a 01		 push	 1
  00005	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00008	e8 00 00 00 00	 call	 _str_find_aux
  0000d	83 c4 08	 add	 esp, 8
; Line 672
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
_str_find ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_find_aux
_TEXT	SEGMENT
_init$ = -316						; size = 8
_init$2$ = -312						; size = 4
_anchor$1$ = -312					; size = 4
_L$GSCopy$1$ = -308					; size = 4
_ls$ = -304						; size = 4
_s$1$ = -300						; size = 4
_len$1$ = -296						; size = 4
tv206 = -296						; size = 4
_lp$ = -292						; size = 4
_ms$1 = -288						; size = 284
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_find$ = 12						; size = 4
_str_find_aux PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 623
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
; Line 625
  00019	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _ls$[ebp]
  0001f	50		 push	 eax
  00020	6a 01		 push	 1
  00022	57		 push	 edi
  00023	89 bd cc fe ff
	ff		 mov	 DWORD PTR _L$GSCopy$1$[ebp], edi
  00029	e8 00 00 00 00	 call	 _luaL_checklstring
  0002e	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _s$1$[ebp], eax
; Line 626
  00034	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _lp$[ebp]
  0003a	50		 push	 eax
  0003b	6a 02		 push	 2
  0003d	57		 push	 edi
  0003e	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 627
  00043	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _ls$[ebp]
  00049	8b d8		 mov	 ebx, eax
  0004b	6a 00		 push	 0
  0004d	6a 01		 push	 1
  0004f	6a 03		 push	 3
  00051	57		 push	 edi
  00052	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _len$1$[ebp], ecx
  00058	e8 00 00 00 00	 call	 _luaL_optinteger
  0005d	8b ca		 mov	 ecx, edx
  0005f	83 c4 28	 add	 esp, 40			; 00000028H
  00062	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _ls$[ebp]
  00068	8b f0		 mov	 esi, eax
  0006a	89 8d c8 fe ff
	ff		 mov	 DWORD PTR _init$2$[ebp], ecx
  00070	85 c9		 test	 ecx, ecx
  00072	7c 06		 jl	 SHORT $LN21@str_find_a
  00074	7f 2d		 jg	 SHORT $LN40@str_find_a
  00076	85 f6		 test	 esi, esi
  00078	73 1e		 jae	 SHORT $LN18@str_find_a
$LN21@str_find_a:
  0007a	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _len$1$[ebp]
  00080	f7 d8		 neg	 eax
  00082	3b c1		 cmp	 eax, ecx
  00084	77 5b		 ja	 SHORT $LN36@str_find_a
  00086	33 c0		 xor	 eax, eax
  00088	03 f1		 add	 esi, ecx
  0008a	13 85 c8 fe ff
	ff		 adc	 eax, DWORD PTR _init$2$[ebp]
  00090	83 c6 01	 add	 esi, 1
  00093	83 d0 00	 adc	 eax, 0
  00096	8b c8		 mov	 ecx, eax
$LN18@str_find_a:
; Line 628
  00098	85 c9		 test	 ecx, ecx
  0009a	7c 45		 jl	 SHORT $LN36@str_find_a
  0009c	7f 05		 jg	 SHORT $LN40@str_find_a
  0009e	83 fe 01	 cmp	 esi, 1
  000a1	72 3e		 jb	 SHORT $LN36@str_find_a
$LN40@str_find_a:
; Line 629
  000a3	33 c0		 xor	 eax, eax
  000a5	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv206[ebp], edx
  000ab	83 85 d8 fe ff
	ff 01		 add	 DWORD PTR tv206[ebp], 1
  000b2	13 c0		 adc	 eax, eax
  000b4	3b c8		 cmp	 ecx, eax
  000b6	7c 38		 jl	 SHORT $LN13@str_find_a
  000b8	7f 08		 jg	 SHORT $LN41@str_find_a
  000ba	3b b5 d8 fe ff
	ff		 cmp	 esi, DWORD PTR tv206[ebp]
  000c0	76 2e		 jbe	 SHORT $LN13@str_find_a
$LN41@str_find_a:
; Line 630
  000c2	57		 push	 edi
  000c3	e8 00 00 00 00	 call	 _lua_pushnil
  000c8	83 c4 04	 add	 esp, 4
; Line 631
  000cb	b8 01 00 00 00	 mov	 eax, 1
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
; Line 667
  000d3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d6	33 cd		 xor	 ecx, ebp
  000d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
$LN36@str_find_a:
; Line 628
  000e1	be 01 00 00 00	 mov	 esi, 1
  000e6	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _init$[ebp+4], 0
$LN13@str_find_a:
; Line 634
  000f0	83 7d 0c 00	 cmp	 DWORD PTR _find$[ebp], 0
  000f4	74 2c		 je	 SHORT $LN12@str_find_a
  000f6	6a 04		 push	 4
  000f8	57		 push	 edi
  000f9	e8 00 00 00 00	 call	 _lua_toboolean
  000fe	83 c4 08	 add	 esp, 8
  00101	85 c0		 test	 eax, eax
  00103	0f 85 86 00 00
	00		 jne	 $LN11@str_find_a
  00109	ff b5 dc fe ff
	ff		 push	 DWORD PTR _lp$[ebp]
  0010f	53		 push	 ebx
  00110	e8 00 00 00 00	 call	 _nospecials
  00115	83 c4 08	 add	 esp, 8
  00118	85 c0		 test	 eax, eax
  0011a	75 73		 jne	 SHORT $LN11@str_find_a
; Line 640
  0011c	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _ls$[ebp]
$LN12@str_find_a:
; Line 645
  00122	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _s$1$[ebp]
; Line 648
  00128	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _lp$[ebp]
  0012e	48		 dec	 eax
  0012f	03 f0		 add	 esi, eax
  00131	33 c0		 xor	 eax, eax
  00133	80 3b 5e	 cmp	 BYTE PTR [ebx], 94	; 0000005eH
  00136	0f 94 c0	 sete	 al
  00139	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _anchor$1$[ebp], eax
  0013f	85 c0		 test	 eax, eax
  00141	74 08		 je	 SHORT $LN8@str_find_a
  00143	43		 inc	 ebx
  00144	49		 dec	 ecx
  00145	89 8d dc fe ff
	ff		 mov	 DWORD PTR _lp$[ebp], ecx
$LN8@str_find_a:
; Line 650
  0014b	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _s$1$[ebp]
  00151	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _ms$1[ebp], eax
  00157	03 c2		 add	 eax, edx
  00159	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ms$1[ebp+4], eax
  0015f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00162	89 bd ec fe ff
	ff		 mov	 DWORD PTR _ms$1[ebp+12], edi
  00168	c7 85 f4 fe ff
	ff c8 00 00 00	 mov	 DWORD PTR _ms$1[ebp+20], 200 ; 000000c8H
  00172	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _ms$1[ebp+8], eax
  00178	81 fa 57 9e ff
	3f		 cmp	 edx, 1073716823		; 3fff9e57H
  0017e	73 76		 jae	 SHORT $LN25@str_find_a
  00180	8d 04 95 a0 86
	01 00		 lea	 eax, DWORD PTR [edx*4+100000]
  00187	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _ms$1[ebp+16], eax
  0018d	eb 71		 jmp	 SHORT $LL7@str_find_a
$LN11@str_find_a:
; Line 636
  0018f	ff b5 dc fe ff
	ff		 push	 DWORD PTR _lp$[ebp]
  00195	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _ls$[ebp]
  0019b	53		 push	 ebx
  0019c	8b 9d d4 fe ff
	ff		 mov	 ebx, DWORD PTR _s$1$[ebp]
  001a2	2b c6		 sub	 eax, esi
  001a4	40		 inc	 eax
  001a5	50		 push	 eax
  001a6	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  001a9	03 c6		 add	 eax, esi
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 _lmemfind
  001b1	8b f0		 mov	 esi, eax
  001b3	83 c4 10	 add	 esp, 16			; 00000010H
; Line 637
  001b6	85 f6		 test	 esi, esi
  001b8	0f 84 7c 00 00
	00		 je	 $LN5@str_find_a
; Line 638
  001be	2b f3		 sub	 esi, ebx
  001c0	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  001c3	99		 cdq
  001c4	52		 push	 edx
  001c5	50		 push	 eax
  001c6	57		 push	 edi
  001c7	e8 00 00 00 00	 call	 _lua_pushinteger
; Line 639
  001cc	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lp$[ebp]
  001d2	03 c6		 add	 eax, esi
  001d4	6a 00		 push	 0
  001d6	50		 push	 eax
  001d7	57		 push	 edi
  001d8	e8 00 00 00 00	 call	 _lua_pushinteger
  001dd	83 c4 18	 add	 esp, 24			; 00000018H
; Line 640
  001e0	b8 02 00 00 00	 mov	 eax, 2
  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	5b		 pop	 ebx
; Line 667
  001e8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001eb	33 cd		 xor	 ecx, ebp
  001ed	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f2	8b e5		 mov	 esp, ebp
  001f4	5d		 pop	 ebp
  001f5	c3		 ret	 0
; Line 650
$LN25@str_find_a:
  001f6	c7 85 f0 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _ms$1[ebp+16], -1
$LL7@str_find_a:
; Line 654
  00200	53		 push	 ebx
  00201	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _ms$1[ebp]
  00207	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ms$1[ebp+24], 0
  00211	56		 push	 esi
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 _match
  00218	8b f8		 mov	 edi, eax
  0021a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021d	85 ff		 test	 edi, edi
  0021f	75 38		 jne	 SHORT $LN31@str_find_a
; Line 663
  00221	8b c6		 mov	 eax, esi
  00223	46		 inc	 esi
  00224	3b 85 e4 fe ff
	ff		 cmp	 eax, DWORD PTR _ms$1[ebp+4]
  0022a	73 08		 jae	 SHORT $LN1@str_find_a
  0022c	39 bd c8 fe ff
	ff		 cmp	 DWORD PTR _anchor$1$[ebp], edi
  00232	74 cc		 je	 SHORT $LL7@str_find_a
$LN1@str_find_a:
  00234	8b bd cc fe ff
	ff		 mov	 edi, DWORD PTR _L$GSCopy$1$[ebp]
$LN5@str_find_a:
; Line 665
  0023a	57		 push	 edi
  0023b	e8 00 00 00 00	 call	 _lua_pushnil
  00240	83 c4 04	 add	 esp, 4
; Line 666
  00243	b8 01 00 00 00	 mov	 eax, 1
  00248	5f		 pop	 edi
  00249	5e		 pop	 esi
  0024a	5b		 pop	 ebx
; Line 667
  0024b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024e	33 cd		 xor	 ecx, ebp
  00250	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00255	8b e5		 mov	 esp, ebp
  00257	5d		 pop	 ebp
  00258	c3		 ret	 0
$LN31@str_find_a:
; Line 655
  00259	83 7d 0c 00	 cmp	 DWORD PTR _find$[ebp], 0
  0025d	74 50		 je	 SHORT $LN3@str_find_a
; Line 656
  0025f	2b b5 d4 fe ff
	ff		 sub	 esi, DWORD PTR _s$1$[ebp]
  00265	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00268	8b b5 cc fe ff
	ff		 mov	 esi, DWORD PTR _L$GSCopy$1$[ebp]
  0026e	99		 cdq
  0026f	52		 push	 edx
  00270	50		 push	 eax
  00271	56		 push	 esi
  00272	e8 00 00 00 00	 call	 _lua_pushinteger
; Line 657
  00277	2b bd d4 fe ff
	ff		 sub	 edi, DWORD PTR _s$1$[ebp]
  0027d	8b c7		 mov	 eax, edi
  0027f	99		 cdq
  00280	52		 push	 edx
  00281	50		 push	 eax
  00282	56		 push	 esi
  00283	e8 00 00 00 00	 call	 _lua_pushinteger
; Line 658
  00288	6a 00		 push	 0
  0028a	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _ms$1[ebp]
  00290	6a 00		 push	 0
  00292	50		 push	 eax
  00293	e8 00 00 00 00	 call	 _push_captures
  00298	83 c4 24	 add	 esp, 36			; 00000024H
  0029b	83 c0 02	 add	 eax, 2
  0029e	5f		 pop	 edi
  0029f	5e		 pop	 esi
  002a0	5b		 pop	 ebx
; Line 667
  002a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a4	33 cd		 xor	 ecx, ebp
  002a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c3		 ret	 0
$LN3@str_find_a:
; Line 661
  002af	57		 push	 edi
  002b0	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _ms$1[ebp]
  002b6	56		 push	 esi
  002b7	50		 push	 eax
  002b8	e8 00 00 00 00	 call	 _push_captures
; Line 667
  002bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c3	33 cd		 xor	 ecx, ebp
  002c5	5f		 pop	 edi
  002c6	5e		 pop	 esi
  002c7	5b		 pop	 ebx
  002c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002cd	8b e5		 mov	 esp, ebp
  002cf	5d		 pop	 ebp
  002d0	c3		 ret	 0
_str_find_aux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _reprepstate
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_reprepstate PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 617
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 618
  00003	8b 45 08	 mov	 eax, DWORD PTR _ms$[ebp]
  00006	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
; Line 620
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_reprepstate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _prepstate
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_L$ = 12						; size = 4
_s$ = 16						; size = 4
_ls$ = 20						; size = 4
_p$ = 24						; size = 4
_lp$ = 28						; size = 4
_prepstate PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 604
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 605
  00003	8b 55 08	 mov	 edx, DWORD PTR _ms$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _L$[ebp]
  00009	56		 push	 esi
; Line 608
  0000a	8b 75 14	 mov	 esi, DWORD PTR _ls$[ebp]
  0000d	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _s$[ebp]
  00013	89 02		 mov	 DWORD PTR [edx], eax
  00015	03 c6		 add	 eax, esi
  00017	89 42 04	 mov	 DWORD PTR [edx+4], eax
; Line 609
  0001a	8b 45 18	 mov	 eax, DWORD PTR _p$[ebp]
  0001d	03 45 1c	 add	 eax, DWORD PTR _lp$[ebp]
  00020	c7 42 14 c8 00
	00 00		 mov	 DWORD PTR [edx+20], 200	; 000000c8H
  00027	89 42 08	 mov	 DWORD PTR [edx+8], eax
; Line 610
  0002a	81 fe 57 9e ff
	3f		 cmp	 esi, 1073716823		; 3fff9e57H
  00030	73 0d		 jae	 SHORT $LN2@prepstate
; Line 611
  00032	8d 04 b5 a0 86
	01 00		 lea	 eax, DWORD PTR [esi*4+100000]
  00039	89 42 10	 mov	 DWORD PTR [edx+16], eax
  0003c	5e		 pop	 esi
; Line 614
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN2@prepstate:
; Line 613
  0003f	c7 42 10 ff ff
	ff ff		 mov	 DWORD PTR [edx+16], -1
  00046	5e		 pop	 esi
; Line 614
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_prepstate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _nospecials
_TEXT	SEGMENT
_p$ = 8							; size = 4
_l$ = 12						; size = 4
_nospecials PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 592
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 593
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _p$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	eb 03 8d 49 00	 npad	 5
$LL4@nospecials:
; Line 595
  00010	8d 34 1f	 lea	 esi, DWORD PTR [edi+ebx]
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NLFJOONJ@?$FO$?$CK?$CL?$DP?4?$CI?$FL?$CF?9?$AA@
  00018	56		 push	 esi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strpbrk
  0001f	83 c4 08	 add	 esp, 8
  00022	85 c0		 test	 eax, eax
  00024	75 25		 jne	 SHORT $LN8@nospecials
; Line 597
  00026	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL12@nospecials:
  00030	8a 06		 mov	 al, BYTE PTR [esi]
  00032	46		 inc	 esi
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL12@nospecials
  00037	2b f1		 sub	 esi, ecx
  00039	47		 inc	 edi
  0003a	03 fe		 add	 edi, esi
; Line 598
  0003c	3b 7d 0c	 cmp	 edi, DWORD PTR _l$[ebp]
  0003f	76 cf		 jbe	 SHORT $LL4@nospecials
; Line 599
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	5b		 pop	 ebx
; Line 600
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN8@nospecials:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
; Line 596
  0004d	33 c0		 xor	 eax, eax
  0004f	5b		 pop	 ebx
; Line 600
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_nospecials ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _push_captures
_TEXT	SEGMENT
_nlevels$1$ = 8						; size = 4
_ms$ = 8						; size = 4
_s$ = 12						; size = 4
_e$ = 16						; size = 4
_push_captures PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 581
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 583
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _s$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _ms$[ebp]
  0000c	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0000f	89 45 08	 mov	 DWORD PTR _nlevels$1$[ebp], eax
  00012	85 c0		 test	 eax, eax
  00014	75 0c		 jne	 SHORT $LN6@push_captu
  00016	85 db		 test	 ebx, ebx
  00018	74 08		 je	 SHORT $LN6@push_captu
  0001a	b8 01 00 00 00	 mov	 eax, 1
  0001f	89 45 08	 mov	 DWORD PTR _nlevels$1$[ebp], eax
$LN6@push_captu:
; Line 584
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IMEAEJPD@too?5many?5captures?$AA@
  00027	50		 push	 eax
  00028	ff 77 0c	 push	 DWORD PTR [edi+12]
  0002b	e8 00 00 00 00	 call	 _luaL_checkstack
; Line 585
  00030	8b 45 08	 mov	 eax, DWORD PTR _nlevels$1$[ebp]
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	33 f6		 xor	 esi, esi
  00038	85 c0		 test	 eax, eax
  0003a	7e 65		 jle	 SHORT $LN1@push_captu
  0003c	8d 64 24 00	 npad	 4
$LL3@push_captu:
; Line 586
  00040	3b 77 18	 cmp	 esi, DWORD PTR [edi+24]
  00043	7c 28		 jl	 SHORT $LN14@push_captu
  00045	85 f6		 test	 esi, esi
  00047	75 11		 jne	 SHORT $LN13@push_captu
  00049	8b 45 10	 mov	 eax, DWORD PTR _e$[ebp]
  0004c	2b c3		 sub	 eax, ebx
  0004e	50		 push	 eax
  0004f	53		 push	 ebx
  00050	ff 77 0c	 push	 DWORD PTR [edi+12]
  00053	e8 00 00 00 00	 call	 _lua_pushlstring
  00058	eb 3c		 jmp	 SHORT $LN22@push_captu
$LN13@push_captu:
  0005a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0005d	50		 push	 eax
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@
  00063	ff 77 0c	 push	 DWORD PTR [edi+12]
  00066	e8 00 00 00 00	 call	 _luaL_error
  0006b	eb 29		 jmp	 SHORT $LN22@push_captu
$LN14@push_captu:
  0006d	8b 5c f7 20	 mov	 ebx, DWORD PTR [edi+esi*8+32]
  00071	83 fb ff	 cmp	 ebx, -1
  00074	75 30		 jne	 SHORT $LN10@push_captu
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BFKNEALP@unfinished?5capture?$AA@
  0007b	ff 77 0c	 push	 DWORD PTR [edi+12]
  0007e	e8 00 00 00 00	 call	 _luaL_error
  00083	83 c4 08	 add	 esp, 8
$LN9@push_captu:
  00086	53		 push	 ebx
  00087	ff 74 f7 1c	 push	 DWORD PTR [edi+esi*8+28]
  0008b	ff 77 0c	 push	 DWORD PTR [edi+12]
  0008e	e8 00 00 00 00	 call	 _lua_pushlstring
$LN23@push_captu:
  00093	8b 5d 0c	 mov	 ebx, DWORD PTR _s$[ebp]
$LN22@push_captu:
; Line 585
  00096	8b 45 08	 mov	 eax, DWORD PTR _nlevels$1$[ebp]
  00099	46		 inc	 esi
; Line 586
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	3b f0		 cmp	 esi, eax
  0009f	7c 9f		 jl	 SHORT $LL3@push_captu
$LN1@push_captu:
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
; Line 588
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
; Line 586
$LN10@push_captu:
  000a6	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  000a9	75 db		 jne	 SHORT $LN9@push_captu
  000ab	8b 44 f7 1c	 mov	 eax, DWORD PTR [edi+esi*8+28]
  000af	2b 07		 sub	 eax, DWORD PTR [edi]
  000b1	40		 inc	 eax
  000b2	99		 cdq
  000b3	52		 push	 edx
  000b4	50		 push	 eax
  000b5	ff 77 0c	 push	 DWORD PTR [edi+12]
  000b8	e8 00 00 00 00	 call	 _lua_pushinteger
  000bd	eb d4		 jmp	 SHORT $LN23@push_captu
_push_captures ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _push_onecapture
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_i$ = 12						; size = 4
_s$ = 16						; size = 4
_e$ = 20						; size = 4
_push_onecapture PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 563
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 564
  00004	8b 75 08	 mov	 esi, DWORD PTR _ms$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _i$[ebp]
  0000b	3b 7e 18	 cmp	 edi, DWORD PTR [esi+24]
  0000e	7c 35		 jl	 SHORT $LN7@push_oneca
; Line 565
  00010	85 ff		 test	 edi, edi
  00012	75 19		 jne	 SHORT $LN6@push_oneca
; Line 566
  00014	8b 4d 10	 mov	 ecx, DWORD PTR _s$[ebp]
  00017	8b 45 14	 mov	 eax, DWORD PTR _e$[ebp]
  0001a	2b c1		 sub	 eax, ecx
  0001c	50		 push	 eax
  0001d	51		 push	 ecx
  0001e	ff 76 0c	 push	 DWORD PTR [esi+12]
  00021	e8 00 00 00 00	 call	 _lua_pushlstring
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
; Line 578
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN6@push_oneca:
; Line 568
  0002d	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@
  00036	ff 76 0c	 push	 DWORD PTR [esi+12]
  00039	e8 00 00 00 00	 call	 _luaL_error
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
; Line 578
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN7@push_oneca:
  00045	53		 push	 ebx
; Line 571
  00046	8b 5c fe 20	 mov	 ebx, DWORD PTR [esi+edi*8+32]
; Line 572
  0004a	83 fb ff	 cmp	 ebx, -1
  0004d	75 25		 jne	 SHORT $LN3@push_oneca
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BFKNEALP@unfinished?5capture?$AA@
  00054	ff 76 0c	 push	 DWORD PTR [esi+12]
  00057	e8 00 00 00 00	 call	 _luaL_error
  0005c	83 c4 08	 add	 esp, 8
$LN2@push_oneca:
; Line 576
  0005f	53		 push	 ebx
  00060	ff 74 fe 1c	 push	 DWORD PTR [esi+edi*8+28]
  00064	ff 76 0c	 push	 DWORD PTR [esi+12]
  00067	e8 00 00 00 00	 call	 _lua_pushlstring
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	5b		 pop	 ebx
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
; Line 578
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN3@push_oneca:
; Line 573
  00074	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00077	75 e6		 jne	 SHORT $LN2@push_oneca
; Line 574
  00079	8b 44 fe 1c	 mov	 eax, DWORD PTR [esi+edi*8+28]
  0007d	2b 06		 sub	 eax, DWORD PTR [esi]
  0007f	40		 inc	 eax
  00080	99		 cdq
  00081	52		 push	 edx
  00082	50		 push	 eax
  00083	ff 76 0c	 push	 DWORD PTR [esi+12]
  00086	e8 00 00 00 00	 call	 _lua_pushinteger
; Line 576
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008e	5b		 pop	 ebx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
; Line 578
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_push_onecapture ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lmemfind
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_l1$ = 12						; size = 4
_s2$ = 16						; size = 4
_l2$ = 20						; size = 4
_lmemfind PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 541
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 542
  00003	8b 4d 14	 mov	 ecx, DWORD PTR _l2$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 05		 jne	 SHORT $LN8@lmemfind
  0000a	8b 45 08	 mov	 eax, DWORD PTR _s1$[ebp]
; Line 559
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN8@lmemfind:
; Line 543
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _l1$[ebp]
  00012	3b c8		 cmp	 ecx, eax
  00014	76 04		 jbe	 SHORT $LN6@lmemfind
  00016	33 c0		 xor	 eax, eax
; Line 559
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN6@lmemfind:
  0001a	53		 push	 ebx
; Line 546
  0001b	49		 dec	 ecx
  0001c	56		 push	 esi
; Line 547
  0001d	2b c1		 sub	 eax, ecx
  0001f	89 4d 14	 mov	 DWORD PTR _l2$[ebp], ecx
  00022	57		 push	 edi
  00023	89 45 0c	 mov	 DWORD PTR _l1$[ebp], eax
; Line 548
  00026	74 7d		 je	 SHORT $LN3@lmemfind
  00028	8b 5d 08	 mov	 ebx, DWORD PTR _s1$[ebp]
  0002b	eb 03 8d 49 00	 npad	 5
$LL4@lmemfind:
  00030	8b 75 10	 mov	 esi, DWORD PTR _s2$[ebp]
  00033	50		 push	 eax
  00034	0f be 06	 movsx	 eax, BYTE PTR [esi]
  00037	50		 push	 eax
  00038	53		 push	 ebx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memchr
  0003f	8b f8		 mov	 edi, eax
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	85 ff		 test	 edi, edi
  00046	74 5d		 je	 SHORT $LN3@lmemfind
; Line 550
  00048	8b 4d 14	 mov	 ecx, DWORD PTR _l2$[ebp]
  0004b	47		 inc	 edi
  0004c	46		 inc	 esi
  0004d	8b d7		 mov	 edx, edi
  0004f	83 e9 04	 sub	 ecx, 4
  00052	72 11		 jb	 SHORT $LN17@lmemfind
$LL18@lmemfind:
  00054	8b 02		 mov	 eax, DWORD PTR [edx]
  00056	3b 06		 cmp	 eax, DWORD PTR [esi]
  00058	75 10		 jne	 SHORT $LN16@lmemfind
  0005a	83 c2 04	 add	 edx, 4
  0005d	83 c6 04	 add	 esi, 4
  00060	83 e9 04	 sub	 ecx, 4
  00063	73 ef		 jae	 SHORT $LL18@lmemfind
$LN17@lmemfind:
  00065	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00068	74 42		 je	 SHORT $LN15@lmemfind
$LN16@lmemfind:
  0006a	8a 02		 mov	 al, BYTE PTR [edx]
  0006c	3a 06		 cmp	 al, BYTE PTR [esi]
  0006e	75 27		 jne	 SHORT $LN19@lmemfind
  00070	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  00073	74 37		 je	 SHORT $LN15@lmemfind
  00075	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00078	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  0007b	75 1a		 jne	 SHORT $LN19@lmemfind
  0007d	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00080	74 2a		 je	 SHORT $LN15@lmemfind
  00082	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00085	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00088	75 0d		 jne	 SHORT $LN19@lmemfind
  0008a	83 f9 ff	 cmp	 ecx, -1
  0008d	74 1d		 je	 SHORT $LN15@lmemfind
  0008f	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00092	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00095	74 15		 je	 SHORT $LN15@lmemfind
$LN19@lmemfind:
; Line 553
  00097	8b 45 0c	 mov	 eax, DWORD PTR _l1$[ebp]
  0009a	2b df		 sub	 ebx, edi
  0009c	03 c3		 add	 eax, ebx
; Line 554
  0009e	8b df		 mov	 ebx, edi
  000a0	89 45 0c	 mov	 DWORD PTR _l1$[ebp], eax
  000a3	75 8b		 jne	 SHORT $LL4@lmemfind
$LN3@lmemfind:
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
; Line 557
  000a7	33 c0		 xor	 eax, eax
  000a9	5b		 pop	 ebx
; Line 559
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN15@lmemfind:
; Line 551
  000ac	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
; Line 559
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
_lmemfind ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _match_capture
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_s$ = 12						; size = 4
_l$ = 16						; size = 4
_match_capture PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 424
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 426
  00003	8b 45 10	 mov	 eax, DWORD PTR _l$[ebp]
  00006	83 c0 cf	 add	 eax, -49		; ffffffcfH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _ms$[ebp]
  0000e	57		 push	 edi
  0000f	78 0c		 js	 SHORT $LN5@match_capt
  00011	3b 46 18	 cmp	 eax, DWORD PTR [esi+24]
  00014	7d 07		 jge	 SHORT $LN5@match_capt
  00016	83 7c c6 20 ff	 cmp	 DWORD PTR [esi+eax*8+32], -1
  0001b	75 12		 jne	 SHORT $LN7@match_capt
$LN5@match_capt:
  0001d	40		 inc	 eax
  0001e	50		 push	 eax
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@
  00024	ff 76 0c	 push	 DWORD PTR [esi+12]
  00027	e8 00 00 00 00	 call	 _luaL_error
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@match_capt:
; Line 429
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	8b 5d 0c	 mov	 ebx, DWORD PTR _s$[ebp]
  00035	2b cb		 sub	 ecx, ebx
  00037	8b 7c c6 20	 mov	 edi, DWORD PTR [esi+eax*8+32]
  0003b	3b cf		 cmp	 ecx, edi
  0003d	72 5c		 jb	 SHORT $LN2@match_capt
  0003f	8b 4c c6 1c	 mov	 ecx, DWORD PTR [esi+eax*8+28]
  00043	8b d3		 mov	 edx, ebx
  00045	8b f7		 mov	 esi, edi
  00047	83 ee 04	 sub	 esi, 4
  0004a	72 15		 jb	 SHORT $LN11@match_capt
  0004c	8d 64 24 00	 npad	 4
$LL12@match_capt:
  00050	8b 01		 mov	 eax, DWORD PTR [ecx]
  00052	3b 02		 cmp	 eax, DWORD PTR [edx]
  00054	75 10		 jne	 SHORT $LN10@match_capt
  00056	83 c1 04	 add	 ecx, 4
  00059	83 c2 04	 add	 edx, 4
  0005c	83 ee 04	 sub	 esi, 4
  0005f	73 ef		 jae	 SHORT $LL12@match_capt
$LN11@match_capt:
  00061	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00064	74 2d		 je	 SHORT $LN9@match_capt
$LN10@match_capt:
  00066	8a 01		 mov	 al, BYTE PTR [ecx]
  00068	3a 02		 cmp	 al, BYTE PTR [edx]
  0006a	75 2f		 jne	 SHORT $LN2@match_capt
  0006c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0006f	74 22		 je	 SHORT $LN9@match_capt
  00071	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00074	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00077	75 22		 jne	 SHORT $LN2@match_capt
  00079	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0007c	74 15		 je	 SHORT $LN9@match_capt
  0007e	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00081	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  00084	75 15		 jne	 SHORT $LN2@match_capt
  00086	83 fe ff	 cmp	 esi, -1
  00089	74 08		 je	 SHORT $LN9@match_capt
  0008b	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  0008e	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00091	75 08		 jne	 SHORT $LN2@match_capt
$LN9@match_capt:
; Line 430
  00093	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
; Line 432
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
$LN2@match_capt:
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
; Line 431
  0009d	33 c0		 xor	 eax, eax
  0009f	5b		 pop	 ebx
; Line 432
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
_match_capture ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _end_capture
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_s$ = 12						; size = 4
_p$ = 16						; size = 4
_end_capture PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 414
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 415
  00004	8b 75 08	 mov	 esi, DWORD PTR _ms$[ebp]
  00007	57		 push	 edi
  00008	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0000b	48		 dec	 eax
  0000c	78 11		 js	 SHORT $LN5@end_captur
  0000e	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00011	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
$LL7@end_captur:
  00014	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  00017	74 16		 je	 SHORT $LN8@end_captur
  00019	83 e9 08	 sub	 ecx, 8
  0001c	48		 dec	 eax
  0001d	79 f5		 jns	 SHORT $LL7@end_captur
$LN5@end_captur:
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@ECNPHIBF@invalid?5pattern?5capture?$AA@
  00024	ff 76 0c	 push	 DWORD PTR [esi+12]
  00027	e8 00 00 00 00	 call	 _luaL_error
  0002c	83 c4 08	 add	 esp, 8
$LN8@end_captur:
; Line 417
  0002f	8b 55 0c	 mov	 edx, DWORD PTR _s$[ebp]
  00032	8d 3c c6	 lea	 edi, DWORD PTR [esi+eax*8]
; Line 418
  00035	ff 75 10	 push	 DWORD PTR _p$[ebp]
  00038	8b ca		 mov	 ecx, edx
  0003a	2b 4c c6 1c	 sub	 ecx, DWORD PTR [esi+eax*8+28]
  0003e	52		 push	 edx
  0003f	56		 push	 esi
  00040	89 4f 20	 mov	 DWORD PTR [edi+32], ecx
  00043	e8 00 00 00 00	 call	 _match
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	85 c0		 test	 eax, eax
  0004d	75 07		 jne	 SHORT $LN1@end_captur
; Line 419
  0004f	c7 47 20 ff ff
	ff ff		 mov	 DWORD PTR [edi+32], -1
$LN1@end_captur:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
; Line 421
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_end_capture ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _start_capture
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_s$ = 12						; size = 4
_p$ = 16						; size = 4
_what$ = 20						; size = 4
_start_capture PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 400
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 402
  00004	8b 75 08	 mov	 esi, DWORD PTR _ms$[ebp]
  00007	57		 push	 edi
  00008	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
; Line 403
  0000b	83 ff 20	 cmp	 edi, 32			; 00000020H
  0000e	7c 10		 jl	 SHORT $LN2@start_capt
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IMEAEJPD@too?5many?5captures?$AA@
  00015	ff 76 0c	 push	 DWORD PTR [esi+12]
  00018	e8 00 00 00 00	 call	 _luaL_error
  0001d	83 c4 08	 add	 esp, 8
$LN2@start_capt:
; Line 407
  00020	ff 75 10	 push	 DWORD PTR _p$[ebp]
  00023	8b 4d 0c	 mov	 ecx, DWORD PTR _s$[ebp]
  00026	8b 45 14	 mov	 eax, DWORD PTR _what$[ebp]
  00029	89 44 fe 20	 mov	 DWORD PTR [esi+edi*8+32], eax
  0002d	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00030	51		 push	 ecx
  00031	89 4c fe 1c	 mov	 DWORD PTR [esi+edi*8+28], ecx
  00035	56		 push	 esi
  00036	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00039	e8 00 00 00 00	 call	 _match
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	85 c0		 test	 eax, eax
  00043	75 03		 jne	 SHORT $LN1@start_capt
; Line 408
  00045	ff 4e 18	 dec	 DWORD PTR [esi+24]
$LN1@start_capt:
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
; Line 410
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_start_capture ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _min_expand
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_s$ = 12						; size = 4
_p$ = 16						; size = 4
_ep$ = 20						; size = 4
_min_expand PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 387
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 389
  00003	8b 45 14	 mov	 eax, DWORD PTR _ep$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	40		 inc	 eax
  0000c	57		 push	 edi
  0000d	8b 7d 08	 mov	 edi, DWORD PTR _ms$[ebp]
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 _match
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 390
  0001b	85 c0		 test	 eax, eax
  0001d	75 69		 jne	 SHORT $LN5@min_expand
  0001f	8b 5d 10	 mov	 ebx, DWORD PTR _p$[ebp]
$LL6@min_expand:
; Line 392
  00022	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
  00025	73 5f		 jae	 SHORT $LN2@min_expand
  00027	8a 0b		 mov	 cl, BYTE PTR [ebx]
  00029	0f b6 16	 movzx	 edx, BYTE PTR [esi]
  0002c	8a c1		 mov	 al, cl
  0002e	3c 25		 cmp	 al, 37			; 00000025H
  00030	74 25		 je	 SHORT $LN70@min_expand
  00032	3c 2e		 cmp	 al, 46			; 0000002eH
  00034	74 35		 je	 SHORT $LN82@min_expand
  00036	3c 5b		 cmp	 al, 91			; 0000005bH
  00038	74 0c		 je	 SHORT $LN69@min_expand
  0003a	0f b6 c1	 movzx	 eax, cl
  0003d	33 c9		 xor	 ecx, ecx
  0003f	3b c2		 cmp	 eax, edx
  00041	0f 94 c1	 sete	 cl
  00044	eb 21		 jmp	 SHORT $LN72@min_expand
$LN69@min_expand:
  00046	8b 45 14	 mov	 eax, DWORD PTR _ep$[ebp]
  00049	48		 dec	 eax
  0004a	50		 push	 eax
  0004b	53		 push	 ebx
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 _matchbracketclass
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	eb 0e		 jmp	 SHORT $LN84@min_expand
$LN70@min_expand:
  00057	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  0005b	50		 push	 eax
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _match_class
  00062	83 c4 08	 add	 esp, 8
$LN84@min_expand:
  00065	8b c8		 mov	 ecx, eax
$LN72@min_expand:
  00067	85 c9		 test	 ecx, ecx
  00069	74 1b		 je	 SHORT $LN2@min_expand
$LN82@min_expand:
; Line 389
  0006b	8b 4d 14	 mov	 ecx, DWORD PTR _ep$[ebp]
; Line 393
  0006e	46		 inc	 esi
  0006f	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00072	50		 push	 eax
  00073	56		 push	 esi
  00074	57		 push	 edi
  00075	e8 00 00 00 00	 call	 _match
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	85 c0		 test	 eax, eax
  0007f	74 a1		 je	 SHORT $LL6@min_expand
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
; Line 396
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
$LN2@min_expand:
; Line 394
  00086	33 c0		 xor	 eax, eax
$LN5@min_expand:
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
; Line 396
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_min_expand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _max_expand
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_s$ = 12						; size = 4
_p$ = 16						; size = 4
_ep$ = 20						; size = 4
_max_expand PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 372
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 373
  00004	8b 5d 10	 mov	 ebx, DWORD PTR _p$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _s$[ebp]
  0000c	33 f6		 xor	 esi, esi
  0000e	8b ff		 npad	 2
$LL5@max_expand:
; Line 374
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _ms$[ebp]
  00013	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  00016	73 4b		 jae	 SHORT $LN93@max_expand
  00018	8a 0b		 mov	 cl, BYTE PTR [ebx]
  0001a	0f b6 17	 movzx	 edx, BYTE PTR [edi]
  0001d	8a c1		 mov	 al, cl
  0001f	3c 25		 cmp	 al, 37			; 00000025H
  00021	74 25		 je	 SHORT $LN10@max_expand
  00023	3c 2e		 cmp	 al, 46			; 0000002eH
  00025	74 35		 je	 SHORT $LN92@max_expand
  00027	3c 5b		 cmp	 al, 91			; 0000005bH
  00029	74 0c		 je	 SHORT $LN9@max_expand
  0002b	0f b6 c1	 movzx	 eax, cl
  0002e	33 c9		 xor	 ecx, ecx
  00030	3b c2		 cmp	 eax, edx
  00032	0f 94 c1	 sete	 cl
  00035	eb 21		 jmp	 SHORT $LN12@max_expand
$LN9@max_expand:
  00037	8b 45 14	 mov	 eax, DWORD PTR _ep$[ebp]
  0003a	48		 dec	 eax
  0003b	50		 push	 eax
  0003c	53		 push	 ebx
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 _matchbracketclass
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	eb 0e		 jmp	 SHORT $LN95@max_expand
$LN10@max_expand:
  00048	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  0004c	50		 push	 eax
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 _match_class
  00053	83 c4 08	 add	 esp, 8
$LN95@max_expand:
  00056	8b c8		 mov	 ecx, eax
$LN12@max_expand:
  00058	85 c9		 test	 ecx, ecx
  0005a	74 04		 je	 SHORT $LN94@max_expand
$LN92@max_expand:
; Line 375
  0005c	46		 inc	 esi
  0005d	47		 inc	 edi
  0005e	eb b0		 jmp	 SHORT $LL5@max_expand
$LN94@max_expand:
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _ms$[ebp]
$LN93@max_expand:
; Line 377
  00063	85 f6		 test	 esi, esi
  00065	78 23		 js	 SHORT $LN2@max_expand
  00067	8b 7d 14	 mov	 edi, DWORD PTR _ep$[ebp]
  0006a	47		 inc	 edi
  0006b	eb 03 8d 49 00	 npad	 5
$LL3@max_expand:
; Line 378
  00070	8b 45 0c	 mov	 eax, DWORD PTR _s$[ebp]
  00073	57		 push	 edi
  00074	03 c6		 add	 eax, esi
  00076	50		 push	 eax
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 _match
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 379
  00080	85 c0		 test	 eax, eax
  00082	75 08		 jne	 SHORT $LN6@max_expand
; Line 380
  00084	4e		 dec	 esi
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _ms$[ebp]
  00088	79 e6		 jns	 SHORT $LL3@max_expand
$LN2@max_expand:
; Line 382
  0008a	33 c0		 xor	 eax, eax
$LN6@max_expand:
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
; Line 383
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_max_expand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _matchbalance
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_s$ = 12						; size = 4
_p$ = 16						; size = 4
_matchbalance PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 352
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 353
  00004	8b 75 08	 mov	 esi, DWORD PTR _ms$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR _p$[ebp]
  0000b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000e	48		 dec	 eax
  0000f	3b f8		 cmp	 edi, eax
  00011	72 10		 jb	 SHORT $LN9@matchbalan
; Line 354
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@FCNHBCLO@malformed?5pattern?5?$CImissing?5argum@
  00018	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001b	e8 00 00 00 00	 call	 _luaL_error
  00020	83 c4 08	 add	 esp, 8
$LN9@matchbalan:
; Line 355
  00023	8b 45 0c	 mov	 eax, DWORD PTR _s$[ebp]
  00026	8a 0f		 mov	 cl, BYTE PTR [edi]
  00028	38 08		 cmp	 BYTE PTR [eax], cl
  0002a	74 06		 je	 SHORT $LN8@matchbalan
  0002c	5f		 pop	 edi
  0002d	33 c0		 xor	 eax, eax
  0002f	5e		 pop	 esi
; Line 368
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN8@matchbalan:
  00032	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
; Line 360
  00035	40		 inc	 eax
  00036	0f be 7f 01	 movsx	 edi, BYTE PTR [edi+1]
  0003a	53		 push	 ebx
  0003b	0f be d9	 movsx	 ebx, cl
  0003e	b9 01 00 00 00	 mov	 ecx, 1
  00043	3b c6		 cmp	 eax, esi
  00045	73 1a		 jae	 SHORT $LN16@matchbalan
$LL6@matchbalan:
; Line 361
  00047	0f be 10	 movsx	 edx, BYTE PTR [eax]
  0004a	3b d7		 cmp	 edx, edi
  0004c	75 09		 jne	 SHORT $LN4@matchbalan
; Line 362
  0004e	49		 dec	 ecx
  0004f	75 0b		 jne	 SHORT $LN1@matchbalan
  00051	5b		 pop	 ebx
  00052	5f		 pop	 edi
  00053	40		 inc	 eax
  00054	5e		 pop	 esi
; Line 368
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN4@matchbalan:
; Line 364
  00057	3b d3		 cmp	 edx, ebx
  00059	75 01		 jne	 SHORT $LN1@matchbalan
  0005b	41		 inc	 ecx
$LN1@matchbalan:
; Line 360
  0005c	40		 inc	 eax
  0005d	3b c6		 cmp	 eax, esi
  0005f	72 e6		 jb	 SHORT $LL6@matchbalan
$LN16@matchbalan:
  00061	5b		 pop	 ebx
  00062	5f		 pop	 edi
; Line 367
  00063	33 c0		 xor	 eax, eax
  00065	5e		 pop	 esi
; Line 368
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_matchbalance ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _singlematch
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_s$ = 12						; size = 4
_p$ = 16						; size = 4
_ep$ = 20						; size = 4
_singlematch PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 336
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 337
  00003	8b 45 08	 mov	 eax, DWORD PTR _ms$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _s$[ebp]
  00009	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0000c	72 04		 jb	 SHORT $LN8@singlematc
; Line 338
  0000e	33 c0		 xor	 eax, eax
; Line 348
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
$LN8@singlematc:
; Line 340
  00012	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
; Line 341
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _p$[ebp]
  00018	53		 push	 ebx
  00019	8a 19		 mov	 bl, BYTE PTR [ecx]
  0001b	8a c3		 mov	 al, bl
  0001d	3c 25		 cmp	 al, 37			; 00000025H
  0001f	74 2f		 je	 SHORT $LN3@singlematc
  00021	3c 2e		 cmp	 al, 46			; 0000002eH
  00023	74 23		 je	 SHORT $LN4@singlematc
  00025	3c 5b		 cmp	 al, 91			; 0000005bH
  00027	74 0d		 je	 SHORT $LN2@singlematc
; Line 345
  00029	0f b6 cb	 movzx	 ecx, bl
  0002c	33 c0		 xor	 eax, eax
  0002e	3b ca		 cmp	 ecx, edx
  00030	5b		 pop	 ebx
  00031	0f 94 c0	 sete	 al
; Line 348
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN2@singlematc:
; Line 344
  00036	8b 45 14	 mov	 eax, DWORD PTR _ep$[ebp]
  00039	48		 dec	 eax
  0003a	50		 push	 eax
  0003b	51		 push	 ecx
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _matchbracketclass
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	5b		 pop	 ebx
; Line 348
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN4@singlematc:
; Line 342
  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	5b		 pop	 ebx
; Line 348
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN3@singlematc:
; Line 343
  00050	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  00054	50		 push	 eax
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 _match_class
  0005b	83 c4 08	 add	 esp, 8
  0005e	5b		 pop	 ebx
; Line 348
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_singlematch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _matchbracketclass
_TEXT	SEGMENT
_sig$1$ = -4						; size = 4
_c$ = 8							; size = 4
_cl$1$ = 12						; size = 4
_p$ = 12						; size = 4
_ec$ = 16						; size = 4
_matchbracketclass PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 312
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; Line 314
  00006	8b 75 0c	 mov	 esi, DWORD PTR _p$[ebp]
  00009	80 7e 01 5e	 cmp	 BYTE PTR [esi+1], 94	; 0000005eH
  0000d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00010	57		 push	 edi
  00011	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _sig$1$[ebp], 1
  00018	75 09		 jne	 SHORT $LN31@matchbrack
; Line 315
  0001a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _sig$1$[ebp], 0
; Line 316
  00021	8b f0		 mov	 esi, eax
$LN31@matchbrack:
; Line 318
  00023	8b 4d 10	 mov	 ecx, DWORD PTR _ec$[ebp]
  00026	46		 inc	 esi
  00027	3b f1		 cmp	 esi, ecx
  00029	0f 83 3f 01 00
	00		 jae	 $LN8@matchbrack
  0002f	8b 5d 08	 mov	 ebx, DWORD PTR _c$[ebp]
  00032	8d 7e 02	 lea	 edi, DWORD PTR [esi+2]
$LL9@matchbrack:
; Line 319
  00035	8a 06		 mov	 al, BYTE PTR [esi]
  00037	3c 25		 cmp	 al, 37			; 00000025H
  00039	0f 85 f6 00 00
	00		 jne	 $LN7@matchbrack
; Line 321
  0003f	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00043	46		 inc	 esi
  00044	50		 push	 eax
  00045	47		 inc	 edi
  00046	89 45 0c	 mov	 DWORD PTR _cl$1$[ebp], eax
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tolower
  0004f	83 c0 9f	 add	 eax, -97		; ffffff9fH
  00052	83 c4 04	 add	 esp, 4
  00055	83 f8 19	 cmp	 eax, 25			; 00000019H
  00058	0f 87 c0 00 00
	00		 ja	 $LN13@matchbrack
  0005e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN38@matchbrack[eax]
  00065	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN40@matchbrack[eax*4]
$LN24@matchbrack:
  0006c	53		 push	 ebx
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isalpha
  00073	83 c4 04	 add	 esp, 4
  00076	8b d8		 mov	 ebx, eax
  00078	e9 88 00 00 00	 jmp	 $LN25@matchbrack
$LN23@matchbrack:
  0007d	53		 push	 ebx
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__iscntrl
  00084	83 c4 04	 add	 esp, 4
  00087	8b d8		 mov	 ebx, eax
  00089	eb 7a		 jmp	 SHORT $LN25@matchbrack
$LN22@matchbrack:
  0008b	53		 push	 ebx
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isdigit
  00092	83 c4 04	 add	 esp, 4
  00095	8b d8		 mov	 ebx, eax
  00097	eb 6c		 jmp	 SHORT $LN25@matchbrack
$LN21@matchbrack:
  00099	53		 push	 ebx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isgraph
  000a0	83 c4 04	 add	 esp, 4
  000a3	8b d8		 mov	 ebx, eax
  000a5	eb 5e		 jmp	 SHORT $LN25@matchbrack
$LN20@matchbrack:
  000a7	53		 push	 ebx
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__islower
  000ae	83 c4 04	 add	 esp, 4
  000b1	8b d8		 mov	 ebx, eax
  000b3	eb 50		 jmp	 SHORT $LN25@matchbrack
$LN19@matchbrack:
  000b5	53		 push	 ebx
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ispunct
  000bc	83 c4 04	 add	 esp, 4
  000bf	8b d8		 mov	 ebx, eax
  000c1	eb 42		 jmp	 SHORT $LN25@matchbrack
$LN18@matchbrack:
  000c3	53		 push	 ebx
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isspace
  000ca	83 c4 04	 add	 esp, 4
  000cd	8b d8		 mov	 ebx, eax
  000cf	eb 34		 jmp	 SHORT $LN25@matchbrack
$LN17@matchbrack:
  000d1	53		 push	 ebx
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isupper
  000d8	83 c4 04	 add	 esp, 4
  000db	8b d8		 mov	 ebx, eax
  000dd	eb 26		 jmp	 SHORT $LN25@matchbrack
$LN16@matchbrack:
  000df	53		 push	 ebx
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isalnum
  000e6	83 c4 04	 add	 esp, 4
  000e9	8b d8		 mov	 ebx, eax
  000eb	eb 18		 jmp	 SHORT $LN25@matchbrack
$LN15@matchbrack:
  000ed	53		 push	 ebx
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isxdigit
  000f4	83 c4 04	 add	 esp, 4
  000f7	8b d8		 mov	 ebx, eax
  000f9	eb 0a		 jmp	 SHORT $LN25@matchbrack
$LN14@matchbrack:
  000fb	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  000fe	33 db		 xor	 ebx, ebx
  00100	85 c0		 test	 eax, eax
  00102	0f 94 c3	 sete	 bl
$LN25@matchbrack:
  00105	ff 75 0c	 push	 DWORD PTR _cl$1$[ebp]
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__islower
  0010e	83 c4 04	 add	 esp, 4
  00111	85 c0		 test	 eax, eax
  00113	75 14		 jne	 SHORT $LN27@matchbrack
  00115	85 db		 test	 ebx, ebx
  00117	0f 94 c0	 sete	 al
  0011a	8b d8		 mov	 ebx, eax
  0011c	eb 0b		 jmp	 SHORT $LN27@matchbrack
$LN13@matchbrack:
  0011e	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  00121	33 db		 xor	 ebx, ebx
  00123	39 45 0c	 cmp	 DWORD PTR _cl$1$[ebp], eax
  00126	0f 94 c3	 sete	 bl
$LN27@matchbrack:
  00129	85 db		 test	 ebx, ebx
  0012b	75 26		 jne	 SHORT $LN32@matchbrack
; Line 324
  0012d	8b 5d 08	 mov	 ebx, DWORD PTR _c$[ebp]
  00130	8b 4d 10	 mov	 ecx, DWORD PTR _ec$[ebp]
  00133	eb 2f		 jmp	 SHORT $LN1@matchbrack
$LN7@matchbrack:
  00135	80 7e 01 2d	 cmp	 BYTE PTR [esi+1], 45	; 0000002dH
  00139	75 22		 jne	 SHORT $LN4@matchbrack
  0013b	3b f9		 cmp	 edi, ecx
  0013d	73 1e		 jae	 SHORT $LN4@matchbrack
; Line 326
  0013f	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00142	83 c6 02	 add	 esi, 2
  00145	83 c7 02	 add	 edi, 2
  00148	3b c3		 cmp	 eax, ebx
  0014a	7f 18		 jg	 SHORT $LN1@matchbrack
  0014c	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0014f	3b d8		 cmp	 ebx, eax
  00151	7f 11		 jg	 SHORT $LN1@matchbrack
$LN32@matchbrack:
; Line 322
  00153	8b 45 fc	 mov	 eax, DWORD PTR _sig$1$[ebp]
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx
; Line 332
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c3		 ret	 0
$LN4@matchbrack:
; Line 329
  0015d	0f b6 c0	 movzx	 eax, al
  00160	3b c3		 cmp	 eax, ebx
  00162	74 ef		 je	 SHORT $LN32@matchbrack
$LN1@matchbrack:
; Line 318
  00164	46		 inc	 esi
  00165	47		 inc	 edi
  00166	3b f1		 cmp	 esi, ecx
  00168	0f 82 c7 fe ff
	ff		 jb	 $LL9@matchbrack
$LN8@matchbrack:
; Line 331
  0016e	33 c0		 xor	 eax, eax
  00170	39 45 fc	 cmp	 DWORD PTR _sig$1$[ebp], eax
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	0f 94 c0	 sete	 al
  00178	5b		 pop	 ebx
; Line 332
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c3		 ret	 0
  0017d	8d 49 00	 npad	 3
$LN40@matchbrack:
  00180	00 00 00 00	 DD	 $LN24@matchbrack
  00184	00 00 00 00	 DD	 $LN23@matchbrack
  00188	00 00 00 00	 DD	 $LN22@matchbrack
  0018c	00 00 00 00	 DD	 $LN21@matchbrack
  00190	00 00 00 00	 DD	 $LN20@matchbrack
  00194	00 00 00 00	 DD	 $LN19@matchbrack
  00198	00 00 00 00	 DD	 $LN18@matchbrack
  0019c	00 00 00 00	 DD	 $LN17@matchbrack
  001a0	00 00 00 00	 DD	 $LN16@matchbrack
  001a4	00 00 00 00	 DD	 $LN15@matchbrack
  001a8	00 00 00 00	 DD	 $LN14@matchbrack
  001ac	00 00 00 00	 DD	 $LN13@matchbrack
$LN38@matchbrack:
  001b0	00		 DB	 0
  001b1	0b		 DB	 11			; 0000000bH
  001b2	01		 DB	 1
  001b3	02		 DB	 2
  001b4	0b		 DB	 11			; 0000000bH
  001b5	0b		 DB	 11			; 0000000bH
  001b6	03		 DB	 3
  001b7	0b		 DB	 11			; 0000000bH
  001b8	0b		 DB	 11			; 0000000bH
  001b9	0b		 DB	 11			; 0000000bH
  001ba	0b		 DB	 11			; 0000000bH
  001bb	04		 DB	 4
  001bc	0b		 DB	 11			; 0000000bH
  001bd	0b		 DB	 11			; 0000000bH
  001be	0b		 DB	 11			; 0000000bH
  001bf	05		 DB	 5
  001c0	0b		 DB	 11			; 0000000bH
  001c1	0b		 DB	 11			; 0000000bH
  001c2	06		 DB	 6
  001c3	0b		 DB	 11			; 0000000bH
  001c4	07		 DB	 7
  001c5	0b		 DB	 11			; 0000000bH
  001c6	08		 DB	 8
  001c7	09		 DB	 9
  001c8	0b		 DB	 11			; 0000000bH
  001c9	0a		 DB	 10			; 0000000aH
_matchbracketclass ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _match_class
_TEXT	SEGMENT
_c$ = 8							; size = 4
_cl$ = 12						; size = 4
_match_class PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 292
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 294
  00005	8b 75 0c	 mov	 esi, DWORD PTR _cl$[ebp]
  00008	56		 push	 esi
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tolower
  0000f	83 c0 9f	 add	 eax, -97		; ffffff9fH
  00012	83 c4 04	 add	 esp, 4
  00015	83 f8 19	 cmp	 eax, 25			; 00000019H
  00018	0f 87 d7 00 00
	00		 ja	 $LN1@match_clas
  0001e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN19@match_clas[eax]
  00025	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN21@match_clas[eax*4]
$LN12@match_clas:
; Line 295
  0002c	ff 75 08	 push	 DWORD PTR _c$[ebp]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isalpha
  00035	83 c4 04	 add	 esp, 4
  00038	8b d8		 mov	 ebx, eax
  0003a	e9 9b 00 00 00	 jmp	 $LN13@match_clas
$LN11@match_clas:
; Line 296
  0003f	ff 75 08	 push	 DWORD PTR _c$[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__iscntrl
  00048	83 c4 04	 add	 esp, 4
  0004b	8b d8		 mov	 ebx, eax
  0004d	e9 88 00 00 00	 jmp	 $LN13@match_clas
$LN10@match_clas:
; Line 297
  00052	ff 75 08	 push	 DWORD PTR _c$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isdigit
  0005b	83 c4 04	 add	 esp, 4
  0005e	8b d8		 mov	 ebx, eax
  00060	eb 78		 jmp	 SHORT $LN13@match_clas
$LN9@match_clas:
; Line 298
  00062	ff 75 08	 push	 DWORD PTR _c$[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isgraph
  0006b	83 c4 04	 add	 esp, 4
  0006e	8b d8		 mov	 ebx, eax
  00070	eb 68		 jmp	 SHORT $LN13@match_clas
$LN8@match_clas:
; Line 299
  00072	ff 75 08	 push	 DWORD PTR _c$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__islower
  0007b	83 c4 04	 add	 esp, 4
  0007e	8b d8		 mov	 ebx, eax
  00080	eb 58		 jmp	 SHORT $LN13@match_clas
$LN7@match_clas:
; Line 300
  00082	ff 75 08	 push	 DWORD PTR _c$[ebp]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ispunct
  0008b	83 c4 04	 add	 esp, 4
  0008e	8b d8		 mov	 ebx, eax
  00090	eb 48		 jmp	 SHORT $LN13@match_clas
$LN6@match_clas:
; Line 301
  00092	ff 75 08	 push	 DWORD PTR _c$[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isspace
  0009b	83 c4 04	 add	 esp, 4
  0009e	8b d8		 mov	 ebx, eax
  000a0	eb 38		 jmp	 SHORT $LN13@match_clas
$LN5@match_clas:
; Line 302
  000a2	ff 75 08	 push	 DWORD PTR _c$[ebp]
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isupper
  000ab	83 c4 04	 add	 esp, 4
  000ae	8b d8		 mov	 ebx, eax
  000b0	eb 28		 jmp	 SHORT $LN13@match_clas
$LN4@match_clas:
; Line 303
  000b2	ff 75 08	 push	 DWORD PTR _c$[ebp]
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isalnum
  000bb	83 c4 04	 add	 esp, 4
  000be	8b d8		 mov	 ebx, eax
  000c0	eb 18		 jmp	 SHORT $LN13@match_clas
$LN3@match_clas:
; Line 304
  000c2	ff 75 08	 push	 DWORD PTR _c$[ebp]
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isxdigit
  000cb	83 c4 04	 add	 esp, 4
  000ce	8b d8		 mov	 ebx, eax
  000d0	eb 08		 jmp	 SHORT $LN13@match_clas
$LN2@match_clas:
; Line 305
  000d2	33 db		 xor	 ebx, ebx
  000d4	39 5d 08	 cmp	 DWORD PTR _c$[ebp], ebx
  000d7	0f 94 c3	 sete	 bl
$LN13@match_clas:
; Line 308
  000da	56		 push	 esi
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__islower
  000e1	83 c4 04	 add	 esp, 4
  000e4	85 c0		 test	 eax, eax
  000e6	75 07		 jne	 SHORT $LN18@match_clas
  000e8	85 db		 test	 ebx, ebx
  000ea	0f 94 c0	 sete	 al
  000ed	8b d8		 mov	 ebx, eax
$LN18@match_clas:
  000ef	5e		 pop	 esi
  000f0	8b c3		 mov	 eax, ebx
  000f2	5b		 pop	 ebx
; Line 309
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
$LN1@match_clas:
; Line 306
  000f5	33 c0		 xor	 eax, eax
  000f7	3b 75 08	 cmp	 esi, DWORD PTR _c$[ebp]
  000fa	5e		 pop	 esi
  000fb	0f 94 c0	 sete	 al
  000fe	5b		 pop	 ebx
; Line 309
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
  00101	8d 49 00	 npad	 3
$LN21@match_clas:
  00104	00 00 00 00	 DD	 $LN12@match_clas
  00108	00 00 00 00	 DD	 $LN11@match_clas
  0010c	00 00 00 00	 DD	 $LN10@match_clas
  00110	00 00 00 00	 DD	 $LN9@match_clas
  00114	00 00 00 00	 DD	 $LN8@match_clas
  00118	00 00 00 00	 DD	 $LN7@match_clas
  0011c	00 00 00 00	 DD	 $LN6@match_clas
  00120	00 00 00 00	 DD	 $LN5@match_clas
  00124	00 00 00 00	 DD	 $LN4@match_clas
  00128	00 00 00 00	 DD	 $LN3@match_clas
  0012c	00 00 00 00	 DD	 $LN2@match_clas
  00130	00 00 00 00	 DD	 $LN1@match_clas
$LN19@match_clas:
  00134	00		 DB	 0
  00135	0b		 DB	 11			; 0000000bH
  00136	01		 DB	 1
  00137	02		 DB	 2
  00138	0b		 DB	 11			; 0000000bH
  00139	0b		 DB	 11			; 0000000bH
  0013a	03		 DB	 3
  0013b	0b		 DB	 11			; 0000000bH
  0013c	0b		 DB	 11			; 0000000bH
  0013d	0b		 DB	 11			; 0000000bH
  0013e	0b		 DB	 11			; 0000000bH
  0013f	04		 DB	 4
  00140	0b		 DB	 11			; 0000000bH
  00141	0b		 DB	 11			; 0000000bH
  00142	0b		 DB	 11			; 0000000bH
  00143	05		 DB	 5
  00144	0b		 DB	 11			; 0000000bH
  00145	0b		 DB	 11			; 0000000bH
  00146	06		 DB	 6
  00147	0b		 DB	 11			; 0000000bH
  00148	07		 DB	 7
  00149	0b		 DB	 11			; 0000000bH
  0014a	08		 DB	 8
  0014b	09		 DB	 9
  0014c	0b		 DB	 11			; 0000000bH
  0014d	0a		 DB	 10			; 0000000aH
_match_class ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _classend
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_p$ = 12						; size = 4
_classend PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 268
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 269
  00004	8b 75 0c	 mov	 esi, DWORD PTR _p$[ebp]
  00007	0f be 06	 movsx	 eax, BYTE PTR [esi]
  0000a	46		 inc	 esi
  0000b	83 f8 25	 cmp	 eax, 37			; 00000025H
  0000e	74 42		 je	 SHORT $LN10@classend
  00010	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00013	74 05		 je	 SHORT $LN8@classend
; Line 286
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
; Line 289
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN8@classend:
; Line 276
  0001a	80 3e 5e	 cmp	 BYTE PTR [esi], 94	; 0000005eH
  0001d	75 01		 jne	 SHORT $LN17@classend
  0001f	46		 inc	 esi
$LN17@classend:
  00020	57		 push	 edi
  00021	8b 7d 08	 mov	 edi, DWORD PTR _ms$[ebp]
$LL6@classend:
; Line 278
  00024	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00027	75 10		 jne	 SHORT $LN3@classend
; Line 279
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CFGACOGB@malformed?5pattern?5?$CImissing?5?8?$FN?8?$CJ?$AA@
  0002e	ff 77 0c	 push	 DWORD PTR [edi+12]
  00031	e8 00 00 00 00	 call	 _luaL_error
  00036	83 c4 08	 add	 esp, 8
$LN3@classend:
; Line 280
  00039	8a 06		 mov	 al, BYTE PTR [esi]
  0003b	46		 inc	 esi
  0003c	3c 25		 cmp	 al, 37			; 00000025H
  0003e	75 06		 jne	 SHORT $LN5@classend
  00040	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00043	73 01		 jae	 SHORT $LN5@classend
; Line 281
  00045	46		 inc	 esi
$LN5@classend:
; Line 282
  00046	80 3e 5d	 cmp	 BYTE PTR [esi], 93	; 0000005dH
  00049	75 d9		 jne	 SHORT $LL6@classend
; Line 273
  0004b	5f		 pop	 edi
  0004c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0004f	5e		 pop	 esi
; Line 289
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN10@classend:
; Line 271
  00052	8b 45 08	 mov	 eax, DWORD PTR _ms$[ebp]
  00055	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00058	75 10		 jne	 SHORT $LN9@classend
; Line 272
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@PLJBIEHA@malformed?5pattern?5?$CIends?5with?5?8?$CF?$CF@
  0005f	ff 70 0c	 push	 DWORD PTR [eax+12]
  00062	e8 00 00 00 00	 call	 _luaL_error
  00067	83 c4 08	 add	 esp, 8
$LN9@classend:
; Line 273
  0006a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0006d	5e		 pop	 esi
; Line 289
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_classend ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _capture_to_close
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_capture_to_close PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 260
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 262
  00003	8b 55 08	 mov	 edx, DWORD PTR _ms$[ebp]
  00006	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00009	48		 dec	 eax
  0000a	78 11		 js	 SHORT $LN2@capture_to
; Line 261
  0000c	8d 4a 20	 lea	 ecx, DWORD PTR [edx+32]
  0000f	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
$LL4@capture_to:
; Line 263
  00012	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  00015	74 16		 je	 SHORT $LN5@capture_to
; Line 262
  00017	83 e9 08	 sub	 ecx, 8
  0001a	48		 dec	 eax
  0001b	79 f5		 jns	 SHORT $LL4@capture_to
$LN2@capture_to:
; Line 264
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@ECNPHIBF@invalid?5pattern?5capture?$AA@
  00022	ff 72 0c	 push	 DWORD PTR [edx+12]
  00025	e8 00 00 00 00	 call	 _luaL_error
  0002a	83 c4 08	 add	 esp, 8
$LN5@capture_to:
; Line 265
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
_capture_to_close ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _check_capture
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_l$ = 12						; size = 4
_check_capture PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 252
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 253
  00003	8b 45 0c	 mov	 eax, DWORD PTR _l$[ebp]
  00006	83 e8 31	 sub	 eax, 49			; 00000031H
; Line 254
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ms$[ebp]
  0000c	78 0c		 js	 SHORT $LN1@check_capt
  0000e	3b 41 18	 cmp	 eax, DWORD PTR [ecx+24]
  00011	7d 07		 jge	 SHORT $LN1@check_capt
  00013	83 7c c1 20 ff	 cmp	 DWORD PTR [ecx+eax*8+32], -1
  00018	75 12		 jne	 SHORT $LN3@check_capt
$LN1@check_capt:
; Line 255
  0001a	40		 inc	 eax
  0001b	50		 push	 eax
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@
  00021	ff 71 0c	 push	 DWORD PTR [ecx+12]
  00024	e8 00 00 00 00	 call	 _luaL_error
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@check_capt:
; Line 257
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_check_capture ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _match
_TEXT	SEGMENT
_ep$1$ = 8						; size = 4
_ep$1$ = 8						; size = 4
_ms$ = 8						; size = 4
tv433 = 12						; size = 4
_s$ = 12						; size = 4
tv438 = 15						; size = 1
_c$1$ = 16						; size = 4
_p$ = 16						; size = 4
_match	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 435
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 436
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _ms$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0000c	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0000f	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  00012	85 c9		 test	 ecx, ecx
  00014	75 10		 jne	 SHORT $LN57@match
; Line 437
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LPFFPFJG@pattern?5too?5complex?$AA@
  0001b	ff 73 0c	 push	 DWORD PTR [ebx+12]
  0001e	e8 00 00 00 00	 call	 _luaL_error
  00023	83 c4 08	 add	 esp, 8
$LN57@match:
; Line 439
  00026	8b 75 10	 mov	 esi, DWORD PTR _p$[ebp]
  00029	8b 7d 0c	 mov	 edi, DWORD PTR _s$[ebp]
  0002c	3b 73 08	 cmp	 esi, DWORD PTR [ebx+8]
  0002f	0f 84 6a 02 00
	00		 je	 $LN63@match
$init$72:
; Line 440
  00035	0f be 06	 movsx	 eax, BYTE PTR [esi]
  00038	83 c0 dc	 add	 eax, -36		; ffffffdcH
  0003b	83 f8 05	 cmp	 eax, 5
  0003e	77 13		 ja	 SHORT $dflt$73
  00040	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN69@match[eax*4]
$LN29@match:
; Line 453
  00047	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0004a	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  0004d	0f 84 b9 01 00
	00		 je	 $LN28@match
$dflt$73:
; Line 495
  00053	56		 push	 esi
  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 _classend
  0005a	83 c4 08	 add	 esp, 8
  0005d	8b c8		 mov	 ecx, eax
  0005f	89 4d 08	 mov	 DWORD PTR _ep$1$[ebp], ecx
; Line 497
  00062	3b 7b 04	 cmp	 edi, DWORD PTR [ebx+4]
  00065	0f 83 79 01 00
	00		 jae	 $LN62@match
  0006b	8a 06		 mov	 al, BYTE PTR [esi]
  0006d	0f b6 17	 movzx	 edx, BYTE PTR [edi]
  00070	89 55 10	 mov	 DWORD PTR _c$1$[ebp], edx
  00073	88 45 0f	 mov	 BYTE PTR tv438[ebp], al
  00076	3c 25		 cmp	 al, 37			; 00000025H
  00078	0f 84 f6 00 00
	00		 je	 $LN44@match
  0007e	3c 2e		 cmp	 al, 46			; 0000002eH
  00080	0f 84 05 01 00
	00		 je	 $LN15@match
  00086	3c 5b		 cmp	 al, 91			; 0000005bH
  00088	0f 84 d6 00 00
	00		 je	 $LN43@match
  0008e	0f b6 c0	 movzx	 eax, al
  00091	33 d2		 xor	 edx, edx
  00093	3b 45 10	 cmp	 eax, DWORD PTR _c$1$[ebp]
  00096	0f 94 c2	 sete	 dl
  00099	e9 e9 00 00 00	 jmp	 $LN46@match
$LN27@match:
; Line 459
  0009e	8a 4e 01	 mov	 cl, BYTE PTR [esi+1]
  000a1	0f be c1	 movsx	 eax, cl
  000a4	83 c0 d0	 add	 eax, -48		; ffffffd0H
  000a7	83 f8 36	 cmp	 eax, 54			; 00000036H
  000aa	77 a7		 ja	 SHORT $dflt$73
  000ac	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN64@match[eax]
  000b3	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN70@match[eax*4]
$LN24@match:
; Line 461
  000ba	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  000bd	50		 push	 eax
  000be	57		 push	 edi
  000bf	53		 push	 ebx
  000c0	e8 00 00 00 00	 call	 _matchbalance
  000c5	8b f8		 mov	 edi, eax
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 462
  000ca	85 ff		 test	 edi, edi
  000cc	0f 84 cd 01 00
	00		 je	 $LN63@match
; Line 463
  000d2	83 c6 04	 add	 esi, 4
  000d5	e9 1f 01 00 00	 jmp	 $LN59@match
$LN22@match:
; Line 469
  000da	83 c6 02	 add	 esi, 2
; Line 470
  000dd	80 3e 5b	 cmp	 BYTE PTR [esi], 91	; 0000005bH
  000e0	74 10		 je	 SHORT $LN21@match
; Line 471
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LOJJMDBH@missing?5?8?$FL?8?5after?5?8?$CF?$CFf?8?5in?5patte@
  000e7	ff 73 0c	 push	 DWORD PTR [ebx+12]
  000ea	e8 00 00 00 00	 call	 _luaL_error
  000ef	83 c4 08	 add	 esp, 8
$LN21@match:
; Line 472
  000f2	56		 push	 esi
  000f3	53		 push	 ebx
  000f4	e8 00 00 00 00	 call	 _classend
  000f9	83 c4 08	 add	 esp, 8
  000fc	89 45 08	 mov	 DWORD PTR _ep$1$[ebp], eax
; Line 473
  000ff	3b 3b		 cmp	 edi, DWORD PTR [ebx]
  00101	75 04		 jne	 SHORT $LN40@match
  00103	32 c9		 xor	 cl, cl
  00105	eb 03		 jmp	 SHORT $LN41@match
$LN40@match:
  00107	8a 4f ff	 mov	 cl, BYTE PTR [edi-1]
$LN41@match:
; Line 475
  0010a	48		 dec	 eax
  0010b	50		 push	 eax
  0010c	89 45 0c	 mov	 DWORD PTR tv433[ebp], eax
  0010f	0f b6 c1	 movzx	 eax, cl
  00112	56		 push	 esi
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 _matchbracketclass
  00119	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011c	85 c0		 test	 eax, eax
  0011e	0f 85 79 01 00
	00		 jne	 $LN14@match
  00124	ff 75 0c	 push	 DWORD PTR tv433[ebp]
  00127	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0012a	56		 push	 esi
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 _matchbracketclass
  00131	83 c4 0c	 add	 esp, 12			; 0000000cH
  00134	85 c0		 test	 eax, eax
  00136	0f 84 61 01 00
	00		 je	 $LN14@match
; Line 476
  0013c	8b 75 08	 mov	 esi, DWORD PTR _ep$1$[ebp]
  0013f	e9 b5 00 00 00	 jmp	 $LN59@match
$LN19@match:
; Line 484
  00144	0f b6 c1	 movzx	 eax, cl
  00147	50		 push	 eax
  00148	57		 push	 edi
  00149	53		 push	 ebx
  0014a	e8 00 00 00 00	 call	 _match_capture
  0014f	8b f8		 mov	 edi, eax
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 485
  00154	85 ff		 test	 edi, edi
  00156	0f 84 43 01 00
	00		 je	 $LN63@match
; Line 486
  0015c	83 c6 02	 add	 esi, 2
  0015f	e9 95 00 00 00	 jmp	 $LN59@match
; Line 497
$LN43@match:
  00164	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00167	50		 push	 eax
  00168	56		 push	 esi
  00169	52		 push	 edx
  0016a	e8 00 00 00 00	 call	 _matchbracketclass
  0016f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00172	eb 0e		 jmp	 SHORT $LN67@match
$LN44@match:
  00174	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00178	50		 push	 eax
  00179	52		 push	 edx
  0017a	e8 00 00 00 00	 call	 _match_class
  0017f	83 c4 08	 add	 esp, 8
$LN67@match:
  00182	8b 4d 08	 mov	 ecx, DWORD PTR _ep$1$[ebp]
  00185	8b d0		 mov	 edx, eax
$LN46@match:
  00187	85 d2		 test	 edx, edx
  00189	74 59		 je	 SHORT $LN62@match
$LN15@match:
; Line 505
  0018b	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  0018e	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00191	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  00194	85 c9		 test	 ecx, ecx
  00196	75 10		 jne	 SHORT $LN10@match
; Line 506
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LPFFPFJG@pattern?5too?5complex?$AA@
  0019d	ff 73 0c	 push	 DWORD PTR [ebx+12]
  001a0	e8 00 00 00 00	 call	 _luaL_error
  001a5	83 c4 08	 add	 esp, 8
$LN10@match:
; Line 507
  001a8	8b 4d 08	 mov	 ecx, DWORD PTR _ep$1$[ebp]
  001ab	0f be 01	 movsx	 eax, BYTE PTR [ecx]
  001ae	83 c0 d6	 add	 eax, -42		; ffffffd6H
  001b1	83 f8 15	 cmp	 eax, 21			; 00000015H
  001b4	77 29		 ja	 SHORT $LN1@match
  001b6	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN65@match[eax]
  001bd	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN71@match[eax*4]
$LN7@match:
; Line 510
  001c4	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  001c7	56		 push	 esi
  001c8	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  001cb	50		 push	 eax
  001cc	53		 push	 ebx
  001cd	e8 00 00 00 00	 call	 _match
  001d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d5	85 c0		 test	 eax, eax
  001d7	0f 85 b6 00 00
	00		 jne	 $LN58@match
; Line 513
  001dd	eb 1a		 jmp	 SHORT $LN59@match
$LN1@match:
; Line 527
  001df	47		 inc	 edi
  001e0	8b f1		 mov	 esi, ecx
  001e2	eb 15		 jmp	 SHORT $LN59@match
$LN62@match:
; Line 498
  001e4	8a 01		 mov	 al, BYTE PTR [ecx]
  001e6	3c 2a		 cmp	 al, 42			; 0000002aH
  001e8	74 0c		 je	 SHORT $LN13@match
  001ea	3c 3f		 cmp	 al, 63			; 0000003fH
  001ec	74 08		 je	 SHORT $LN13@match
  001ee	3c 2d		 cmp	 al, 45			; 0000002dH
  001f0	0f 85 a7 00 00
	00		 jne	 $LN14@match
$LN13@match:
; Line 499
  001f6	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LN59@match:
; Line 439
  001f9	3b 73 08	 cmp	 esi, DWORD PTR [ebx+8]
  001fc	0f 85 33 fe ff
	ff		 jne	 $init$72
; Line 534
  00202	ff 43 14	 inc	 DWORD PTR [ebx+20]
; Line 535
  00205	8b c7		 mov	 eax, edi
  00207	5f		 pop	 edi
  00208	5e		 pop	 esi
  00209	5b		 pop	 ebx
; Line 536
  0020a	5d		 pop	 ebp
  0020b	c3		 ret	 0
$LN28@match:
; Line 455
  0020c	33 c0		 xor	 eax, eax
  0020e	3b 7b 04	 cmp	 edi, DWORD PTR [ebx+4]
  00211	0f 44 c7	 cmove	 eax, edi
; Line 534
  00214	ff 43 14	 inc	 DWORD PTR [ebx+20]
  00217	8b f8		 mov	 edi, eax
  00219	5f		 pop	 edi
  0021a	5e		 pop	 esi
  0021b	5b		 pop	 ebx
; Line 536
  0021c	5d		 pop	 ebp
  0021d	c3		 ret	 0
$LN33@match:
; Line 442
  0021e	80 7e 01 29	 cmp	 BYTE PTR [esi+1], 41	; 00000029H
  00222	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00225	75 1a		 jne	 SHORT $LN32@match
; Line 443
  00227	6a fe		 push	 -2			; fffffffeH
  00229	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  0022c	50		 push	 eax
  0022d	57		 push	 edi
  0022e	53		 push	 ebx
  0022f	e8 00 00 00 00	 call	 _start_capture
  00234	83 c4 10	 add	 esp, 16			; 00000010H
  00237	8b f8		 mov	 edi, eax
; Line 534
  00239	ff 43 14	 inc	 DWORD PTR [ebx+20]
  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	5b		 pop	 ebx
; Line 536
  0023f	5d		 pop	 ebp
  00240	c3		 ret	 0
$LN32@match:
; Line 445
  00241	6a ff		 push	 -1
  00243	50		 push	 eax
  00244	57		 push	 edi
  00245	53		 push	 ebx
  00246	e8 00 00 00 00	 call	 _start_capture
  0024b	83 c4 10	 add	 esp, 16			; 00000010H
  0024e	8b f8		 mov	 edi, eax
; Line 534
  00250	ff 43 14	 inc	 DWORD PTR [ebx+20]
  00253	5f		 pop	 edi
  00254	5e		 pop	 esi
  00255	5b		 pop	 ebx
; Line 536
  00256	5d		 pop	 ebp
  00257	c3		 ret	 0
$LN30@match:
; Line 449
  00258	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0025b	50		 push	 eax
  0025c	57		 push	 edi
  0025d	53		 push	 ebx
  0025e	e8 00 00 00 00	 call	 _end_capture
  00263	83 c4 0c	 add	 esp, 12			; 0000000cH
  00266	8b f8		 mov	 edi, eax
; Line 534
  00268	ff 43 14	 inc	 DWORD PTR [ebx+20]
  0026b	5f		 pop	 edi
  0026c	5e		 pop	 esi
  0026d	5b		 pop	 ebx
; Line 536
  0026e	5d		 pop	 ebp
  0026f	c3		 ret	 0
$LN4@match:
; Line 518
  00270	47		 inc	 edi
$LN3@match:
; Line 521
  00271	51		 push	 ecx
  00272	56		 push	 esi
  00273	57		 push	 edi
  00274	53		 push	 ebx
  00275	e8 00 00 00 00	 call	 _max_expand
  0027a	83 c4 10	 add	 esp, 16			; 00000010H
  0027d	8b f8		 mov	 edi, eax
; Line 534
  0027f	ff 43 14	 inc	 DWORD PTR [ebx+20]
  00282	5f		 pop	 edi
  00283	5e		 pop	 esi
  00284	5b		 pop	 ebx
; Line 536
  00285	5d		 pop	 ebp
  00286	c3		 ret	 0
$LN2@match:
; Line 524
  00287	51		 push	 ecx
  00288	56		 push	 esi
  00289	57		 push	 edi
  0028a	53		 push	 ebx
  0028b	e8 00 00 00 00	 call	 _min_expand
  00290	83 c4 10	 add	 esp, 16			; 00000010H
$LN58@match:
; Line 534
  00293	ff 43 14	 inc	 DWORD PTR [ebx+20]
  00296	8b f8		 mov	 edi, eax
  00298	5f		 pop	 edi
  00299	5e		 pop	 esi
  0029a	5b		 pop	 ebx
; Line 536
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN14@match:
; Line 502
  0029d	33 ff		 xor	 edi, edi
$LN63@match:
; Line 534
  0029f	ff 43 14	 inc	 DWORD PTR [ebx+20]
; Line 535
  002a2	8b c7		 mov	 eax, edi
  002a4	5f		 pop	 edi
  002a5	5e		 pop	 esi
  002a6	5b		 pop	 ebx
; Line 536
  002a7	5d		 pop	 ebp
  002a8	c3		 ret	 0
  002a9	8d 49 00	 npad	 3
$LN69@match:
  002ac	00 00 00 00	 DD	 $LN29@match
  002b0	00 00 00 00	 DD	 $LN27@match
  002b4	00 00 00 00	 DD	 $dflt$73
  002b8	00 00 00 00	 DD	 $dflt$73
  002bc	00 00 00 00	 DD	 $LN33@match
  002c0	00 00 00 00	 DD	 $LN30@match
$LN70@match:
  002c4	00 00 00 00	 DD	 $LN19@match
  002c8	00 00 00 00	 DD	 $LN24@match
  002cc	00 00 00 00	 DD	 $LN22@match
  002d0	00 00 00 00	 DD	 $dflt$73
$LN64@match:
  002d4	00		 DB	 0
  002d5	00		 DB	 0
  002d6	00		 DB	 0
  002d7	00		 DB	 0
  002d8	00		 DB	 0
  002d9	00		 DB	 0
  002da	00		 DB	 0
  002db	00		 DB	 0
  002dc	00		 DB	 0
  002dd	00		 DB	 0
  002de	03		 DB	 3
  002df	03		 DB	 3
  002e0	03		 DB	 3
  002e1	03		 DB	 3
  002e2	03		 DB	 3
  002e3	03		 DB	 3
  002e4	03		 DB	 3
  002e5	03		 DB	 3
  002e6	03		 DB	 3
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	03		 DB	 3
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	03		 DB	 3
  002f5	03		 DB	 3
  002f6	03		 DB	 3
  002f7	03		 DB	 3
  002f8	03		 DB	 3
  002f9	03		 DB	 3
  002fa	03		 DB	 3
  002fb	03		 DB	 3
  002fc	03		 DB	 3
  002fd	03		 DB	 3
  002fe	03		 DB	 3
  002ff	03		 DB	 3
  00300	03		 DB	 3
  00301	03		 DB	 3
  00302	03		 DB	 3
  00303	03		 DB	 3
  00304	03		 DB	 3
  00305	03		 DB	 3
  00306	01		 DB	 1
  00307	03		 DB	 3
  00308	03		 DB	 3
  00309	03		 DB	 3
  0030a	02		 DB	 2
  0030b	90		 npad	 1
$LN71@match:
  0030c	00 00 00 00	 DD	 $LN3@match
  00310	00 00 00 00	 DD	 $LN4@match
  00314	00 00 00 00	 DD	 $LN2@match
  00318	00 00 00 00	 DD	 $LN7@match
  0031c	00 00 00 00	 DD	 $LN1@match
$LN65@match:
  00320	00		 DB	 0
  00321	01		 DB	 1
  00322	04		 DB	 4
  00323	02		 DB	 2
  00324	04		 DB	 4
  00325	04		 DB	 4
  00326	04		 DB	 4
  00327	04		 DB	 4
  00328	04		 DB	 4
  00329	04		 DB	 4
  0032a	04		 DB	 4
  0032b	04		 DB	 4
  0032c	04		 DB	 4
  0032d	04		 DB	 4
  0032e	04		 DB	 4
  0032f	04		 DB	 4
  00330	04		 DB	 4
  00331	04		 DB	 4
  00332	04		 DB	 4
  00333	04		 DB	 4
  00334	04		 DB	 4
  00335	03		 DB	 3
_match	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_dump
_TEXT	SEGMENT
_b$ = -8212						; size = 8208
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_str_dump PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 187
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 14 20 00 00	 mov	 eax, 8212		; 00002014H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
; Line 189
  0001c	6a 02		 push	 2
  0001e	57		 push	 edi
  0001f	e8 00 00 00 00	 call	 _lua_toboolean
; Line 190
  00024	6a 06		 push	 6
  00026	6a 01		 push	 1
  00028	57		 push	 edi
  00029	8b f0		 mov	 esi, eax
  0002b	e8 00 00 00 00	 call	 _luaL_checktype
; Line 191
  00030	6a 01		 push	 1
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 _lua_settop
; Line 192
  00038	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0003e	50		 push	 eax
  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 _luaL_buffinit
; Line 193
  00045	56		 push	 esi
  00046	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET _writer
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 _lua_dump
  00058	83 c4 34	 add	 esp, 52			; 00000034H
  0005b	85 c0		 test	 eax, eax
  0005d	74 1e		 je	 SHORT $LN1@str_dump
; Line 194
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BNLBHKJN@unable?5to?5dump?5given?5function?$AA@
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 _luaL_error
  0006a	83 c4 08	 add	 esp, 8
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
; Line 197
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	33 cd		 xor	 ecx, ebp
  00074	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
$LN1@str_dump:
; Line 195
  0007d	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _luaL_pushresult
; Line 197
  00089	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008c	83 c4 04	 add	 esp, 4
  0008f	33 cd		 xor	 ecx, ebp
  00091	b8 01 00 00 00	 mov	 eax, 1
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_str_dump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _writer
_TEXT	SEGMENT
_L$ = 8							; size = 4
_b$ = 12						; size = 4
_size$ = 16						; size = 4
_B$ = 20						; size = 4
_writer	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 180
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 182
  00003	ff 75 10	 push	 DWORD PTR _size$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  00009	ff 75 14	 push	 DWORD PTR _B$[ebp]
  0000c	e8 00 00 00 00	 call	 _luaL_addlstring
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 183
  00014	33 c0		 xor	 eax, eax
; Line 184
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_writer	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_char
_TEXT	SEGMENT
_p$1$ = -8220						; size = 4
_n$1$ = -8216						; size = 4
_b$ = -8212						; size = 8208
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_str_char PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 165
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 1c 20 00 00	 mov	 eax, 8220		; 0000201cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
; Line 166
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 _lua_gettop
  00023	8b d8		 mov	 ebx, eax
; Line 169
  00025	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0002b	53		 push	 ebx
  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	89 9d e8 df ff
	ff		 mov	 DWORD PTR _n$1$[ebp], ebx
  00034	e8 00 00 00 00	 call	 _luaL_buffinitsize
; Line 170
  00039	be 01 00 00 00	 mov	 esi, 1
  0003e	89 85 e4 df ff
	ff		 mov	 DWORD PTR _p$1$[ebp], eax
  00044	83 c4 10	 add	 esp, 16			; 00000010H
  00047	3b de		 cmp	 ebx, esi
  00049	7c 43		 jl	 SHORT $LN1@str_char
  0004b	eb 03 8d 49 00	 npad	 5
$LL3@str_char:
; Line 171
  00050	56		 push	 esi
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 _luaL_checkinteger
  00057	8b d8		 mov	 ebx, eax
  00059	8b ca		 mov	 ecx, edx
; Line 172
  0005b	0f b6 c3	 movzx	 eax, bl
  0005e	83 c4 08	 add	 esp, 8
  00061	99		 cdq
  00062	3b c3		 cmp	 eax, ebx
  00064	75 04		 jne	 SHORT $LN11@str_char
  00066	3b d1		 cmp	 edx, ecx
  00068	74 0f		 je	 SHORT $LN6@str_char
$LN11@str_char:
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
  0006f	56		 push	 esi
  00070	57		 push	 edi
  00071	e8 00 00 00 00	 call	 _luaL_argerror
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@str_char:
; Line 173
  00079	8b 85 e4 df ff
	ff		 mov	 eax, DWORD PTR _p$1$[ebp]
  0007f	88 5c 30 ff	 mov	 BYTE PTR [eax+esi-1], bl
  00083	46		 inc	 esi
  00084	8b 9d e8 df ff
	ff		 mov	 ebx, DWORD PTR _n$1$[ebp]
  0008a	3b f3		 cmp	 esi, ebx
  0008c	7e c2		 jle	 SHORT $LL3@str_char
$LN1@str_char:
; Line 175
  0008e	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00094	53		 push	 ebx
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _luaL_pushresultsize
; Line 177
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	83 c4 08	 add	 esp, 8
  000a1	33 cd		 xor	 ecx, ebp
  000a3	b8 01 00 00 00	 mov	 eax, 1
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
_str_char ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_byte
_TEXT	SEGMENT
_s$1$ = -16						; size = 4
tv195 = -12						; size = 8
_pose$ = -12						; size = 8
_posi$ = -12						; size = 8
_len$1$ = -8						; size = 4
_len$1$ = -8						; size = 4
_l$ = -4						; size = 4
_L$ = 8							; size = 4
_str_byte PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 146
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 148
  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	8d 45 fc	 lea	 eax, DWORD PTR _l$[ebp]
  0000e	57		 push	 edi
  0000f	50		 push	 eax
  00010	6a 01		 push	 1
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 149
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _l$[ebp]
  0001b	6a 00		 push	 0
  0001d	6a 01		 push	 1
  0001f	6a 02		 push	 2
  00021	56		 push	 esi
  00022	89 45 f0	 mov	 DWORD PTR _s$1$[ebp], eax
  00025	89 4d f8	 mov	 DWORD PTR _len$1$[ebp], ecx
  00028	e8 00 00 00 00	 call	 _luaL_optinteger
  0002d	8b fa		 mov	 edi, edx
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	8b d8		 mov	 ebx, eax
  00034	85 ff		 test	 edi, edi
  00036	7c 06		 jl	 SHORT $LN13@str_byte
  00038	7f 28		 jg	 SHORT $LN10@str_byte
  0003a	85 db		 test	 ebx, ebx
  0003c	73 24		 jae	 SHORT $LN10@str_byte
$LN13@str_byte:
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _len$1$[ebp]
  00041	f7 d8		 neg	 eax
  00043	3b c1		 cmp	 eax, ecx
  00045	76 10		 jbe	 SHORT $LN11@str_byte
  00047	0f 57 c0	 xorps	 xmm0, xmm0
  0004a	66 0f 13 45 f4	 movlpd	 QWORD PTR _posi$[ebp], xmm0
  0004f	8b 7d f8	 mov	 edi, DWORD PTR _posi$[ebp+4]
  00052	8b 5d f4	 mov	 ebx, DWORD PTR _posi$[ebp]
  00055	eb 0b		 jmp	 SHORT $LN10@str_byte
$LN11@str_byte:
  00057	33 c0		 xor	 eax, eax
  00059	03 d9		 add	 ebx, ecx
  0005b	13 f8		 adc	 edi, eax
  0005d	83 c3 01	 add	 ebx, 1
  00060	13 f8		 adc	 edi, eax
$LN10@str_byte:
; Line 150
  00062	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	6a 03		 push	 3
  00069	56		 push	 esi
  0006a	89 45 f8	 mov	 DWORD PTR _len$1$[ebp], eax
  0006d	e8 00 00 00 00	 call	 _luaL_optinteger
  00072	83 c4 10	 add	 esp, 16			; 00000010H
  00075	8b f0		 mov	 esi, eax
  00077	85 d2		 test	 edx, edx
  00079	7c 06		 jl	 SHORT $LN19@str_byte
  0007b	7f 2a		 jg	 SHORT $LN16@str_byte
  0007d	85 f6		 test	 esi, esi
  0007f	73 26		 jae	 SHORT $LN16@str_byte
$LN19@str_byte:
  00081	8b 4d f8	 mov	 ecx, DWORD PTR _len$1$[ebp]
  00084	8b c6		 mov	 eax, esi
  00086	f7 d8		 neg	 eax
  00088	3b c1		 cmp	 eax, ecx
  0008a	76 10		 jbe	 SHORT $LN17@str_byte
  0008c	0f 57 c0	 xorps	 xmm0, xmm0
  0008f	66 0f 13 45 f4	 movlpd	 QWORD PTR _pose$[ebp], xmm0
  00094	8b 55 f8	 mov	 edx, DWORD PTR _pose$[ebp+4]
  00097	8b 75 f4	 mov	 esi, DWORD PTR _pose$[ebp]
  0009a	eb 0b		 jmp	 SHORT $LN16@str_byte
$LN17@str_byte:
  0009c	33 c0		 xor	 eax, eax
  0009e	03 f1		 add	 esi, ecx
  000a0	13 d0		 adc	 edx, eax
  000a2	83 c6 01	 add	 esi, 1
  000a5	13 d0		 adc	 edx, eax
$LN16@str_byte:
; Line 152
  000a7	85 ff		 test	 edi, edi
  000a9	7f 0e		 jg	 SHORT $LN7@str_byte
  000ab	7c 05		 jl	 SHORT $LN28@str_byte
  000ad	83 fb 01	 cmp	 ebx, 1
  000b0	73 07		 jae	 SHORT $LN7@str_byte
$LN28@str_byte:
  000b2	bb 01 00 00 00	 mov	 ebx, 1
  000b7	33 ff		 xor	 edi, edi
$LN7@str_byte:
; Line 153
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]
  000bc	85 d2		 test	 edx, edx
  000be	7c 0a		 jl	 SHORT $LN6@str_byte
  000c0	7f 04		 jg	 SHORT $LN29@str_byte
  000c2	3b f0		 cmp	 esi, eax
  000c4	76 04		 jbe	 SHORT $LN6@str_byte
$LN29@str_byte:
  000c6	8b f0		 mov	 esi, eax
  000c8	33 d2		 xor	 edx, edx
$LN6@str_byte:
; Line 154
  000ca	3b fa		 cmp	 edi, edx
  000cc	7c 0f		 jl	 SHORT $LN5@str_byte
  000ce	7f 04		 jg	 SHORT $LN30@str_byte
  000d0	3b de		 cmp	 ebx, esi
  000d2	76 09		 jbe	 SHORT $LN5@str_byte
$LN30@str_byte:
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	33 c0		 xor	 eax, eax
  000d8	5b		 pop	 ebx
; Line 162
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
$LN5@str_byte:
; Line 155
  000dd	8b c6		 mov	 eax, esi
  000df	2b c3		 sub	 eax, ebx
  000e1	1b d7		 sbb	 edx, edi
  000e3	89 55 f8	 mov	 DWORD PTR tv195[ebp+4], edx
  000e6	78 21		 js	 SHORT $LN4@str_byte
  000e8	7f 07		 jg	 SHORT $LN31@str_byte
  000ea	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000ef	72 18		 jb	 SHORT $LN4@str_byte
$LN31@str_byte:
; Line 156
  000f1	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _luaL_error
  000ff	83 c4 08	 add	 esp, 8
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
; Line 162
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
$LN4@str_byte:
; Line 158
  00109	8b 45 08	 mov	 eax, DWORD PTR _L$[ebp]
  0010c	2b f3		 sub	 esi, ebx
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
  00113	46		 inc	 esi
  00114	56		 push	 esi
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _luaL_checkstack
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 159
  0011e	33 ff		 xor	 edi, edi
  00120	85 f6		 test	 esi, esi
  00122	7e 1b		 jle	 SHORT $LN1@str_byte
  00124	03 5d f0	 add	 ebx, DWORD PTR _s$1$[ebp]
$LL3@str_byte:
; Line 160
  00127	0f b6 44 3b ff	 movzx	 eax, BYTE PTR [ebx+edi-1]
  0012c	99		 cdq
  0012d	52		 push	 edx
  0012e	50		 push	 eax
  0012f	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00132	e8 00 00 00 00	 call	 _lua_pushinteger
  00137	47		 inc	 edi
  00138	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013b	3b fe		 cmp	 edi, esi
  0013d	7c e8		 jl	 SHORT $LL3@str_byte
$LN1@str_byte:
  0013f	5f		 pop	 edi
; Line 161
  00140	8b c6		 mov	 eax, esi
  00142	5e		 pop	 esi
  00143	5b		 pop	 ebx
; Line 162
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c3		 ret	 0
_str_byte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_rep
_TEXT	SEGMENT
_sep$1$ = -8232						; size = 4
_s$1$ = -8228						; size = 4
tv210 = -8224						; size = 4
_totallen$1$ = -8224					; size = 4
_lsep$ = -8220						; size = 4
_l$ = -8216						; size = 4
_b$1 = -8212						; size = 8208
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_str_rep PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 120
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 28 20 00 00	 mov	 eax, 8232		; 00002028H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
; Line 122
  0001c	8d 85 e8 df ff
	ff		 lea	 eax, DWORD PTR _l$[ebp]
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	6a 01		 push	 1
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 123
  0002c	6a 02		 push	 2
  0002e	56		 push	 esi
  0002f	89 85 dc df ff
	ff		 mov	 DWORD PTR _s$1$[ebp], eax
  00035	e8 00 00 00 00	 call	 _luaL_checkinteger
  0003a	8b f8		 mov	 edi, eax
  0003c	8b da		 mov	 ebx, edx
; Line 124
  0003e	8d 85 e4 df ff
	ff		 lea	 eax, DWORD PTR _lsep$[ebp]
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0004a	6a 03		 push	 3
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 _luaL_optlstring
  00052	83 c4 24	 add	 esp, 36			; 00000024H
  00055	89 85 d8 df ff
	ff		 mov	 DWORD PTR _sep$1$[ebp], eax
; Line 125
  0005b	85 db		 test	 ebx, ebx
  0005d	7f 2a		 jg	 SHORT $LN8@str_rep
  0005f	7c 04		 jl	 SHORT $LN15@str_rep
  00061	85 ff		 test	 edi, edi
  00063	75 24		 jne	 SHORT $LN8@str_rep
$LN15@str_rep:
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0006a	56		 push	 esi
  0006b	e8 00 00 00 00	 call	 _lua_pushstring
  00070	83 c4 08	 add	 esp, 8
; Line 142
  00073	b8 01 00 00 00	 mov	 eax, 1
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
; Line 143
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007e	33 cd		 xor	 ecx, ebp
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
$LN8@str_rep:
; Line 126
  00089	8b 8d e4 df ff
	ff		 mov	 ecx, DWORD PTR _lsep$[ebp]
  0008f	03 8d e8 df ff
	ff		 add	 ecx, DWORD PTR _l$[ebp]
  00095	89 8d e0 df ff
	ff		 mov	 DWORD PTR tv210[ebp], ecx
  0009b	3b 8d e8 df ff
	ff		 cmp	 ecx, DWORD PTR _l$[ebp]
  000a1	0f 82 f2 00 00
	00		 jb	 $LN5@str_rep
  000a7	53		 push	 ebx
  000a8	57		 push	 edi
  000a9	6a 00		 push	 0
  000ab	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  000b0	e8 00 00 00 00	 call	 __alldiv
  000b5	33 c9		 xor	 ecx, ecx
  000b7	3b ca		 cmp	 ecx, edx
  000b9	0f 8f da 00 00
	00		 jg	 $LN5@str_rep
  000bf	7c 0c		 jl	 SHORT $LN16@str_rep
  000c1	39 85 e0 df ff
	ff		 cmp	 DWORD PTR tv210[ebp], eax
  000c7	0f 87 cc 00 00
	00		 ja	 $LN5@str_rep
$LN16@str_rep:
; Line 129
  000cd	8d 4f ff	 lea	 ecx, DWORD PTR [edi-1]
  000d0	8b c7		 mov	 eax, edi
  000d2	0f af 85 e8 df
	ff ff		 imul	 eax, DWORD PTR _l$[ebp]
  000d9	0f af 8d e4 df
	ff ff		 imul	 ecx, DWORD PTR _lsep$[ebp]
  000e0	03 c8		 add	 ecx, eax
; Line 131
  000e2	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$1[ebp]
  000e8	51		 push	 ecx
  000e9	50		 push	 eax
  000ea	56		 push	 esi
  000eb	89 8d e0 df ff
	ff		 mov	 DWORD PTR _totallen$1$[ebp], ecx
  000f1	e8 00 00 00 00	 call	 _luaL_buffinitsize
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	8b f0		 mov	 esi, eax
; Line 132
  000fb	85 db		 test	 ebx, ebx
  000fd	7c 5d		 jl	 SHORT $LN22@str_rep
  000ff	7f 0f		 jg	 SHORT $LL3@str_rep
  00101	83 ff 01	 cmp	 edi, 1
  00104	76 56		 jbe	 SHORT $LN22@str_rep
  00106	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL3@str_rep:
; Line 133
  00110	ff b5 e8 df ff
	ff		 push	 DWORD PTR _l$[ebp]
  00116	83 c7 ff	 add	 edi, -1
  00119	ff b5 dc df ff
	ff		 push	 DWORD PTR _s$1$[ebp]
  0011f	83 d3 ff	 adc	 ebx, -1
  00122	56		 push	 esi
  00123	e8 00 00 00 00	 call	 _memcpy
  00128	03 b5 e8 df ff
	ff		 add	 esi, DWORD PTR _l$[ebp]
  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 134
  00131	8b 85 e4 df ff
	ff		 mov	 eax, DWORD PTR _lsep$[ebp]
  00137	85 c0		 test	 eax, eax
  00139	74 16		 je	 SHORT $LN1@str_rep
; Line 135
  0013b	50		 push	 eax
  0013c	ff b5 d8 df ff
	ff		 push	 DWORD PTR _sep$1$[ebp]
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 _memcpy
  00148	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 136
  0014b	03 b5 e4 df ff
	ff		 add	 esi, DWORD PTR _lsep$[ebp]
$LN1@str_rep:
; Line 132
  00151	85 db		 test	 ebx, ebx
  00153	7f bb		 jg	 SHORT $LL3@str_rep
  00155	7c 05		 jl	 SHORT $LN22@str_rep
  00157	83 ff 01	 cmp	 edi, 1
  0015a	77 b4		 ja	 SHORT $LL3@str_rep
$LN22@str_rep:
; Line 139
  0015c	ff b5 e8 df ff
	ff		 push	 DWORD PTR _l$[ebp]
  00162	ff b5 dc df ff
	ff		 push	 DWORD PTR _s$1$[ebp]
  00168	56		 push	 esi
  00169	e8 00 00 00 00	 call	 _memcpy
; Line 140
  0016e	ff b5 e0 df ff
	ff		 push	 DWORD PTR _totallen$1$[ebp]
  00174	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$1[ebp]
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 _luaL_pushresultsize
  00180	83 c4 14	 add	 esp, 20			; 00000014H
; Line 142
  00183	b8 01 00 00 00	 mov	 eax, 1
  00188	5f		 pop	 edi
  00189	5e		 pop	 esi
  0018a	5b		 pop	 ebx
; Line 143
  0018b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018e	33 cd		 xor	 ecx, ebp
  00190	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00195	8b e5		 mov	 esp, ebp
  00197	5d		 pop	 ebp
  00198	c3		 ret	 0
$LN5@str_rep:
; Line 127
  00199	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JPPPHHNK@resulting?5string?5too?5large?$AA@
  0019e	56		 push	 esi
  0019f	e8 00 00 00 00	 call	 _luaL_error
; Line 143
  001a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a7	83 c4 08	 add	 esp, 8
  001aa	33 cd		 xor	 ecx, ebp
  001ac	5f		 pop	 edi
  001ad	5e		 pop	 esi
  001ae	5b		 pop	 ebx
  001af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c3		 ret	 0
_str_rep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_upper
_TEXT	SEGMENT
_l$ = -8216						; size = 4
_b$ = -8212						; size = 8208
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_str_upper PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 107
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 18 20 00 00	 mov	 eax, 8216		; 00002018H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
; Line 111
  0001c	8d 85 e8 df ff
	ff		 lea	 eax, DWORD PTR _l$[ebp]
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	6a 01		 push	 1
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 112
  0002c	ff b5 e8 df ff
	ff		 push	 DWORD PTR _l$[ebp]
  00032	8b d8		 mov	 ebx, eax
  00034	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0003a	50		 push	 eax
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _luaL_buffinitsize
  00041	8b f0		 mov	 esi, eax
  00043	83 c4 18	 add	 esp, 24			; 00000018H
; Line 113
  00046	8b 85 e8 df ff
	ff		 mov	 eax, DWORD PTR _l$[ebp]
  0004c	33 ff		 xor	 edi, edi
  0004e	85 c0		 test	 eax, eax
  00050	74 20		 je	 SHORT $LN1@str_upper
  00052	2b de		 sub	 ebx, esi
$LL3@str_upper:
; Line 114
  00054	0f b6 04 33	 movzx	 eax, BYTE PTR [ebx+esi]
  00058	50		 push	 eax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  0005f	88 06		 mov	 BYTE PTR [esi], al
  00061	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00064	8b 85 e8 df ff
	ff		 mov	 eax, DWORD PTR _l$[ebp]
  0006a	47		 inc	 edi
  0006b	83 c4 04	 add	 esp, 4
  0006e	3b f8		 cmp	 edi, eax
  00070	72 e2		 jb	 SHORT $LL3@str_upper
$LN1@str_upper:
; Line 115
  00072	50		 push	 eax
  00073	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _luaL_pushresultsize
; Line 117
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00082	83 c4 08	 add	 esp, 8
  00085	33 cd		 xor	 ecx, ebp
  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_str_upper ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_lower
_TEXT	SEGMENT
_l$ = -8216						; size = 4
_b$ = -8212						; size = 8208
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_str_lower PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 94
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 18 20 00 00	 mov	 eax, 8216		; 00002018H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
; Line 98
  0001c	8d 85 e8 df ff
	ff		 lea	 eax, DWORD PTR _l$[ebp]
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	6a 01		 push	 1
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 99
  0002c	ff b5 e8 df ff
	ff		 push	 DWORD PTR _l$[ebp]
  00032	8b d8		 mov	 ebx, eax
  00034	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0003a	50		 push	 eax
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _luaL_buffinitsize
  00041	8b f0		 mov	 esi, eax
  00043	83 c4 18	 add	 esp, 24			; 00000018H
; Line 100
  00046	8b 85 e8 df ff
	ff		 mov	 eax, DWORD PTR _l$[ebp]
  0004c	33 ff		 xor	 edi, edi
  0004e	85 c0		 test	 eax, eax
  00050	74 20		 je	 SHORT $LN1@str_lower
  00052	2b de		 sub	 ebx, esi
$LL3@str_lower:
; Line 101
  00054	0f b6 04 33	 movzx	 eax, BYTE PTR [ebx+esi]
  00058	50		 push	 eax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tolower
  0005f	88 06		 mov	 BYTE PTR [esi], al
  00061	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00064	8b 85 e8 df ff
	ff		 mov	 eax, DWORD PTR _l$[ebp]
  0006a	47		 inc	 edi
  0006b	83 c4 04	 add	 esp, 4
  0006e	3b f8		 cmp	 edi, eax
  00070	72 e2		 jb	 SHORT $LL3@str_lower
$LN1@str_lower:
; Line 102
  00072	50		 push	 eax
  00073	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _luaL_pushresultsize
; Line 104
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00082	83 c4 08	 add	 esp, 8
  00085	33 cd		 xor	 ecx, ebp
  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_str_lower ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_reverse
_TEXT	SEGMENT
_l$ = -8216						; size = 4
_b$ = -8212						; size = 8208
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
_str_reverse PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 82
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 18 20 00 00	 mov	 eax, 8216		; 00002018H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
; Line 85
  0001b	8d 85 e8 df ff
	ff		 lea	 eax, DWORD PTR _l$[ebp]
  00021	57		 push	 edi
  00022	50		 push	 eax
  00023	6a 01		 push	 1
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 86
  0002b	ff b5 e8 df ff
	ff		 push	 DWORD PTR _l$[ebp]
  00031	8b f8		 mov	 edi, eax
  00033	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00039	50		 push	 eax
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _luaL_buffinitsize
; Line 87
  00040	8b 95 e8 df ff
	ff		 mov	 edx, DWORD PTR _l$[ebp]
  00046	83 c4 18	 add	 esp, 24			; 00000018H
  00049	33 c9		 xor	 ecx, ecx
  0004b	8b f0		 mov	 esi, eax
  0004d	85 d2		 test	 edx, edx
  0004f	74 14		 je	 SHORT $LN1@str_revers
$LL3@str_revers:
; Line 88
  00051	2b d1		 sub	 edx, ecx
  00053	8a 44 3a ff	 mov	 al, BYTE PTR [edx+edi-1]
  00057	88 04 31	 mov	 BYTE PTR [ecx+esi], al
  0005a	41		 inc	 ecx
  0005b	8b 95 e8 df ff
	ff		 mov	 edx, DWORD PTR _l$[ebp]
  00061	3b ca		 cmp	 ecx, edx
  00063	72 ec		 jb	 SHORT $LL3@str_revers
$LN1@str_revers:
; Line 89
  00065	52		 push	 edx
  00066	8d 85 ec df ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _luaL_pushresultsize
; Line 91
  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	83 c4 08	 add	 esp, 8
  00078	33 cd		 xor	 ecx, ebp
  0007a	b8 01 00 00 00	 mov	 eax, 1
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_str_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_sub
_TEXT	SEGMENT
_end$ = -16						; size = 8
_start$ = -16						; size = 8
_s$1$ = -8						; size = 4
_l$ = -4						; size = 4
_L$ = 8							; size = 4
_str_sub PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 68
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
; Line 70
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  0000a	8d 45 fc	 lea	 eax, DWORD PTR _l$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	50		 push	 eax
  00010	6a 01		 push	 1
  00012	53		 push	 ebx
  00013	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 71
  00018	8b 7d fc	 mov	 edi, DWORD PTR _l$[ebp]
  0001b	6a 02		 push	 2
  0001d	53		 push	 ebx
  0001e	89 45 f8	 mov	 DWORD PTR _s$1$[ebp], eax
  00021	e8 00 00 00 00	 call	 _luaL_checkinteger
  00026	8b da		 mov	 ebx, edx
  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	8b f0		 mov	 esi, eax
  0002d	85 db		 test	 ebx, ebx
  0002f	7c 06		 jl	 SHORT $LN10@str_sub
  00031	7f 25		 jg	 SHORT $LN7@str_sub
  00033	85 f6		 test	 esi, esi
  00035	73 21		 jae	 SHORT $LN7@str_sub
$LN10@str_sub:
  00037	f7 d8		 neg	 eax
  00039	3b c7		 cmp	 eax, edi
  0003b	76 10		 jbe	 SHORT $LN8@str_sub
  0003d	0f 57 c0	 xorps	 xmm0, xmm0
  00040	66 0f 13 45 f0	 movlpd	 QWORD PTR _start$[ebp], xmm0
  00045	8b 5d f4	 mov	 ebx, DWORD PTR _start$[ebp+4]
  00048	8b 75 f0	 mov	 esi, DWORD PTR _start$[ebp]
  0004b	eb 0b		 jmp	 SHORT $LN7@str_sub
$LN8@str_sub:
  0004d	33 c0		 xor	 eax, eax
  0004f	03 f7		 add	 esi, edi
  00051	13 d8		 adc	 ebx, eax
  00053	83 c6 01	 add	 esi, 1
  00056	13 d8		 adc	 ebx, eax
$LN7@str_sub:
; Line 72
  00058	8b 7d fc	 mov	 edi, DWORD PTR _l$[ebp]
  0005b	6a ff		 push	 -1
  0005d	6a ff		 push	 -1
  0005f	6a 03		 push	 3
  00061	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00064	e8 00 00 00 00	 call	 _luaL_optinteger
  00069	83 c4 10	 add	 esp, 16			; 00000010H
  0006c	8b c8		 mov	 ecx, eax
  0006e	85 d2		 test	 edx, edx
  00070	7c 06		 jl	 SHORT $LN16@str_sub
  00072	7f 25		 jg	 SHORT $LN13@str_sub
  00074	85 c9		 test	 ecx, ecx
  00076	73 21		 jae	 SHORT $LN13@str_sub
$LN16@str_sub:
  00078	f7 d8		 neg	 eax
  0007a	3b c7		 cmp	 eax, edi
  0007c	76 10		 jbe	 SHORT $LN14@str_sub
  0007e	0f 57 c0	 xorps	 xmm0, xmm0
  00081	66 0f 13 45 f0	 movlpd	 QWORD PTR _end$[ebp], xmm0
  00086	8b 55 f4	 mov	 edx, DWORD PTR _end$[ebp+4]
  00089	8b 4d f0	 mov	 ecx, DWORD PTR _end$[ebp]
  0008c	eb 0b		 jmp	 SHORT $LN13@str_sub
$LN14@str_sub:
  0008e	33 c0		 xor	 eax, eax
  00090	03 cf		 add	 ecx, edi
  00092	13 d0		 adc	 edx, eax
  00094	83 c1 01	 add	 ecx, 1
  00097	13 d0		 adc	 edx, eax
$LN13@str_sub:
; Line 73
  00099	85 db		 test	 ebx, ebx
  0009b	7f 0e		 jg	 SHORT $LN4@str_sub
  0009d	7c 05		 jl	 SHORT $LN21@str_sub
  0009f	83 fe 01	 cmp	 esi, 1
  000a2	73 07		 jae	 SHORT $LN4@str_sub
$LN21@str_sub:
  000a4	be 01 00 00 00	 mov	 esi, 1
  000a9	33 db		 xor	 ebx, ebx
$LN4@str_sub:
; Line 74
  000ab	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]
  000ae	85 d2		 test	 edx, edx
  000b0	7c 0a		 jl	 SHORT $LN3@str_sub
  000b2	7f 04		 jg	 SHORT $LN22@str_sub
  000b4	3b c8		 cmp	 ecx, eax
  000b6	76 04		 jbe	 SHORT $LN3@str_sub
$LN22@str_sub:
  000b8	8b c8		 mov	 ecx, eax
  000ba	33 d2		 xor	 edx, edx
$LN3@str_sub:
; Line 75
  000bc	3b da		 cmp	 ebx, edx
  000be	7f 28		 jg	 SHORT $LN2@str_sub
  000c0	7c 04		 jl	 SHORT $LN23@str_sub
  000c2	3b f1		 cmp	 esi, ecx
  000c4	77 22		 ja	 SHORT $LN2@str_sub
$LN23@str_sub:
; Line 76
  000c6	8b 45 f8	 mov	 eax, DWORD PTR _s$1$[ebp]
  000c9	2b ce		 sub	 ecx, esi
  000cb	41		 inc	 ecx
  000cc	48		 dec	 eax
  000cd	51		 push	 ecx
  000ce	03 c6		 add	 eax, esi
  000d0	50		 push	 eax
  000d1	ff 75 08	 push	 DWORD PTR _L$[ebp]
  000d4	e8 00 00 00 00	 call	 _lua_pushlstring
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 78
  000dc	b8 01 00 00 00	 mov	 eax, 1
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
; Line 79
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
$LN2@str_sub:
; Line 77
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000ed	ff 75 08	 push	 DWORD PTR _L$[ebp]
  000f0	e8 00 00 00 00	 call	 _lua_pushstring
  000f5	83 c4 08	 add	 esp, 8
; Line 78
  000f8	b8 01 00 00 00	 mov	 eax, 1
  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
; Line 79
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
_str_sub ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _posrelat
_TEXT	SEGMENT
_pos$ = 8						; size = 8
_len$ = 16						; size = 4
_posrelat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 61
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 62
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pos$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR _pos$[ebp+4]
  0000a	85 ff		 test	 edi, edi
  0000c	7c 0d		 jl	 SHORT $LN4@posrelat
  0000e	7f 04		 jg	 SHORT $LN7@posrelat
  00010	85 c9		 test	 ecx, ecx
  00012	72 07		 jb	 SHORT $LN4@posrelat
$LN7@posrelat:
  00014	8b d7		 mov	 edx, edi
  00016	8b c1		 mov	 eax, ecx
  00018	5f		 pop	 edi
; Line 65
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN4@posrelat:
; Line 63
  0001b	8b c1		 mov	 eax, ecx
  0001d	56		 push	 esi
  0001e	8b 75 10	 mov	 esi, DWORD PTR _len$[ebp]
  00021	f7 d8		 neg	 eax
  00023	3b c6		 cmp	 eax, esi
  00025	76 08		 jbe	 SHORT $LN2@posrelat
  00027	5e		 pop	 esi
  00028	33 c0		 xor	 eax, eax
  0002a	33 d2		 xor	 edx, edx
  0002c	5f		 pop	 edi
; Line 65
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN2@posrelat:
; Line 64
  0002f	33 d2		 xor	 edx, edx
  00031	03 f1		 add	 esi, ecx
  00033	13 d7		 adc	 edx, edi
  00035	83 c6 01	 add	 esi, 1
  00038	8b c6		 mov	 eax, esi
  0003a	5e		 pop	 esi
  0003b	83 d2 00	 adc	 edx, 0
  0003e	5f		 pop	 edi
; Line 65
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_posrelat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_len
_TEXT	SEGMENT
_l$ = -4						; size = 4
_L$ = 8							; size = 4
_str_len PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 52
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 54
  00004	8d 45 fc	 lea	 eax, DWORD PTR _l$[ebp]
  00007	50		 push	 eax
  00008	6a 01		 push	 1
  0000a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000d	e8 00 00 00 00	 call	 _luaL_checklstring
; Line 55
  00012	6a 00		 push	 0
  00014	ff 75 fc	 push	 DWORD PTR _l$[ebp]
  00017	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0001a	e8 00 00 00 00	 call	 _lua_pushinteger
  0001f	83 c4 18	 add	 esp, 24			; 00000018H
; Line 56
  00022	b8 01 00 00 00	 mov	 eax, 1
; Line 57
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_str_len ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaopen_string
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaopen_string PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1548
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1549
  00003	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405bc00000000000
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000f	68 88 00 00 00	 push	 136			; 00000088H
  00014	83 ec 08	 sub	 esp, 8
  00017	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _luaL_checkversion_
  00022	6a 11		 push	 17			; 00000011H
  00024	6a 00		 push	 0
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _lua_createtable
  0002c	6a 00		 push	 0
  0002e	68 00 00 00 00	 push	 OFFSET _strlib
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _luaL_setfuncs
; Line 1550
  00039	6a 01		 push	 1
  0003b	6a 00		 push	 0
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _lua_createtable
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 _lua_pushstring
  0004e	6a fe		 push	 -2			; fffffffeH
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 _lua_pushvalue
  00056	83 c4 44	 add	 esp, 68			; 00000044H
  00059	6a fe		 push	 -2			; fffffffeH
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 _lua_setmetatable
  00061	6a fe		 push	 -2			; fffffffeH
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 _lua_settop
  00069	6a fe		 push	 -2			; fffffffeH
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 _lua_pushvalue
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_07NHABFFHN@__index?$AA@
  00076	6a fe		 push	 -2			; fffffffeH
  00078	56		 push	 esi
  00079	e8 00 00 00 00	 call	 _lua_setfield
  0007e	6a fe		 push	 -2			; fffffffeH
  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 _lua_settop
  00086	83 c4 2c	 add	 esp, 44			; 0000002cH
; Line 1551
  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	5e		 pop	 esi
; Line 1552
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_luaopen_string ENDP
_TEXT	ENDS
END
