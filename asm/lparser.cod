; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_priority DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0eH
	DB	0dH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	06H
	DB	06H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	09H
	DB	08H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
CONST	ENDS
PUBLIC	_luaY_parser
PUBLIC	??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@		; `string'
PUBLIC	??_C@_0O@FCKLILMC@main?5function?$AA@		; `string'
PUBLIC	??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@ ; `string'
PUBLIC	??_C@_0BA@EIDMAHJI@local?5variables?$AA@	; `string'
PUBLIC	??_C@_08JKPCMKJ@upvalues?$AA@			; `string'
PUBLIC	??_C@_08CMAFAEJC@C?5levels?$AA@			; `string'
PUBLIC	??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@ ; `string'
PUBLIC	??_C@_0N@OEGJPJFJ@labels?1gotos?$AA@		; `string'
PUBLIC	??_C@_05ELPHFHOI@break?$AA@			; `string'
PUBLIC	??_C@_0CC@KOMACILM@?$DM?$CFs?$DO?5at?5line?5?$CFd?5not?5inside?5a?5loo@ ; `string'
PUBLIC	??_C@_0CM@OGINCFCB@no?5visible?5label?5?8?$CFs?8?5for?5?$DMgoto?$DO@ ; `string'
PUBLIC	??_C@_09CEAIPAHE@functions?$AA@			; `string'
PUBLIC	??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MHIGIDHO@?$DMname?$DO?5or?5?8?4?4?4?8?5expected?$AA@ ; `string'
PUBLIC	??_C@_04PJDNGLKJ@self?$AA@			; `string'
PUBLIC	??_C@_0BM@HEIHHEKF@function?5arguments?5expected?$AA@ ; `string'
PUBLIC	??_C@_0BC@KBCKKGAJ@unexpected?5symbol?$AA@	; `string'
PUBLIC	??_C@_0CL@EJFFCAJP@cannot?5use?5?8?4?4?4?8?5outside?5a?5varar@ ; `string'
PUBLIC	??_C@_0N@MNJHOOI@syntax?5error?$AA@		; `string'
PUBLIC	??_C@_0CG@FBAEKGNA@label?5?8?$CFs?8?5already?5defined?5on?5li@ ; `string'
PUBLIC	??_C@_0M@HHIHAJLG@?$CIfor?5index?$CJ?$AA@	; `string'
PUBLIC	??_C@_0M@HGGGDCAE@?$CIfor?5limit?$CJ?$AA@	; `string'
PUBLIC	??_C@_0L@ELGHHMFI@?$CIfor?5step?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BA@IJIMMPHF@?$CIfor?5generator?$CJ?$AA@	; `string'
PUBLIC	??_C@_0M@CCNPGEGC@?$CIfor?5state?$CJ?$AA@	; `string'
PUBLIC	??_C@_0O@PHJHAIC@?$CIfor?5control?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BF@PACDFECJ@?8?$DN?8?5or?5?8in?8?5expected?$AA@ ; `string'
EXTRN	_luaO_int2fb:PROC
EXTRN	_luaO_pushfstring:PROC
EXTRN	_luaM_toobig:PROC
EXTRN	_luaM_realloc_:PROC
EXTRN	_luaM_growaux_:PROC
EXTRN	_luaX_setinput:PROC
EXTRN	_luaX_newstring:PROC
EXTRN	_luaX_next:PROC
EXTRN	_luaX_lookahead:PROC
EXTRN	_luaX_syntaxerror:PROC
EXTRN	_luaX_token2str:PROC
EXTRN	_luaK_codeABx:PROC
EXTRN	_luaK_codeABC:PROC
EXTRN	_luaK_codek:PROC
EXTRN	_luaK_fixline:PROC
EXTRN	_luaK_nil:PROC
EXTRN	_luaK_reserveregs:PROC
EXTRN	_luaK_checkstack:PROC
EXTRN	_luaK_stringK:PROC
EXTRN	_luaK_intK:PROC
EXTRN	_luaK_dischargevars:PROC
EXTRN	_luaK_exp2anyreg:PROC
EXTRN	_luaK_exp2anyregup:PROC
EXTRN	_luaK_exp2nextreg:PROC
EXTRN	_luaK_exp2val:PROC
EXTRN	_luaK_exp2RK:PROC
EXTRN	_luaK_self:PROC
EXTRN	_luaK_indexed:PROC
EXTRN	_luaK_goiftrue:PROC
EXTRN	_luaK_goiffalse:PROC
EXTRN	_luaK_storevar:PROC
EXTRN	_luaK_setreturns:PROC
EXTRN	_luaK_setoneret:PROC
EXTRN	_luaK_jump:PROC
EXTRN	_luaK_ret:PROC
EXTRN	_luaK_patchlist:PROC
EXTRN	_luaK_patchtohere:PROC
EXTRN	_luaK_patchclose:PROC
EXTRN	_luaK_concat:PROC
EXTRN	_luaK_getlabel:PROC
EXTRN	_luaK_prefix:PROC
EXTRN	_luaK_infix:PROC
EXTRN	_luaK_posfix:PROC
EXTRN	_luaK_setlist:PROC
EXTRN	_luaD_inctop:PROC
EXTRN	_luaF_newproto:PROC
EXTRN	_luaF_newLclosure:PROC
EXTRN	_luaC_step:PROC
EXTRN	_luaC_barrier_:PROC
EXTRN	_luaS_new:PROC
EXTRN	_luaH_new:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BF@PACDFECJ@?8?$DN?8?5or?5?8in?8?5expected?$AA@
CONST	SEGMENT
??_C@_0BF@PACDFECJ@?8?$DN?8?5or?5?8in?8?5expected?$AA@ DB '''='' or ''in'''
	DB	' expected', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PHJHAIC@?$CIfor?5control?$CJ?$AA@
CONST	SEGMENT
??_C@_0O@PHJHAIC@?$CIfor?5control?$CJ?$AA@ DB '(for control)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CCNPGEGC@?$CIfor?5state?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@CCNPGEGC@?$CIfor?5state?$CJ?$AA@ DB '(for state)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IJIMMPHF@?$CIfor?5generator?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@IJIMMPHF@?$CIfor?5generator?$CJ?$AA@ DB '(for generator)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ELGHHMFI@?$CIfor?5step?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@ELGHHMFI@?$CIfor?5step?$CJ?$AA@ DB '(for step)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HGGGDCAE@?$CIfor?5limit?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@HGGGDCAE@?$CIfor?5limit?$CJ?$AA@ DB '(for limit)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HHIHAJLG@?$CIfor?5index?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@HHIHAJLG@?$CIfor?5index?$CJ?$AA@ DB '(for index)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FBAEKGNA@label?5?8?$CFs?8?5already?5defined?5on?5li@
CONST	SEGMENT
??_C@_0CG@FBAEKGNA@label?5?8?$CFs?8?5already?5defined?5on?5li@ DB 'label '
	DB	'''%s'' already defined on line %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNJHOOI@syntax?5error?$AA@
CONST	SEGMENT
??_C@_0N@MNJHOOI@syntax?5error?$AA@ DB 'syntax error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EJFFCAJP@cannot?5use?5?8?4?4?4?8?5outside?5a?5varar@
CONST	SEGMENT
??_C@_0CL@EJFFCAJP@cannot?5use?5?8?4?4?4?8?5outside?5a?5varar@ DB 'cannot'
	DB	' use ''...'' outside a vararg function', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBCKKGAJ@unexpected?5symbol?$AA@
CONST	SEGMENT
??_C@_0BC@KBCKKGAJ@unexpected?5symbol?$AA@ DB 'unexpected symbol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HEIHHEKF@function?5arguments?5expected?$AA@
CONST	SEGMENT
??_C@_0BM@HEIHHEKF@function?5arguments?5expected?$AA@ DB 'function argume'
	DB	'nts expected', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJDNGLKJ@self?$AA@
CONST	SEGMENT
??_C@_04PJDNGLKJ@self?$AA@ DB 'self', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MHIGIDHO@?$DMname?$DO?5or?5?8?4?4?4?8?5expected?$AA@
CONST	SEGMENT
??_C@_0BJ@MHIGIDHO@?$DMname?$DO?5or?5?8?4?4?4?8?5expected?$AA@ DB '<name>'
	DB	' or ''...'' expected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@
CONST	SEGMENT
??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@ DB 'items in a construc'
	DB	'tor', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09CEAIPAHE@functions?$AA@
CONST	SEGMENT
??_C@_09CEAIPAHE@functions?$AA@ DB 'functions', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OGINCFCB@no?5visible?5label?5?8?$CFs?8?5for?5?$DMgoto?$DO@
CONST	SEGMENT
??_C@_0CM@OGINCFCB@no?5visible?5label?5?8?$CFs?8?5for?5?$DMgoto?$DO@ DB 'n'
	DB	'o visible label ''%s'' for <goto> at line %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KOMACILM@?$DM?$CFs?$DO?5at?5line?5?$CFd?5not?5inside?5a?5loo@
CONST	SEGMENT
??_C@_0CC@KOMACILM@?$DM?$CFs?$DO?5at?5line?5?$CFd?5not?5inside?5a?5loo@ DB '<'
	DB	'%s> at line %d not inside a loop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05ELPHFHOI@break?$AA@
CONST	SEGMENT
??_C@_05ELPHFHOI@break?$AA@ DB 'break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OEGJPJFJ@labels?1gotos?$AA@
CONST	SEGMENT
??_C@_0N@OEGJPJFJ@labels?1gotos?$AA@ DB 'labels/gotos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@
CONST	SEGMENT
??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@ DB '<'
	DB	'goto %s> at line %d jumps into the scope of local ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMAFAEJC@C?5levels?$AA@
CONST	SEGMENT
??_C@_08CMAFAEJC@C?5levels?$AA@ DB 'C levels', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKPCMKJ@upvalues?$AA@
CONST	SEGMENT
??_C@_08JKPCMKJ@upvalues?$AA@ DB 'upvalues', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EIDMAHJI@local?5variables?$AA@
CONST	SEGMENT
??_C@_0BA@EIDMAHJI@local?5variables?$AA@ DB 'local variables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
CONST	SEGMENT
??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@ DB '%'
	DB	's expected (to close %s at line %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@ DB 't'
	DB	'oo many %s (limit is %d) in %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@ DB 'function at line %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FCKLILMC@main?5function?$AA@
CONST	SEGMENT
??_C@_0O@FCKLILMC@main?5function?$AA@ DB 'main function', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
CONST	SEGMENT
??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@ DB '%s expected', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _mainfunc
_TEXT	SEGMENT
_v$ = -40						; size = 24
_bl$ = -16						; size = 16
_ls$ = 8						; size = 4
_fs$ = 12						; size = 4
_mainfunc PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1610
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
; Line 1613
  00007	8b 75 0c	 mov	 esi, DWORD PTR _fs$[ebp]
  0000a	8d 45 f0	 lea	 eax, DWORD PTR _bl$[ebp]
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	e8 00 00 00 00	 call	 _open_func
; Line 1614
  00019	8b 06		 mov	 eax, DWORD PTR [esi]
; Line 1615
  0001b	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _v$[ebp+16], -1
  00022	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _v$[ebp+20], -1
  00029	c7 45 d8 08 00
	00 00		 mov	 DWORD PTR _v$[ebp], 8
  00030	c6 40 07 02	 mov	 BYTE PTR [eax+7], 2
; Line 1616
  00034	8d 45 d8	 lea	 eax, DWORD PTR _v$[ebp]
  00037	50		 push	 eax
  00038	ff 77 4c	 push	 DWORD PTR [edi+76]
  0003b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _v$[ebp+8], 0
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 _newupvalue
; Line 1617
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 _luaX_next
; Line 1618
  0004e	57		 push	 edi
  0004f	e8 00 00 00 00	 call	 _statlist
  00054	83 c4 20	 add	 esp, 32			; 00000020H
; Line 1619
  00057	81 7f 10 21 01
	00 00		 cmp	 DWORD PTR [edi+16], 289	; 00000121H
  0005e	75 0f		 jne	 SHORT $LN10@mainfunc
; Line 1620
  00060	57		 push	 edi
  00061	e8 00 00 00 00	 call	 _close_func
  00066	83 c4 04	 add	 esp, 4
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
; Line 1621
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN10@mainfunc:
; Line 1619
  0006f	68 21 01 00 00	 push	 289			; 00000121H
  00074	57		 push	 edi
  00075	e8 00 00 00 00	 call	 _error_expected
$LN12@mainfunc:
$LN9@mainfunc:
  0007a	cc		 int	 3
_mainfunc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _retstat
_TEXT	SEGMENT
_e$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_retstat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1502
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00015	57		 push	 edi
; Line 1507
  00016	6a 01		 push	 1
  00018	56		 push	 esi
  00019	8b 7e 30	 mov	 edi, DWORD PTR [esi+48]
  0001c	e8 00 00 00 00	 call	 _block_follow
  00021	83 c4 08	 add	 esp, 8
  00024	85 c0		 test	 eax, eax
  00026	75 7c		 jne	 SHORT $LN8@retstat
  00028	83 7e 10 3b	 cmp	 DWORD PTR [esi+16], 59	; 0000003bH
  0002c	74 76		 je	 SHORT $LN8@retstat
; Line 1510
  0002e	8d 45 e4	 lea	 eax, DWORD PTR _e$[ebp]
  00031	50		 push	 eax
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 _explist
  00038	8b d8		 mov	 ebx, eax
  0003a	83 c4 08	 add	 esp, 8
; Line 1511
  0003d	8b 45 e4	 mov	 eax, DWORD PTR _e$[ebp]
  00040	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00043	74 27		 je	 SHORT $LN5@retstat
  00045	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00048	74 22		 je	 SHORT $LN5@retstat
; Line 1522
  0004a	8d 45 e4	 lea	 eax, DWORD PTR _e$[ebp]
  0004d	50		 push	 eax
  0004e	57		 push	 edi
  0004f	83 fb 01	 cmp	 ebx, 1
  00052	75 0a		 jne	 SHORT $LN2@retstat
  00054	e8 00 00 00 00	 call	 _luaK_exp2anyreg
  00059	83 c4 08	 add	 esp, 8
; Line 1523
  0005c	eb 4a		 jmp	 SHORT $LN1@retstat
$LN2@retstat:
; Line 1524
  0005e	e8 00 00 00 00	 call	 _luaK_exp2nextreg
; Line 1525
  00063	0f b6 47 2a	 movzx	 eax, BYTE PTR [edi+42]
  00067	83 c4 08	 add	 esp, 8
  0006a	eb 3c		 jmp	 SHORT $LN1@retstat
$LN5@retstat:
; Line 1512
  0006c	6a ff		 push	 -1
  0006e	8d 45 e4	 lea	 eax, DWORD PTR _e$[ebp]
  00071	50		 push	 eax
  00072	57		 push	 edi
  00073	e8 00 00 00 00	 call	 _luaK_setreturns
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1513
  0007b	83 7d e4 0d	 cmp	 DWORD PTR _e$[ebp], 13	; 0000000dH
  0007f	75 1a		 jne	 SHORT $LN4@retstat
  00081	83 fb 01	 cmp	 ebx, 1
  00084	75 15		 jne	 SHORT $LN4@retstat
; Line 1514
  00086	8b 07		 mov	 eax, DWORD PTR [edi]
  00088	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0008b	8b 45 ec	 mov	 eax, DWORD PTR _e$[ebp+8]
  0008e	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  00091	8b 01		 mov	 eax, DWORD PTR [ecx]
  00093	83 e0 e5	 and	 eax, -27		; ffffffe5H
  00096	83 c8 25	 or	 eax, 37			; 00000025H
  00099	89 01		 mov	 DWORD PTR [ecx], eax
$LN4@retstat:
; Line 1517
  0009b	0f b6 47 2a	 movzx	 eax, BYTE PTR [edi+42]
; Line 1518
  0009f	83 cb ff	 or	 ebx, -1
; Line 1520
  000a2	eb 04		 jmp	 SHORT $LN1@retstat
$LN8@retstat:
; Line 1508
  000a4	33 db		 xor	 ebx, ebx
  000a6	33 c0		 xor	 eax, eax
$LN1@retstat:
; Line 1530
  000a8	53		 push	 ebx
  000a9	50		 push	 eax
  000aa	57		 push	 edi
  000ab	e8 00 00 00 00	 call	 _luaK_ret
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1531
  000b3	83 7e 10 3b	 cmp	 DWORD PTR [esi+16], 59	; 0000003bH
  000b7	75 09		 jne	 SHORT $LN13@retstat
  000b9	56		 push	 esi
  000ba	e8 00 00 00 00	 call	 _luaX_next
  000bf	83 c4 04	 add	 esp, 4
$LN13@retstat:
; Line 1532
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	33 cd		 xor	 ecx, ebp
  000c9	5b		 pop	 ebx
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
_retstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _exprstat
_TEXT	SEGMENT
_v$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_exprstat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1486
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 1490
  00014	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp+8]
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	56		 push	 esi
  0001a	8b 7e 30	 mov	 edi, DWORD PTR [esi+48]
  0001d	e8 00 00 00 00	 call	 _suffixedexp
; Line 1491
  00022	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00025	83 c4 08	 add	 esp, 8
  00028	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  0002b	74 34		 je	 SHORT $LN3@exprstat
  0002d	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00030	74 2f		 je	 SHORT $LN3@exprstat
; Line 1496
  00032	83 7d e4 0d	 cmp	 DWORD PTR _v$[ebp+8], 13 ; 0000000dH
  00036	75 4f		 jne	 SHORT $LN8@exprstat
; Line 1497
  00038	8b 07		 mov	 eax, DWORD PTR [edi]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0003f	8b 45 ec	 mov	 eax, DWORD PTR _v$[ebp+16]
  00042	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	25 ff 7f 80 ff	 and	 eax, -8355841		; ff807fffH
  0004c	0d 00 40 00 00	 or	 eax, 16384		; 00004000H
  00051	89 01		 mov	 DWORD PTR [ecx], eax
; Line 1499
  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN3@exprstat:
; Line 1493
  00061	6a 01		 push	 1
  00063	8d 45 dc	 lea	 eax, DWORD PTR _v$[ebp]
  00066	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _v$[ebp], 0
  0006d	50		 push	 eax
  0006e	56		 push	 esi
  0006f	e8 00 00 00 00	 call	 _assignment
; Line 1499
  00074	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	33 cd		 xor	 ecx, ebp
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
$LN8@exprstat:
; Line 1496
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MNJHOOI@syntax?5error?$AA@
  0008c	56		 push	 esi
  0008d	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN10@exprstat:
$LN7@exprstat:
  00092	cc		 int	 3
_exprstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _funcstat
_TEXT	SEGMENT
_v$ = -52						; size = 24
_b$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_line$ = 12						; size = 4
_funcstat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1474
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
; Line 1478
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 _luaX_next
; Line 1479
  0001a	8d 45 cc	 lea	 eax, DWORD PTR _v$[ebp]
  0001d	50		 push	 eax
  0001e	57		 push	 edi
  0001f	e8 00 00 00 00	 call	 _funcname
; Line 1480
  00024	ff 75 0c	 push	 DWORD PTR _line$[ebp]
  00027	50		 push	 eax
  00028	8d 45 e4	 lea	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 _body
; Line 1481
  00032	8d 45 e4	 lea	 eax, DWORD PTR _b$[ebp]
  00035	50		 push	 eax
  00036	8d 45 cc	 lea	 eax, DWORD PTR _v$[ebp]
  00039	50		 push	 eax
  0003a	ff 77 30	 push	 DWORD PTR [edi+48]
  0003d	e8 00 00 00 00	 call	 _luaK_storevar
; Line 1482
  00042	ff 75 0c	 push	 DWORD PTR _line$[ebp]
  00045	ff 77 30	 push	 DWORD PTR [edi+48]
  00048	e8 00 00 00 00	 call	 _luaK_fixline
; Line 1483
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00050	83 c4 30	 add	 esp, 48			; 00000030H
  00053	33 cd		 xor	 ecx, ebp
  00055	5f		 pop	 edi
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_funcstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _funcname
_TEXT	SEGMENT
_v$GSCopy$1$ = -32					; size = 4
_key$1 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_v$ = 12						; size = 4
_funcname PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1460
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 1462
  00015	33 db		 xor	 ebx, ebx
  00017	57		 push	 edi
  00018	8b 7d 0c	 mov	 edi, DWORD PTR _v$[ebp]
; Line 1463
  0001b	57		 push	 edi
  0001c	56		 push	 esi
  0001d	89 7d e0	 mov	 DWORD PTR _v$GSCopy$1$[ebp], edi
  00020	e8 00 00 00 00	 call	 _singlevar
  00025	83 c4 08	 add	 esp, 8
; Line 1464
  00028	83 7e 10 2e	 cmp	 DWORD PTR [esi+16], 46	; 0000002eH
  0002c	75 61		 jne	 SHORT $LN2@funcname
  0002e	8b ff		 npad	 2
$LL3@funcname:
; Line 1465
  00030	8b 5e 30	 mov	 ebx, DWORD PTR [esi+48]
  00033	57		 push	 edi
  00034	53		 push	 ebx
  00035	e8 00 00 00 00	 call	 _luaK_exp2anyregup
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _luaX_next
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	81 7e 10 24 01
	00 00		 cmp	 DWORD PTR [esi+16], 292	; 00000124H
  0004a	75 6b		 jne	 SHORT $LN29@funcname
  0004c	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 _luaX_next
  00055	57		 push	 edi
  00056	ff 76 30	 push	 DWORD PTR [esi+48]
  00059	e8 00 00 00 00	 call	 _luaK_stringK
  0005e	8b 7d e0	 mov	 edi, DWORD PTR _v$GSCopy$1$[ebp]
  00061	89 45 ec	 mov	 DWORD PTR _key$1[ebp+8], eax
  00064	8d 45 e4	 lea	 eax, DWORD PTR _key$1[ebp]
  00067	50		 push	 eax
  00068	57		 push	 edi
  00069	53		 push	 ebx
  0006a	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _key$1[ebp+16], -1
  00071	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _key$1[ebp+20], -1
  00078	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _key$1[ebp], 4
  0007f	e8 00 00 00 00	 call	 _luaK_indexed
  00084	83 c4 18	 add	 esp, 24			; 00000018H
  00087	83 7e 10 2e	 cmp	 DWORD PTR [esi+16], 46	; 0000002eH
  0008b	74 a3		 je	 SHORT $LL3@funcname
  0008d	33 db		 xor	 ebx, ebx
$LN2@funcname:
; Line 1466
  0008f	83 7e 10 3a	 cmp	 DWORD PTR [esi+16], 58	; 0000003aH
  00093	75 0f		 jne	 SHORT $LN1@funcname
; Line 1468
  00095	57		 push	 edi
  00096	56		 push	 esi
  00097	bb 01 00 00 00	 mov	 ebx, 1
  0009c	e8 00 00 00 00	 call	 _fieldsel
  000a1	83 c4 08	 add	 esp, 8
$LN1@funcname:
; Line 1471
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a7	8b c3		 mov	 eax, ebx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	33 cd		 xor	 ecx, ebp
  000ad	5b		 pop	 ebx
  000ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
$LN29@funcname:
; Line 1465
  000b7	68 24 01 00 00	 push	 292			; 00000124H
  000bc	56		 push	 esi
  000bd	e8 00 00 00 00	 call	 _error_expected
$LN30@funcname:
$LN28@funcname:
  000c2	cc		 int	 3
_funcname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _localstat
_TEXT	SEGMENT
_fs$1$ = -36						; size = 4
_nvars$1$ = -32						; size = 4
_e$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_localstat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1440
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00015	57		 push	 edi
; Line 1442
  00016	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _nvars$1$[ebp], 0
  0001d	8d 49 00	 npad	 3
$LL5@localstat:
; Line 1446
  00020	81 7e 10 24 01
	00 00		 cmp	 DWORD PTR [esi+16], 292	; 00000124H
  00027	0f 85 de 00 00
	00		 jne	 $LN31@localstat
  0002d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _luaX_next
  00036	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00039	8b 5e 44	 mov	 ebx, DWORD PTR [esi+68]
  0003c	57		 push	 edi
  0003d	56		 push	 esi
  0003e	89 45 dc	 mov	 DWORD PTR _fs$1$[ebp], eax
  00041	e8 00 00 00 00	 call	 _registerlocalvar
  00046	8b 55 dc	 mov	 edx, DWORD PTR _fs$1$[ebp]
  00049	8b f8		 mov	 edi, eax
  0004b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	8b c8		 mov	 ecx, eax
  00053	2b 4a 24	 sub	 ecx, DWORD PTR [edx+36]
  00056	41		 inc	 ecx
  00057	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  0005d	0f 8f 98 00 00
	00		 jg	 $LN39@localstat
  00063	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00066	83 c0 02	 add	 eax, 2
  00069	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0006b	7e 1c		 jle	 SHORT $LN15@localstat
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EIDMAHJI@local?5variables?$AA@
  00072	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00077	6a 02		 push	 2
  00079	51		 push	 ecx
  0007a	ff 33		 push	 DWORD PTR [ebx]
  0007c	ff 76 34	 push	 DWORD PTR [esi+52]
  0007f	e8 00 00 00 00	 call	 _luaM_growaux_
  00084	83 c4 18	 add	 esp, 24			; 00000018H
  00087	89 03		 mov	 DWORD PTR [ebx], eax
$LN15@localstat:
  00089	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0008e	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00092	ff 43 04	 inc	 DWORD PTR [ebx+4]
; Line 1447
  00095	8b 5d e0	 mov	 ebx, DWORD PTR _nvars$1$[ebp]
  00098	43		 inc	 ebx
; Line 1448
  00099	83 7e 10 2c	 cmp	 DWORD PTR [esi+16], 44	; 0000002cH
  0009d	89 5d e0	 mov	 DWORD PTR _nvars$1$[ebp], ebx
  000a0	75 0e		 jne	 SHORT $LN32@localstat
  000a2	56		 push	 esi
  000a3	e8 00 00 00 00	 call	 _luaX_next
  000a8	83 c4 04	 add	 esp, 4
  000ab	e9 70 ff ff ff	 jmp	 $LL5@localstat
$LN32@localstat:
; Line 1449
  000b0	83 7e 10 3d	 cmp	 DWORD PTR [esi+16], 61	; 0000003dH
  000b4	75 15		 jne	 SHORT $LN2@localstat
  000b6	56		 push	 esi
  000b7	e8 00 00 00 00	 call	 _luaX_next
; Line 1450
  000bc	8d 45 e4	 lea	 eax, DWORD PTR _e$[ebp]
  000bf	50		 push	 eax
  000c0	56		 push	 esi
  000c1	e8 00 00 00 00	 call	 _explist
  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1451
  000c9	eb 09		 jmp	 SHORT $LN1@localstat
$LN2@localstat:
; Line 1452
  000cb	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _e$[ebp], 0
; Line 1453
  000d2	33 c0		 xor	 eax, eax
$LN1@localstat:
; Line 1455
  000d4	8d 4d e4	 lea	 ecx, DWORD PTR _e$[ebp]
  000d7	51		 push	 ecx
  000d8	50		 push	 eax
  000d9	53		 push	 ebx
  000da	56		 push	 esi
  000db	e8 00 00 00 00	 call	 _adjust_assign
; Line 1456
  000e0	53		 push	 ebx
  000e1	56		 push	 esi
  000e2	e8 00 00 00 00	 call	 _adjustlocalvars
; Line 1457
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	83 c4 18	 add	 esp, 24			; 00000018H
  000ed	33 cd		 xor	 ecx, ebp
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c3		 ret	 0
$LN39@localstat:
; Line 1446
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EIDMAHJI@local?5variables?$AA@
  00100	68 c8 00 00 00	 push	 200			; 000000c8H
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 _errorlimit
$LN40@localstat:
$LN31@localstat:
  0010b	68 24 01 00 00	 push	 292			; 00000124H
  00110	56		 push	 esi
  00111	e8 00 00 00 00	 call	 _error_expected
$LN41@localstat:
$LN38@localstat:
  00116	cc		 int	 3
_localstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _localfunc
_TEXT	SEGMENT
_b$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_localfunc PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1429
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
; Line 1432
  00016	81 7f 10 24 01
	00 00		 cmp	 DWORD PTR [edi+16], 292	; 00000124H
  0001d	8b 5f 30	 mov	 ebx, DWORD PTR [edi+48]
  00020	75 7f		 jne	 SHORT $LN24@localfunc
  00022	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 _luaX_next
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 _new_localvar
; Line 1433
  00032	8b 77 30	 mov	 esi, DWORD PTR [edi+48]
  00035	fe 46 2a	 inc	 BYTE PTR [esi+42]
  00038	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  0003c	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0003f	03 c8		 add	 ecx, eax
  00041	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00044	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00047	8b 00		 mov	 eax, DWORD PTR [eax]
  00049	0f bf 44 48 fe	 movsx	 eax, WORD PTR [eax+ecx*2-2]
  0004e	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00051	8b 06		 mov	 eax, DWORD PTR [esi]
  00053	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00056	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00059	89 44 91 04	 mov	 DWORD PTR [ecx+edx*4+4], eax
; Line 1434
  0005d	8d 45 e4	 lea	 eax, DWORD PTR _b$[ebp]
  00060	ff 77 04	 push	 DWORD PTR [edi+4]
  00063	6a 00		 push	 0
  00065	50		 push	 eax
  00066	57		 push	 edi
  00067	e8 00 00 00 00	 call	 _body
; Line 1436
  0006c	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0006f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00072	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00075	03 4d ec	 add	 ecx, DWORD PTR _b$[ebp+8]
  00078	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	0f bf 04 48	 movsx	 eax, WORD PTR [eax+ecx*2]
  00083	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00086	8b 03		 mov	 eax, DWORD PTR [ebx]
  00088	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0008b	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0008e	5b		 pop	 ebx
  0008f	89 44 91 04	 mov	 DWORD PTR [ecx+edx*4+4], eax
; Line 1437
  00093	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00096	33 cd		 xor	 ecx, ebp
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
$LN24@localfunc:
; Line 1432
  000a1	68 24 01 00 00	 push	 292			; 00000124H
  000a6	57		 push	 edi
  000a7	e8 00 00 00 00	 call	 _error_expected
$LN26@localfunc:
$LN23@localfunc:
  000ac	cc		 int	 3
_localfunc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _ifstat
_TEXT	SEGMENT
_bl$1 = -16						; size = 16
_escapelist$ = 8					; size = 4
_ls$ = 8						; size = 4
_line$ = 12						; size = 4
_ifstat	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1415
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 1417
  00008	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 1419
  0000b	8d 45 08	 lea	 eax, DWORD PTR _escapelist$[ebp]
  0000e	50		 push	 eax
  0000f	56		 push	 esi
  00010	c7 45 08 ff ff
	ff ff		 mov	 DWORD PTR _escapelist$[ebp], -1
  00017	8b 5e 30	 mov	 ebx, DWORD PTR [esi+48]
  0001a	e8 00 00 00 00	 call	 _test_then_block
  0001f	83 c4 08	 add	 esp, 8
; Line 1420
  00022	81 7e 10 05 01
	00 00		 cmp	 DWORD PTR [esi+16], 261	; 00000105H
  00029	75 1b		 jne	 SHORT $LN2@ifstat
  0002b	eb 03 8d 49 00	 npad	 5
$LL3@ifstat:
; Line 1421
  00030	8d 45 08	 lea	 eax, DWORD PTR _escapelist$[ebp]
  00033	50		 push	 eax
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _test_then_block
  0003a	83 c4 08	 add	 esp, 8
  0003d	81 7e 10 05 01
	00 00		 cmp	 DWORD PTR [esi+16], 261	; 00000105H
  00044	74 ea		 je	 SHORT $LL3@ifstat
$LN2@ifstat:
; Line 1422
  00046	81 7e 10 04 01
	00 00		 cmp	 DWORD PTR [esi+16], 260	; 00000104H
  0004d	75 4c		 jne	 SHORT $LN10@ifstat
  0004f	57		 push	 edi
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 _luaX_next
; Line 1423
  00056	8b 7e 30	 mov	 edi, DWORD PTR [esi+48]
  00059	c6 45 fe 00	 mov	 BYTE PTR _bl$1[ebp+14], 0
  0005d	56		 push	 esi
  0005e	8a 47 2a	 mov	 al, BYTE PTR [edi+42]
  00061	88 45 fc	 mov	 BYTE PTR _bl$1[ebp+12], al
  00064	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00067	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0006a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0006d	89 45 f4	 mov	 DWORD PTR _bl$1[ebp+4], eax
  00070	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00073	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00076	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00079	89 45 f8	 mov	 DWORD PTR _bl$1[ebp+8], eax
  0007c	c6 45 fd 00	 mov	 BYTE PTR _bl$1[ebp+13], 0
  00080	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00083	89 45 f0	 mov	 DWORD PTR _bl$1[ebp], eax
  00086	8d 45 f0	 lea	 eax, DWORD PTR _bl$1[ebp]
  00089	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0008c	e8 00 00 00 00	 call	 _statlist
  00091	57		 push	 edi
  00092	e8 00 00 00 00	 call	 _leaveblock
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	5f		 pop	 edi
$LN10@ifstat:
; Line 1424
  0009b	81 7e 10 06 01
	00 00		 cmp	 DWORD PTR [esi+16], 262	; 00000106H
  000a2	75 18		 jne	 SHORT $LN25@ifstat
  000a4	56		 push	 esi
  000a5	e8 00 00 00 00	 call	 _luaX_next
; Line 1425
  000aa	ff 75 08	 push	 DWORD PTR _escapelist$[ebp]
  000ad	53		 push	 ebx
  000ae	e8 00 00 00 00	 call	 _luaK_patchtohere
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
; Line 1426
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
; Line 1424
$LN25@ifstat:
  000bc	8b 45 0c	 mov	 eax, DWORD PTR _line$[ebp]
  000bf	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000c2	75 0b		 jne	 SHORT $LN38@ifstat
  000c4	68 06 01 00 00	 push	 262			; 00000106H
  000c9	56		 push	 esi
  000ca	e8 00 00 00 00	 call	 _error_expected
$LN39@ifstat:
$LN38@ifstat:
  000cf	50		 push	 eax
  000d0	68 0b 01 00 00	 push	 267			; 0000010bH
  000d5	56		 push	 esi
  000d6	e8 00 00 00 00	 call	 _luaX_token2str
  000db	83 c4 08	 add	 esp, 8
  000de	50		 push	 eax
  000df	68 06 01 00 00	 push	 262			; 00000106H
  000e4	56		 push	 esi
  000e5	e8 00 00 00 00	 call	 _luaX_token2str
  000ea	83 c4 08	 add	 esp, 8
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
  000f3	ff 76 34	 push	 DWORD PTR [esi+52]
  000f6	e8 00 00 00 00	 call	 _luaO_pushfstring
  000fb	83 c4 14	 add	 esp, 20			; 00000014H
  000fe	50		 push	 eax
  000ff	56		 push	 esi
  00100	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN40@ifstat:
$LN35@ifstat:
  00105	cc		 int	 3
_ifstat	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _test_then_block
_TEXT	SEGMENT
_escapelist$GSCopy$1$ = -48				; size = 4
_bl$ = -44						; size = 16
_v$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_escapelist$ = 12					; size = 4
_test_then_block PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1380
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _escapelist$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00018	57		 push	 edi
; Line 1386
  00019	56		 push	 esi
  0001a	89 45 d0	 mov	 DWORD PTR _escapelist$GSCopy$1$[ebp], eax
  0001d	8b 7e 30	 mov	 edi, DWORD PTR [esi+48]
  00020	e8 00 00 00 00	 call	 _luaX_next
; Line 1387
  00025	6a 00		 push	 0
  00027	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  0002a	50		 push	 eax
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 _subexpr
  00031	83 c4 10	 add	 esp, 16			; 00000010H
; Line 1388
  00034	81 7e 10 13 01
	00 00		 cmp	 DWORD PTR [esi+16], 275	; 00000113H
  0003b	0f 85 4c 01 00
	00		 jne	 $LN64@test_then_
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 _luaX_next
; Line 1389
  00047	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0004a	83 c4 04	 add	 esp, 4
  0004d	3d 0a 01 00 00	 cmp	 eax, 266		; 0000010aH
  00052	74 50		 je	 SHORT $LN6@test_then_
  00054	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  00059	74 49		 je	 SHORT $LN6@test_then_
; Line 1402
  0005b	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  0005e	50		 push	 eax
  0005f	ff 76 30	 push	 DWORD PTR [esi+48]
  00062	e8 00 00 00 00	 call	 _luaK_goiftrue
; Line 1403
  00067	c6 45 e2 00	 mov	 BYTE PTR _bl$[ebp+14], 0
  0006b	83 c4 08	 add	 esp, 8
  0006e	8a 47 2a	 mov	 al, BYTE PTR [edi+42]
  00071	88 45 e0	 mov	 BYTE PTR _bl$[ebp+12], al
  00074	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00077	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0007a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0007d	89 45 d8	 mov	 DWORD PTR _bl$[ebp+4], eax
  00080	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00083	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00086	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00089	89 45 dc	 mov	 DWORD PTR _bl$[ebp+8], eax
  0008c	c6 45 e1 00	 mov	 BYTE PTR _bl$[ebp+13], 0
  00090	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00093	89 45 d4	 mov	 DWORD PTR _bl$[ebp], eax
  00096	8d 45 d4	 lea	 eax, DWORD PTR _bl$[ebp]
  00099	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; Line 1404
  0009c	8b 5d f8	 mov	 ebx, DWORD PTR _v$[ebp+20]
  0009f	e9 99 00 00 00	 jmp	 $LN4@test_then_
$LN6@test_then_:
; Line 1390
  000a4	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  000a7	50		 push	 eax
  000a8	ff 76 30	 push	 DWORD PTR [esi+48]
  000ab	e8 00 00 00 00	 call	 _luaK_goiffalse
; Line 1391
  000b0	c6 45 e2 00	 mov	 BYTE PTR _bl$[ebp+14], 0
  000b4	8a 47 2a	 mov	 al, BYTE PTR [edi+42]
  000b7	88 45 e0	 mov	 BYTE PTR _bl$[ebp+12], al
  000ba	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000bd	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000c0	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000c3	89 45 d8	 mov	 DWORD PTR _bl$[ebp+4], eax
  000c6	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000c9	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000cc	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000cf	89 45 dc	 mov	 DWORD PTR _bl$[ebp+8], eax
  000d2	c6 45 e1 00	 mov	 BYTE PTR _bl$[ebp+13], 0
  000d6	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000d9	89 45 d4	 mov	 DWORD PTR _bl$[ebp], eax
  000dc	8d 45 d4	 lea	 eax, DWORD PTR _bl$[ebp]
  000df	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; Line 1392
  000e2	ff 75 f4	 push	 DWORD PTR _v$[ebp+16]
  000e5	56		 push	 esi
  000e6	e8 00 00 00 00	 call	 _gotostat
  000eb	83 c4 10	 add	 esp, 16			; 00000010H
  000ee	8b ff		 npad	 2
; Line 1393
$LL23@test_then_:
  000f0	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000f3	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  000f6	74 07		 je	 SHORT $LN21@test_then_
  000f8	3d 20 01 00 00	 cmp	 eax, 288		; 00000120H
  000fd	75 0b		 jne	 SHORT $LN22@test_then_
$LN21@test_then_:
  000ff	56		 push	 esi
  00100	e8 00 00 00 00	 call	 _statement
  00105	83 c4 04	 add	 esp, 4
  00108	eb e6		 jmp	 SHORT $LL23@test_then_
$LN22@test_then_:
; Line 1394
  0010a	6a 00		 push	 0
  0010c	56		 push	 esi
  0010d	e8 00 00 00 00	 call	 _block_follow
  00112	83 c4 08	 add	 esp, 8
; Line 1395
  00115	57		 push	 edi
  00116	85 c0		 test	 eax, eax
  00118	74 19		 je	 SHORT $LN5@test_then_
  0011a	e8 00 00 00 00	 call	 _leaveblock
  0011f	83 c4 04	 add	 esp, 4
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
; Line 1412
  00125	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00128	33 cd		 xor	 ecx, ebp
  0012a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
$LN5@test_then_:
; Line 1399
  00133	e8 00 00 00 00	 call	 _luaK_jump
  00138	83 c4 04	 add	 esp, 4
  0013b	8b d8		 mov	 ebx, eax
$LN4@test_then_:
; Line 1406
  0013d	56		 push	 esi
  0013e	e8 00 00 00 00	 call	 _statlist
; Line 1407
  00143	57		 push	 edi
  00144	e8 00 00 00 00	 call	 _leaveblock
; Line 1409
  00149	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0014c	83 c4 08	 add	 esp, 8
  0014f	81 f9 04 01 00
	00		 cmp	 ecx, 260		; 00000104H
  00155	74 08		 je	 SHORT $LN1@test_then_
  00157	81 f9 05 01 00
	00		 cmp	 ecx, 261		; 00000105H
  0015d	75 13		 jne	 SHORT $LN2@test_then_
$LN1@test_then_:
; Line 1410
  0015f	57		 push	 edi
  00160	e8 00 00 00 00	 call	 _luaK_jump
  00165	50		 push	 eax
  00166	ff 75 d0	 push	 DWORD PTR _escapelist$GSCopy$1$[ebp]
  00169	57		 push	 edi
  0016a	e8 00 00 00 00	 call	 _luaK_concat
  0016f	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@test_then_:
; Line 1411
  00172	53		 push	 ebx
  00173	57		 push	 edi
  00174	e8 00 00 00 00	 call	 _luaK_patchtohere
; Line 1412
  00179	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017c	83 c4 08	 add	 esp, 8
  0017f	33 cd		 xor	 ecx, ebp
  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	5b		 pop	 ebx
  00184	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c3		 ret	 0
$LN64@test_then_:
; Line 1388
  0018d	68 13 01 00 00	 push	 275			; 00000113H
  00192	56		 push	 esi
  00193	e8 00 00 00 00	 call	 _error_expected
$LN66@test_then_:
$LN63@test_then_:
  00198	cc		 int	 3
_test_then_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _forstat
_TEXT	SEGMENT
_bl$ = -16						; size = 16
_fs$1$ = 8						; size = 4
_ls$ = 8						; size = 4
_line$ = 12						; size = 4
_forstat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1362
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
; Line 1364
  00007	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 1367
  0000a	c6 45 fe 01	 mov	 BYTE PTR _bl$[ebp+14], 1
  0000e	57		 push	 edi
; Line 1368
  0000f	56		 push	 esi
  00010	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00013	89 4d 08	 mov	 DWORD PTR _fs$1$[ebp], ecx
  00016	8a 41 2a	 mov	 al, BYTE PTR [ecx+42]
  00019	88 45 fc	 mov	 BYTE PTR _bl$[ebp+12], al
  0001c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001f	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00022	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00025	89 45 f4	 mov	 DWORD PTR _bl$[ebp+4], eax
  00028	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002b	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0002e	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00031	89 45 f8	 mov	 DWORD PTR _bl$[ebp+8], eax
  00034	c6 45 fd 00	 mov	 BYTE PTR _bl$[ebp+13], 0
  00038	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0003b	89 45 f0	 mov	 DWORD PTR _bl$[ebp], eax
  0003e	8d 45 f0	 lea	 eax, DWORD PTR _bl$[ebp]
  00041	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00044	e8 00 00 00 00	 call	 _luaX_next
  00049	83 c4 04	 add	 esp, 4
; Line 1369
  0004c	81 7e 10 24 01
	00 00		 cmp	 DWORD PTR [esi+16], 292	; 00000124H
  00053	75 65		 jne	 SHORT $LN28@forstat
  00055	53		 push	 ebx
  00056	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 _luaX_next
; Line 1370
  0005f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00062	83 c4 04	 add	 esp, 4
  00065	8b 7d 0c	 mov	 edi, DWORD PTR _line$[ebp]
  00068	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  0006b	74 1b		 je	 SHORT $LN2@forstat
  0006d	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  00070	74 09		 je	 SHORT $LN3@forstat
  00072	3d 0c 01 00 00	 cmp	 eax, 268		; 0000010cH
  00077	74 0f		 je	 SHORT $LN2@forstat
  00079	eb 4a		 jmp	 SHORT $LN30@forstat
$LN3@forstat:
; Line 1371
  0007b	57		 push	 edi
  0007c	53		 push	 ebx
  0007d	56		 push	 esi
  0007e	e8 00 00 00 00	 call	 _fornum
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	eb 0a		 jmp	 SHORT $LN4@forstat
$LN2@forstat:
; Line 1372
  00088	53		 push	 ebx
  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 _forlist
  0008f	83 c4 08	 add	 esp, 8
$LN4@forstat:
; Line 1375
  00092	81 7e 10 06 01
	00 00		 cmp	 DWORD PTR [esi+16], 262	; 00000106H
  00099	5b		 pop	 ebx
  0009a	75 17		 jne	 SHORT $LN23@forstat
  0009c	56		 push	 esi
  0009d	e8 00 00 00 00	 call	 _luaX_next
; Line 1376
  000a2	ff 75 08	 push	 DWORD PTR _fs$1$[ebp]
  000a5	e8 00 00 00 00	 call	 _leaveblock
  000aa	83 c4 08	 add	 esp, 8
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
; Line 1377
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
; Line 1375
$LN23@forstat:
  000b3	3b 7e 04	 cmp	 edi, DWORD PTR [esi+4]
  000b6	74 18		 je	 SHORT $LN31@forstat
  000b8	eb 21		 jmp	 SHORT $LN32@forstat
$LN28@forstat:
; Line 1369
  000ba	68 24 01 00 00	 push	 292			; 00000124H
  000bf	56		 push	 esi
  000c0	e8 00 00 00 00	 call	 _error_expected
$LN33@forstat:
$LN30@forstat:
; Line 1373
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PACDFECJ@?8?$DN?8?5or?5?8in?8?5expected?$AA@
  000ca	56		 push	 esi
  000cb	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN34@forstat:
$LN31@forstat:
; Line 1375
  000d0	68 06 01 00 00	 push	 262			; 00000106H
  000d5	56		 push	 esi
  000d6	e8 00 00 00 00	 call	 _error_expected
$LN35@forstat:
$LN32@forstat:
  000db	57		 push	 edi
  000dc	68 08 01 00 00	 push	 264			; 00000108H
  000e1	56		 push	 esi
  000e2	e8 00 00 00 00	 call	 _luaX_token2str
  000e7	83 c4 08	 add	 esp, 8
  000ea	50		 push	 eax
  000eb	68 06 01 00 00	 push	 262			; 00000106H
  000f0	56		 push	 esi
  000f1	e8 00 00 00 00	 call	 _luaX_token2str
  000f6	83 c4 08	 add	 esp, 8
  000f9	50		 push	 eax
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
  000ff	ff 76 34	 push	 DWORD PTR [esi+52]
  00102	e8 00 00 00 00	 call	 _luaO_pushfstring
  00107	83 c4 14	 add	 esp, 20			; 00000014H
  0010a	50		 push	 eax
  0010b	56		 push	 esi
  0010c	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN36@forstat:
$LN27@forstat:
  00111	cc		 int	 3
_forstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _forlist
_TEXT	SEGMENT
_fs$1$ = -44						; size = 4
_base$1$ = -40						; size = 4
_fs$1$ = -36						; size = 4
_nvars$1$ = -32						; size = 4
_e$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_indexname$ = 12					; size = 4
_forlist PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1337
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 1341
  00015	bb 04 00 00 00	 mov	 ebx, 4
  0001a	57		 push	 edi
  0001b	8b 7d 0c	 mov	 edi, DWORD PTR _indexname$[ebp]
; Line 1345
  0001e	6a 0f		 push	 15			; 0000000fH
  00020	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00023	89 45 dc	 mov	 DWORD PTR _fs$1$[ebp], eax
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IJIMMPHF@?$CIfor?5generator?$CJ?$AA@
  0002b	56		 push	 esi
  0002c	0f b6 40 2c	 movzx	 eax, BYTE PTR [eax+44]
  00030	89 5d e0	 mov	 DWORD PTR _nvars$1$[ebp], ebx
  00033	89 45 d8	 mov	 DWORD PTR _base$1$[ebp], eax
  00036	e8 00 00 00 00	 call	 _luaX_newstring
  0003b	50		 push	 eax
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 _new_localvar
; Line 1346
  00042	6a 0b		 push	 11			; 0000000bH
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CCNPGEGC@?$CIfor?5state?$CJ?$AA@
  00049	56		 push	 esi
  0004a	e8 00 00 00 00	 call	 _luaX_newstring
  0004f	50		 push	 eax
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 _new_localvar
; Line 1347
  00056	6a 0d		 push	 13			; 0000000dH
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PHJHAIC@?$CIfor?5control?$CJ?$AA@
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 _luaX_newstring
  00063	50		 push	 eax
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 _new_localvar
; Line 1349
  0006a	57		 push	 edi
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 _new_localvar
  00071	83 c4 44	 add	 esp, 68			; 00000044H
$LL2@forlist:
; Line 1350
  00074	83 7e 10 2c	 cmp	 DWORD PTR [esi+16], 44	; 0000002cH
  00078	0f 85 8a 00 00
	00		 jne	 $LN1@forlist
  0007e	56		 push	 esi
  0007f	e8 00 00 00 00	 call	 _luaX_next
  00084	83 c4 04	 add	 esp, 4
; Line 1351
  00087	81 7e 10 24 01
	00 00		 cmp	 DWORD PTR [esi+16], 292	; 00000124H
  0008e	0f 85 de 00 00
	00		 jne	 $LN36@forlist
  00094	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 _luaX_next
  0009d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000a0	8b 5e 44	 mov	 ebx, DWORD PTR [esi+68]
  000a3	57		 push	 edi
  000a4	56		 push	 esi
  000a5	89 45 d4	 mov	 DWORD PTR _fs$1$[ebp], eax
  000a8	e8 00 00 00 00	 call	 _registerlocalvar
  000ad	8b 55 d4	 mov	 edx, DWORD PTR _fs$1$[ebp]
  000b0	8b f8		 mov	 edi, eax
  000b2	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b8	8b c8		 mov	 ecx, eax
  000ba	2b 4a 24	 sub	 ecx, DWORD PTR [edx+36]
  000bd	41		 inc	 ecx
  000be	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  000c4	0f 8f 98 00 00
	00		 jg	 $LN42@forlist
  000ca	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  000cd	83 c0 02	 add	 eax, 2
  000d0	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000d2	7e 1c		 jle	 SHORT $LN22@forlist
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EIDMAHJI@local?5variables?$AA@
  000d9	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  000de	6a 02		 push	 2
  000e0	51		 push	 ecx
  000e1	ff 33		 push	 DWORD PTR [ebx]
  000e3	ff 76 34	 push	 DWORD PTR [esi+52]
  000e6	e8 00 00 00 00	 call	 _luaM_growaux_
  000eb	83 c4 18	 add	 esp, 24			; 00000018H
  000ee	89 03		 mov	 DWORD PTR [ebx], eax
$LN22@forlist:
  000f0	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000f3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f5	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  000f9	ff 43 04	 inc	 DWORD PTR [ebx+4]
; Line 1352
  000fc	8b 5d e0	 mov	 ebx, DWORD PTR _nvars$1$[ebp]
  000ff	43		 inc	 ebx
  00100	89 5d e0	 mov	 DWORD PTR _nvars$1$[ebp], ebx
; Line 1353
  00103	e9 6c ff ff ff	 jmp	 $LL2@forlist
$LN1@forlist:
; Line 1354
  00108	81 7e 10 0c 01
	00 00		 cmp	 DWORD PTR [esi+16], 268	; 0000010cH
  0010f	75 6c		 jne	 SHORT $LN43@forlist
  00111	56		 push	 esi
  00112	e8 00 00 00 00	 call	 _luaX_next
; Line 1355
  00117	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
; Line 1356
  0011a	8d 45 e4	 lea	 eax, DWORD PTR _e$[ebp]
  0011d	83 c4 04	 add	 esp, 4
  00120	50		 push	 eax
  00121	50		 push	 eax
  00122	56		 push	 esi
  00123	e8 00 00 00 00	 call	 _explist
  00128	83 c4 08	 add	 esp, 8
  0012b	50		 push	 eax
  0012c	6a 03		 push	 3
  0012e	56		 push	 esi
  0012f	e8 00 00 00 00	 call	 _adjust_assign
; Line 1357
  00134	6a 03		 push	 3
  00136	ff 75 dc	 push	 DWORD PTR _fs$1$[ebp]
  00139	e8 00 00 00 00	 call	 _luaK_checkstack
; Line 1358
  0013e	6a 00		 push	 0
  00140	8d 43 fd	 lea	 eax, DWORD PTR [ebx-3]
  00143	50		 push	 eax
  00144	57		 push	 edi
  00145	ff 75 d8	 push	 DWORD PTR _base$1$[ebp]
  00148	56		 push	 esi
  00149	e8 00 00 00 00	 call	 _forbody
; Line 1359
  0014e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00151	83 c4 2c	 add	 esp, 44			; 0000002cH
  00154	33 cd		 xor	 ecx, ebp
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx
  00159	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c3		 ret	 0
$LN42@forlist:
; Line 1351
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EIDMAHJI@local?5variables?$AA@
  00167	68 c8 00 00 00	 push	 200			; 000000c8H
  0016c	52		 push	 edx
  0016d	e8 00 00 00 00	 call	 _errorlimit
$LN44@forlist:
$LN36@forlist:
  00172	68 24 01 00 00	 push	 292			; 00000124H
  00177	56		 push	 esi
  00178	e8 00 00 00 00	 call	 _error_expected
$LN45@forlist:
$LN43@forlist:
; Line 1354
  0017d	68 0c 01 00 00	 push	 268			; 0000010cH
  00182	56		 push	 esi
  00183	e8 00 00 00 00	 call	 _error_expected
$LN46@forlist:
$LN41@forlist:
  00188	cc		 int	 3
_forlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _fornum
_TEXT	SEGMENT
_base$1$ = -32						; size = 4
_e$1 = -28						; size = 24
_e$2 = -28						; size = 24
_e$3 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_varname$ = 12						; size = 4
_line$ = 16						; size = 4
_fornum	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1315
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR _varname$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
; Line 1319
  00019	6a 0b		 push	 11			; 0000000bH
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HHIHAJLG@?$CIfor?5index?$CJ?$AA@
  00020	57		 push	 edi
  00021	8b 5f 30	 mov	 ebx, DWORD PTR [edi+48]
  00024	0f b6 43 2c	 movzx	 eax, BYTE PTR [ebx+44]
  00028	89 45 e0	 mov	 DWORD PTR _base$1$[ebp], eax
  0002b	e8 00 00 00 00	 call	 _luaX_newstring
  00030	50		 push	 eax
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 _new_localvar
; Line 1320
  00037	6a 0b		 push	 11			; 0000000bH
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HGGGDCAE@?$CIfor?5limit?$CJ?$AA@
  0003e	57		 push	 edi
  0003f	e8 00 00 00 00	 call	 _luaX_newstring
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 _new_localvar
; Line 1321
  0004b	6a 0a		 push	 10			; 0000000aH
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@ELGHHMFI@?$CIfor?5step?$CJ?$AA@
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 _luaX_newstring
  00058	50		 push	 eax
  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 _new_localvar
; Line 1322
  0005f	56		 push	 esi
  00060	57		 push	 edi
  00061	e8 00 00 00 00	 call	 _new_localvar
  00066	83 c4 44	 add	 esp, 68			; 00000044H
; Line 1323
  00069	83 7f 10 3d	 cmp	 DWORD PTR [edi+16], 61	; 0000003dH
  0006d	0f 85 ba 00 00
	00		 jne	 $LN42@fornum
  00073	57		 push	 edi
  00074	e8 00 00 00 00	 call	 _luaX_next
; Line 1324
  00079	6a 00		 push	 0
  0007b	8d 45 e4	 lea	 eax, DWORD PTR _e$3[ebp]
  0007e	50		 push	 eax
  0007f	57		 push	 edi
  00080	e8 00 00 00 00	 call	 _subexpr
  00085	8d 45 e4	 lea	 eax, DWORD PTR _e$3[ebp]
  00088	50		 push	 eax
  00089	ff 77 30	 push	 DWORD PTR [edi+48]
  0008c	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  00091	83 c4 18	 add	 esp, 24			; 00000018H
; Line 1325
  00094	83 7f 10 2c	 cmp	 DWORD PTR [edi+16], 44	; 0000002cH
  00098	0f 85 97 00 00
	00		 jne	 $LN44@fornum
  0009e	57		 push	 edi
  0009f	e8 00 00 00 00	 call	 _luaX_next
; Line 1326
  000a4	6a 00		 push	 0
  000a6	8d 45 e4	 lea	 eax, DWORD PTR _e$2[ebp]
  000a9	50		 push	 eax
  000aa	57		 push	 edi
  000ab	e8 00 00 00 00	 call	 _subexpr
  000b0	8d 45 e4	 lea	 eax, DWORD PTR _e$2[ebp]
  000b3	50		 push	 eax
  000b4	ff 77 30	 push	 DWORD PTR [edi+48]
  000b7	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  000bc	83 c4 18	 add	 esp, 24			; 00000018H
; Line 1327
  000bf	83 7f 10 2c	 cmp	 DWORD PTR [edi+16], 44	; 0000002cH
  000c3	75 23		 jne	 SHORT $LN2@fornum
  000c5	57		 push	 edi
  000c6	e8 00 00 00 00	 call	 _luaX_next
; Line 1328
  000cb	6a 00		 push	 0
  000cd	8d 45 e4	 lea	 eax, DWORD PTR _e$1[ebp]
  000d0	50		 push	 eax
  000d1	57		 push	 edi
  000d2	e8 00 00 00 00	 call	 _subexpr
  000d7	8d 45 e4	 lea	 eax, DWORD PTR _e$1[ebp]
  000da	50		 push	 eax
  000db	ff 77 30	 push	 DWORD PTR [edi+48]
  000de	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  000e3	83 c4 18	 add	 esp, 24			; 00000018H
; Line 1329
  000e6	eb 21		 jmp	 SHORT $LN1@fornum
$LN2@fornum:
; Line 1330
  000e8	6a 00		 push	 0
  000ea	6a 01		 push	 1
  000ec	53		 push	 ebx
  000ed	e8 00 00 00 00	 call	 _luaK_intK
  000f2	50		 push	 eax
  000f3	0f b6 43 2c	 movzx	 eax, BYTE PTR [ebx+44]
  000f7	50		 push	 eax
  000f8	53		 push	 ebx
  000f9	e8 00 00 00 00	 call	 _luaK_codek
; Line 1331
  000fe	6a 01		 push	 1
  00100	53		 push	 ebx
  00101	e8 00 00 00 00	 call	 _luaK_reserveregs
  00106	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@fornum:
; Line 1333
  00109	6a 01		 push	 1
  0010b	6a 01		 push	 1
  0010d	ff 75 10	 push	 DWORD PTR _line$[ebp]
  00110	ff 75 e0	 push	 DWORD PTR _base$1$[ebp]
  00113	57		 push	 edi
  00114	e8 00 00 00 00	 call	 _forbody
; Line 1334
  00119	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011c	83 c4 14	 add	 esp, 20			; 00000014H
  0011f	33 cd		 xor	 ecx, ebp
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	5b		 pop	 ebx
  00124	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c3		 ret	 0
$LN42@fornum:
; Line 1323
  0012d	6a 3d		 push	 61			; 0000003dH
  0012f	57		 push	 edi
  00130	e8 00 00 00 00	 call	 _error_expected
$LN45@fornum:
$LN44@fornum:
; Line 1325
  00135	6a 2c		 push	 44			; 0000002cH
  00137	57		 push	 edi
  00138	e8 00 00 00 00	 call	 _error_expected
$LN46@fornum:
$LN41@fornum:
  0013d	cc		 int	 3
_fornum	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _forbody
_TEXT	SEGMENT
_bl$1 = -32						; size = 16
_bl$ = -16						; size = 16
_prep$1$ = 8						; size = 4
_ls$ = 8						; size = 4
_base$ = 12						; size = 4
_line$ = 16						; size = 4
_nvars$ = 20						; size = 4
_isnum$ = 24						; size = 4
_forbody PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1289
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
; Line 1292
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _ls$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
; Line 1294
  0000c	bf 03 00 00 00	 mov	 edi, 3
  00011	8b 73 30	 mov	 esi, DWORD PTR [ebx+48]
  00014	80 46 2a 03	 add	 BYTE PTR [esi+42], 3
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL9@forbody:
  00020	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00023	0f b6 4e 2a	 movzx	 ecx, BYTE PTR [esi+42]
  00027	2b cf		 sub	 ecx, edi
  00029	03 4e 24	 add	 ecx, DWORD PTR [esi+36]
  0002c	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0002f	8b 00		 mov	 eax, DWORD PTR [eax]
  00031	0f bf 04 48	 movsx	 eax, WORD PTR [eax+ecx*2]
  00035	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0003d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00040	89 44 91 04	 mov	 DWORD PTR [ecx+edx*4+4], eax
  00044	4f		 dec	 edi
  00045	75 d9		 jne	 SHORT $LL9@forbody
; Line 1295
  00047	81 7b 10 03 01
	00 00		 cmp	 DWORD PTR [ebx+16], 259	; 00000103H
  0004e	0f 85 31 01 00
	00		 jne	 $LN46@forbody
  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 _luaX_next
  0005a	83 c4 04	 add	 esp, 4
; Line 1296
  0005d	39 7d 18	 cmp	 DWORD PTR _isnum$[ebp], edi
  00060	74 15		 je	 SHORT $LN5@forbody
  00062	68 fe ff 01 00	 push	 131070			; 0001fffeH
  00067	ff 75 0c	 push	 DWORD PTR _base$[ebp]
  0006a	6a 28		 push	 40			; 00000028H
  0006c	56		 push	 esi
  0006d	e8 00 00 00 00	 call	 _luaK_codeABx
  00072	83 c4 10	 add	 esp, 16			; 00000010H
  00075	eb 09		 jmp	 SHORT $LN44@forbody
$LN5@forbody:
  00077	56		 push	 esi
  00078	e8 00 00 00 00	 call	 _luaK_jump
  0007d	83 c4 04	 add	 esp, 4
$LN44@forbody:
  00080	89 45 08	 mov	 DWORD PTR _prep$1$[ebp], eax
; Line 1297
  00083	c6 45 fe 00	 mov	 BYTE PTR _bl$[ebp+14], 0
  00087	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  0008b	88 45 fc	 mov	 BYTE PTR _bl$[ebp+12], al
  0008e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; Line 1298
  00091	8b 7d 14	 mov	 edi, DWORD PTR _nvars$[ebp]
  00094	57		 push	 edi
  00095	53		 push	 ebx
  00096	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00099	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0009c	89 45 f4	 mov	 DWORD PTR _bl$[ebp+4], eax
  0009f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a2	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000a5	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000a8	89 45 f8	 mov	 DWORD PTR _bl$[ebp+8], eax
  000ab	c6 45 fd 00	 mov	 BYTE PTR _bl$[ebp+13], 0
  000af	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000b2	89 45 f0	 mov	 DWORD PTR _bl$[ebp], eax
  000b5	8d 45 f0	 lea	 eax, DWORD PTR _bl$[ebp]
  000b8	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000bb	e8 00 00 00 00	 call	 _adjustlocalvars
; Line 1299
  000c0	57		 push	 edi
  000c1	56		 push	 esi
  000c2	e8 00 00 00 00	 call	 _luaK_reserveregs
; Line 1300
  000c7	8b 7b 30	 mov	 edi, DWORD PTR [ebx+48]
  000ca	c6 45 ee 00	 mov	 BYTE PTR _bl$1[ebp+14], 0
  000ce	53		 push	 ebx
  000cf	0f b6 47 2a	 movzx	 eax, BYTE PTR [edi+42]
  000d3	88 45 ec	 mov	 BYTE PTR _bl$1[ebp+12], al
  000d6	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000d9	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000dc	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000df	89 45 e4	 mov	 DWORD PTR _bl$1[ebp+4], eax
  000e2	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000e5	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000e8	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000eb	89 45 e8	 mov	 DWORD PTR _bl$1[ebp+8], eax
  000ee	c6 45 ed 00	 mov	 BYTE PTR _bl$1[ebp+13], 0
  000f2	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000f5	89 45 e0	 mov	 DWORD PTR _bl$1[ebp], eax
  000f8	8d 45 e0	 lea	 eax, DWORD PTR _bl$1[ebp]
  000fb	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  000fe	e8 00 00 00 00	 call	 _statlist
  00103	57		 push	 edi
  00104	e8 00 00 00 00	 call	 _leaveblock
; Line 1301
  00109	56		 push	 esi
  0010a	e8 00 00 00 00	 call	 _leaveblock
; Line 1302
  0010f	8b 7d 08	 mov	 edi, DWORD PTR _prep$1$[ebp]
  00112	57		 push	 edi
  00113	56		 push	 esi
  00114	e8 00 00 00 00	 call	 _luaK_patchtohere
  00119	83 c4 24	 add	 esp, 36			; 00000024H
; Line 1303
  0011c	83 7d 18 00	 cmp	 DWORD PTR _isnum$[ebp], 0
  00120	74 15		 je	 SHORT $LN2@forbody
; Line 1304
  00122	68 fe ff 01 00	 push	 131070			; 0001fffeH
  00127	ff 75 0c	 push	 DWORD PTR _base$[ebp]
  0012a	6a 27		 push	 39			; 00000027H
  0012c	56		 push	 esi
  0012d	e8 00 00 00 00	 call	 _luaK_codeABx
  00132	83 c4 10	 add	 esp, 16			; 00000010H
; Line 1305
  00135	eb 2e		 jmp	 SHORT $LN45@forbody
$LN2@forbody:
; Line 1306
  00137	ff 75 14	 push	 DWORD PTR _nvars$[ebp]
  0013a	8b 5d 0c	 mov	 ebx, DWORD PTR _base$[ebp]
  0013d	6a 00		 push	 0
  0013f	53		 push	 ebx
  00140	6a 29		 push	 41			; 00000029H
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 _luaK_codeABC
; Line 1307
  00148	ff 75 10	 push	 DWORD PTR _line$[ebp]
  0014b	56		 push	 esi
  0014c	e8 00 00 00 00	 call	 _luaK_fixline
; Line 1308
  00151	68 fe ff 01 00	 push	 131070			; 0001fffeH
  00156	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  00159	50		 push	 eax
  0015a	6a 2a		 push	 42			; 0000002aH
  0015c	56		 push	 esi
  0015d	e8 00 00 00 00	 call	 _luaK_codeABx
  00162	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN45@forbody:
  00165	8b c8		 mov	 ecx, eax
; Line 1310
  00167	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0016a	50		 push	 eax
  0016b	51		 push	 ecx
  0016c	56		 push	 esi
  0016d	e8 00 00 00 00	 call	 _luaK_patchlist
; Line 1311
  00172	ff 75 10	 push	 DWORD PTR _line$[ebp]
  00175	56		 push	 esi
  00176	e8 00 00 00 00	 call	 _luaK_fixline
  0017b	83 c4 14	 add	 esp, 20			; 00000014H
  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx
; Line 1312
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
$LN46@forbody:
; Line 1295
  00185	68 03 01 00 00	 push	 259			; 00000103H
  0018a	53		 push	 ebx
  0018b	e8 00 00 00 00	 call	 _error_expected
$LN48@forbody:
$LN43@forbody:
  00190	cc		 int	 3
_forbody ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _exp1
_TEXT	SEGMENT
_e$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_exp1	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1278
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 1281
  00014	8d 45 e4	 lea	 eax, DWORD PTR _e$[ebp]
  00017	6a 00		 push	 0
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _subexpr
; Line 1282
  00020	8d 45 e4	 lea	 eax, DWORD PTR _e$[ebp]
  00023	50		 push	 eax
  00024	ff 76 30	 push	 DWORD PTR [esi+48]
  00027	e8 00 00 00 00	 call	 _luaK_exp2nextreg
; Line 1286
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
  00032	8b 45 ec	 mov	 eax, DWORD PTR _e$[ebp+8]
  00035	33 cd		 xor	 ecx, ebp
  00037	5e		 pop	 esi
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_exp1	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _repeatstat
_TEXT	SEGMENT
_bl1$ = -60						; size = 16
_bl2$ = -44						; size = 16
_v$1 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_line$ = 12						; size = 4
_repeatstat PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1258
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00015	57		 push	 edi
; Line 1261
  00016	8b 7e 30	 mov	 edi, DWORD PTR [esi+48]
; Line 1262
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 _luaK_getlabel
; Line 1264
  0001f	c6 45 d2 01	 mov	 BYTE PTR _bl1$[ebp+14], 1
  00023	8b d8		 mov	 ebx, eax
  00025	8a 4f 2a	 mov	 cl, BYTE PTR [edi+42]
  00028	88 4d d0	 mov	 BYTE PTR _bl1$[ebp+12], cl
  0002b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
; Line 1266
  0002e	56		 push	 esi
  0002f	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  00032	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00035	89 4d c8	 mov	 DWORD PTR _bl1$[ebp+4], ecx
  00038	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0003b	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0003e	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00041	89 45 cc	 mov	 DWORD PTR _bl1$[ebp+8], eax
  00044	c6 45 d1 00	 mov	 BYTE PTR _bl1$[ebp+13], 0
  00048	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0004b	89 45 c4	 mov	 DWORD PTR _bl1$[ebp], eax
  0004e	8d 45 c4	 lea	 eax, DWORD PTR _bl1$[ebp]
  00051	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00054	c6 45 e2 00	 mov	 BYTE PTR _bl2$[ebp+14], 0
  00058	8a 47 2a	 mov	 al, BYTE PTR [edi+42]
  0005b	88 45 e0	 mov	 BYTE PTR _bl2$[ebp+12], al
  0005e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00061	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00064	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00067	89 45 d8	 mov	 DWORD PTR _bl2$[ebp+4], eax
  0006a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0006d	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00070	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00073	89 45 dc	 mov	 DWORD PTR _bl2$[ebp+8], eax
  00076	c6 45 e1 00	 mov	 BYTE PTR _bl2$[ebp+13], 0
  0007a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0007d	89 45 d4	 mov	 DWORD PTR _bl2$[ebp], eax
  00080	8d 45 d4	 lea	 eax, DWORD PTR _bl2$[ebp]
  00083	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00086	e8 00 00 00 00	 call	 _luaX_next
; Line 1267
  0008b	56		 push	 esi
  0008c	e8 00 00 00 00	 call	 _statlist
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1268
  00094	81 7e 10 15 01
	00 00		 cmp	 DWORD PTR [esi+16], 277	; 00000115H
  0009b	75 72		 jne	 SHORT $LN26@repeatstat
  0009d	56		 push	 esi
  0009e	e8 00 00 00 00	 call	 _luaX_next
; Line 1269
  000a3	6a 00		 push	 0
  000a5	8d 45 e4	 lea	 eax, DWORD PTR _v$1[ebp]
  000a8	50		 push	 eax
  000a9	56		 push	 esi
  000aa	e8 00 00 00 00	 call	 _subexpr
  000af	8b 45 e4	 mov	 eax, DWORD PTR _v$1[ebp]
  000b2	b9 03 00 00 00	 mov	 ecx, 3
  000b7	83 f8 01	 cmp	 eax, 1
  000ba	0f 44 c1	 cmove	 eax, ecx
  000bd	89 45 e4	 mov	 DWORD PTR _v$1[ebp], eax
  000c0	8d 45 e4	 lea	 eax, DWORD PTR _v$1[ebp]
  000c3	50		 push	 eax
  000c4	ff 76 30	 push	 DWORD PTR [esi+48]
  000c7	e8 00 00 00 00	 call	 _luaK_goiftrue
; Line 1270
  000cc	8b 75 f8	 mov	 esi, DWORD PTR _v$1[ebp+20]
  000cf	83 c4 18	 add	 esp, 24			; 00000018H
  000d2	80 7d e1 00	 cmp	 BYTE PTR _bl2$[ebp+13], 0
  000d6	74 0f		 je	 SHORT $LN1@repeatstat
; Line 1271
  000d8	0f b6 45 e0	 movzx	 eax, BYTE PTR _bl2$[ebp+12]
  000dc	50		 push	 eax
  000dd	56		 push	 esi
  000de	57		 push	 edi
  000df	e8 00 00 00 00	 call	 _luaK_patchclose
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@repeatstat:
; Line 1272
  000e7	57		 push	 edi
  000e8	e8 00 00 00 00	 call	 _leaveblock
; Line 1273
  000ed	53		 push	 ebx
  000ee	56		 push	 esi
  000ef	57		 push	 edi
  000f0	e8 00 00 00 00	 call	 _luaK_patchlist
; Line 1274
  000f5	57		 push	 edi
  000f6	e8 00 00 00 00	 call	 _leaveblock
; Line 1275
  000fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fe	83 c4 14	 add	 esp, 20			; 00000014H
  00101	33 cd		 xor	 ecx, ebp
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
; Line 1268
$LN26@repeatstat:
  0010f	8b 45 0c	 mov	 eax, DWORD PTR _line$[ebp]
  00112	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00115	75 0b		 jne	 SHORT $LN39@repeatstat
  00117	68 15 01 00 00	 push	 277			; 00000115H
  0011c	56		 push	 esi
  0011d	e8 00 00 00 00	 call	 _error_expected
$LN40@repeatstat:
$LN39@repeatstat:
  00122	50		 push	 eax
  00123	68 11 01 00 00	 push	 273			; 00000111H
  00128	56		 push	 esi
  00129	e8 00 00 00 00	 call	 _luaX_token2str
  0012e	83 c4 08	 add	 esp, 8
  00131	50		 push	 eax
  00132	68 15 01 00 00	 push	 277			; 00000115H
  00137	56		 push	 esi
  00138	e8 00 00 00 00	 call	 _luaX_token2str
  0013d	83 c4 08	 add	 esp, 8
  00140	50		 push	 eax
  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
  00146	ff 76 34	 push	 DWORD PTR [esi+52]
  00149	e8 00 00 00 00	 call	 _luaO_pushfstring
  0014e	83 c4 14	 add	 esp, 20			; 00000014H
  00151	50		 push	 eax
  00152	56		 push	 esi
  00153	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN41@repeatstat:
$LN36@repeatstat:
  00158	cc		 int	 3
_repeatstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _whilestat
_TEXT	SEGMENT
_bl$1 = -64						; size = 16
_bl$ = -48						; size = 16
_whileinit$1$ = -32					; size = 4
_v$2 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_line$ = 12						; size = 4
_whilestat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1239
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
; Line 1245
  00015	57		 push	 edi
  00016	8b 5f 30	 mov	 ebx, DWORD PTR [edi+48]
  00019	e8 00 00 00 00	 call	 _luaX_next
; Line 1246
  0001e	53		 push	 ebx
  0001f	e8 00 00 00 00	 call	 _luaK_getlabel
  00024	89 45 e0	 mov	 DWORD PTR _whileinit$1$[ebp], eax
; Line 1247
  00027	8d 45 e4	 lea	 eax, DWORD PTR _v$2[ebp]
  0002a	6a 00		 push	 0
  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 _subexpr
  00033	8b 4d e4	 mov	 ecx, DWORD PTR _v$2[ebp]
  00036	b8 03 00 00 00	 mov	 eax, 3
  0003b	83 f9 01	 cmp	 ecx, 1
  0003e	0f 44 c8	 cmove	 ecx, eax
  00041	8d 45 e4	 lea	 eax, DWORD PTR _v$2[ebp]
  00044	50		 push	 eax
  00045	ff 77 30	 push	 DWORD PTR [edi+48]
  00048	89 4d e4	 mov	 DWORD PTR _v$2[ebp], ecx
  0004b	e8 00 00 00 00	 call	 _luaK_goiftrue
; Line 1248
  00050	c6 45 de 01	 mov	 BYTE PTR _bl$[ebp+14], 1
  00054	83 c4 1c	 add	 esp, 28			; 0000001cH
  00057	8a 43 2a	 mov	 al, BYTE PTR [ebx+42]
  0005a	88 45 dc	 mov	 BYTE PTR _bl$[ebp+12], al
  0005d	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00060	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00063	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00066	89 45 d4	 mov	 DWORD PTR _bl$[ebp+4], eax
  00069	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0006c	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0006f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00072	89 45 d8	 mov	 DWORD PTR _bl$[ebp+8], eax
  00075	c6 45 dd 00	 mov	 BYTE PTR _bl$[ebp+13], 0
  00079	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0007c	89 45 d0	 mov	 DWORD PTR _bl$[ebp], eax
  0007f	8d 45 d0	 lea	 eax, DWORD PTR _bl$[ebp]
  00082	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
; Line 1249
  00085	81 7f 10 03 01
	00 00		 cmp	 DWORD PTR [edi+16], 259	; 00000103H
  0008c	0f 85 9d 00 00
	00		 jne	 $LN44@whilestat
  00092	56		 push	 esi
  00093	57		 push	 edi
  00094	e8 00 00 00 00	 call	 _luaX_next
; Line 1250
  00099	8b 77 30	 mov	 esi, DWORD PTR [edi+48]
  0009c	c6 45 ce 00	 mov	 BYTE PTR _bl$1[ebp+14], 0
  000a0	57		 push	 edi
  000a1	8a 46 2a	 mov	 al, BYTE PTR [esi+42]
  000a4	88 45 cc	 mov	 BYTE PTR _bl$1[ebp+12], al
  000a7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000aa	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000ad	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000b0	89 45 c4	 mov	 DWORD PTR _bl$1[ebp+4], eax
  000b3	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b6	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000b9	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000bc	89 45 c8	 mov	 DWORD PTR _bl$1[ebp+8], eax
  000bf	c6 45 cd 00	 mov	 BYTE PTR _bl$1[ebp+13], 0
  000c3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c6	89 45 c0	 mov	 DWORD PTR _bl$1[ebp], eax
  000c9	8d 45 c0	 lea	 eax, DWORD PTR _bl$1[ebp]
  000cc	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000cf	e8 00 00 00 00	 call	 _statlist
  000d4	56		 push	 esi
  000d5	e8 00 00 00 00	 call	 _leaveblock
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1251
  000dd	ff 75 e0	 push	 DWORD PTR _whileinit$1$[ebp]
  000e0	53		 push	 ebx
  000e1	e8 00 00 00 00	 call	 _luaK_jump
  000e6	83 c4 04	 add	 esp, 4
  000e9	50		 push	 eax
  000ea	53		 push	 ebx
  000eb	e8 00 00 00 00	 call	 _luaK_patchlist
  000f0	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1252
  000f3	81 7f 10 06 01
	00 00		 cmp	 DWORD PTR [edi+16], 262	; 00000106H
  000fa	5e		 pop	 esi
  000fb	75 28		 jne	 SHORT $LN39@whilestat
  000fd	57		 push	 edi
  000fe	e8 00 00 00 00	 call	 _luaX_next
; Line 1253
  00103	53		 push	 ebx
  00104	e8 00 00 00 00	 call	 _leaveblock
; Line 1254
  00109	ff 75 f8	 push	 DWORD PTR _v$2[ebp+20]
  0010c	53		 push	 ebx
  0010d	e8 00 00 00 00	 call	 _luaK_patchtohere
; Line 1255
  00112	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00115	83 c4 10	 add	 esp, 16			; 00000010H
  00118	33 cd		 xor	 ecx, ebp
  0011a	5f		 pop	 edi
  0011b	5b		 pop	 ebx
  0011c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c3		 ret	 0
; Line 1252
$LN39@whilestat:
  00125	8b 45 0c	 mov	 eax, DWORD PTR _line$[ebp]
  00128	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0012b	74 0d		 je	 SHORT $LN46@whilestat
  0012d	eb 16		 jmp	 SHORT $LN47@whilestat
$LN44@whilestat:
; Line 1249
  0012f	68 03 01 00 00	 push	 259			; 00000103H
  00134	57		 push	 edi
  00135	e8 00 00 00 00	 call	 _error_expected
$LN48@whilestat:
$LN46@whilestat:
; Line 1252
  0013a	68 06 01 00 00	 push	 262			; 00000106H
  0013f	57		 push	 edi
  00140	e8 00 00 00 00	 call	 _error_expected
$LN49@whilestat:
$LN47@whilestat:
  00145	50		 push	 eax
  00146	68 16 01 00 00	 push	 278			; 00000116H
  0014b	57		 push	 edi
  0014c	e8 00 00 00 00	 call	 _luaX_token2str
  00151	83 c4 08	 add	 esp, 8
  00154	50		 push	 eax
  00155	68 06 01 00 00	 push	 262			; 00000106H
  0015a	57		 push	 edi
  0015b	e8 00 00 00 00	 call	 _luaX_token2str
  00160	83 c4 08	 add	 esp, 8
  00163	50		 push	 eax
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
  00169	ff 77 34	 push	 DWORD PTR [edi+52]
  0016c	e8 00 00 00 00	 call	 _luaO_pushfstring
  00171	83 c4 14	 add	 esp, 20			; 00000014H
  00174	50		 push	 eax
  00175	57		 push	 edi
  00176	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN50@whilestat:
$LN43@whilestat:
  0017b	cc		 int	 3
_whilestat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _labelstat
_TEXT	SEGMENT
_fs$1$ = 8						; size = 4
_ls$ = 8						; size = 4
_label$ = 12						; size = 4
_line$ = 16						; size = 4
_labelstat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1221
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 1223
  00005	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00008	57		 push	 edi
; Line 1226
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _label$[ebp]
  0000c	57		 push	 edi
  0000d	8b 5e 44	 mov	 ebx, DWORD PTR [esi+68]
  00010	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00013	83 c3 18	 add	 ebx, 24			; 00000018H
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	89 45 08	 mov	 DWORD PTR _fs$1$[ebp], eax
  0001b	e8 00 00 00 00	 call	 _checkrepeated
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1227
  00023	81 7e 10 20 01
	00 00		 cmp	 DWORD PTR [esi+16], 288	; 00000120H
  0002a	75 6d		 jne	 SHORT $LN57@labelstat
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _luaX_next
; Line 1229
  00032	8b 45 08	 mov	 eax, DWORD PTR _fs$1$[ebp]
  00035	ff 70 10	 push	 DWORD PTR [eax+16]
  00038	ff 75 10	 push	 DWORD PTR _line$[ebp]
  0003b	57		 push	 edi
  0003c	53		 push	 ebx
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _newlabelentry
  00043	83 c4 18	 add	 esp, 24			; 00000018H
  00046	8b f8		 mov	 edi, eax
; Line 1230
$LL13@labelstat:
  00048	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0004b	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  0004e	74 08		 je	 SHORT $LN11@labelstat
  00050	81 f9 20 01 00
	00		 cmp	 ecx, 288		; 00000120H
  00056	75 0b		 jne	 SHORT $LN12@labelstat
$LN11@labelstat:
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 _statement
  0005e	83 c4 04	 add	 esp, 4
  00061	eb e5		 jmp	 SHORT $LL13@labelstat
$LN12@labelstat:
; Line 1231
  00063	6a 00		 push	 0
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 _block_follow
  0006b	83 c4 08	 add	 esp, 8
  0006e	85 c0		 test	 eax, eax
  00070	74 13		 je	 SHORT $LN1@labelstat
; Line 1233
  00072	8b 45 08	 mov	 eax, DWORD PTR _fs$1$[ebp]
  00075	8b d7		 mov	 edx, edi
  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00079	03 d2		 add	 edx, edx
  0007b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0007e	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00081	88 44 d1 0c	 mov	 BYTE PTR [ecx+edx*8+12], al
$LN1@labelstat:
; Line 1235
  00085	c1 e7 04	 shl	 edi, 4
  00088	03 3b		 add	 edi, DWORD PTR [ebx]
  0008a	57		 push	 edi
  0008b	56		 push	 esi
  0008c	e8 00 00 00 00	 call	 _findgotos
  00091	83 c4 08	 add	 esp, 8
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
; Line 1236
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
$LN57@labelstat:
; Line 1227
  00099	68 20 01 00 00	 push	 288			; 00000120H
  0009e	56		 push	 esi
  0009f	e8 00 00 00 00	 call	 _error_expected
$LN59@labelstat:
$LN56@labelstat:
  000a4	cc		 int	 3
_labelstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _skipnoopstat
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_skipnoopstat PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1215
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
$LL3@skipnoopst:
; Line 1216
  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  0000d	74 07		 je	 SHORT $LN1@skipnoopst
  0000f	3d 20 01 00 00	 cmp	 eax, 288		; 00000120H
  00014	75 0b		 jne	 SHORT $LN2@skipnoopst
$LN1@skipnoopst:
; Line 1217
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _statement
  0001c	83 c4 04	 add	 esp, 4
  0001f	eb e6		 jmp	 SHORT $LL3@skipnoopst
$LN2@skipnoopst:
  00021	5e		 pop	 esi
; Line 1218
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_skipnoopstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _checkrepeated
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_ll$ = 12						; size = 4
_label$ = 16						; size = 4
_checkrepeated PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1201
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; Line 1203
  00004	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  00007	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	8b 45 0c	 mov	 eax, DWORD PTR _ll$[ebp]
  00010	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00013	3b ca		 cmp	 ecx, edx
  00015	7d 1c		 jge	 SHORT $LN2@checkrepea
; Line 1204
  00017	53		 push	 ebx
  00018	8b 18		 mov	 ebx, DWORD PTR [eax]
  0001a	8b c1		 mov	 eax, ecx
  0001c	c1 e0 04	 shl	 eax, 4
  0001f	56		 push	 esi
  00020	8b 75 10	 mov	 esi, DWORD PTR _label$[ebp]
  00023	03 c3		 add	 eax, ebx
$LL4@checkrepea:
  00025	3b 30		 cmp	 esi, DWORD PTR [eax]
  00027	74 0d		 je	 SHORT $LN16@checkrepea
; Line 1203
  00029	41		 inc	 ecx
  0002a	83 c0 10	 add	 eax, 16			; 00000010H
  0002d	3b ca		 cmp	 ecx, edx
  0002f	7c f4		 jl	 SHORT $LL4@checkrepea
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
$LN2@checkrepea:
  00033	5f		 pop	 edi
; Line 1211
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN16@checkrepea:
; Line 1207
  00036	03 c9		 add	 ecx, ecx
  00038	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0003b	ff 74 cb 08	 push	 DWORD PTR [ebx+ecx*8+8]
  0003f	50		 push	 eax
  00040	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FBAEKGNA@label?5?8?$CFs?8?5already?5defined?5on?5li@
  00048	ff 70 34	 push	 DWORD PTR [eax+52]
  0004b	e8 00 00 00 00	 call	 _luaO_pushfstring
; Line 1208
  00050	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00053	83 c4 10	 add	 esp, 16			; 00000010H
  00056	50		 push	 eax
  00057	51		 push	 ecx
  00058	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0005f	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN17@checkrepea:
$LN15@checkrepea:
  00064	cc		 int	 3
_checkrepeated ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _gotostat
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_pc$ = 12						; size = 4
_gotostat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1185
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 1186
  00005	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00008	57		 push	 edi
; Line 1189
  00009	56		 push	 esi
  0000a	81 7e 10 0a 01
	00 00		 cmp	 DWORD PTR [esi+16], 266	; 0000010aH
  00011	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00014	75 1f		 jne	 SHORT $LN2@gotostat
  00016	e8 00 00 00 00	 call	 _luaX_next
  0001b	83 c4 04	 add	 esp, 4
; Line 1190
  0001e	81 7e 10 24 01
	00 00		 cmp	 DWORD PTR [esi+16], 292	; 00000124H
  00025	75 46		 jne	 SHORT $LN18@gotostat
  00027	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 _luaX_next
  00030	83 c4 04	 add	 esp, 4
; Line 1191
  00033	eb 17		 jmp	 SHORT $LN1@gotostat
$LN2@gotostat:
; Line 1192
  00035	e8 00 00 00 00	 call	 _luaX_next
; Line 1193
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_05ELPHFHOI@break?$AA@
  0003f	ff 76 34	 push	 DWORD PTR [esi+52]
  00042	e8 00 00 00 00	 call	 _luaS_new
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	8b f8		 mov	 edi, eax
$LN1@gotostat:
; Line 1195
  0004c	ff 75 0c	 push	 DWORD PTR _pc$[ebp]
  0004f	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00052	53		 push	 ebx
  00053	57		 push	 edi
  00054	83 c0 0c	 add	 eax, 12			; 0000000cH
  00057	50		 push	 eax
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 _newlabelentry
; Line 1196
  0005e	50		 push	 eax
  0005f	56		 push	 esi
  00060	e8 00 00 00 00	 call	 _findlabel
  00065	83 c4 1c	 add	 esp, 28			; 0000001cH
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
; Line 1197
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
$LN18@gotostat:
; Line 1190
  0006d	68 24 01 00 00	 push	 292			; 00000124H
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 _error_expected
$LN20@gotostat:
$LN17@gotostat:
  00078	cc		 int	 3
_gotostat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _cond
_TEXT	SEGMENT
_v$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_cond	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1175
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 1178
  00014	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  00017	6a 00		 push	 0
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _subexpr
; Line 1179
  00020	8b 45 e4	 mov	 eax, DWORD PTR _v$[ebp]
  00023	b9 03 00 00 00	 mov	 ecx, 3
  00028	83 f8 01	 cmp	 eax, 1
  0002b	0f 44 c1	 cmove	 eax, ecx
  0002e	89 45 e4	 mov	 DWORD PTR _v$[ebp], eax
; Line 1180
  00031	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  00034	50		 push	 eax
  00035	ff 76 30	 push	 DWORD PTR [esi+48]
  00038	e8 00 00 00 00	 call	 _luaK_goiftrue
; Line 1182
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	83 c4 14	 add	 esp, 20			; 00000014H
  00043	8b 45 f8	 mov	 eax, DWORD PTR _v$[ebp+20]
  00046	33 cd		 xor	 ecx, ebp
  00048	5e		 pop	 esi
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_cond	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _assignment
_TEXT	SEGMENT
_nexps$1$ = -64						; size = 4
_nv$1 = -60						; size = 32
_e$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_lh$ = 12						; size = 4
_nvars$ = 16						; size = 4
_assignment PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1142
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _lh$[ebp]
; Line 1144
  00019	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001c	83 f8 08	 cmp	 eax, 8
  0001f	0f 8c 35 01 00
	00		 jl	 $LN7@assignment
  00025	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00028	0f 8f 2c 01 00
	00		 jg	 $LN7@assignment
; Line 1145
  0002e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00031	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00034	75 54		 jne	 SHORT $LN6@assignment
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 _luaX_next
; Line 1148
  0003c	8d 45 cc	 lea	 eax, DWORD PTR _nv$1[ebp+8]
  0003f	89 7d c4	 mov	 DWORD PTR _nv$1[ebp], edi
  00042	50		 push	 eax
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _suffixedexp
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1149
  0004c	83 7d cc 0a	 cmp	 DWORD PTR _nv$1[ebp+8], 10 ; 0000000aH
  00050	74 0e		 je	 SHORT $LN5@assignment
; Line 1150
  00052	8d 45 cc	 lea	 eax, DWORD PTR _nv$1[ebp+8]
  00055	50		 push	 eax
  00056	57		 push	 edi
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 _check_conflict
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@assignment:
; Line 1152
  00060	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00063	8b 4d 10	 mov	 ecx, DWORD PTR _nvars$[ebp]
  00066	0f b7 40 6e	 movzx	 eax, WORD PTR [eax+110]
  0006a	03 c1		 add	 eax, ecx
  0006c	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00071	0f 8f c9 00 00
	00		 jg	 $LN29@assignment
; Line 1153
  00077	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0007a	50		 push	 eax
  0007b	8d 45 c4	 lea	 eax, DWORD PTR _nv$1[ebp]
  0007e	50		 push	 eax
  0007f	56		 push	 esi
  00080	e8 00 00 00 00	 call	 _assignment
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1155
  00088	eb 44		 jmp	 SHORT $LN2@assignment
$LN6@assignment:
; Line 1157
  0008a	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  0008d	0f 85 bf 00 00
	00		 jne	 $LN31@assignment
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 _luaX_next
; Line 1158
  00099	8d 45 e4	 lea	 eax, DWORD PTR _e$[ebp]
  0009c	50		 push	 eax
  0009d	56		 push	 esi
  0009e	e8 00 00 00 00	 call	 _explist
; Line 1159
  000a3	8b 5d 10	 mov	 ebx, DWORD PTR _nvars$[ebp]
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	89 45 c0	 mov	 DWORD PTR _nexps$1$[ebp], eax
  000ac	3b c3		 cmp	 eax, ebx
  000ae	74 60		 je	 SHORT $LN3@assignment
; Line 1160
  000b0	8d 4d e4	 lea	 ecx, DWORD PTR _e$[ebp]
  000b3	51		 push	 ecx
  000b4	50		 push	 eax
  000b5	53		 push	 ebx
  000b6	56		 push	 esi
  000b7	e8 00 00 00 00	 call	 _adjust_assign
; Line 1161
  000bc	8b 4d c0	 mov	 ecx, DWORD PTR _nexps$1$[ebp]
  000bf	83 c4 10	 add	 esp, 16			; 00000010H
  000c2	3b cb		 cmp	 ecx, ebx
  000c4	7e 08		 jle	 SHORT $LN2@assignment
; Line 1162
  000c6	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000c9	2a d9		 sub	 bl, cl
  000cb	00 58 2c	 add	 BYTE PTR [eax+44], bl
$LN2@assignment:
; Line 1170
  000ce	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000d1	0f b6 41 2c	 movzx	 eax, BYTE PTR [ecx+44]
  000d5	48		 dec	 eax
  000d6	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _e$[ebp+16], -1
  000dd	89 45 ec	 mov	 DWORD PTR _e$[ebp+8], eax
; Line 1171
  000e0	8d 45 e4	 lea	 eax, DWORD PTR _e$[ebp]
  000e3	50		 push	 eax
  000e4	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  000e7	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _e$[ebp+20], -1
  000ee	50		 push	 eax
  000ef	51		 push	 ecx
  000f0	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _e$[ebp], 7
  000f7	e8 00 00 00 00	 call	 _luaK_storevar
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
; Line 1172
  00102	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00105	33 cd		 xor	 ecx, ebp
  00107	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
$LN3@assignment:
; Line 1165
  00110	8d 45 e4	 lea	 eax, DWORD PTR _e$[ebp]
  00113	50		 push	 eax
  00114	ff 76 30	 push	 DWORD PTR [esi+48]
  00117	e8 00 00 00 00	 call	 _luaK_setoneret
; Line 1166
  0011c	8d 45 e4	 lea	 eax, DWORD PTR _e$[ebp]
  0011f	50		 push	 eax
  00120	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00123	50		 push	 eax
  00124	ff 76 30	 push	 DWORD PTR [esi+48]
  00127	e8 00 00 00 00	 call	 _luaK_storevar
; Line 1172
  0012c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012f	83 c4 14	 add	 esp, 20			; 00000014H
  00132	33 cd		 xor	 ecx, ebp
  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
$LN29@assignment:
; Line 1152
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_08CMAFAEJC@C?5levels?$AA@
  00145	68 c8 00 00 00	 push	 200			; 000000c8H
  0014a	ff 76 30	 push	 DWORD PTR [esi+48]
  0014d	e8 00 00 00 00	 call	 _errorlimit
$LN32@assignment:
$LN31@assignment:
; Line 1157
  00152	6a 3d		 push	 61			; 0000003dH
  00154	56		 push	 esi
  00155	e8 00 00 00 00	 call	 _error_expected
$LN33@assignment:
$LN7@assignment:
; Line 1144
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MNJHOOI@syntax?5error?$AA@
  0015f	56		 push	 esi
  00160	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN34@assignment:
$LN28@assignment:
  00165	cc		 int	 3
_assignment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _check_conflict
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_lh$ = 12						; size = 4
_v$ = 16						; size = 4
_check_conflict PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1114
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1115
  00003	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 78 30	 mov	 edi, DWORD PTR [eax+48]
; Line 1117
  0000c	33 f6		 xor	 esi, esi
; Line 1118
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _lh$[ebp]
  00011	0f b6 5f 2c	 movzx	 ebx, BYTE PTR [edi+44]
  00015	85 c0		 test	 eax, eax
  00017	74 6f		 je	 SHORT $LN1@check_conf
  00019	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0001c	8d 64 24 00	 npad	 4
$LL7@check_conf:
; Line 1119
  00020	83 78 08 0a	 cmp	 DWORD PTR [eax+8], 10	; 0000000aH
  00024	75 34		 jne	 SHORT $LN6@check_conf
; Line 1121
  00026	0f b6 48 13	 movzx	 ecx, BYTE PTR [eax+19]
  0002a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0002c	75 15		 jne	 SHORT $LN3@check_conf
  0002e	0f b6 48 12	 movzx	 ecx, BYTE PTR [eax+18]
  00032	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  00035	75 0c		 jne	 SHORT $LN3@check_conf
; Line 1122
  00037	be 01 00 00 00	 mov	 esi, 1
; Line 1123
  0003c	c6 40 13 08	 mov	 BYTE PTR [eax+19], 8
; Line 1124
  00040	88 58 12	 mov	 BYTE PTR [eax+18], bl
$LN3@check_conf:
; Line 1127
  00043	83 3a 08	 cmp	 DWORD PTR [edx], 8
  00046	75 12		 jne	 SHORT $LN6@check_conf
  00048	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0004c	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0004f	75 09		 jne	 SHORT $LN6@check_conf
; Line 1128
  00051	be 01 00 00 00	 mov	 esi, 1
; Line 1129
  00056	66 89 58 10	 mov	 WORD PTR [eax+16], bx
$LN6@check_conf:
; Line 1118
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	85 c0		 test	 eax, eax
  0005e	75 c0		 jne	 SHORT $LL7@check_conf
; Line 1133
  00060	85 f6		 test	 esi, esi
  00062	74 24		 je	 SHORT $LN1@check_conf
; Line 1136
  00064	50		 push	 eax
  00065	ff 72 08	 push	 DWORD PTR [edx+8]
  00068	33 c9		 xor	 ecx, ecx
  0006a	b8 05 00 00 00	 mov	 eax, 5
  0006f	83 3a 08	 cmp	 DWORD PTR [edx], 8
  00072	53		 push	 ebx
  00073	0f 44 c1	 cmove	 eax, ecx
  00076	50		 push	 eax
  00077	57		 push	 edi
  00078	e8 00 00 00 00	 call	 _luaK_codeABC
; Line 1137
  0007d	6a 01		 push	 1
  0007f	57		 push	 edi
  00080	e8 00 00 00 00	 call	 _luaK_reserveregs
  00085	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1@check_conf:
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
; Line 1139
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_check_conflict ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _block
_TEXT	SEGMENT
_bl$ = -16						; size = 16
_ls$ = 8						; size = 4
_block	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1088
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; Line 1090
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _ls$[ebp]
; Line 1092
  00009	c6 45 fe 00	 mov	 BYTE PTR _bl$[ebp+14], 0
  0000d	56		 push	 esi
; Line 1093
  0000e	51		 push	 ecx
  0000f	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00012	8a 46 2a	 mov	 al, BYTE PTR [esi+42]
  00015	88 45 fc	 mov	 BYTE PTR _bl$[ebp+12], al
  00018	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001b	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0001e	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00021	89 45 f4	 mov	 DWORD PTR _bl$[ebp+4], eax
  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0002a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0002d	89 45 f8	 mov	 DWORD PTR _bl$[ebp+8], eax
  00030	c6 45 fd 00	 mov	 BYTE PTR _bl$[ebp+13], 0
  00034	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00037	89 45 f0	 mov	 DWORD PTR _bl$[ebp], eax
  0003a	8d 45 f0	 lea	 eax, DWORD PTR _bl$[ebp]
  0003d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00040	e8 00 00 00 00	 call	 _statlist
; Line 1094
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 _leaveblock
  0004b	83 c4 08	 add	 esp, 8
  0004e	5e		 pop	 esi
; Line 1095
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_block	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _subexpr
_TEXT	SEGMENT
_v$GSCopy$1$ = -36					; size = 4
_op$1$ = -32						; size = 4
_uop$1$ = -32						; size = 4
_v2$1 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_v$ = 12						; size = 4
_limit$ = 16						; size = 4
_subexpr PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1043
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _ls$[ebp]
; Line 1046
  00014	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8b 7d 0c	 mov	 edi, DWORD PTR _v$[ebp]
  0001e	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  00021	89 7d dc	 mov	 DWORD PTR _v$GSCopy$1$[ebp], edi
  00024	66 ff 40 6e	 inc	 WORD PTR [eax+110]
  00028	66 39 48 6e	 cmp	 WORD PTR [eax+110], cx
  0002c	0f 87 d3 00 00
	00		 ja	 $LN20@subexpr
; Line 1047
  00032	ff 73 10	 push	 DWORD PTR [ebx+16]
  00035	e8 00 00 00 00	 call	 _getunopr
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 45 e0	 mov	 DWORD PTR _uop$1$[ebp], eax
; Line 1048
  00040	83 f8 04	 cmp	 eax, 4
  00043	74 24		 je	 SHORT $LN4@subexpr
; Line 1049
  00045	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
; Line 1050
  00048	53		 push	 ebx
  00049	e8 00 00 00 00	 call	 _luaX_next
; Line 1051
  0004e	6a 0c		 push	 12			; 0000000cH
  00050	57		 push	 edi
  00051	53		 push	 ebx
  00052	e8 00 00 00 00	 call	 _subexpr
; Line 1052
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	ff 75 e0	 push	 DWORD PTR _uop$1$[ebp]
  0005c	ff 73 30	 push	 DWORD PTR [ebx+48]
  0005f	e8 00 00 00 00	 call	 _luaK_prefix
  00064	83 c4 20	 add	 esp, 32			; 00000020H
  00067	eb 0a		 jmp	 SHORT $LN3@subexpr
$LN4@subexpr:
; Line 1054
  00069	57		 push	 edi
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _simpleexp
  00070	83 c4 08	 add	 esp, 8
$LN3@subexpr:
; Line 1056
  00073	ff 73 10	 push	 DWORD PTR [ebx+16]
  00076	e8 00 00 00 00	 call	 _getbinopr
  0007b	8b f0		 mov	 esi, eax
  0007d	89 45 e0	 mov	 DWORD PTR _op$1$[ebp], eax
  00080	83 c4 04	 add	 esp, 4
; Line 1057
  00083	83 fe 15	 cmp	 esi, 21			; 00000015H
  00086	74 5e		 je	 SHORT $LN18@subexpr
  00088	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL2@subexpr:
  00090	0f b6 04 75 00
	00 00 00	 movzx	 eax, BYTE PTR _priority[esi*2]
  00098	3b 45 10	 cmp	 eax, DWORD PTR _limit$[ebp]
  0009b	7e 49		 jle	 SHORT $LN18@subexpr
; Line 1060
  0009d	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
; Line 1061
  000a0	53		 push	 ebx
  000a1	e8 00 00 00 00	 call	 _luaX_next
; Line 1062
  000a6	ff 75 dc	 push	 DWORD PTR _v$GSCopy$1$[ebp]
  000a9	56		 push	 esi
  000aa	ff 73 30	 push	 DWORD PTR [ebx+48]
  000ad	e8 00 00 00 00	 call	 _luaK_infix
; Line 1064
  000b2	0f b6 04 75 01
	00 00 00	 movzx	 eax, BYTE PTR _priority[esi*2+1]
  000ba	50		 push	 eax
  000bb	8d 45 e4	 lea	 eax, DWORD PTR _v2$1[ebp]
  000be	50		 push	 eax
  000bf	53		 push	 ebx
  000c0	e8 00 00 00 00	 call	 _subexpr
  000c5	8b f0		 mov	 esi, eax
; Line 1065
  000c7	8d 45 e4	 lea	 eax, DWORD PTR _v2$1[ebp]
  000ca	57		 push	 edi
  000cb	50		 push	 eax
  000cc	ff 75 dc	 push	 DWORD PTR _v$GSCopy$1$[ebp]
  000cf	8b 45 e0	 mov	 eax, DWORD PTR _op$1$[ebp]
  000d2	50		 push	 eax
  000d3	ff 73 30	 push	 DWORD PTR [ebx+48]
  000d6	e8 00 00 00 00	 call	 _luaK_posfix
  000db	83 c4 30	 add	 esp, 48			; 00000030H
; Line 1066
  000de	89 75 e0	 mov	 DWORD PTR _op$1$[ebp], esi
  000e1	83 fe 15	 cmp	 esi, 21			; 00000015H
  000e4	75 aa		 jne	 SHORT $LL2@subexpr
$LN18@subexpr:
; Line 1068
  000e6	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  000e9	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000ee	5f		 pop	 edi
  000ef	66 01 48 6e	 add	 WORD PTR [eax+110], cx
; Line 1069
  000f3	8b c6		 mov	 eax, esi
; Line 1070
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	5e		 pop	 esi
  000f9	33 cd		 xor	 ecx, ebp
  000fb	5b		 pop	 ebx
  000fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
$LN20@subexpr:
; Line 1046
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_08CMAFAEJC@C?5levels?$AA@
  0010a	68 c8 00 00 00	 push	 200			; 000000c8H
  0010f	ff 73 30	 push	 DWORD PTR [ebx+48]
  00112	e8 00 00 00 00	 call	 _errorlimit
$LN22@subexpr:
$LN19@subexpr:
  00117	cc		 int	 3
_subexpr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getbinopr
_TEXT	SEGMENT
_op$ = 8						; size = 4
_getbinopr PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 992
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 993
  00003	8b 45 08	 mov	 eax, DWORD PTR _op$[ebp]
  00006	83 c0 db	 add	 eax, -37		; ffffffdbH
  00009	3d fa 00 00 00	 cmp	 eax, 250		; 000000faH
  0000e	0f 87 9e 00 00
	00		 ja	 $LN1@getbinopr
  00014	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN27@getbinopr[eax]
  0001b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN29@getbinopr[eax*4]
$LN22@getbinopr:
; Line 994
  00022	33 c0		 xor	 eax, eax
; Line 1017
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN21@getbinopr:
; Line 995
  00026	b8 01 00 00 00	 mov	 eax, 1
; Line 1017
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN20@getbinopr:
; Line 996
  0002d	b8 02 00 00 00	 mov	 eax, 2
; Line 1017
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN19@getbinopr:
; Line 997
  00034	b8 03 00 00 00	 mov	 eax, 3
; Line 1017
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN18@getbinopr:
; Line 998
  0003b	b8 04 00 00 00	 mov	 eax, 4
; Line 1017
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
$LN17@getbinopr:
; Line 999
  00042	b8 05 00 00 00	 mov	 eax, 5
; Line 1017
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN16@getbinopr:
; Line 1000
  00049	b8 06 00 00 00	 mov	 eax, 6
; Line 1017
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN15@getbinopr:
; Line 1001
  00050	b8 07 00 00 00	 mov	 eax, 7
; Line 1017
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN14@getbinopr:
; Line 1002
  00057	b8 08 00 00 00	 mov	 eax, 8
; Line 1017
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN13@getbinopr:
; Line 1003
  0005e	b8 09 00 00 00	 mov	 eax, 9
; Line 1017
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
$LN12@getbinopr:
; Line 1004
  00065	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
; Line 1017
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
$LN11@getbinopr:
; Line 1005
  0006c	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
; Line 1017
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
$LN10@getbinopr:
; Line 1006
  00073	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
; Line 1017
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
$LN9@getbinopr:
; Line 1007
  0007a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
; Line 1017
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN8@getbinopr:
; Line 1008
  00081	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH
; Line 1017
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN7@getbinopr:
; Line 1009
  00088	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
; Line 1017
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
$LN6@getbinopr:
; Line 1010
  0008f	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
; Line 1017
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$LN5@getbinopr:
; Line 1011
  00096	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
; Line 1017
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
$LN4@getbinopr:
; Line 1012
  0009d	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
; Line 1017
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
$LN3@getbinopr:
; Line 1013
  000a4	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
; Line 1017
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
$LN2@getbinopr:
; Line 1014
  000ab	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
; Line 1017
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
$LN1@getbinopr:
; Line 1015
  000b2	b8 15 00 00 00	 mov	 eax, 21			; 00000015H
; Line 1017
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
  000b9	8d 49 00	 npad	 3
$LN29@getbinopr:
  000bc	00 00 00 00	 DD	 $LN19@getbinopr
  000c0	00 00 00 00	 DD	 $LN15@getbinopr
  000c4	00 00 00 00	 DD	 $LN20@getbinopr
  000c8	00 00 00 00	 DD	 $LN22@getbinopr
  000cc	00 00 00 00	 DD	 $LN21@getbinopr
  000d0	00 00 00 00	 DD	 $LN17@getbinopr
  000d4	00 00 00 00	 DD	 $LN7@getbinopr
  000d8	00 00 00 00	 DD	 $LN5@getbinopr
  000dc	00 00 00 00	 DD	 $LN18@getbinopr
  000e0	00 00 00 00	 DD	 $LN14@getbinopr
  000e4	00 00 00 00	 DD	 $LN13@getbinopr
  000e8	00 00 00 00	 DD	 $LN3@getbinopr
  000ec	00 00 00 00	 DD	 $LN2@getbinopr
  000f0	00 00 00 00	 DD	 $LN16@getbinopr
  000f4	00 00 00 00	 DD	 $LN10@getbinopr
  000f8	00 00 00 00	 DD	 $LN8@getbinopr
  000fc	00 00 00 00	 DD	 $LN4@getbinopr
  00100	00 00 00 00	 DD	 $LN6@getbinopr
  00104	00 00 00 00	 DD	 $LN9@getbinopr
  00108	00 00 00 00	 DD	 $LN12@getbinopr
  0010c	00 00 00 00	 DD	 $LN11@getbinopr
  00110	00 00 00 00	 DD	 $LN1@getbinopr
$LN27@getbinopr:
  00114	00		 DB	 0
  00115	01		 DB	 1
  00116	15		 DB	 21			; 00000015H
  00117	15		 DB	 21			; 00000015H
  00118	15		 DB	 21			; 00000015H
  00119	02		 DB	 2
  0011a	03		 DB	 3
  0011b	15		 DB	 21			; 00000015H
  0011c	04		 DB	 4
  0011d	15		 DB	 21			; 00000015H
  0011e	05		 DB	 5
  0011f	15		 DB	 21			; 00000015H
  00120	15		 DB	 21			; 00000015H
  00121	15		 DB	 21			; 00000015H
  00122	15		 DB	 21			; 00000015H
  00123	15		 DB	 21			; 00000015H
  00124	15		 DB	 21			; 00000015H
  00125	15		 DB	 21			; 00000015H
  00126	15		 DB	 21			; 00000015H
  00127	15		 DB	 21			; 00000015H
  00128	15		 DB	 21			; 00000015H
  00129	15		 DB	 21			; 00000015H
  0012a	15		 DB	 21			; 00000015H
  0012b	06		 DB	 6
  0012c	15		 DB	 21			; 00000015H
  0012d	07		 DB	 7
  0012e	15		 DB	 21			; 00000015H
  0012f	15		 DB	 21			; 00000015H
  00130	15		 DB	 21			; 00000015H
  00131	15		 DB	 21			; 00000015H
  00132	15		 DB	 21			; 00000015H
  00133	15		 DB	 21			; 00000015H
  00134	15		 DB	 21			; 00000015H
  00135	15		 DB	 21			; 00000015H
  00136	15		 DB	 21			; 00000015H
  00137	15		 DB	 21			; 00000015H
  00138	15		 DB	 21			; 00000015H
  00139	15		 DB	 21			; 00000015H
  0013a	15		 DB	 21			; 00000015H
  0013b	15		 DB	 21			; 00000015H
  0013c	15		 DB	 21			; 00000015H
  0013d	15		 DB	 21			; 00000015H
  0013e	15		 DB	 21			; 00000015H
  0013f	15		 DB	 21			; 00000015H
  00140	15		 DB	 21			; 00000015H
  00141	15		 DB	 21			; 00000015H
  00142	15		 DB	 21			; 00000015H
  00143	15		 DB	 21			; 00000015H
  00144	15		 DB	 21			; 00000015H
  00145	15		 DB	 21			; 00000015H
  00146	15		 DB	 21			; 00000015H
  00147	15		 DB	 21			; 00000015H
  00148	15		 DB	 21			; 00000015H
  00149	15		 DB	 21			; 00000015H
  0014a	15		 DB	 21			; 00000015H
  0014b	15		 DB	 21			; 00000015H
  0014c	15		 DB	 21			; 00000015H
  0014d	08		 DB	 8
  0014e	15		 DB	 21			; 00000015H
  0014f	15		 DB	 21			; 00000015H
  00150	15		 DB	 21			; 00000015H
  00151	15		 DB	 21			; 00000015H
  00152	15		 DB	 21			; 00000015H
  00153	15		 DB	 21			; 00000015H
  00154	15		 DB	 21			; 00000015H
  00155	15		 DB	 21			; 00000015H
  00156	15		 DB	 21			; 00000015H
  00157	15		 DB	 21			; 00000015H
  00158	15		 DB	 21			; 00000015H
  00159	15		 DB	 21			; 00000015H
  0015a	15		 DB	 21			; 00000015H
  0015b	15		 DB	 21			; 00000015H
  0015c	15		 DB	 21			; 00000015H
  0015d	15		 DB	 21			; 00000015H
  0015e	15		 DB	 21			; 00000015H
  0015f	15		 DB	 21			; 00000015H
  00160	15		 DB	 21			; 00000015H
  00161	15		 DB	 21			; 00000015H
  00162	15		 DB	 21			; 00000015H
  00163	15		 DB	 21			; 00000015H
  00164	15		 DB	 21			; 00000015H
  00165	15		 DB	 21			; 00000015H
  00166	15		 DB	 21			; 00000015H
  00167	15		 DB	 21			; 00000015H
  00168	15		 DB	 21			; 00000015H
  00169	15		 DB	 21			; 00000015H
  0016a	15		 DB	 21			; 00000015H
  0016b	09		 DB	 9
  0016c	15		 DB	 21			; 00000015H
  0016d	0a		 DB	 10			; 0000000aH
  0016e	15		 DB	 21			; 00000015H
  0016f	15		 DB	 21			; 00000015H
  00170	15		 DB	 21			; 00000015H
  00171	15		 DB	 21			; 00000015H
  00172	15		 DB	 21			; 00000015H
  00173	15		 DB	 21			; 00000015H
  00174	15		 DB	 21			; 00000015H
  00175	15		 DB	 21			; 00000015H
  00176	15		 DB	 21			; 00000015H
  00177	15		 DB	 21			; 00000015H
  00178	15		 DB	 21			; 00000015H
  00179	15		 DB	 21			; 00000015H
  0017a	15		 DB	 21			; 00000015H
  0017b	15		 DB	 21			; 00000015H
  0017c	15		 DB	 21			; 00000015H
  0017d	15		 DB	 21			; 00000015H
  0017e	15		 DB	 21			; 00000015H
  0017f	15		 DB	 21			; 00000015H
  00180	15		 DB	 21			; 00000015H
  00181	15		 DB	 21			; 00000015H
  00182	15		 DB	 21			; 00000015H
  00183	15		 DB	 21			; 00000015H
  00184	15		 DB	 21			; 00000015H
  00185	15		 DB	 21			; 00000015H
  00186	15		 DB	 21			; 00000015H
  00187	15		 DB	 21			; 00000015H
  00188	15		 DB	 21			; 00000015H
  00189	15		 DB	 21			; 00000015H
  0018a	15		 DB	 21			; 00000015H
  0018b	15		 DB	 21			; 00000015H
  0018c	15		 DB	 21			; 00000015H
  0018d	15		 DB	 21			; 00000015H
  0018e	15		 DB	 21			; 00000015H
  0018f	15		 DB	 21			; 00000015H
  00190	15		 DB	 21			; 00000015H
  00191	15		 DB	 21			; 00000015H
  00192	15		 DB	 21			; 00000015H
  00193	15		 DB	 21			; 00000015H
  00194	15		 DB	 21			; 00000015H
  00195	15		 DB	 21			; 00000015H
  00196	15		 DB	 21			; 00000015H
  00197	15		 DB	 21			; 00000015H
  00198	15		 DB	 21			; 00000015H
  00199	15		 DB	 21			; 00000015H
  0019a	15		 DB	 21			; 00000015H
  0019b	15		 DB	 21			; 00000015H
  0019c	15		 DB	 21			; 00000015H
  0019d	15		 DB	 21			; 00000015H
  0019e	15		 DB	 21			; 00000015H
  0019f	15		 DB	 21			; 00000015H
  001a0	15		 DB	 21			; 00000015H
  001a1	15		 DB	 21			; 00000015H
  001a2	15		 DB	 21			; 00000015H
  001a3	15		 DB	 21			; 00000015H
  001a4	15		 DB	 21			; 00000015H
  001a5	15		 DB	 21			; 00000015H
  001a6	15		 DB	 21			; 00000015H
  001a7	15		 DB	 21			; 00000015H
  001a8	15		 DB	 21			; 00000015H
  001a9	15		 DB	 21			; 00000015H
  001aa	15		 DB	 21			; 00000015H
  001ab	15		 DB	 21			; 00000015H
  001ac	15		 DB	 21			; 00000015H
  001ad	15		 DB	 21			; 00000015H
  001ae	15		 DB	 21			; 00000015H
  001af	15		 DB	 21			; 00000015H
  001b0	15		 DB	 21			; 00000015H
  001b1	15		 DB	 21			; 00000015H
  001b2	15		 DB	 21			; 00000015H
  001b3	15		 DB	 21			; 00000015H
  001b4	15		 DB	 21			; 00000015H
  001b5	15		 DB	 21			; 00000015H
  001b6	15		 DB	 21			; 00000015H
  001b7	15		 DB	 21			; 00000015H
  001b8	15		 DB	 21			; 00000015H
  001b9	15		 DB	 21			; 00000015H
  001ba	15		 DB	 21			; 00000015H
  001bb	15		 DB	 21			; 00000015H
  001bc	15		 DB	 21			; 00000015H
  001bd	15		 DB	 21			; 00000015H
  001be	15		 DB	 21			; 00000015H
  001bf	15		 DB	 21			; 00000015H
  001c0	15		 DB	 21			; 00000015H
  001c1	15		 DB	 21			; 00000015H
  001c2	15		 DB	 21			; 00000015H
  001c3	15		 DB	 21			; 00000015H
  001c4	15		 DB	 21			; 00000015H
  001c5	15		 DB	 21			; 00000015H
  001c6	15		 DB	 21			; 00000015H
  001c7	15		 DB	 21			; 00000015H
  001c8	15		 DB	 21			; 00000015H
  001c9	15		 DB	 21			; 00000015H
  001ca	15		 DB	 21			; 00000015H
  001cb	15		 DB	 21			; 00000015H
  001cc	15		 DB	 21			; 00000015H
  001cd	15		 DB	 21			; 00000015H
  001ce	15		 DB	 21			; 00000015H
  001cf	15		 DB	 21			; 00000015H
  001d0	15		 DB	 21			; 00000015H
  001d1	15		 DB	 21			; 00000015H
  001d2	15		 DB	 21			; 00000015H
  001d3	15		 DB	 21			; 00000015H
  001d4	15		 DB	 21			; 00000015H
  001d5	15		 DB	 21			; 00000015H
  001d6	15		 DB	 21			; 00000015H
  001d7	15		 DB	 21			; 00000015H
  001d8	15		 DB	 21			; 00000015H
  001d9	15		 DB	 21			; 00000015H
  001da	15		 DB	 21			; 00000015H
  001db	15		 DB	 21			; 00000015H
  001dc	15		 DB	 21			; 00000015H
  001dd	15		 DB	 21			; 00000015H
  001de	15		 DB	 21			; 00000015H
  001df	15		 DB	 21			; 00000015H
  001e0	15		 DB	 21			; 00000015H
  001e1	15		 DB	 21			; 00000015H
  001e2	15		 DB	 21			; 00000015H
  001e3	15		 DB	 21			; 00000015H
  001e4	15		 DB	 21			; 00000015H
  001e5	15		 DB	 21			; 00000015H
  001e6	15		 DB	 21			; 00000015H
  001e7	15		 DB	 21			; 00000015H
  001e8	15		 DB	 21			; 00000015H
  001e9	15		 DB	 21			; 00000015H
  001ea	15		 DB	 21			; 00000015H
  001eb	15		 DB	 21			; 00000015H
  001ec	15		 DB	 21			; 00000015H
  001ed	15		 DB	 21			; 00000015H
  001ee	15		 DB	 21			; 00000015H
  001ef	15		 DB	 21			; 00000015H
  001f0	0b		 DB	 11			; 0000000bH
  001f1	15		 DB	 21			; 00000015H
  001f2	15		 DB	 21			; 00000015H
  001f3	15		 DB	 21			; 00000015H
  001f4	15		 DB	 21			; 00000015H
  001f5	15		 DB	 21			; 00000015H
  001f6	15		 DB	 21			; 00000015H
  001f7	15		 DB	 21			; 00000015H
  001f8	15		 DB	 21			; 00000015H
  001f9	15		 DB	 21			; 00000015H
  001fa	15		 DB	 21			; 00000015H
  001fb	15		 DB	 21			; 00000015H
  001fc	15		 DB	 21			; 00000015H
  001fd	15		 DB	 21			; 00000015H
  001fe	15		 DB	 21			; 00000015H
  001ff	0c		 DB	 12			; 0000000cH
  00200	15		 DB	 21			; 00000015H
  00201	15		 DB	 21			; 00000015H
  00202	15		 DB	 21			; 00000015H
  00203	15		 DB	 21			; 00000015H
  00204	15		 DB	 21			; 00000015H
  00205	15		 DB	 21			; 00000015H
  00206	0d		 DB	 13			; 0000000dH
  00207	0e		 DB	 14			; 0000000eH
  00208	15		 DB	 21			; 00000015H
  00209	0f		 DB	 15			; 0000000fH
  0020a	10		 DB	 16			; 00000010H
  0020b	11		 DB	 17			; 00000011H
  0020c	12		 DB	 18			; 00000012H
  0020d	13		 DB	 19			; 00000013H
  0020e	14		 DB	 20			; 00000014H
_getbinopr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getunopr
_TEXT	SEGMENT
_op$ = 8						; size = 4
_getunopr PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 981
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 982
  00003	8b 45 08	 mov	 eax, DWORD PTR _op$[ebp]
  00006	83 c0 dd	 add	 eax, -35		; ffffffddH
  00009	3d ec 00 00 00	 cmp	 eax, 236		; 000000ecH
  0000e	77 27		 ja	 SHORT $LN1@getunopr
  00010	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN10@getunopr[eax]
  00017	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@getunopr[eax*4]
$LN5@getunopr:
; Line 983
  0001e	b8 02 00 00 00	 mov	 eax, 2
; Line 989
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN4@getunopr:
; Line 984
  00025	33 c0		 xor	 eax, eax
; Line 989
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN3@getunopr:
; Line 985
  00029	b8 01 00 00 00	 mov	 eax, 1
; Line 989
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN2@getunopr:
; Line 986
  00030	b8 03 00 00 00	 mov	 eax, 3
; Line 989
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN1@getunopr:
; Line 987
  00037	b8 04 00 00 00	 mov	 eax, 4
; Line 989
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
  0003e	8b ff		 npad	 2
$LN12@getunopr:
  00040	00 00 00 00	 DD	 $LN2@getunopr
  00044	00 00 00 00	 DD	 $LN4@getunopr
  00048	00 00 00 00	 DD	 $LN3@getunopr
  0004c	00 00 00 00	 DD	 $LN5@getunopr
  00050	00 00 00 00	 DD	 $LN1@getunopr
$LN10@getunopr:
  00054	00		 DB	 0
  00055	04		 DB	 4
  00056	04		 DB	 4
  00057	04		 DB	 4
  00058	04		 DB	 4
  00059	04		 DB	 4
  0005a	04		 DB	 4
  0005b	04		 DB	 4
  0005c	04		 DB	 4
  0005d	04		 DB	 4
  0005e	01		 DB	 1
  0005f	04		 DB	 4
  00060	04		 DB	 4
  00061	04		 DB	 4
  00062	04		 DB	 4
  00063	04		 DB	 4
  00064	04		 DB	 4
  00065	04		 DB	 4
  00066	04		 DB	 4
  00067	04		 DB	 4
  00068	04		 DB	 4
  00069	04		 DB	 4
  0006a	04		 DB	 4
  0006b	04		 DB	 4
  0006c	04		 DB	 4
  0006d	04		 DB	 4
  0006e	04		 DB	 4
  0006f	04		 DB	 4
  00070	04		 DB	 4
  00071	04		 DB	 4
  00072	04		 DB	 4
  00073	04		 DB	 4
  00074	04		 DB	 4
  00075	04		 DB	 4
  00076	04		 DB	 4
  00077	04		 DB	 4
  00078	04		 DB	 4
  00079	04		 DB	 4
  0007a	04		 DB	 4
  0007b	04		 DB	 4
  0007c	04		 DB	 4
  0007d	04		 DB	 4
  0007e	04		 DB	 4
  0007f	04		 DB	 4
  00080	04		 DB	 4
  00081	04		 DB	 4
  00082	04		 DB	 4
  00083	04		 DB	 4
  00084	04		 DB	 4
  00085	04		 DB	 4
  00086	04		 DB	 4
  00087	04		 DB	 4
  00088	04		 DB	 4
  00089	04		 DB	 4
  0008a	04		 DB	 4
  0008b	04		 DB	 4
  0008c	04		 DB	 4
  0008d	04		 DB	 4
  0008e	04		 DB	 4
  0008f	04		 DB	 4
  00090	04		 DB	 4
  00091	04		 DB	 4
  00092	04		 DB	 4
  00093	04		 DB	 4
  00094	04		 DB	 4
  00095	04		 DB	 4
  00096	04		 DB	 4
  00097	04		 DB	 4
  00098	04		 DB	 4
  00099	04		 DB	 4
  0009a	04		 DB	 4
  0009b	04		 DB	 4
  0009c	04		 DB	 4
  0009d	04		 DB	 4
  0009e	04		 DB	 4
  0009f	04		 DB	 4
  000a0	04		 DB	 4
  000a1	04		 DB	 4
  000a2	04		 DB	 4
  000a3	04		 DB	 4
  000a4	04		 DB	 4
  000a5	04		 DB	 4
  000a6	04		 DB	 4
  000a7	04		 DB	 4
  000a8	04		 DB	 4
  000a9	04		 DB	 4
  000aa	04		 DB	 4
  000ab	04		 DB	 4
  000ac	04		 DB	 4
  000ad	04		 DB	 4
  000ae	04		 DB	 4
  000af	02		 DB	 2
  000b0	04		 DB	 4
  000b1	04		 DB	 4
  000b2	04		 DB	 4
  000b3	04		 DB	 4
  000b4	04		 DB	 4
  000b5	04		 DB	 4
  000b6	04		 DB	 4
  000b7	04		 DB	 4
  000b8	04		 DB	 4
  000b9	04		 DB	 4
  000ba	04		 DB	 4
  000bb	04		 DB	 4
  000bc	04		 DB	 4
  000bd	04		 DB	 4
  000be	04		 DB	 4
  000bf	04		 DB	 4
  000c0	04		 DB	 4
  000c1	04		 DB	 4
  000c2	04		 DB	 4
  000c3	04		 DB	 4
  000c4	04		 DB	 4
  000c5	04		 DB	 4
  000c6	04		 DB	 4
  000c7	04		 DB	 4
  000c8	04		 DB	 4
  000c9	04		 DB	 4
  000ca	04		 DB	 4
  000cb	04		 DB	 4
  000cc	04		 DB	 4
  000cd	04		 DB	 4
  000ce	04		 DB	 4
  000cf	04		 DB	 4
  000d0	04		 DB	 4
  000d1	04		 DB	 4
  000d2	04		 DB	 4
  000d3	04		 DB	 4
  000d4	04		 DB	 4
  000d5	04		 DB	 4
  000d6	04		 DB	 4
  000d7	04		 DB	 4
  000d8	04		 DB	 4
  000d9	04		 DB	 4
  000da	04		 DB	 4
  000db	04		 DB	 4
  000dc	04		 DB	 4
  000dd	04		 DB	 4
  000de	04		 DB	 4
  000df	04		 DB	 4
  000e0	04		 DB	 4
  000e1	04		 DB	 4
  000e2	04		 DB	 4
  000e3	04		 DB	 4
  000e4	04		 DB	 4
  000e5	04		 DB	 4
  000e6	04		 DB	 4
  000e7	04		 DB	 4
  000e8	04		 DB	 4
  000e9	04		 DB	 4
  000ea	04		 DB	 4
  000eb	04		 DB	 4
  000ec	04		 DB	 4
  000ed	04		 DB	 4
  000ee	04		 DB	 4
  000ef	04		 DB	 4
  000f0	04		 DB	 4
  000f1	04		 DB	 4
  000f2	04		 DB	 4
  000f3	04		 DB	 4
  000f4	04		 DB	 4
  000f5	04		 DB	 4
  000f6	04		 DB	 4
  000f7	04		 DB	 4
  000f8	04		 DB	 4
  000f9	04		 DB	 4
  000fa	04		 DB	 4
  000fb	04		 DB	 4
  000fc	04		 DB	 4
  000fd	04		 DB	 4
  000fe	04		 DB	 4
  000ff	04		 DB	 4
  00100	04		 DB	 4
  00101	04		 DB	 4
  00102	04		 DB	 4
  00103	04		 DB	 4
  00104	04		 DB	 4
  00105	04		 DB	 4
  00106	04		 DB	 4
  00107	04		 DB	 4
  00108	04		 DB	 4
  00109	04		 DB	 4
  0010a	04		 DB	 4
  0010b	04		 DB	 4
  0010c	04		 DB	 4
  0010d	04		 DB	 4
  0010e	04		 DB	 4
  0010f	04		 DB	 4
  00110	04		 DB	 4
  00111	04		 DB	 4
  00112	04		 DB	 4
  00113	04		 DB	 4
  00114	04		 DB	 4
  00115	04		 DB	 4
  00116	04		 DB	 4
  00117	04		 DB	 4
  00118	04		 DB	 4
  00119	04		 DB	 4
  0011a	04		 DB	 4
  0011b	04		 DB	 4
  0011c	04		 DB	 4
  0011d	04		 DB	 4
  0011e	04		 DB	 4
  0011f	04		 DB	 4
  00120	04		 DB	 4
  00121	04		 DB	 4
  00122	04		 DB	 4
  00123	04		 DB	 4
  00124	04		 DB	 4
  00125	04		 DB	 4
  00126	04		 DB	 4
  00127	04		 DB	 4
  00128	04		 DB	 4
  00129	04		 DB	 4
  0012a	04		 DB	 4
  0012b	04		 DB	 4
  0012c	04		 DB	 4
  0012d	04		 DB	 4
  0012e	04		 DB	 4
  0012f	04		 DB	 4
  00130	04		 DB	 4
  00131	04		 DB	 4
  00132	04		 DB	 4
  00133	04		 DB	 4
  00134	04		 DB	 4
  00135	04		 DB	 4
  00136	04		 DB	 4
  00137	04		 DB	 4
  00138	04		 DB	 4
  00139	04		 DB	 4
  0013a	04		 DB	 4
  0013b	04		 DB	 4
  0013c	04		 DB	 4
  0013d	04		 DB	 4
  0013e	04		 DB	 4
  0013f	04		 DB	 4
  00140	03		 DB	 3
_getunopr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _simpleexp
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_v$ = 12						; size = 4
_simpleexp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 925
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 928
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	83 c0 85	 add	 eax, -123		; ffffff85H
  0000d	3d aa 00 00 00	 cmp	 eax, 170		; 000000aaH
  00012	0f 87 80 01 00
	00		 ja	 $LN1@simpleexp
  00018	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN28@simpleexp[eax]
  0001f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN33@simpleexp[eax*4]
$LN11@simpleexp:
; Line 930
  00026	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
; Line 977
  00029	56		 push	 esi
  0002a	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00031	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1
  00038	c7 40 14 ff ff
	ff ff		 mov	 DWORD PTR [eax+20], -1
  0003f	c7 00 05 00 00
	00		 mov	 DWORD PTR [eax], 5
  00045	f2 0f 10 46 18	 movsd	 xmm0, QWORD PTR [esi+24]
  0004a	f2 0f 11 40 08	 movsd	 QWORD PTR [eax+8], xmm0
  0004f	e8 00 00 00 00	 call	 _luaX_next
  00054	83 c4 04	 add	 esp, 4
  00057	5e		 pop	 esi
; Line 978
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN10@simpleexp:
; Line 935
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
; Line 977
  0005d	56		 push	 esi
  0005e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00065	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1
  0006c	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
  00073	c7 01 06 00 00
	00		 mov	 DWORD PTR [ecx], 6
  00079	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0007c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0007f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00082	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00085	e8 00 00 00 00	 call	 _luaX_next
  0008a	83 c4 04	 add	 esp, 4
  0008d	5e		 pop	 esi
; Line 978
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN9@simpleexp:
; Line 940
  00090	ff 76 18	 push	 DWORD PTR [esi+24]
  00093	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 _codestring
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 977
  0009f	56		 push	 esi
  000a0	e8 00 00 00 00	 call	 _luaX_next
  000a5	83 c4 04	 add	 esp, 4
  000a8	5e		 pop	 esi
; Line 978
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
$LN8@simpleexp:
; Line 944
  000ab	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
; Line 977
  000ae	56		 push	 esi
  000af	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1
  000b6	c7 40 14 ff ff
	ff ff		 mov	 DWORD PTR [eax+20], -1
  000bd	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  000c3	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000ca	e8 00 00 00 00	 call	 _luaX_next
  000cf	83 c4 04	 add	 esp, 4
  000d2	5e		 pop	 esi
; Line 978
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
$LN7@simpleexp:
; Line 948
  000d5	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
; Line 977
  000d8	56		 push	 esi
  000d9	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1
  000e0	c7 40 14 ff ff
	ff ff		 mov	 DWORD PTR [eax+20], -1
  000e7	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  000ed	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000f4	e8 00 00 00 00	 call	 _luaX_next
  000f9	83 c4 04	 add	 esp, 4
  000fc	5e		 pop	 esi
; Line 978
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
$LN6@simpleexp:
; Line 952
  000ff	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
; Line 977
  00102	56		 push	 esi
  00103	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1
  0010a	c7 40 14 ff ff
	ff ff		 mov	 DWORD PTR [eax+20], -1
  00111	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
  00117	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0011e	e8 00 00 00 00	 call	 _luaX_next
  00123	83 c4 04	 add	 esp, 4
  00126	5e		 pop	 esi
; Line 978
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
$LN5@simpleexp:
; Line 956
  00129	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; Line 958
  0012c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012e	80 79 07 00	 cmp	 BYTE PTR [ecx+7], 0
  00132	74 73		 je	 SHORT $LN31@simpleexp
; Line 960
  00134	6a 00		 push	 0
  00136	6a 01		 push	 1
  00138	6a 00		 push	 0
  0013a	6a 2d		 push	 45			; 0000002dH
  0013c	50		 push	 eax
  0013d	c6 41 07 01	 mov	 BYTE PTR [ecx+7], 1
  00141	e8 00 00 00 00	 call	 _luaK_codeABC
  00146	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00149	83 c4 14	 add	 esp, 20			; 00000014H
; Line 977
  0014c	56		 push	 esi
  0014d	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1
  00154	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
  0015b	c7 01 0e 00 00
	00		 mov	 DWORD PTR [ecx], 14	; 0000000eH
  00161	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00164	e8 00 00 00 00	 call	 _luaX_next
  00169	83 c4 04	 add	 esp, 4
  0016c	5e		 pop	 esi
; Line 978
  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
$LN3@simpleexp:
; Line 964
  0016f	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  00172	56		 push	 esi
  00173	e8 00 00 00 00	 call	 _constructor
; Line 973
  00178	83 c4 08	 add	 esp, 8
  0017b	5e		 pop	 esi
; Line 978
  0017c	5d		 pop	 ebp
  0017d	c3		 ret	 0
$LN2@simpleexp:
; Line 968
  0017e	56		 push	 esi
  0017f	e8 00 00 00 00	 call	 _luaX_next
; Line 969
  00184	ff 76 04	 push	 DWORD PTR [esi+4]
  00187	6a 00		 push	 0
  00189	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  0018c	56		 push	 esi
  0018d	e8 00 00 00 00	 call	 _body
  00192	83 c4 14	 add	 esp, 20			; 00000014H
  00195	5e		 pop	 esi
; Line 978
  00196	5d		 pop	 ebp
  00197	c3		 ret	 0
$LN1@simpleexp:
; Line 973
  00198	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  0019b	56		 push	 esi
  0019c	e8 00 00 00 00	 call	 _suffixedexp
  001a1	83 c4 08	 add	 esp, 8
  001a4	5e		 pop	 esi
; Line 978
  001a5	5d		 pop	 ebp
  001a6	c3		 ret	 0
$LN31@simpleexp:
; Line 958
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@EJFFCAJP@cannot?5use?5?8?4?4?4?8?5outside?5a?5varar@
  001ac	56		 push	 esi
  001ad	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN34@simpleexp:
$LN29@simpleexp:
  001b2	8b ff		 npad	 2
$LN33@simpleexp:
; Line 978
  001b4	00 00 00 00	 DD	 $LN3@simpleexp
  001b8	00 00 00 00	 DD	 $LN6@simpleexp
  001bc	00 00 00 00	 DD	 $LN2@simpleexp
  001c0	00 00 00 00	 DD	 $LN8@simpleexp
  001c4	00 00 00 00	 DD	 $LN7@simpleexp
  001c8	00 00 00 00	 DD	 $LN5@simpleexp
  001cc	00 00 00 00	 DD	 $LN11@simpleexp
  001d0	00 00 00 00	 DD	 $LN10@simpleexp
  001d4	00 00 00 00	 DD	 $LN9@simpleexp
  001d8	00 00 00 00	 DD	 $LN1@simpleexp
$LN28@simpleexp:
  001dc	00		 DB	 0
  001dd	09		 DB	 9
  001de	09		 DB	 9
  001df	09		 DB	 9
  001e0	09		 DB	 9
  001e1	09		 DB	 9
  001e2	09		 DB	 9
  001e3	09		 DB	 9
  001e4	09		 DB	 9
  001e5	09		 DB	 9
  001e6	09		 DB	 9
  001e7	09		 DB	 9
  001e8	09		 DB	 9
  001e9	09		 DB	 9
  001ea	09		 DB	 9
  001eb	09		 DB	 9
  001ec	09		 DB	 9
  001ed	09		 DB	 9
  001ee	09		 DB	 9
  001ef	09		 DB	 9
  001f0	09		 DB	 9
  001f1	09		 DB	 9
  001f2	09		 DB	 9
  001f3	09		 DB	 9
  001f4	09		 DB	 9
  001f5	09		 DB	 9
  001f6	09		 DB	 9
  001f7	09		 DB	 9
  001f8	09		 DB	 9
  001f9	09		 DB	 9
  001fa	09		 DB	 9
  001fb	09		 DB	 9
  001fc	09		 DB	 9
  001fd	09		 DB	 9
  001fe	09		 DB	 9
  001ff	09		 DB	 9
  00200	09		 DB	 9
  00201	09		 DB	 9
  00202	09		 DB	 9
  00203	09		 DB	 9
  00204	09		 DB	 9
  00205	09		 DB	 9
  00206	09		 DB	 9
  00207	09		 DB	 9
  00208	09		 DB	 9
  00209	09		 DB	 9
  0020a	09		 DB	 9
  0020b	09		 DB	 9
  0020c	09		 DB	 9
  0020d	09		 DB	 9
  0020e	09		 DB	 9
  0020f	09		 DB	 9
  00210	09		 DB	 9
  00211	09		 DB	 9
  00212	09		 DB	 9
  00213	09		 DB	 9
  00214	09		 DB	 9
  00215	09		 DB	 9
  00216	09		 DB	 9
  00217	09		 DB	 9
  00218	09		 DB	 9
  00219	09		 DB	 9
  0021a	09		 DB	 9
  0021b	09		 DB	 9
  0021c	09		 DB	 9
  0021d	09		 DB	 9
  0021e	09		 DB	 9
  0021f	09		 DB	 9
  00220	09		 DB	 9
  00221	09		 DB	 9
  00222	09		 DB	 9
  00223	09		 DB	 9
  00224	09		 DB	 9
  00225	09		 DB	 9
  00226	09		 DB	 9
  00227	09		 DB	 9
  00228	09		 DB	 9
  00229	09		 DB	 9
  0022a	09		 DB	 9
  0022b	09		 DB	 9
  0022c	09		 DB	 9
  0022d	09		 DB	 9
  0022e	09		 DB	 9
  0022f	09		 DB	 9
  00230	09		 DB	 9
  00231	09		 DB	 9
  00232	09		 DB	 9
  00233	09		 DB	 9
  00234	09		 DB	 9
  00235	09		 DB	 9
  00236	09		 DB	 9
  00237	09		 DB	 9
  00238	09		 DB	 9
  00239	09		 DB	 9
  0023a	09		 DB	 9
  0023b	09		 DB	 9
  0023c	09		 DB	 9
  0023d	09		 DB	 9
  0023e	09		 DB	 9
  0023f	09		 DB	 9
  00240	09		 DB	 9
  00241	09		 DB	 9
  00242	09		 DB	 9
  00243	09		 DB	 9
  00244	09		 DB	 9
  00245	09		 DB	 9
  00246	09		 DB	 9
  00247	09		 DB	 9
  00248	09		 DB	 9
  00249	09		 DB	 9
  0024a	09		 DB	 9
  0024b	09		 DB	 9
  0024c	09		 DB	 9
  0024d	09		 DB	 9
  0024e	09		 DB	 9
  0024f	09		 DB	 9
  00250	09		 DB	 9
  00251	09		 DB	 9
  00252	09		 DB	 9
  00253	09		 DB	 9
  00254	09		 DB	 9
  00255	09		 DB	 9
  00256	09		 DB	 9
  00257	09		 DB	 9
  00258	09		 DB	 9
  00259	09		 DB	 9
  0025a	09		 DB	 9
  0025b	09		 DB	 9
  0025c	09		 DB	 9
  0025d	09		 DB	 9
  0025e	09		 DB	 9
  0025f	09		 DB	 9
  00260	09		 DB	 9
  00261	09		 DB	 9
  00262	09		 DB	 9
  00263	09		 DB	 9
  00264	09		 DB	 9
  00265	09		 DB	 9
  00266	09		 DB	 9
  00267	09		 DB	 9
  00268	01		 DB	 1
  00269	09		 DB	 9
  0026a	02		 DB	 2
  0026b	09		 DB	 9
  0026c	09		 DB	 9
  0026d	09		 DB	 9
  0026e	09		 DB	 9
  0026f	03		 DB	 3
  00270	09		 DB	 9
  00271	09		 DB	 9
  00272	09		 DB	 9
  00273	09		 DB	 9
  00274	09		 DB	 9
  00275	04		 DB	 4
  00276	09		 DB	 9
  00277	09		 DB	 9
  00278	09		 DB	 9
  00279	09		 DB	 9
  0027a	05		 DB	 5
  0027b	09		 DB	 9
  0027c	09		 DB	 9
  0027d	09		 DB	 9
  0027e	09		 DB	 9
  0027f	09		 DB	 9
  00280	09		 DB	 9
  00281	09		 DB	 9
  00282	09		 DB	 9
  00283	06		 DB	 6
  00284	07		 DB	 7
  00285	09		 DB	 9
  00286	08		 DB	 8
_simpleexp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _suffixedexp
_TEXT	SEGMENT
_fs$1$ = -36						; size = 4
_line$1$ = -32						; size = 4
_key$1 = -28						; size = 24
_key$2 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_v$ = 12						; size = 4
_suffixedexp PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 887
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _v$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
; Line 892
  00019	53		 push	 ebx
  0001a	57		 push	 edi
  0001b	8b 77 30	 mov	 esi, DWORD PTR [edi+48]
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	89 75 dc	 mov	 DWORD PTR _fs$1$[ebp], esi
  00024	89 45 e0	 mov	 DWORD PTR _line$1$[ebp], eax
  00027	e8 00 00 00 00	 call	 _primaryexp
; Line 894
  0002c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002f	83 c4 08	 add	 esp, 8
  00032	83 e8 28	 sub	 eax, 40			; 00000028H
  00035	3d fd 00 00 00	 cmp	 eax, 253		; 000000fdH
  0003a	0f 87 e7 00 00
	00		 ja	 $LN42@suffixedex
$LL9@suffixedex:
  00040	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN43@suffixedex[eax]
  00047	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN46@suffixedex[eax*4]
$LN5@suffixedex:
; Line 896
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 _fieldsel
  00055	83 c4 08	 add	 esp, 8
; Line 897
  00058	e9 b9 00 00 00	 jmp	 $LN6@suffixedex
$LN4@suffixedex:
; Line 901
  0005d	53		 push	 ebx
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 _luaK_exp2anyregup
; Line 902
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 _luaX_next
  0006a	6a 00		 push	 0
  0006c	8d 45 e4	 lea	 eax, DWORD PTR _key$2[ebp]
  0006f	50		 push	 eax
  00070	57		 push	 edi
  00071	e8 00 00 00 00	 call	 _subexpr
  00076	8d 45 e4	 lea	 eax, DWORD PTR _key$2[ebp]
  00079	50		 push	 eax
  0007a	ff 77 30	 push	 DWORD PTR [edi+48]
  0007d	e8 00 00 00 00	 call	 _luaK_exp2val
  00082	83 c4 20	 add	 esp, 32			; 00000020H
  00085	83 7f 10 5d	 cmp	 DWORD PTR [edi+16], 93	; 0000005dH
  00089	0f 85 a9 00 00
	00		 jne	 $LN45@suffixedex
  0008f	57		 push	 edi
  00090	e8 00 00 00 00	 call	 _luaX_next
; Line 903
  00095	8d 45 e4	 lea	 eax, DWORD PTR _key$2[ebp]
  00098	50		 push	 eax
  00099	53		 push	 ebx
  0009a	56		 push	 esi
  0009b	e8 00 00 00 00	 call	 _luaK_indexed
  000a0	83 c4 10	 add	 esp, 16			; 00000010H
; Line 904
  000a3	eb 71		 jmp	 SHORT $LN6@suffixedex
$LN3@suffixedex:
; Line 908
  000a5	57		 push	 edi
  000a6	e8 00 00 00 00	 call	 _luaX_next
  000ab	83 c4 04	 add	 esp, 4
; Line 909
  000ae	81 7f 10 24 01
	00 00		 cmp	 DWORD PTR [edi+16], 292	; 00000124H
  000b5	0f 85 85 00 00
	00		 jne	 $LN39@suffixedex
  000bb	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  000be	57		 push	 edi
  000bf	e8 00 00 00 00	 call	 _luaX_next
  000c4	56		 push	 esi
  000c5	ff 77 30	 push	 DWORD PTR [edi+48]
  000c8	e8 00 00 00 00	 call	 _luaK_stringK
; Line 910
  000cd	8b 75 dc	 mov	 esi, DWORD PTR _fs$1$[ebp]
  000d0	89 45 ec	 mov	 DWORD PTR _key$1[ebp+8], eax
  000d3	8d 45 e4	 lea	 eax, DWORD PTR _key$1[ebp]
  000d6	50		 push	 eax
  000d7	53		 push	 ebx
  000d8	56		 push	 esi
  000d9	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _key$1[ebp+16], -1
  000e0	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _key$1[ebp+20], -1
  000e7	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _key$1[ebp], 4
  000ee	e8 00 00 00 00	 call	 _luaK_self
; Line 911
  000f3	ff 75 e0	 push	 DWORD PTR _line$1$[ebp]
  000f6	53		 push	 ebx
  000f7	57		 push	 edi
  000f8	e8 00 00 00 00	 call	 _funcargs
  000fd	83 c4 24	 add	 esp, 36			; 00000024H
; Line 912
  00100	eb 14		 jmp	 SHORT $LN6@suffixedex
$LN2@suffixedex:
; Line 915
  00102	53		 push	 ebx
  00103	56		 push	 esi
  00104	e8 00 00 00 00	 call	 _luaK_exp2nextreg
; Line 916
  00109	ff 75 e0	 push	 DWORD PTR _line$1$[ebp]
  0010c	53		 push	 ebx
  0010d	57		 push	 edi
  0010e	e8 00 00 00 00	 call	 _funcargs
  00113	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@suffixedex:
; Line 894
  00116	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00119	83 e8 28	 sub	 eax, 40			; 00000028H
  0011c	3d fd 00 00 00	 cmp	 eax, 253		; 000000fdH
  00121	0f 86 19 ff ff
	ff		 jbe	 $LL9@suffixedex
$LN42@suffixedex:
; Line 922
  00127	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012a	5f		 pop	 edi
  0012b	5e		 pop	 esi
  0012c	33 cd		 xor	 ecx, ebp
  0012e	5b		 pop	 ebx
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c3		 ret	 0
$LN45@suffixedex:
; Line 902
  00138	6a 5d		 push	 93			; 0000005dH
  0013a	57		 push	 edi
  0013b	e8 00 00 00 00	 call	 _error_expected
$LN47@suffixedex:
$LN39@suffixedex:
; Line 909
  00140	68 24 01 00 00	 push	 292			; 00000124H
  00145	57		 push	 edi
  00146	e8 00 00 00 00	 call	 _error_expected
$LN48@suffixedex:
$LN44@suffixedex:
  0014b	90		 npad	 1
$LN46@suffixedex:
; Line 922
  0014c	00 00 00 00	 DD	 $LN2@suffixedex
  00150	00 00 00 00	 DD	 $LN5@suffixedex
  00154	00 00 00 00	 DD	 $LN3@suffixedex
  00158	00 00 00 00	 DD	 $LN4@suffixedex
  0015c	00 00 00 00	 DD	 $LN42@suffixedex
$LN43@suffixedex:
  00160	00		 DB	 0
  00161	04		 DB	 4
  00162	04		 DB	 4
  00163	04		 DB	 4
  00164	04		 DB	 4
  00165	04		 DB	 4
  00166	01		 DB	 1
  00167	04		 DB	 4
  00168	04		 DB	 4
  00169	04		 DB	 4
  0016a	04		 DB	 4
  0016b	04		 DB	 4
  0016c	04		 DB	 4
  0016d	04		 DB	 4
  0016e	04		 DB	 4
  0016f	04		 DB	 4
  00170	04		 DB	 4
  00171	04		 DB	 4
  00172	02		 DB	 2
  00173	04		 DB	 4
  00174	04		 DB	 4
  00175	04		 DB	 4
  00176	04		 DB	 4
  00177	04		 DB	 4
  00178	04		 DB	 4
  00179	04		 DB	 4
  0017a	04		 DB	 4
  0017b	04		 DB	 4
  0017c	04		 DB	 4
  0017d	04		 DB	 4
  0017e	04		 DB	 4
  0017f	04		 DB	 4
  00180	04		 DB	 4
  00181	04		 DB	 4
  00182	04		 DB	 4
  00183	04		 DB	 4
  00184	04		 DB	 4
  00185	04		 DB	 4
  00186	04		 DB	 4
  00187	04		 DB	 4
  00188	04		 DB	 4
  00189	04		 DB	 4
  0018a	04		 DB	 4
  0018b	04		 DB	 4
  0018c	04		 DB	 4
  0018d	04		 DB	 4
  0018e	04		 DB	 4
  0018f	04		 DB	 4
  00190	04		 DB	 4
  00191	04		 DB	 4
  00192	04		 DB	 4
  00193	03		 DB	 3
  00194	04		 DB	 4
  00195	04		 DB	 4
  00196	04		 DB	 4
  00197	04		 DB	 4
  00198	04		 DB	 4
  00199	04		 DB	 4
  0019a	04		 DB	 4
  0019b	04		 DB	 4
  0019c	04		 DB	 4
  0019d	04		 DB	 4
  0019e	04		 DB	 4
  0019f	04		 DB	 4
  001a0	04		 DB	 4
  001a1	04		 DB	 4
  001a2	04		 DB	 4
  001a3	04		 DB	 4
  001a4	04		 DB	 4
  001a5	04		 DB	 4
  001a6	04		 DB	 4
  001a7	04		 DB	 4
  001a8	04		 DB	 4
  001a9	04		 DB	 4
  001aa	04		 DB	 4
  001ab	04		 DB	 4
  001ac	04		 DB	 4
  001ad	04		 DB	 4
  001ae	04		 DB	 4
  001af	04		 DB	 4
  001b0	04		 DB	 4
  001b1	04		 DB	 4
  001b2	04		 DB	 4
  001b3	00		 DB	 0
  001b4	04		 DB	 4
  001b5	04		 DB	 4
  001b6	04		 DB	 4
  001b7	04		 DB	 4
  001b8	04		 DB	 4
  001b9	04		 DB	 4
  001ba	04		 DB	 4
  001bb	04		 DB	 4
  001bc	04		 DB	 4
  001bd	04		 DB	 4
  001be	04		 DB	 4
  001bf	04		 DB	 4
  001c0	04		 DB	 4
  001c1	04		 DB	 4
  001c2	04		 DB	 4
  001c3	04		 DB	 4
  001c4	04		 DB	 4
  001c5	04		 DB	 4
  001c6	04		 DB	 4
  001c7	04		 DB	 4
  001c8	04		 DB	 4
  001c9	04		 DB	 4
  001ca	04		 DB	 4
  001cb	04		 DB	 4
  001cc	04		 DB	 4
  001cd	04		 DB	 4
  001ce	04		 DB	 4
  001cf	04		 DB	 4
  001d0	04		 DB	 4
  001d1	04		 DB	 4
  001d2	04		 DB	 4
  001d3	04		 DB	 4
  001d4	04		 DB	 4
  001d5	04		 DB	 4
  001d6	04		 DB	 4
  001d7	04		 DB	 4
  001d8	04		 DB	 4
  001d9	04		 DB	 4
  001da	04		 DB	 4
  001db	04		 DB	 4
  001dc	04		 DB	 4
  001dd	04		 DB	 4
  001de	04		 DB	 4
  001df	04		 DB	 4
  001e0	04		 DB	 4
  001e1	04		 DB	 4
  001e2	04		 DB	 4
  001e3	04		 DB	 4
  001e4	04		 DB	 4
  001e5	04		 DB	 4
  001e6	04		 DB	 4
  001e7	04		 DB	 4
  001e8	04		 DB	 4
  001e9	04		 DB	 4
  001ea	04		 DB	 4
  001eb	04		 DB	 4
  001ec	04		 DB	 4
  001ed	04		 DB	 4
  001ee	04		 DB	 4
  001ef	04		 DB	 4
  001f0	04		 DB	 4
  001f1	04		 DB	 4
  001f2	04		 DB	 4
  001f3	04		 DB	 4
  001f4	04		 DB	 4
  001f5	04		 DB	 4
  001f6	04		 DB	 4
  001f7	04		 DB	 4
  001f8	04		 DB	 4
  001f9	04		 DB	 4
  001fa	04		 DB	 4
  001fb	04		 DB	 4
  001fc	04		 DB	 4
  001fd	04		 DB	 4
  001fe	04		 DB	 4
  001ff	04		 DB	 4
  00200	04		 DB	 4
  00201	04		 DB	 4
  00202	04		 DB	 4
  00203	04		 DB	 4
  00204	04		 DB	 4
  00205	04		 DB	 4
  00206	04		 DB	 4
  00207	04		 DB	 4
  00208	04		 DB	 4
  00209	04		 DB	 4
  0020a	04		 DB	 4
  0020b	04		 DB	 4
  0020c	04		 DB	 4
  0020d	04		 DB	 4
  0020e	04		 DB	 4
  0020f	04		 DB	 4
  00210	04		 DB	 4
  00211	04		 DB	 4
  00212	04		 DB	 4
  00213	04		 DB	 4
  00214	04		 DB	 4
  00215	04		 DB	 4
  00216	04		 DB	 4
  00217	04		 DB	 4
  00218	04		 DB	 4
  00219	04		 DB	 4
  0021a	04		 DB	 4
  0021b	04		 DB	 4
  0021c	04		 DB	 4
  0021d	04		 DB	 4
  0021e	04		 DB	 4
  0021f	04		 DB	 4
  00220	04		 DB	 4
  00221	04		 DB	 4
  00222	04		 DB	 4
  00223	04		 DB	 4
  00224	04		 DB	 4
  00225	04		 DB	 4
  00226	04		 DB	 4
  00227	04		 DB	 4
  00228	04		 DB	 4
  00229	04		 DB	 4
  0022a	04		 DB	 4
  0022b	04		 DB	 4
  0022c	04		 DB	 4
  0022d	04		 DB	 4
  0022e	04		 DB	 4
  0022f	04		 DB	 4
  00230	04		 DB	 4
  00231	04		 DB	 4
  00232	04		 DB	 4
  00233	04		 DB	 4
  00234	04		 DB	 4
  00235	04		 DB	 4
  00236	04		 DB	 4
  00237	04		 DB	 4
  00238	04		 DB	 4
  00239	04		 DB	 4
  0023a	04		 DB	 4
  0023b	04		 DB	 4
  0023c	04		 DB	 4
  0023d	04		 DB	 4
  0023e	04		 DB	 4
  0023f	04		 DB	 4
  00240	04		 DB	 4
  00241	04		 DB	 4
  00242	04		 DB	 4
  00243	04		 DB	 4
  00244	04		 DB	 4
  00245	04		 DB	 4
  00246	04		 DB	 4
  00247	04		 DB	 4
  00248	04		 DB	 4
  00249	04		 DB	 4
  0024a	04		 DB	 4
  0024b	04		 DB	 4
  0024c	04		 DB	 4
  0024d	04		 DB	 4
  0024e	04		 DB	 4
  0024f	04		 DB	 4
  00250	04		 DB	 4
  00251	04		 DB	 4
  00252	04		 DB	 4
  00253	04		 DB	 4
  00254	04		 DB	 4
  00255	04		 DB	 4
  00256	04		 DB	 4
  00257	04		 DB	 4
  00258	04		 DB	 4
  00259	04		 DB	 4
  0025a	04		 DB	 4
  0025b	04		 DB	 4
  0025c	04		 DB	 4
  0025d	00		 DB	 0
_suffixedexp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _primaryexp
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_v$ = 12						; size = 4
_primaryexp PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 865
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 867
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	83 f8 28	 cmp	 eax, 40			; 00000028H
  0000d	74 16		 je	 SHORT $LN3@primaryexp
  0000f	3d 24 01 00 00	 cmp	 eax, 292		; 00000124H
  00014	75 4c		 jne	 SHORT $LN43@primaryexp
; Line 877
  00016	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 _singlevar
  0001f	83 c4 08	 add	 esp, 8
  00022	5e		 pop	 esi
; Line 884
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN3@primaryexp:
  00025	53		 push	 ebx
; Line 869
  00026	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
; Line 870
  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 _luaX_next
; Line 871
  0002f	6a 00		 push	 0
  00031	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _subexpr
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
; Line 872
  0003d	83 7e 10 29	 cmp	 DWORD PTR [esi+16], 41	; 00000029H
  00041	75 18		 jne	 SHORT $LN37@primaryexp
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _luaX_next
; Line 873
  00049	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  0004c	ff 76 30	 push	 DWORD PTR [esi+48]
  0004f	e8 00 00 00 00	 call	 _luaK_dischargevars
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	5b		 pop	 ebx
  00058	5e		 pop	 esi
; Line 884
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
; Line 872
$LN37@primaryexp:
  0005b	3b 5e 04	 cmp	 ebx, DWORD PTR [esi+4]
  0005e	74 0d		 je	 SHORT $LN45@primaryexp
  00060	eb 13		 jmp	 SHORT $LN46@primaryexp
$LN43@primaryexp:
; Line 881
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBCKKGAJ@unexpected?5symbol?$AA@
  00067	56		 push	 esi
  00068	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN47@primaryexp:
$LN45@primaryexp:
; Line 872
  0006d	6a 29		 push	 41			; 00000029H
  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 _error_expected
$LN48@primaryexp:
$LN46@primaryexp:
  00075	53		 push	 ebx
  00076	6a 28		 push	 40			; 00000028H
  00078	56		 push	 esi
  00079	e8 00 00 00 00	 call	 _luaX_token2str
  0007e	83 c4 08	 add	 esp, 8
  00081	50		 push	 eax
  00082	6a 29		 push	 41			; 00000029H
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 _luaX_token2str
  0008a	83 c4 08	 add	 esp, 8
  0008d	50		 push	 eax
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
  00093	ff 76 34	 push	 DWORD PTR [esi+52]
  00096	e8 00 00 00 00	 call	 _luaO_pushfstring
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	50		 push	 eax
  0009f	56		 push	 esi
  000a0	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN49@primaryexp:
$LN42@primaryexp:
  000a5	cc		 int	 3
_primaryexp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _funcargs
_TEXT	SEGMENT
_f$GSCopy$1$ = -32					; size = 4
_args$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_f$ = 12						; size = 4
_line$ = 16						; size = 4
_funcargs PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 811
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _f$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00018	89 45 e0	 mov	 DWORD PTR _f$GSCopy$1$[ebp], eax
  0001b	57		 push	 edi
; Line 815
  0001c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001f	8b 7e 30	 mov	 edi, DWORD PTR [esi+48]
  00022	83 f8 28	 cmp	 eax, 40			; 00000028H
  00025	74 4b		 je	 SHORT $LN10@funcargs
  00027	83 f8 7b	 cmp	 eax, 123		; 0000007bH
  0002a	74 37		 je	 SHORT $LN7@funcargs
  0002c	3d 25 01 00 00	 cmp	 eax, 293		; 00000125H
  00031	0f 85 fb 00 00
	00		 jne	 $LN33@funcargs
; Line 832
  00037	ff 76 18	 push	 DWORD PTR [esi+24]
  0003a	57		 push	 edi
  0003b	e8 00 00 00 00	 call	 _luaK_stringK
; Line 833
  00040	56		 push	 esi
  00041	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _args$[ebp+16], -1
  00048	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _args$[ebp+20], -1
  0004f	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _args$[ebp], 4
  00056	89 45 ec	 mov	 DWORD PTR _args$[ebp+8], eax
  00059	e8 00 00 00 00	 call	 _luaX_next
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 834
  00061	eb 4f		 jmp	 SHORT $LN15@funcargs
$LN7@funcargs:
; Line 828
  00063	8d 45 e4	 lea	 eax, DWORD PTR _args$[ebp]
  00066	50		 push	 eax
  00067	56		 push	 esi
  00068	e8 00 00 00 00	 call	 _constructor
  0006d	83 c4 08	 add	 esp, 8
; Line 829
  00070	eb 40		 jmp	 SHORT $LN15@funcargs
$LN10@funcargs:
; Line 817
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 _luaX_next
  00078	83 c4 04	 add	 esp, 4
; Line 818
  0007b	83 7e 10 29	 cmp	 DWORD PTR [esi+16], 41	; 00000029H
  0007f	75 09		 jne	 SHORT $LN9@funcargs
; Line 819
  00081	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0
; Line 820
  00088	eb 19		 jmp	 SHORT $LN8@funcargs
$LN9@funcargs:
; Line 821
  0008a	8d 45 e4	 lea	 eax, DWORD PTR _args$[ebp]
  0008d	50		 push	 eax
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 _explist
; Line 822
  00094	6a ff		 push	 -1
  00096	8d 45 e4	 lea	 eax, DWORD PTR _args$[ebp]
  00099	50		 push	 eax
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 _luaK_setreturns
  000a0	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@funcargs:
; Line 824
  000a3	83 7e 10 29	 cmp	 DWORD PTR [esi+16], 41	; 00000029H
  000a7	75 7f		 jne	 SHORT $LN21@funcargs
  000a9	56		 push	 esi
  000aa	e8 00 00 00 00	 call	 _luaX_next
  000af	83 c4 04	 add	 esp, 4
$LN15@funcargs:
; Line 841
  000b2	8b 75 e0	 mov	 esi, DWORD PTR _f$GSCopy$1$[ebp]
; Line 842
  000b5	8b 45 e4	 mov	 eax, DWORD PTR _args$[ebp]
  000b8	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  000bb	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  000be	74 1f		 je	 SHORT $LN3@funcargs
  000c0	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  000c3	74 1a		 je	 SHORT $LN3@funcargs
; Line 845
  000c5	85 c0		 test	 eax, eax
  000c7	74 0d		 je	 SHORT $LN1@funcargs
; Line 846
  000c9	8d 45 e4	 lea	 eax, DWORD PTR _args$[ebp]
  000cc	50		 push	 eax
  000cd	57		 push	 edi
  000ce	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  000d3	83 c4 08	 add	 esp, 8
$LN1@funcargs:
; Line 847
  000d6	0f b6 47 2c	 movzx	 eax, BYTE PTR [edi+44]
  000da	2b c3		 sub	 eax, ebx
  000dc	48		 dec	 eax
  000dd	eb 03		 jmp	 SHORT $LN2@funcargs
$LN3@funcargs:
; Line 843
  000df	83 c8 ff	 or	 eax, -1
$LN2@funcargs:
; Line 849
  000e2	6a 02		 push	 2
  000e4	40		 inc	 eax
  000e5	50		 push	 eax
  000e6	53		 push	 ebx
  000e7	6a 24		 push	 36			; 00000024H
  000e9	57		 push	 edi
  000ea	e8 00 00 00 00	 call	 _luaK_codeABC
; Line 850
  000ef	ff 75 10	 push	 DWORD PTR _line$[ebp]
  000f2	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1
  000f9	57		 push	 edi
  000fa	c7 46 14 ff ff
	ff ff		 mov	 DWORD PTR [esi+20], -1
  00101	c7 06 0d 00 00
	00		 mov	 DWORD PTR [esi], 13	; 0000000dH
  00107	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0010a	e8 00 00 00 00	 call	 _luaK_fixline
; Line 853
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00112	83 c4 1c	 add	 esp, 28			; 0000001cH
  00115	fe c3		 inc	 bl
  00117	33 cd		 xor	 ecx, ebp
  00119	88 5f 2c	 mov	 BYTE PTR [edi+44], bl
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
; Line 824
$LN21@funcargs:
  00128	8b 45 10	 mov	 eax, DWORD PTR _line$[ebp]
  0012b	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0012e	74 0d		 je	 SHORT $LN35@funcargs
  00130	eb 13		 jmp	 SHORT $LN36@funcargs
$LN33@funcargs:
; Line 837
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HEIHHEKF@function?5arguments?5expected?$AA@
  00137	56		 push	 esi
  00138	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN37@funcargs:
$LN35@funcargs:
; Line 824
  0013d	6a 29		 push	 41			; 00000029H
  0013f	56		 push	 esi
  00140	e8 00 00 00 00	 call	 _error_expected
$LN38@funcargs:
$LN36@funcargs:
  00145	50		 push	 eax
  00146	6a 28		 push	 40			; 00000028H
  00148	56		 push	 esi
  00149	e8 00 00 00 00	 call	 _luaX_token2str
  0014e	83 c4 08	 add	 esp, 8
  00151	50		 push	 eax
  00152	6a 29		 push	 41			; 00000029H
  00154	56		 push	 esi
  00155	e8 00 00 00 00	 call	 _luaX_token2str
  0015a	83 c4 08	 add	 esp, 8
  0015d	50		 push	 eax
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
  00163	ff 76 34	 push	 DWORD PTR [esi+52]
  00166	e8 00 00 00 00	 call	 _luaO_pushfstring
  0016b	83 c4 14	 add	 esp, 20			; 00000014H
  0016e	50		 push	 eax
  0016f	56		 push	 esi
  00170	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN39@funcargs:
$LN32@funcargs:
  00175	cc		 int	 3
_funcargs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _explist
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_v$ = 12						; size = 4
_explist PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 798
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 801
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _v$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  0000b	57		 push	 edi
  0000c	6a 00		 push	 0
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	bf 01 00 00 00	 mov	 edi, 1
  00015	e8 00 00 00 00	 call	 _subexpr
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	8d 49 00	 npad	 3
$LL2@explist:
; Line 802
  00020	83 7e 10 2c	 cmp	 DWORD PTR [esi+16], 44	; 0000002cH
  00024	75 1e		 jne	 SHORT $LN120@explist
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _luaX_next
; Line 803
  0002c	53		 push	 ebx
  0002d	ff 76 30	 push	 DWORD PTR [esi+48]
  00030	e8 00 00 00 00	 call	 _luaK_exp2nextreg
; Line 804
  00035	6a 00		 push	 0
  00037	53		 push	 ebx
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _subexpr
  0003e	83 c4 18	 add	 esp, 24			; 00000018H
; Line 805
  00041	47		 inc	 edi
; Line 806
  00042	eb dc		 jmp	 SHORT $LL2@explist
$LN120@explist:
; Line 807
  00044	8b c7		 mov	 eax, edi
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
; Line 808
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_explist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _body
_TEXT	SEGMENT
_new_fs$ = -64						; size = 48
_bl$ = -16						; size = 16
_ls$ = 8						; size = 4
_e$ = 12						; size = 4
_ismethod$ = 16						; size = 4
_line$ = 20						; size = 4
_body	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 776
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; Line 780
  00009	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _addprototype
; Line 781
  00012	8b 5d 14	 mov	 ebx, DWORD PTR _line$[ebp]
  00015	89 45 c0	 mov	 DWORD PTR _new_fs$[ebp], eax
  00018	89 58 24	 mov	 DWORD PTR [eax+36], ebx
; Line 782
  0001b	8d 45 f0	 lea	 eax, DWORD PTR _bl$[ebp]
  0001e	50		 push	 eax
  0001f	8d 45 c0	 lea	 eax, DWORD PTR _new_fs$[ebp]
  00022	50		 push	 eax
  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 _open_func
  00029	83 c4 10	 add	 esp, 16			; 00000010H
; Line 783
  0002c	83 7f 10 28	 cmp	 DWORD PTR [edi+16], 40	; 00000028H
  00030	0f 85 d4 00 00
	00		 jne	 $LN57@body
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 _luaX_next
  0003c	83 c4 04	 add	 esp, 4
; Line 784
  0003f	83 7d 10 00	 cmp	 DWORD PTR _ismethod$[ebp], 0
  00043	74 42		 je	 SHORT $LN13@body
; Line 785
  00045	6a 04		 push	 4
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_04PJDNGLKJ@self?$AA@
  0004c	57		 push	 edi
  0004d	e8 00 00 00 00	 call	 _luaX_newstring
  00052	50		 push	 eax
  00053	57		 push	 edi
  00054	e8 00 00 00 00	 call	 _new_localvar
; Line 786
  00059	8b 77 30	 mov	 esi, DWORD PTR [edi+48]
  0005c	83 c4 14	 add	 esp, 20			; 00000014H
  0005f	fe 46 2a	 inc	 BYTE PTR [esi+42]
  00062	0f b6 46 2a	 movzx	 eax, BYTE PTR [esi+42]
  00066	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00069	03 c8		 add	 ecx, eax
  0006b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006e	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00071	8b 00		 mov	 eax, DWORD PTR [eax]
  00073	0f bf 44 48 fe	 movsx	 eax, WORD PTR [eax+ecx*2-2]
  00078	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  0007b	8b 06		 mov	 eax, DWORD PTR [esi]
  0007d	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00080	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00083	89 44 91 04	 mov	 DWORD PTR [ecx+edx*4+4], eax
$LN13@body:
; Line 788
  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 _parlist
  0008d	83 c4 04	 add	 esp, 4
; Line 789
  00090	83 7f 10 29	 cmp	 DWORD PTR [edi+16], 41	; 00000029H
  00094	75 7c		 jne	 SHORT $LN59@body
  00096	57		 push	 edi
  00097	e8 00 00 00 00	 call	 _luaX_next
; Line 790
  0009c	57		 push	 edi
  0009d	e8 00 00 00 00	 call	 _statlist
; Line 791
  000a2	8b 45 c0	 mov	 eax, DWORD PTR _new_fs$[ebp]
  000a5	83 c4 08	 add	 esp, 8
  000a8	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000ab	89 48 28	 mov	 DWORD PTR [eax+40], ecx
; Line 792
  000ae	81 7f 10 06 01
	00 00		 cmp	 DWORD PTR [edi+16], 262	; 00000106H
  000b5	75 4c		 jne	 SHORT $LN44@body
  000b7	57		 push	 edi
  000b8	e8 00 00 00 00	 call	 _luaX_next
; Line 793
  000bd	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000c0	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000c3	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000c6	48		 dec	 eax
  000c7	50		 push	 eax
  000c8	6a 00		 push	 0
  000ca	6a 2c		 push	 44			; 0000002cH
  000cc	56		 push	 esi
  000cd	e8 00 00 00 00	 call	 _luaK_codeABx
  000d2	8b 4d 0c	 mov	 ecx, DWORD PTR _e$[ebp]
  000d5	51		 push	 ecx
  000d6	56		 push	 esi
  000d7	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1
  000de	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
  000e5	c7 01 0c 00 00
	00		 mov	 DWORD PTR [ecx], 12	; 0000000cH
  000eb	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  000ee	e8 00 00 00 00	 call	 _luaK_exp2nextreg
; Line 794
  000f3	57		 push	 edi
  000f4	e8 00 00 00 00	 call	 _close_func
  000f9	83 c4 20	 add	 esp, 32			; 00000020H
  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
; Line 795
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
; Line 792
$LN44@body:
  00103	3b 5f 04	 cmp	 ebx, DWORD PTR [edi+4]
  00106	74 12		 je	 SHORT $LN60@body
  00108	eb 1b		 jmp	 SHORT $LN61@body
$LN57@body:
; Line 783
  0010a	6a 28		 push	 40			; 00000028H
  0010c	57		 push	 edi
  0010d	e8 00 00 00 00	 call	 _error_expected
$LN62@body:
$LN59@body:
; Line 789
  00112	6a 29		 push	 41			; 00000029H
  00114	57		 push	 edi
  00115	e8 00 00 00 00	 call	 _error_expected
$LN63@body:
$LN60@body:
; Line 792
  0011a	68 06 01 00 00	 push	 262			; 00000106H
  0011f	57		 push	 edi
  00120	e8 00 00 00 00	 call	 _error_expected
$LN64@body:
$LN61@body:
  00125	53		 push	 ebx
  00126	68 09 01 00 00	 push	 265			; 00000109H
  0012b	57		 push	 edi
  0012c	e8 00 00 00 00	 call	 _luaX_token2str
  00131	83 c4 08	 add	 esp, 8
  00134	50		 push	 eax
  00135	68 06 01 00 00	 push	 262			; 00000106H
  0013a	57		 push	 edi
  0013b	e8 00 00 00 00	 call	 _luaX_token2str
  00140	83 c4 08	 add	 esp, 8
  00143	50		 push	 eax
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
  00149	ff 77 34	 push	 DWORD PTR [edi+52]
  0014c	e8 00 00 00 00	 call	 _luaO_pushfstring
  00151	83 c4 14	 add	 esp, 20			; 00000014H
  00154	50		 push	 eax
  00155	57		 push	 edi
  00156	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN65@body:
$LN56@body:
  0015b	cc		 int	 3
_body	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _parlist
_TEXT	SEGMENT
_fs$1$ = -4						; size = 4
_f$1$ = 8						; size = 4
_ls$ = 8						; size = 4
_parlist PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 747
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; Line 749
  00006	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 751
  00009	33 db		 xor	 ebx, ebx
  0000b	57		 push	 edi
  0000c	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0000f	89 45 fc	 mov	 DWORD PTR _fs$1$[ebp], eax
  00012	8b 38		 mov	 edi, DWORD PTR [eax]
  00014	89 7d 08	 mov	 DWORD PTR _f$1$[ebp], edi
; Line 752
  00017	88 5f 07	 mov	 BYTE PTR [edi+7], bl
; Line 753
  0001a	83 7e 10 29	 cmp	 DWORD PTR [esi+16], 41	; 00000029H
  0001e	74 4a		 je	 SHORT $LN7@parlist
$LL9@parlist:
; Line 755
  00020	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00023	2d 19 01 00 00	 sub	 eax, 281		; 00000119H
  00028	74 33		 je	 SHORT $LN3@parlist
  0002a	83 e8 0b	 sub	 eax, 11			; 0000000bH
  0002d	75 60		 jne	 SHORT $LN31@parlist
; Line 757
  0002f	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 _luaX_next
  00038	57		 push	 edi
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 _new_localvar
; Line 768
  0003f	8b 7d 08	 mov	 edi, DWORD PTR _f$1$[ebp]
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	43		 inc	 ebx
  00046	80 7f 07 00	 cmp	 BYTE PTR [edi+7], 0
  0004a	75 1e		 jne	 SHORT $LN7@parlist
  0004c	83 7e 10 2c	 cmp	 DWORD PTR [esi+16], 44	; 0000002cH
  00050	75 18		 jne	 SHORT $LN7@parlist
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 _luaX_next
  00058	83 c4 04	 add	 esp, 4
  0005b	eb c3		 jmp	 SHORT $LL9@parlist
$LN3@parlist:
; Line 762
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 _luaX_next
  00063	83 c4 04	 add	 esp, 4
; Line 763
  00066	c6 47 07 02	 mov	 BYTE PTR [edi+7], 2
$LN7@parlist:
; Line 770
  0006a	53		 push	 ebx
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 _adjustlocalvars
; Line 771
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _fs$1$[ebp]
  00074	8a 41 2a	 mov	 al, BYTE PTR [ecx+42]
  00077	88 47 06	 mov	 BYTE PTR [edi+6], al
; Line 772
  0007a	0f b6 41 2a	 movzx	 eax, BYTE PTR [ecx+42]
  0007e	50		 push	 eax
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 _luaK_reserveregs
  00085	83 c4 10	 add	 esp, 16			; 00000010H
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
; Line 773
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
$LN31@parlist:
; Line 766
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@MHIGIDHO@?$DMname?$DO?5or?5?8?4?4?4?8?5expected?$AA@
  00094	56		 push	 esi
  00095	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN32@parlist:
$LN30@parlist:
  0009a	cc		 int	 3
_parlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _constructor
_TEXT	SEGMENT
_pc$1$ = -52						; size = 4
_line$1$ = -48						; size = 4
_cc$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_t$ = 12						; size = 4
_constructor PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 718
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _t$[ebp]
; Line 723
  00019	6a 00		 push	 0
  0001b	8b 5e 30	 mov	 ebx, DWORD PTR [esi+48]
  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	6a 0b		 push	 11			; 0000000bH
  00027	53		 push	 ebx
  00028	89 45 d0	 mov	 DWORD PTR _line$1$[ebp], eax
  0002b	e8 00 00 00 00	 call	 _luaK_codeABC
; Line 727
  00030	c7 47 10 ff ff
	ff ff		 mov	 DWORD PTR [edi+16], -1
  00037	c7 47 14 ff ff
	ff ff		 mov	 DWORD PTR [edi+20], -1
  0003e	c7 07 0c 00 00
	00		 mov	 DWORD PTR [edi], 12	; 0000000cH
  00044	89 47 08	 mov	 DWORD PTR [edi+8], eax
; Line 729
  00047	57		 push	 edi
  00048	ff 76 30	 push	 DWORD PTR [esi+48]
  0004b	89 45 cc	 mov	 DWORD PTR _pc$1$[ebp], eax
  0004e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cc$[ebp+36], 0
  00055	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cc$[ebp+28], 0
  0005c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cc$[ebp+32], 0
  00063	89 7d ec	 mov	 DWORD PTR _cc$[ebp+24], edi
  00066	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _cc$[ebp+16], -1
  0006d	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _cc$[ebp+20], -1
  00074	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _cc$[ebp], 0
  0007b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _cc$[ebp+8], 0
  00082	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  00087	83 c4 1c	 add	 esp, 28			; 0000001cH
; Line 730
  0008a	83 7e 10 7b	 cmp	 DWORD PTR [esi+16], 123	; 0000007bH
  0008e	0f 85 2c 01 00
	00		 jne	 $LN80@constructo
$LN13@constructo:
  00094	56		 push	 esi
  00095	e8 00 00 00 00	 call	 _luaX_next
  0009a	83 c4 04	 add	 esp, 4
; Line 733
  0009d	83 7e 10 7d	 cmp	 DWORD PTR [esi+16], 125	; 0000007dH
  000a1	0f 84 ad 00 00
	00		 je	 $LN77@constructo
; Line 734
  000a7	83 7d d4 00	 cmp	 DWORD PTR _cc$[ebp], 0
  000ab	74 35		 je	 SHORT $LN18@constructo
  000ad	8d 45 d4	 lea	 eax, DWORD PTR _cc$[ebp]
  000b0	50		 push	 eax
  000b1	53		 push	 ebx
  000b2	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  000b7	83 c4 08	 add	 esp, 8
  000ba	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _cc$[ebp], 0
  000c1	83 7d f8 32	 cmp	 DWORD PTR _cc$[ebp+36], 50 ; 00000032H
  000c5	75 1b		 jne	 SHORT $LN18@constructo
  000c7	8b 45 ec	 mov	 eax, DWORD PTR _cc$[ebp+24]
  000ca	6a 32		 push	 50			; 00000032H
  000cc	ff 75 f4	 push	 DWORD PTR _cc$[ebp+32]
  000cf	ff 70 08	 push	 DWORD PTR [eax+8]
  000d2	53		 push	 ebx
  000d3	e8 00 00 00 00	 call	 _luaK_setlist
  000d8	83 c4 10	 add	 esp, 16			; 00000010H
  000db	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cc$[ebp+36], 0
$LN18@constructo:
; Line 735
  000e2	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000e5	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  000e8	74 43		 je	 SHORT $LN23@constructo
  000ea	3d 24 01 00 00	 cmp	 eax, 292		; 00000124H
  000ef	74 29		 je	 SHORT $LN26@constructo
  000f1	8d 45 d4	 lea	 eax, DWORD PTR _cc$[ebp]
$LN79@constructo:
  000f4	6a 00		 push	 0
  000f6	50		 push	 eax
  000f7	56		 push	 esi
  000f8	e8 00 00 00 00	 call	 _subexpr
  000fd	8b 45 f4	 mov	 eax, DWORD PTR _cc$[ebp+32]
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00106	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0010b	0f 8f b7 00 00
	00		 jg	 $LN68@constructo
  00111	40		 inc	 eax
  00112	ff 45 f8	 inc	 DWORD PTR _cc$[ebp+36]
  00115	89 45 f4	 mov	 DWORD PTR _cc$[ebp+32], eax
  00118	eb 20		 jmp	 SHORT $LN3@constructo
$LN26@constructo:
  0011a	56		 push	 esi
  0011b	e8 00 00 00 00	 call	 _luaX_lookahead
  00120	83 c4 04	 add	 esp, 4
  00123	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  00126	8d 45 d4	 lea	 eax, DWORD PTR _cc$[ebp]
  00129	74 05		 je	 SHORT $LN25@constructo
  0012b	eb c7		 jmp	 SHORT $LN79@constructo
$LN23@constructo:
  0012d	8d 45 d4	 lea	 eax, DWORD PTR _cc$[ebp]
$LN25@constructo:
  00130	50		 push	 eax
  00131	56		 push	 esi
  00132	e8 00 00 00 00	 call	 _recfield
  00137	83 c4 08	 add	 esp, 8
$LN3@constructo:
; Line 736
  0013a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0013d	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00140	0f 84 4e ff ff
	ff		 je	 $LN13@constructo
  00146	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00149	0f 84 45 ff ff
	ff		 je	 $LN13@constructo
; Line 737
  0014f	83 f8 7d	 cmp	 eax, 125		; 0000007dH
  00152	75 62		 jne	 SHORT $LN62@constructo
$LN77@constructo:
  00154	56		 push	 esi
  00155	e8 00 00 00 00	 call	 _luaX_next
; Line 738
  0015a	8d 45 d4	 lea	 eax, DWORD PTR _cc$[ebp]
  0015d	50		 push	 eax
  0015e	53		 push	 ebx
  0015f	e8 00 00 00 00	 call	 _lastlistfield
; Line 739
  00164	8b 03		 mov	 eax, DWORD PTR [ebx]
  00166	8b 7d cc	 mov	 edi, DWORD PTR _pc$1$[ebp]
  00169	ff 75 f4	 push	 DWORD PTR _cc$[ebp+32]
  0016c	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0016f	8d 34 b8	 lea	 esi, DWORD PTR [eax+edi*4]
  00172	e8 00 00 00 00	 call	 _luaO_int2fb
  00177	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00179	c1 e0 17	 shl	 eax, 23			; 00000017H
  0017c	81 e1 ff ff 7f
	00		 and	 ecx, 8388607		; 007fffffH
  00182	0b c1		 or	 eax, ecx
  00184	89 06		 mov	 DWORD PTR [esi], eax
; Line 740
  00186	8b 03		 mov	 eax, DWORD PTR [ebx]
  00188	ff 75 f0	 push	 DWORD PTR _cc$[ebp+28]
  0018b	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0018e	8d 34 b8	 lea	 esi, DWORD PTR [eax+edi*4]
  00191	e8 00 00 00 00	 call	 _luaO_int2fb
; Line 741
  00196	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00199	83 c4 14	 add	 esp, 20			; 00000014H
  0019c	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  0019f	33 cd		 xor	 ecx, ebp
  001a1	33 06		 xor	 eax, DWORD PTR [esi]
  001a3	25 00 c0 7f 00	 and	 eax, 8372224		; 007fc000H
  001a8	31 06		 xor	 DWORD PTR [esi], eax
  001aa	5f		 pop	 edi
  001ab	5e		 pop	 esi
  001ac	5b		 pop	 ebx
  001ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b2	8b e5		 mov	 esp, ebp
  001b4	5d		 pop	 ebp
  001b5	c3		 ret	 0
; Line 737
$LN62@constructo:
  001b6	8b 45 d0	 mov	 eax, DWORD PTR _line$1$[ebp]
  001b9	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  001bc	74 1a		 je	 SHORT $LN82@constructo
  001be	eb 20		 jmp	 SHORT $LN83@constructo
$LN80@constructo:
; Line 730
  001c0	6a 7b		 push	 123			; 0000007bH
  001c2	56		 push	 esi
  001c3	e8 00 00 00 00	 call	 _error_expected
$LN84@constructo:
$LN68@constructo:
; Line 735
  001c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@
  001cd	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  001d2	51		 push	 ecx
  001d3	e8 00 00 00 00	 call	 _errorlimit
$LN85@constructo:
$LN82@constructo:
; Line 737
  001d8	6a 7d		 push	 125			; 0000007dH
  001da	56		 push	 esi
  001db	e8 00 00 00 00	 call	 _error_expected
$LN86@constructo:
$LN83@constructo:
  001e0	50		 push	 eax
  001e1	6a 7b		 push	 123			; 0000007bH
  001e3	56		 push	 esi
  001e4	e8 00 00 00 00	 call	 _luaX_token2str
  001e9	83 c4 08	 add	 esp, 8
  001ec	50		 push	 eax
  001ed	6a 7d		 push	 125			; 0000007dH
  001ef	56		 push	 esi
  001f0	e8 00 00 00 00	 call	 _luaX_token2str
  001f5	83 c4 08	 add	 esp, 8
  001f8	50		 push	 eax
  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
  001fe	ff 76 34	 push	 DWORD PTR [esi+52]
  00201	e8 00 00 00 00	 call	 _luaO_pushfstring
  00206	83 c4 14	 add	 esp, 20			; 00000014H
  00209	50		 push	 eax
  0020a	56		 push	 esi
  0020b	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN87@constructo:
$LN75@constructo:
  00210	cc		 int	 3
_constructor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _field
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_cc$ = 12						; size = 4
_field	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 696
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 698
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0000d	74 49		 je	 SHORT $LN2@field
  0000f	3d 24 01 00 00	 cmp	 eax, 292		; 00000124H
  00014	74 25		 je	 SHORT $LN5@field
; Line 711
  00016	57		 push	 edi
  00017	8b 7d 0c	 mov	 edi, DWORD PTR _cc$[ebp]
  0001a	6a 00		 push	 0
  0001c	57		 push	 edi
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 _subexpr
  00023	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0002e	7f 37		 jg	 SHORT $LN68@field
  00030	40		 inc	 eax
  00031	ff 47 24	 inc	 DWORD PTR [edi+36]
  00034	89 47 20	 mov	 DWORD PTR [edi+32], eax
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
; Line 715
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN5@field:
; Line 700
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _luaX_lookahead
  00041	83 c4 04	 add	 esp, 4
; Line 701
  00044	ff 75 0c	 push	 DWORD PTR _cc$[ebp]
  00047	56		 push	 esi
  00048	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  0004b	74 0f		 je	 SHORT $LN4@field
  0004d	e8 00 00 00 00	 call	 _listfield
; Line 707
  00052	83 c4 08	 add	 esp, 8
  00055	5e		 pop	 esi
; Line 715
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN2@field:
; Line 707
  00058	ff 75 0c	 push	 DWORD PTR _cc$[ebp]
  0005b	56		 push	 esi
$LN4@field:
  0005c	e8 00 00 00 00	 call	 _recfield
  00061	83 c4 08	 add	 esp, 8
  00064	5e		 pop	 esi
; Line 715
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
$LN68@field:
; Line 711
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@
  0006c	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00071	ff 76 30	 push	 DWORD PTR [esi+48]
  00074	e8 00 00 00 00	 call	 _errorlimit
$LN70@field:
$LN66@field:
  00079	cc		 int	 3
_field	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _listfield
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_cc$ = 12						; size = 4
_listfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 687
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 689
  00004	8b 75 0c	 mov	 esi, DWORD PTR _cc$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
  0000b	6a 00		 push	 0
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _subexpr
; Line 690
  00014	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0001f	7f 0b		 jg	 SHORT $LN57@listfield
; Line 691
  00021	40		 inc	 eax
; Line 692
  00022	ff 46 24	 inc	 DWORD PTR [esi+36]
  00025	5f		 pop	 edi
  00026	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00029	5e		 pop	 esi
; Line 693
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN57@listfield:
; Line 690
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@
  00031	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00036	ff 77 30	 push	 DWORD PTR [edi+48]
  00039	e8 00 00 00 00	 call	 _errorlimit
$LN59@listfield:
$LN56@listfield:
  0003e	cc		 int	 3
_listfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lastlistfield
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_cc$ = 12						; size = 4
_lastlistfield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 672
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; Line 673
  00004	8b 7d 0c	 mov	 edi, DWORD PTR _cc$[ebp]
  00007	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  0000b	74 5b		 je	 SHORT $LN2@lastlistfi
; Line 674
  0000d	8b 07		 mov	 eax, DWORD PTR [edi]
  0000f	56		 push	 esi
  00010	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00013	74 2f		 je	 SHORT $LN3@lastlistfi
  00015	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00018	74 2a		 je	 SHORT $LN3@lastlistfi
; Line 680
  0001a	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  0001d	85 c0		 test	 eax, eax
  0001f	74 0a		 je	 SHORT $LN1@lastlistfi
; Line 681
  00021	57		 push	 edi
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  00028	83 c4 08	 add	 esp, 8
$LN1@lastlistfi:
; Line 682
  0002b	ff 77 24	 push	 DWORD PTR [edi+36]
  0002e	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00031	ff 77 20	 push	 DWORD PTR [edi+32]
  00034	ff 70 08	 push	 DWORD PTR [eax+8]
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _luaK_setlist
  0003d	83 c4 10	 add	 esp, 16			; 00000010H
  00040	5e		 pop	 esi
  00041	5f		 pop	 edi
; Line 684
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
$LN3@lastlistfi:
; Line 675
  00044	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  00047	6a ff		 push	 -1
  00049	57		 push	 edi
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _luaK_setreturns
; Line 676
  00050	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00053	6a ff		 push	 -1
  00055	ff 77 20	 push	 DWORD PTR [edi+32]
  00058	ff 70 08	 push	 DWORD PTR [eax+8]
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 _luaK_setlist
  00061	83 c4 1c	 add	 esp, 28			; 0000001cH
; Line 677
  00064	ff 4f 20	 dec	 DWORD PTR [edi+32]
  00067	5e		 pop	 esi
$LN2@lastlistfi:
  00068	5f		 pop	 edi
; Line 684
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_lastlistfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _closelistfield
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_cc$ = 12						; size = 4
_closelistfield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 661
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 662
  00004	8b 75 0c	 mov	 esi, DWORD PTR _cc$[ebp]
  00007	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000a	74 35		 je	 SHORT $LN1@closelistf
; Line 663
  0000c	56		 push	 esi
  0000d	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00010	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  00015	83 c4 08	 add	 esp, 8
; Line 664
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; Line 665
  0001e	83 7e 24 32	 cmp	 DWORD PTR [esi+36], 50	; 00000032H
  00022	75 1d		 jne	 SHORT $LN1@closelistf
; Line 666
  00024	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00027	6a 32		 push	 50			; 00000032H
  00029	ff 76 20	 push	 DWORD PTR [esi+32]
  0002c	ff 70 08	 push	 DWORD PTR [eax+8]
  0002f	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00032	e8 00 00 00 00	 call	 _luaK_setlist
  00037	83 c4 10	 add	 esp, 16			; 00000010H
; Line 667
  0003a	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
$LN1@closelistf:
  00041	5e		 pop	 esi
; Line 669
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_closelistfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _recfield
_TEXT	SEGMENT
_reg$1$ = -60						; size = 4
_cc$GSCopy$1$ = -56					; size = 4
_val$ = -52						; size = 24
_key$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_cc$ = 12						; size = 4
_recfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 640
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR _cc$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
  00019	89 75 c8	 mov	 DWORD PTR _cc$GSCopy$1$[ebp], esi
; Line 646
  0001c	81 7f 10 24 01
	00 00		 cmp	 DWORD PTR [edi+16], 292	; 00000124H
  00023	8b 5f 30	 mov	 ebx, DWORD PTR [edi+48]
  00026	0f b6 43 2c	 movzx	 eax, BYTE PTR [ebx+44]
  0002a	89 45 c4	 mov	 DWORD PTR _reg$1$[ebp], eax
  0002d	75 3f		 jne	 SHORT $LN2@recfield
; Line 647
  0002f	81 7e 1c ff ff
	ff 7f		 cmp	 DWORD PTR [esi+28], 2147483647 ; 7fffffffH
  00036	0f 8f c0 00 00
	00		 jg	 $LN134@recfield
; Line 648
  0003c	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 _luaX_next
  00045	56		 push	 esi
  00046	ff 77 30	 push	 DWORD PTR [edi+48]
  00049	e8 00 00 00 00	 call	 _luaK_stringK
; Line 650
  0004e	8b 75 c8	 mov	 esi, DWORD PTR _cc$GSCopy$1$[ebp]
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH
  00054	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _key$[ebp+16], -1
  0005b	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _key$[ebp+20], -1
  00062	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _key$[ebp], 4
  00069	89 45 ec	 mov	 DWORD PTR _key$[ebp+8], eax
  0006c	eb 30		 jmp	 SHORT $LN26@recfield
$LN2@recfield:
; Line 651
  0006e	57		 push	 edi
  0006f	e8 00 00 00 00	 call	 _luaX_next
  00074	6a 00		 push	 0
  00076	8d 45 e4	 lea	 eax, DWORD PTR _key$[ebp]
  00079	50		 push	 eax
  0007a	57		 push	 edi
  0007b	e8 00 00 00 00	 call	 _subexpr
  00080	8d 45 e4	 lea	 eax, DWORD PTR _key$[ebp]
  00083	50		 push	 eax
  00084	ff 77 30	 push	 DWORD PTR [edi+48]
  00087	e8 00 00 00 00	 call	 _luaK_exp2val
  0008c	83 c4 18	 add	 esp, 24			; 00000018H
  0008f	83 7f 10 5d	 cmp	 DWORD PTR [edi+16], 93	; 0000005dH
  00093	75 77		 jne	 SHORT $LN136@recfield
  00095	57		 push	 edi
  00096	e8 00 00 00 00	 call	 _luaX_next
  0009b	83 c4 04	 add	 esp, 4
$LN26@recfield:
; Line 652
  0009e	ff 46 1c	 inc	 DWORD PTR [esi+28]
; Line 653
  000a1	83 7f 10 3d	 cmp	 DWORD PTR [edi+16], 61	; 0000003dH
  000a5	75 6d		 jne	 SHORT $LN137@recfield
  000a7	57		 push	 edi
  000a8	e8 00 00 00 00	 call	 _luaX_next
; Line 654
  000ad	8d 45 e4	 lea	 eax, DWORD PTR _key$[ebp]
  000b0	50		 push	 eax
  000b1	53		 push	 ebx
  000b2	e8 00 00 00 00	 call	 _luaK_exp2RK
  000b7	8b f0		 mov	 esi, eax
; Line 655
  000b9	8d 45 cc	 lea	 eax, DWORD PTR _val$[ebp]
  000bc	6a 00		 push	 0
  000be	50		 push	 eax
  000bf	57		 push	 edi
  000c0	e8 00 00 00 00	 call	 _subexpr
; Line 656
  000c5	8d 45 cc	 lea	 eax, DWORD PTR _val$[ebp]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _luaK_exp2RK
  000cf	50		 push	 eax
  000d0	8b 45 c8	 mov	 eax, DWORD PTR _cc$GSCopy$1$[ebp]
  000d3	56		 push	 esi
  000d4	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000d7	ff 70 08	 push	 DWORD PTR [eax+8]
  000da	6a 0a		 push	 10			; 0000000aH
  000dc	53		 push	 ebx
  000dd	e8 00 00 00 00	 call	 _luaK_codeABC
; Line 658
  000e2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e5	83 c4 34	 add	 esp, 52			; 00000034H
  000e8	8b 45 c4	 mov	 eax, DWORD PTR _reg$1$[ebp]
  000eb	33 cd		 xor	 ecx, ebp
  000ed	88 43 2c	 mov	 BYTE PTR [ebx+44], al
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
$LN134@recfield:
; Line 647
  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@
  00101	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00106	53		 push	 ebx
  00107	e8 00 00 00 00	 call	 _errorlimit
$LN138@recfield:
$LN136@recfield:
; Line 651
  0010c	6a 5d		 push	 93			; 0000005dH
  0010e	57		 push	 edi
  0010f	e8 00 00 00 00	 call	 _error_expected
$LN139@recfield:
$LN137@recfield:
; Line 653
  00114	6a 3d		 push	 61			; 0000003dH
  00116	57		 push	 edi
  00117	e8 00 00 00 00	 call	 _error_expected
$LN140@recfield:
$LN133@recfield:
  0011c	cc		 int	 3
_recfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _yindex
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_v$ = 12						; size = 4
_yindex	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 615
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; Line 617
  00004	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
  00007	57		 push	 edi
  00008	e8 00 00 00 00	 call	 _luaX_next
; Line 618
  0000d	6a 00		 push	 0
  0000f	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 _subexpr
; Line 619
  00018	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  0001b	ff 77 30	 push	 DWORD PTR [edi+48]
  0001e	e8 00 00 00 00	 call	 _luaK_exp2val
  00023	83 c4 18	 add	 esp, 24			; 00000018H
; Line 620
  00026	83 7f 10 5d	 cmp	 DWORD PTR [edi+16], 93	; 0000005dH
  0002a	75 0c		 jne	 SHORT $LN60@yindex
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 _luaX_next
  00032	83 c4 04	 add	 esp, 4
  00035	5f		 pop	 edi
; Line 621
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN60@yindex:
; Line 620
  00038	6a 5d		 push	 93			; 0000005dH
  0003a	57		 push	 edi
  0003b	e8 00 00 00 00	 call	 _error_expected
$LN62@yindex:
$LN59@yindex:
  00040	cc		 int	 3
_yindex	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _fieldsel
_TEXT	SEGMENT
_fs$1$ = -32						; size = 4
_key$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_v$ = 12						; size = 4
_fieldsel PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 604
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _v$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
; Line 608
  00019	53		 push	 ebx
  0001a	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0001d	50		 push	 eax
  0001e	89 45 e0	 mov	 DWORD PTR _fs$1$[ebp], eax
  00021	e8 00 00 00 00	 call	 _luaK_exp2anyregup
; Line 609
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _luaX_next
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 610
  0002f	81 7f 10 24 01
	00 00		 cmp	 DWORD PTR [edi+16], 292	; 00000124H
  00036	75 4b		 jne	 SHORT $LN18@fieldsel
  00038	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  0003b	57		 push	 edi
  0003c	e8 00 00 00 00	 call	 _luaX_next
  00041	56		 push	 esi
  00042	ff 77 30	 push	 DWORD PTR [edi+48]
  00045	e8 00 00 00 00	 call	 _luaK_stringK
  0004a	89 45 ec	 mov	 DWORD PTR _key$[ebp+8], eax
; Line 611
  0004d	8d 45 e4	 lea	 eax, DWORD PTR _key$[ebp]
  00050	50		 push	 eax
  00051	53		 push	 ebx
  00052	ff 75 e0	 push	 DWORD PTR _fs$1$[ebp]
  00055	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _key$[ebp+16], -1
  0005c	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _key$[ebp+20], -1
  00063	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _key$[ebp], 4
  0006a	e8 00 00 00 00	 call	 _luaK_indexed
; Line 612
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	83 c4 18	 add	 esp, 24			; 00000018H
  00075	33 cd		 xor	 ecx, ebp
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
$LN18@fieldsel:
; Line 610
  00083	68 24 01 00 00	 push	 292			; 00000124H
  00088	57		 push	 edi
  00089	e8 00 00 00 00	 call	 _error_expected
$LN20@fieldsel:
$LN17@fieldsel:
  0008e	cc		 int	 3
_fieldsel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _statlist
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_statlist PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 592
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 594
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	6a 01		 push	 1
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _block_follow
  0000f	83 c4 08	 add	 esp, 8
  00012	85 c0		 test	 eax, eax
  00014	75 29		 jne	 SHORT $LN2@statlist
$LL3@statlist:
; Line 595
  00016	81 7e 10 12 01
	00 00		 cmp	 DWORD PTR [esi+16], 274	; 00000112H
; Line 599
  0001d	56		 push	 esi
  0001e	74 17		 je	 SHORT $LN7@statlist
  00020	e8 00 00 00 00	 call	 _statement
  00025	6a 01		 push	 1
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 _block_follow
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00030	85 c0		 test	 eax, eax
  00032	74 e2		 je	 SHORT $LL3@statlist
  00034	5e		 pop	 esi
; Line 601
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN7@statlist:
; Line 596
  00037	e8 00 00 00 00	 call	 _statement
  0003c	83 c4 04	 add	 esp, 4
$LN2@statlist:
  0003f	5e		 pop	 esi
; Line 601
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_statlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _block_follow
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_withuntil$ = 12					; size = 4
_block_follow PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 581
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 582
  00003	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00006	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00009	05 fc fe ff ff	 add	 eax, -260		; fffffefcH
  0000e	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  00011	77 1a		 ja	 SHORT $LN1@block_foll
  00013	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN8@block_foll[eax]
  0001a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN10@block_foll[eax*4]
$LN3@block_foll:
; Line 585
  00021	b8 01 00 00 00	 mov	 eax, 1
; Line 589
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN2@block_foll:
; Line 586
  00028	8b 45 0c	 mov	 eax, DWORD PTR _withuntil$[ebp]
; Line 589
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN1@block_foll:
; Line 587
  0002d	33 c0		 xor	 eax, eax
; Line 589
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
  00031	8d 49 00	 npad	 3
$LN10@block_foll:
  00034	00 00 00 00	 DD	 $LN3@block_foll
  00038	00 00 00 00	 DD	 $LN2@block_foll
  0003c	00 00 00 00	 DD	 $LN1@block_foll
$LN8@block_foll:
  00040	00		 DB	 0
  00041	00		 DB	 0
  00042	00		 DB	 0
  00043	02		 DB	 2
  00044	02		 DB	 2
  00045	02		 DB	 2
  00046	02		 DB	 2
  00047	02		 DB	 2
  00048	02		 DB	 2
  00049	02		 DB	 2
  0004a	02		 DB	 2
  0004b	02		 DB	 2
  0004c	02		 DB	 2
  0004d	02		 DB	 2
  0004e	02		 DB	 2
  0004f	02		 DB	 2
  00050	02		 DB	 2
  00051	01		 DB	 1
  00052	02		 DB	 2
  00053	02		 DB	 2
  00054	02		 DB	 2
  00055	02		 DB	 2
  00056	02		 DB	 2
  00057	02		 DB	 2
  00058	02		 DB	 2
  00059	02		 DB	 2
  0005a	02		 DB	 2
  0005b	02		 DB	 2
  0005c	02		 DB	 2
  0005d	00		 DB	 0
_block_follow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _close_func
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_close_func PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 546
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 547
  00003	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; Line 548
  00009	8b 78 30	 mov	 edi, DWORD PTR [eax+48]
  0000c	8b 58 34	 mov	 ebx, DWORD PTR [eax+52]
; Line 550
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	8b 37		 mov	 esi, DWORD PTR [edi]
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 _luaK_ret
; Line 551
  0001b	57		 push	 edi
  0001c	e8 00 00 00 00	 call	 _leaveblock
; Line 552
  00021	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00024	83 c4 10	 add	 esp, 16			; 00000010H
  00027	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0002a	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0002f	0f 87 29 01 00
	00		 ja	 $LN13@close_func
  00035	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0003c	50		 push	 eax
  0003d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00040	c1 e0 02	 shl	 eax, 2
  00043	50		 push	 eax
  00044	ff 76 30	 push	 DWORD PTR [esi+48]
  00047	53		 push	 ebx
  00048	e8 00 00 00 00	 call	 _luaM_realloc_
  0004d	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00050	83 c4 10	 add	 esp, 16			; 00000010H
; Line 553
  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	89 46 14	 mov	 DWORD PTR [esi+20], eax
; Line 554
  00059	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0005c	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0005f	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00064	0f 87 fa 00 00
	00		 ja	 $LN15@close_func
  0006a	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00071	50		 push	 eax
  00072	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00075	c1 e0 02	 shl	 eax, 2
  00078	50		 push	 eax
  00079	ff 76 38	 push	 DWORD PTR [esi+56]
  0007c	53		 push	 ebx
  0007d	e8 00 00 00 00	 call	 _luaM_realloc_
  00082	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00085	83 c4 10	 add	 esp, 16			; 00000010H
; Line 555
  00088	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0008b	89 46 18	 mov	 DWORD PTR [esi+24], eax
; Line 556
  0008e	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00091	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00094	3d ff ff ff 0f	 cmp	 eax, 268435455		; 0fffffffH
  00099	0f 87 cb 00 00
	00		 ja	 $LN16@close_func
  0009f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000a2	c1 e1 04	 shl	 ecx, 4
  000a5	51		 push	 ecx
  000a6	c1 e0 04	 shl	 eax, 4
  000a9	50		 push	 eax
  000aa	ff 76 2c	 push	 DWORD PTR [esi+44]
  000ad	53		 push	 ebx
  000ae	e8 00 00 00 00	 call	 _luaM_realloc_
  000b3	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  000b6	83 c4 10	 add	 esp, 16			; 00000010H
; Line 557
  000b9	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000bc	89 46 10	 mov	 DWORD PTR [esi+16], eax
; Line 558
  000bf	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  000c2	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000c5	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  000ca	0f 87 a0 00 00
	00		 ja	 $LN17@close_func
  000d0	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  000d7	50		 push	 eax
  000d8	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000db	c1 e0 02	 shl	 eax, 2
  000de	50		 push	 eax
  000df	ff 76 34	 push	 DWORD PTR [esi+52]
  000e2	53		 push	 ebx
  000e3	e8 00 00 00 00	 call	 _luaM_realloc_
  000e8	89 46 34	 mov	 DWORD PTR [esi+52], eax
; Line 559
  000eb	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000ee	89 46 1c	 mov	 DWORD PTR [esi+28], eax
; Line 560
  000f1	0f bf 47 28	 movsx	 eax, WORD PTR [edi+40]
  000f5	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000f8	c1 e0 02	 shl	 eax, 2
  000fb	50		 push	 eax
  000fc	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000ff	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00102	c1 e0 02	 shl	 eax, 2
  00105	50		 push	 eax
  00106	ff 76 3c	 push	 DWORD PTR [esi+60]
  00109	53		 push	 ebx
  0010a	e8 00 00 00 00	 call	 _luaM_realloc_
  0010f	89 46 3c	 mov	 DWORD PTR [esi+60], eax
; Line 561
  00112	0f bf 47 28	 movsx	 eax, WORD PTR [edi+40]
  00116	89 46 20	 mov	 DWORD PTR [esi+32], eax
; Line 562
  00119	0f b6 47 2b	 movzx	 eax, BYTE PTR [edi+43]
  0011d	c1 e0 03	 shl	 eax, 3
  00120	50		 push	 eax
  00121	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00124	c1 e0 03	 shl	 eax, 3
  00127	50		 push	 eax
  00128	ff 76 40	 push	 DWORD PTR [esi+64]
  0012b	53		 push	 ebx
  0012c	e8 00 00 00 00	 call	 _luaM_realloc_
; Line 565
  00131	8b 4d 08	 mov	 ecx, DWORD PTR _ls$[ebp]
  00134	83 c4 30	 add	 esp, 48			; 00000030H
  00137	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0013a	0f b6 47 2b	 movzx	 eax, BYTE PTR [edi+43]
  0013e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00141	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00144	89 41 30	 mov	 DWORD PTR [ecx+48], eax
; Line 566
  00147	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0014a	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0014e	7e 09		 jle	 SHORT $LN1@close_func
  00150	53		 push	 ebx
  00151	e8 00 00 00 00	 call	 _luaC_step
  00156	83 c4 04	 add	 esp, 4
$LN1@close_func:
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
; Line 567
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
$LN13@close_func:
; Line 552
  0015e	53		 push	 ebx
  0015f	e8 00 00 00 00	 call	 _luaM_toobig
$LN18@close_func:
$LN15@close_func:
; Line 554
  00164	53		 push	 ebx
  00165	e8 00 00 00 00	 call	 _luaM_toobig
$LN19@close_func:
$LN16@close_func:
; Line 556
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _luaM_toobig
$LN20@close_func:
$LN17@close_func:
; Line 558
  00170	53		 push	 ebx
  00171	e8 00 00 00 00	 call	 _luaM_toobig
$LN21@close_func:
$LN12@close_func:
  00176	cc		 int	 3
_close_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _open_func
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_fs$ = 12						; size = 4
_bl$ = 16						; size = 4
_open_func PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 523
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 525
  00003	8b 55 08	 mov	 edx, DWORD PTR _ls$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _fs$[ebp]
  0000a	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0000d	89 46 04	 mov	 DWORD PTR [esi+4], eax
; Line 535
  00010	33 c0		 xor	 eax, eax
  00012	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00015	89 72 30	 mov	 DWORD PTR [edx+48], esi
; Line 539
  00018	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001a	66 89 46 28	 mov	 WORD PTR [esi+40], ax
  0001e	88 46 2a	 mov	 BYTE PTR [esi+42], al
  00021	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00028	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002f	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1
  00036	66 c7 46 2b 00
	00		 mov	 WORD PTR [esi+43], 0
  0003c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00043	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0004a	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0004d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00050	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00053	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; Line 540
  0005a	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  0005d	89 41 48	 mov	 DWORD PTR [ecx+72], eax
; Line 541
  00060	c6 41 08 02	 mov	 BYTE PTR [ecx+8], 2
; Line 542
  00064	8b 4d 10	 mov	 ecx, DWORD PTR _bl$[ebp]
  00067	c6 41 0e 00	 mov	 BYTE PTR [ecx+14], 0
  0006b	8a 46 2a	 mov	 al, BYTE PTR [esi+42]
  0006e	88 41 0c	 mov	 BYTE PTR [ecx+12], al
  00071	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00074	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00077	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0007a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0007d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00080	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00083	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00086	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00089	c6 41 0d 00	 mov	 BYTE PTR [ecx+13], 0
  0008d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00090	89 01		 mov	 DWORD PTR [ecx], eax
  00092	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00095	5e		 pop	 esi
; Line 543
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_open_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _codeclosure
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_v$ = 12						; size = 4
_codeclosure PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 516
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 517
  00003	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00006	56		 push	 esi
  00007	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
; Line 518
  0000d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00010	48		 dec	 eax
  00011	50		 push	 eax
  00012	6a 00		 push	 0
  00014	6a 2c		 push	 44			; 0000002cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _luaK_codeABx
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
; Line 519
  0001f	51		 push	 ecx
  00020	56		 push	 esi
  00021	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1
  00028	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
  0002f	c7 01 0c 00 00
	00		 mov	 DWORD PTR [ecx], 12	; 0000000cH
  00035	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00038	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	5e		 pop	 esi
; Line 520
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_codeclosure ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _addprototype
_TEXT	SEGMENT
_fs$1$ = -4						; size = 4
_L$1$ = 8						; size = 4
_ls$ = 8						; size = 4
_addprototype PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 494
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 496
  00004	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
; Line 497
  0000d	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00010	89 45 fc	 mov	 DWORD PTR _fs$1$[ebp], eax
  00013	89 4d 08	 mov	 DWORD PTR _L$1$[ebp], ecx
; Line 498
  00016	8b 38		 mov	 edi, DWORD PTR [eax]
; Line 499
  00018	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0001b	8d 5f 1c	 lea	 ebx, DWORD PTR [edi+28]
  0001e	8b 33		 mov	 esi, DWORD PTR [ebx]
  00020	3b c6		 cmp	 eax, esi
  00022	7c 3b		 jl	 SHORT $LN1@addprototy
; Line 501
  00024	40		 inc	 eax
  00025	3b c6		 cmp	 eax, esi
  00027	7e 1f		 jle	 SHORT $LN9@addprototy
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_09CEAIPAHE@functions?$AA@
  0002e	68 ff ff 03 00	 push	 262143			; 0003ffffH
  00033	6a 04		 push	 4
  00035	53		 push	 ebx
  00036	ff 77 34	 push	 DWORD PTR [edi+52]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _luaM_growaux_
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _L$1$[ebp]
  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	89 47 34	 mov	 DWORD PTR [edi+52], eax
$LN9@addprototy:
; Line 502
  00048	3b 33		 cmp	 esi, DWORD PTR [ebx]
  0004a	7d 13		 jge	 SHORT $LN1@addprototy
  0004c	8d 64 24 00	 npad	 4
$LL2@addprototy:
  00050	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00053	c7 04 b0 00 00
	00 00		 mov	 DWORD PTR [eax+esi*4], 0
  0005a	46		 inc	 esi
  0005b	3b 33		 cmp	 esi, DWORD PTR [ebx]
  0005d	7c f1		 jl	 SHORT $LL2@addprototy
$LN1@addprototy:
; Line 504
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 _luaF_newproto
  00065	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  00068	8b f0		 mov	 esi, eax
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _fs$1$[ebp]
  0006d	83 c4 04	 add	 esp, 4
  00070	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00073	89 34 91	 mov	 DWORD PTR [ecx+edx*4], esi
  00076	ff 40 20	 inc	 DWORD PTR [eax+32]
; Line 505
  00079	f6 47 05 04	 test	 BYTE PTR [edi+5], 4
  0007d	74 13		 je	 SHORT $LN13@addprototy
  0007f	f6 46 05 03	 test	 BYTE PTR [esi+5], 3
  00083	74 0d		 je	 SHORT $LN13@addprototy
  00085	56		 push	 esi
  00086	57		 push	 edi
  00087	ff 75 08	 push	 DWORD PTR _L$1$[ebp]
  0008a	e8 00 00 00 00	 call	 _luaC_barrier_
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@addprototy:
; Line 506
  00092	5f		 pop	 edi
  00093	8b c6		 mov	 eax, esi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
; Line 507
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
_addprototype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _leaveblock
_TEXT	SEGMENT
_ls$1$ = 8						; size = 4
_fs$ = 8						; size = 4
_leaveblock PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 468
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 469
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _fs$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]
; Line 470
  0000c	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  0000f	89 75 08	 mov	 DWORD PTR _ls$1$[ebp], esi
; Line 471
  00012	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00015	74 27		 je	 SHORT $LN5@leaveblock
  00017	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0001b	74 21		 je	 SHORT $LN5@leaveblock
; Line 473
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 _luaK_jump
; Line 474
  00023	0f b6 4f 0c	 movzx	 ecx, BYTE PTR [edi+12]
  00027	8b f0		 mov	 esi, eax
  00029	51		 push	 ecx
  0002a	56		 push	 esi
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 _luaK_patchclose
; Line 475
  00031	56		 push	 esi
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 _luaK_patchtohere
  00038	8b 75 08	 mov	 esi, DWORD PTR _ls$1$[ebp]
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
$LN5@leaveblock:
; Line 477
  0003e	80 7f 0e 00	 cmp	 BYTE PTR [edi+14], 0
  00042	74 36		 je	 SHORT $LN8@leaveblock
; Line 478
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_05ELPHFHOI@break?$AA@
  00049	ff 76 34	 push	 DWORD PTR [esi+52]
  0004c	e8 00 00 00 00	 call	 _luaS_new
  00051	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00054	ff 71 10	 push	 DWORD PTR [ecx+16]
  00057	6a 00		 push	 0
  00059	50		 push	 eax
  0005a	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0005d	83 c0 18	 add	 eax, 24			; 00000018H
  00060	50		 push	 eax
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _newlabelentry
  00067	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0006a	c1 e0 04	 shl	 eax, 4
  0006d	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00070	50		 push	 eax
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 _findgotos
  00077	83 c4 24	 add	 esp, 36			; 00000024H
$LN8@leaveblock:
; Line 479
  0007a	8b 07		 mov	 eax, DWORD PTR [edi]
  0007c	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
; Line 480
  0007f	0f b6 47 0c	 movzx	 eax, BYTE PTR [edi+12]
  00083	50		 push	 eax
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 _removevars
; Line 482
  0008a	8a 43 2a	 mov	 al, BYTE PTR [ebx+42]
  0008d	83 c4 08	 add	 esp, 8
  00090	88 43 2c	 mov	 BYTE PTR [ebx+44], al
; Line 483
  00093	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00096	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00099	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; Line 484
  0009c	83 3f 00	 cmp	 DWORD PTR [edi], 0
  0009f	74 0f		 je	 SHORT $LN3@leaveblock
; Line 485
  000a1	57		 push	 edi
  000a2	53		 push	 ebx
  000a3	e8 00 00 00 00	 call	 _movegotosout
  000a8	83 c4 08	 add	 esp, 8
$LN1@leaveblock:
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
; Line 488
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
$LN3@leaveblock:
; Line 486
  000b0	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  000b3	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000b6	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  000b9	7d f0		 jge	 SHORT $LN1@leaveblock
; Line 487
  000bb	c1 e0 04	 shl	 eax, 4
  000be	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  000c1	50		 push	 eax
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 _undefgoto
$LN13@leaveblock:
$LN10@leaveblock:
  000c8	cc		 int	 3
_leaveblock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _undefgoto
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_gt$ = 12						; size = 4
_undefgoto PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 459
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 462
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _gt$[ebp]
  00006	56		 push	 esi
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	80 78 04 04	 cmp	 BYTE PTR [eax+4], 4
  0000d	75 0b		 jne	 SHORT $LN3@undefgoto
  0000f	80 78 06 00	 cmp	 BYTE PTR [eax+6], 0
  00013	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CC@KOMACILM@?$DM?$CFs?$DO?5at?5line?5?$CFd?5not?5inside?5a?5loo@
  00018	77 05		 ja	 SHORT $LN4@undefgoto
$LN3@undefgoto:
  0001a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CM@OGINCFCB@no?5visible?5label?5?8?$CFs?8?5for?5?$DMgoto?$DO@
$LN4@undefgoto:
; Line 463
  0001f	ff 71 08	 push	 DWORD PTR [ecx+8]
  00022	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00025	83 c0 10	 add	 eax, 16			; 00000010H
  00028	50		 push	 eax
  00029	52		 push	 edx
  0002a	ff 76 34	 push	 DWORD PTR [esi+52]
  0002d	e8 00 00 00 00	 call	 _luaO_pushfstring
  00032	83 c4 10	 add	 esp, 16			; 00000010H
; Line 464
  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	50		 push	 eax
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN9@undefgoto:
$LN8@undefgoto:
  00043	cc		 int	 3
_undefgoto ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _breaklabel
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_breaklabel PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 449
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 450
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_05ELPHFHOI@break?$AA@
  0000c	ff 76 34	 push	 DWORD PTR [esi+52]
  0000f	e8 00 00 00 00	 call	 _luaS_new
; Line 451
  00014	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00017	ff 71 10	 push	 DWORD PTR [ecx+16]
  0001a	6a 00		 push	 0
  0001c	50		 push	 eax
  0001d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00020	83 c0 18	 add	 eax, 24			; 00000018H
  00023	50		 push	 eax
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 _newlabelentry
; Line 452
  0002a	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0002d	c1 e0 04	 shl	 eax, 4
  00030	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00033	50		 push	 eax
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _findgotos
  0003a	83 c4 24	 add	 esp, 36			; 00000024H
  0003d	5e		 pop	 esi
; Line 453
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_breaklabel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _enterblock
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_bl$ = 12						; size = 4
_isloop$ = 16						; size = 1
_enterblock PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 434
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 435
  00003	8b 55 0c	 mov	 edx, DWORD PTR _bl$[ebp]
; Line 436
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
  00009	8a 45 10	 mov	 al, BYTE PTR _isloop$[ebp]
  0000c	88 42 0e	 mov	 BYTE PTR [edx+14], al
  0000f	0f b6 41 2a	 movzx	 eax, BYTE PTR [ecx+42]
  00013	88 42 0c	 mov	 BYTE PTR [edx+12], al
; Line 437
  00016	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00019	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0001c	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0001f	89 42 04	 mov	 DWORD PTR [edx+4], eax
; Line 438
  00022	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00025	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00028	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0002b	89 42 08	 mov	 DWORD PTR [edx+8], eax
; Line 439
  0002e	c6 42 0d 00	 mov	 BYTE PTR [edx+13], 0
; Line 440
  00032	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00035	89 02		 mov	 DWORD PTR [edx], eax
; Line 441
  00037	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
; Line 443
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
_enterblock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _movegotosout
_TEXT	SEGMENT
_gl$1$ = -28						; size = 4
_ls$1$ = -24						; size = 4
tv372 = -20						; size = 4
$T1 = -16						; size = 4
tv370 = -12						; size = 4
tv373 = -8						; size = 4
_gt$1$ = -4						; size = 4
_fs$ = 8						; size = 4
_bl$ = 12						; size = 4
_movegotosout PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 416
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
; Line 418
  00006	8b 55 08	 mov	 edx, DWORD PTR _fs$[ebp]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _bl$[ebp]
  0000c	57		 push	 edi
  0000d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00010	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00013	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00016	83 c0 0c	 add	 eax, 12			; 0000000cH
  00019	89 45 e4	 mov	 DWORD PTR _gl$1$[ebp], eax
; Line 421
  0001c	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  0001f	0f 8d 9f 00 00
	00		 jge	 $LN4@movegotoso
; Line 417
  00025	53		 push	 ebx
  00026	8b df		 mov	 ebx, edi
  00028	56		 push	 esi
  00029	c1 e3 04	 shl	 ebx, 4
  0002c	8d 64 24 00	 npad	 4
$LL5@movegotoso:
; Line 422
  00030	8b 30		 mov	 esi, DWORD PTR [eax]
; Line 423
  00032	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]
  00035	38 44 1e 0c	 cmp	 BYTE PTR [esi+ebx+12], al
  00039	76 24		 jbe	 SHORT $LN3@movegotoso
; Line 424
  0003b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0003f	74 17		 je	 SHORT $LN2@movegotoso
; Line 425
  00041	0f b6 c0	 movzx	 eax, al
  00044	50		 push	 eax
  00045	ff 74 1e 04	 push	 DWORD PTR [esi+ebx+4]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 _luaK_patchclose
  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _bl$[ebp]
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	8b 55 08	 mov	 edx, DWORD PTR _fs$[ebp]
$LN2@movegotoso:
; Line 426
  00058	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]
  0005b	88 44 1e 0c	 mov	 BYTE PTR [esi+ebx+12], al
$LN3@movegotoso:
; Line 428
  0005f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00062	89 45 e8	 mov	 DWORD PTR _ls$1$[ebp], eax
  00065	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00068	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  0006b	89 4d f8	 mov	 DWORD PTR tv373[ebp], ecx
  0006e	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00071	8b 72 0c	 mov	 esi, DWORD PTR [edx+12]
  00074	03 f3		 add	 esi, ebx
  00076	89 75 fc	 mov	 DWORD PTR _gt$1$[ebp], esi
  00079	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0007c	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  0007f	89 45 ec	 mov	 DWORD PTR tv372[ebp], eax
  00082	89 4d f0	 mov	 DWORD PTR $T1[ebp], ecx
  00085	3b c1		 cmp	 eax, ecx
  00087	7d 23		 jge	 SHORT $LN11@movegotoso
  00089	8b 36		 mov	 esi, DWORD PTR [esi]
  0008b	89 75 f4	 mov	 DWORD PTR tv370[ebp], esi
  0008e	8b f0		 mov	 esi, eax
  00090	c1 e6 04	 shl	 esi, 4
  00093	03 72 18	 add	 esi, DWORD PTR [edx+24]
  00096	8b 55 f4	 mov	 edx, DWORD PTR tv370[ebp]
  00099	8d a4 24 00 00
	00 00		 npad	 7
$LL13@movegotoso:
  000a0	39 16		 cmp	 DWORD PTR [esi], edx
  000a2	74 25		 je	 SHORT $LN18@movegotoso
  000a4	40		 inc	 eax
  000a5	83 c6 10	 add	 esi, 16			; 00000010H
  000a8	3b c1		 cmp	 eax, ecx
  000aa	7c f4		 jl	 SHORT $LL13@movegotoso
$LN11@movegotoso:
; Line 429
  000ac	47		 inc	 edi
  000ad	83 c3 10	 add	 ebx, 16			; 00000010H
$LN1@movegotoso:
; Line 421
  000b0	8b 45 e4	 mov	 eax, DWORD PTR _gl$1$[ebp]
  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _bl$[ebp]
  000b6	8b 55 08	 mov	 edx, DWORD PTR _fs$[ebp]
  000b9	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  000bc	0f 8c 6e ff ff
	ff		 jl	 $LL5@movegotoso
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
$LN4@movegotoso:
  000c4	5f		 pop	 edi
; Line 431
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
$LN18@movegotoso:
; Line 428
  000c9	8b 55 fc	 mov	 edx, DWORD PTR _gt$1$[ebp]
  000cc	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  000cf	38 42 0c	 cmp	 BYTE PTR [edx+12], al
  000d2	76 29		 jbe	 SHORT $LN9@movegotoso
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR tv373[ebp]
  000d7	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000da	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  000dd	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000e1	8b 55 fc	 mov	 edx, DWORD PTR _gt$1$[ebp]
  000e4	75 05		 jne	 SHORT $LN8@movegotoso
  000e6	3b 4d ec	 cmp	 ecx, DWORD PTR tv372[ebp]
  000e9	7e 12		 jle	 SHORT $LN9@movegotoso
$LN8@movegotoso:
  000eb	0f b6 c0	 movzx	 eax, al
  000ee	50		 push	 eax
  000ef	ff 72 04	 push	 DWORD PTR [edx+4]
  000f2	ff 75 f8	 push	 DWORD PTR tv373[ebp]
  000f5	e8 00 00 00 00	 call	 _luaK_patchclose
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@movegotoso:
  000fd	56		 push	 esi
  000fe	57		 push	 edi
  000ff	ff 75 e8	 push	 DWORD PTR _ls$1$[ebp]
  00102	e8 00 00 00 00	 call	 _closegoto
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010a	eb a4		 jmp	 SHORT $LN1@movegotoso
_movegotosout ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _findgotos
_TEXT	SEGMENT
_gl$1$ = -8						; size = 4
_gl$1$ = -4						; size = 4
_ls$ = 8						; size = 4
_lb$ = 12						; size = 4
_findgotos PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 398
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 399
  00008	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 400
  0000b	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0000e	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00011	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00014	89 4d f8	 mov	 DWORD PTR _gl$1$[ebp], ecx
  00017	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0001a	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
; Line 401
  0001d	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  00020	0f 8d 80 00 00
	00		 jge	 $LN27@findgotos
; Line 399
  00026	8b 55 0c	 mov	 edx, DWORD PTR _lb$[ebp]
  00029	57		 push	 edi
  0002a	8b fb		 mov	 edi, ebx
  0002c	c1 e7 04	 shl	 edi, 4
  0002f	90		 npad	 1
$LL4@findgotos:
; Line 402
  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	8b 04 07	 mov	 eax, DWORD PTR [edi+eax]
  00035	3b 02		 cmp	 eax, DWORD PTR [edx]
  00037	75 63		 jne	 SHORT $LN2@findgotos
; Line 403
  00039	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0003c	8b 76 44	 mov	 esi, DWORD PTR [esi+68]
  0003f	83 c6 0c	 add	 esi, 12			; 0000000cH
  00042	89 75 fc	 mov	 DWORD PTR _gl$1$[ebp], esi
  00045	8b 16		 mov	 edx, DWORD PTR [esi]
  00047	8b 75 0c	 mov	 esi, DWORD PTR _lb$[ebp]
  0004a	03 d7		 add	 edx, edi
  0004c	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  0004f	3a 46 0c	 cmp	 al, BYTE PTR [esi+12]
  00052	8b 75 fc	 mov	 esi, DWORD PTR _gl$1$[ebp]
  00055	72 55		 jb	 SHORT $LN30@findgotos
  00057	8b 45 0c	 mov	 eax, DWORD PTR _lb$[ebp]
  0005a	ff 70 04	 push	 DWORD PTR [eax+4]
  0005d	ff 72 04	 push	 DWORD PTR [edx+4]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _luaK_patchlist
  00066	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006c	48		 dec	 eax
  0006d	8b d3		 mov	 edx, ebx
  0006f	3b d8		 cmp	 ebx, eax
  00071	7d 1b		 jge	 SHORT $LN7@findgotos
  00073	8b cf		 mov	 ecx, edi
$LL9@findgotos:
  00075	8b 06		 mov	 eax, DWORD PTR [esi]
  00077	8d 49 10	 lea	 ecx, DWORD PTR [ecx+16]
  0007a	42		 inc	 edx
  0007b	f3 0f 6f 04 01	 movdqu	 xmm0, XMMWORD PTR [ecx+eax]
  00080	f3 0f 7f 44 01
	f0		 movdqu	 XMMWORD PTR [ecx+eax-16], xmm0
  00086	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00089	48		 dec	 eax
  0008a	3b d0		 cmp	 edx, eax
  0008c	7c e7		 jl	 SHORT $LL9@findgotos
$LN7@findgotos:
  0008e	ff 4e 04	 dec	 DWORD PTR [esi+4]
; Line 404
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _gl$1$[ebp]
  00094	8b 55 0c	 mov	 edx, DWORD PTR _lb$[ebp]
  00097	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  0009a	eb 04		 jmp	 SHORT $LN1@findgotos
$LN2@findgotos:
; Line 405
  0009c	43		 inc	 ebx
  0009d	83 c7 10	 add	 edi, 16			; 00000010H
$LN1@findgotos:
; Line 401
  000a0	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  000a3	7c 8b		 jl	 SHORT $LL4@findgotos
  000a5	5f		 pop	 edi
$LN27@findgotos:
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
; Line 407
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN30@findgotos:
; Line 403
  000ac	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
  000af	0f b6 4a 0c	 movzx	 ecx, BYTE PTR [edx+12]
  000b3	8b 77 30	 mov	 esi, DWORD PTR [edi+48]
  000b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b9	03 4e 24	 add	 ecx, DWORD PTR [esi+36]
  000bc	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000bf	8b 00		 mov	 eax, DWORD PTR [eax]
  000c1	0f bf 04 48	 movsx	 eax, WORD PTR [eax+ecx*2]
  000c5	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000c8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ca	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  000cd	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  000d0	83 c0 10	 add	 eax, 16			; 00000010H
  000d3	50		 push	 eax
  000d4	ff 72 08	 push	 DWORD PTR [edx+8]
  000d7	8b 02		 mov	 eax, DWORD PTR [edx]
  000d9	83 c0 10	 add	 eax, 16			; 00000010H
  000dc	50		 push	 eax
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@
  000e2	ff 77 34	 push	 DWORD PTR [edi+52]
  000e5	e8 00 00 00 00	 call	 _luaO_pushfstring
  000ea	83 c4 14	 add	 esp, 20			; 00000014H
  000ed	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  000f4	50		 push	 eax
  000f5	57		 push	 edi
  000f6	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN31@findgotos:
$LN29@findgotos:
  000fb	cc		 int	 3
_findgotos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _newlabelentry
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_l$ = 12						; size = 4
_name$ = 16						; size = 4
_line$ = 20						; size = 4
_pc$ = 24						; size = 4
_newlabelentry PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 381
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; Line 382
  00006	8b 7d 0c	 mov	 edi, DWORD PTR _l$[ebp]
; Line 384
  00009	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  0000c	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0000f	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00012	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00014	7e 1f		 jle	 SHORT $LN1@newlabelen
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OEGJPJFJ@labels?1gotos?$AA@
  0001b	68 ff 7f 00 00	 push	 32767			; 00007fffH
  00020	6a 10		 push	 16			; 00000010H
  00022	50		 push	 eax
  00023	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00026	ff 37		 push	 DWORD PTR [edi]
  00028	ff 70 34	 push	 DWORD PTR [eax+52]
  0002b	e8 00 00 00 00	 call	 _luaM_growaux_
  00030	83 c4 18	 add	 esp, 24			; 00000018H
  00033	89 07		 mov	 DWORD PTR [edi], eax
$LN1@newlabelen:
; Line 385
  00035	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00037	8b f3		 mov	 esi, ebx
  00039	8b 45 10	 mov	 eax, DWORD PTR _name$[ebp]
  0003c	03 f6		 add	 esi, esi
  0003e	89 04 f1	 mov	 DWORD PTR [ecx+esi*8], eax
; Line 386
  00041	8b 17		 mov	 edx, DWORD PTR [edi]
; Line 387
  00043	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00046	8b 4d 14	 mov	 ecx, DWORD PTR _line$[ebp]
  00049	89 4c f2 08	 mov	 DWORD PTR [edx+esi*8+8], ecx
  0004d	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
; Line 389
  00050	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00053	8b 17		 mov	 edx, DWORD PTR [edi]
  00055	8a 49 2a	 mov	 cl, BYTE PTR [ecx+42]
  00058	88 4c f2 0c	 mov	 BYTE PTR [edx+esi*8+12], cl
  0005c	8b 17		 mov	 edx, DWORD PTR [edi]
  0005e	8b 4d 18	 mov	 ecx, DWORD PTR _pc$[ebp]
  00061	89 4c f2 04	 mov	 DWORD PTR [edx+esi*8+4], ecx
  00065	89 47 04	 mov	 DWORD PTR [edi+4], eax
; Line 390
  00068	8b c3		 mov	 eax, ebx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
; Line 391
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_newlabelentry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _findlabel
_TEXT	SEGMENT
tv422 = -16						; size = 4
_fs$1$ = -16						; size = 4
tv414 = -12						; size = 4
tv425 = -8						; size = 4
_dyd$1$ = -4						; size = 4
_ls$ = 8						; size = 4
_g$ = 12						; size = 4
_findlabel PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 360
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 362
  00008	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  0000b	57		 push	 edi
; Line 364
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _g$[ebp]
  0000f	c1 e7 04	 shl	 edi, 4
  00012	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00015	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00018	89 45 f8	 mov	 DWORD PTR tv425[ebp], eax
  0001b	89 4d fc	 mov	 DWORD PTR _dyd$1$[ebp], ecx
  0001e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00021	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00024	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00027	03 d7		 add	 edx, edi
  00029	89 7d f4	 mov	 DWORD PTR tv414[ebp], edi
; Line 366
  0002c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002f	89 45 f0	 mov	 DWORD PTR tv422[ebp], eax
  00032	3b c1		 cmp	 eax, ecx
  00034	7d 1c		 jge	 SHORT $LN4@findlabel
; Line 367
  00036	8b 75 fc	 mov	 esi, DWORD PTR _dyd$1$[ebp]
  00039	8b d8		 mov	 ebx, eax
  0003b	c1 e3 04	 shl	 ebx, 4
  0003e	03 5e 18	 add	 ebx, DWORD PTR [esi+24]
$LL6@findlabel:
; Line 368
  00041	8b 32		 mov	 esi, DWORD PTR [edx]
  00043	39 33		 cmp	 DWORD PTR [ebx], esi
  00045	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00048	74 11		 je	 SHORT $LN23@findlabel
; Line 366
  0004a	40		 inc	 eax
  0004b	83 c3 10	 add	 ebx, 16			; 00000010H
  0004e	3b c1		 cmp	 eax, ecx
  00050	7c ef		 jl	 SHORT $LL6@findlabel
$LN4@findlabel:
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
; Line 376
  00054	33 c0		 xor	 eax, eax
  00056	5b		 pop	 ebx
; Line 377
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN23@findlabel:
; Line 370
  0005b	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  0005e	38 42 0c	 cmp	 BYTE PTR [edx+12], al
  00061	76 2a		 jbe	 SHORT $LN2@findlabel
  00063	8b 7d f8	 mov	 edi, DWORD PTR tv425[ebp]
  00066	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00069	8b 7d f4	 mov	 edi, DWORD PTR tv414[ebp]
  0006c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00070	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00073	75 05		 jne	 SHORT $LN1@findlabel
  00075	3b 4d f0	 cmp	 ecx, DWORD PTR tv422[ebp]
  00078	7e 13		 jle	 SHORT $LN2@findlabel
$LN1@findlabel:
; Line 371
  0007a	0f b6 c0	 movzx	 eax, al
  0007d	50		 push	 eax
  0007e	ff 72 04	 push	 DWORD PTR [edx+4]
  00081	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _luaK_patchclose
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@findlabel:
; Line 372
  0008d	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00090	8b 76 44	 mov	 esi, DWORD PTR [esi+68]
  00093	89 4d f0	 mov	 DWORD PTR _fs$1$[ebp], ecx
  00096	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00099	03 d7		 add	 edx, edi
  0009b	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  0009e	3a 43 0c	 cmp	 al, BYTE PTR [ebx+12]
  000a1	72 46		 jb	 SHORT $LN31@findlabel
  000a3	ff 73 04	 push	 DWORD PTR [ebx+4]
  000a6	ff 72 04	 push	 DWORD PTR [edx+4]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 _luaK_patchlist
  000af	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b5	8b 4d 0c	 mov	 ecx, DWORD PTR _g$[ebp]
  000b8	48		 dec	 eax
  000b9	3b c8		 cmp	 ecx, eax
  000bb	7d 1d		 jge	 SHORT $LN9@findlabel
  000bd	8d 49 00	 npad	 3
$LL11@findlabel:
  000c0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c3	8d 7f 10	 lea	 edi, DWORD PTR [edi+16]
  000c6	41		 inc	 ecx
  000c7	f3 0f 6f 04 38	 movdqu	 xmm0, XMMWORD PTR [eax+edi]
  000cc	f3 0f 7f 44 38
	f0		 movdqu	 XMMWORD PTR [eax+edi-16], xmm0
  000d2	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d5	48		 dec	 eax
  000d6	3b c8		 cmp	 ecx, eax
  000d8	7c e6		 jl	 SHORT $LL11@findlabel
$LN9@findlabel:
  000da	ff 4e 10	 dec	 DWORD PTR [esi+16]
; Line 373
  000dd	b8 01 00 00 00	 mov	 eax, 1
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
; Line 377
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c3		 ret	 0
$LN31@findlabel:
; Line 372
  000e9	8b 75 f0	 mov	 esi, DWORD PTR _fs$1$[ebp]
  000ec	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000ef	0f b6 c0	 movzx	 eax, al
  000f2	03 c8		 add	 ecx, eax
  000f4	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000f7	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  000fa	8b 00		 mov	 eax, DWORD PTR [eax]
  000fc	0f bf 04 48	 movsx	 eax, WORD PTR [eax+ecx*2]
  00100	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00103	8b 06		 mov	 eax, DWORD PTR [esi]
  00105	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00108	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  0010b	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0010e	83 c0 10	 add	 eax, 16			; 00000010H
  00111	50		 push	 eax
  00112	ff 72 08	 push	 DWORD PTR [edx+8]
  00115	8b 02		 mov	 eax, DWORD PTR [edx]
  00117	83 c0 10	 add	 eax, 16			; 00000010H
  0011a	50		 push	 eax
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@
  00120	ff 76 34	 push	 DWORD PTR [esi+52]
  00123	e8 00 00 00 00	 call	 _luaO_pushfstring
  00128	83 c4 14	 add	 esp, 20			; 00000014H
  0012b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00132	50		 push	 eax
  00133	56		 push	 esi
  00134	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN33@findlabel:
$LN30@findlabel:
  00139	cc		 int	 3
_findlabel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _closegoto
_TEXT	SEGMENT
_fs$1$ = -4						; size = 4
_ls$ = 8						; size = 4
_g$ = 12						; size = 4
tv270 = 15						; size = 1
_label$ = 16						; size = 4
_closegoto PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 336
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; Line 340
  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _g$[ebp]
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  0000c	57		 push	 edi
  0000d	8b fb		 mov	 edi, ebx
  0000f	c1 e7 04	 shl	 edi, 4
  00012	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00015	8b 76 44	 mov	 esi, DWORD PTR [esi+68]
  00018	89 4d fc	 mov	 DWORD PTR _fs$1$[ebp], ecx
  0001b	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0001e	03 d7		 add	 edx, edi
; Line 342
  00020	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  00023	88 45 0f	 mov	 BYTE PTR tv270[ebp], al
  00026	8b 45 10	 mov	 eax, DWORD PTR _label$[ebp]
  00029	8a 4d 0f	 mov	 cl, BYTE PTR tv270[ebp]
  0002c	3a 48 0c	 cmp	 cl, BYTE PTR [eax+12]
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _fs$1$[ebp]
  00032	72 40		 jb	 SHORT $LN17@closegoto
; Line 349
  00034	ff 70 04	 push	 DWORD PTR [eax+4]
  00037	ff 72 04	 push	 DWORD PTR [edx+4]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _luaK_patchlist
; Line 351
  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	48		 dec	 eax
  00047	3b d8		 cmp	 ebx, eax
  00049	7d 1f		 jge	 SHORT $LN1@closegoto
  0004b	eb 03 8d 49 00	 npad	 5
$LL3@closegoto:
; Line 352
  00050	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00053	8d 7f 10	 lea	 edi, DWORD PTR [edi+16]
  00056	43		 inc	 ebx
  00057	f3 0f 6f 04 38	 movdqu	 xmm0, XMMWORD PTR [eax+edi]
  0005c	f3 0f 7f 44 38
	f0		 movdqu	 XMMWORD PTR [eax+edi-16], xmm0
  00062	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00065	48		 dec	 eax
  00066	3b d8		 cmp	 ebx, eax
  00068	7c e6		 jl	 SHORT $LL3@closegoto
$LN1@closegoto:
; Line 353
  0006a	ff 4e 10	 dec	 DWORD PTR [esi+16]
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
; Line 354
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN17@closegoto:
; Line 343
  00074	8b 75 fc	 mov	 esi, DWORD PTR _fs$1$[ebp]
  00077	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0007a	0f b6 45 0f	 movzx	 eax, BYTE PTR tv270[ebp]
  0007e	03 c8		 add	 ecx, eax
; Line 346
  00080	8b 5d 08	 mov	 ebx, DWORD PTR _ls$[ebp]
  00083	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00086	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00089	8b 00		 mov	 eax, DWORD PTR [eax]
  0008b	0f bf 04 48	 movsx	 eax, WORD PTR [eax+ecx*2]
  0008f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  00097	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0009a	83 c0 10	 add	 eax, 16			; 00000010H
  0009d	50		 push	 eax
  0009e	ff 72 08	 push	 DWORD PTR [edx+8]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	83 c0 10	 add	 eax, 16			; 00000010H
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@
  000ac	ff 73 34	 push	 DWORD PTR [ebx+52]
  000af	e8 00 00 00 00	 call	 _luaO_pushfstring
  000b4	83 c4 14	 add	 esp, 20			; 00000014H
; Line 347
  000b7	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  000be	50		 push	 eax
  000bf	53		 push	 ebx
  000c0	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN19@closegoto:
$LN16@closegoto:
  000c5	cc		 int	 3
_closegoto ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _enterlevel
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_enterlevel PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 326
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 327
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ls$[ebp]
; Line 329
  00006	ba c8 00 00 00	 mov	 edx, 200		; 000000c8H
  0000b	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0000e	66 ff 40 6e	 inc	 WORD PTR [eax+110]
  00012	66 39 50 6e	 cmp	 WORD PTR [eax+110], dx
  00016	77 02		 ja	 SHORT $LN8@enterlevel
; Line 330
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN8@enterlevel:
; Line 329
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_08CMAFAEJC@C?5levels?$AA@
  0001f	68 c8 00 00 00	 push	 200			; 000000c8H
  00024	ff 71 30	 push	 DWORD PTR [ecx+48]
  00027	e8 00 00 00 00	 call	 _errorlimit
$LN10@enterlevel:
$LN7@enterlevel:
  0002c	cc		 int	 3
_enterlevel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _adjust_assign
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_nvars$ = 12						; size = 4
_nexps$ = 16						; size = 4
_e$ = 20						; size = 4
_adjust_assign PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 306
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 307
  00003	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
; Line 309
  00006	8b 4d 14	 mov	 ecx, DWORD PTR _e$[ebp]
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _nvars$[ebp]
  0000e	8b 58 30	 mov	 ebx, DWORD PTR [eax+48]
  00011	2b 7d 10	 sub	 edi, DWORD PTR _nexps$[ebp]
  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00019	74 33		 je	 SHORT $LN6@adjust_ass
  0001b	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0001e	74 2e		 je	 SHORT $LN6@adjust_ass
; Line 316
  00020	85 c0		 test	 eax, eax
  00022	74 0a		 je	 SHORT $LN2@adjust_ass
  00024	51		 push	 ecx
  00025	53		 push	 ebx
  00026	e8 00 00 00 00	 call	 _luaK_exp2nextreg
  0002b	83 c4 08	 add	 esp, 8
$LN2@adjust_ass:
; Line 317
  0002e	85 ff		 test	 edi, edi
  00030	7e 42		 jle	 SHORT $LN4@adjust_ass
; Line 318
  00032	56		 push	 esi
  00033	0f b6 73 2c	 movzx	 esi, BYTE PTR [ebx+44]
; Line 319
  00037	57		 push	 edi
  00038	53		 push	 ebx
  00039	e8 00 00 00 00	 call	 _luaK_reserveregs
; Line 320
  0003e	57		 push	 edi
  0003f	56		 push	 esi
  00040	53		 push	 ebx
  00041	e8 00 00 00 00	 call	 _luaK_nil
  00046	83 c4 14	 add	 esp, 20			; 00000014H
  00049	5e		 pop	 esi
  0004a	5f		 pop	 edi
  0004b	5b		 pop	 ebx
; Line 323
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN6@adjust_ass:
; Line 310
  0004e	47		 inc	 edi
; Line 311
  0004f	b8 00 00 00 00	 mov	 eax, 0
  00054	0f 48 f8	 cmovs	 edi, eax
; Line 312
  00057	57		 push	 edi
  00058	51		 push	 ecx
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 _luaK_setreturns
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 313
  00062	83 ff 01	 cmp	 edi, 1
  00065	7e 0d		 jle	 SHORT $LN4@adjust_ass
  00067	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0006a	50		 push	 eax
  0006b	53		 push	 ebx
  0006c	e8 00 00 00 00	 call	 _luaK_reserveregs
  00071	83 c4 08	 add	 esp, 8
$LN4@adjust_ass:
  00074	5f		 pop	 edi
  00075	5b		 pop	 ebx
; Line 323
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_adjust_assign ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _singlevar
_TEXT	SEGMENT
_ts$1$ = -32						; size = 4
_key$1 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_var$ = 12						; size = 4
_singlevar PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 293
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _var$[ebp]
; Line 294
  00019	81 7e 10 24 01
	00 00		 cmp	 DWORD PTR [esi+16], 292	; 00000124H
  00020	75 70		 jne	 SHORT $LN16@singlevar
  00022	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00025	56		 push	 esi
  00026	89 45 e0	 mov	 DWORD PTR _ts$1$[ebp], eax
  00029	e8 00 00 00 00	 call	 _luaX_next
; Line 295
  0002e	8b 5e 30	 mov	 ebx, DWORD PTR [esi+48]
; Line 296
  00031	6a 01		 push	 1
  00033	57		 push	 edi
  00034	ff 75 e0	 push	 DWORD PTR _ts$1$[ebp]
  00037	53		 push	 ebx
  00038	e8 00 00 00 00	 call	 _singlevaraux
  0003d	83 c4 14	 add	 esp, 20			; 00000014H
  00040	85 c0		 test	 eax, eax
  00042	75 3d		 jne	 SHORT $LN1@singlevar
; Line 298
  00044	6a 01		 push	 1
  00046	57		 push	 edi
  00047	ff 76 4c	 push	 DWORD PTR [esi+76]
  0004a	53		 push	 ebx
  0004b	e8 00 00 00 00	 call	 _singlevaraux
; Line 300
  00050	ff 75 e0	 push	 DWORD PTR _ts$1$[ebp]
  00053	ff 76 30	 push	 DWORD PTR [esi+48]
  00056	e8 00 00 00 00	 call	 _luaK_stringK
  0005b	89 45 ec	 mov	 DWORD PTR _key$1[ebp+8], eax
; Line 301
  0005e	8d 45 e4	 lea	 eax, DWORD PTR _key$1[ebp]
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	53		 push	 ebx
  00064	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _key$1[ebp+16], -1
  0006b	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _key$1[ebp+20], -1
  00072	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _key$1[ebp], 4
  00079	e8 00 00 00 00	 call	 _luaK_indexed
  0007e	83 c4 24	 add	 esp, 36			; 00000024H
$LN1@singlevar:
; Line 303
  00081	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	33 cd		 xor	 ecx, ebp
  00088	5b		 pop	 ebx
  00089	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
$LN16@singlevar:
; Line 294
  00092	68 24 01 00 00	 push	 292			; 00000124H
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 _error_expected
$LN18@singlevar:
$LN15@singlevar:
  0009d	cc		 int	 3
_singlevar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _singlevaraux
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_n$ = 12						; size = 4
_var$ = 16						; size = 4
_base$ = 20						; size = 4
_singlevaraux PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 267
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 268
  00004	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN7@singlevara
; Line 269
  0000b	33 c0		 xor	 eax, eax
  0000d	5e		 pop	 esi
; Line 290
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN7@singlevara:
  00010	57		 push	 edi
; Line 271
  00011	8b 7d 0c	 mov	 edi, DWORD PTR _n$[ebp]
  00014	57		 push	 edi
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _searchvar
  0001b	8b d0		 mov	 edx, eax
  0001d	83 c4 08	 add	 esp, 8
; Line 272
  00020	85 d2		 test	 edx, edx
  00022	78 43		 js	 SHORT $LN5@singlevara
; Line 274
  00024	83 7d 14 00	 cmp	 DWORD PTR _base$[ebp], 0
  00028	8b 4d 10	 mov	 ecx, DWORD PTR _var$[ebp]
  0002b	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1
  00032	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
  00039	c7 01 08 00 00
	00		 mov	 DWORD PTR [ecx], 8
  0003f	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00042	75 1a		 jne	 SHORT $LN14@singlevara
; Line 275
  00044	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00047	0f b6 41 0c	 movzx	 eax, BYTE PTR [ecx+12]
  0004b	3b c2		 cmp	 eax, edx
  0004d	7e 0b		 jle	 SHORT $LN12@singlevara
  0004f	90		 npad	 1
$LL13@singlevara:
  00050	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00052	0f b6 41 0c	 movzx	 eax, BYTE PTR [ecx+12]
  00056	3b c2		 cmp	 eax, edx
  00058	7f f6		 jg	 SHORT $LL13@singlevara
$LN12@singlevara:
  0005a	c6 41 0d 01	 mov	 BYTE PTR [ecx+13], 1
$LN14@singlevara:
; Line 276
  0005e	5f		 pop	 edi
  0005f	b8 08 00 00 00	 mov	 eax, 8
  00064	5e		 pop	 esi
; Line 290
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
$LN5@singlevara:
; Line 279
  00067	8b 06		 mov	 eax, DWORD PTR [esi]
  00069	0f b6 4e 2b	 movzx	 ecx, BYTE PTR [esi+43]
  0006d	53		 push	 ebx
  0006e	8b 5d 10	 mov	 ebx, DWORD PTR _var$[ebp]
  00071	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  00074	33 c0		 xor	 eax, eax
  00076	85 c9		 test	 ecx, ecx
  00078	7e 16		 jle	 SHORT $LN33@singlevara
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL19@singlevara:
  00080	39 3c c2	 cmp	 DWORD PTR [edx+eax*8], edi
  00083	74 07		 je	 SHORT $LN26@singlevara
  00085	40		 inc	 eax
  00086	3b c1		 cmp	 eax, ecx
  00088	7c f6		 jl	 SHORT $LL19@singlevara
  0008a	eb 04		 jmp	 SHORT $LN33@singlevara
$LN26@singlevara:
; Line 280
  0008c	85 c0		 test	 eax, eax
  0008e	79 23		 jns	 SHORT $LN2@singlevara
$LN33@singlevara:
; Line 281
  00090	6a 00		 push	 0
  00092	53		 push	 ebx
  00093	57		 push	 edi
  00094	ff 76 04	 push	 DWORD PTR [esi+4]
  00097	e8 00 00 00 00	 call	 _singlevaraux
  0009c	83 c4 10	 add	 esp, 16			; 00000010H
  0009f	85 c0		 test	 eax, eax
  000a1	75 05		 jne	 SHORT $LN1@singlevara
  000a3	5b		 pop	 ebx
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
; Line 290
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
$LN1@singlevara:
; Line 284
  000a8	53		 push	 ebx
  000a9	57		 push	 edi
  000aa	56		 push	 esi
  000ab	e8 00 00 00 00	 call	 _newupvalue
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@singlevara:
; Line 286
  000b3	89 43 08	 mov	 DWORD PTR [ebx+8], eax
; Line 287
  000b6	b8 09 00 00 00	 mov	 eax, 9
  000bb	c7 43 10 ff ff
	ff ff		 mov	 DWORD PTR [ebx+16], -1
  000c2	c7 43 14 ff ff
	ff ff		 mov	 DWORD PTR [ebx+20], -1
  000c9	c7 03 09 00 00
	00		 mov	 DWORD PTR [ebx], 9
  000cf	5b		 pop	 ebx
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
; Line 290
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
_singlevaraux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _markupval
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_level$ = 12						; size = 4
_markupval PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 256
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 257
  00003	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
; Line 258
  00006	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00009	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000c	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00010	3b ca		 cmp	 ecx, edx
  00012	7e 0a		 jle	 SHORT $LN9@markupval
$LL2@markupval:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  0001a	3b ca		 cmp	 ecx, edx
  0001c	7f f6		 jg	 SHORT $LL2@markupval
$LN9@markupval:
; Line 259
  0001e	c6 40 0d 01	 mov	 BYTE PTR [eax+13], 1
; Line 260
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_markupval ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _searchvar
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_n$ = 12						; size = 4
_searchvar PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 242
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 244
  00005	8b 7d 08	 mov	 edi, DWORD PTR _fs$[ebp]
  00008	0f b6 47 2a	 movzx	 eax, BYTE PTR [edi+42]
  0000c	48		 dec	 eax
  0000d	78 32		 js	 SHORT $LN2@searchvar
; Line 245
  0000f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00012	8b 57 24	 mov	 edx, DWORD PTR [edi+36]
  00015	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  00018	8b 31		 mov	 esi, DWORD PTR [ecx]
  0001a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001c	8b 79 3c	 mov	 edi, DWORD PTR [ecx+60]
  0001f	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  00022	8d 14 4e	 lea	 edx, DWORD PTR [esi+ecx*2]
  00025	8b 75 0c	 mov	 esi, DWORD PTR _n$[ebp]
  00028	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL4@searchvar:
  00030	0f bf 0a	 movsx	 ecx, WORD PTR [edx]
  00033	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00036	3b 34 8f	 cmp	 esi, DWORD PTR [edi+ecx*4]
  00039	74 09		 je	 SHORT $LN5@searchvar
; Line 244
  0003b	83 ea 02	 sub	 edx, 2
  0003e	48		 dec	 eax
  0003f	79 ef		 jns	 SHORT $LL4@searchvar
$LN2@searchvar:
; Line 248
  00041	83 c8 ff	 or	 eax, -1
$LN5@searchvar:
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
; Line 249
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_searchvar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _newupvalue
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_name$ = 12						; size = 4
_v$ = 16						; size = 4
_newupvalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 227
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 228
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _fs$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 3b		 mov	 edi, DWORD PTR [ebx]
; Line 230
  0000b	0f b6 43 2b	 movzx	 eax, BYTE PTR [ebx+43]
  0000f	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00012	8b 31		 mov	 esi, DWORD PTR [ecx]
  00014	40		 inc	 eax
  00015	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0001a	0f 8f 9b 00 00
	00		 jg	 $LN17@newupvalue
; Line 232
  00020	3b c6		 cmp	 eax, esi
  00022	7e 24		 jle	 SHORT $LN12@newupvalue
  00024	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_08JKPCMKJ@upvalues?$AA@
  0002c	68 ff 00 00 00	 push	 255			; 000000ffH
  00031	6a 08		 push	 8
  00033	51		 push	 ecx
  00034	ff 77 40	 push	 DWORD PTR [edi+64]
  00037	ff 70 34	 push	 DWORD PTR [eax+52]
  0003a	e8 00 00 00 00	 call	 _luaM_growaux_
  0003f	83 c4 18	 add	 esp, 24			; 00000018H
  00042	89 47 40	 mov	 DWORD PTR [edi+64], eax
  00045	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
$LN12@newupvalue:
; Line 233
  00048	3b 31		 cmp	 esi, DWORD PTR [ecx]
  0004a	7d 13		 jge	 SHORT $LN1@newupvalue
  0004c	8d 64 24 00	 npad	 4
$LL2@newupvalue:
  00050	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00053	c7 04 f0 00 00
	00 00		 mov	 DWORD PTR [eax+esi*8], 0
  0005a	46		 inc	 esi
  0005b	3b 31		 cmp	 esi, DWORD PTR [ecx]
  0005d	7c f1		 jl	 SHORT $LL2@newupvalue
$LN1@newupvalue:
; Line 234
  0005f	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00062	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00065	0f b6 4b 2b	 movzx	 ecx, BYTE PTR [ebx+43]
  00069	83 3e 08	 cmp	 DWORD PTR [esi], 8
  0006c	0f 94 c2	 sete	 dl
  0006f	88 54 c8 04	 mov	 BYTE PTR [eax+ecx*8+4], dl
; Line 235
  00073	0f b6 53 2b	 movzx	 edx, BYTE PTR [ebx+43]
  00077	8b 4f 40	 mov	 ecx, DWORD PTR [edi+64]
  0007a	8a 46 08	 mov	 al, BYTE PTR [esi+8]
  0007d	88 44 d1 05	 mov	 BYTE PTR [ecx+edx*8+5], al
; Line 236
  00081	0f b6 4b 2b	 movzx	 ecx, BYTE PTR [ebx+43]
  00085	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00088	8b 55 0c	 mov	 edx, DWORD PTR _name$[ebp]
  0008b	89 14 c8	 mov	 DWORD PTR [eax+ecx*8], edx
; Line 237
  0008e	f6 47 05 04	 test	 BYTE PTR [edi+5], 4
  00092	74 16		 je	 SHORT $LN6@newupvalue
  00094	f6 42 05 03	 test	 BYTE PTR [edx+5], 3
  00098	74 10		 je	 SHORT $LN6@newupvalue
  0009a	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0009d	52		 push	 edx
  0009e	57		 push	 edi
  0009f	ff 70 34	 push	 DWORD PTR [eax+52]
  000a2	e8 00 00 00 00	 call	 _luaC_barrier_
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@newupvalue:
; Line 238
  000aa	8a 4b 2b	 mov	 cl, BYTE PTR [ebx+43]
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000b2	88 43 2b	 mov	 BYTE PTR [ebx+43], al
  000b5	0f b6 c1	 movzx	 eax, cl
  000b8	5b		 pop	 ebx
; Line 239
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
$LN17@newupvalue:
; Line 230
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_08JKPCMKJ@upvalues?$AA@
  000c0	68 ff 00 00 00	 push	 255			; 000000ffH
  000c5	53		 push	 ebx
  000c6	e8 00 00 00 00	 call	 _errorlimit
$LN19@newupvalue:
$LN16@newupvalue:
  000cb	cc		 int	 3
_newupvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _searchupvalue
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_name$ = 12						; size = 4
_searchupvalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 217
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 219
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _fs$[ebp]
  00006	56		 push	 esi
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
; Line 220
  00009	0f b6 49 2b	 movzx	 ecx, BYTE PTR [ecx+43]
  0000d	8b 70 40	 mov	 esi, DWORD PTR [eax+64]
  00010	33 c0		 xor	 eax, eax
  00012	85 c9		 test	 ecx, ecx
  00014	7e 14		 jle	 SHORT $LN2@searchupva
  00016	8b 55 0c	 mov	 edx, DWORD PTR _name$[ebp]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL4@searchupva:
; Line 221
  00020	39 14 c6	 cmp	 DWORD PTR [esi+eax*8], edx
  00023	74 08		 je	 SHORT $LN5@searchupva
; Line 220
  00025	40		 inc	 eax
  00026	3b c1		 cmp	 eax, ecx
  00028	7c f6		 jl	 SHORT $LL4@searchupva
$LN2@searchupva:
; Line 223
  0002a	83 c8 ff	 or	 eax, -1
$LN5@searchupva:
  0002d	5e		 pop	 esi
; Line 224
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_searchupvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _removevars
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_tolevel$ = 12						; size = 4
_removevars PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 210
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 211
  00003	8b 45 08	 mov	 eax, DWORD PTR _fs$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _tolevel$[ebp]
  0000b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000e	0f b6 50 2a	 movzx	 edx, BYTE PTR [eax+42]
  00012	8b 71 44	 mov	 esi, DWORD PTR [ecx+68]
  00015	8b cf		 mov	 ecx, edi
  00017	2b ca		 sub	 ecx, edx
  00019	01 4e 04	 add	 DWORD PTR [esi+4], ecx
; Line 212
  0001c	0f b6 48 2a	 movzx	 ecx, BYTE PTR [eax+42]
  00020	3b cf		 cmp	 ecx, edi
  00022	7e 2d		 jle	 SHORT $LN1@removevars
$LL2@removevars:
; Line 213
  00024	fe 48 2a	 dec	 BYTE PTR [eax+42]
  00027	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002a	0f b6 50 2a	 movzx	 edx, BYTE PTR [eax+42]
  0002e	03 50 24	 add	 edx, DWORD PTR [eax+36]
  00031	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  00034	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00036	0f bf 0c 51	 movsx	 ecx, WORD PTR [ecx+edx*2]
  0003a	8d 34 49	 lea	 esi, DWORD PTR [ecx+ecx*2]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00042	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00045	89 4c b2 08	 mov	 DWORD PTR [edx+esi*4+8], ecx
  00049	0f b6 48 2a	 movzx	 ecx, BYTE PTR [eax+42]
  0004d	3b cf		 cmp	 ecx, edi
  0004f	7f d3		 jg	 SHORT $LL2@removevars
$LN1@removevars:
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
; Line 214
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_removevars ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _adjustlocalvars
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_nvars$ = 12						; size = 4
_adjustlocalvars PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 201
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 202
  00003	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00006	53		 push	 ebx
; Line 203
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _nvars$[ebp]
  0000a	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0000d	00 58 2a	 add	 BYTE PTR [eax+42], bl
; Line 204
  00010	85 db		 test	 ebx, ebx
  00012	74 29		 je	 SHORT $LN1@adjustloca
  00014	56		 push	 esi
$LL3@adjustloca:
; Line 205
  00015	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00018	0f b6 50 2a	 movzx	 edx, BYTE PTR [eax+42]
  0001c	2b d3		 sub	 edx, ebx
  0001e	03 50 24	 add	 edx, DWORD PTR [eax+36]
  00021	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  00024	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00026	0f bf 0c 51	 movsx	 ecx, WORD PTR [ecx+edx*2]
  0002a	8d 34 49	 lea	 esi, DWORD PTR [ecx+ecx*2]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00032	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00035	89 4c b2 04	 mov	 DWORD PTR [edx+esi*4+4], ecx
  00039	4b		 dec	 ebx
  0003a	75 d9		 jne	 SHORT $LL3@adjustloca
  0003c	5e		 pop	 esi
$LN1@adjustloca:
  0003d	5b		 pop	 ebx
; Line 207
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_adjustlocalvars ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _getlocvar
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_i$ = 12						; size = 4
_getlocvar PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 194
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 197
  00003	8b 55 08	 mov	 edx, DWORD PTR _fs$[ebp]
  00006	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00009	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  0000c	03 4d 0c	 add	 ecx, DWORD PTR _i$[ebp]
  0000f	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00012	8b 00		 mov	 eax, DWORD PTR [eax]
  00014	0f bf 04 48	 movsx	 eax, WORD PTR [eax+ecx*2]
  00018	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0001b	8b 02		 mov	 eax, DWORD PTR [edx]
  0001d	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  00020	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
; Line 198
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_getlocvar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _new_localvarliteral_
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_name$ = 12						; size = 4
_sz$ = 16						; size = 4
_new_localvarliteral_ PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 186
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 187
  00003	ff 75 10	 push	 DWORD PTR _sz$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _ls$[ebp]
  0000c	e8 00 00 00 00	 call	 _luaX_newstring
  00011	50		 push	 eax
  00012	ff 75 08	 push	 DWORD PTR _ls$[ebp]
  00015	e8 00 00 00 00	 call	 _new_localvar
  0001a	83 c4 14	 add	 esp, 20			; 00000014H
; Line 188
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
_new_localvarliteral_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _new_localvar
_TEXT	SEGMENT
_reg$1$ = 8						; size = 4
_ls$ = 8						; size = 4
_name$ = 12						; size = 4
_new_localvar PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 174
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; Line 175
  00006	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
; Line 177
  00009	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  0000c	57		 push	 edi
  0000d	8b 5f 30	 mov	 ebx, DWORD PTR [edi+48]
  00010	8b 77 44	 mov	 esi, DWORD PTR [edi+68]
  00013	e8 00 00 00 00	 call	 _registerlocalvar
  00018	89 45 08	 mov	 DWORD PTR _reg$1$[ebp], eax
  0001b	83 c4 08	 add	 esp, 8
; Line 179
  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	8b c8		 mov	 ecx, eax
  00023	2b 4b 24	 sub	 ecx, DWORD PTR [ebx+36]
  00026	41		 inc	 ecx
  00027	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  0002d	7f 3a		 jg	 SHORT $LN9@new_localv
; Line 181
  0002f	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00032	83 c0 02	 add	 eax, 2
  00035	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00037	7e 1c		 jle	 SHORT $LN1@new_localv
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EIDMAHJI@local?5variables?$AA@
  0003e	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00043	6a 02		 push	 2
  00045	51		 push	 ecx
  00046	ff 36		 push	 DWORD PTR [esi]
  00048	ff 77 34	 push	 DWORD PTR [edi+52]
  0004b	e8 00 00 00 00	 call	 _luaM_growaux_
  00050	83 c4 18	 add	 esp, 24			; 00000018H
  00053	89 06		 mov	 DWORD PTR [esi], eax
$LN1@new_localv:
; Line 182
  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00058	8b 06		 mov	 eax, DWORD PTR [esi]
  0005a	8b 55 08	 mov	 edx, DWORD PTR _reg$1$[ebp]
  0005d	5f		 pop	 edi
  0005e	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  00062	ff 46 04	 inc	 DWORD PTR [esi+4]
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
; Line 183
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
$LN9@new_localv:
; Line 179
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EIDMAHJI@local?5variables?$AA@
  0006e	68 c8 00 00 00	 push	 200			; 000000c8H
  00073	53		 push	 ebx
  00074	e8 00 00 00 00	 call	 _errorlimit
$LN11@new_localv:
$LN8@new_localv:
  00079	cc		 int	 3
_new_localvar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _registerlocalvar
_TEXT	SEGMENT
_fs$1$ = -4						; size = 4
_ls$ = 8						; size = 4
_varname$ = 12						; size = 4
_registerlocalvar PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 161
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 162
  00004	8b 4d 08	 mov	 ecx, DWORD PTR _ls$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0000d	89 55 fc	 mov	 DWORD PTR _fs$1$[ebp], edx
; Line 163
  00010	8b 3a		 mov	 edi, DWORD PTR [edx]
; Line 166
  00012	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  00016	8d 5f 20	 lea	 ebx, DWORD PTR [edi+32]
  00019	8b 33		 mov	 esi, DWORD PTR [ebx]
  0001b	40		 inc	 eax
  0001c	3b c6		 cmp	 eax, esi
  0001e	7e 21		 jle	 SHORT $LN8@registerlo
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EIDMAHJI@local?5variables?$AA@
  00025	68 ff 7f 00 00	 push	 32767			; 00007fffH
  0002a	6a 0c		 push	 12			; 0000000cH
  0002c	53		 push	 ebx
  0002d	ff 77 3c	 push	 DWORD PTR [edi+60]
  00030	ff 71 34	 push	 DWORD PTR [ecx+52]
  00033	e8 00 00 00 00	 call	 _luaM_growaux_
  00038	8b 55 fc	 mov	 edx, DWORD PTR _fs$1$[ebp]
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	89 47 3c	 mov	 DWORD PTR [edi+60], eax
$LN8@registerlo:
; Line 167
  00041	3b 33		 cmp	 esi, DWORD PTR [ebx]
  00043	7d 1e		 jge	 SHORT $LN1@registerlo
  00045	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00048	c1 e1 02	 shl	 ecx, 2
  0004b	eb 03 8d 49 00	 npad	 5
$LL2@registerlo:
  00050	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  00053	8d 49 0c	 lea	 ecx, DWORD PTR [ecx+12]
  00056	46		 inc	 esi
  00057	c7 44 01 f4 00
	00 00 00	 mov	 DWORD PTR [ecx+eax-12], 0
  0005f	3b 33		 cmp	 esi, DWORD PTR [ebx]
  00061	7c ed		 jl	 SHORT $LL2@registerlo
$LN1@registerlo:
; Line 168
  00063	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  00067	8b 55 0c	 mov	 edx, DWORD PTR _varname$[ebp]
  0006a	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0006d	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  00070	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
; Line 169
  00073	f6 47 05 04	 test	 BYTE PTR [edi+5], 4
  00077	74 16		 je	 SHORT $LN6@registerlo
  00079	f6 42 05 03	 test	 BYTE PTR [edx+5], 3
  0007d	74 10		 je	 SHORT $LN6@registerlo
  0007f	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00082	52		 push	 edx
  00083	57		 push	 edi
  00084	ff 70 34	 push	 DWORD PTR [eax+52]
  00087	e8 00 00 00 00	 call	 _luaC_barrier_
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@registerlo:
; Line 170
  0008f	8b 55 fc	 mov	 edx, DWORD PTR _fs$1$[ebp]
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	0f b7 42 28	 movzx	 eax, WORD PTR [edx+40]
  00099	8b c8		 mov	 ecx, eax
  0009b	40		 inc	 eax
  0009c	66 89 42 28	 mov	 WORD PTR [edx+40], ax
  000a0	0f bf c1	 movsx	 eax, cx
; Line 171
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
_registerlocalvar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _checkname
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_e$ = 12						; size = 4
_checkname PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 156
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 157
  00005	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
  00008	81 7f 10 24 01
	00 00		 cmp	 DWORD PTR [edi+16], 292	; 00000124H
  0000f	75 33		 jne	 SHORT $LN15@checkname
  00011	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 _luaX_next
  0001a	56		 push	 esi
  0001b	ff 77 30	 push	 DWORD PTR [edi+48]
  0001e	e8 00 00 00 00	 call	 _luaK_stringK
  00023	8b 4d 0c	 mov	 ecx, DWORD PTR _e$[ebp]
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	5f		 pop	 edi
  0002a	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1
  00031	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
  00038	c7 01 04 00 00
	00		 mov	 DWORD PTR [ecx], 4
  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00041	5e		 pop	 esi
; Line 158
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
$LN15@checkname:
; Line 157
  00044	68 24 01 00 00	 push	 292			; 00000124H
  00049	57		 push	 edi
  0004a	e8 00 00 00 00	 call	 _error_expected
$LN17@checkname:
$LN14@checkname:
  0004f	cc		 int	 3
_checkname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _codestring
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_e$ = 12						; size = 4
_s$ = 16						; size = 4
_codestring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 151
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 152
  00003	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _s$[ebp]
  00009	ff 70 30	 push	 DWORD PTR [eax+48]
  0000c	e8 00 00 00 00	 call	 _luaK_stringK
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _e$[ebp]
  00014	83 c4 08	 add	 esp, 8
  00017	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1
  0001e	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
  00025	c7 01 04 00 00
	00		 mov	 DWORD PTR [ecx], 4
  0002b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; Line 153
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_codestring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _init_exp
_TEXT	SEGMENT
_e$ = 8							; size = 4
_k$ = 12						; size = 4
_i$ = 16						; size = 4
_init_exp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 144
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 145
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _e$[ebp]
; Line 146
  00006	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  00009	89 01		 mov	 DWORD PTR [ecx], eax
; Line 147
  0000b	8b 45 10	 mov	 eax, DWORD PTR _i$[ebp]
  0000e	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1
  00015	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
  0001c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; Line 148
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_init_exp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _str_checkname
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_str_checkname PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 135
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 137
  00003	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00006	81 78 10 24 01
	00 00		 cmp	 DWORD PTR [eax+16], 292	; 00000124H
  0000d	75 12		 jne	 SHORT $LN8@str_checkn
; Line 138
  0000f	56		 push	 esi
  00010	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
; Line 139
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _luaX_next
  00019	83 c4 04	 add	 esp, 4
; Line 140
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
; Line 141
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@str_checkn:
; Line 137
  00021	68 24 01 00 00	 push	 292			; 00000124H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _error_expected
$LN10@str_checkn:
$LN7@str_checkn:
  0002c	cc		 int	 3
_str_checkname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _check_match
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_what$ = 12						; size = 4
_who$ = 16						; size = 4
_where$ = 20						; size = 4
_check_match PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 122
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 123
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _what$[ebp]
  0000b	39 7e 10	 cmp	 DWORD PTR [esi+16], edi
  0000e	75 0d		 jne	 SHORT $LN7@check_matc
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 _luaX_next
  00016	83 c4 04	 add	 esp, 4
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
; Line 132
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
; Line 123
$LN7@check_matc:
; Line 124
  0001d	8b 45 14	 mov	 eax, DWORD PTR _where$[ebp]
  00020	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00023	75 07		 jne	 SHORT $LN14@check_matc
; Line 125
  00025	57		 push	 edi
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _error_expected
$LN15@check_matc:
$LN14@check_matc:
; Line 129
  0002c	50		 push	 eax
  0002d	ff 75 10	 push	 DWORD PTR _who$[ebp]
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _luaX_token2str
  00036	83 c4 08	 add	 esp, 8
  00039	50		 push	 eax
  0003a	57		 push	 edi
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _luaX_token2str
  00041	83 c4 08	 add	 esp, 8
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
  0004a	ff 76 34	 push	 DWORD PTR [esi+52]
  0004d	e8 00 00 00 00	 call	 _luaO_pushfstring
  00052	83 c4 14	 add	 esp, 20			; 00000014H
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN16@check_matc:
$LN11@check_matc:
  0005c	cc		 int	 3
_check_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _checknext
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_c$ = 12						; size = 4
_checknext PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 112
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 113
  00003	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _c$[ebp]
  00009	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  0000c	75 0b		 jne	 SHORT $LN8@checknext
; Line 114
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _luaX_next
  00014	83 c4 04	 add	 esp, 4
; Line 115
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN8@checknext:
; Line 113
  00019	51		 push	 ecx
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _error_expected
$LN10@checknext:
$LN7@checknext:
  00020	cc		 int	 3
_checknext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _check
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_c$ = 12						; size = 4
_check	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 106
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 107
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ls$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _c$[ebp]
  00009	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  0000c	75 02		 jne	 SHORT $LN5@check
; Line 109
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN5@check:
; Line 108
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 _error_expected
$LN7@check:
$LN4@check:
  00017	cc		 int	 3
_check	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _testnext
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_c$ = 12						; size = 4
_testnext PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 97
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 98
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ls$[ebp]
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00009	3b 45 0c	 cmp	 eax, DWORD PTR _c$[ebp]
  0000c	75 10		 jne	 SHORT $LN2@testnext
; Line 99
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 _luaX_next
  00014	83 c4 04	 add	 esp, 4
; Line 100
  00017	b8 01 00 00 00	 mov	 eax, 1
; Line 103
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
$LN2@testnext:
; Line 102
  0001e	33 c0		 xor	 eax, eax
; Line 103
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_testnext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _checklimit
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_v$ = 12						; size = 4
_l$ = 16						; size = 4
_what$ = 20						; size = 4
_checklimit PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 92
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 93
  00003	8b 45 10	 mov	 eax, DWORD PTR _l$[ebp]
  00006	39 45 0c	 cmp	 DWORD PTR _v$[ebp], eax
  00009	7f 02		 jg	 SHORT $LN5@checklimit
; Line 94
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
$LN5@checklimit:
; Line 93
  0000d	ff 75 14	 push	 DWORD PTR _what$[ebp]
  00010	50		 push	 eax
  00011	ff 75 08	 push	 DWORD PTR _fs$[ebp]
  00014	e8 00 00 00 00	 call	 _errorlimit
$LN7@checklimit:
$LN4@checklimit:
  00019	cc		 int	 3
_checklimit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _errorlimit
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_limit$ = 12						; size = 4
_what$ = 16						; size = 4
_errorlimit PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 79
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 80
  00004	8b 75 08	 mov	 esi, DWORD PTR _fs$[ebp]
  00007	57		 push	 edi
  00008	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000b	8b 78 34	 mov	 edi, DWORD PTR [eax+52]
; Line 82
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
; Line 85
  00013	85 c0		 test	 eax, eax
  00015	75 07		 jne	 SHORT $LN3@errorlimit
  00017	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@FCKLILMC@main?5function?$AA@
  0001c	eb 0f		 jmp	 SHORT $LN4@errorlimit
$LN3@errorlimit:
  0001e	50		 push	 eax
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _luaO_pushfstring
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@errorlimit:
; Line 87
  0002d	50		 push	 eax
  0002e	ff 75 0c	 push	 DWORD PTR _limit$[ebp]
  00031	ff 75 10	 push	 DWORD PTR _what$[ebp]
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
  00039	57		 push	 edi
  0003a	e8 00 00 00 00	 call	 _luaO_pushfstring
  0003f	83 c4 14	 add	 esp, 20			; 00000014H
; Line 88
  00042	50		 push	 eax
  00043	ff 76 08	 push	 DWORD PTR [esi+8]
  00046	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN6@errorlimit:
$LN5@errorlimit:
  0004b	cc		 int	 3
_errorlimit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _error_expected
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_token$ = 12						; size = 4
_error_expected PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 73
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 75
  00004	ff 75 0c	 push	 DWORD PTR _token$[ebp]
  00007	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _luaX_token2str
  00010	50		 push	 eax
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00016	ff 76 34	 push	 DWORD PTR [esi+52]
  00019	e8 00 00 00 00	 call	 _luaO_pushfstring
  0001e	83 c4 14	 add	 esp, 20			; 00000014H
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN4@error_expe:
$LN3@error_expe:
  00028	cc		 int	 3
_error_expected ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _semerror
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_msg$ = 12						; size = 4
_semerror PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 67
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 68
  00003	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
; Line 69
  00006	ff 75 0c	 push	 DWORD PTR _msg$[ebp]
  00009	50		 push	 eax
  0000a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00011	e8 00 00 00 00	 call	 _luaX_syntaxerror
$LN4@semerror:
$LN3@semerror:
  00016	cc		 int	 3
_semerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _expr
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_v$ = 12						; size = 4
_expr	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1073
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1074
  00003	6a 00		 push	 0
  00005	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  00008	ff 75 08	 push	 DWORD PTR _ls$[ebp]
  0000b	e8 00 00 00 00	 call	 _subexpr
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1075
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_expr	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _statement
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_statement PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1535
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 1536
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 1537
  00007	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  0000c	57		 push	 edi
  0000d	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00010	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00013	66 ff 40 6e	 inc	 WORD PTR [eax+110]
  00017	66 39 48 6e	 cmp	 WORD PTR [eax+110], cx
  0001b	0f 87 24 01 00
	00		 ja	 $LN29@statement
; Line 1538
  00021	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00024	83 c0 c5	 add	 eax, -59		; ffffffc5H
  00027	3d e5 00 00 00	 cmp	 eax, 229		; 000000e5H
  0002c	0f 87 f1 00 00
	00		 ja	 $LN1@statement
  00032	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN26@statement[eax]
  00039	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN31@statement[eax*4]
$LN14@statement:
; Line 1540
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 _luaX_next
; Line 1541
  00046	e9 de 00 00 00	 jmp	 $LN28@statement
$LN13@statement:
; Line 1544
  0004b	57		 push	 edi
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 _ifstat
  00052	83 c4 08	 add	 esp, 8
; Line 1545
  00055	e9 d2 00 00 00	 jmp	 $LN15@statement
$LN12@statement:
; Line 1548
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 _whilestat
  00061	83 c4 08	 add	 esp, 8
; Line 1549
  00064	e9 c3 00 00 00	 jmp	 $LN15@statement
$LN11@statement:
; Line 1552
  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 _luaX_next
; Line 1553
  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 _block
; Line 1554
  00075	57		 push	 edi
  00076	68 03 01 00 00	 push	 259			; 00000103H
  0007b	68 06 01 00 00	 push	 262			; 00000106H
  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 _check_match
  00086	83 c4 18	 add	 esp, 24			; 00000018H
; Line 1555
  00089	e9 9e 00 00 00	 jmp	 $LN15@statement
$LN10@statement:
; Line 1558
  0008e	57		 push	 edi
  0008f	56		 push	 esi
  00090	e8 00 00 00 00	 call	 _forstat
  00095	83 c4 08	 add	 esp, 8
; Line 1559
  00098	e9 8f 00 00 00	 jmp	 $LN15@statement
$LN9@statement:
; Line 1562
  0009d	57		 push	 edi
  0009e	56		 push	 esi
  0009f	e8 00 00 00 00	 call	 _repeatstat
  000a4	83 c4 08	 add	 esp, 8
; Line 1563
  000a7	e9 80 00 00 00	 jmp	 $LN15@statement
$LN8@statement:
; Line 1566
  000ac	57		 push	 edi
  000ad	56		 push	 esi
  000ae	e8 00 00 00 00	 call	 _funcstat
  000b3	83 c4 08	 add	 esp, 8
; Line 1567
  000b6	eb 74		 jmp	 SHORT $LN15@statement
$LN7@statement:
; Line 1570
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 _luaX_next
; Line 1571
  000be	68 09 01 00 00	 push	 265			; 00000109H
  000c3	56		 push	 esi
  000c4	e8 00 00 00 00	 call	 _testnext
  000c9	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1572
  000cc	56		 push	 esi
  000cd	85 c0		 test	 eax, eax
  000cf	74 07		 je	 SHORT $LN6@statement
  000d1	e8 00 00 00 00	 call	 _localfunc
; Line 1573
  000d6	eb 51		 jmp	 SHORT $LN28@statement
$LN6@statement:
; Line 1574
  000d8	e8 00 00 00 00	 call	 _localstat
; Line 1575
  000dd	eb 4a		 jmp	 SHORT $LN28@statement
$LN4@statement:
; Line 1578
  000df	56		 push	 esi
  000e0	e8 00 00 00 00	 call	 _luaX_next
  000e5	83 c4 04	 add	 esp, 4
; Line 1579
  000e8	57		 push	 edi
  000e9	56		 push	 esi
  000ea	e8 00 00 00 00	 call	 _str_checkname
  000ef	83 c4 04	 add	 esp, 4
  000f2	50		 push	 eax
  000f3	56		 push	 esi
  000f4	e8 00 00 00 00	 call	 _labelstat
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1580
  000fc	eb 2e		 jmp	 SHORT $LN15@statement
$LN3@statement:
; Line 1583
  000fe	56		 push	 esi
  000ff	e8 00 00 00 00	 call	 _luaX_next
; Line 1584
  00104	56		 push	 esi
  00105	e8 00 00 00 00	 call	 _retstat
  0010a	83 c4 08	 add	 esp, 8
; Line 1585
  0010d	eb 1d		 jmp	 SHORT $LN15@statement
$LN2@statement:
; Line 1589
  0010f	ff 76 30	 push	 DWORD PTR [esi+48]
  00112	e8 00 00 00 00	 call	 _luaK_jump
  00117	50		 push	 eax
  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 _gotostat
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1590
  00121	eb 09		 jmp	 SHORT $LN15@statement
$LN1@statement:
; Line 1593
  00123	56		 push	 esi
  00124	e8 00 00 00 00	 call	 _exprstat
$LN28@statement:
  00129	83 c4 04	 add	 esp, 4
$LN15@statement:
; Line 1599
  0012c	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0012f	5f		 pop	 edi
  00130	8a 41 2a	 mov	 al, BYTE PTR [ecx+42]
  00133	88 41 2c	 mov	 BYTE PTR [ecx+44], al
; Line 1600
  00136	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0013b	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0013e	5e		 pop	 esi
  0013f	66 01 48 6e	 add	 WORD PTR [eax+110], cx
; Line 1601
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
$LN29@statement:
; Line 1537
  00145	68 00 00 00 00	 push	 OFFSET ??_C@_08CMAFAEJC@C?5levels?$AA@
  0014a	68 c8 00 00 00	 push	 200			; 000000c8H
  0014f	ff 76 30	 push	 DWORD PTR [esi+48]
  00152	e8 00 00 00 00	 call	 _errorlimit
$LN32@statement:
$LN27@statement:
  00157	90		 npad	 1
$LN31@statement:
; Line 1601
  00158	00 00 00 00	 DD	 $LN14@statement
  0015c	00 00 00 00	 DD	 $LN2@statement
  00160	00 00 00 00	 DD	 $LN11@statement
  00164	00 00 00 00	 DD	 $LN10@statement
  00168	00 00 00 00	 DD	 $LN8@statement
  0016c	00 00 00 00	 DD	 $LN13@statement
  00170	00 00 00 00	 DD	 $LN7@statement
  00174	00 00 00 00	 DD	 $LN9@statement
  00178	00 00 00 00	 DD	 $LN3@statement
  0017c	00 00 00 00	 DD	 $LN12@statement
  00180	00 00 00 00	 DD	 $LN4@statement
  00184	00 00 00 00	 DD	 $LN1@statement
$LN26@statement:
  00188	00		 DB	 0
  00189	0b		 DB	 11			; 0000000bH
  0018a	0b		 DB	 11			; 0000000bH
  0018b	0b		 DB	 11			; 0000000bH
  0018c	0b		 DB	 11			; 0000000bH
  0018d	0b		 DB	 11			; 0000000bH
  0018e	0b		 DB	 11			; 0000000bH
  0018f	0b		 DB	 11			; 0000000bH
  00190	0b		 DB	 11			; 0000000bH
  00191	0b		 DB	 11			; 0000000bH
  00192	0b		 DB	 11			; 0000000bH
  00193	0b		 DB	 11			; 0000000bH
  00194	0b		 DB	 11			; 0000000bH
  00195	0b		 DB	 11			; 0000000bH
  00196	0b		 DB	 11			; 0000000bH
  00197	0b		 DB	 11			; 0000000bH
  00198	0b		 DB	 11			; 0000000bH
  00199	0b		 DB	 11			; 0000000bH
  0019a	0b		 DB	 11			; 0000000bH
  0019b	0b		 DB	 11			; 0000000bH
  0019c	0b		 DB	 11			; 0000000bH
  0019d	0b		 DB	 11			; 0000000bH
  0019e	0b		 DB	 11			; 0000000bH
  0019f	0b		 DB	 11			; 0000000bH
  001a0	0b		 DB	 11			; 0000000bH
  001a1	0b		 DB	 11			; 0000000bH
  001a2	0b		 DB	 11			; 0000000bH
  001a3	0b		 DB	 11			; 0000000bH
  001a4	0b		 DB	 11			; 0000000bH
  001a5	0b		 DB	 11			; 0000000bH
  001a6	0b		 DB	 11			; 0000000bH
  001a7	0b		 DB	 11			; 0000000bH
  001a8	0b		 DB	 11			; 0000000bH
  001a9	0b		 DB	 11			; 0000000bH
  001aa	0b		 DB	 11			; 0000000bH
  001ab	0b		 DB	 11			; 0000000bH
  001ac	0b		 DB	 11			; 0000000bH
  001ad	0b		 DB	 11			; 0000000bH
  001ae	0b		 DB	 11			; 0000000bH
  001af	0b		 DB	 11			; 0000000bH
  001b0	0b		 DB	 11			; 0000000bH
  001b1	0b		 DB	 11			; 0000000bH
  001b2	0b		 DB	 11			; 0000000bH
  001b3	0b		 DB	 11			; 0000000bH
  001b4	0b		 DB	 11			; 0000000bH
  001b5	0b		 DB	 11			; 0000000bH
  001b6	0b		 DB	 11			; 0000000bH
  001b7	0b		 DB	 11			; 0000000bH
  001b8	0b		 DB	 11			; 0000000bH
  001b9	0b		 DB	 11			; 0000000bH
  001ba	0b		 DB	 11			; 0000000bH
  001bb	0b		 DB	 11			; 0000000bH
  001bc	0b		 DB	 11			; 0000000bH
  001bd	0b		 DB	 11			; 0000000bH
  001be	0b		 DB	 11			; 0000000bH
  001bf	0b		 DB	 11			; 0000000bH
  001c0	0b		 DB	 11			; 0000000bH
  001c1	0b		 DB	 11			; 0000000bH
  001c2	0b		 DB	 11			; 0000000bH
  001c3	0b		 DB	 11			; 0000000bH
  001c4	0b		 DB	 11			; 0000000bH
  001c5	0b		 DB	 11			; 0000000bH
  001c6	0b		 DB	 11			; 0000000bH
  001c7	0b		 DB	 11			; 0000000bH
  001c8	0b		 DB	 11			; 0000000bH
  001c9	0b		 DB	 11			; 0000000bH
  001ca	0b		 DB	 11			; 0000000bH
  001cb	0b		 DB	 11			; 0000000bH
  001cc	0b		 DB	 11			; 0000000bH
  001cd	0b		 DB	 11			; 0000000bH
  001ce	0b		 DB	 11			; 0000000bH
  001cf	0b		 DB	 11			; 0000000bH
  001d0	0b		 DB	 11			; 0000000bH
  001d1	0b		 DB	 11			; 0000000bH
  001d2	0b		 DB	 11			; 0000000bH
  001d3	0b		 DB	 11			; 0000000bH
  001d4	0b		 DB	 11			; 0000000bH
  001d5	0b		 DB	 11			; 0000000bH
  001d6	0b		 DB	 11			; 0000000bH
  001d7	0b		 DB	 11			; 0000000bH
  001d8	0b		 DB	 11			; 0000000bH
  001d9	0b		 DB	 11			; 0000000bH
  001da	0b		 DB	 11			; 0000000bH
  001db	0b		 DB	 11			; 0000000bH
  001dc	0b		 DB	 11			; 0000000bH
  001dd	0b		 DB	 11			; 0000000bH
  001de	0b		 DB	 11			; 0000000bH
  001df	0b		 DB	 11			; 0000000bH
  001e0	0b		 DB	 11			; 0000000bH
  001e1	0b		 DB	 11			; 0000000bH
  001e2	0b		 DB	 11			; 0000000bH
  001e3	0b		 DB	 11			; 0000000bH
  001e4	0b		 DB	 11			; 0000000bH
  001e5	0b		 DB	 11			; 0000000bH
  001e6	0b		 DB	 11			; 0000000bH
  001e7	0b		 DB	 11			; 0000000bH
  001e8	0b		 DB	 11			; 0000000bH
  001e9	0b		 DB	 11			; 0000000bH
  001ea	0b		 DB	 11			; 0000000bH
  001eb	0b		 DB	 11			; 0000000bH
  001ec	0b		 DB	 11			; 0000000bH
  001ed	0b		 DB	 11			; 0000000bH
  001ee	0b		 DB	 11			; 0000000bH
  001ef	0b		 DB	 11			; 0000000bH
  001f0	0b		 DB	 11			; 0000000bH
  001f1	0b		 DB	 11			; 0000000bH
  001f2	0b		 DB	 11			; 0000000bH
  001f3	0b		 DB	 11			; 0000000bH
  001f4	0b		 DB	 11			; 0000000bH
  001f5	0b		 DB	 11			; 0000000bH
  001f6	0b		 DB	 11			; 0000000bH
  001f7	0b		 DB	 11			; 0000000bH
  001f8	0b		 DB	 11			; 0000000bH
  001f9	0b		 DB	 11			; 0000000bH
  001fa	0b		 DB	 11			; 0000000bH
  001fb	0b		 DB	 11			; 0000000bH
  001fc	0b		 DB	 11			; 0000000bH
  001fd	0b		 DB	 11			; 0000000bH
  001fe	0b		 DB	 11			; 0000000bH
  001ff	0b		 DB	 11			; 0000000bH
  00200	0b		 DB	 11			; 0000000bH
  00201	0b		 DB	 11			; 0000000bH
  00202	0b		 DB	 11			; 0000000bH
  00203	0b		 DB	 11			; 0000000bH
  00204	0b		 DB	 11			; 0000000bH
  00205	0b		 DB	 11			; 0000000bH
  00206	0b		 DB	 11			; 0000000bH
  00207	0b		 DB	 11			; 0000000bH
  00208	0b		 DB	 11			; 0000000bH
  00209	0b		 DB	 11			; 0000000bH
  0020a	0b		 DB	 11			; 0000000bH
  0020b	0b		 DB	 11			; 0000000bH
  0020c	0b		 DB	 11			; 0000000bH
  0020d	0b		 DB	 11			; 0000000bH
  0020e	0b		 DB	 11			; 0000000bH
  0020f	0b		 DB	 11			; 0000000bH
  00210	0b		 DB	 11			; 0000000bH
  00211	0b		 DB	 11			; 0000000bH
  00212	0b		 DB	 11			; 0000000bH
  00213	0b		 DB	 11			; 0000000bH
  00214	0b		 DB	 11			; 0000000bH
  00215	0b		 DB	 11			; 0000000bH
  00216	0b		 DB	 11			; 0000000bH
  00217	0b		 DB	 11			; 0000000bH
  00218	0b		 DB	 11			; 0000000bH
  00219	0b		 DB	 11			; 0000000bH
  0021a	0b		 DB	 11			; 0000000bH
  0021b	0b		 DB	 11			; 0000000bH
  0021c	0b		 DB	 11			; 0000000bH
  0021d	0b		 DB	 11			; 0000000bH
  0021e	0b		 DB	 11			; 0000000bH
  0021f	0b		 DB	 11			; 0000000bH
  00220	0b		 DB	 11			; 0000000bH
  00221	0b		 DB	 11			; 0000000bH
  00222	0b		 DB	 11			; 0000000bH
  00223	0b		 DB	 11			; 0000000bH
  00224	0b		 DB	 11			; 0000000bH
  00225	0b		 DB	 11			; 0000000bH
  00226	0b		 DB	 11			; 0000000bH
  00227	0b		 DB	 11			; 0000000bH
  00228	0b		 DB	 11			; 0000000bH
  00229	0b		 DB	 11			; 0000000bH
  0022a	0b		 DB	 11			; 0000000bH
  0022b	0b		 DB	 11			; 0000000bH
  0022c	0b		 DB	 11			; 0000000bH
  0022d	0b		 DB	 11			; 0000000bH
  0022e	0b		 DB	 11			; 0000000bH
  0022f	0b		 DB	 11			; 0000000bH
  00230	0b		 DB	 11			; 0000000bH
  00231	0b		 DB	 11			; 0000000bH
  00232	0b		 DB	 11			; 0000000bH
  00233	0b		 DB	 11			; 0000000bH
  00234	0b		 DB	 11			; 0000000bH
  00235	0b		 DB	 11			; 0000000bH
  00236	0b		 DB	 11			; 0000000bH
  00237	0b		 DB	 11			; 0000000bH
  00238	0b		 DB	 11			; 0000000bH
  00239	0b		 DB	 11			; 0000000bH
  0023a	0b		 DB	 11			; 0000000bH
  0023b	0b		 DB	 11			; 0000000bH
  0023c	0b		 DB	 11			; 0000000bH
  0023d	0b		 DB	 11			; 0000000bH
  0023e	0b		 DB	 11			; 0000000bH
  0023f	0b		 DB	 11			; 0000000bH
  00240	0b		 DB	 11			; 0000000bH
  00241	0b		 DB	 11			; 0000000bH
  00242	0b		 DB	 11			; 0000000bH
  00243	0b		 DB	 11			; 0000000bH
  00244	0b		 DB	 11			; 0000000bH
  00245	0b		 DB	 11			; 0000000bH
  00246	0b		 DB	 11			; 0000000bH
  00247	0b		 DB	 11			; 0000000bH
  00248	0b		 DB	 11			; 0000000bH
  00249	0b		 DB	 11			; 0000000bH
  0024a	0b		 DB	 11			; 0000000bH
  0024b	0b		 DB	 11			; 0000000bH
  0024c	0b		 DB	 11			; 0000000bH
  0024d	0b		 DB	 11			; 0000000bH
  0024e	0b		 DB	 11			; 0000000bH
  0024f	01		 DB	 1
  00250	02		 DB	 2
  00251	0b		 DB	 11			; 0000000bH
  00252	0b		 DB	 11			; 0000000bH
  00253	0b		 DB	 11			; 0000000bH
  00254	0b		 DB	 11			; 0000000bH
  00255	03		 DB	 3
  00256	04		 DB	 4
  00257	01		 DB	 1
  00258	05		 DB	 5
  00259	0b		 DB	 11			; 0000000bH
  0025a	06		 DB	 6
  0025b	0b		 DB	 11			; 0000000bH
  0025c	0b		 DB	 11			; 0000000bH
  0025d	0b		 DB	 11			; 0000000bH
  0025e	07		 DB	 7
  0025f	08		 DB	 8
  00260	0b		 DB	 11			; 0000000bH
  00261	0b		 DB	 11			; 0000000bH
  00262	0b		 DB	 11			; 0000000bH
  00263	09		 DB	 9
  00264	0b		 DB	 11			; 0000000bH
  00265	0b		 DB	 11			; 0000000bH
  00266	0b		 DB	 11			; 0000000bH
  00267	0b		 DB	 11			; 0000000bH
  00268	0b		 DB	 11			; 0000000bH
  00269	0b		 DB	 11			; 0000000bH
  0026a	0b		 DB	 11			; 0000000bH
  0026b	0b		 DB	 11			; 0000000bH
  0026c	0b		 DB	 11			; 0000000bH
  0026d	0a		 DB	 10			; 0000000aH
_statement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaY_parser
_TEXT	SEGMENT
_lexstate$ = -136					; size = 88
_funcstate$ = -48					; size = 48
_L$ = 8							; size = 4
_z$ = 12						; size = 4
_buff$ = 16						; size = 4
_dyd$ = 20						; size = 4
_name$ = 24						; size = 4
_firstchar$ = 28					; size = 4
_luaY_parser PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1625
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	56		 push	 esi
  0000a	57		 push	 edi
; Line 1628
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  0000e	6a 01		 push	 1
  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 _luaF_newLclosure
; Line 1629
  00016	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00019	8b f0		 mov	 esi, eax
; Line 1630
  0001b	57		 push	 edi
  0001c	89 31		 mov	 DWORD PTR [ecx], esi
  0001e	c7 41 08 46 00
	00 00		 mov	 DWORD PTR [ecx+8], 70	; 00000046H
  00025	e8 00 00 00 00	 call	 _luaD_inctop
; Line 1631
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 _luaH_new
; Line 1632
  00030	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00033	89 45 b8	 mov	 DWORD PTR _lexstate$[ebp+64], eax
; Line 1633
  00036	57		 push	 edi
  00037	89 01		 mov	 DWORD PTR [ecx], eax
  00039	c7 41 08 45 00
	00 00		 mov	 DWORD PTR [ecx+8], 69	; 00000045H
  00040	e8 00 00 00 00	 call	 _luaD_inctop
; Line 1634
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 _luaF_newproto
; Line 1635
  0004b	ff 75 18	 push	 DWORD PTR _name$[ebp]
  0004e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00051	57		 push	 edi
  00052	89 45 d0	 mov	 DWORD PTR _funcstate$[ebp], eax
  00055	e8 00 00 00 00	 call	 _luaS_new
  0005a	8b 4d d0	 mov	 ecx, DWORD PTR _funcstate$[ebp]
; Line 1640
  0005d	ff 75 1c	 push	 DWORD PTR _firstchar$[ebp]
  00060	89 41 48	 mov	 DWORD PTR [ecx+72], eax
  00063	8b 45 10	 mov	 eax, DWORD PTR _buff$[ebp]
  00066	89 45 b4	 mov	 DWORD PTR _lexstate$[ebp+60], eax
  00069	8b 45 14	 mov	 eax, DWORD PTR _dyd$[ebp]
  0006c	89 45 bc	 mov	 DWORD PTR _lexstate$[ebp+68], eax
  0006f	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00076	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0007d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00084	8b 45 d0	 mov	 eax, DWORD PTR _funcstate$[ebp]
  00087	ff 70 48	 push	 DWORD PTR [eax+72]
  0008a	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _lexstate$[ebp]
  00090	ff 75 0c	 push	 DWORD PTR _z$[ebp]
  00093	50		 push	 eax
  00094	57		 push	 edi
  00095	e8 00 00 00 00	 call	 _luaX_setinput
; Line 1641
  0009a	8d 45 d0	 lea	 eax, DWORD PTR _funcstate$[ebp]
  0009d	50		 push	 eax
  0009e	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _lexstate$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _mainfunc
  000aa	83 c4 3c	 add	 esp, 60			; 0000003cH
; Line 1646
  000ad	8b c6		 mov	 eax, esi
  000af	83 47 0c f0	 add	 DWORD PTR [edi+12], -16	; fffffff0H
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
; Line 1647
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
_luaY_parser ENDP
_TEXT	ENDS
END
