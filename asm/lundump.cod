; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_luaU_undump
PUBLIC	??_C@_0BJ@DBDKBCFJ@?$CFs?3?5?$CFs?5precompiled?5chunk?$AA@ ; `string'
PUBLIC	??_C@_09IDFJECNO@truncated?$AA@			; `string'
PUBLIC	??_C@_0BE@FMPNPBIC@?$CFs?5size?5mismatch?5in?$AA@ ; `string'
PUBLIC	??_C@_05MHFHPLCH@not?5a?$AA@			; `string'
PUBLIC	??_C@_04NBPDLJKJ@?$BLLua?$AA@			; `string'
PUBLIC	??_C@_0BE@BNDNKLA@version?5mismatch?5in?$AA@	; `string'
PUBLIC	??_C@_0BD@OLNACCKD@format?5mismatch?5in?$AA@	; `string'
PUBLIC	??_C@_09DJBANNHO@corrupted?$AA@			; `string'
PUBLIC	??_C@_06HHFEHHII@?$BJ?$JD?$AN?6?$BK?6?$AA@	; `string'
PUBLIC	??_C@_03JBIPMCLC@int?$AA@			; `string'
PUBLIC	??_C@_06DMBJOIF@size_t?$AA@			; `string'
PUBLIC	??_C@_0M@LHLPIFKK@Instruction?$AA@		; `string'
PUBLIC	??_C@_0M@GMBHIDNA@lua_Integer?$AA@		; `string'
PUBLIC	??_C@_0L@PFILHMCA@lua_Number?$AA@		; `string'
PUBLIC	??_C@_0BH@CNGMPKEP@endianness?5mismatch?5in?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NPNAMPHP@float?5format?5mismatch?5in?$AA@ ; `string'
PUBLIC	??_C@_0O@CNJIDMJE@binary?5string?$AA@		; `string'
PUBLIC	__real@4077280000000000
EXTRN	_luaO_pushfstring:PROC
EXTRN	_luaM_toobig:PROC
EXTRN	_luaM_realloc_:PROC
EXTRN	_luaZ_read:PROC
EXTRN	_luaD_inctop:PROC
EXTRN	_luaD_throw:PROC
EXTRN	_luaF_newproto:PROC
EXTRN	_luaF_newLclosure:PROC
EXTRN	_luaS_newlstr:PROC
EXTRN	_luaS_createlngstrobj:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@4077280000000000
CONST	SEGMENT
__real@4077280000000000 DQ 04077280000000000r	; 370.5
CONST	ENDS
;	COMDAT ??_C@_0O@CNJIDMJE@binary?5string?$AA@
CONST	SEGMENT
??_C@_0O@CNJIDMJE@binary?5string?$AA@ DB 'binary string', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NPNAMPHP@float?5format?5mismatch?5in?$AA@
CONST	SEGMENT
??_C@_0BJ@NPNAMPHP@float?5format?5mismatch?5in?$AA@ DB 'float format mism'
	DB	'atch in', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CNGMPKEP@endianness?5mismatch?5in?$AA@
CONST	SEGMENT
??_C@_0BH@CNGMPKEP@endianness?5mismatch?5in?$AA@ DB 'endianness mismatch '
	DB	'in', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PFILHMCA@lua_Number?$AA@
CONST	SEGMENT
??_C@_0L@PFILHMCA@lua_Number?$AA@ DB 'lua_Number', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GMBHIDNA@lua_Integer?$AA@
CONST	SEGMENT
??_C@_0M@GMBHIDNA@lua_Integer?$AA@ DB 'lua_Integer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LHLPIFKK@Instruction?$AA@
CONST	SEGMENT
??_C@_0M@LHLPIFKK@Instruction?$AA@ DB 'Instruction', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DMBJOIF@size_t?$AA@
CONST	SEGMENT
??_C@_06DMBJOIF@size_t?$AA@ DB 'size_t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBIPMCLC@int?$AA@
CONST	SEGMENT
??_C@_03JBIPMCLC@int?$AA@ DB 'int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHFEHHII@?$BJ?$JD?$AN?6?$BK?6?$AA@
CONST	SEGMENT
??_C@_06HHFEHHII@?$BJ?$JD?$AN?6?$BK?6?$AA@ DB 019H, 093H, 0dH, 0aH, 01aH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09DJBANNHO@corrupted?$AA@
CONST	SEGMENT
??_C@_09DJBANNHO@corrupted?$AA@ DB 'corrupted', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLNACCKD@format?5mismatch?5in?$AA@
CONST	SEGMENT
??_C@_0BD@OLNACCKD@format?5mismatch?5in?$AA@ DB 'format mismatch in', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BNDNKLA@version?5mismatch?5in?$AA@
CONST	SEGMENT
??_C@_0BE@BNDNKLA@version?5mismatch?5in?$AA@ DB 'version mismatch in', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NBPDLJKJ@?$BLLua?$AA@
CONST	SEGMENT
??_C@_04NBPDLJKJ@?$BLLua?$AA@ DB 01bH, 'Lua', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHFHPLCH@not?5a?$AA@
CONST	SEGMENT
??_C@_05MHFHPLCH@not?5a?$AA@ DB 'not a', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FMPNPBIC@?$CFs?5size?5mismatch?5in?$AA@
CONST	SEGMENT
??_C@_0BE@FMPNPBIC@?$CFs?5size?5mismatch?5in?$AA@ DB '%s size mismatch in'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09IDFJECNO@truncated?$AA@
CONST	SEGMENT
??_C@_09IDFJECNO@truncated?$AA@ DB 'truncated', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DBDKBCFJ@?$CFs?3?5?$CFs?5precompiled?5chunk?$AA@
CONST	SEGMENT
??_C@_0BJ@DBDKBCFJ@?$CFs?3?5?$CFs?5precompiled?5chunk?$AA@ DB '%s: %s pre'
	DB	'compiled chunk', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _checkHeader
_TEXT	SEGMENT
_x$1 = -8						; size = 8
_x$2 = -8						; size = 8
_S$ = 8							; size = 4
_x$3 = 11						; size = 1
_x$4 = 11						; size = 1
_checkHeader PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 236
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
; Line 237
  00007	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_05MHFHPLCH@not?5a?$AA@
  0000f	68 01 00 00 00	 push	 OFFSET ??_C@_04NBPDLJKJ@?$BLLua?$AA@+1
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _checkliteral
; Line 238
  0001a	6a 01		 push	 1
  0001c	8d 45 0b	 lea	 eax, DWORD PTR _x$4[ebp]
  0001f	50		 push	 eax
  00020	ff 76 04	 push	 DWORD PTR [esi+4]
  00023	e8 00 00 00 00	 call	 _luaZ_read
  00028	83 c4 18	 add	 esp, 24			; 00000018H
  0002b	85 c0		 test	 eax, eax
  0002d	0f 85 d6 00 00
	00		 jne	 $LN34@checkHeade
  00033	80 7d 0b 11	 cmp	 BYTE PTR _x$4[ebp], 17	; 00000011H
  00037	0f 85 d7 00 00
	00		 jne	 $LN36@checkHeade
; Line 240
  0003d	6a 01		 push	 1
  0003f	8d 45 0b	 lea	 eax, DWORD PTR _x$3[ebp]
  00042	50		 push	 eax
  00043	ff 76 04	 push	 DWORD PTR [esi+4]
  00046	e8 00 00 00 00	 call	 _luaZ_read
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	85 c0		 test	 eax, eax
  00050	0f 85 c9 00 00
	00		 jne	 $LN37@checkHeade
  00056	38 45 0b	 cmp	 BYTE PTR _x$3[ebp], al
  00059	0f 85 cb 00 00
	00		 jne	 $LN38@checkHeade
; Line 242
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_09DJBANNHO@corrupted?$AA@
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_06HHFEHHII@?$BJ?$JD?$AN?6?$BK?6?$AA@
  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 _checkliteral
; Line 243
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_03JBIPMCLC@int?$AA@
  00074	6a 04		 push	 4
  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 _fchecksize
; Line 244
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_06DMBJOIF@size_t?$AA@
  00081	6a 04		 push	 4
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 _fchecksize
; Line 245
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LHLPIFKK@Instruction?$AA@
  0008e	6a 04		 push	 4
  00090	56		 push	 esi
  00091	e8 00 00 00 00	 call	 _fchecksize
; Line 246
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GMBHIDNA@lua_Integer?$AA@
  0009b	6a 08		 push	 8
  0009d	56		 push	 esi
  0009e	e8 00 00 00 00	 call	 _fchecksize
; Line 247
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PFILHMCA@lua_Number?$AA@
  000a8	6a 08		 push	 8
  000aa	56		 push	 esi
  000ab	e8 00 00 00 00	 call	 _fchecksize
  000b0	83 c4 48	 add	 esp, 72			; 00000048H
; Line 248
  000b3	8d 45 f8	 lea	 eax, DWORD PTR _x$2[ebp]
  000b6	6a 08		 push	 8
  000b8	50		 push	 eax
  000b9	ff 76 04	 push	 DWORD PTR [esi+4]
  000bc	e8 00 00 00 00	 call	 _luaZ_read
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c4	85 c0		 test	 eax, eax
  000c6	75 6d		 jne	 SHORT $LN39@checkHeade
  000c8	81 7d f8 78 56
	00 00		 cmp	 DWORD PTR _x$2[ebp], 22136 ; 00005678H
  000cf	0f 85 81 00 00
	00		 jne	 $LN32@checkHeade
  000d5	39 45 fc	 cmp	 DWORD PTR _x$2[ebp+4], eax
  000d8	75 7c		 jne	 SHORT $LN32@checkHeade
; Line 250
  000da	6a 08		 push	 8
  000dc	8d 45 f8	 lea	 eax, DWORD PTR _x$1[ebp]
  000df	50		 push	 eax
  000e0	ff 76 04	 push	 DWORD PTR [esi+4]
  000e3	e8 00 00 00 00	 call	 _luaZ_read
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000eb	85 c0		 test	 eax, eax
  000ed	75 51		 jne	 SHORT $LN40@checkHeade
  000ef	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _x$1[ebp]
  000f4	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@4077280000000000
  000fc	9f		 lahf
  000fd	f6 c4 44	 test	 ah, 68			; 00000044H
  00100	7b 02		 jnp	 SHORT $LN1@checkHeade
  00102	eb 47		 jmp	 SHORT $LN41@checkHeade
$LN1@checkHeade:
  00104	5e		 pop	 esi
; Line 252
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
$LN34@checkHeade:
; Line 238
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  0010e	56		 push	 esi
  0010f	e8 00 00 00 00	 call	 _error
$LN42@checkHeade:
$LN36@checkHeade:
; Line 239
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BNDNKLA@version?5mismatch?5in?$AA@
  00119	56		 push	 esi
  0011a	e8 00 00 00 00	 call	 _error
$LN43@checkHeade:
$LN37@checkHeade:
; Line 240
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00124	56		 push	 esi
  00125	e8 00 00 00 00	 call	 _error
$LN44@checkHeade:
$LN38@checkHeade:
; Line 241
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLNACCKD@format?5mismatch?5in?$AA@
  0012f	56		 push	 esi
  00130	e8 00 00 00 00	 call	 _error
$LN45@checkHeade:
$LN39@checkHeade:
; Line 248
  00135	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  0013a	56		 push	 esi
  0013b	e8 00 00 00 00	 call	 _error
$LN46@checkHeade:
$LN40@checkHeade:
; Line 250
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00145	56		 push	 esi
  00146	e8 00 00 00 00	 call	 _error
$LN47@checkHeade:
$LN41@checkHeade:
; Line 251
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NPNAMPHP@float?5format?5mismatch?5in?$AA@
  00150	56		 push	 esi
  00151	e8 00 00 00 00	 call	 _error
$LN48@checkHeade:
$LN32@checkHeade:
; Line 249
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CNGMPKEP@endianness?5mismatch?5in?$AA@
  0015b	56		 push	 esi
  0015c	e8 00 00 00 00	 call	 _error
$LN49@checkHeade:
$LN33@checkHeade:
  00161	cc		 int	 3
_checkHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _fchecksize
_TEXT	SEGMENT
_x$1 = -1						; size = 1
_S$ = 8							; size = 4
_size$ = 12						; size = 4
_tname$ = 16						; size = 4
_fchecksize PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 228
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
; Line 229
  00005	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
  00008	8d 45 ff	 lea	 eax, DWORD PTR _x$1[ebp]
  0000b	6a 01		 push	 1
  0000d	50		 push	 eax
  0000e	ff 76 04	 push	 DWORD PTR [esi+4]
  00011	e8 00 00 00 00	 call	 _luaZ_read
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	85 c0		 test	 eax, eax
  0001b	75 0e		 jne	 SHORT $LN12@fchecksize
  0001d	0f b6 45 ff	 movzx	 eax, BYTE PTR _x$1[ebp]
  00021	3b 45 0c	 cmp	 eax, DWORD PTR _size$[ebp]
  00024	75 10		 jne	 SHORT $LN14@fchecksize
  00026	5e		 pop	 esi
; Line 231
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN12@fchecksize:
; Line 229
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _error
$LN15@fchecksize:
$LN14@fchecksize:
; Line 230
  00036	ff 75 10	 push	 DWORD PTR _tname$[ebp]
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FMPNPBIC@?$CFs?5size?5mismatch?5in?$AA@
  0003e	ff 36		 push	 DWORD PTR [esi]
  00040	e8 00 00 00 00	 call	 _luaO_pushfstring
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	50		 push	 eax
  00049	56		 push	 esi
  0004a	e8 00 00 00 00	 call	 _error
$LN16@fchecksize:
$LN11@fchecksize:
  0004f	cc		 int	 3
_fchecksize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _checkliteral
_TEXT	SEGMENT
_msg$GSCopy$1$ = -20					; size = 4
_buff$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_S$ = 8							; size = 4
_s$ = 12						; size = 4
_msg$ = 16						; size = 4
_checkliteral PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 219
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _msg$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _S$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 0c	 mov	 edi, DWORD PTR _s$[ebp]
; Line 221
  0001c	8b f7		 mov	 esi, edi
  0001e	89 45 ec	 mov	 DWORD PTR _msg$GSCopy$1$[ebp], eax
  00021	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL8@checkliter:
  00024	8a 06		 mov	 al, BYTE PTR [esi]
  00026	46		 inc	 esi
  00027	84 c0		 test	 al, al
  00029	75 f9		 jne	 SHORT $LL8@checkliter
  0002b	2b f1		 sub	 esi, ecx
; Line 222
  0002d	8d 45 f0	 lea	 eax, DWORD PTR _buff$[ebp]
  00030	56		 push	 esi
  00031	50		 push	 eax
  00032	ff 73 04	 push	 DWORD PTR [ebx+4]
  00035	e8 00 00 00 00	 call	 _luaZ_read
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	85 c0		 test	 eax, eax
  0003f	75 63		 jne	 SHORT $LN15@checkliter
; Line 223
  00041	8d 4d f0	 lea	 ecx, DWORD PTR _buff$[ebp]
  00044	83 ee 04	 sub	 esi, 4
  00047	72 18		 jb	 SHORT $LN11@checkliter
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL12@checkliter:
  00050	8b 07		 mov	 eax, DWORD PTR [edi]
  00052	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00054	75 10		 jne	 SHORT $LN10@checkliter
  00056	83 c7 04	 add	 edi, 4
  00059	83 c1 04	 add	 ecx, 4
  0005c	83 ee 04	 sub	 esi, 4
  0005f	73 ef		 jae	 SHORT $LL12@checkliter
$LN11@checkliter:
  00061	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00064	74 2d		 je	 SHORT $LN9@checkliter
$LN10@checkliter:
  00066	8a 07		 mov	 al, BYTE PTR [edi]
  00068	3a 01		 cmp	 al, BYTE PTR [ecx]
  0006a	75 43		 jne	 SHORT $LN17@checkliter
  0006c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0006f	74 22		 je	 SHORT $LN9@checkliter
  00071	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00074	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00077	75 36		 jne	 SHORT $LN17@checkliter
  00079	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0007c	74 15		 je	 SHORT $LN9@checkliter
  0007e	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  00081	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00084	75 29		 jne	 SHORT $LN17@checkliter
  00086	83 fe ff	 cmp	 esi, -1
  00089	74 08		 je	 SHORT $LN9@checkliter
  0008b	8a 47 03	 mov	 al, BYTE PTR [edi+3]
  0008e	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00091	75 1c		 jne	 SHORT $LN17@checkliter
$LN9@checkliter:
; Line 225
  00093	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	33 cd		 xor	 ecx, ebp
  0009a	5b		 pop	 ebx
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
$LN15@checkliter:
; Line 222
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  000a9	53		 push	 ebx
  000aa	e8 00 00 00 00	 call	 _error
$LN18@checkliter:
$LN17@checkliter:
; Line 224
  000af	ff 75 ec	 push	 DWORD PTR _msg$GSCopy$1$[ebp]
  000b2	53		 push	 ebx
  000b3	e8 00 00 00 00	 call	 _error
$LN19@checkliter:
$LN14@checkliter:
  000b8	cc		 int	 3
_checkliteral ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadDebug
_TEXT	SEGMENT
_x$1 = -12						; size = 4
_x$2 = -8						; size = 4
_x$3 = -4						; size = 4
_i$1$ = 8						; size = 4
_x$4 = 8						; size = 4
_x$5 = 8						; size = 4
_S$ = 8							; size = 4
_f$ = 12						; size = 4
_LoadDebug PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 180
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; Line 182
  00006	8d 45 08	 lea	 eax, DWORD PTR _x$5[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _S$[ebp]
  0000f	6a 04		 push	 4
  00011	50		 push	 eax
  00012	ff 77 04	 push	 DWORD PTR [edi+4]
  00015	e8 00 00 00 00	 call	 _luaZ_read
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	85 c0		 test	 eax, eax
  0001f	0f 85 4c 01 00
	00		 jne	 $LN65@LoadDebug
; Line 183
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _x$5[ebp]
  00028	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0002b	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00030	0f 87 46 01 00
	00		 ja	 $LN67@LoadDebug
  00036	8d 34 8d 00 00
	00 00		 lea	 esi, DWORD PTR [ecx*4]
  0003d	56		 push	 esi
  0003e	6a 00		 push	 0
  00040	6a 00		 push	 0
  00042	ff 37		 push	 DWORD PTR [edi]
  00044	e8 00 00 00 00	 call	 _luaM_realloc_
  00049	8b 5d 0c	 mov	 ebx, DWORD PTR _f$[ebp]
; Line 184
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _x$5[ebp]
; Line 185
  0004f	56		 push	 esi
  00050	50		 push	 eax
  00051	89 43 38	 mov	 DWORD PTR [ebx+56], eax
  00054	89 4b 18	 mov	 DWORD PTR [ebx+24], ecx
  00057	ff 77 04	 push	 DWORD PTR [edi+4]
  0005a	e8 00 00 00 00	 call	 _luaZ_read
  0005f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00062	85 c0		 test	 eax, eax
  00064	0f 85 19 01 00
	00		 jne	 $LN68@LoadDebug
; Line 186
  0006a	6a 04		 push	 4
  0006c	8d 45 fc	 lea	 eax, DWORD PTR _x$3[ebp]
  0006f	50		 push	 eax
  00070	ff 77 04	 push	 DWORD PTR [edi+4]
  00073	e8 00 00 00 00	 call	 _luaZ_read
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	85 c0		 test	 eax, eax
  0007d	0f 85 0b 01 00
	00		 jne	 $LN69@LoadDebug
; Line 187
  00083	8b 75 fc	 mov	 esi, DWORD PTR _x$3[ebp]
  00086	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00089	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0008e	0f 87 05 01 00
	00		 ja	 $LN70@LoadDebug
  00094	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00097	c1 e0 02	 shl	 eax, 2
  0009a	50		 push	 eax
  0009b	6a 00		 push	 0
  0009d	6a 00		 push	 0
  0009f	ff 37		 push	 DWORD PTR [edi]
  000a1	e8 00 00 00 00	 call	 _luaM_realloc_
  000a6	83 c4 10	 add	 esp, 16			; 00000010H
  000a9	89 43 3c	 mov	 DWORD PTR [ebx+60], eax
; Line 188
  000ac	89 73 20	 mov	 DWORD PTR [ebx+32], esi
; Line 189
  000af	85 f6		 test	 esi, esi
  000b1	7e 1e		 jle	 SHORT $LN7@LoadDebug
; Line 187
  000b3	33 c9		 xor	 ecx, ecx
  000b5	8b d6		 mov	 edx, esi
  000b7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL9@LoadDebug:
; Line 190
  000c0	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]
  000c3	8d 49 0c	 lea	 ecx, DWORD PTR [ecx+12]
  000c6	c7 44 01 f4 00
	00 00 00	 mov	 DWORD PTR [ecx+eax-12], 0
  000ce	4a		 dec	 edx
  000cf	75 ef		 jne	 SHORT $LL9@LoadDebug
$LN7@LoadDebug:
; Line 191
  000d1	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  000d8	85 f6		 test	 esi, esi
  000da	7e 5d		 jle	 SHORT $LN4@LoadDebug
  000dc	33 f6		 xor	 esi, esi
  000de	8b ff		 npad	 2
$LL6@LoadDebug:
; Line 192
  000e0	57		 push	 edi
  000e1	e8 00 00 00 00	 call	 _LoadString
  000e6	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
; Line 193
  000e9	6a 04		 push	 4
  000eb	89 04 0e	 mov	 DWORD PTR [esi+ecx], eax
  000ee	8d 45 f8	 lea	 eax, DWORD PTR _x$2[ebp]
  000f1	50		 push	 eax
  000f2	ff 77 04	 push	 DWORD PTR [edi+4]
  000f5	e8 00 00 00 00	 call	 _luaZ_read
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	85 c0		 test	 eax, eax
  000ff	75 70		 jne	 SHORT $LN65@LoadDebug
  00101	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00104	8b 45 f8	 mov	 eax, DWORD PTR _x$2[ebp]
; Line 194
  00107	6a 04		 push	 4
  00109	89 44 31 04	 mov	 DWORD PTR [ecx+esi+4], eax
  0010d	8d 45 f4	 lea	 eax, DWORD PTR _x$1[ebp]
  00110	50		 push	 eax
  00111	ff 77 04	 push	 DWORD PTR [edi+4]
  00114	e8 00 00 00 00	 call	 _luaZ_read
  00119	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011c	85 c0		 test	 eax, eax
  0011e	75 51		 jne	 SHORT $LN65@LoadDebug
  00120	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00123	8b 45 f4	 mov	 eax, DWORD PTR _x$1[ebp]
  00126	89 44 31 08	 mov	 DWORD PTR [ecx+esi+8], eax
  0012a	83 c6 0c	 add	 esi, 12			; 0000000cH
  0012d	8b 45 08	 mov	 eax, DWORD PTR _i$1$[ebp]
  00130	40		 inc	 eax
  00131	89 45 08	 mov	 DWORD PTR _i$1$[ebp], eax
  00134	3b 45 fc	 cmp	 eax, DWORD PTR _x$3[ebp]
  00137	7c a7		 jl	 SHORT $LL6@LoadDebug
$LN4@LoadDebug:
; Line 196
  00139	6a 04		 push	 4
  0013b	8d 45 08	 lea	 eax, DWORD PTR _x$4[ebp]
  0013e	50		 push	 eax
  0013f	ff 77 04	 push	 DWORD PTR [edi+4]
  00142	e8 00 00 00 00	 call	 _luaZ_read
  00147	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014a	85 c0		 test	 eax, eax
  0014c	75 52		 jne	 SHORT $LN71@LoadDebug
; Line 197
  0014e	33 f6		 xor	 esi, esi
  00150	39 75 08	 cmp	 DWORD PTR _x$4[ebp], esi
  00153	7e 15		 jle	 SHORT $LN1@LoadDebug
$LL3@LoadDebug:
; Line 198
  00155	57		 push	 edi
  00156	e8 00 00 00 00	 call	 _LoadString
  0015b	8b 4b 40	 mov	 ecx, DWORD PTR [ebx+64]
  0015e	83 c4 04	 add	 esp, 4
  00161	89 04 f1	 mov	 DWORD PTR [ecx+esi*8], eax
  00164	46		 inc	 esi
  00165	3b 75 08	 cmp	 esi, DWORD PTR _x$4[ebp]
  00168	7c eb		 jl	 SHORT $LL3@LoadDebug
$LN1@LoadDebug:
  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
; Line 199
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
$LN65@LoadDebug:
; Line 182
  00171	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00176	57		 push	 edi
  00177	e8 00 00 00 00	 call	 _error
$LN72@LoadDebug:
$LN67@LoadDebug:
; Line 183
  0017c	ff 37		 push	 DWORD PTR [edi]
  0017e	e8 00 00 00 00	 call	 _luaM_toobig
$LN73@LoadDebug:
$LN68@LoadDebug:
; Line 185
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00188	57		 push	 edi
  00189	e8 00 00 00 00	 call	 _error
$LN74@LoadDebug:
$LN69@LoadDebug:
; Line 186
  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00193	57		 push	 edi
  00194	e8 00 00 00 00	 call	 _error
$LN75@LoadDebug:
$LN70@LoadDebug:
; Line 187
  00199	ff 37		 push	 DWORD PTR [edi]
  0019b	e8 00 00 00 00	 call	 _luaM_toobig
$LN76@LoadDebug:
$LN71@LoadDebug:
; Line 196
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  001a5	57		 push	 edi
  001a6	e8 00 00 00 00	 call	 _error
$LN77@LoadDebug:
$LN64@LoadDebug:
  001ab	cc		 int	 3
_LoadDebug ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadUpvalues
_TEXT	SEGMENT
_x$1 = -1						; size = 1
_x$2 = 8						; size = 4
_S$ = 8							; size = 4
_x$3 = 11						; size = 1
_f$ = 12						; size = 4
_LoadUpvalues PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 166
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; Line 168
  00006	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
  00009	8d 45 08	 lea	 eax, DWORD PTR _x$2[ebp]
  0000c	57		 push	 edi
  0000d	6a 04		 push	 4
  0000f	50		 push	 eax
  00010	ff 76 04	 push	 DWORD PTR [esi+4]
  00013	e8 00 00 00 00	 call	 _luaZ_read
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	85 c0		 test	 eax, eax
  0001d	0f 85 a2 00 00
	00		 jne	 $LN41@LoadUpvalu
; Line 169
  00023	8b 5d 08	 mov	 ebx, DWORD PTR _x$2[ebp]
  00026	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00029	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0002e	0f 87 9c 00 00
	00		 ja	 $LN43@LoadUpvalu
  00034	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
  0003b	50		 push	 eax
  0003c	6a 00		 push	 0
  0003e	6a 00		 push	 0
  00040	ff 36		 push	 DWORD PTR [esi]
  00042	e8 00 00 00 00	 call	 _luaM_realloc_
  00047	8b 55 0c	 mov	 edx, DWORD PTR _f$[ebp]
  0004a	83 c4 10	 add	 esp, 16			; 00000010H
; Line 171
  0004d	33 c9		 xor	 ecx, ecx
  0004f	89 42 40	 mov	 DWORD PTR [edx+64], eax
  00052	89 5a 0c	 mov	 DWORD PTR [edx+12], ebx
  00055	85 db		 test	 ebx, ebx
  00057	7e 16		 jle	 SHORT $LN4@LoadUpvalu
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL6@LoadUpvalu:
; Line 172
  00060	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00063	c7 04 c8 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*8], 0
  0006a	41		 inc	 ecx
  0006b	3b cb		 cmp	 ecx, ebx
  0006d	7c f1		 jl	 SHORT $LL6@LoadUpvalu
$LN4@LoadUpvalu:
; Line 173
  0006f	33 ff		 xor	 edi, edi
  00071	85 db		 test	 ebx, ebx
  00073	7e 49		 jle	 SHORT $LN1@LoadUpvalu
$LL3@LoadUpvalu:
; Line 174
  00075	6a 01		 push	 1
  00077	8d 45 0b	 lea	 eax, DWORD PTR _x$3[ebp]
  0007a	50		 push	 eax
  0007b	ff 76 04	 push	 DWORD PTR [esi+4]
  0007e	e8 00 00 00 00	 call	 _luaZ_read
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	85 c0		 test	 eax, eax
  00088	75 3b		 jne	 SHORT $LN41@LoadUpvalu
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  0008d	8a 45 0b	 mov	 al, BYTE PTR _x$3[ebp]
; Line 175
  00090	6a 01		 push	 1
  00092	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  00095	88 44 f9 04	 mov	 BYTE PTR [ecx+edi*8+4], al
  00099	8d 45 ff	 lea	 eax, DWORD PTR _x$1[ebp]
  0009c	50		 push	 eax
  0009d	ff 76 04	 push	 DWORD PTR [esi+4]
  000a0	e8 00 00 00 00	 call	 _luaZ_read
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a8	85 c0		 test	 eax, eax
  000aa	75 19		 jne	 SHORT $LN41@LoadUpvalu
  000ac	8b 45 0c	 mov	 eax, DWORD PTR _f$[ebp]
  000af	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  000b2	8a 45 ff	 mov	 al, BYTE PTR _x$1[ebp]
  000b5	88 44 f9 05	 mov	 BYTE PTR [ecx+edi*8+5], al
  000b9	47		 inc	 edi
  000ba	3b fb		 cmp	 edi, ebx
  000bc	7c b7		 jl	 SHORT $LL3@LoadUpvalu
$LN1@LoadUpvalu:
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
; Line 177
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN41@LoadUpvalu:
; Line 168
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  000ca	56		 push	 esi
  000cb	e8 00 00 00 00	 call	 _error
$LN44@LoadUpvalu:
$LN43@LoadUpvalu:
; Line 169
  000d0	ff 36		 push	 DWORD PTR [esi]
  000d2	e8 00 00 00 00	 call	 _luaM_toobig
$LN45@LoadUpvalu:
$LN40@LoadUpvalu:
  000d7	cc		 int	 3
_LoadUpvalues ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadProtos
_TEXT	SEGMENT
_x$1 = -4						; size = 4
_i$2$ = 8						; size = 4
_S$ = 8							; size = 4
_f$ = 12						; size = 4
_LoadProtos PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 152
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; Line 154
  00005	8b 5d 08	 mov	 ebx, DWORD PTR _S$[ebp]
  00008	8d 45 fc	 lea	 eax, DWORD PTR _x$1[ebp]
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	6a 04		 push	 4
  0000f	50		 push	 eax
  00010	ff 73 04	 push	 DWORD PTR [ebx+4]
  00013	e8 00 00 00 00	 call	 _luaZ_read
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	85 c0		 test	 eax, eax
  0001d	0f 85 91 00 00
	00		 jne	 $LN199@LoadProtos
; Line 155
  00023	8b 75 fc	 mov	 esi, DWORD PTR _x$1[ebp]
  00026	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00029	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0002e	0f 87 8b 00 00
	00		 ja	 $LN201@LoadProtos
  00034	8b 7d 0c	 mov	 edi, DWORD PTR _f$[ebp]
  00037	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]
  0003e	50		 push	 eax
  0003f	6a 00		 push	 0
  00041	6a 00		 push	 0
  00043	ff 33		 push	 DWORD PTR [ebx]
  00045	e8 00 00 00 00	 call	 _luaM_realloc_
  0004a	89 47 34	 mov	 DWORD PTR [edi+52], eax
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
; Line 157
  00050	33 c0		 xor	 eax, eax
  00052	89 77 1c	 mov	 DWORD PTR [edi+28], esi
  00055	85 f6		 test	 esi, esi
  00057	7e 16		 jle	 SHORT $LN4@LoadProtos
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL6@LoadProtos:
; Line 158
  00060	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  00063	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0
  0006a	40		 inc	 eax
  0006b	3b c6		 cmp	 eax, esi
  0006d	7c f1		 jl	 SHORT $LL6@LoadProtos
$LN4@LoadProtos:
; Line 159
  0006f	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _i$2$[ebp], 0
  00076	85 f6		 test	 esi, esi
  00078	7e 33		 jle	 SHORT $LN1@LoadProtos
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL3@LoadProtos:
; Line 160
  00080	ff 33		 push	 DWORD PTR [ebx]
  00082	e8 00 00 00 00	 call	 _luaF_newproto
  00087	8b 55 08	 mov	 edx, DWORD PTR _i$2$[ebp]
  0008a	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  0008d	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
; Line 161
  00090	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00093	ff 77 48	 push	 DWORD PTR [edi+72]
  00096	ff 34 90	 push	 DWORD PTR [eax+edx*4]
  00099	53		 push	 ebx
  0009a	e8 00 00 00 00	 call	 _LoadFunction
  0009f	8b 45 08	 mov	 eax, DWORD PTR _i$2$[ebp]
  000a2	83 c4 10	 add	 esp, 16			; 00000010H
  000a5	40		 inc	 eax
  000a6	89 45 08	 mov	 DWORD PTR _i$2$[ebp], eax
  000a9	3b c6		 cmp	 eax, esi
  000ab	7c d3		 jl	 SHORT $LL3@LoadProtos
$LN1@LoadProtos:
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
; Line 163
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
$LN199@LoadProtos:
; Line 154
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  000b9	53		 push	 ebx
  000ba	e8 00 00 00 00	 call	 _error
$LN202@LoadProtos:
$LN201@LoadProtos:
; Line 155
  000bf	ff 33		 push	 DWORD PTR [ebx]
  000c1	e8 00 00 00 00	 call	 _luaM_toobig
$LN203@LoadProtos:
$LN198@LoadProtos:
  000c6	cc		 int	 3
_LoadProtos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadConstants
_TEXT	SEGMENT
_x$1 = -28						; size = 8
_x$2 = -20						; size = 8
_x$3 = -12						; size = 4
tv339 = -8						; size = 4
_x$4 = -1						; size = 1
_S$ = 8							; size = 4
_x$5 = 11						; size = 1
_f$ = 12						; size = 4
_LoadConstants PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 118
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
; Line 120
  00006	8d 45 f4	 lea	 eax, DWORD PTR _x$3[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
  0000e	57		 push	 edi
  0000f	6a 04		 push	 4
  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	e8 00 00 00 00	 call	 _luaZ_read
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	85 c0		 test	 eax, eax
  0001f	0f 85 4d 01 00
	00		 jne	 $LN65@LoadConsta
; Line 121
  00025	8b 7d f4	 mov	 edi, DWORD PTR _x$3[ebp]
  00028	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0002b	3d ff ff ff 0f	 cmp	 eax, 268435455		; 0fffffffH
  00030	0f 87 47 01 00
	00		 ja	 $LN67@LoadConsta
  00036	8b c7		 mov	 eax, edi
  00038	c1 e0 04	 shl	 eax, 4
  0003b	50		 push	 eax
  0003c	6a 00		 push	 0
  0003e	6a 00		 push	 0
  00040	ff 36		 push	 DWORD PTR [esi]
  00042	e8 00 00 00 00	 call	 _luaM_realloc_
  00047	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  0004a	83 c4 10	 add	 esp, 16			; 00000010H
  0004d	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
; Line 122
  00050	89 79 10	 mov	 DWORD PTR [ecx+16], edi
; Line 123
  00053	85 ff		 test	 edi, edi
  00055	7e 1c		 jle	 SHORT $LN12@LoadConsta
; Line 121
  00057	8b 5d 0c	 mov	 ebx, DWORD PTR _f$[ebp]
  0005a	33 c9		 xor	 ecx, ecx
  0005c	8b d7		 mov	 edx, edi
  0005e	8b ff		 npad	 2
$LL14@LoadConsta:
; Line 124
  00060	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  00063	8d 49 10	 lea	 ecx, DWORD PTR [ecx+16]
  00066	c7 44 01 f8 00
	00 00 00	 mov	 DWORD PTR [ecx+eax-8], 0
  0006e	4a		 dec	 edx
  0006f	75 ef		 jne	 SHORT $LL14@LoadConsta
  00071	8b cb		 mov	 ecx, ebx
$LN12@LoadConsta:
; Line 125
  00073	33 db		 xor	 ebx, ebx
  00075	85 ff		 test	 edi, edi
  00077	0f 8e ee 00 00
	00		 jle	 $LN9@LoadConsta
  0007d	33 c0		 xor	 eax, eax
  0007f	89 45 f8	 mov	 DWORD PTR tv339[ebp], eax
$LL11@LoadConsta:
  00082	8b 79 2c	 mov	 edi, DWORD PTR [ecx+44]
  00085	03 f8		 add	 edi, eax
; Line 127
  00087	8d 45 0b	 lea	 eax, DWORD PTR _x$5[ebp]
  0008a	6a 01		 push	 1
  0008c	50		 push	 eax
  0008d	ff 76 04	 push	 DWORD PTR [esi+4]
  00090	e8 00 00 00 00	 call	 _luaZ_read
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
  00098	85 c0		 test	 eax, eax
  0009a	0f 85 d2 00 00
	00		 jne	 $LN65@LoadConsta
  000a0	0f b6 45 0b	 movzx	 eax, BYTE PTR _x$5[ebp]
; Line 128
  000a4	83 f8 14	 cmp	 eax, 20			; 00000014H
  000a7	0f 87 a7 00 00
	00		 ja	 $LN10@LoadConsta
  000ad	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN63@LoadConsta[eax]
  000b4	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN68@LoadConsta[eax*4]
$LN6@LoadConsta:
; Line 130
  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
; Line 131
  000c2	e9 8d 00 00 00	 jmp	 $LN10@LoadConsta
$LN5@LoadConsta:
; Line 133
  000c7	6a 01		 push	 1
  000c9	8d 45 ff	 lea	 eax, DWORD PTR _x$4[ebp]
  000cc	50		 push	 eax
  000cd	ff 76 04	 push	 DWORD PTR [esi+4]
  000d0	e8 00 00 00 00	 call	 _luaZ_read
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	85 c0		 test	 eax, eax
  000da	0f 85 92 00 00
	00		 jne	 $LN65@LoadConsta
  000e0	0f b6 45 ff	 movzx	 eax, BYTE PTR _x$4[ebp]
  000e4	89 07		 mov	 DWORD PTR [edi], eax
  000e6	c7 47 08 01 00
	00 00		 mov	 DWORD PTR [edi+8], 1
; Line 134
  000ed	eb 65		 jmp	 SHORT $LN10@LoadConsta
$LN4@LoadConsta:
; Line 136
  000ef	6a 08		 push	 8
  000f1	8d 45 e4	 lea	 eax, DWORD PTR _x$1[ebp]
  000f4	50		 push	 eax
  000f5	ff 76 04	 push	 DWORD PTR [esi+4]
  000f8	e8 00 00 00 00	 call	 _luaZ_read
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00100	85 c0		 test	 eax, eax
  00102	75 6e		 jne	 SHORT $LN65@LoadConsta
  00104	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _x$1[ebp]
  00109	f2 0f 11 07	 movsd	 QWORD PTR [edi], xmm0
  0010d	c7 47 08 03 00
	00 00		 mov	 DWORD PTR [edi+8], 3
; Line 137
  00114	eb 3e		 jmp	 SHORT $LN10@LoadConsta
$LN3@LoadConsta:
; Line 139
  00116	6a 08		 push	 8
  00118	8d 45 ec	 lea	 eax, DWORD PTR _x$2[ebp]
  0011b	50		 push	 eax
  0011c	ff 76 04	 push	 DWORD PTR [esi+4]
  0011f	e8 00 00 00 00	 call	 _luaZ_read
  00124	83 c4 0c	 add	 esp, 12			; 0000000cH
  00127	85 c0		 test	 eax, eax
  00129	75 47		 jne	 SHORT $LN65@LoadConsta
  0012b	8b 45 ec	 mov	 eax, DWORD PTR _x$2[ebp]
  0012e	89 07		 mov	 DWORD PTR [edi], eax
  00130	8b 45 f0	 mov	 eax, DWORD PTR _x$2[ebp+4]
  00133	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00136	c7 47 08 13 00
	00 00		 mov	 DWORD PTR [edi+8], 19	; 00000013H
; Line 140
  0013d	eb 15		 jmp	 SHORT $LN10@LoadConsta
$LN2@LoadConsta:
; Line 143
  0013f	56		 push	 esi
  00140	e8 00 00 00 00	 call	 _LoadString
  00145	89 07		 mov	 DWORD PTR [edi], eax
  00147	83 c4 04	 add	 esp, 4
  0014a	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0014e	83 c8 40	 or	 eax, 64			; 00000040H
  00151	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN10@LoadConsta:
; Line 125
  00154	8b 45 f8	 mov	 eax, DWORD PTR tv339[ebp]
  00157	43		 inc	 ebx
  00158	83 c0 10	 add	 eax, 16			; 00000010H
  0015b	89 45 f8	 mov	 DWORD PTR tv339[ebp], eax
  0015e	3b 5d f4	 cmp	 ebx, DWORD PTR _x$3[ebp]
  00161	7d 08		 jge	 SHORT $LN9@LoadConsta
  00163	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
  00166	e9 17 ff ff ff	 jmp	 $LL11@LoadConsta
$LN9@LoadConsta:
  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
; Line 149
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c3		 ret	 0
$LN65@LoadConsta:
; Line 120
  00172	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00177	56		 push	 esi
  00178	e8 00 00 00 00	 call	 _error
$LN69@LoadConsta:
$LN67@LoadConsta:
; Line 121
  0017d	ff 36		 push	 DWORD PTR [esi]
  0017f	e8 00 00 00 00	 call	 _luaM_toobig
$LN70@LoadConsta:
$LN64@LoadConsta:
$LN68@LoadConsta:
; Line 149
  00184	00 00 00 00	 DD	 $LN6@LoadConsta
  00188	00 00 00 00	 DD	 $LN5@LoadConsta
  0018c	00 00 00 00	 DD	 $LN4@LoadConsta
  00190	00 00 00 00	 DD	 $LN2@LoadConsta
  00194	00 00 00 00	 DD	 $LN3@LoadConsta
  00198	00 00 00 00	 DD	 $LN10@LoadConsta
$LN63@LoadConsta:
  0019c	00		 DB	 0
  0019d	01		 DB	 1
  0019e	05		 DB	 5
  0019f	02		 DB	 2
  001a0	03		 DB	 3
  001a1	05		 DB	 5
  001a2	05		 DB	 5
  001a3	05		 DB	 5
  001a4	05		 DB	 5
  001a5	05		 DB	 5
  001a6	05		 DB	 5
  001a7	05		 DB	 5
  001a8	05		 DB	 5
  001a9	05		 DB	 5
  001aa	05		 DB	 5
  001ab	05		 DB	 5
  001ac	05		 DB	 5
  001ad	05		 DB	 5
  001ae	05		 DB	 5
  001af	04		 DB	 4
  001b0	03		 DB	 3
_LoadConstants ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadFunction
_TEXT	SEGMENT
_x$1 = 8						; size = 4
_x$2 = 8						; size = 4
_S$ = 8							; size = 4
_x$3 = 11						; size = 1
_x$4 = 11						; size = 1
_x$5 = 11						; size = 1
_f$ = 12						; size = 4
_psource$ = 16						; size = 4
_LoadFunction PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 202
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 203
  00004	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 _LoadString
  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _f$[ebp]
; Line 204
  00011	85 c0		 test	 eax, eax
; Line 206
  00013	6a 04		 push	 4
  00015	0f 44 45 10	 cmove	 eax, DWORD PTR _psource$[ebp]
  00019	89 47 48	 mov	 DWORD PTR [edi+72], eax
  0001c	8d 45 08	 lea	 eax, DWORD PTR _x$2[ebp]
  0001f	50		 push	 eax
  00020	ff 76 04	 push	 DWORD PTR [esi+4]
  00023	e8 00 00 00 00	 call	 _luaZ_read
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	85 c0		 test	 eax, eax
  0002d	0f 85 a0 00 00
	00		 jne	 $LN36@LoadFuncti
  00033	8b 45 08	 mov	 eax, DWORD PTR _x$2[ebp]
  00036	89 47 24	 mov	 DWORD PTR [edi+36], eax
; Line 207
  00039	8d 45 08	 lea	 eax, DWORD PTR _x$1[ebp]
  0003c	6a 04		 push	 4
  0003e	50		 push	 eax
  0003f	ff 76 04	 push	 DWORD PTR [esi+4]
  00042	e8 00 00 00 00	 call	 _luaZ_read
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	85 c0		 test	 eax, eax
  0004c	0f 85 8c 00 00
	00		 jne	 $LN38@LoadFuncti
  00052	8b 45 08	 mov	 eax, DWORD PTR _x$1[ebp]
  00055	89 47 28	 mov	 DWORD PTR [edi+40], eax
; Line 208
  00058	8d 45 0b	 lea	 eax, DWORD PTR _x$5[ebp]
  0005b	6a 01		 push	 1
  0005d	50		 push	 eax
  0005e	ff 76 04	 push	 DWORD PTR [esi+4]
  00061	e8 00 00 00 00	 call	 _luaZ_read
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	85 c0		 test	 eax, eax
  0006b	75 7c		 jne	 SHORT $LN39@LoadFuncti
  0006d	8a 45 0b	 mov	 al, BYTE PTR _x$5[ebp]
  00070	88 47 06	 mov	 BYTE PTR [edi+6], al
; Line 209
  00073	8d 45 0b	 lea	 eax, DWORD PTR _x$4[ebp]
  00076	6a 01		 push	 1
  00078	50		 push	 eax
  00079	ff 76 04	 push	 DWORD PTR [esi+4]
  0007c	e8 00 00 00 00	 call	 _luaZ_read
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH
  00084	85 c0		 test	 eax, eax
  00086	75 6c		 jne	 SHORT $LN40@LoadFuncti
  00088	8a 45 0b	 mov	 al, BYTE PTR _x$4[ebp]
  0008b	88 47 07	 mov	 BYTE PTR [edi+7], al
; Line 210
  0008e	8d 45 0b	 lea	 eax, DWORD PTR _x$3[ebp]
  00091	6a 01		 push	 1
  00093	50		 push	 eax
  00094	ff 76 04	 push	 DWORD PTR [esi+4]
  00097	e8 00 00 00 00	 call	 _luaZ_read
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	85 c0		 test	 eax, eax
  000a1	75 5c		 jne	 SHORT $LN41@LoadFuncti
  000a3	8a 45 0b	 mov	 al, BYTE PTR _x$3[ebp]
; Line 211
  000a6	57		 push	 edi
  000a7	56		 push	 esi
  000a8	88 47 08	 mov	 BYTE PTR [edi+8], al
  000ab	e8 00 00 00 00	 call	 _LoadCode
; Line 212
  000b0	57		 push	 edi
  000b1	56		 push	 esi
  000b2	e8 00 00 00 00	 call	 _LoadConstants
; Line 213
  000b7	57		 push	 edi
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 _LoadUpvalues
; Line 214
  000be	57		 push	 edi
  000bf	56		 push	 esi
  000c0	e8 00 00 00 00	 call	 _LoadProtos
; Line 215
  000c5	57		 push	 edi
  000c6	56		 push	 esi
  000c7	e8 00 00 00 00	 call	 _LoadDebug
  000cc	83 c4 28	 add	 esp, 40			; 00000028H
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
; Line 216
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
$LN36@LoadFuncti:
; Line 206
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  000d8	56		 push	 esi
  000d9	e8 00 00 00 00	 call	 _error
$LN42@LoadFuncti:
$LN38@LoadFuncti:
; Line 207
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  000e3	56		 push	 esi
  000e4	e8 00 00 00 00	 call	 _error
$LN43@LoadFuncti:
$LN39@LoadFuncti:
; Line 208
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  000ee	56		 push	 esi
  000ef	e8 00 00 00 00	 call	 _error
$LN44@LoadFuncti:
$LN40@LoadFuncti:
; Line 209
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  000f9	56		 push	 esi
  000fa	e8 00 00 00 00	 call	 _error
$LN45@LoadFuncti:
$LN41@LoadFuncti:
; Line 210
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00104	56		 push	 esi
  00105	e8 00 00 00 00	 call	 _error
$LN46@LoadFuncti:
$LN35@LoadFuncti:
  0010a	cc		 int	 3
_LoadFunction ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadCode
_TEXT	SEGMENT
_x$1 = 8						; size = 4
_S$ = 8							; size = 4
_f$ = 12						; size = 4
_LoadCode PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 107
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; Line 108
  00004	8b 7d 08	 mov	 edi, DWORD PTR _S$[ebp]
  00007	8d 45 08	 lea	 eax, DWORD PTR _x$1[ebp]
  0000a	6a 04		 push	 4
  0000c	50		 push	 eax
  0000d	ff 77 04	 push	 DWORD PTR [edi+4]
  00010	e8 00 00 00 00	 call	 _luaZ_read
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	85 c0		 test	 eax, eax
  0001a	75 41		 jne	 SHORT $LN16@LoadCode
; Line 109
  0001c	53		 push	 ebx
  0001d	8b 5d 08	 mov	 ebx, DWORD PTR _x$1[ebp]
  00020	56		 push	 esi
  00021	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00024	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00029	77 3d		 ja	 SHORT $LN18@LoadCode
  0002b	8d 34 9d 00 00
	00 00		 lea	 esi, DWORD PTR [ebx*4]
  00032	56		 push	 esi
  00033	6a 00		 push	 0
  00035	6a 00		 push	 0
  00037	ff 37		 push	 DWORD PTR [edi]
  00039	e8 00 00 00 00	 call	 _luaM_realloc_
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _f$[ebp]
; Line 111
  00041	56		 push	 esi
  00042	50		 push	 eax
  00043	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00046	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00049	ff 77 04	 push	 DWORD PTR [edi+4]
  0004c	e8 00 00 00 00	 call	 _luaZ_read
  00051	83 c4 1c	 add	 esp, 28			; 0000001cH
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	85 c0		 test	 eax, eax
  00058	75 15		 jne	 SHORT $LN19@LoadCode
  0005a	5f		 pop	 edi
; Line 112
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN16@LoadCode:
; Line 108
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00062	57		 push	 edi
  00063	e8 00 00 00 00	 call	 _error
$LN20@LoadCode:
$LN18@LoadCode:
; Line 109
  00068	ff 37		 push	 DWORD PTR [edi]
  0006a	e8 00 00 00 00	 call	 _luaM_toobig
$LN21@LoadCode:
$LN19@LoadCode:
; Line 111
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00074	57		 push	 edi
  00075	e8 00 00 00 00	 call	 _error
$LN22@LoadCode:
$LN15@LoadCode:
  0007a	cc		 int	 3
_LoadCode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadString
_TEXT	SEGMENT
_size$ = -52						; size = 4
_x$1 = -45						; size = 1
_buff$2 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_S$ = 8							; size = 4
_LoadString PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 88
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
; Line 89
  00014	8d 45 d3	 lea	 eax, DWORD PTR _x$1[ebp]
  00017	6a 01		 push	 1
  00019	50		 push	 eax
  0001a	ff 76 04	 push	 DWORD PTR [esi+4]
  0001d	e8 00 00 00 00	 call	 _luaZ_read
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	85 c0		 test	 eax, eax
  00027	0f 85 ad 00 00
	00		 jne	 $LN26@LoadString
  0002d	0f b6 45 d3	 movzx	 eax, BYTE PTR _x$1[ebp]
  00031	89 45 cc	 mov	 DWORD PTR _size$[ebp], eax
; Line 90
  00034	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00039	75 1c		 jne	 SHORT $LN15@LoadString
; Line 91
  0003b	6a 04		 push	 4
  0003d	8d 45 cc	 lea	 eax, DWORD PTR _size$[ebp]
  00040	50		 push	 eax
  00041	ff 76 04	 push	 DWORD PTR [esi+4]
  00044	e8 00 00 00 00	 call	 _luaZ_read
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	85 c0		 test	 eax, eax
  0004e	0f 85 91 00 00
	00		 jne	 $LN28@LoadString
  00054	8b 45 cc	 mov	 eax, DWORD PTR _size$[ebp]
$LN15@LoadString:
; Line 92
  00057	85 c0		 test	 eax, eax
  00059	75 0f		 jne	 SHORT $LN4@LoadString
  0005b	5e		 pop	 esi
; Line 104
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005f	33 cd		 xor	 ecx, ebp
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN4@LoadString:
; Line 94
  0006a	48		 dec	 eax
  0006b	89 45 cc	 mov	 DWORD PTR _size$[ebp], eax
  0006e	83 f8 28	 cmp	 eax, 40			; 00000028H
  00071	77 34		 ja	 SHORT $LN2@LoadString
; Line 96
  00073	50		 push	 eax
  00074	8d 45 d4	 lea	 eax, DWORD PTR _buff$2[ebp]
  00077	50		 push	 eax
  00078	ff 76 04	 push	 DWORD PTR [esi+4]
  0007b	e8 00 00 00 00	 call	 _luaZ_read
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	85 c0		 test	 eax, eax
  00085	75 69		 jne	 SHORT $LN29@LoadString
; Line 97
  00087	ff 75 cc	 push	 DWORD PTR _size$[ebp]
  0008a	8d 45 d4	 lea	 eax, DWORD PTR _buff$2[ebp]
  0008d	50		 push	 eax
  0008e	ff 36		 push	 DWORD PTR [esi]
  00090	e8 00 00 00 00	 call	 _luaS_newlstr
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
  00098	5e		 pop	 esi
; Line 104
  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	33 cd		 xor	 ecx, ebp
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
$LN2@LoadString:
  000a7	57		 push	 edi
; Line 100
  000a8	50		 push	 eax
  000a9	ff 36		 push	 DWORD PTR [esi]
  000ab	e8 00 00 00 00	 call	 _luaS_createlngstrobj
; Line 101
  000b0	ff 75 cc	 push	 DWORD PTR _size$[ebp]
  000b3	8b f8		 mov	 edi, eax
  000b5	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  000b8	51		 push	 ecx
  000b9	ff 76 04	 push	 DWORD PTR [esi+4]
  000bc	e8 00 00 00 00	 call	 _luaZ_read
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
  000c4	85 c0		 test	 eax, eax
  000c6	75 33		 jne	 SHORT $LN30@LoadString
; Line 104
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cb	8b c7		 mov	 eax, edi
  000cd	5f		 pop	 edi
  000ce	33 cd		 xor	 ecx, ebp
  000d0	5e		 pop	 esi
  000d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
$LN26@LoadString:
; Line 89
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  000df	56		 push	 esi
  000e0	e8 00 00 00 00	 call	 _error
$LN31@LoadString:
$LN28@LoadString:
; Line 91
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  000ea	56		 push	 esi
  000eb	e8 00 00 00 00	 call	 _error
$LN32@LoadString:
$LN29@LoadString:
; Line 96
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  000f5	56		 push	 esi
  000f6	e8 00 00 00 00	 call	 _error
$LN33@LoadString:
$LN30@LoadString:
; Line 101
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00100	56		 push	 esi
  00101	e8 00 00 00 00	 call	 _error
$LN34@LoadString:
$LN25@LoadString:
  00106	cc		 int	 3
_LoadString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadInteger
_TEXT	SEGMENT
_x$ = -8						; size = 8
_S$ = 8							; size = 4
_LoadInteger PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 81
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; Line 83
  00006	8d 45 f8	 lea	 eax, DWORD PTR _x$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
  0000d	6a 08		 push	 8
  0000f	50		 push	 eax
  00010	ff 76 04	 push	 DWORD PTR [esi+4]
  00013	e8 00 00 00 00	 call	 _luaZ_read
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	85 c0		 test	 eax, eax
  0001d	75 0b		 jne	 SHORT $LN8@LoadIntege
; Line 84
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00022	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp+4]
  00025	5e		 pop	 esi
; Line 85
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@LoadIntege:
; Line 83
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _error
$LN10@LoadIntege:
$LN7@LoadIntege:
  00035	cc		 int	 3
_LoadInteger ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadNumber
_TEXT	SEGMENT
_x$ = -8						; size = 8
_S$ = 8							; size = 4
_LoadNumber PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 74
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; Line 76
  00006	8d 45 f8	 lea	 eax, DWORD PTR _x$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
  0000d	6a 08		 push	 8
  0000f	50		 push	 eax
  00010	ff 76 04	 push	 DWORD PTR [esi+4]
  00013	e8 00 00 00 00	 call	 _luaZ_read
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	85 c0		 test	 eax, eax
  0001d	75 08		 jne	 SHORT $LN8@LoadNumber
; Line 77
  0001f	dd 45 f8	 fld	 QWORD PTR _x$[ebp]
  00022	5e		 pop	 esi
; Line 78
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN8@LoadNumber:
; Line 76
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _error
$LN10@LoadNumber:
$LN7@LoadNumber:
  00032	cc		 int	 3
_LoadNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadInt
_TEXT	SEGMENT
_x$ = -4						; size = 4
_S$ = 8							; size = 4
_LoadInt PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 67
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
; Line 69
  00005	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
  00008	8d 45 fc	 lea	 eax, DWORD PTR _x$[ebp]
  0000b	6a 04		 push	 4
  0000d	50		 push	 eax
  0000e	ff 76 04	 push	 DWORD PTR [esi+4]
  00011	e8 00 00 00 00	 call	 _luaZ_read
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	85 c0		 test	 eax, eax
  0001b	75 08		 jne	 SHORT $LN8@LoadInt
; Line 70
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00020	5e		 pop	 esi
; Line 71
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN8@LoadInt:
; Line 69
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 _error
$LN10@LoadInt:
$LN7@LoadInt:
  00030	cc		 int	 3
_LoadInt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadByte
_TEXT	SEGMENT
_x$ = -1						; size = 1
_S$ = 8							; size = 4
_LoadByte PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 60
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
; Line 62
  00005	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
  00008	8d 45 ff	 lea	 eax, DWORD PTR _x$[ebp]
  0000b	6a 01		 push	 1
  0000d	50		 push	 eax
  0000e	ff 76 04	 push	 DWORD PTR [esi+4]
  00011	e8 00 00 00 00	 call	 _luaZ_read
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	85 c0		 test	 eax, eax
  0001b	75 08		 jne	 SHORT $LN8@LoadByte
; Line 63
  0001d	8a 45 ff	 mov	 al, BYTE PTR _x$[ebp]
  00020	5e		 pop	 esi
; Line 64
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN8@LoadByte:
; Line 62
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 _error
$LN10@LoadByte:
$LN7@LoadByte:
  00030	cc		 int	 3
_LoadByte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _LoadBlock
_TEXT	SEGMENT
_S$ = 8							; size = 4
_b$ = 12						; size = 4
_size$ = 16						; size = 4
_LoadBlock PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 51
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 52
  00004	ff 75 10	 push	 DWORD PTR _size$[ebp]
  00007	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	e8 00 00 00 00	 call	 _luaZ_read
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	85 c0		 test	 eax, eax
  0001a	75 03		 jne	 SHORT $LN5@LoadBlock
  0001c	5e		 pop	 esi
; Line 54
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
$LN5@LoadBlock:
; Line 53
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 _error
$LN7@LoadBlock:
$LN4@LoadBlock:
  0002a	cc		 int	 3
_LoadBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _error
_TEXT	SEGMENT
_S$ = 8							; size = 4
_why$ = 12						; size = 4
_error	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 39
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 40
  00004	8b 75 08	 mov	 esi, DWORD PTR _S$[ebp]
  00007	ff 75 0c	 push	 DWORD PTR _why$[ebp]
  0000a	ff 76 08	 push	 DWORD PTR [esi+8]
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DBDKBCFJ@?$CFs?3?5?$CFs?5precompiled?5chunk?$AA@
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 _luaO_pushfstring
  00019	83 c4 10	 add	 esp, 16			; 00000010H
; Line 41
  0001c	6a 03		 push	 3
  0001e	ff 36		 push	 DWORD PTR [esi]
  00020	e8 00 00 00 00	 call	 _luaD_throw
$LN4@error:
$LN3@error:
  00025	cc		 int	 3
_error	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaU_undump
_TEXT	SEGMENT
_S$ = -12						; size = 12
_L$ = 8							; size = 4
_Z$ = 12						; size = 4
_name$ = 16						; size = 4
_x$1 = 19						; size = 1
_luaU_undump PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lundump.c
; Line 258
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 261
  00003	8b 55 10	 mov	 edx, DWORD PTR _name$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	8a 0a		 mov	 cl, BYTE PTR [edx]
  0000b	80 f9 40	 cmp	 cl, 64			; 00000040H
  0000e	74 12		 je	 SHORT $LN4@luaU_undum
  00010	80 f9 3d	 cmp	 cl, 61			; 0000003dH
  00013	74 0d		 je	 SHORT $LN4@luaU_undum
; Line 263
  00015	80 f9 1b	 cmp	 cl, 27			; 0000001bH
  00018	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@CNJIDMJE@binary?5string?$AA@
  0001d	0f 45 c2	 cmovne	 eax, edx
; Line 266
  00020	eb 03		 jmp	 SHORT $LN16@luaU_undum
$LN4@luaU_undum:
; Line 262
  00022	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
$LN16@luaU_undum:
  00025	89 45 fc	 mov	 DWORD PTR _S$[ebp+8], eax
; Line 268
  00028	8b 45 0c	 mov	 eax, DWORD PTR _Z$[ebp]
  0002b	56		 push	 esi
  0002c	89 45 f8	 mov	 DWORD PTR _S$[ebp+4], eax
; Line 269
  0002f	8d 45 f4	 lea	 eax, DWORD PTR _S$[ebp]
  00032	57		 push	 edi
  00033	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00036	50		 push	 eax
  00037	89 7d f4	 mov	 DWORD PTR _S$[ebp], edi
  0003a	e8 00 00 00 00	 call	 _checkHeader
; Line 270
  0003f	6a 01		 push	 1
  00041	8d 45 13	 lea	 eax, DWORD PTR _x$1[ebp]
  00044	50		 push	 eax
  00045	ff 75 f8	 push	 DWORD PTR _S$[ebp+4]
  00048	e8 00 00 00 00	 call	 _luaZ_read
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	85 c0		 test	 eax, eax
  00052	75 3f		 jne	 SHORT $LN17@luaU_undum
  00054	0f b6 45 13	 movzx	 eax, BYTE PTR _x$1[ebp]
  00058	50		 push	 eax
  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 _luaF_newLclosure
; Line 271
  0005f	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00062	8b f0		 mov	 esi, eax
; Line 272
  00064	57		 push	 edi
  00065	89 31		 mov	 DWORD PTR [ecx], esi
  00067	c7 41 08 46 00
	00 00		 mov	 DWORD PTR [ecx+8], 70	; 00000046H
  0006e	e8 00 00 00 00	 call	 _luaD_inctop
; Line 273
  00073	57		 push	 edi
  00074	e8 00 00 00 00	 call	 _luaF_newproto
; Line 274
  00079	6a 00		 push	 0
  0007b	50		 push	 eax
  0007c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0007f	8d 45 f4	 lea	 eax, DWORD PTR _S$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _LoadFunction
  00088	83 c4 1c	 add	 esp, 28			; 0000001cH
; Line 277
  0008b	8b c6		 mov	 eax, esi
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
; Line 278
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN17@luaU_undum:
; Line 270
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_09IDFJECNO@truncated?$AA@
  00098	8d 45 f4	 lea	 eax, DWORD PTR _S$[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _error
$LN19@luaU_undum:
$LN15@luaU_undum:
  000a1	cc		 int	 3
_luaU_undump ENDP
_TEXT	ENDS
END
