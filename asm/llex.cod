; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\0\luaspq-1.1\luaspq-1.1\src\llex.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_03BOPJPIAM@and?$AA@			; `string'
PUBLIC	??_C@_05ELPHFHOI@break?$AA@			; `string'
PUBLIC	??_C@_02KNAFDCHJ@do?$AA@			; `string'
PUBLIC	??_C@_04FHMCPBIP@else?$AA@			; `string'
PUBLIC	??_C@_06CAACNEC@elseif?$AA@			; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_03JOHEBPFF@for?$AA@			; `string'
PUBLIC	??_C@_08HFFPPCHF@function?$AA@			; `string'
PUBLIC	??_C@_04MABHPDAO@goto?$AA@			; `string'
PUBLIC	??_C@_02HEBPBKGD@if?$AA@			; `string'
PUBLIC	??_C@_02LMMGJAGL@in?$AA@			; `string'
PUBLIC	??_C@_05IDKHKMLA@local?$AA@			; `string'
PUBLIC	??_C@_03ILAMHENH@nil?$AA@			; `string'
PUBLIC	??_C@_03NJKJADM@not?$AA@			; `string'
PUBLIC	??_C@_02FODMLBIE@or?$AA@			; `string'
PUBLIC	??_C@_06LGDBIFHB@repeat?$AA@			; `string'
PUBLIC	??_C@_06LNOFJDNM@return?$AA@			; `string'
PUBLIC	??_C@_04HOHPNOOD@then?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_05FJMDOIMN@until?$AA@			; `string'
PUBLIC	??_C@_05OODBEKIG@while?$AA@			; `string'
PUBLIC	??_C@_02CBLDBPFN@?1?1?$AA@			; `string'
PUBLIC	??_C@_02DJGKEECL@?4?4?$AA@			; `string'
PUBLIC	??_C@_03KHICJKCI@?4?4?4?$AA@			; `string'
PUBLIC	??_C@_02EGOFBIJA@?$DN?$DN?$AA@			; `string'
PUBLIC	??_C@_02EEKDKGMJ@?$DO?$DN?$AA@			; `string'
PUBLIC	??_C@_02EHCHHCKH@?$DM?$DN?$AA@			; `string'
PUBLIC	??_C@_02DEDJCLAJ@?$HO?$DN?$AA@			; `string'
PUBLIC	??_C@_02FODMEDOG@?$DM?$DM?$AA@			; `string'
PUBLIC	??_C@_02GPIOPFAK@?$DO?$DO?$AA@			; `string'
PUBLIC	??_C@_02MOLJINC@?3?3?$AA@			; `string'
PUBLIC	??_C@_05CINCKAN@?$DMeof?$DO?$AA@		; `string'
PUBLIC	??_C@_08OHBCANEJ@?$DMnumber?$DO?$AA@		; `string'
PUBLIC	??_C@_09CKFPBBLH@?$DMinteger?$DO?$AA@		; `string'
PUBLIC	??_C@_06FNGJOCBI@?$DMname?$DO?$AA@		; `string'
PUBLIC	??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@		; `string'
;	COMDAT ??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
CONST	SEGMENT
??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@ DB '<string>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNGJOCBI@?$DMname?$DO?$AA@
CONST	SEGMENT
??_C@_06FNGJOCBI@?$DMname?$DO?$AA@ DB '<name>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CKFPBBLH@?$DMinteger?$DO?$AA@
CONST	SEGMENT
??_C@_09CKFPBBLH@?$DMinteger?$DO?$AA@ DB '<integer>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OHBCANEJ@?$DMnumber?$DO?$AA@
CONST	SEGMENT
??_C@_08OHBCANEJ@?$DMnumber?$DO?$AA@ DB '<number>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CINCKAN@?$DMeof?$DO?$AA@
CONST	SEGMENT
??_C@_05CINCKAN@?$DMeof?$DO?$AA@ DB '<eof>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MOLJINC@?3?3?$AA@
CONST	SEGMENT
??_C@_02MOLJINC@?3?3?$AA@ DB '::', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GPIOPFAK@?$DO?$DO?$AA@
CONST	SEGMENT
??_C@_02GPIOPFAK@?$DO?$DO?$AA@ DB '>>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FODMEDOG@?$DM?$DM?$AA@
CONST	SEGMENT
??_C@_02FODMEDOG@?$DM?$DM?$AA@ DB '<<', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DEDJCLAJ@?$HO?$DN?$AA@
CONST	SEGMENT
??_C@_02DEDJCLAJ@?$HO?$DN?$AA@ DB '~=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EHCHHCKH@?$DM?$DN?$AA@
CONST	SEGMENT
??_C@_02EHCHHCKH@?$DM?$DN?$AA@ DB '<=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EEKDKGMJ@?$DO?$DN?$AA@
CONST	SEGMENT
??_C@_02EEKDKGMJ@?$DO?$DN?$AA@ DB '>=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGOFBIJA@?$DN?$DN?$AA@
CONST	SEGMENT
??_C@_02EGOFBIJA@?$DN?$DN?$AA@ DB '==', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHICJKCI@?4?4?4?$AA@
CONST	SEGMENT
??_C@_03KHICJKCI@?4?4?4?$AA@ DB '...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DJGKEECL@?4?4?$AA@
CONST	SEGMENT
??_C@_02DJGKEECL@?4?4?$AA@ DB '..', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CBLDBPFN@?1?1?$AA@
CONST	SEGMENT
??_C@_02CBLDBPFN@?1?1?$AA@ DB '//', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OODBEKIG@while?$AA@
CONST	SEGMENT
??_C@_05OODBEKIG@while?$AA@ DB 'while', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FJMDOIMN@until?$AA@
CONST	SEGMENT
??_C@_05FJMDOIMN@until?$AA@ DB 'until', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HOHPNOOD@then?$AA@
CONST	SEGMENT
??_C@_04HOHPNOOD@then?$AA@ DB 'then', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNOFJDNM@return?$AA@
CONST	SEGMENT
??_C@_06LNOFJDNM@return?$AA@ DB 'return', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGDBIFHB@repeat?$AA@
CONST	SEGMENT
??_C@_06LGDBIFHB@repeat?$AA@ DB 'repeat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FODMLBIE@or?$AA@
CONST	SEGMENT
??_C@_02FODMLBIE@or?$AA@ DB 'or', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJKJADM@not?$AA@
CONST	SEGMENT
??_C@_03NJKJADM@not?$AA@ DB 'not', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ILAMHENH@nil?$AA@
CONST	SEGMENT
??_C@_03ILAMHENH@nil?$AA@ DB 'nil', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDKHKMLA@local?$AA@
CONST	SEGMENT
??_C@_05IDKHKMLA@local?$AA@ DB 'local', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGJAGL@in?$AA@
CONST	SEGMENT
??_C@_02LMMGJAGL@in?$AA@ DB 'in', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEBPBKGD@if?$AA@
CONST	SEGMENT
??_C@_02HEBPBKGD@if?$AA@ DB 'if', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MABHPDAO@goto?$AA@
CONST	SEGMENT
??_C@_04MABHPDAO@goto?$AA@ DB 'goto', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFFPPCHF@function?$AA@
CONST	SEGMENT
??_C@_08HFFPPCHF@function?$AA@ DB 'function', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JOHEBPFF@for?$AA@
CONST	SEGMENT
??_C@_03JOHEBPFF@for?$AA@ DB 'for', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CAACNEC@elseif?$AA@
CONST	SEGMENT
??_C@_06CAACNEC@elseif?$AA@ DB 'elseif', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FHMCPBIP@else?$AA@
CONST	SEGMENT
??_C@_04FHMCPBIP@else?$AA@ DB 'else', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNAFDCHJ@do?$AA@
CONST	SEGMENT
??_C@_02KNAFDCHJ@do?$AA@ DB 'do', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ELPHFHOI@break?$AA@
CONST	SEGMENT
??_C@_05ELPHFHOI@break?$AA@ DB 'break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BOPJPIAM@and?$AA@
CONST	SEGMENT
??_C@_03BOPJPIAM@and?$AA@ DB 'and', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_luaX_tokens DD	FLAT:??_C@_03BOPJPIAM@and?$AA@
	DD	FLAT:??_C@_05ELPHFHOI@break?$AA@
	DD	FLAT:??_C@_02KNAFDCHJ@do?$AA@
	DD	FLAT:??_C@_04FHMCPBIP@else?$AA@
	DD	FLAT:??_C@_06CAACNEC@elseif?$AA@
	DD	FLAT:??_C@_03JBJLGPFL@end?$AA@
	DD	FLAT:??_C@_05LAPONLG@false?$AA@
	DD	FLAT:??_C@_03JOHEBPFF@for?$AA@
	DD	FLAT:??_C@_08HFFPPCHF@function?$AA@
	DD	FLAT:??_C@_04MABHPDAO@goto?$AA@
	DD	FLAT:??_C@_02HEBPBKGD@if?$AA@
	DD	FLAT:??_C@_02LMMGJAGL@in?$AA@
	DD	FLAT:??_C@_05IDKHKMLA@local?$AA@
	DD	FLAT:??_C@_03ILAMHENH@nil?$AA@
	DD	FLAT:??_C@_03NJKJADM@not?$AA@
	DD	FLAT:??_C@_02FODMLBIE@or?$AA@
	DD	FLAT:??_C@_06LGDBIFHB@repeat?$AA@
	DD	FLAT:??_C@_06LNOFJDNM@return?$AA@
	DD	FLAT:??_C@_04HOHPNOOD@then?$AA@
	DD	FLAT:??_C@_04LOAJBDKD@true?$AA@
	DD	FLAT:??_C@_05FJMDOIMN@until?$AA@
	DD	FLAT:??_C@_05OODBEKIG@while?$AA@
	DD	FLAT:??_C@_02CBLDBPFN@?1?1?$AA@
	DD	FLAT:??_C@_02DJGKEECL@?4?4?$AA@
	DD	FLAT:??_C@_03KHICJKCI@?4?4?4?$AA@
	DD	FLAT:??_C@_02EGOFBIJA@?$DN?$DN?$AA@
	DD	FLAT:??_C@_02EEKDKGMJ@?$DO?$DN?$AA@
	DD	FLAT:??_C@_02EHCHHCKH@?$DM?$DN?$AA@
	DD	FLAT:??_C@_02DEDJCLAJ@?$HO?$DN?$AA@
	DD	FLAT:??_C@_02FODMEDOG@?$DM?$DM?$AA@
	DD	FLAT:??_C@_02GPIOPFAK@?$DO?$DO?$AA@
	DD	FLAT:??_C@_02MOLJINC@?3?3?$AA@
	DD	FLAT:??_C@_05CINCKAN@?$DMeof?$DO?$AA@
	DD	FLAT:??_C@_08OHBCANEJ@?$DMnumber?$DO?$AA@
	DD	FLAT:??_C@_09CKFPBBLH@?$DMinteger?$DO?$AA@
	DD	FLAT:??_C@_06FNGJOCBI@?$DMname?$DO?$AA@
	DD	FLAT:??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
CONST	ENDS
PUBLIC	_luaX_init
PUBLIC	_luaX_setinput
PUBLIC	_luaX_newstring
PUBLIC	_luaX_next
PUBLIC	_luaX_lookahead
PUBLIC	_luaX_syntaxerror
PUBLIC	_luaX_token2str
PUBLIC	??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_04LJLBKCOP@_ENV?$AA@			; `string'
PUBLIC	??_C@_04ENIEGDOG@?8?$CFc?8?$AA@			; `string'
PUBLIC	??_C@_04FBKCMAJG@?8?$CFs?8?$AA@			; `string'
PUBLIC	??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BJ@LAKGPFF@chunk?5has?5too?5many?5lines?$AA@ ; `string'
PUBLIC	??_C@_0BB@CFMNENCE@malformed?5number?$AA@	; `string'
PUBLIC	??_C@_02GOGFPGCE@Ee?$AA@			; `string'
PUBLIC	??_C@_02CIDOMIFJ@xX?$AA@			; `string'
PUBLIC	??_C@_02EDDNHBKL@Pp?$AA@			; `string'
PUBLIC	??_C@_06ICGJLFIM@string?$AA@			; `string'
PUBLIC	??_C@_07GJGNEJFD@comment?$AA@			; `string'
PUBLIC	??_C@_0CJ@CPAHLMBA@unfinished?5long?5?$CFs?5?$CIstarting?5at?5@ ; `string'
PUBLIC	??_C@_0BL@HIOFDBBP@hexadecimal?5digit?5expected?$AA@ ; `string'
PUBLIC	??_C@_0M@LCIHADNN@missing?5?8?$HL?8?$AA@	; `string'
PUBLIC	??_C@_0BG@INJLHCPD@UTF?98?5value?5too?5large?$AA@ ; `string'
PUBLIC	??_C@_0M@LGAKHPGP@missing?5?8?$HN?8?$AA@	; `string'
PUBLIC	??_C@_0BJ@FGOMBPHF@decimal?5escape?5too?5large?$AA@ ; `string'
PUBLIC	??_C@_0BC@IBAFBKML@unfinished?5string?$AA@	; `string'
PUBLIC	??_C@_0BI@HGMIJEDD@invalid?5escape?5sequence?$AA@ ; `string'
PUBLIC	??_C@_0BO@DBNLNIBP@invalid?5long?5string?5delimiter?$AA@ ; `string'
EXTRN	__imp__localeconv:PROC
EXTRN	_luaO_utf8esc:PROC
EXTRN	_luaO_str2num:PROC
EXTRN	_luaO_hexavalue:PROC
EXTRN	_luaO_pushfstring:PROC
EXTRN	_luaM_realloc_:PROC
EXTRN	_luaZ_fill:PROC
EXTRN	_luaG_addinfo:PROC
EXTRN	_luaD_throw:PROC
EXTRN	_luaC_fix:PROC
EXTRN	_luaC_step:PROC
EXTRN	_luaS_newlstr:PROC
EXTRN	_luaS_new:PROC
EXTRN	_luaH_set:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_luai_ctype_:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BO@DBNLNIBP@invalid?5long?5string?5delimiter?$AA@
CONST	SEGMENT
??_C@_0BO@DBNLNIBP@invalid?5long?5string?5delimiter?$AA@ DB 'invalid long'
	DB	' string delimiter', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HGMIJEDD@invalid?5escape?5sequence?$AA@
CONST	SEGMENT
??_C@_0BI@HGMIJEDD@invalid?5escape?5sequence?$AA@ DB 'invalid escape sequ'
	DB	'ence', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IBAFBKML@unfinished?5string?$AA@
CONST	SEGMENT
??_C@_0BC@IBAFBKML@unfinished?5string?$AA@ DB 'unfinished string', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FGOMBPHF@decimal?5escape?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BJ@FGOMBPHF@decimal?5escape?5too?5large?$AA@ DB 'decimal escape to'
	DB	'o large', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LGAKHPGP@missing?5?8?$HN?8?$AA@
CONST	SEGMENT
??_C@_0M@LGAKHPGP@missing?5?8?$HN?8?$AA@ DB 'missing ''}''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@INJLHCPD@UTF?98?5value?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BG@INJLHCPD@UTF?98?5value?5too?5large?$AA@ DB 'UTF-8 value too lar'
	DB	'ge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LCIHADNN@missing?5?8?$HL?8?$AA@
CONST	SEGMENT
??_C@_0M@LCIHADNN@missing?5?8?$HL?8?$AA@ DB 'missing ''{''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HIOFDBBP@hexadecimal?5digit?5expected?$AA@
CONST	SEGMENT
??_C@_0BL@HIOFDBBP@hexadecimal?5digit?5expected?$AA@ DB 'hexadecimal digi'
	DB	't expected', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CPAHLMBA@unfinished?5long?5?$CFs?5?$CIstarting?5at?5@
CONST	SEGMENT
??_C@_0CJ@CPAHLMBA@unfinished?5long?5?$CFs?5?$CIstarting?5at?5@ DB 'unfin'
	DB	'ished long %s (starting at line %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GJGNEJFD@comment?$AA@
CONST	SEGMENT
??_C@_07GJGNEJFD@comment?$AA@ DB 'comment', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICGJLFIM@string?$AA@
CONST	SEGMENT
??_C@_06ICGJLFIM@string?$AA@ DB 'string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EDDNHBKL@Pp?$AA@
CONST	SEGMENT
??_C@_02EDDNHBKL@Pp?$AA@ DB 'Pp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CIDOMIFJ@xX?$AA@
CONST	SEGMENT
??_C@_02CIDOMIFJ@xX?$AA@ DB 'xX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GOGFPGCE@Ee?$AA@
CONST	SEGMENT
??_C@_02GOGFPGCE@Ee?$AA@ DB 'Ee', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CFMNENCE@malformed?5number?$AA@
CONST	SEGMENT
??_C@_0BB@CFMNENCE@malformed?5number?$AA@ DB 'malformed number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LAKGPFF@chunk?5has?5too?5many?5lines?$AA@
CONST	SEGMENT
??_C@_0BJ@LAKGPFF@chunk?5has?5too?5many?5lines?$AA@ DB 'chunk has too man'
	DB	'y lines', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@ DB '%s near %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_04FBKCMAJG@?8?$CFs?8?$AA@ DB '''%s''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENIEGDOG@?8?$CFc?8?$AA@
CONST	SEGMENT
??_C@_04ENIEGDOG@?8?$CFc?8?$AA@ DB '''%c''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LJLBKCOP@_ENV?$AA@
CONST	SEGMENT
??_C@_04LJLBKCOP@_ENV?$AA@ DB '_ENV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@ DB 'lexical element t'
	DB	'oo long', 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT _llex
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_seminfo$ = 12						; size = 4
_llex	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 460
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 461
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; Line 463
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	40		 inc	 eax
  00014	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00017	0f 87 3c 01 00
	00		 ja	 $LN8@llex
  0001d	8d 49 00	 npad	 3
$LL56@llex:
  00020	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN96@llex[eax]
  00027	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN102@llex[eax*4]
$LN52@llex:
; Line 465
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _inclinenumber
  00034	83 c4 04	 add	 esp, 4
; Line 466
  00037	e9 11 01 00 00	 jmp	 $LN97@llex
$LN51@llex:
; Line 469
  0003c	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0003f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00041	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00044	89 01		 mov	 DWORD PTR [ecx], eax
  00046	85 d2		 test	 edx, edx
  00048	74 14		 je	 SHORT $LN59@llex
  0004a	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0004d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00050	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00053	40		 inc	 eax
  00054	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00057	89 16		 mov	 DWORD PTR [esi], edx
; Line 470
  00059	e9 ef 00 00 00	 jmp	 $LN97@llex
$LN59@llex:
; Line 469
  0005e	ff 76 38	 push	 DWORD PTR [esi+56]
  00061	e8 00 00 00 00	 call	 _luaZ_fill
  00066	8b d0		 mov	 edx, eax
  00068	83 c4 04	 add	 esp, 4
  0006b	89 16		 mov	 DWORD PTR [esi], edx
; Line 470
  0006d	e9 db 00 00 00	 jmp	 $LN97@llex
$LN50@llex:
; Line 473
  00072	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00075	8b 11		 mov	 edx, DWORD PTR [ecx]
  00077	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0007a	89 01		 mov	 DWORD PTR [ecx], eax
  0007c	85 d2		 test	 edx, edx
  0007e	74 0f		 je	 SHORT $LN61@llex
  00080	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00083	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00086	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00089	40		 inc	 eax
  0008a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0008d	eb 0d		 jmp	 SHORT $LN62@llex
$LN61@llex:
  0008f	ff 76 38	 push	 DWORD PTR [esi+56]
  00092	e8 00 00 00 00	 call	 _luaZ_fill
  00097	83 c4 04	 add	 esp, 4
  0009a	8b d0		 mov	 edx, eax
$LN62@llex:
  0009c	89 16		 mov	 DWORD PTR [esi], edx
; Line 474
  0009e	83 fa 2d	 cmp	 edx, 45			; 0000002dH
  000a1	0f 85 f8 00 00
	00		 jne	 $LN88@llex
; Line 476
  000a7	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ac	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	85 d2		 test	 edx, edx
  000b3	74 0f		 je	 SHORT $LN63@llex
  000b5	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000b8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000bb	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  000be	40		 inc	 eax
  000bf	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000c2	eb 0d		 jmp	 SHORT $LN64@llex
$LN63@llex:
  000c4	ff 76 38	 push	 DWORD PTR [esi+56]
  000c7	e8 00 00 00 00	 call	 _luaZ_fill
  000cc	83 c4 04	 add	 esp, 4
  000cf	8b d0		 mov	 edx, eax
$LN64@llex:
  000d1	89 16		 mov	 DWORD PTR [esi], edx
; Line 477
  000d3	83 fa 5b	 cmp	 edx, 91			; 0000005bH
  000d6	75 2f		 jne	 SHORT $LN86@llex
; Line 478
  000d8	56		 push	 esi
  000d9	e8 00 00 00 00	 call	 _skip_sep
; Line 479
  000de	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  000e1	83 c4 04	 add	 esp, 4
  000e4	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; Line 480
  000eb	85 c0		 test	 eax, eax
  000ed	78 18		 js	 SHORT $LN86@llex
; Line 481
  000ef	50		 push	 eax
  000f0	6a 00		 push	 0
  000f2	56		 push	 esi
  000f3	e8 00 00 00 00	 call	 _read_long_string
; Line 482
  000f8	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fe	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; Line 483
  00105	eb 46		 jmp	 SHORT $LN97@llex
$LN86@llex:
; Line 487
  00107	83 3e 0a	 cmp	 DWORD PTR [esi], 10	; 0000000aH
  0010a	74 41		 je	 SHORT $LN97@llex
  0010c	8d 64 24 00	 npad	 4
$LL46@llex:
  00110	8b 06		 mov	 eax, DWORD PTR [esi]
  00112	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00115	74 36		 je	 SHORT $LN97@llex
  00117	83 f8 ff	 cmp	 eax, -1
  0011a	74 31		 je	 SHORT $LN97@llex
; Line 488
  0011c	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0011f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00121	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00124	89 01		 mov	 DWORD PTR [ecx], eax
  00126	85 d2		 test	 edx, edx
  00128	74 0f		 je	 SHORT $LN65@llex
  0012a	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0012d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00130	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00133	40		 inc	 eax
  00134	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00137	eb 0d		 jmp	 SHORT $LN66@llex
$LN65@llex:
  00139	ff 76 38	 push	 DWORD PTR [esi+56]
  0013c	e8 00 00 00 00	 call	 _luaZ_fill
  00141	83 c4 04	 add	 esp, 4
  00144	8b d0		 mov	 edx, eax
$LN66@llex:
  00146	89 16		 mov	 DWORD PTR [esi], edx
  00148	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0014b	75 c3		 jne	 SHORT $LL46@llex
$LN97@llex:
; Line 463
  0014d	8b 06		 mov	 eax, DWORD PTR [esi]
  0014f	40		 inc	 eax
  00150	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00153	0f 86 c7 fe ff
	ff		 jbe	 $LL56@llex
$LN8@llex:
  00159	57		 push	 edi
; Line 555
  0015a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0015c	f6 87 01 00 00
	00 01		 test	 BYTE PTR _luai_ctype_[edi+1], 1
  00163	0f 84 36 03 00
	00		 je	 $LN7@llex
  00169	8d a4 24 00 00
	00 00		 npad	 7
$LL6@llex:
; Line 558
  00170	ff 36		 push	 DWORD PTR [esi]
  00172	56		 push	 esi
  00173	e8 00 00 00 00	 call	 _save
  00178	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0017b	83 c4 08	 add	 esp, 8
  0017e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00180	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00183	89 01		 mov	 DWORD PTR [ecx], eax
  00185	85 d2		 test	 edx, edx
  00187	0f 84 be 02 00
	00		 je	 $LN81@llex
  0018d	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00190	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00193	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00196	40		 inc	 eax
  00197	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0019a	e9 b9 02 00 00	 jmp	 $LN82@llex
$LN88@llex:
; Line 474
  0019f	b8 2d 00 00 00	 mov	 eax, 45			; 0000002dH
  001a4	5e		 pop	 esi
; Line 577
  001a5	5d		 pop	 ebp
  001a6	c3		 ret	 0
$LN44@llex:
; Line 492
  001a7	56		 push	 esi
  001a8	e8 00 00 00 00	 call	 _skip_sep
  001ad	83 c4 04	 add	 esp, 4
; Line 493
  001b0	85 c0		 test	 eax, eax
  001b2	78 15		 js	 SHORT $LN43@llex
; Line 494
  001b4	50		 push	 eax
  001b5	ff 75 0c	 push	 DWORD PTR _seminfo$[ebp]
  001b8	56		 push	 esi
  001b9	e8 00 00 00 00	 call	 _read_long_string
  001be	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 495
  001c1	b8 25 01 00 00	 mov	 eax, 293		; 00000125H
  001c6	5e		 pop	 esi
; Line 577
  001c7	5d		 pop	 ebp
  001c8	c3		 ret	 0
$LN43@llex:
; Line 497
  001c9	83 f8 ff	 cmp	 eax, -1
  001cc	0f 85 05 03 00
	00		 jne	 $LN100@llex
; Line 499
  001d2	b8 5b 00 00 00	 mov	 eax, 91			; 0000005bH
  001d7	5e		 pop	 esi
; Line 577
  001d8	5d		 pop	 ebp
  001d9	c3		 ret	 0
$LN40@llex:
; Line 502
  001da	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  001df	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  001e2	89 01		 mov	 DWORD PTR [ecx], eax
  001e4	85 d2		 test	 edx, edx
  001e6	74 0f		 je	 SHORT $LN67@llex
  001e8	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001eb	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001ee	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  001f1	40		 inc	 eax
  001f2	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  001f5	eb 0d		 jmp	 SHORT $LN68@llex
$LN67@llex:
  001f7	ff 76 38	 push	 DWORD PTR [esi+56]
  001fa	e8 00 00 00 00	 call	 _luaZ_fill
  001ff	83 c4 04	 add	 esp, 4
  00202	8b d0		 mov	 edx, eax
$LN68@llex:
; Line 503
  00204	6a 3d		 push	 61			; 0000003dH
  00206	56		 push	 esi
  00207	89 16		 mov	 DWORD PTR [esi], edx
  00209	e8 00 00 00 00	 call	 _check_next1
  0020e	83 c4 08	 add	 esp, 8
  00211	f7 d8		 neg	 eax
  00213	1b c0		 sbb	 eax, eax
  00215	25 dd 00 00 00	 and	 eax, 221		; 000000ddH
  0021a	83 c0 3d	 add	 eax, 61			; 0000003dH
  0021d	5e		 pop	 esi
; Line 577
  0021e	5d		 pop	 ebp
  0021f	c3		 ret	 0
$LN38@llex:
; Line 507
  00220	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00223	8b 11		 mov	 edx, DWORD PTR [ecx]
  00225	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00228	89 01		 mov	 DWORD PTR [ecx], eax
  0022a	85 d2		 test	 edx, edx
  0022c	74 0f		 je	 SHORT $LN69@llex
  0022e	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00231	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00234	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00237	40		 inc	 eax
  00238	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0023b	eb 0d		 jmp	 SHORT $LN70@llex
$LN69@llex:
  0023d	ff 76 38	 push	 DWORD PTR [esi+56]
  00240	e8 00 00 00 00	 call	 _luaZ_fill
  00245	83 c4 04	 add	 esp, 4
  00248	8b d0		 mov	 edx, eax
$LN70@llex:
; Line 508
  0024a	6a 3d		 push	 61			; 0000003dH
  0024c	56		 push	 esi
  0024d	89 16		 mov	 DWORD PTR [esi], edx
  0024f	e8 00 00 00 00	 call	 _check_next1
  00254	83 c4 08	 add	 esp, 8
  00257	85 c0		 test	 eax, eax
  00259	74 08		 je	 SHORT $LN36@llex
  0025b	b8 1c 01 00 00	 mov	 eax, 284		; 0000011cH
  00260	5e		 pop	 esi
; Line 577
  00261	5d		 pop	 ebp
  00262	c3		 ret	 0
$LN36@llex:
; Line 509
  00263	6a 3c		 push	 60			; 0000003cH
  00265	56		 push	 esi
  00266	e8 00 00 00 00	 call	 _check_next1
  0026b	83 c4 08	 add	 esp, 8
  0026e	f7 d8		 neg	 eax
  00270	1b c0		 sbb	 eax, eax
  00272	25 e2 00 00 00	 and	 eax, 226		; 000000e2H
  00277	83 c0 3c	 add	 eax, 60			; 0000003cH
  0027a	5e		 pop	 esi
; Line 577
  0027b	5d		 pop	 ebp
  0027c	c3		 ret	 0
$LN33@llex:
; Line 513
  0027d	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00280	8b 11		 mov	 edx, DWORD PTR [ecx]
  00282	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00285	89 01		 mov	 DWORD PTR [ecx], eax
  00287	85 d2		 test	 edx, edx
  00289	74 0f		 je	 SHORT $LN71@llex
  0028b	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0028e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00291	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00294	40		 inc	 eax
  00295	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00298	eb 0d		 jmp	 SHORT $LN72@llex
$LN71@llex:
  0029a	ff 76 38	 push	 DWORD PTR [esi+56]
  0029d	e8 00 00 00 00	 call	 _luaZ_fill
  002a2	83 c4 04	 add	 esp, 4
  002a5	8b d0		 mov	 edx, eax
$LN72@llex:
; Line 514
  002a7	6a 3d		 push	 61			; 0000003dH
  002a9	56		 push	 esi
  002aa	89 16		 mov	 DWORD PTR [esi], edx
  002ac	e8 00 00 00 00	 call	 _check_next1
  002b1	83 c4 08	 add	 esp, 8
  002b4	85 c0		 test	 eax, eax
  002b6	74 08		 je	 SHORT $LN31@llex
  002b8	b8 1b 01 00 00	 mov	 eax, 283		; 0000011bH
  002bd	5e		 pop	 esi
; Line 577
  002be	5d		 pop	 ebp
  002bf	c3		 ret	 0
$LN31@llex:
; Line 515
  002c0	6a 3e		 push	 62			; 0000003eH
  002c2	56		 push	 esi
  002c3	e8 00 00 00 00	 call	 _check_next1
  002c8	83 c4 08	 add	 esp, 8
  002cb	f7 d8		 neg	 eax
  002cd	1b c0		 sbb	 eax, eax
  002cf	25 e1 00 00 00	 and	 eax, 225		; 000000e1H
  002d4	83 c0 3e	 add	 eax, 62			; 0000003eH
  002d7	5e		 pop	 esi
; Line 577
  002d8	5d		 pop	 ebp
  002d9	c3		 ret	 0
$LN28@llex:
; Line 519
  002da	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  002dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  002df	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  002e2	89 01		 mov	 DWORD PTR [ecx], eax
  002e4	85 d2		 test	 edx, edx
  002e6	74 0f		 je	 SHORT $LN73@llex
  002e8	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  002eb	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002ee	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  002f1	40		 inc	 eax
  002f2	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  002f5	eb 0d		 jmp	 SHORT $LN74@llex
$LN73@llex:
  002f7	ff 76 38	 push	 DWORD PTR [esi+56]
  002fa	e8 00 00 00 00	 call	 _luaZ_fill
  002ff	83 c4 04	 add	 esp, 4
  00302	8b d0		 mov	 edx, eax
$LN74@llex:
; Line 520
  00304	6a 2f		 push	 47			; 0000002fH
  00306	56		 push	 esi
  00307	89 16		 mov	 DWORD PTR [esi], edx
  00309	e8 00 00 00 00	 call	 _check_next1
  0030e	83 c4 08	 add	 esp, 8
  00311	f7 d8		 neg	 eax
  00313	1b c0		 sbb	 eax, eax
  00315	25 e8 00 00 00	 and	 eax, 232		; 000000e8H
  0031a	83 c0 2f	 add	 eax, 47			; 0000002fH
  0031d	5e		 pop	 esi
; Line 577
  0031e	5d		 pop	 ebp
  0031f	c3		 ret	 0
$LN25@llex:
; Line 524
  00320	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00323	8b 11		 mov	 edx, DWORD PTR [ecx]
  00325	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00328	89 01		 mov	 DWORD PTR [ecx], eax
  0032a	85 d2		 test	 edx, edx
  0032c	74 0f		 je	 SHORT $LN75@llex
  0032e	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00331	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00334	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00337	40		 inc	 eax
  00338	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0033b	eb 0d		 jmp	 SHORT $LN76@llex
$LN75@llex:
  0033d	ff 76 38	 push	 DWORD PTR [esi+56]
  00340	e8 00 00 00 00	 call	 _luaZ_fill
  00345	83 c4 04	 add	 esp, 4
  00348	8b d0		 mov	 edx, eax
$LN76@llex:
; Line 525
  0034a	6a 3d		 push	 61			; 0000003dH
  0034c	56		 push	 esi
  0034d	89 16		 mov	 DWORD PTR [esi], edx
  0034f	e8 00 00 00 00	 call	 _check_next1
  00354	83 c4 08	 add	 esp, 8
  00357	f7 d8		 neg	 eax
  00359	1b c0		 sbb	 eax, eax
  0035b	25 9f 00 00 00	 and	 eax, 159		; 0000009fH
  00360	83 c0 7e	 add	 eax, 126		; 0000007eH
  00363	5e		 pop	 esi
; Line 577
  00364	5d		 pop	 ebp
  00365	c3		 ret	 0
$LN22@llex:
; Line 529
  00366	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00369	8b 11		 mov	 edx, DWORD PTR [ecx]
  0036b	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0036e	89 01		 mov	 DWORD PTR [ecx], eax
  00370	85 d2		 test	 edx, edx
  00372	74 0f		 je	 SHORT $LN77@llex
  00374	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00377	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0037a	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  0037d	40		 inc	 eax
  0037e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00381	eb 0d		 jmp	 SHORT $LN78@llex
$LN77@llex:
  00383	ff 76 38	 push	 DWORD PTR [esi+56]
  00386	e8 00 00 00 00	 call	 _luaZ_fill
  0038b	83 c4 04	 add	 esp, 4
  0038e	8b d0		 mov	 edx, eax
$LN78@llex:
; Line 530
  00390	6a 3a		 push	 58			; 0000003aH
  00392	56		 push	 esi
  00393	89 16		 mov	 DWORD PTR [esi], edx
  00395	e8 00 00 00 00	 call	 _check_next1
  0039a	83 c4 08	 add	 esp, 8
  0039d	f7 d8		 neg	 eax
  0039f	1b c0		 sbb	 eax, eax
  003a1	25 e6 00 00 00	 and	 eax, 230		; 000000e6H
  003a6	83 c0 3a	 add	 eax, 58			; 0000003aH
  003a9	5e		 pop	 esi
; Line 577
  003aa	5d		 pop	 ebp
  003ab	c3		 ret	 0
$LN19@llex:
; Line 534
  003ac	ff 75 0c	 push	 DWORD PTR _seminfo$[ebp]
  003af	ff 36		 push	 DWORD PTR [esi]
  003b1	56		 push	 esi
  003b2	e8 00 00 00 00	 call	 _read_string
  003b7	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 535
  003ba	b8 25 01 00 00	 mov	 eax, 293		; 00000125H
  003bf	5e		 pop	 esi
; Line 577
  003c0	5d		 pop	 ebp
  003c1	c3		 ret	 0
$LN17@llex:
; Line 538
  003c2	ff 36		 push	 DWORD PTR [esi]
  003c4	56		 push	 esi
  003c5	e8 00 00 00 00	 call	 _save
  003ca	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  003cd	83 c4 08	 add	 esp, 8
  003d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  003d2	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  003d5	89 01		 mov	 DWORD PTR [ecx], eax
  003d7	85 d2		 test	 edx, edx
  003d9	74 0f		 je	 SHORT $LN79@llex
  003db	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  003de	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  003e1	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  003e4	40		 inc	 eax
  003e5	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  003e8	eb 0d		 jmp	 SHORT $LN80@llex
$LN79@llex:
  003ea	ff 76 38	 push	 DWORD PTR [esi+56]
  003ed	e8 00 00 00 00	 call	 _luaZ_fill
  003f2	83 c4 04	 add	 esp, 4
  003f5	8b d0		 mov	 edx, eax
$LN80@llex:
; Line 539
  003f7	6a 2e		 push	 46			; 0000002eH
  003f9	56		 push	 esi
  003fa	89 16		 mov	 DWORD PTR [esi], edx
  003fc	e8 00 00 00 00	 call	 _check_next1
  00401	83 c4 08	 add	 esp, 8
  00404	85 c0		 test	 eax, eax
  00406	74 19		 je	 SHORT $LN16@llex
; Line 540
  00408	6a 2e		 push	 46			; 0000002eH
  0040a	56		 push	 esi
  0040b	e8 00 00 00 00	 call	 _check_next1
  00410	83 c4 08	 add	 esp, 8
  00413	f7 d8		 neg	 eax
  00415	1b c0		 sbb	 eax, eax
  00417	f7 d8		 neg	 eax
  00419	05 18 01 00 00	 add	 eax, 280		; 00000118H
  0041e	5e		 pop	 esi
; Line 577
  0041f	5d		 pop	 ebp
  00420	c3		 ret	 0
$LN16@llex:
; Line 544
  00421	8b 06		 mov	 eax, DWORD PTR [esi]
  00423	f6 80 01 00 00
	00 02		 test	 BYTE PTR _luai_ctype_[eax+1], 2
  0042a	75 08		 jne	 SHORT $LN12@llex
  0042c	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  00431	5e		 pop	 esi
; Line 577
  00432	5d		 pop	 ebp
  00433	c3		 ret	 0
$LN12@llex:
; Line 545
  00434	ff 75 0c	 push	 DWORD PTR _seminfo$[ebp]
  00437	56		 push	 esi
  00438	e8 00 00 00 00	 call	 _read_numeral
  0043d	83 c4 08	 add	 esp, 8
  00440	5e		 pop	 esi
; Line 577
  00441	5d		 pop	 ebp
  00442	c3		 ret	 0
$LN9@llex:
; Line 552
  00443	b8 21 01 00 00	 mov	 eax, 289		; 00000121H
  00448	5e		 pop	 esi
; Line 577
  00449	5d		 pop	 ebp
  0044a	c3		 ret	 0
$LN81@llex:
; Line 558
  0044b	ff 76 38	 push	 DWORD PTR [esi+56]
  0044e	e8 00 00 00 00	 call	 _luaZ_fill
  00453	83 c4 04	 add	 esp, 4
  00456	8b d0		 mov	 edx, eax
$LN82@llex:
  00458	89 16		 mov	 DWORD PTR [esi], edx
; Line 559
  0045a	f6 82 01 00 00
	00 03		 test	 BYTE PTR _luai_ctype_[edx+1], 3
  00461	0f 85 09 fd ff
	ff		 jne	 $LL6@llex
; Line 561
  00467	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0046a	ff 70 04	 push	 DWORD PTR [eax+4]
  0046d	ff 30		 push	 DWORD PTR [eax]
  0046f	56		 push	 esi
  00470	e8 00 00 00 00	 call	 _luaX_newstring
; Line 562
  00475	8b 4d 0c	 mov	 ecx, DWORD PTR _seminfo$[ebp]
  00478	83 c4 0c	 add	 esp, 12			; 0000000cH
  0047b	89 01		 mov	 DWORD PTR [ecx], eax
; Line 563
  0047d	80 78 04 04	 cmp	 BYTE PTR [eax+4], 4
  00481	75 13		 jne	 SHORT $LN3@llex
  00483	8a 40 06	 mov	 al, BYTE PTR [eax+6]
  00486	84 c0		 test	 al, al
  00488	74 0c		 je	 SHORT $LN3@llex
; Line 564
  0048a	0f b6 c0	 movzx	 eax, al
  0048d	5f		 pop	 edi
  0048e	05 00 01 00 00	 add	 eax, 256		; 00000100H
  00493	5e		 pop	 esi
; Line 577
  00494	5d		 pop	 ebp
  00495	c3		 ret	 0
$LN3@llex:
  00496	5f		 pop	 edi
; Line 566
  00497	b8 24 01 00 00	 mov	 eax, 292		; 00000124H
  0049c	5e		 pop	 esi
; Line 577
  0049d	5d		 pop	 ebp
  0049e	c3		 ret	 0
$LN7@llex:
; Line 571
  0049f	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  004a2	8b 11		 mov	 edx, DWORD PTR [ecx]
  004a4	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  004a7	89 01		 mov	 DWORD PTR [ecx], eax
  004a9	85 d2		 test	 edx, edx
  004ab	74 15		 je	 SHORT $LN83@llex
  004ad	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  004b0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  004b3	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  004b6	40		 inc	 eax
  004b7	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; Line 572
  004ba	8b c7		 mov	 eax, edi
  004bc	5f		 pop	 edi
  004bd	89 16		 mov	 DWORD PTR [esi], edx
  004bf	5e		 pop	 esi
; Line 577
  004c0	5d		 pop	 ebp
  004c1	c3		 ret	 0
$LN83@llex:
; Line 571
  004c2	ff 76 38	 push	 DWORD PTR [esi+56]
  004c5	e8 00 00 00 00	 call	 _luaZ_fill
  004ca	83 c4 04	 add	 esp, 4
  004cd	8b d0		 mov	 edx, eax
; Line 572
  004cf	8b c7		 mov	 eax, edi
  004d1	89 16		 mov	 DWORD PTR [esi], edx
  004d3	5f		 pop	 edi
  004d4	5e		 pop	 esi
; Line 577
  004d5	5d		 pop	 ebp
  004d6	c3		 ret	 0
$LN100@llex:
; Line 498
  004d7	68 25 01 00 00	 push	 293			; 00000125H
  004dc	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DBNLNIBP@invalid?5long?5string?5delimiter?$AA@
  004e1	56		 push	 esi
  004e2	e8 00 00 00 00	 call	 _lexerror
$LN103@llex:
$LN99@llex:
  004e7	90		 npad	 1
$LN102@llex:
; Line 577
  004e8	00 00 00 00	 DD	 $LN9@llex
  004ec	00 00 00 00	 DD	 $LN51@llex
  004f0	00 00 00 00	 DD	 $LN52@llex
  004f4	00 00 00 00	 DD	 $LN19@llex
  004f8	00 00 00 00	 DD	 $LN50@llex
  004fc	00 00 00 00	 DD	 $LN17@llex
  00500	00 00 00 00	 DD	 $LN28@llex
  00504	00 00 00 00	 DD	 $LN12@llex
  00508	00 00 00 00	 DD	 $LN22@llex
  0050c	00 00 00 00	 DD	 $LN38@llex
  00510	00 00 00 00	 DD	 $LN40@llex
  00514	00 00 00 00	 DD	 $LN33@llex
  00518	00 00 00 00	 DD	 $LN44@llex
  0051c	00 00 00 00	 DD	 $LN25@llex
  00520	00 00 00 00	 DD	 $LN8@llex
$LN96@llex:
  00524	00		 DB	 0
  00525	0e		 DB	 14			; 0000000eH
  00526	0e		 DB	 14			; 0000000eH
  00527	0e		 DB	 14			; 0000000eH
  00528	0e		 DB	 14			; 0000000eH
  00529	0e		 DB	 14			; 0000000eH
  0052a	0e		 DB	 14			; 0000000eH
  0052b	0e		 DB	 14			; 0000000eH
  0052c	0e		 DB	 14			; 0000000eH
  0052d	0e		 DB	 14			; 0000000eH
  0052e	01		 DB	 1
  0052f	02		 DB	 2
  00530	01		 DB	 1
  00531	01		 DB	 1
  00532	02		 DB	 2
  00533	0e		 DB	 14			; 0000000eH
  00534	0e		 DB	 14			; 0000000eH
  00535	0e		 DB	 14			; 0000000eH
  00536	0e		 DB	 14			; 0000000eH
  00537	0e		 DB	 14			; 0000000eH
  00538	0e		 DB	 14			; 0000000eH
  00539	0e		 DB	 14			; 0000000eH
  0053a	0e		 DB	 14			; 0000000eH
  0053b	0e		 DB	 14			; 0000000eH
  0053c	0e		 DB	 14			; 0000000eH
  0053d	0e		 DB	 14			; 0000000eH
  0053e	0e		 DB	 14			; 0000000eH
  0053f	0e		 DB	 14			; 0000000eH
  00540	0e		 DB	 14			; 0000000eH
  00541	0e		 DB	 14			; 0000000eH
  00542	0e		 DB	 14			; 0000000eH
  00543	0e		 DB	 14			; 0000000eH
  00544	0e		 DB	 14			; 0000000eH
  00545	01		 DB	 1
  00546	0e		 DB	 14			; 0000000eH
  00547	03		 DB	 3
  00548	0e		 DB	 14			; 0000000eH
  00549	0e		 DB	 14			; 0000000eH
  0054a	0e		 DB	 14			; 0000000eH
  0054b	0e		 DB	 14			; 0000000eH
  0054c	03		 DB	 3
  0054d	0e		 DB	 14			; 0000000eH
  0054e	0e		 DB	 14			; 0000000eH
  0054f	0e		 DB	 14			; 0000000eH
  00550	0e		 DB	 14			; 0000000eH
  00551	0e		 DB	 14			; 0000000eH
  00552	04		 DB	 4
  00553	05		 DB	 5
  00554	06		 DB	 6
  00555	07		 DB	 7
  00556	07		 DB	 7
  00557	07		 DB	 7
  00558	07		 DB	 7
  00559	07		 DB	 7
  0055a	07		 DB	 7
  0055b	07		 DB	 7
  0055c	07		 DB	 7
  0055d	07		 DB	 7
  0055e	07		 DB	 7
  0055f	08		 DB	 8
  00560	0e		 DB	 14			; 0000000eH
  00561	09		 DB	 9
  00562	0a		 DB	 10			; 0000000aH
  00563	0b		 DB	 11			; 0000000bH
  00564	0e		 DB	 14			; 0000000eH
  00565	0e		 DB	 14			; 0000000eH
  00566	0e		 DB	 14			; 0000000eH
  00567	0e		 DB	 14			; 0000000eH
  00568	0e		 DB	 14			; 0000000eH
  00569	0e		 DB	 14			; 0000000eH
  0056a	0e		 DB	 14			; 0000000eH
  0056b	0e		 DB	 14			; 0000000eH
  0056c	0e		 DB	 14			; 0000000eH
  0056d	0e		 DB	 14			; 0000000eH
  0056e	0e		 DB	 14			; 0000000eH
  0056f	0e		 DB	 14			; 0000000eH
  00570	0e		 DB	 14			; 0000000eH
  00571	0e		 DB	 14			; 0000000eH
  00572	0e		 DB	 14			; 0000000eH
  00573	0e		 DB	 14			; 0000000eH
  00574	0e		 DB	 14			; 0000000eH
  00575	0e		 DB	 14			; 0000000eH
  00576	0e		 DB	 14			; 0000000eH
  00577	0e		 DB	 14			; 0000000eH
  00578	0e		 DB	 14			; 0000000eH
  00579	0e		 DB	 14			; 0000000eH
  0057a	0e		 DB	 14			; 0000000eH
  0057b	0e		 DB	 14			; 0000000eH
  0057c	0e		 DB	 14			; 0000000eH
  0057d	0e		 DB	 14			; 0000000eH
  0057e	0e		 DB	 14			; 0000000eH
  0057f	0e		 DB	 14			; 0000000eH
  00580	0c		 DB	 12			; 0000000cH
  00581	0e		 DB	 14			; 0000000eH
  00582	0e		 DB	 14			; 0000000eH
  00583	0e		 DB	 14			; 0000000eH
  00584	0e		 DB	 14			; 0000000eH
  00585	0e		 DB	 14			; 0000000eH
  00586	0e		 DB	 14			; 0000000eH
  00587	0e		 DB	 14			; 0000000eH
  00588	0e		 DB	 14			; 0000000eH
  00589	0e		 DB	 14			; 0000000eH
  0058a	0e		 DB	 14			; 0000000eH
  0058b	0e		 DB	 14			; 0000000eH
  0058c	0e		 DB	 14			; 0000000eH
  0058d	0e		 DB	 14			; 0000000eH
  0058e	0e		 DB	 14			; 0000000eH
  0058f	0e		 DB	 14			; 0000000eH
  00590	0e		 DB	 14			; 0000000eH
  00591	0e		 DB	 14			; 0000000eH
  00592	0e		 DB	 14			; 0000000eH
  00593	0e		 DB	 14			; 0000000eH
  00594	0e		 DB	 14			; 0000000eH
  00595	0e		 DB	 14			; 0000000eH
  00596	0e		 DB	 14			; 0000000eH
  00597	0e		 DB	 14			; 0000000eH
  00598	0e		 DB	 14			; 0000000eH
  00599	0e		 DB	 14			; 0000000eH
  0059a	0e		 DB	 14			; 0000000eH
  0059b	0e		 DB	 14			; 0000000eH
  0059c	0e		 DB	 14			; 0000000eH
  0059d	0e		 DB	 14			; 0000000eH
  0059e	0e		 DB	 14			; 0000000eH
  0059f	0e		 DB	 14			; 0000000eH
  005a0	0e		 DB	 14			; 0000000eH
  005a1	0e		 DB	 14			; 0000000eH
  005a2	0e		 DB	 14			; 0000000eH
  005a3	0d		 DB	 13			; 0000000dH
_llex	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _read_string
_TEXT	SEGMENT
_c$1$ = 8						; size = 4
_b$1$ = 8						; size = 4
_b$1$ = 8						; size = 4
_ls$ = 8						; size = 4
_del$ = 12						; size = 4
_seminfo$ = 16						; size = 4
_read_string PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 397
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 398
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	ff 36		 push	 DWORD PTR [esi]
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _save
  0000f	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00012	83 c4 08	 add	 esp, 8
  00015	8b 11		 mov	 edx, DWORD PTR [ecx]
  00017	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0001a	89 01		 mov	 DWORD PTR [ecx], eax
  0001c	85 d2		 test	 edx, edx
  0001e	74 0f		 je	 SHORT $LN32@read_strin
  00020	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00023	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00026	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00029	40		 inc	 eax
  0002a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002d	eb 0d		 jmp	 SHORT $LN33@read_strin
$LN32@read_strin:
  0002f	ff 76 38	 push	 DWORD PTR [esi+56]
  00032	e8 00 00 00 00	 call	 _luaZ_fill
  00037	83 c4 04	 add	 esp, 4
  0003a	8b d0		 mov	 edx, eax
$LN33@read_strin:
  0003c	89 16		 mov	 DWORD PTR [esi], edx
; Line 399
  0003e	3b 55 0c	 cmp	 edx, DWORD PTR _del$[ebp]
  00041	0f 84 c0 02 00
	00		 je	 $LN125@read_strin
  00047	53		 push	 ebx
  00048	57		 push	 edi
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL29@read_strin:
; Line 400
  00050	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00052	89 5d 08	 mov	 DWORD PTR _c$1$[ebp], ebx
  00055	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00058	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  0005b	0f 87 2e 02 00
	00		 ja	 $LN1@read_strin
  00061	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN126@read_strin[eax]
  00068	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN133@read_strin[eax*4]
$LN23@read_strin:
; Line 410
  0006f	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  00072	89 55 08	 mov	 DWORD PTR _b$1$[ebp], edx
  00075	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00078	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0007b	40		 inc	 eax
  0007c	3b c1		 cmp	 eax, ecx
  0007e	76 26		 jbe	 SHORT $LN47@read_strin
  00080	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00086	0f 83 01 03 00
	00		 jae	 $LN132@read_strin
  0008c	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  0008f	57		 push	 edi
  00090	51		 push	 ecx
  00091	ff 32		 push	 DWORD PTR [edx]
  00093	ff 76 34	 push	 DWORD PTR [esi+52]
  00096	e8 00 00 00 00	 call	 _luaM_realloc_
  0009b	8b 55 08	 mov	 edx, DWORD PTR _b$1$[ebp]
  0009e	83 c4 10	 add	 esp, 16			; 00000010H
  000a1	89 02		 mov	 DWORD PTR [edx], eax
  000a3	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN47@read_strin:
  000a6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000a9	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000ab	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  000ae	ff 42 04	 inc	 DWORD PTR [edx+4]
  000b1	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000b4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b6	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  000b9	89 01		 mov	 DWORD PTR [ecx], eax
  000bb	85 d2		 test	 edx, edx
  000bd	74 0f		 je	 SHORT $LN34@read_strin
  000bf	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000c2	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000c5	0f b6 18	 movzx	 ebx, BYTE PTR [eax]
  000c8	40		 inc	 eax
  000c9	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000cc	eb 0d		 jmp	 SHORT $LN35@read_strin
$LN34@read_strin:
  000ce	ff 76 38	 push	 DWORD PTR [esi+56]
  000d1	e8 00 00 00 00	 call	 _luaZ_fill
  000d6	83 c4 04	 add	 esp, 4
  000d9	8b d8		 mov	 ebx, eax
$LN35@read_strin:
; Line 411
  000db	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000de	89 1e		 mov	 DWORD PTR [esi], ebx
  000e0	83 f8 7b	 cmp	 eax, 123		; 0000007bH
  000e3	0f 87 44 01 00
	00		 ja	 $LN2@read_strin
  000e9	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN127@read_strin[eax]
  000f0	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN134@read_strin[eax*4]
$LN20@read_strin:
; Line 412
  000f7	bb 07 00 00 00	 mov	 ebx, 7
$read_save$139:
; Line 442
  000fc	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00101	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00104	89 01		 mov	 DWORD PTR [ecx], eax
  00106	85 d2		 test	 edx, edx
  00108	74 7b		 je	 SHORT $LN40@read_strin
  0010a	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0010d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00110	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00113	40		 inc	 eax
  00114	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00117	89 16		 mov	 DWORD PTR [esi], edx
  00119	e9 27 01 00 00	 jmp	 $only_save$140
$LN19@read_strin:
; Line 413
  0011e	bb 08 00 00 00	 mov	 ebx, 8
  00123	eb d7		 jmp	 SHORT $read_save$139
$LN18@read_strin:
; Line 414
  00125	bb 0c 00 00 00	 mov	 ebx, 12			; 0000000cH
  0012a	eb d0		 jmp	 SHORT $read_save$139
$LN17@read_strin:
; Line 415
  0012c	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH
  00131	eb c9		 jmp	 SHORT $read_save$139
$LN16@read_strin:
; Line 416
  00133	bb 0d 00 00 00	 mov	 ebx, 13			; 0000000dH
  00138	eb c2		 jmp	 SHORT $read_save$139
$LN15@read_strin:
; Line 417
  0013a	bb 09 00 00 00	 mov	 ebx, 9
  0013f	eb bb		 jmp	 SHORT $read_save$139
$LN14@read_strin:
; Line 418
  00141	bb 0b 00 00 00	 mov	 ebx, 11			; 0000000bH
  00146	eb b4		 jmp	 SHORT $read_save$139
$LN13@read_strin:
; Line 419
  00148	56		 push	 esi
  00149	e8 00 00 00 00	 call	 _gethexa
  0014e	56		 push	 esi
  0014f	8b d8		 mov	 ebx, eax
  00151	e8 00 00 00 00	 call	 _gethexa
  00156	c1 e3 04	 shl	 ebx, 4
  00159	83 c4 08	 add	 esp, 8
  0015c	03 d8		 add	 ebx, eax
  0015e	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00161	83 40 04 fe	 add	 DWORD PTR [eax+4], -2	; fffffffeH
  00165	eb 95		 jmp	 SHORT $read_save$139
$LN12@read_strin:
; Line 420
  00167	56		 push	 esi
  00168	e8 00 00 00 00	 call	 _utf8esc
  0016d	83 c4 04	 add	 esp, 4
  00170	e9 85 01 00 00	 jmp	 $LN26@read_strin
$LN11@read_strin:
; Line 422
  00175	56		 push	 esi
  00176	e8 00 00 00 00	 call	 _inclinenumber
  0017b	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH
  00180	e9 bd 00 00 00	 jmp	 $LN131@read_strin
$LN40@read_strin:
; Line 442
  00185	ff 76 38	 push	 DWORD PTR [esi+56]
  00188	e8 00 00 00 00	 call	 _luaZ_fill
  0018d	8b d0		 mov	 edx, eax
  0018f	83 c4 04	 add	 esp, 4
  00192	89 16		 mov	 DWORD PTR [esi], edx
  00194	e9 ac 00 00 00	 jmp	 $only_save$140
$LN8@read_strin:
; Line 427
  00199	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0019c	ff 48 04	 dec	 DWORD PTR [eax+4]
; Line 428
  0019f	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001a2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a4	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  001a7	89 01		 mov	 DWORD PTR [ecx], eax
  001a9	85 d2		 test	 edx, edx
  001ab	74 0f		 je	 SHORT $LN36@read_strin
  001ad	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001b0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001b3	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  001b6	40		 inc	 eax
  001b7	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  001ba	eb 0d		 jmp	 SHORT $LN37@read_strin
$LN36@read_strin:
  001bc	ff 76 38	 push	 DWORD PTR [esi+56]
  001bf	e8 00 00 00 00	 call	 _luaZ_fill
  001c4	83 c4 04	 add	 esp, 4
  001c7	8b d0		 mov	 edx, eax
$LN37@read_strin:
  001c9	89 16		 mov	 DWORD PTR [esi], edx
; Line 429
  001cb	f6 82 01 00 00
	00 08		 test	 BYTE PTR _luai_ctype_[edx+1], 8
  001d2	0f 84 22 01 00
	00		 je	 $LN26@read_strin
$LL7@read_strin:
; Line 430
  001d8	8b 06		 mov	 eax, DWORD PTR [esi]
  001da	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  001dd	74 35		 je	 SHORT $LN4@read_strin
  001df	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  001e2	74 30		 je	 SHORT $LN4@read_strin
; Line 431
  001e4	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e9	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  001ec	89 01		 mov	 DWORD PTR [ecx], eax
  001ee	85 d2		 test	 edx, edx
  001f0	74 11		 je	 SHORT $LN38@read_strin
  001f2	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  001fb	40		 inc	 eax
  001fc	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  001ff	89 16		 mov	 DWORD PTR [esi], edx
  00201	eb 1a		 jmp	 SHORT $LN3@read_strin
$LN38@read_strin:
  00203	ff 76 38	 push	 DWORD PTR [esi+56]
  00206	e8 00 00 00 00	 call	 _luaZ_fill
  0020b	8b d0		 mov	 edx, eax
  0020d	83 c4 04	 add	 esp, 4
  00210	89 16		 mov	 DWORD PTR [esi], edx
  00212	eb 09		 jmp	 SHORT $LN3@read_strin
$LN4@read_strin:
; Line 430
  00214	56		 push	 esi
  00215	e8 00 00 00 00	 call	 _inclinenumber
  0021a	83 c4 04	 add	 esp, 4
$LN3@read_strin:
; Line 429
  0021d	8b 06		 mov	 eax, DWORD PTR [esi]
  0021f	f6 80 01 00 00
	00 08		 test	 BYTE PTR _luai_ctype_[eax+1], 8
  00226	75 b0		 jne	 SHORT $LL7@read_strin
; Line 433
  00228	e9 cd 00 00 00	 jmp	 $LN26@read_strin
$LN2@read_strin:
; Line 436
  0022d	f6 83 01 00 00
	00 02		 test	 BYTE PTR _luai_ctype_[ebx+1], 2
  00234	0f 84 f5 00 00
	00		 je	 $LN118@read_strin
; Line 437
  0023a	56		 push	 esi
  0023b	e8 00 00 00 00	 call	 _readdecesc
  00240	8b d8		 mov	 ebx, eax
$LN131@read_strin:
  00242	83 c4 04	 add	 esp, 4
$only_save$140:
; Line 445
  00245	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00248	ff 49 04	 dec	 DWORD PTR [ecx+4]
; Line 446
  0024b	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  0024e	89 55 08	 mov	 DWORD PTR _b$1$[ebp], edx
  00251	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00254	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00257	40		 inc	 eax
  00258	3b c1		 cmp	 eax, ecx
  0025a	76 26		 jbe	 SHORT $LN76@read_strin
  0025c	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00262	0f 83 25 01 00
	00		 jae	 $LN132@read_strin
  00268	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  0026b	57		 push	 edi
  0026c	51		 push	 ecx
  0026d	ff 32		 push	 DWORD PTR [edx]
  0026f	ff 76 34	 push	 DWORD PTR [esi+52]
  00272	e8 00 00 00 00	 call	 _luaM_realloc_
  00277	8b 55 08	 mov	 edx, DWORD PTR _b$1$[ebp]
  0027a	83 c4 10	 add	 esp, 16			; 00000010H
  0027d	89 02		 mov	 DWORD PTR [edx], eax
  0027f	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN76@read_strin:
  00282	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00285	8b 02		 mov	 eax, DWORD PTR [edx]
$no_save$141:
  00287	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0028a	ff 42 04	 inc	 DWORD PTR [edx+4]
; Line 448
  0028d	eb 6b		 jmp	 SHORT $LN26@read_strin
$LN1@read_strin:
; Line 451
  0028f	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]
  00292	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00295	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00298	40		 inc	 eax
  00299	3b c1		 cmp	 eax, ecx
  0029b	76 23		 jbe	 SHORT $LN96@read_strin
  0029d	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  002a3	0f 83 e4 00 00
	00		 jae	 $LN132@read_strin
  002a9	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  002ac	57		 push	 edi
  002ad	51		 push	 ecx
  002ae	ff 33		 push	 DWORD PTR [ebx]
  002b0	ff 76 34	 push	 DWORD PTR [esi+52]
  002b3	e8 00 00 00 00	 call	 _luaM_realloc_
  002b8	83 c4 10	 add	 esp, 16			; 00000010H
  002bb	89 03		 mov	 DWORD PTR [ebx], eax
  002bd	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
$LN96@read_strin:
  002c0	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  002c3	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  002c5	8b 55 08	 mov	 edx, DWORD PTR _c$1$[ebp]
  002c8	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  002cb	ff 43 04	 inc	 DWORD PTR [ebx+4]
  002ce	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  002d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  002d3	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  002d6	89 01		 mov	 DWORD PTR [ecx], eax
  002d8	85 d2		 test	 edx, edx
  002da	74 0f		 je	 SHORT $LN42@read_strin
  002dc	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  002df	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002e2	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  002e5	40		 inc	 eax
  002e6	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  002e9	eb 0d		 jmp	 SHORT $LN43@read_strin
$LN42@read_strin:
  002eb	ff 76 38	 push	 DWORD PTR [esi+56]
  002ee	e8 00 00 00 00	 call	 _luaZ_fill
  002f3	83 c4 04	 add	 esp, 4
  002f6	8b d0		 mov	 edx, eax
$LN43@read_strin:
  002f8	89 16		 mov	 DWORD PTR [esi], edx
$LN26@read_strin:
; Line 399
  002fa	8b 45 0c	 mov	 eax, DWORD PTR _del$[ebp]
  002fd	39 06		 cmp	 DWORD PTR [esi], eax
  002ff	0f 85 4b fd ff
	ff		 jne	 $LL29@read_strin
  00305	5f		 pop	 edi
  00306	5b		 pop	 ebx
$LN125@read_strin:
; Line 454
  00307	ff 36		 push	 DWORD PTR [esi]
  00309	56		 push	 esi
  0030a	e8 00 00 00 00	 call	 _save
  0030f	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00312	83 c4 08	 add	 esp, 8
  00315	8b 11		 mov	 edx, DWORD PTR [ecx]
  00317	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0031a	89 01		 mov	 DWORD PTR [ecx], eax
  0031c	85 d2		 test	 edx, edx
  0031e	74 3f		 je	 SHORT $LN44@read_strin
  00320	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00323	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00326	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00329	40		 inc	 eax
  0032a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0032d	eb 3d		 jmp	 SHORT $LN45@read_strin
$LN118@read_strin:
; Line 436
  0032f	83 fb ff	 cmp	 ebx, -1
  00332	0f 84 84 00 00
	00		 je	 $LN69@read_strin
  00338	53		 push	 ebx
  00339	56		 push	 esi
  0033a	e8 00 00 00 00	 call	 _save
  0033f	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00342	83 c4 08	 add	 esp, 8
  00345	8b 11		 mov	 edx, DWORD PTR [ecx]
  00347	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0034a	89 01		 mov	 DWORD PTR [ecx], eax
  0034c	85 d2		 test	 edx, edx
  0034e	74 5d		 je	 SHORT $LN73@read_strin
  00350	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00353	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00356	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00359	40		 inc	 eax
  0035a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0035d	eb 5b		 jmp	 SHORT $LN74@read_strin
$LN44@read_strin:
; Line 454
  0035f	ff 76 38	 push	 DWORD PTR [esi+56]
  00362	e8 00 00 00 00	 call	 _luaZ_fill
  00367	83 c4 04	 add	 esp, 4
  0036a	8b d0		 mov	 edx, eax
$LN45@read_strin:
; Line 456
  0036c	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  0036f	89 16		 mov	 DWORD PTR [esi], edx
  00371	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00374	83 e8 02	 sub	 eax, 2
  00377	50		 push	 eax
  00378	8b 01		 mov	 eax, DWORD PTR [ecx]
  0037a	40		 inc	 eax
  0037b	50		 push	 eax
  0037c	56		 push	 esi
  0037d	e8 00 00 00 00	 call	 _luaX_newstring
  00382	8b 4d 10	 mov	 ecx, DWORD PTR _seminfo$[ebp]
  00385	83 c4 0c	 add	 esp, 12			; 0000000cH
  00388	89 01		 mov	 DWORD PTR [ecx], eax
  0038a	5e		 pop	 esi
; Line 457
  0038b	5d		 pop	 ebp
  0038c	c3		 ret	 0
$LN132@read_strin:
; Line 410
  0038d	ff 76 04	 push	 DWORD PTR [esi+4]
  00390	ff 76 48	 push	 DWORD PTR [esi+72]
  00393	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
  00398	ff 76 34	 push	 DWORD PTR [esi+52]
  0039b	e8 00 00 00 00	 call	 _luaG_addinfo
  003a0	83 c4 10	 add	 esp, 16			; 00000010H
  003a3	6a 03		 push	 3
  003a5	ff 76 34	 push	 DWORD PTR [esi+52]
  003a8	e8 00 00 00 00	 call	 _luaD_throw
$LN135@read_strin:
; Line 436
$LN73@read_strin:
  003ad	ff 76 38	 push	 DWORD PTR [esi+56]
  003b0	e8 00 00 00 00	 call	 _luaZ_fill
  003b5	83 c4 04	 add	 esp, 4
  003b8	8b d0		 mov	 edx, eax
$LN74@read_strin:
  003ba	89 16		 mov	 DWORD PTR [esi], edx
$LN69@read_strin:
  003bc	68 25 01 00 00	 push	 293			; 00000125H
  003c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@HGMIJEDD@invalid?5escape?5sequence?$AA@
  003c6	56		 push	 esi
  003c7	e8 00 00 00 00	 call	 _lexerror
$LN136@read_strin:
$LN25@read_strin:
; Line 402
  003cc	68 21 01 00 00	 push	 289			; 00000121H
  003d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IBAFBKML@unfinished?5string?$AA@
  003d6	56		 push	 esi
  003d7	e8 00 00 00 00	 call	 _lexerror
$LN137@read_strin:
$LN24@read_strin:
; Line 406
  003dc	68 25 01 00 00	 push	 293			; 00000125H
  003e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IBAFBKML@unfinished?5string?$AA@
  003e6	56		 push	 esi
  003e7	e8 00 00 00 00	 call	 _lexerror
$LN138@read_strin:
$LN130@read_strin:
$LN133@read_strin:
; Line 457
  003ec	00 00 00 00	 DD	 $LN25@read_strin
  003f0	00 00 00 00	 DD	 $LN24@read_strin
  003f4	00 00 00 00	 DD	 $LN23@read_strin
  003f8	00 00 00 00	 DD	 $LN1@read_strin
$LN126@read_strin:
  003fc	00		 DB	 0
  003fd	03		 DB	 3
  003fe	03		 DB	 3
  003ff	03		 DB	 3
  00400	03		 DB	 3
  00401	03		 DB	 3
  00402	03		 DB	 3
  00403	03		 DB	 3
  00404	03		 DB	 3
  00405	03		 DB	 3
  00406	03		 DB	 3
  00407	01		 DB	 1
  00408	03		 DB	 3
  00409	03		 DB	 3
  0040a	01		 DB	 1
  0040b	03		 DB	 3
  0040c	03		 DB	 3
  0040d	03		 DB	 3
  0040e	03		 DB	 3
  0040f	03		 DB	 3
  00410	03		 DB	 3
  00411	03		 DB	 3
  00412	03		 DB	 3
  00413	03		 DB	 3
  00414	03		 DB	 3
  00415	03		 DB	 3
  00416	03		 DB	 3
  00417	03		 DB	 3
  00418	03		 DB	 3
  00419	03		 DB	 3
  0041a	03		 DB	 3
  0041b	03		 DB	 3
  0041c	03		 DB	 3
  0041d	03		 DB	 3
  0041e	03		 DB	 3
  0041f	03		 DB	 3
  00420	03		 DB	 3
  00421	03		 DB	 3
  00422	03		 DB	 3
  00423	03		 DB	 3
  00424	03		 DB	 3
  00425	03		 DB	 3
  00426	03		 DB	 3
  00427	03		 DB	 3
  00428	03		 DB	 3
  00429	03		 DB	 3
  0042a	03		 DB	 3
  0042b	03		 DB	 3
  0042c	03		 DB	 3
  0042d	03		 DB	 3
  0042e	03		 DB	 3
  0042f	03		 DB	 3
  00430	03		 DB	 3
  00431	03		 DB	 3
  00432	03		 DB	 3
  00433	03		 DB	 3
  00434	03		 DB	 3
  00435	03		 DB	 3
  00436	03		 DB	 3
  00437	03		 DB	 3
  00438	03		 DB	 3
  00439	03		 DB	 3
  0043a	03		 DB	 3
  0043b	03		 DB	 3
  0043c	03		 DB	 3
  0043d	03		 DB	 3
  0043e	03		 DB	 3
  0043f	03		 DB	 3
  00440	03		 DB	 3
  00441	03		 DB	 3
  00442	03		 DB	 3
  00443	03		 DB	 3
  00444	03		 DB	 3
  00445	03		 DB	 3
  00446	03		 DB	 3
  00447	03		 DB	 3
  00448	03		 DB	 3
  00449	03		 DB	 3
  0044a	03		 DB	 3
  0044b	03		 DB	 3
  0044c	03		 DB	 3
  0044d	03		 DB	 3
  0044e	03		 DB	 3
  0044f	03		 DB	 3
  00450	03		 DB	 3
  00451	03		 DB	 3
  00452	03		 DB	 3
  00453	03		 DB	 3
  00454	03		 DB	 3
  00455	03		 DB	 3
  00456	03		 DB	 3
  00457	03		 DB	 3
  00458	03		 DB	 3
  00459	02		 DB	 2
  0045a	8b ff		 npad	 2
$LN134@read_strin:
  0045c	00 00 00 00	 DD	 $LN26@read_strin
  00460	00 00 00 00	 DD	 $LN11@read_strin
  00464	00 00 00 00	 DD	 $read_save$139
  00468	00 00 00 00	 DD	 $LN20@read_strin
  0046c	00 00 00 00	 DD	 $LN19@read_strin
  00470	00 00 00 00	 DD	 $LN18@read_strin
  00474	00 00 00 00	 DD	 $LN17@read_strin
  00478	00 00 00 00	 DD	 $LN16@read_strin
  0047c	00 00 00 00	 DD	 $LN15@read_strin
  00480	00 00 00 00	 DD	 $LN12@read_strin
  00484	00 00 00 00	 DD	 $LN14@read_strin
  00488	00 00 00 00	 DD	 $LN13@read_strin
  0048c	00 00 00 00	 DD	 $LN8@read_strin
  00490	00 00 00 00	 DD	 $LN2@read_strin
$LN127@read_strin:
  00494	00		 DB	 0
  00495	0d		 DB	 13			; 0000000dH
  00496	0d		 DB	 13			; 0000000dH
  00497	0d		 DB	 13			; 0000000dH
  00498	0d		 DB	 13			; 0000000dH
  00499	0d		 DB	 13			; 0000000dH
  0049a	0d		 DB	 13			; 0000000dH
  0049b	0d		 DB	 13			; 0000000dH
  0049c	0d		 DB	 13			; 0000000dH
  0049d	0d		 DB	 13			; 0000000dH
  0049e	0d		 DB	 13			; 0000000dH
  0049f	01		 DB	 1
  004a0	0d		 DB	 13			; 0000000dH
  004a1	0d		 DB	 13			; 0000000dH
  004a2	01		 DB	 1
  004a3	0d		 DB	 13			; 0000000dH
  004a4	0d		 DB	 13			; 0000000dH
  004a5	0d		 DB	 13			; 0000000dH
  004a6	0d		 DB	 13			; 0000000dH
  004a7	0d		 DB	 13			; 0000000dH
  004a8	0d		 DB	 13			; 0000000dH
  004a9	0d		 DB	 13			; 0000000dH
  004aa	0d		 DB	 13			; 0000000dH
  004ab	0d		 DB	 13			; 0000000dH
  004ac	0d		 DB	 13			; 0000000dH
  004ad	0d		 DB	 13			; 0000000dH
  004ae	0d		 DB	 13			; 0000000dH
  004af	0d		 DB	 13			; 0000000dH
  004b0	0d		 DB	 13			; 0000000dH
  004b1	0d		 DB	 13			; 0000000dH
  004b2	0d		 DB	 13			; 0000000dH
  004b3	0d		 DB	 13			; 0000000dH
  004b4	0d		 DB	 13			; 0000000dH
  004b5	0d		 DB	 13			; 0000000dH
  004b6	0d		 DB	 13			; 0000000dH
  004b7	02		 DB	 2
  004b8	0d		 DB	 13			; 0000000dH
  004b9	0d		 DB	 13			; 0000000dH
  004ba	0d		 DB	 13			; 0000000dH
  004bb	0d		 DB	 13			; 0000000dH
  004bc	02		 DB	 2
  004bd	0d		 DB	 13			; 0000000dH
  004be	0d		 DB	 13			; 0000000dH
  004bf	0d		 DB	 13			; 0000000dH
  004c0	0d		 DB	 13			; 0000000dH
  004c1	0d		 DB	 13			; 0000000dH
  004c2	0d		 DB	 13			; 0000000dH
  004c3	0d		 DB	 13			; 0000000dH
  004c4	0d		 DB	 13			; 0000000dH
  004c5	0d		 DB	 13			; 0000000dH
  004c6	0d		 DB	 13			; 0000000dH
  004c7	0d		 DB	 13			; 0000000dH
  004c8	0d		 DB	 13			; 0000000dH
  004c9	0d		 DB	 13			; 0000000dH
  004ca	0d		 DB	 13			; 0000000dH
  004cb	0d		 DB	 13			; 0000000dH
  004cc	0d		 DB	 13			; 0000000dH
  004cd	0d		 DB	 13			; 0000000dH
  004ce	0d		 DB	 13			; 0000000dH
  004cf	0d		 DB	 13			; 0000000dH
  004d0	0d		 DB	 13			; 0000000dH
  004d1	0d		 DB	 13			; 0000000dH
  004d2	0d		 DB	 13			; 0000000dH
  004d3	0d		 DB	 13			; 0000000dH
  004d4	0d		 DB	 13			; 0000000dH
  004d5	0d		 DB	 13			; 0000000dH
  004d6	0d		 DB	 13			; 0000000dH
  004d7	0d		 DB	 13			; 0000000dH
  004d8	0d		 DB	 13			; 0000000dH
  004d9	0d		 DB	 13			; 0000000dH
  004da	0d		 DB	 13			; 0000000dH
  004db	0d		 DB	 13			; 0000000dH
  004dc	0d		 DB	 13			; 0000000dH
  004dd	0d		 DB	 13			; 0000000dH
  004de	0d		 DB	 13			; 0000000dH
  004df	0d		 DB	 13			; 0000000dH
  004e0	0d		 DB	 13			; 0000000dH
  004e1	0d		 DB	 13			; 0000000dH
  004e2	0d		 DB	 13			; 0000000dH
  004e3	0d		 DB	 13			; 0000000dH
  004e4	0d		 DB	 13			; 0000000dH
  004e5	0d		 DB	 13			; 0000000dH
  004e6	0d		 DB	 13			; 0000000dH
  004e7	0d		 DB	 13			; 0000000dH
  004e8	0d		 DB	 13			; 0000000dH
  004e9	0d		 DB	 13			; 0000000dH
  004ea	0d		 DB	 13			; 0000000dH
  004eb	0d		 DB	 13			; 0000000dH
  004ec	0d		 DB	 13			; 0000000dH
  004ed	0d		 DB	 13			; 0000000dH
  004ee	0d		 DB	 13			; 0000000dH
  004ef	0d		 DB	 13			; 0000000dH
  004f0	0d		 DB	 13			; 0000000dH
  004f1	02		 DB	 2
  004f2	0d		 DB	 13			; 0000000dH
  004f3	0d		 DB	 13			; 0000000dH
  004f4	0d		 DB	 13			; 0000000dH
  004f5	0d		 DB	 13			; 0000000dH
  004f6	03		 DB	 3
  004f7	04		 DB	 4
  004f8	0d		 DB	 13			; 0000000dH
  004f9	0d		 DB	 13			; 0000000dH
  004fa	0d		 DB	 13			; 0000000dH
  004fb	05		 DB	 5
  004fc	0d		 DB	 13			; 0000000dH
  004fd	0d		 DB	 13			; 0000000dH
  004fe	0d		 DB	 13			; 0000000dH
  004ff	0d		 DB	 13			; 0000000dH
  00500	0d		 DB	 13			; 0000000dH
  00501	0d		 DB	 13			; 0000000dH
  00502	0d		 DB	 13			; 0000000dH
  00503	06		 DB	 6
  00504	0d		 DB	 13			; 0000000dH
  00505	0d		 DB	 13			; 0000000dH
  00506	0d		 DB	 13			; 0000000dH
  00507	07		 DB	 7
  00508	0d		 DB	 13			; 0000000dH
  00509	08		 DB	 8
  0050a	09		 DB	 9
  0050b	0a		 DB	 10			; 0000000aH
  0050c	0d		 DB	 13			; 0000000dH
  0050d	0b		 DB	 11			; 0000000bH
  0050e	0d		 DB	 13			; 0000000dH
  0050f	0c		 DB	 12			; 0000000cH
_read_string ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _readdecesc
_TEXT	SEGMENT
_c$1$ = -12						; size = 4
_c$1$ = -12						; size = 4
_r$1$ = -8						; size = 4
_i$1$ = -4						; size = 4
_ls$ = 8						; size = 4
_readdecesc PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 384
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 387
  00008	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  0000b	33 d2		 xor	 edx, edx
  0000d	57		 push	 edi
  0000e	33 ff		 xor	 edi, edi
  00010	89 7d fc	 mov	 DWORD PTR _i$1$[ebp], edi
$LL3@readdecesc:
  00013	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00015	89 4d f4	 mov	 DWORD PTR _c$1$[ebp], ecx
  00018	f6 81 01 00 00
	00 02		 test	 BYTE PTR _luai_ctype_[ecx+1], 2
  0001f	0f 84 8a 00 00
	00		 je	 $LN61@readdecesc
; Line 389
  00025	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]
  00028	8d 42 fa	 lea	 eax, DWORD PTR [edx-6]
  0002b	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  0002e	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00031	89 55 f8	 mov	 DWORD PTR _r$1$[ebp], edx
  00034	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00037	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0003a	40		 inc	 eax
  0003b	3b c1		 cmp	 eax, ecx
  0003d	76 26		 jbe	 SHORT $LN9@readdecesc
  0003f	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00045	0f 83 e1 00 00
	00		 jae	 $LN64@readdecesc
  0004b	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  0004e	57		 push	 edi
  0004f	51		 push	 ecx
  00050	ff 33		 push	 DWORD PTR [ebx]
  00052	ff 76 34	 push	 DWORD PTR [esi+52]
  00055	e8 00 00 00 00	 call	 _luaM_realloc_
  0005a	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	8b 7d fc	 mov	 edi, DWORD PTR _i$1$[ebp]
  00063	89 03		 mov	 DWORD PTR [ebx], eax
$LN9@readdecesc:
  00065	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00068	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0006a	8b 55 f4	 mov	 edx, DWORD PTR _c$1$[ebp]
  0006d	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00070	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00073	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0007b	89 01		 mov	 DWORD PTR [ecx], eax
  0007d	85 d2		 test	 edx, edx
  0007f	74 0f		 je	 SHORT $LN6@readdecesc
  00081	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00084	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00087	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  0008a	40		 inc	 eax
  0008b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0008e	eb 0d		 jmp	 SHORT $LN7@readdecesc
$LN6@readdecesc:
  00090	ff 76 38	 push	 DWORD PTR [esi+56]
  00093	e8 00 00 00 00	 call	 _luaZ_fill
  00098	83 c4 04	 add	 esp, 4
  0009b	8b d0		 mov	 edx, eax
$LN7@readdecesc:
  0009d	47		 inc	 edi
  0009e	89 16		 mov	 DWORD PTR [esi], edx
  000a0	8b 55 f8	 mov	 edx, DWORD PTR _r$1$[ebp]
  000a3	89 7d fc	 mov	 DWORD PTR _i$1$[ebp], edi
  000a6	83 ff 03	 cmp	 edi, 3
  000a9	0f 8c 64 ff ff
	ff		 jl	 $LL3@readdecesc
$LN61@readdecesc:
; Line 391
  000af	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  000b5	7e 66		 jle	 SHORT $LN30@readdecesc
  000b7	8b 06		 mov	 eax, DWORD PTR [esi]
  000b9	89 45 f4	 mov	 DWORD PTR _c$1$[ebp], eax
  000bc	83 f8 ff	 cmp	 eax, -1
  000bf	0f 84 96 00 00
	00		 je	 $LN29@readdecesc
  000c5	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]
  000c8	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cb	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000ce	40		 inc	 eax
  000cf	3b c1		 cmp	 eax, ecx
  000d1	76 1f		 jbe	 SHORT $LN36@readdecesc
  000d3	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  000d9	73 51		 jae	 SHORT $LN64@readdecesc
  000db	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  000de	57		 push	 edi
  000df	51		 push	 ecx
  000e0	ff 33		 push	 DWORD PTR [ebx]
  000e2	ff 76 34	 push	 DWORD PTR [esi+52]
  000e5	e8 00 00 00 00	 call	 _luaM_realloc_
  000ea	83 c4 10	 add	 esp, 16			; 00000010H
  000ed	89 03		 mov	 DWORD PTR [ebx], eax
  000ef	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
$LN36@readdecesc:
  000f2	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000f5	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f7	8b 55 f4	 mov	 edx, DWORD PTR _c$1$[ebp]
  000fa	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000fd	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00100	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00103	8b 11		 mov	 edx, DWORD PTR [ecx]
  00105	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00108	89 01		 mov	 DWORD PTR [ecx], eax
  0010a	85 d2		 test	 edx, edx
  0010c	74 3e		 je	 SHORT $LN33@readdecesc
  0010e	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00111	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00114	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00117	40		 inc	 eax
  00118	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0011b	eb 3c		 jmp	 SHORT $LN34@readdecesc
$LN30@readdecesc:
; Line 392
  0011d	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
; Line 393
  00120	8b c2		 mov	 eax, edx
  00122	29 79 04	 sub	 DWORD PTR [ecx+4], edi
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
; Line 394
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c3		 ret	 0
$LN64@readdecesc:
; Line 391
  0012c	ff 76 04	 push	 DWORD PTR [esi+4]
  0012f	ff 76 48	 push	 DWORD PTR [esi+72]
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
  00137	ff 76 34	 push	 DWORD PTR [esi+52]
  0013a	e8 00 00 00 00	 call	 _luaG_addinfo
  0013f	83 c4 10	 add	 esp, 16			; 00000010H
  00142	6a 03		 push	 3
  00144	ff 76 34	 push	 DWORD PTR [esi+52]
  00147	e8 00 00 00 00	 call	 _luaD_throw
$LN66@readdecesc:
$LN33@readdecesc:
  0014c	ff 76 38	 push	 DWORD PTR [esi+56]
  0014f	e8 00 00 00 00	 call	 _luaZ_fill
  00154	83 c4 04	 add	 esp, 4
  00157	8b d0		 mov	 edx, eax
$LN34@readdecesc:
  00159	89 16		 mov	 DWORD PTR [esi], edx
$LN29@readdecesc:
  0015b	68 25 01 00 00	 push	 293			; 00000125H
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@FGOMBPHF@decimal?5escape?5too?5large?$AA@
  00165	56		 push	 esi
  00166	e8 00 00 00 00	 call	 _lexerror
$LN67@readdecesc:
$LN63@readdecesc:
  0016b	cc		 int	 3
_readdecesc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _utf8esc
_TEXT	SEGMENT
_c$1$ = -24						; size = 4
_ls$GSCopy$1$ = -20					; size = 4
tv243 = -16						; size = 4
_buff$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_ls$ = 8						; size = 4
_utf8esc PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 376
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
; Line 378
  00015	57		 push	 edi
  00016	89 7d ec	 mov	 DWORD PTR _ls$GSCopy$1$[ebp], edi
  00019	e8 00 00 00 00	 call	 _readutf8esc
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR _buff$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _luaO_utf8esc
  00028	8b d8		 mov	 ebx, eax
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 379
  0002d	85 db		 test	 ebx, ebx
  0002f	7e 63		 jle	 SHORT $LN32@utf8esc
  00031	8d 45 fc	 lea	 eax, DWORD PTR _buff$[ebp+8]
  00034	2b c3		 sub	 eax, ebx
  00036	89 45 f0	 mov	 DWORD PTR tv243[ebp], eax
  00039	56		 push	 esi
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL3@utf8esc:
; Line 380
  00040	8b 77 3c	 mov	 esi, DWORD PTR [edi+60]
  00043	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00046	89 45 e8	 mov	 DWORD PTR _c$1$[ebp], eax
  00049	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004f	40		 inc	 eax
  00050	3b c1		 cmp	 eax, ecx
  00052	76 25		 jbe	 SHORT $LN7@utf8esc
  00054	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  0005a	73 48		 jae	 SHORT $LN35@utf8esc
  0005c	8b 45 ec	 mov	 eax, DWORD PTR _ls$GSCopy$1$[ebp]
  0005f	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  00062	57		 push	 edi
  00063	51		 push	 ecx
  00064	ff 36		 push	 DWORD PTR [esi]
  00066	ff 70 34	 push	 DWORD PTR [eax+52]
  00069	e8 00 00 00 00	 call	 _luaM_realloc_
  0006e	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	8b 7d ec	 mov	 edi, DWORD PTR _ls$GSCopy$1$[ebp]
  00077	89 06		 mov	 DWORD PTR [esi], eax
$LN7@utf8esc:
  00079	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007c	4b		 dec	 ebx
  0007d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0007f	8b 55 e8	 mov	 edx, DWORD PTR _c$1$[ebp]
  00082	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00085	8b 45 f0	 mov	 eax, DWORD PTR tv243[ebp]
  00088	ff 46 04	 inc	 DWORD PTR [esi+4]
  0008b	40		 inc	 eax
  0008c	89 45 f0	 mov	 DWORD PTR tv243[ebp], eax
  0008f	85 db		 test	 ebx, ebx
  00091	7f ad		 jg	 SHORT $LL3@utf8esc
  00093	5e		 pop	 esi
$LN32@utf8esc:
; Line 381
  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	5f		 pop	 edi
  00098	33 cd		 xor	 ecx, ebp
  0009a	5b		 pop	 ebx
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
$LN35@utf8esc:
; Line 380
  000a4	ff 77 04	 push	 DWORD PTR [edi+4]
  000a7	ff 77 48	 push	 DWORD PTR [edi+72]
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
  000af	ff 77 34	 push	 DWORD PTR [edi+52]
  000b2	e8 00 00 00 00	 call	 _luaG_addinfo
  000b7	83 c4 10	 add	 esp, 16			; 00000010H
  000ba	6a 03		 push	 3
  000bc	ff 77 34	 push	 DWORD PTR [edi+52]
  000bf	e8 00 00 00 00	 call	 _luaD_throw
$LN36@utf8esc:
$LN34@utf8esc:
  000c4	cc		 int	 3
_utf8esc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _readutf8esc
_TEXT	SEGMENT
_c$1$ = -8						; size = 4
_i$1$ = -4						; size = 4
_c$1$ = 8						; size = 4
_r$1$ = 8						; size = 4
_ls$ = 8						; size = 4
_readutf8esc PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 358
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
; Line 361
  00008	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  0000b	57		 push	 edi
  0000c	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 4
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _save
  0001b	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0001e	83 c4 08	 add	 esp, 8
  00021	8b 11		 mov	 edx, DWORD PTR [ecx]
  00023	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00026	89 01		 mov	 DWORD PTR [ecx], eax
  00028	85 d2		 test	 edx, edx
  0002a	74 0f		 je	 SHORT $LN5@readutf8es
  0002c	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00032	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00035	40		 inc	 eax
  00036	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00039	eb 0d		 jmp	 SHORT $LN6@readutf8es
$LN5@readutf8es:
  0003b	ff 76 38	 push	 DWORD PTR [esi+56]
  0003e	e8 00 00 00 00	 call	 _luaZ_fill
  00043	83 c4 04	 add	 esp, 4
  00046	8b d0		 mov	 edx, eax
$LN6@readutf8es:
  00048	89 16		 mov	 DWORD PTR [esi], edx
; Line 362
  0004a	83 fa 7b	 cmp	 edx, 123		; 0000007bH
  0004d	74 37		 je	 SHORT $LN12@readutf8es
  0004f	83 fa ff	 cmp	 edx, -1
  00052	0f 84 e8 01 00
	00		 je	 $LN11@readutf8es
  00058	52		 push	 edx
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 _save
  0005f	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00062	83 c4 08	 add	 esp, 8
  00065	8b 11		 mov	 edx, DWORD PTR [ecx]
  00067	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0006a	89 01		 mov	 DWORD PTR [ecx], eax
  0006c	85 d2		 test	 edx, edx
  0006e	0f 84 bd 01 00
	00		 je	 $LN77@readutf8es
  00074	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00077	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0007a	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  0007d	40		 inc	 eax
  0007e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00081	e9 b8 01 00 00	 jmp	 $LN16@readutf8es
$LN12@readutf8es:
; Line 363
  00086	56		 push	 esi
  00087	e8 00 00 00 00	 call	 _gethexa
  0008c	83 c4 04	 add	 esp, 4
  0008f	89 45 08	 mov	 DWORD PTR _r$1$[ebp], eax
  00092	8b f8		 mov	 edi, eax
$LL2@readutf8es:
; Line 364
  00094	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]
  00097	8b 06		 mov	 eax, DWORD PTR [esi]
  00099	89 45 f8	 mov	 DWORD PTR _c$1$[ebp], eax
  0009c	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0009f	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000a2	40		 inc	 eax
  000a3	3b c1		 cmp	 eax, ecx
  000a5	76 26		 jbe	 SHORT $LN19@readutf8es
  000a7	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  000ad	0f 83 9d 01 00
	00		 jae	 $LN78@readutf8es
  000b3	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  000b6	57		 push	 edi
  000b7	51		 push	 ecx
  000b8	ff 33		 push	 DWORD PTR [ebx]
  000ba	ff 76 34	 push	 DWORD PTR [esi+52]
  000bd	e8 00 00 00 00	 call	 _luaM_realloc_
  000c2	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
  000c5	83 c4 10	 add	 esp, 16			; 00000010H
  000c8	8b 7d 08	 mov	 edi, DWORD PTR _r$1$[ebp]
  000cb	89 03		 mov	 DWORD PTR [ebx], eax
$LN19@readutf8es:
  000cd	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000d0	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000d2	8b 55 f8	 mov	 edx, DWORD PTR _c$1$[ebp]
  000d5	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000d8	ff 43 04	 inc	 DWORD PTR [ebx+4]
  000db	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000de	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e0	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  000e3	89 01		 mov	 DWORD PTR [ecx], eax
  000e5	85 d2		 test	 edx, edx
  000e7	74 0f		 je	 SHORT $LN7@readutf8es
  000e9	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000ec	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ef	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  000f2	40		 inc	 eax
  000f3	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000f6	eb 0d		 jmp	 SHORT $LN8@readutf8es
$LN7@readutf8es:
  000f8	ff 76 38	 push	 DWORD PTR [esi+56]
  000fb	e8 00 00 00 00	 call	 _luaZ_fill
  00100	83 c4 04	 add	 esp, 4
  00103	8b d0		 mov	 edx, eax
$LN8@readutf8es:
  00105	89 16		 mov	 DWORD PTR [esi], edx
  00107	f6 82 01 00 00
	00 10		 test	 BYTE PTR _luai_ctype_[edx+1], 16 ; 00000010H
  0010e	0f 84 91 00 00
	00		 je	 $LN1@readutf8es
; Line 365
  00114	ff 45 fc	 inc	 DWORD PTR _i$1$[ebp]
; Line 366
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 _luaO_hexavalue
  0011d	c1 e7 04	 shl	 edi, 4
  00120	83 c4 04	 add	 esp, 4
  00123	03 f8		 add	 edi, eax
  00125	89 7d 08	 mov	 DWORD PTR _r$1$[ebp], edi
; Line 367
  00128	81 ff ff ff 10
	00		 cmp	 edi, 1114111		; 0010ffffH
  0012e	0f 86 60 ff ff
	ff		 jbe	 $LL2@readutf8es
  00134	8b 06		 mov	 eax, DWORD PTR [esi]
  00136	89 45 08	 mov	 DWORD PTR _c$1$[ebp], eax
  00139	83 f8 ff	 cmp	 eax, -1
  0013c	0f 84 3d 01 00
	00		 je	 $LN38@readutf8es
  00142	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]
  00145	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00148	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0014b	40		 inc	 eax
  0014c	3b c1		 cmp	 eax, ecx
  0014e	76 23		 jbe	 SHORT $LN45@readutf8es
  00150	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00156	0f 83 f4 00 00
	00		 jae	 $LN78@readutf8es
  0015c	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  0015f	57		 push	 edi
  00160	51		 push	 ecx
  00161	ff 33		 push	 DWORD PTR [ebx]
  00163	ff 76 34	 push	 DWORD PTR [esi+52]
  00166	e8 00 00 00 00	 call	 _luaM_realloc_
  0016b	83 c4 10	 add	 esp, 16			; 00000010H
  0016e	89 03		 mov	 DWORD PTR [ebx], eax
  00170	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
$LN45@readutf8es:
  00173	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00176	8b 03		 mov	 eax, DWORD PTR [ebx]
  00178	8b 55 08	 mov	 edx, DWORD PTR _c$1$[ebp]
  0017b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0017e	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00181	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00184	8b 11		 mov	 edx, DWORD PTR [ecx]
  00186	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00189	89 01		 mov	 DWORD PTR [ecx], eax
  0018b	85 d2		 test	 edx, edx
  0018d	0f 84 dd 00 00
	00		 je	 $LN42@readutf8es
  00193	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00196	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00199	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  0019c	40		 inc	 eax
  0019d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  001a0	e9 d8 00 00 00	 jmp	 $LN43@readutf8es
$LN1@readutf8es:
; Line 369
  001a5	83 fa 7d	 cmp	 edx, 125		; 0000007dH
  001a8	74 37		 je	 SHORT $LN66@readutf8es
  001aa	83 fa ff	 cmp	 edx, -1
  001ad	0f 84 eb 00 00
	00		 je	 $LN65@readutf8es
  001b3	52		 push	 edx
  001b4	56		 push	 esi
  001b5	e8 00 00 00 00	 call	 _save
  001ba	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001bd	83 c4 08	 add	 esp, 8
  001c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c2	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  001c5	89 01		 mov	 DWORD PTR [ecx], eax
  001c7	85 d2		 test	 edx, edx
  001c9	0f 84 c0 00 00
	00		 je	 $LN69@readutf8es
  001cf	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001d2	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d5	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  001d8	40		 inc	 eax
  001d9	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  001dc	e9 bb 00 00 00	 jmp	 $LN70@readutf8es
$LN66@readutf8es:
; Line 370
  001e1	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e6	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  001e9	89 01		 mov	 DWORD PTR [ecx], eax
  001eb	85 d2		 test	 edx, edx
  001ed	74 21		 je	 SHORT $LN9@readutf8es
  001ef	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001f2	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f5	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  001f8	40		 inc	 eax
  001f9	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; Line 371
  001fc	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  001ff	8b 4d fc	 mov	 ecx, DWORD PTR _i$1$[ebp]
  00202	89 16		 mov	 DWORD PTR [esi], edx
  00204	29 48 04	 sub	 DWORD PTR [eax+4], ecx
; Line 372
  00207	8b c7		 mov	 eax, edi
  00209	5f		 pop	 edi
  0020a	5e		 pop	 esi
  0020b	5b		 pop	 ebx
; Line 373
  0020c	8b e5		 mov	 esp, ebp
  0020e	5d		 pop	 ebp
  0020f	c3		 ret	 0
$LN9@readutf8es:
; Line 370
  00210	ff 76 38	 push	 DWORD PTR [esi+56]
  00213	e8 00 00 00 00	 call	 _luaZ_fill
; Line 371
  00218	8b 4d fc	 mov	 ecx, DWORD PTR _i$1$[ebp]
  0021b	8b d0		 mov	 edx, eax
  0021d	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00220	83 c4 04	 add	 esp, 4
  00223	89 16		 mov	 DWORD PTR [esi], edx
  00225	29 48 04	 sub	 DWORD PTR [eax+4], ecx
; Line 372
  00228	8b c7		 mov	 eax, edi
  0022a	5f		 pop	 edi
  0022b	5e		 pop	 esi
  0022c	5b		 pop	 ebx
; Line 373
  0022d	8b e5		 mov	 esp, ebp
  0022f	5d		 pop	 ebp
  00230	c3		 ret	 0
$LN77@readutf8es:
; Line 362
  00231	ff 76 38	 push	 DWORD PTR [esi+56]
  00234	e8 00 00 00 00	 call	 _luaZ_fill
  00239	83 c4 04	 add	 esp, 4
  0023c	8b d0		 mov	 edx, eax
$LN16@readutf8es:
  0023e	89 16		 mov	 DWORD PTR [esi], edx
$LN11@readutf8es:
  00240	68 25 01 00 00	 push	 293			; 00000125H
  00245	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LCIHADNN@missing?5?8?$HL?8?$AA@
  0024a	56		 push	 esi
  0024b	e8 00 00 00 00	 call	 _lexerror
$LN79@readutf8es:
$LN78@readutf8es:
; Line 367
  00250	ff 76 04	 push	 DWORD PTR [esi+4]
  00253	ff 76 48	 push	 DWORD PTR [esi+72]
  00256	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
  0025b	ff 76 34	 push	 DWORD PTR [esi+52]
  0025e	e8 00 00 00 00	 call	 _luaG_addinfo
  00263	83 c4 10	 add	 esp, 16			; 00000010H
  00266	6a 03		 push	 3
  00268	ff 76 34	 push	 DWORD PTR [esi+52]
  0026b	e8 00 00 00 00	 call	 _luaD_throw
$LN80@readutf8es:
$LN42@readutf8es:
  00270	ff 76 38	 push	 DWORD PTR [esi+56]
  00273	e8 00 00 00 00	 call	 _luaZ_fill
  00278	83 c4 04	 add	 esp, 4
  0027b	8b d0		 mov	 edx, eax
$LN43@readutf8es:
  0027d	89 16		 mov	 DWORD PTR [esi], edx
$LN38@readutf8es:
  0027f	68 25 01 00 00	 push	 293			; 00000125H
  00284	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@INJLHCPD@UTF?98?5value?5too?5large?$AA@
  00289	56		 push	 esi
  0028a	e8 00 00 00 00	 call	 _lexerror
$LN81@readutf8es:
; Line 369
$LN69@readutf8es:
  0028f	ff 76 38	 push	 DWORD PTR [esi+56]
  00292	e8 00 00 00 00	 call	 _luaZ_fill
  00297	83 c4 04	 add	 esp, 4
  0029a	8b d0		 mov	 edx, eax
$LN70@readutf8es:
  0029c	89 16		 mov	 DWORD PTR [esi], edx
$LN65@readutf8es:
  0029e	68 25 01 00 00	 push	 293			; 00000125H
  002a3	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LGAKHPGP@missing?5?8?$HN?8?$AA@
  002a8	56		 push	 esi
  002a9	e8 00 00 00 00	 call	 _lexerror
$LN82@readutf8es:
$LN76@readutf8es:
  002ae	cc		 int	 3
_readutf8esc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _readhexaesc
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_readhexaesc PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 350
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 351
  00005	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _gethexa
; Line 352
  0000e	57		 push	 edi
  0000f	8b f0		 mov	 esi, eax
  00011	e8 00 00 00 00	 call	 _gethexa
; Line 353
  00016	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]
  00019	83 c4 08	 add	 esp, 8
  0001c	c1 e6 04	 shl	 esi, 4
  0001f	03 c6		 add	 eax, esi
  00021	83 41 04 fe	 add	 DWORD PTR [ecx+4], -2	; fffffffeH
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
; Line 355
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_readhexaesc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _gethexa
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_gethexa PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 343
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 344
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	ff 36		 push	 DWORD PTR [esi]
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _save
  0000f	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00012	83 c4 08	 add	 esp, 8
  00015	8b 11		 mov	 edx, DWORD PTR [ecx]
  00017	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0001a	89 01		 mov	 DWORD PTR [ecx], eax
  0001c	85 d2		 test	 edx, edx
  0001e	74 0f		 je	 SHORT $LN3@gethexa
  00020	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00023	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00026	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00029	40		 inc	 eax
  0002a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002d	eb 0d		 jmp	 SHORT $LN4@gethexa
$LN3@gethexa:
  0002f	ff 76 38	 push	 DWORD PTR [esi+56]
  00032	e8 00 00 00 00	 call	 _luaZ_fill
  00037	83 c4 04	 add	 esp, 4
  0003a	8b d0		 mov	 edx, eax
$LN4@gethexa:
  0003c	89 16		 mov	 DWORD PTR [esi], edx
; Line 345
  0003e	f6 82 01 00 00
	00 10		 test	 BYTE PTR _luai_ctype_[edx+1], 16 ; 00000010H
  00045	75 2c		 jne	 SHORT $LN6@gethexa
  00047	83 fa ff	 cmp	 edx, -1
  0004a	74 40		 je	 SHORT $LN5@gethexa
  0004c	52		 push	 edx
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 _save
  00053	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00056	83 c4 08	 add	 esp, 8
  00059	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005b	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0005e	89 01		 mov	 DWORD PTR [ecx], eax
  00060	85 d2		 test	 edx, edx
  00062	74 19		 je	 SHORT $LN14@gethexa
  00064	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00067	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0006a	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  0006d	40		 inc	 eax
  0006e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00071	eb 17		 jmp	 SHORT $LN10@gethexa
$LN6@gethexa:
  00073	5e		 pop	 esi
; Line 346
  00074	89 55 08	 mov	 DWORD PTR _ls$[ebp], edx
; Line 347
  00077	5d		 pop	 ebp
; Line 346
  00078	e9 00 00 00 00	 jmp	 _luaO_hexavalue
$LN14@gethexa:
; Line 345
  0007d	ff 76 38	 push	 DWORD PTR [esi+56]
  00080	e8 00 00 00 00	 call	 _luaZ_fill
  00085	83 c4 04	 add	 esp, 4
  00088	8b d0		 mov	 edx, eax
$LN10@gethexa:
  0008a	89 16		 mov	 DWORD PTR [esi], edx
$LN5@gethexa:
  0008c	68 25 01 00 00	 push	 293			; 00000125H
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HIOFDBBP@hexadecimal?5digit?5expected?$AA@
  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 _lexerror
$LN15@gethexa:
$LN13@gethexa:
  0009c	cc		 int	 3
_gethexa ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _esccheck
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_c$ = 12						; size = 4
_msg$ = 16						; size = 4
_esccheck PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 334
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 335
  00003	83 7d 0c 00	 cmp	 DWORD PTR _c$[ebp], 0
  00007	56		 push	 esi
  00008	75 31		 jne	 SHORT $LN2@esccheck
; Line 336
  0000a	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	83 f8 ff	 cmp	 eax, -1
  00012	74 39		 je	 SHORT $LN1@esccheck
; Line 337
  00014	50		 push	 eax
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _save
  0001b	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0001e	83 c4 08	 add	 esp, 8
  00021	8b 11		 mov	 edx, DWORD PTR [ecx]
  00023	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00026	89 01		 mov	 DWORD PTR [ecx], eax
  00028	85 d2		 test	 edx, edx
  0002a	74 12		 je	 SHORT $LN8@esccheck
  0002c	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00032	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00035	40		 inc	 eax
  00036	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00039	eb 10		 jmp	 SHORT $LN6@esccheck
$LN2@esccheck:
; Line 340
  0003b	5e		 pop	 esi
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN8@esccheck:
; Line 337
  0003e	ff 76 38	 push	 DWORD PTR [esi+56]
  00041	e8 00 00 00 00	 call	 _luaZ_fill
  00046	83 c4 04	 add	 esp, 4
  00049	8b d0		 mov	 edx, eax
$LN6@esccheck:
  0004b	89 16		 mov	 DWORD PTR [esi], edx
$LN1@esccheck:
; Line 338
  0004d	68 25 01 00 00	 push	 293			; 00000125H
  00052	ff 75 10	 push	 DWORD PTR _msg$[ebp]
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 _lexerror
$LN9@esccheck:
$LN7@esccheck:
  0005b	cc		 int	 3
_esccheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _read_long_string
_TEXT	SEGMENT
_line$1$ = -4						; size = 4
_c$1$ = 8						; size = 4
_ls$ = 8						; size = 4
_seminfo$ = 12						; size = 4
_sep$ = 16						; size = 4
_read_long_string PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 295
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; Line 296
  00006	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00009	57		 push	 edi
; Line 297
  0000a	ff 36		 push	 DWORD PTR [esi]
  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000f	56		 push	 esi
  00010	89 45 fc	 mov	 DWORD PTR _line$1$[ebp], eax
  00013	e8 00 00 00 00	 call	 _save
  00018	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0001b	83 c4 08	 add	 esp, 8
  0001e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00020	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00023	89 01		 mov	 DWORD PTR [ecx], eax
  00025	85 d2		 test	 edx, edx
  00027	74 0f		 je	 SHORT $LN18@read_long_
  00029	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002f	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00036	eb 0d		 jmp	 SHORT $LN19@read_long_
$LN18@read_long_:
  00038	ff 76 38	 push	 DWORD PTR [esi+56]
  0003b	e8 00 00 00 00	 call	 _luaZ_fill
  00040	83 c4 04	 add	 esp, 4
  00043	8b d0		 mov	 edx, eax
$LN19@read_long_:
  00045	89 16		 mov	 DWORD PTR [esi], edx
; Line 298
  00047	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0004a	74 05		 je	 SHORT $LN14@read_long_
  0004c	83 fa 0d	 cmp	 edx, 13			; 0000000dH
  0004f	75 09		 jne	 SHORT $LN80@read_long_
$LN14@read_long_:
; Line 299
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 _inclinenumber
  00057	83 c4 04	 add	 esp, 4
$LN80@read_long_:
  0005a	8b 7d 10	 mov	 edi, DWORD PTR _sep$[ebp]
  0005d	8b 5d 0c	 mov	 ebx, DWORD PTR _seminfo$[ebp]
$LL13@read_long_:
; Line 301
  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	89 45 08	 mov	 DWORD PTR _c$1$[ebp], eax
  00065	40		 inc	 eax
  00066	83 f8 5e	 cmp	 eax, 94			; 0000005eH
  00069	0f 87 ad 00 00
	00		 ja	 $LN4@read_long_
  0006f	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN79@read_long_[eax]
  00076	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN83@read_long_[eax*4]
$LN8@read_long_:
; Line 310
  0007d	56		 push	 esi
  0007e	e8 00 00 00 00	 call	 _skip_sep
  00083	83 c4 04	 add	 esp, 4
  00086	3b c7		 cmp	 eax, edi
  00088	75 d6		 jne	 SHORT $LL13@read_long_
; Line 311
  0008a	ff 36		 push	 DWORD PTR [esi]
  0008c	56		 push	 esi
  0008d	e8 00 00 00 00	 call	 _save
  00092	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00095	83 c4 08	 add	 esp, 8
  00098	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009a	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0009d	89 01		 mov	 DWORD PTR [ecx], eax
  0009f	85 d2		 test	 edx, edx
  000a1	0f 84 24 01 00
	00		 je	 $LN20@read_long_
  000a7	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000aa	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ad	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  000b0	40		 inc	 eax
  000b1	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000b4	e9 1f 01 00 00	 jmp	 $LN21@read_long_
$LN6@read_long_:
; Line 317
  000b9	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]
  000bc	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000bf	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000c2	40		 inc	 eax
  000c3	3b c1		 cmp	 eax, ecx
  000c5	76 23		 jbe	 SHORT $LN27@read_long_
  000c7	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  000cd	0f 83 34 01 00
	00		 jae	 $LN82@read_long_
  000d3	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  000d6	57		 push	 edi
  000d7	51		 push	 ecx
  000d8	ff 33		 push	 DWORD PTR [ebx]
  000da	ff 76 34	 push	 DWORD PTR [esi+52]
  000dd	e8 00 00 00 00	 call	 _luaM_realloc_
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
  000e5	89 03		 mov	 DWORD PTR [ebx], eax
  000e7	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
$LN27@read_long_:
  000ea	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000ed	8b 03		 mov	 eax, DWORD PTR [ebx]
; Line 318
  000ef	56		 push	 esi
  000f0	c6 04 01 0a	 mov	 BYTE PTR [ecx+eax], 10	; 0000000aH
  000f4	ff 43 04	 inc	 DWORD PTR [ebx+4]
  000f7	e8 00 00 00 00	 call	 _inclinenumber
; Line 319
  000fc	8b 5d 0c	 mov	 ebx, DWORD PTR _seminfo$[ebp]
  000ff	83 c4 04	 add	 esp, 4
  00102	8b 7d 10	 mov	 edi, DWORD PTR _sep$[ebp]
  00105	85 db		 test	 ebx, ebx
  00107	0f 85 53 ff ff
	ff		 jne	 $LL13@read_long_
  0010d	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00110	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; Line 320
  00117	e9 44 ff ff ff	 jmp	 $LL13@read_long_
$LN4@read_long_:
; Line 323
  0011c	85 db		 test	 ebx, ebx
  0011e	74 75		 je	 SHORT $LN3@read_long_
  00120	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]
  00123	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00126	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00129	40		 inc	 eax
  0012a	3b c1		 cmp	 eax, ecx
  0012c	76 23		 jbe	 SHORT $LN48@read_long_
  0012e	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00134	0f 83 cd 00 00
	00		 jae	 $LN82@read_long_
  0013a	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  0013d	57		 push	 edi
  0013e	51		 push	 ecx
  0013f	ff 33		 push	 DWORD PTR [ebx]
  00141	ff 76 34	 push	 DWORD PTR [esi+52]
  00144	e8 00 00 00 00	 call	 _luaM_realloc_
  00149	83 c4 10	 add	 esp, 16			; 00000010H
  0014c	89 03		 mov	 DWORD PTR [ebx], eax
  0014e	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
$LN48@read_long_:
  00151	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00154	8b 03		 mov	 eax, DWORD PTR [ebx]
  00156	8b 55 08	 mov	 edx, DWORD PTR _c$1$[ebp]
  00159	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0015c	ff 43 04	 inc	 DWORD PTR [ebx+4]
  0015f	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00162	8b 11		 mov	 edx, DWORD PTR [ecx]
  00164	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00167	89 01		 mov	 DWORD PTR [ecx], eax
  00169	85 d2		 test	 edx, edx
  0016b	74 14		 je	 SHORT $LN22@read_long_
  0016d	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00170	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00173	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00176	40		 inc	 eax
  00177	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0017a	89 16		 mov	 DWORD PTR [esi], edx
  0017c	e9 d9 fe ff ff	 jmp	 $LN80@read_long_
$LN22@read_long_:
  00181	ff 76 38	 push	 DWORD PTR [esi+56]
  00184	e8 00 00 00 00	 call	 _luaZ_fill
  00189	8b d0		 mov	 edx, eax
  0018b	83 c4 04	 add	 esp, 4
  0018e	89 16		 mov	 DWORD PTR [esi], edx
  00190	e9 c5 fe ff ff	 jmp	 $LN80@read_long_
$LN3@read_long_:
; Line 324
  00195	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00198	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019a	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0019d	89 01		 mov	 DWORD PTR [ecx], eax
  0019f	85 d2		 test	 edx, edx
  001a1	74 14		 je	 SHORT $LN24@read_long_
  001a3	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001a6	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001a9	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  001ac	40		 inc	 eax
  001ad	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  001b0	89 16		 mov	 DWORD PTR [esi], edx
; Line 327
  001b2	e9 a9 fe ff ff	 jmp	 $LL13@read_long_
$LN24@read_long_:
; Line 324
  001b7	ff 76 38	 push	 DWORD PTR [esi+56]
  001ba	e8 00 00 00 00	 call	 _luaZ_fill
  001bf	8b d0		 mov	 edx, eax
  001c1	83 c4 04	 add	 esp, 4
  001c4	89 16		 mov	 DWORD PTR [esi], edx
; Line 327
  001c6	e9 95 fe ff ff	 jmp	 $LL13@read_long_
$LN20@read_long_:
; Line 311
  001cb	ff 76 38	 push	 DWORD PTR [esi+56]
  001ce	e8 00 00 00 00	 call	 _luaZ_fill
  001d3	83 c4 04	 add	 esp, 4
  001d6	8b d0		 mov	 edx, eax
$LN21@read_long_:
  001d8	89 16		 mov	 DWORD PTR [esi], edx
$endloop$86:
; Line 328
  001da	85 db		 test	 ebx, ebx
  001dc	74 22		 je	 SHORT $LN1@read_long_
; Line 330
  001de	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  001e1	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  001e4	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001e7	2b c8		 sub	 ecx, eax
  001e9	8b 02		 mov	 eax, DWORD PTR [edx]
  001eb	83 e9 04	 sub	 ecx, 4
  001ee	83 c0 02	 add	 eax, 2
  001f1	51		 push	 ecx
  001f2	03 c7		 add	 eax, edi
  001f4	50		 push	 eax
  001f5	56		 push	 esi
  001f6	e8 00 00 00 00	 call	 _luaX_newstring
  001fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fe	89 03		 mov	 DWORD PTR [ebx], eax
$LN1@read_long_:
  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	5b		 pop	 ebx
; Line 331
  00203	8b e5		 mov	 esp, ebp
  00205	5d		 pop	 ebp
  00206	c3		 ret	 0
$LN82@read_long_:
; Line 317
  00207	ff 76 04	 push	 DWORD PTR [esi+4]
  0020a	ff 76 48	 push	 DWORD PTR [esi+72]
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
  00212	ff 76 34	 push	 DWORD PTR [esi+52]
  00215	e8 00 00 00 00	 call	 _luaG_addinfo
  0021a	83 c4 10	 add	 esp, 16			; 00000010H
  0021d	6a 03		 push	 3
  0021f	ff 76 34	 push	 DWORD PTR [esi+52]
  00222	e8 00 00 00 00	 call	 _luaD_throw
$LN84@read_long_:
$LN9@read_long_:
; Line 305
  00227	ff 75 fc	 push	 DWORD PTR _line$1$[ebp]
  0022a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_07GJGNEJFD@comment?$AA@
  0022f	85 db		 test	 ebx, ebx
  00231	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06ICGJLFIM@string?$AA@
  00236	0f 44 c1	 cmove	 eax, ecx
  00239	50		 push	 eax
  0023a	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CPAHLMBA@unfinished?5long?5?$CFs?5?$CIstarting?5at?5@
  0023f	ff 76 34	 push	 DWORD PTR [esi+52]
  00242	e8 00 00 00 00	 call	 _luaO_pushfstring
  00247	83 c4 10	 add	 esp, 16			; 00000010H
; Line 306
  0024a	68 21 01 00 00	 push	 289			; 00000121H
  0024f	50		 push	 eax
  00250	56		 push	 esi
  00251	e8 00 00 00 00	 call	 _lexerror
$LN85@read_long_:
$LN81@read_long_:
  00256	8b ff		 npad	 2
$LN83@read_long_:
; Line 331
  00258	00 00 00 00	 DD	 $LN9@read_long_
  0025c	00 00 00 00	 DD	 $LN6@read_long_
  00260	00 00 00 00	 DD	 $LN8@read_long_
  00264	00 00 00 00	 DD	 $LN4@read_long_
$LN79@read_long_:
  00268	00		 DB	 0
  00269	03		 DB	 3
  0026a	03		 DB	 3
  0026b	03		 DB	 3
  0026c	03		 DB	 3
  0026d	03		 DB	 3
  0026e	03		 DB	 3
  0026f	03		 DB	 3
  00270	03		 DB	 3
  00271	03		 DB	 3
  00272	03		 DB	 3
  00273	01		 DB	 1
  00274	03		 DB	 3
  00275	03		 DB	 3
  00276	01		 DB	 1
  00277	03		 DB	 3
  00278	03		 DB	 3
  00279	03		 DB	 3
  0027a	03		 DB	 3
  0027b	03		 DB	 3
  0027c	03		 DB	 3
  0027d	03		 DB	 3
  0027e	03		 DB	 3
  0027f	03		 DB	 3
  00280	03		 DB	 3
  00281	03		 DB	 3
  00282	03		 DB	 3
  00283	03		 DB	 3
  00284	03		 DB	 3
  00285	03		 DB	 3
  00286	03		 DB	 3
  00287	03		 DB	 3
  00288	03		 DB	 3
  00289	03		 DB	 3
  0028a	03		 DB	 3
  0028b	03		 DB	 3
  0028c	03		 DB	 3
  0028d	03		 DB	 3
  0028e	03		 DB	 3
  0028f	03		 DB	 3
  00290	03		 DB	 3
  00291	03		 DB	 3
  00292	03		 DB	 3
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	03		 DB	 3
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	03		 DB	 3
  002a1	03		 DB	 3
  002a2	03		 DB	 3
  002a3	03		 DB	 3
  002a4	03		 DB	 3
  002a5	03		 DB	 3
  002a6	03		 DB	 3
  002a7	03		 DB	 3
  002a8	03		 DB	 3
  002a9	03		 DB	 3
  002aa	03		 DB	 3
  002ab	03		 DB	 3
  002ac	03		 DB	 3
  002ad	03		 DB	 3
  002ae	03		 DB	 3
  002af	03		 DB	 3
  002b0	03		 DB	 3
  002b1	03		 DB	 3
  002b2	03		 DB	 3
  002b3	03		 DB	 3
  002b4	03		 DB	 3
  002b5	03		 DB	 3
  002b6	03		 DB	 3
  002b7	03		 DB	 3
  002b8	03		 DB	 3
  002b9	03		 DB	 3
  002ba	03		 DB	 3
  002bb	03		 DB	 3
  002bc	03		 DB	 3
  002bd	03		 DB	 3
  002be	03		 DB	 3
  002bf	03		 DB	 3
  002c0	03		 DB	 3
  002c1	03		 DB	 3
  002c2	03		 DB	 3
  002c3	03		 DB	 3
  002c4	03		 DB	 3
  002c5	03		 DB	 3
  002c6	02		 DB	 2
_read_long_string ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _skip_sep
_TEXT	SEGMENT
_s$1$ = -8						; size = 4
_count$1$ = -4						; size = 4
_c$1$ = 8						; size = 4
_ls$ = 8						; size = 4
_skip_sep PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 282
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
; Line 284
  00007	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi
  0000d	89 7d fc	 mov	 DWORD PTR _count$1$[ebp], edi
  00010	8b 06		 mov	 eax, DWORD PTR [esi]
; Line 286
  00012	50		 push	 eax
  00013	56		 push	 esi
  00014	89 45 f8	 mov	 DWORD PTR _s$1$[ebp], eax
  00017	e8 00 00 00 00	 call	 _save
  0001c	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0001f	83 c4 08	 add	 esp, 8
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00027	89 01		 mov	 DWORD PTR [ecx], eax
  00029	85 d2		 test	 edx, edx
  0002b	74 0f		 je	 SHORT $LN5@skip_sep
  0002d	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00030	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00033	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00036	40		 inc	 eax
  00037	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0003a	eb 0d		 jmp	 SHORT $LN6@skip_sep
$LN5@skip_sep:
  0003c	ff 76 38	 push	 DWORD PTR [esi+56]
  0003f	e8 00 00 00 00	 call	 _luaZ_fill
  00044	83 c4 04	 add	 esp, 4
  00047	8b d0		 mov	 edx, eax
$LN6@skip_sep:
  00049	89 16		 mov	 DWORD PTR [esi], edx
; Line 287
  0004b	83 fa 3d	 cmp	 edx, 61			; 0000003dH
  0004e	75 7a		 jne	 SHORT $LN37@skip_sep
  00050	53		 push	 ebx
$LL2@skip_sep:
; Line 288
  00051	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]
  00054	8b 06		 mov	 eax, DWORD PTR [esi]
  00056	89 45 08	 mov	 DWORD PTR _c$1$[ebp], eax
  00059	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0005c	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0005f	40		 inc	 eax
  00060	3b c1		 cmp	 eax, ecx
  00062	76 22		 jbe	 SHORT $LN12@skip_sep
  00064	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  0006a	73 74		 jae	 SHORT $LN40@skip_sep
  0006c	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  0006f	57		 push	 edi
  00070	51		 push	 ecx
  00071	ff 33		 push	 DWORD PTR [ebx]
  00073	ff 76 34	 push	 DWORD PTR [esi+52]
  00076	e8 00 00 00 00	 call	 _luaM_realloc_
  0007b	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
  0007e	83 c4 10	 add	 esp, 16			; 00000010H
  00081	8b 7d fc	 mov	 edi, DWORD PTR _count$1$[ebp]
  00084	89 03		 mov	 DWORD PTR [ebx], eax
$LN12@skip_sep:
  00086	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00089	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0008b	8b 55 08	 mov	 edx, DWORD PTR _c$1$[ebp]
  0008e	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00091	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00094	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00097	8b 11		 mov	 edx, DWORD PTR [ecx]
  00099	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0009c	89 01		 mov	 DWORD PTR [ecx], eax
  0009e	85 d2		 test	 edx, edx
  000a0	74 0f		 je	 SHORT $LN7@skip_sep
  000a2	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000a5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000a8	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  000ab	40		 inc	 eax
  000ac	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000af	eb 0d		 jmp	 SHORT $LN8@skip_sep
$LN7@skip_sep:
  000b1	ff 76 38	 push	 DWORD PTR [esi+56]
  000b4	e8 00 00 00 00	 call	 _luaZ_fill
  000b9	83 c4 04	 add	 esp, 4
  000bc	8b d0		 mov	 edx, eax
$LN8@skip_sep:
; Line 289
  000be	47		 inc	 edi
  000bf	89 16		 mov	 DWORD PTR [esi], edx
  000c1	89 7d fc	 mov	 DWORD PTR _count$1$[ebp], edi
  000c4	83 fa 3d	 cmp	 edx, 61			; 0000003dH
  000c7	74 88		 je	 SHORT $LL2@skip_sep
  000c9	5b		 pop	 ebx
$LN37@skip_sep:
; Line 291
  000ca	8b 45 f8	 mov	 eax, DWORD PTR _s$1$[ebp]
  000cd	39 06		 cmp	 DWORD PTR [esi], eax
  000cf	74 07		 je	 SHORT $LN10@skip_sep
  000d1	83 c8 ff	 or	 eax, -1
  000d4	2b c7		 sub	 eax, edi
  000d6	8b f8		 mov	 edi, eax
$LN10@skip_sep:
  000d8	8b c7		 mov	 eax, edi
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
; Line 292
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
$LN40@skip_sep:
; Line 288
  000e0	ff 76 04	 push	 DWORD PTR [esi+4]
  000e3	ff 76 48	 push	 DWORD PTR [esi+72]
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
  000eb	ff 76 34	 push	 DWORD PTR [esi+52]
  000ee	e8 00 00 00 00	 call	 _luaG_addinfo
  000f3	83 c4 10	 add	 esp, 16			; 00000010H
  000f6	6a 03		 push	 3
  000f8	ff 76 34	 push	 DWORD PTR [esi+52]
  000fb	e8 00 00 00 00	 call	 _luaD_throw
$LN41@skip_sep:
$LN39@skip_sep:
  00100	cc		 int	 3
_skip_sep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _read_numeral
_TEXT	SEGMENT
_obj$ = -20						; size = 16
_expo$1$ = -4						; size = 4
_c$1$ = 8						; size = 4
_c$1$ = 8						; size = 4
_c$1$ = 8						; size = 4
_ls$ = 8						; size = 4
_seminfo$ = 12						; size = 4
_read_numeral PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 244
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; Line 247
  00009	8b 7d 08	 mov	 edi, DWORD PTR _ls$[ebp]
  0000c	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_02GOGFPGCE@Ee?$AA@
  00011	89 5d fc	 mov	 DWORD PTR _expo$1$[ebp], ebx
  00014	8b 37		 mov	 esi, DWORD PTR [edi]
; Line 249
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 _save
  0001d	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00020	83 c4 08	 add	 esp, 8
  00023	8b 11		 mov	 edx, DWORD PTR [ecx]
  00025	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00028	89 01		 mov	 DWORD PTR [ecx], eax
  0002a	85 d2		 test	 edx, edx
  0002c	74 0f		 je	 SHORT $LN14@read_numer
  0002e	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00031	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00034	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00037	40		 inc	 eax
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0003b	eb 0d		 jmp	 SHORT $LN15@read_numer
$LN14@read_numer:
  0003d	ff 77 38	 push	 DWORD PTR [edi+56]
  00040	e8 00 00 00 00	 call	 _luaZ_fill
  00045	83 c4 04	 add	 esp, 4
  00048	8b d0		 mov	 edx, eax
$LN15@read_numer:
  0004a	89 17		 mov	 DWORD PTR [edi], edx
; Line 250
  0004c	83 fe 30	 cmp	 esi, 48			; 00000030H
  0004f	75 1f		 jne	 SHORT $LL10@read_numer
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_02CIDOMIFJ@xX?$AA@
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 _check_next2
  0005c	83 c4 08	 add	 esp, 8
  0005f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_02EDDNHBKL@Pp?$AA@
  00064	85 c0		 test	 eax, eax
  00066	0f 44 cb	 cmove	 ecx, ebx
  00069	8b d9		 mov	 ebx, ecx
  0006b	89 5d fc	 mov	 DWORD PTR _expo$1$[ebp], ebx
  0006e	8b ff		 npad	 2
$LL10@read_numer:
; Line 253
  00070	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00072	0f be 03	 movsx	 eax, BYTE PTR [ebx]
  00075	89 4d 08	 mov	 DWORD PTR _c$1$[ebp], ecx
  00078	3b c8		 cmp	 ecx, eax
  0007a	74 0c		 je	 SHORT $LN21@read_numer
  0007c	0f be 43 01	 movsx	 eax, BYTE PTR [ebx+1]
  00080	3b c8		 cmp	 ecx, eax
  00082	0f 85 e3 00 00
	00		 jne	 $LN49@read_numer
$LN21@read_numer:
  00088	8b 5f 3c	 mov	 ebx, DWORD PTR [edi+60]
  0008b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008e	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00091	40		 inc	 eax
  00092	3b c1		 cmp	 eax, ecx
  00094	76 23		 jbe	 SHORT $LN28@read_numer
  00096	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  0009c	0f 83 17 02 00
	00		 jae	 $LN158@read_numer
  000a2	8d 34 09	 lea	 esi, DWORD PTR [ecx+ecx]
  000a5	56		 push	 esi
  000a6	51		 push	 ecx
  000a7	ff 33		 push	 DWORD PTR [ebx]
  000a9	ff 77 34	 push	 DWORD PTR [edi+52]
  000ac	e8 00 00 00 00	 call	 _luaM_realloc_
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
  000b4	89 03		 mov	 DWORD PTR [ebx], eax
  000b6	89 73 08	 mov	 DWORD PTR [ebx+8], esi
$LN28@read_numer:
  000b9	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000bc	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000be	8b 55 08	 mov	 edx, DWORD PTR _c$1$[ebp]
  000c1	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000c4	ff 43 04	 inc	 DWORD PTR [ebx+4]
  000c7	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  000ca	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cc	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  000cf	89 01		 mov	 DWORD PTR [ecx], eax
  000d1	85 d2		 test	 edx, edx
  000d3	74 0f		 je	 SHORT $LN25@read_numer
  000d5	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  000d8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000db	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  000de	40		 inc	 eax
  000df	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000e2	eb 0d		 jmp	 SHORT $LN156@read_numer
$LN25@read_numer:
  000e4	ff 77 38	 push	 DWORD PTR [edi+56]
  000e7	e8 00 00 00 00	 call	 _luaZ_fill
  000ec	83 c4 04	 add	 esp, 4
  000ef	8b d0		 mov	 edx, eax
$LN156@read_numer:
  000f1	89 55 08	 mov	 DWORD PTR _c$1$[ebp], edx
  000f4	89 17		 mov	 DWORD PTR [edi], edx
; Line 254
  000f6	83 fa 2d	 cmp	 edx, 45			; 0000002dH
  000f9	74 05		 je	 SHORT $LN50@read_numer
  000fb	83 fa 2b	 cmp	 edx, 43			; 0000002bH
  000fe	75 6b		 jne	 SHORT $LN49@read_numer
$LN50@read_numer:
  00100	8b 5f 3c	 mov	 ebx, DWORD PTR [edi+60]
  00103	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00106	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00109	40		 inc	 eax
  0010a	3b c1		 cmp	 eax, ecx
  0010c	76 26		 jbe	 SHORT $LN57@read_numer
  0010e	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00114	0f 83 9f 01 00
	00		 jae	 $LN158@read_numer
  0011a	8d 34 09	 lea	 esi, DWORD PTR [ecx+ecx]
  0011d	56		 push	 esi
  0011e	51		 push	 ecx
  0011f	ff 33		 push	 DWORD PTR [ebx]
  00121	ff 77 34	 push	 DWORD PTR [edi+52]
  00124	e8 00 00 00 00	 call	 _luaM_realloc_
  00129	8b 55 08	 mov	 edx, DWORD PTR _c$1$[ebp]
  0012c	83 c4 10	 add	 esp, 16			; 00000010H
  0012f	89 03		 mov	 DWORD PTR [ebx], eax
  00131	89 73 08	 mov	 DWORD PTR [ebx+8], esi
$LN57@read_numer:
  00134	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00137	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00139	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0013c	ff 43 04	 inc	 DWORD PTR [ebx+4]
  0013f	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00142	8b 11		 mov	 edx, DWORD PTR [ecx]
  00144	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00147	89 01		 mov	 DWORD PTR [ecx], eax
  00149	85 d2		 test	 edx, edx
  0014b	74 0f		 je	 SHORT $LN54@read_numer
  0014d	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00150	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00153	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00156	40		 inc	 eax
  00157	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0015a	eb 0d		 jmp	 SHORT $LN55@read_numer
$LN54@read_numer:
  0015c	ff 77 38	 push	 DWORD PTR [edi+56]
  0015f	e8 00 00 00 00	 call	 _luaZ_fill
  00164	83 c4 04	 add	 esp, 4
  00167	8b d0		 mov	 edx, eax
$LN55@read_numer:
  00169	89 17		 mov	 DWORD PTR [edi], edx
$LN49@read_numer:
; Line 255
  0016b	8b 07		 mov	 eax, DWORD PTR [edi]
  0016d	89 45 08	 mov	 DWORD PTR _c$1$[ebp], eax
  00170	f6 80 01 00 00
	00 10		 test	 BYTE PTR _luai_ctype_[eax+1], 16 ; 00000010H
  00177	74 3e		 je	 SHORT $LN7@read_numer
; Line 256
  00179	8b 5f 3c	 mov	 ebx, DWORD PTR [edi+60]
  0017c	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0017f	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00182	40		 inc	 eax
  00183	3b c1		 cmp	 eax, ecx
  00185	76 23		 jbe	 SHORT $LN78@read_numer
  00187	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  0018d	0f 83 26 01 00
	00		 jae	 $LN158@read_numer
  00193	8d 34 09	 lea	 esi, DWORD PTR [ecx+ecx]
  00196	56		 push	 esi
  00197	51		 push	 ecx
  00198	ff 33		 push	 DWORD PTR [ebx]
  0019a	ff 77 34	 push	 DWORD PTR [edi+52]
  0019d	e8 00 00 00 00	 call	 _luaM_realloc_
  001a2	83 c4 10	 add	 esp, 16			; 00000010H
  001a5	89 03		 mov	 DWORD PTR [ebx], eax
  001a7	89 73 08	 mov	 DWORD PTR [ebx+8], esi
$LN78@read_numer:
  001aa	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  001ad	8b 03		 mov	 eax, DWORD PTR [ebx]
  001af	8b 55 08	 mov	 edx, DWORD PTR _c$1$[ebp]
  001b2	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001b5	eb 3f		 jmp	 SHORT $LN157@read_numer
$LN7@read_numer:
; Line 257
  001b7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  001ba	75 79		 jne	 SHORT $LN5@read_numer
; Line 258
  001bc	8b 5f 3c	 mov	 ebx, DWORD PTR [edi+60]
  001bf	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  001c2	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  001c5	40		 inc	 eax
  001c6	3b c1		 cmp	 eax, ecx
  001c8	76 23		 jbe	 SHORT $LN98@read_numer
  001ca	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  001d0	0f 83 e3 00 00
	00		 jae	 $LN158@read_numer
  001d6	8d 34 09	 lea	 esi, DWORD PTR [ecx+ecx]
  001d9	56		 push	 esi
  001da	51		 push	 ecx
  001db	ff 33		 push	 DWORD PTR [ebx]
  001dd	ff 77 34	 push	 DWORD PTR [edi+52]
  001e0	e8 00 00 00 00	 call	 _luaM_realloc_
  001e5	83 c4 10	 add	 esp, 16			; 00000010H
  001e8	89 03		 mov	 DWORD PTR [ebx], eax
  001ea	89 73 08	 mov	 DWORD PTR [ebx+8], esi
$LN98@read_numer:
  001ed	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001ef	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  001f2	c6 04 01 2e	 mov	 BYTE PTR [ecx+eax], 46	; 0000002eH
$LN157@read_numer:
  001f6	ff 43 04	 inc	 DWORD PTR [ebx+4]
  001f9	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  001fc	8b 11		 mov	 edx, DWORD PTR [ecx]
  001fe	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00201	89 01		 mov	 DWORD PTR [ecx], eax
  00203	85 d2		 test	 edx, edx
  00205	74 17		 je	 SHORT $LN18@read_numer
  00207	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
; Line 260
  0020a	8b 5d fc	 mov	 ebx, DWORD PTR _expo$1$[ebp]
  0020d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00210	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00213	40		 inc	 eax
  00214	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00217	89 17		 mov	 DWORD PTR [edi], edx
  00219	e9 52 fe ff ff	 jmp	 $LL10@read_numer
$LN18@read_numer:
; Line 258
  0021e	ff 77 38	 push	 DWORD PTR [edi+56]
  00221	e8 00 00 00 00	 call	 _luaZ_fill
; Line 260
  00226	8b 5d fc	 mov	 ebx, DWORD PTR _expo$1$[ebp]
  00229	8b d0		 mov	 edx, eax
  0022b	83 c4 04	 add	 esp, 4
  0022e	89 17		 mov	 DWORD PTR [edi], edx
  00230	e9 3b fe ff ff	 jmp	 $LL10@read_numer
$LN5@read_numer:
; Line 261
  00235	6a 00		 push	 0
  00237	57		 push	 edi
  00238	e8 00 00 00 00	 call	 _save
; Line 262
  0023d	8a 57 50	 mov	 dl, BYTE PTR [edi+80]
  00240	83 c4 08	 add	 esp, 8
  00243	80 fa 2e	 cmp	 dl, 46			; 0000002eH
  00246	74 1a		 je	 SHORT $LN129@read_numer
  00248	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  0024b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0024e	8b 00		 mov	 eax, DWORD PTR [eax]
  00250	85 c9		 test	 ecx, ecx
  00252	74 0e		 je	 SHORT $LN129@read_numer
$LL119@read_numer:
  00254	49		 dec	 ecx
  00255	80 3c 08 2e	 cmp	 BYTE PTR [eax+ecx], 46	; 0000002eH
  00259	75 03		 jne	 SHORT $LN117@read_numer
  0025b	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
$LN117@read_numer:
  0025e	85 c9		 test	 ecx, ecx
  00260	75 f2		 jne	 SHORT $LL119@read_numer
$LN129@read_numer:
; Line 263
  00262	8d 45 ec	 lea	 eax, DWORD PTR _obj$[ebp]
  00265	50		 push	 eax
  00266	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  00269	ff 30		 push	 DWORD PTR [eax]
  0026b	e8 00 00 00 00	 call	 _luaO_str2num
  00270	83 c4 08	 add	 esp, 8
  00273	85 c0		 test	 eax, eax
  00275	75 0d		 jne	 SHORT $LN3@read_numer
; Line 264
  00277	8d 45 ec	 lea	 eax, DWORD PTR _obj$[ebp]
  0027a	50		 push	 eax
  0027b	57		 push	 edi
  0027c	e8 00 00 00 00	 call	 _trydecpoint
  00281	83 c4 08	 add	 esp, 8
$LN3@read_numer:
; Line 265
  00284	83 7d f4 13	 cmp	 DWORD PTR _obj$[ebp+8], 19 ; 00000013H
  00288	5f		 pop	 edi
  00289	5e		 pop	 esi
  0028a	5b		 pop	 ebx
  0028b	75 17		 jne	 SHORT $LN2@read_numer
; Line 266
  0028d	8b 4d 0c	 mov	 ecx, DWORD PTR _seminfo$[ebp]
  00290	8b 45 ec	 mov	 eax, DWORD PTR _obj$[ebp]
  00293	89 01		 mov	 DWORD PTR [ecx], eax
  00295	8b 45 f0	 mov	 eax, DWORD PTR _obj$[ebp+4]
  00298	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; Line 267
  0029b	b8 23 01 00 00	 mov	 eax, 291		; 00000123H
; Line 274
  002a0	8b e5		 mov	 esp, ebp
  002a2	5d		 pop	 ebp
  002a3	c3		 ret	 0
$LN2@read_numer:
; Line 271
  002a4	8b 45 0c	 mov	 eax, DWORD PTR _seminfo$[ebp]
  002a7	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _obj$[ebp]
  002ac	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
; Line 272
  002b0	b8 22 01 00 00	 mov	 eax, 290		; 00000122H
; Line 274
  002b5	8b e5		 mov	 esp, ebp
  002b7	5d		 pop	 ebp
  002b8	c3		 ret	 0
$LN158@read_numer:
; Line 253
  002b9	ff 77 04	 push	 DWORD PTR [edi+4]
  002bc	ff 77 48	 push	 DWORD PTR [edi+72]
  002bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
  002c4	ff 77 34	 push	 DWORD PTR [edi+52]
  002c7	e8 00 00 00 00	 call	 _luaG_addinfo
  002cc	83 c4 10	 add	 esp, 16			; 00000010H
  002cf	6a 03		 push	 3
  002d1	ff 77 34	 push	 DWORD PTR [edi+52]
  002d4	e8 00 00 00 00	 call	 _luaD_throw
$LN159@read_numer:
$LN155@read_numer:
  002d9	cc		 int	 3
_read_numeral ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _trydecpoint
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_o$ = 12						; size = 4
_trydecpoint PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 227
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 228
  00005	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00008	8a 5e 50	 mov	 bl, BYTE PTR [esi+80]
; Line 229
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__localeconv
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	88 56 50	 mov	 BYTE PTR [esi+80], dl
; Line 230
  00018	3a da		 cmp	 bl, dl
  0001a	74 19		 je	 SHORT $LN18@trydecpoin
  0001c	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	8b 00		 mov	 eax, DWORD PTR [eax]
  00024	85 c9		 test	 ecx, ecx
  00026	74 0d		 je	 SHORT $LN18@trydecpoin
$LL6@trydecpoin:
  00028	49		 dec	 ecx
  00029	38 1c 08	 cmp	 BYTE PTR [eax+ecx], bl
  0002c	75 03		 jne	 SHORT $LN4@trydecpoin
  0002e	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
$LN4@trydecpoin:
  00031	85 c9		 test	 ecx, ecx
  00033	75 f3		 jne	 SHORT $LL6@trydecpoin
$LN18@trydecpoin:
; Line 231
  00035	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00038	ff 75 0c	 push	 DWORD PTR _o$[ebp]
  0003b	ff 30		 push	 DWORD PTR [eax]
  0003d	e8 00 00 00 00	 call	 _luaO_str2num
  00042	83 c4 08	 add	 esp, 8
  00045	85 c0		 test	 eax, eax
  00047	75 27		 jne	 SHORT $LN1@trydecpoin
; Line 233
  00049	8a 56 50	 mov	 dl, BYTE PTR [esi+80]
  0004c	80 fa 2e	 cmp	 dl, 46			; 0000002eH
  0004f	74 23		 je	 SHORT $LN25@trydecpoin
  00051	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00054	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00057	8b 00		 mov	 eax, DWORD PTR [eax]
  00059	85 c9		 test	 ecx, ecx
  0005b	74 17		 je	 SHORT $LN25@trydecpoin
  0005d	8d 49 00	 npad	 3
$LL12@trydecpoin:
  00060	49		 dec	 ecx
  00061	38 14 08	 cmp	 BYTE PTR [eax+ecx], dl
  00064	75 04		 jne	 SHORT $LN10@trydecpoin
  00066	c6 04 08 2e	 mov	 BYTE PTR [eax+ecx], 46	; 0000002eH
$LN10@trydecpoin:
  0006a	85 c9		 test	 ecx, ecx
  0006c	75 f2		 jne	 SHORT $LL12@trydecpoin
  0006e	eb 04		 jmp	 SHORT $LN25@trydecpoin
$LN1@trydecpoin:
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
; Line 236
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN25@trydecpoin:
; Line 234
  00074	68 22 01 00 00	 push	 290			; 00000122H
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CFMNENCE@malformed?5number?$AA@
  0007e	56		 push	 esi
  0007f	e8 00 00 00 00	 call	 _lexerror
$LN27@trydecpoin:
$LN24@trydecpoin:
  00084	cc		 int	 3
_trydecpoint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _buffreplace
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_from$ = 12						; size = 1
_to$ = 16						; size = 1
_buffreplace PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 213
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 214
  00003	8a 55 0c	 mov	 dl, BYTE PTR _from$[ebp]
  00006	53		 push	 ebx
  00007	8a 5d 10	 mov	 bl, BYTE PTR _to$[ebp]
  0000a	3a d3		 cmp	 dl, bl
  0000c	74 1f		 je	 SHORT $LN8@buffreplac
; Line 215
  0000e	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00011	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00014	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; Line 216
  00017	8b 09		 mov	 ecx, DWORD PTR [ecx]
; Line 217
  00019	85 c0		 test	 eax, eax
  0001b	74 10		 je	 SHORT $LN8@buffreplac
  0001d	8d 49 00	 npad	 3
$LL3@buffreplac:
  00020	48		 dec	 eax
; Line 218
  00021	38 14 01	 cmp	 BYTE PTR [ecx+eax], dl
  00024	75 03		 jne	 SHORT $LN1@buffreplac
  00026	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
$LN1@buffreplac:
; Line 217
  00029	85 c0		 test	 eax, eax
  0002b	75 f3		 jne	 SHORT $LL3@buffreplac
$LN8@buffreplac:
  0002d	5b		 pop	 ebx
; Line 220
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_buffreplace ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _check_next2
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_set$ = 12						; size = 4
_check_next2 PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 200
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 202
  00003	8b 55 0c	 mov	 edx, DWORD PTR _set$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  0000a	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0000d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000f	3b c8		 cmp	 ecx, eax
  00011	74 0d		 je	 SHORT $LN2@check_next
  00013	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  00017	3b c8		 cmp	 ecx, eax
  00019	74 05		 je	 SHORT $LN2@check_next
; Line 206
  0001b	33 c0		 xor	 eax, eax
  0001d	5e		 pop	 esi
; Line 207
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
$LN2@check_next:
; Line 203
  00020	51		 push	 ecx
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 _save
  00027	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002f	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00032	89 01		 mov	 DWORD PTR [ecx], eax
  00034	85 d2		 test	 edx, edx
  00036	74 17		 je	 SHORT $LN6@check_next
  00038	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0003b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003e	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00041	40		 inc	 eax
  00042	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; Line 204
  00045	b8 01 00 00 00	 mov	 eax, 1
  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	5e		 pop	 esi
; Line 207
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
$LN6@check_next:
; Line 203
  0004f	ff 76 38	 push	 DWORD PTR [esi+56]
  00052	e8 00 00 00 00	 call	 _luaZ_fill
  00057	83 c4 04	 add	 esp, 4
  0005a	8b d0		 mov	 edx, eax
  0005c	89 16		 mov	 DWORD PTR [esi], edx
; Line 204
  0005e	b8 01 00 00 00	 mov	 eax, 1
  00063	5e		 pop	 esi
; Line 207
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_check_next2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _check_next1
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_c$ = 12						; size = 4
_check_next1 PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 187
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 188
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	3b 45 0c	 cmp	 eax, DWORD PTR _c$[ebp]
  0000c	75 3c		 jne	 SHORT $LN2@check_next
; Line 189
  0000e	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00011	8b 11		 mov	 edx, DWORD PTR [ecx]
  00013	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00016	89 01		 mov	 DWORD PTR [ecx], eax
  00018	85 d2		 test	 edx, edx
  0001a	74 17		 je	 SHORT $LN5@check_next
  0001c	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0001f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00022	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00025	40		 inc	 eax
  00026	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; Line 190
  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	89 16		 mov	 DWORD PTR [esi], edx
  00030	5e		 pop	 esi
; Line 193
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN5@check_next:
; Line 189
  00033	ff 76 38	 push	 DWORD PTR [esi+56]
  00036	e8 00 00 00 00	 call	 _luaZ_fill
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b d0		 mov	 edx, eax
  00040	89 16		 mov	 DWORD PTR [esi], edx
; Line 190
  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	5e		 pop	 esi
; Line 193
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN2@check_next:
; Line 192
  0004a	33 c0		 xor	 eax, eax
  0004c	5e		 pop	 esi
; Line 193
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_check_next1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _inclinenumber
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_inclinenumber PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 151
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 152
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	57		 push	 edi
; Line 154
  00008	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0000b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00012	89 01		 mov	 DWORD PTR [ecx], eax
  00014	85 d2		 test	 edx, edx
  00016	74 0f		 je	 SHORT $LN6@inclinenum
  00018	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0001b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001e	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00021	40		 inc	 eax
  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00025	eb 0d		 jmp	 SHORT $LN7@inclinenum
$LN6@inclinenum:
  00027	ff 76 38	 push	 DWORD PTR [esi+56]
  0002a	e8 00 00 00 00	 call	 _luaZ_fill
  0002f	83 c4 04	 add	 esp, 4
  00032	8b d0		 mov	 edx, eax
$LN7@inclinenum:
  00034	89 16		 mov	 DWORD PTR [esi], edx
; Line 155
  00036	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00039	74 05		 je	 SHORT $LN2@inclinenum
  0003b	83 fa 0d	 cmp	 edx, 13			; 0000000dH
  0003e	75 30		 jne	 SHORT $LN3@inclinenum
$LN2@inclinenum:
  00040	3b d7		 cmp	 edx, edi
  00042	74 2c		 je	 SHORT $LN3@inclinenum
; Line 156
  00044	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00047	8b 11		 mov	 edx, DWORD PTR [ecx]
  00049	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0004c	89 01		 mov	 DWORD PTR [ecx], eax
  0004e	85 d2		 test	 edx, edx
  00050	74 0f		 je	 SHORT $LN8@inclinenum
  00052	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00055	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00058	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  0005b	40		 inc	 eax
  0005c	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0005f	eb 0d		 jmp	 SHORT $LN9@inclinenum
$LN8@inclinenum:
  00061	ff 76 38	 push	 DWORD PTR [esi+56]
  00064	e8 00 00 00 00	 call	 _luaZ_fill
  00069	83 c4 04	 add	 esp, 4
  0006c	8b d0		 mov	 edx, eax
$LN9@inclinenum:
  0006e	89 16		 mov	 DWORD PTR [esi], edx
$LN3@inclinenum:
; Line 157
  00070	ff 46 04	 inc	 DWORD PTR [esi+4]
  00073	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00076	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0007b	7d 04		 jge	 SHORT $LN31@inclinenum
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
; Line 159
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN31@inclinenum:
; Line 158
  00081	50		 push	 eax
  00082	ff 76 48	 push	 DWORD PTR [esi+72]
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LAKGPFF@chunk?5has?5too?5many?5lines?$AA@
  0008a	ff 76 34	 push	 DWORD PTR [esi+52]
  0008d	e8 00 00 00 00	 call	 _luaG_addinfo
  00092	83 c4 10	 add	 esp, 16			; 00000010H
  00095	6a 03		 push	 3
  00097	ff 76 34	 push	 DWORD PTR [esi+52]
  0009a	e8 00 00 00 00	 call	 _luaD_throw
$LN33@inclinenum:
$LN30@inclinenum:
  0009f	cc		 int	 3
_inclinenumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _txtToken
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_token$ = 12						; size = 4
_txtToken PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 97
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 98
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _token$[ebp]
  00006	8d 81 de fe ff
	ff		 lea	 eax, DWORD PTR [ecx-290]
  0000c	83 f8 03	 cmp	 eax, 3
  0000f	77 24		 ja	 SHORT $LN1@txtToken
; Line 101
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00015	6a 00		 push	 0
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 _save
; Line 102
  0001d	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00020	ff 30		 push	 DWORD PTR [eax]
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
  00027	ff 76 34	 push	 DWORD PTR [esi+52]
  0002a	e8 00 00 00 00	 call	 _luaO_pushfstring
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
  00032	5e		 pop	 esi
; Line 106
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN1@txtToken:
; Line 104
  00035	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  0003b	7d 16		 jge	 SHORT $LN17@txtToken
  0003d	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00040	51		 push	 ecx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_04ENIEGDOG@?8?$CFc?8?$AA@
  00046	ff 70 34	 push	 DWORD PTR [eax+52]
  00049	e8 00 00 00 00	 call	 _luaO_pushfstring
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 106
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
; Line 104
$LN17@txtToken:
  00053	8b 04 8d fc fb
	ff ff		 mov	 eax, DWORD PTR _luaX_tokens[ecx*4-1028]
  0005a	81 f9 21 01 00
	00		 cmp	 ecx, 289		; 00000121H
  00060	7d 14		 jge	 SHORT $LN3@txtToken
  00062	50		 push	 eax
  00063	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
  0006b	ff 70 34	 push	 DWORD PTR [eax+52]
  0006e	e8 00 00 00 00	 call	 _luaO_pushfstring
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@txtToken:
; Line 106
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_txtToken ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _save
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_c$ = 12						; size = 4
_save	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 57
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 58
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _ls$[ebp]
  00007	57		 push	 edi
  00008	8b 7b 3c	 mov	 edi, DWORD PTR [ebx+60]
; Line 59
  0000b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000e	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00011	40		 inc	 eax
  00012	3b c1		 cmp	 eax, ecx
  00014	76 21		 jbe	 SHORT $LN2@save
; Line 61
  00016	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  0001c	73 2b		 jae	 SHORT $LN22@save
; Line 63
  0001e	56		 push	 esi
  0001f	8d 34 09	 lea	 esi, DWORD PTR [ecx+ecx]
; Line 64
  00022	56		 push	 esi
  00023	51		 push	 ecx
  00024	ff 37		 push	 DWORD PTR [edi]
  00026	ff 73 34	 push	 DWORD PTR [ebx+52]
  00029	e8 00 00 00 00	 call	 _luaM_realloc_
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	89 77 08	 mov	 DWORD PTR [edi+8], esi
  00034	89 07		 mov	 DWORD PTR [edi], eax
  00036	5e		 pop	 esi
$LN2@save:
; Line 66
  00037	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0003a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0003c	8a 45 0c	 mov	 al, BYTE PTR _c$[ebp]
  0003f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00042	ff 47 04	 inc	 DWORD PTR [edi+4]
  00045	5f		 pop	 edi
  00046	5b		 pop	 ebx
; Line 67
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN22@save:
; Line 62
  00049	ff 73 04	 push	 DWORD PTR [ebx+4]
  0004c	ff 73 48	 push	 DWORD PTR [ebx+72]
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
  00054	ff 73 34	 push	 DWORD PTR [ebx+52]
  00057	e8 00 00 00 00	 call	 _luaG_addinfo
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	6a 03		 push	 3
  00061	ff 73 34	 push	 DWORD PTR [ebx+52]
  00064	e8 00 00 00 00	 call	 _luaD_throw
$LN24@save:
$LN21@save:
  00069	cc		 int	 3
_save	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _lexerror
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_msg$ = 12						; size = 4
_token$ = 16						; size = 4
_lexerror PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 109
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 110
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	57		 push	 edi
  00008	ff 76 04	 push	 DWORD PTR [esi+4]
  0000b	ff 76 48	 push	 DWORD PTR [esi+72]
  0000e	ff 75 0c	 push	 DWORD PTR _msg$[ebp]
  00011	ff 76 34	 push	 DWORD PTR [esi+52]
  00014	e8 00 00 00 00	 call	 _luaG_addinfo
; Line 111
  00019	8b 4d 10	 mov	 ecx, DWORD PTR _token$[ebp]
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	8b f8		 mov	 edi, eax
  00021	85 c9		 test	 ecx, ecx
  00023	74 19		 je	 SHORT $LN1@lexerror
; Line 112
  00025	51		 push	 ecx
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _txtToken
  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
  00033	ff 76 34	 push	 DWORD PTR [esi+52]
  00036	e8 00 00 00 00	 call	 _luaO_pushfstring
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@lexerror:
; Line 113
  0003e	6a 03		 push	 3
  00040	ff 76 34	 push	 DWORD PTR [esi+52]
  00043	e8 00 00 00 00	 call	 _luaD_throw
$LN5@lexerror:
$LN4@lexerror:
  00048	cc		 int	 3
_lexerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaX_token2str
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_token$ = 12						; size = 4
_luaX_token2str PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 82
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 83
  00003	8b 45 0c	 mov	 eax, DWORD PTR _token$[ebp]
  00006	3d 01 01 00 00	 cmp	 eax, 257		; 00000101H
  0000b	7d 16		 jge	 SHORT $LN4@luaX_token
; Line 85
  0000d	50		 push	 eax
  0000e	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_04ENIEGDOG@?8?$CFc?8?$AA@
  00016	ff 70 34	 push	 DWORD PTR [eax+52]
  00019	e8 00 00 00 00	 call	 _luaO_pushfstring
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 94
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN4@luaX_token:
; Line 88
  00023	8b 0c 85 fc fb
	ff ff		 mov	 ecx, DWORD PTR _luaX_tokens[eax*4-1028]
; Line 89
  0002a	3d 21 01 00 00	 cmp	 eax, 289		; 00000121H
  0002f	7d 16		 jge	 SHORT $LN2@luaX_token
; Line 90
  00031	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00034	51		 push	 ecx
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
  0003a	ff 70 34	 push	 DWORD PTR [eax+52]
  0003d	e8 00 00 00 00	 call	 _luaO_pushfstring
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 94
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN2@luaX_token:
; Line 92
  00047	8b c1		 mov	 eax, ecx
; Line 94
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_luaX_token2str ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaX_syntaxerror
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_msg$ = 12						; size = 4
_luaX_syntaxerror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 117
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 118
  00003	8b 45 08	 mov	 eax, DWORD PTR _ls$[ebp]
  00006	ff 70 10	 push	 DWORD PTR [eax+16]
  00009	ff 75 0c	 push	 DWORD PTR _msg$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _lexerror
$LN4@luaX_synta:
$LN3@luaX_synta:
  00012	cc		 int	 3
_luaX_syntaxerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaX_lookahead
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_luaX_lookahead PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 591
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 593
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00007	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  0000a	50		 push	 eax
  0000b	56		 push	 esi
  0000c	e8 00 00 00 00	 call	 _llex
  00011	83 c4 08	 add	 esp, 8
  00014	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00017	5e		 pop	 esi
; Line 595
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_luaX_lookahead ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaX_next
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_luaX_next PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 580
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 581
  00004	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 582
  00007	81 7e 20 21 01
	00 00		 cmp	 DWORD PTR [esi+32], 289	; 00000121H
  0000e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	74 14		 je	 SHORT $LN2@luaX_next
; Line 583
  00016	f3 0f 6f 46 20	 movdqu	 xmm0, XMMWORD PTR [esi+32]
; Line 584
  0001b	c7 46 20 21 01
	00 00		 mov	 DWORD PTR [esi+32], 289	; 00000121H
  00022	f3 0f 7f 46 10	 movdqu	 XMMWORD PTR [esi+16], xmm0
  00027	5e		 pop	 esi
; Line 588
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN2@luaX_next:
; Line 587
  0002a	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0002d	50		 push	 eax
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _llex
  00034	83 c4 08	 add	 esp, 8
  00037	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0003a	5e		 pop	 esi
; Line 588
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_luaX_next ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaX_newstring
_TEXT	SEGMENT
_ls$ = 8						; size = 4
_str$ = 12						; size = 4
_l$ = 16						; size = 4
_luaX_newstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 127
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 128
  00005	8b 75 08	 mov	 esi, DWORD PTR _ls$[ebp]
  00008	57		 push	 edi
; Line 130
  00009	ff 75 10	 push	 DWORD PTR _l$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR _str$[ebp]
  0000f	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 _luaS_newlstr
; Line 131
  00018	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  0001b	8b d8		 mov	 ebx, eax
  0001d	8d 4a 10	 lea	 ecx, DWORD PTR [edx+16]
  00020	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
  00023	89 1a		 mov	 DWORD PTR [edx], ebx
  00025	0f b6 4b 04	 movzx	 ecx, BYTE PTR [ebx+4]
  00029	83 c9 40	 or	 ecx, 64			; 00000040H
  0002c	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
; Line 132
  0002f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00032	83 e8 10	 sub	 eax, 16			; 00000010H
  00035	50		 push	 eax
  00036	ff 76 40	 push	 DWORD PTR [esi+64]
  00039	57		 push	 edi
  0003a	e8 00 00 00 00	 call	 _luaH_set
  0003f	83 c4 18	 add	 esp, 24			; 00000018H
; Line 133
  00042	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00046	75 2a		 jne	 SHORT $LN3@luaX_newst
; Line 136
  00048	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  0004e	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1
; Line 137
  00055	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00058	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0005c	7e 09		 jle	 SHORT $LN6@luaX_newst
  0005e	57		 push	 edi
  0005f	e8 00 00 00 00	 call	 _luaC_step
  00064	83 c4 04	 add	 esp, 4
$LN6@luaX_newst:
; Line 142
  00067	83 47 0c f0	 add	 DWORD PTR [edi+12], -16	; fffffff0H
; Line 143
  0006b	8b c3		 mov	 eax, ebx
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
; Line 144
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
$LN3@luaX_newst:
; Line 140
  00072	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
; Line 142
  00075	83 47 0c f0	 add	 DWORD PTR [edi+12], -16	; fffffff0H
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
; Line 144
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
_luaX_newstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaX_setinput
_TEXT	SEGMENT
_L$ = 8							; size = 4
_ls$ = 12						; size = 4
_z$ = 16						; size = 4
_source$ = 20						; size = 4
_firstchar$ = 24					; size = 4
_luaX_setinput PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 163
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 167
  00003	8b 45 18	 mov	 eax, DWORD PTR _firstchar$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _L$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _ls$[ebp]
; Line 174
  0000d	6a 04		 push	 4
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_04LJLBKCOP@_ENV?$AA@
  00014	51		 push	 ecx
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	8b 45 10	 mov	 eax, DWORD PTR _z$[ebp]
  0001a	89 46 38	 mov	 DWORD PTR [esi+56], eax
  0001d	8b 45 14	 mov	 eax, DWORD PTR _source$[ebp]
  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00027	c6 46 50 2e	 mov	 BYTE PTR [esi+80], 46	; 0000002eH
  0002b	89 4e 34	 mov	 DWORD PTR [esi+52], ecx
  0002e	c7 46 20 21 01
	00 00		 mov	 DWORD PTR [esi+32], 289	; 00000121H
  00035	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  0003c	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1
  00043	c7 46 08 01 00
	00 00		 mov	 DWORD PTR [esi+8], 1
  0004a	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0004d	e8 00 00 00 00	 call	 _luaS_newlstr
  00052	89 46 4c	 mov	 DWORD PTR [esi+76], eax
; Line 175
  00055	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00058	6a 20		 push	 32			; 00000020H
  0005a	ff 70 08	 push	 DWORD PTR [eax+8]
  0005d	ff 30		 push	 DWORD PTR [eax]
  0005f	ff 76 34	 push	 DWORD PTR [esi+52]
  00062	e8 00 00 00 00	 call	 _luaM_realloc_
  00067	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  0006a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006d	89 01		 mov	 DWORD PTR [ecx], eax
  0006f	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00072	5e		 pop	 esi
  00073	c7 40 08 20 00
	00 00		 mov	 DWORD PTR [eax+8], 32	; 00000020H
; Line 176
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_luaX_setinput ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT _luaX_init
_TEXT	SEGMENT
_L$ = 8							; size = 4
_luaX_init PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 70
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; Line 72
  00006	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00009	6a 04		 push	 4
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_04LJLBKCOP@_ENV?$AA@
  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 _luaS_newlstr
; Line 73
  00016	50		 push	 eax
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 _luaC_fix
  0001d	83 c4 14	 add	 esp, 20			; 00000014H
; Line 74
  00020	33 db		 xor	 ebx, ebx
$LL3@luaX_init:
; Line 75
  00022	ff 34 9d 00 00
	00 00		 push	 DWORD PTR _luaX_tokens[ebx*4]
  00029	57		 push	 edi
  0002a	e8 00 00 00 00	 call	 _luaS_new
  0002f	8b f0		 mov	 esi, eax
; Line 76
  00031	56		 push	 esi
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 _luaC_fix
; Line 77
  00038	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0003b	83 c4 10	 add	 esp, 16			; 00000010H
  0003e	43		 inc	 ebx
  0003f	88 4e 06	 mov	 BYTE PTR [esi+6], cl
  00042	83 fb 16	 cmp	 ebx, 22			; 00000016H
  00045	7c db		 jl	 SHORT $LL3@luaX_init
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
; Line 79
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_luaX_init ENDP
_TEXT	ENDS
END
