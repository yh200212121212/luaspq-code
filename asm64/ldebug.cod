; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	lua_getstack
PUBLIC	lua_getinfo
PUBLIC	lua_getlocal
PUBLIC	lua_setlocal
PUBLIC	lua_sethook
PUBLIC	lua_gethook
PUBLIC	lua_gethookmask
PUBLIC	lua_gethookcount
PUBLIC	luaG_typeerror
PUBLIC	luaG_concaterror
PUBLIC	luaG_opinterror
PUBLIC	luaG_tointerror
PUBLIC	luaG_ordererror
PUBLIC	luaG_runerror
PUBLIC	luaG_addinfo
PUBLIC	luaG_errormsg
PUBLIC	luaG_traceexec
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	??_C@_09DKIONLLI@?$CI?$CKvararg?$CJ?$AA@	; `string'
PUBLIC	??_C@_0N@NCKPGBEC@?$CI?$CKtemporary?$CJ?$AA@	; `string'
PUBLIC	??_C@_04BKJOMPG@?$DN?$FLC?$FN?$AA@		; `string'
PUBLIC	??_C@_01GFHCPBMG@C?$AA@				; `string'
PUBLIC	??_C@_02HENDHKBC@?$DN?$DP?$AA@			; `string'
PUBLIC	??_C@_04GHJNJNPO@main?$AA@			; `string'
PUBLIC	??_C@_03CBKFDHDL@Lua?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_05IDKHKMLA@local?$AA@			; `string'
PUBLIC	??_C@_04LJLBKCOP@_ENV?$AA@			; `string'
PUBLIC	??_C@_06FJKEMHGD@global?$AA@			; `string'
PUBLIC	??_C@_05EIBGDMPB@field?$AA@			; `string'
PUBLIC	??_C@_07NAGMKCIK@upvalue?$AA@			; `string'
PUBLIC	??_C@_08KFDOCAEB@constant?$AA@			; `string'
PUBLIC	??_C@_06GABBCIBA@method?$AA@			; `string'
PUBLIC	??_C@_04DGFIONEK@hook?$AA@			; `string'
PUBLIC	??_C@_0N@LEHLDOCH@for?5iterator?$AA@		; `string'
PUBLIC	??_C@_0L@ILHKGAHF@metamethod?$AA@		; `string'
PUBLIC	??_C@_0L@HICMLPOF@?5?$CI?$CFs?5?8?$CFs?8?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BL@BEEJNDFB@attempt?5to?5?$CFs?5a?5?$CFs?5value?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0M@LPKAOE@concatenate?$AA@		; `string'
PUBLIC	??_C@_0CH@EHJFDOFM@number?$CFs?5has?5no?5integer?5represen@ ; `string'
PUBLIC	??_C@_0CB@DEJMKNMB@attempt?5to?5compare?5two?5?$CFs?5values@ ; `string'
PUBLIC	??_C@_0BO@DNBGDDFP@attempt?5to?5compare?5?$CFs?5with?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_09BHPFBFOI@?$CFs?3?$CFd?3?5?$CFs?$AA@	; `string'
EXTRN	__imp_strchr:PROC
EXTRN	luaO_pushvfstring:PROC
EXTRN	luaO_pushfstring:PROC
EXTRN	luaO_chunkid:PROC
EXTRN	luaD_hook:PROC
EXTRN	luaD_callnoyield:PROC
EXTRN	luaD_throw:PROC
EXTRN	luaF_getlocalname:PROC
EXTRN	luaH_setint:PROC
EXTRN	luaH_new:PROC
EXTRN	luaV_tonumber_:PROC
EXTRN	luaV_tointeger:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	luaT_typenames_:BYTE
EXTRN	luaP_opmodes:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$lua_getinfo DD imagerel $LN17
	DD	imagerel $LN17+258
	DD	imagerel $unwind$lua_getinfo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lua_getlocal DD imagerel $LN16
	DD	imagerel $LN16+182
	DD	imagerel $unwind$lua_getlocal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lua_setlocal DD imagerel $LN12
	DD	imagerel $LN12+134
	DD	imagerel $unwind$lua_setlocal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaG_typeerror DD imagerel $LN4
	DD	imagerel $LN4+70
	DD	imagerel $unwind$luaG_typeerror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaG_concaterror DD imagerel $LN10
	DD	imagerel $LN10+82
	DD	imagerel $unwind$luaG_concaterror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaG_opinterror DD imagerel $LN7
	DD	imagerel $LN7+84
	DD	imagerel $unwind$luaG_opinterror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaG_tointerror DD imagerel $LN7
	DD	imagerel $LN7+92
	DD	imagerel $unwind$luaG_tointerror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaG_ordererror DD imagerel $LN6
	DD	imagerel $LN6+68
	DD	imagerel $unwind$luaG_ordererror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaG_runerror DD imagerel $LN11
	DD	imagerel $LN11+115
	DD	imagerel $unwind$luaG_runerror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaG_addinfo DD imagerel $LN8
	DD	imagerel $LN8+121
	DD	imagerel $unwind$luaG_addinfo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaG_errormsg DD imagerel $LN5
	DD	imagerel $LN5+89
	DD	imagerel $unwind$luaG_errormsg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaG_traceexec DD imagerel $LN23
	DD	imagerel $LN23+113
	DD	imagerel $unwind$luaG_traceexec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$luaG_traceexec DD imagerel $LN23+113
	DD	imagerel $LN23+266
	DD	imagerel $chain$0$luaG_traceexec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$luaG_traceexec DD imagerel $LN23+266
	DD	imagerel $LN23+315
	DD	imagerel $chain$1$luaG_traceexec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getfuncname DD imagerel getfuncname
	DD	imagerel getfuncname+412
	DD	imagerel $unwind$getfuncname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$findlocal DD imagerel findlocal
	DD	imagerel findlocal+258
	DD	imagerel $unwind$findlocal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$collectvalidlines DD imagerel collectvalidlines
	DD	imagerel collectvalidlines+44
	DD	imagerel $unwind$collectvalidlines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$collectvalidlines DD imagerel collectvalidlines+44
	DD	imagerel collectvalidlines+172
	DD	imagerel $chain$1$collectvalidlines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$collectvalidlines DD imagerel collectvalidlines+172
	DD	imagerel collectvalidlines+202
	DD	imagerel $chain$2$collectvalidlines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$auxgetinfo DD imagerel auxgetinfo
	DD	imagerel auxgetinfo+47
	DD	imagerel $unwind$auxgetinfo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$auxgetinfo DD imagerel auxgetinfo+47
	DD	imagerel auxgetinfo+367
	DD	imagerel $chain$1$auxgetinfo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$auxgetinfo DD imagerel auxgetinfo+367
	DD	imagerel auxgetinfo+392
	DD	imagerel $chain$2$auxgetinfo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$auxgetinfo DD imagerel auxgetinfo+392
	DD	imagerel auxgetinfo+462
	DD	imagerel $chain$3$auxgetinfo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getobjname DD imagerel getobjname
	DD	imagerel getobjname+588
	DD	imagerel $unwind$getobjname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$kname DD	imagerel kname
	DD	imagerel kname+88
	DD	imagerel $unwind$kname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$findsetreg DD imagerel findsetreg
	DD	imagerel findsetreg+36
	DD	imagerel $unwind$findsetreg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$findsetreg DD imagerel findsetreg+36
	DD	imagerel findsetreg+224
	DD	imagerel $chain$1$findsetreg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$findsetreg DD imagerel findsetreg+224
	DD	imagerel findsetreg+239
	DD	imagerel $chain$2$findsetreg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getupvalname DD imagerel getupvalname
	DD	imagerel getupvalname+129
	DD	imagerel $unwind$getupvalname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$varinfo DD imagerel varinfo
	DD	imagerel varinfo+304
	DD	imagerel $unwind$varinfo
pdata	ENDS
;	COMDAT ??_C@_09BHPFBFOI@?$CFs?3?$CFd?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_09BHPFBFOI@?$CFs?3?$CFd?3?5?$CFs?$AA@ DB '%s:%d: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DNBGDDFP@attempt?5to?5compare?5?$CFs?5with?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BO@DNBGDDFP@attempt?5to?5compare?5?$CFs?5with?5?$CFs?$AA@ DB 'atte'
	DB	'mpt to compare %s with %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DEJMKNMB@attempt?5to?5compare?5two?5?$CFs?5values@
CONST	SEGMENT
??_C@_0CB@DEJMKNMB@attempt?5to?5compare?5two?5?$CFs?5values@ DB 'attempt '
	DB	'to compare two %s values', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EHJFDOFM@number?$CFs?5has?5no?5integer?5represen@
CONST	SEGMENT
??_C@_0CH@EHJFDOFM@number?$CFs?5has?5no?5integer?5represen@ DB 'number%s '
	DB	'has no integer representation', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LPKAOE@concatenate?$AA@
CONST	SEGMENT
??_C@_0M@LPKAOE@concatenate?$AA@ DB 'concatenate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BEEJNDFB@attempt?5to?5?$CFs?5a?5?$CFs?5value?$CFs?$AA@
CONST	SEGMENT
??_C@_0BL@BEEJNDFB@attempt?5to?5?$CFs?5a?5?$CFs?5value?$CFs?$AA@ DB 'atte'
	DB	'mpt to %s a %s value%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HICMLPOF@?5?$CI?$CFs?5?8?$CFs?8?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@HICMLPOF@?5?$CI?$CFs?5?8?$CFs?8?$CJ?$AA@ DB ' (%s ''%s'')', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ILHKGAHF@metamethod?$AA@
CONST	SEGMENT
??_C@_0L@ILHKGAHF@metamethod?$AA@ DB 'metamethod', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEHLDOCH@for?5iterator?$AA@
CONST	SEGMENT
??_C@_0N@LEHLDOCH@for?5iterator?$AA@ DB 'for iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DGFIONEK@hook?$AA@
CONST	SEGMENT
??_C@_04DGFIONEK@hook?$AA@ DB 'hook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GABBCIBA@method?$AA@
CONST	SEGMENT
??_C@_06GABBCIBA@method?$AA@ DB 'method', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFDOCAEB@constant?$AA@
CONST	SEGMENT
??_C@_08KFDOCAEB@constant?$AA@ DB 'constant', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NAGMKCIK@upvalue?$AA@
CONST	SEGMENT
??_C@_07NAGMKCIK@upvalue?$AA@ DB 'upvalue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EIBGDMPB@field?$AA@
CONST	SEGMENT
??_C@_05EIBGDMPB@field?$AA@ DB 'field', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJKEMHGD@global?$AA@
CONST	SEGMENT
??_C@_06FJKEMHGD@global?$AA@ DB 'global', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LJLBKCOP@_ENV?$AA@
CONST	SEGMENT
??_C@_04LJLBKCOP@_ENV?$AA@ DB '_ENV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDKHKMLA@local?$AA@
CONST	SEGMENT
??_C@_05IDKHKMLA@local?$AA@ DB 'local', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03CBKFDHDL@Lua?$AA@
CONST	SEGMENT
??_C@_03CBKFDHDL@Lua?$AA@ DB 'Lua', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHJNJNPO@main?$AA@
CONST	SEGMENT
??_C@_04GHJNJNPO@main?$AA@ DB 'main', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HENDHKBC@?$DN?$DP?$AA@
CONST	SEGMENT
??_C@_02HENDHKBC@?$DN?$DP?$AA@ DB '=?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT
??_C@_01GFHCPBMG@C?$AA@ DB 'C', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKJOMPG@?$DN?$FLC?$FN?$AA@
CONST	SEGMENT
??_C@_04BKJOMPG@?$DN?$FLC?$FN?$AA@ DB '=[C]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NCKPGBEC@?$CI?$CKtemporary?$CJ?$AA@
CONST	SEGMENT
??_C@_0N@NCKPGBEC@?$CI?$CKtemporary?$CJ?$AA@ DB '(*temporary)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DKIONLLI@?$CI?$CKvararg?$CJ?$AA@
CONST	SEGMENT
??_C@_09DKIONLLI@?$CI?$CKvararg?$CJ?$AA@ DB '(*vararg)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$varinfo DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getupvalname DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$findsetreg DD 021H
	DD	imagerel findsetreg
	DD	imagerel findsetreg+36
	DD	imagerel $unwind$findsetreg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$findsetreg DD 040e21H
	DD	03e40eH
	DD	027405H
	DD	imagerel findsetreg
	DD	imagerel findsetreg+36
	DD	imagerel $unwind$findsetreg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$findsetreg DD 050b01H
	DD	05540bH
	DD	04340bH
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$kname DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getobjname DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$auxgetinfo DD 040021H
	DD	09d400H
	DD	086400H
	DD	imagerel auxgetinfo
	DD	imagerel auxgetinfo+47
	DD	imagerel $unwind$auxgetinfo
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$auxgetinfo DD 021H
	DD	imagerel auxgetinfo
	DD	imagerel auxgetinfo+47
	DD	imagerel $unwind$auxgetinfo
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$auxgetinfo DD 040f21H
	DD	09d40fH
	DD	086405H
	DD	imagerel auxgetinfo
	DD	imagerel auxgetinfo+47
	DD	imagerel $unwind$auxgetinfo
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$auxgetinfo DD 081301H
	DD	0b5413H
	DD	0a3413H
	DD	0f00f3213H
	DD	0700be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$collectvalidlines DD 021H
	DD	imagerel collectvalidlines
	DD	imagerel collectvalidlines+44
	DD	imagerel $unwind$collectvalidlines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$collectvalidlines DD 040a21H
	DD	09e40aH
	DD	086405H
	DD	imagerel collectvalidlines
	DD	imagerel collectvalidlines+44
	DD	imagerel $unwind$collectvalidlines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$collectvalidlines DD 060f01H
	DD	0b540fH
	DD	0a340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$findlocal DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getfuncname DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$luaG_traceexec DD 021H
	DD	imagerel $LN23
	DD	imagerel $LN23+113
	DD	imagerel $unwind$luaG_traceexec
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$luaG_traceexec DD 020521H
	DD	065405H
	DD	imagerel $LN23
	DD	imagerel $LN23+113
	DD	imagerel $unwind$luaG_traceexec
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaG_traceexec DD 081501H
	DD	097415H
	DD	086415H
	DD	073415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaG_errormsg DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaG_addinfo DD 041a19H
	DD	07004f20bH
	DD	030026003H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaG_runerror DD 031501H
	DD	070114215H
	DD	03010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaG_ordererror DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaG_tointerror DD 060f01H
	DD	08640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaG_opinterror DD 081401H
	DD	096414H
	DD	085414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaG_concaterror DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaG_typeerror DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lua_setlocal DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lua_getlocal DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lua_getinfo DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT varinfo
_TEXT	SEGMENT
name$ = 48
L$ = 48
o$ = 56
varinfo	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 546
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 548
  0000a	4c 8b 59 20	 mov	 r11, QWORD PTR [rcx+32]
  0000e	45 33 c9	 xor	 r9d, r9d
  00011	4c 8b d2	 mov	 r10, rdx
  00014	4c 89 4c 24 30	 mov	 QWORD PTR name$[rsp], r9
; Line 550
  00019	41 f6 43 42 02	 test	 BYTE PTR [r11+66], 2
  0001e	48 8b f9	 mov	 rdi, rcx
  00021	0f 84 f7 00 00
	00		 je	 $LN5@varinfo
; Line 551
  00027	49 8b 03	 mov	 rax, QWORD PTR [r11]
  0002a	45 8b c1	 mov	 r8d, r9d
  0002d	48 8b 18	 mov	 rbx, QWORD PTR [rax]
  00030	0f b6 53 0a	 movzx	 edx, BYTE PTR [rbx+10]
  00034	48 85 d2	 test	 rdx, rdx
  00037	7e 22		 jle	 SHORT $LN8@varinfo
  00039	48 8d 4b 20	 lea	 rcx, QWORD PTR [rbx+32]
  0003d	0f 1f 00	 npad	 3
$LL10@varinfo:
  00040	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00043	4c 39 10	 cmp	 QWORD PTR [rax], r10
  00046	0f 84 94 00 00
	00		 je	 $LN24@varinfo
  0004c	49 ff c0	 inc	 r8
  0004f	41 ff c1	 inc	 r9d
  00052	48 83 c1 08	 add	 rcx, 8
  00056	4c 3b c2	 cmp	 r8, rdx
  00059	7c e5		 jl	 SHORT $LL10@varinfo
$LN8@varinfo:
; Line 552
  0005b	49 8b 4b 20	 mov	 rcx, QWORD PTR [r11+32]
  0005f	49 8b d2	 mov	 rdx, r10
  00062	48 2b d1	 sub	 rdx, rcx
  00065	48 c1 fa 04	 sar	 rdx, 4
  00069	48 85 d2	 test	 rdx, rdx
  0006c	0f 88 ac 00 00
	00		 js	 $LN5@varinfo
  00072	49 8b 43 08	 mov	 rax, QWORD PTR [r11+8]
  00076	48 2b c1	 sub	 rax, rcx
  00079	48 c1 f8 04	 sar	 rax, 4
  0007d	48 3b d0	 cmp	 rdx, rax
  00080	0f 8d 98 00 00
	00		 jge	 $LN5@varinfo
  00086	48 8b c2	 mov	 rax, rdx
  00089	48 c1 e0 04	 shl	 rax, 4
  0008d	48 03 c1	 add	 rax, rcx
  00090	49 3b c2	 cmp	 rax, r10
  00093	0f 85 85 00 00
	00		 jne	 $LN5@varinfo
; Line 554
  00099	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  0009d	49 8b 43 28	 mov	 rax, QWORD PTR [r11+40]
  000a1	44 8b c2	 mov	 r8d, edx
  000a4	48 2b 41 38	 sub	 rax, QWORD PTR [rcx+56]
  000a8	4c 8d 4c 24 30	 lea	 r9, QWORD PTR name$[rsp]
  000ad	48 c1 f8 02	 sar	 rax, 2
  000b1	8d 50 ff	 lea	 edx, DWORD PTR [rax-1]
  000b4	e8 00 00 00 00	 call	 getobjname
; Line 556
  000b9	48 85 c0	 test	 rax, rax
  000bc	74 60		 je	 SHORT $LN5@varinfo
  000be	4c 8b 4c 24 30	 mov	 r9, QWORD PTR name$[rsp]
$LN28@varinfo:
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HICMLPOF@?5?$CI?$CFs?5?8?$CFs?8?$CJ?$AA@
  000ca	4c 8b c0	 mov	 r8, rax
  000cd	48 8b cf	 mov	 rcx, rdi
  000d0	e8 00 00 00 00	 call	 luaO_pushfstring
; Line 557
  000d5	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000da	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000de	5f		 pop	 rdi
  000df	c3		 ret	 0
$LN24@varinfo:
; Line 551
  000e0	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000e4	49 63 c9	 movsxd	 rcx, r9d
  000e7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000eb	48 03 c9	 add	 rcx, rcx
  000ee	4c 8b 0c c8	 mov	 r9, QWORD PTR [rax+rcx*8]
  000f2	4d 85 c9	 test	 r9, r9
  000f5	75 15		 jne	 SHORT $LN14@varinfo
  000f7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000fe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07NAGMKCIK@upvalue?$AA@
  00105	4c 89 4c 24 30	 mov	 QWORD PTR name$[rsp], r9
  0010a	eb b7		 jmp	 SHORT $LN28@varinfo
$LN14@varinfo:
  0010c	49 83 c1 18	 add	 r9, 24
  00110	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07NAGMKCIK@upvalue?$AA@
  00117	4c 89 4c 24 30	 mov	 QWORD PTR name$[rsp], r9
  0011c	eb a5		 jmp	 SHORT $LN28@varinfo
$LN5@varinfo:
; Line 556
  0011e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
; Line 557
  00125	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0012a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0012e	5f		 pop	 rdi
  0012f	c3		 ret	 0
varinfo	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getupvalname
_TEXT	SEGMENT
ci$ = 8
o$ = 16
name$ = 24
getupvalname PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 533
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
; Line 534
  00005	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; Line 536
  00008	45 33 d2	 xor	 r10d, r10d
  0000b	48 8b 18	 mov	 rbx, QWORD PTR [rax]
  0000e	45 8b ca	 mov	 r9d, r10d
  00011	44 0f b6 5b 0a	 movzx	 r11d, BYTE PTR [rbx+10]
  00016	4d 85 db	 test	 r11, r11
  00019	7e 1c		 jle	 SHORT $LN2@getupvalna
; Line 534
  0001b	48 8d 4b 20	 lea	 rcx, QWORD PTR [rbx+32]
  0001f	90		 npad	 1
$LL4@getupvalna:
; Line 537
  00020	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00023	48 39 10	 cmp	 QWORD PTR [rax], rdx
  00026	74 17		 je	 SHORT $LN12@getupvalna
; Line 536
  00028	49 ff c1	 inc	 r9
  0002b	41 ff c2	 inc	 r10d
  0002e	48 83 c1 08	 add	 rcx, 8
  00032	4d 3b cb	 cmp	 r9, r11
  00035	7c e9		 jl	 SHORT $LL4@getupvalna
$LN2@getupvalna:
; Line 542
  00037	33 c0		 xor	 eax, eax
; Line 543
  00039	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0003e	c3		 ret	 0
$LN12@getupvalna:
; Line 538
  0003f	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00043	49 63 ca	 movsxd	 rcx, r10d
  00046	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004a	48 03 c9	 add	 rcx, rcx
  0004d	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00051	48 85 c0	 test	 rax, rax
  00054	75 17		 jne	 SHORT $LN8@getupvalna
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  0005d	49 89 00	 mov	 QWORD PTR [r8], rax
; Line 539
  00060	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07NAGMKCIK@upvalue?$AA@
; Line 543
  00067	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0006c	c3		 ret	 0
; Line 538
$LN8@getupvalna:
; Line 543
  0006d	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00072	48 83 c0 18	 add	 rax, 24
  00076	49 89 00	 mov	 QWORD PTR [r8], rax
  00079	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07NAGMKCIK@upvalue?$AA@
  00080	c3		 ret	 0
getupvalname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT isinstack
_TEXT	SEGMENT
ci$ = 8
o$ = 16
isinstack PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 522
  00000	4c 8b 49 20	 mov	 r9, QWORD PTR [rcx+32]
  00004	4c 8b c2	 mov	 r8, rdx
  00007	4d 2b c1	 sub	 r8, r9
  0000a	49 c1 f8 04	 sar	 r8, 4
; Line 523
  0000e	4d 85 c0	 test	 r8, r8
  00011	78 22		 js	 SHORT $LN3@isinstack
  00013	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00017	49 2b c1	 sub	 rax, r9
  0001a	48 c1 f8 04	 sar	 rax, 4
  0001e	4c 3b c0	 cmp	 r8, rax
  00021	7d 12		 jge	 SHORT $LN3@isinstack
  00023	49 c1 e0 04	 shl	 r8, 4
  00027	4d 03 c1	 add	 r8, r9
  0002a	4c 3b c2	 cmp	 r8, rdx
  0002d	75 06		 jne	 SHORT $LN3@isinstack
  0002f	b8 01 00 00 00	 mov	 eax, 1
; Line 524
  00034	c3		 ret	 0
$LN3@isinstack:
; Line 523
  00035	33 c0		 xor	 eax, eax
; Line 524
  00037	c3		 ret	 0
isinstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT findsetreg
_TEXT	SEGMENT
p$ = 16
lastpc$ = 24
reg$ = 32
findsetreg PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 368
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	56		 push	 rsi
; Line 370
  0000b	83 cd ff	 or	 ebp, -1
; Line 371
  0000e	45 33 db	 xor	 r11d, r11d
  00011	41 8b d8	 mov	 ebx, r8d
  00014	8b f2		 mov	 esi, edx
  00016	44 8b cd	 mov	 r9d, ebp
; Line 372
  00019	41 8b c3	 mov	 eax, r11d
  0001c	85 d2		 test	 edx, edx
  0001e	0f 8e bc 00 00
	00		 jle	 $LN39@findsetreg
; Line 373
  00024	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi
  00029	48 8b 79 38	 mov	 rdi, QWORD PTR [rcx+56]
  0002d	4c 89 74 24 18	 mov	 QWORD PTR [rsp+24], r14
  00032	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:luaP_opmodes
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL16@findsetreg:
  00040	8b 17		 mov	 edx, DWORD PTR [rdi]
; Line 374
  00042	44 8b c2	 mov	 r8d, edx
; Line 375
  00045	8b ca		 mov	 ecx, edx
  00047	c1 e9 06	 shr	 ecx, 6
  0004a	41 83 e0 3f	 and	 r8d, 63			; 0000003fH
  0004e	44 0f b6 d1	 movzx	 r10d, cl
; Line 376
  00052	41 83 f8 04	 cmp	 r8d, 4
  00056	74 57		 je	 SHORT $LN11@findsetreg
  00058	41 83 f8 1e	 cmp	 r8d, 30
  0005c	74 34		 je	 SHORT $LN5@findsetreg
  0005e	41 83 f8 23	 cmp	 r8d, 35			; 00000023H
  00062	7e 1d		 jle	 SHORT $LN2@findsetreg
  00064	41 83 f8 25	 cmp	 r8d, 37			; 00000025H
  00068	7e 10		 jle	 SHORT $LN7@findsetreg
  0006a	41 83 f8 29	 cmp	 r8d, 41			; 00000029H
  0006e	75 11		 jne	 SHORT $LN2@findsetreg
; Line 384
  00070	41 8d 4a 02	 lea	 ecx, DWORD PTR [r10+2]
  00074	3b d9		 cmp	 ebx, ecx
  00076	7c 50		 jl	 SHORT $LN15@findsetreg
; Line 386
  00078	eb 44		 jmp	 SHORT $LN40@findsetreg
$LN7@findsetreg:
; Line 390
  0007a	41 3b da	 cmp	 ebx, r10d
  0007d	7c 49		 jl	 SHORT $LN15@findsetreg
; Line 392
  0007f	eb 3d		 jmp	 SHORT $LN40@findsetreg
$LN2@findsetreg:
; Line 405
  00081	49 63 c8	 movsxd	 rcx, r8d
  00084	42 f6 04 31 40	 test	 BYTE PTR [rcx+r14], 64	; 00000040H
  00089	74 3d		 je	 SHORT $LN15@findsetreg
  0008b	41 3b da	 cmp	 ebx, r10d
  0008e	75 38		 jne	 SHORT $LN15@findsetreg
; Line 407
  00090	eb 2c		 jmp	 SHORT $LN40@findsetreg
$LN5@findsetreg:
; Line 395
  00092	c1 ea 0e	 shr	 edx, 14
; Line 396
  00095	8d 88 02 00 fe
	ff		 lea	 ecx, DWORD PTR [rax-131070]
  0009b	03 ca		 add	 ecx, edx
; Line 398
  0009d	3b c1		 cmp	 eax, ecx
  0009f	7d 27		 jge	 SHORT $LN15@findsetreg
  000a1	3b ce		 cmp	 ecx, esi
  000a3	7f 23		 jg	 SHORT $LN15@findsetreg
; Line 399
  000a5	41 3b cb	 cmp	 ecx, r11d
  000a8	7e 1e		 jle	 SHORT $LN15@findsetreg
; Line 400
  000aa	44 8b d9	 mov	 r11d, ecx
; Line 402
  000ad	eb 19		 jmp	 SHORT $LN15@findsetreg
$LN11@findsetreg:
; Line 379
  000af	44 3b d3	 cmp	 r10d, ebx
  000b2	7f 14		 jg	 SHORT $LN15@findsetreg
  000b4	c1 ea 17	 shr	 edx, 23
  000b7	41 03 d2	 add	 edx, r10d
  000ba	3b da		 cmp	 ebx, edx
  000bc	7f 0a		 jg	 SHORT $LN15@findsetreg
$LN40@findsetreg:
; Line 380
  000be	44 8b c8	 mov	 r9d, eax
  000c1	41 3b c3	 cmp	 eax, r11d
  000c4	44 0f 4c cd	 cmovl	 r9d, ebp
$LN15@findsetreg:
; Line 372
  000c8	ff c0		 inc	 eax
  000ca	48 83 c7 04	 add	 rdi, 4
  000ce	3b c6		 cmp	 eax, esi
  000d0	0f 8c 6a ff ff
	ff		 jl	 $LL16@findsetreg
  000d6	4c 8b 74 24 18	 mov	 r14, QWORD PTR [rsp+24]
  000db	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
$LN39@findsetreg:
; Line 411
  000e0	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]
  000e5	48 8b 6c 24 28	 mov	 rbp, QWORD PTR [rsp+40]
  000ea	41 8b c1	 mov	 eax, r9d
  000ed	5e		 pop	 rsi
  000ee	c3		 ret	 0
findsetreg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT filterpc
_TEXT	SEGMENT
pc$ = 8
jmptarget$ = 16
filterpc PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 359
  00000	83 c8 ff	 or	 eax, -1
  00003	3b ca		 cmp	 ecx, edx
  00005	0f 4c c8	 cmovl	 ecx, eax
  00008	8b c1		 mov	 eax, ecx
; Line 362
  0000a	c3		 ret	 0
filterpc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT kname
_TEXT	SEGMENT
p$ = 48
pc$ = 56
c$ = 64
name$ = 72
kname	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 338
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	49 8b d9	 mov	 rbx, r9
; Line 339
  00009	41 0f ba e0 08	 bt	 r8d, 8
  0000e	73 29		 jae	 SHORT $LN4@kname
; Line 340
  00010	49 63 d0	 movsxd	 rdx, r8d
  00013	48 0f ba f2 08	 btr	 rdx, 8
  00018	48 c1 e2 04	 shl	 rdx, 4
  0001c	48 03 51 30	 add	 rdx, QWORD PTR [rcx+48]
; Line 341
  00020	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  00023	24 0f		 and	 al, 15
  00025	3c 04		 cmp	 al, 4
  00027	75 1f		 jne	 SHORT $LN1@kname
; Line 342
  00029	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0002c	48 83 c0 18	 add	 rax, 24
  00030	49 89 01	 mov	 QWORD PTR [r9], rax
; Line 355
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN4@kname:
; Line 348
  00039	e8 00 00 00 00	 call	 getobjname
; Line 349
  0003e	48 85 c0	 test	 rax, rax
  00041	74 05		 je	 SHORT $LN1@kname
  00043	80 38 63	 cmp	 BYTE PTR [rax], 99	; 00000063H
  00046	74 0a		 je	 SHORT $LN5@kname
$LN1@kname:
; Line 354
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  0004f	48 89 03	 mov	 QWORD PTR [rbx], rax
$LN5@kname:
; Line 355
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5b		 pop	 rbx
  00057	c3		 ret	 0
kname	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getobjname
_TEXT	SEGMENT
p$ = 48
lastpc$ = 56
reg$ = 64
name$ = 72
getobjname PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 415
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	8b da		 mov	 ebx, edx
; Line 417
  0001c	41 8d 50 01	 lea	 edx, DWORD PTR [r8+1]
  00020	41 8b f8	 mov	 edi, r8d
  00023	44 8b c3	 mov	 r8d, ebx
  00026	4d 8b f1	 mov	 r14, r9
  00029	48 8b f1	 mov	 rsi, rcx
  0002c	e8 00 00 00 00	 call	 luaF_getlocalname
  00031	49 89 06	 mov	 QWORD PTR [r14], rax
; Line 418
  00034	48 85 c0	 test	 rax, rax
  00037	75 72		 jne	 SHORT $LN31@getobjname
  00039	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:__ImageBase
$LL29@getobjname:
; Line 421
  00040	44 8b c7	 mov	 r8d, edi
  00043	8b d3		 mov	 edx, ebx
  00045	48 8b ce	 mov	 rcx, rsi
  00048	e8 00 00 00 00	 call	 findsetreg
  0004d	48 63 d8	 movsxd	 rbx, eax
; Line 422
  00050	83 fb ff	 cmp	 ebx, -1
  00053	0f 84 b8 01 00
	00		 je	 $LN1@getobjname
; Line 423
  00059	48 8b 46 38	 mov	 rax, QWORD PTR [rsi+56]
  0005d	44 8b 04 98	 mov	 r8d, DWORD PTR [rax+rbx*4]
; Line 424
  00061	41 8b d0	 mov	 edx, r8d
  00064	83 e2 3f	 and	 edx, 63			; 0000003fH
; Line 425
  00067	83 fa 0c	 cmp	 edx, 12
  0006a	0f 87 a1 01 00
	00		 ja	 $LN1@getobjname
  00070	48 63 c2	 movsxd	 rax, edx
  00073	8b 8c 85 00 00
	00 00		 mov	 ecx, DWORD PTR $LN36@getobjname[rbp+rax*4]
  0007a	48 03 cd	 add	 rcx, rbp
  0007d	ff e1		 jmp	 rcx
$LN8@getobjname:
; Line 427
  0007f	41 8b f8	 mov	 edi, r8d
; Line 428
  00082	41 c1 e8 06	 shr	 r8d, 6
  00086	41 0f b6 c0	 movzx	 eax, r8b
  0008a	c1 ef 17	 shr	 edi, 23
  0008d	3b f8		 cmp	 edi, eax
  0008f	0f 8d 7c 01 00
	00		 jge	 $LN1@getobjname
; Line 417
  00095	8d 57 01	 lea	 edx, DWORD PTR [rdi+1]
  00098	44 8b c3	 mov	 r8d, ebx
  0009b	48 8b ce	 mov	 rcx, rsi
  0009e	e8 00 00 00 00	 call	 luaF_getlocalname
  000a3	49 89 06	 mov	 QWORD PTR [r14], rax
; Line 418
  000a6	48 85 c0	 test	 rax, rax
  000a9	74 95		 je	 SHORT $LL29@getobjname
$LN31@getobjname:
; Line 419
  000ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05IDKHKMLA@local?$AA@
$LN13@getobjname:
; Line 465
  000b2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b7	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000bc	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000c1	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000c6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ca	41 5e		 pop	 r14
  000cc	c3		 ret	 0
$LN6@getobjname:
; Line 434
  000cd	41 8b e8	 mov	 ebp, r8d
; Line 435
  000d0	41 c1 e8 17	 shr	 r8d, 23
  000d4	c1 ed 0e	 shr	 ebp, 14
  000d7	81 e5 ff 01 00
	00		 and	 ebp, 511		; 000001ffH
; Line 438
  000dd	83 fa 07	 cmp	 edx, 7
  000e0	75 14		 jne	 SHORT $LN15@getobjname
  000e2	41 8d 50 01	 lea	 edx, DWORD PTR [r8+1]
  000e6	48 8b ce	 mov	 rcx, rsi
  000e9	44 8b c3	 mov	 r8d, ebx
  000ec	e8 00 00 00 00	 call	 luaF_getlocalname
  000f1	48 8b f8	 mov	 rdi, rax
  000f4	eb 20		 jmp	 SHORT $LN21@getobjname
$LN15@getobjname:
  000f6	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  000fa	41 8b c8	 mov	 ecx, r8d
  000fd	48 03 c9	 add	 rcx, rcx
  00100	48 8b 3c c8	 mov	 rdi, QWORD PTR [rax+rcx*8]
  00104	48 85 ff	 test	 rdi, rdi
  00107	75 09		 jne	 SHORT $LN22@getobjname
  00109	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00110	eb 04		 jmp	 SHORT $LN21@getobjname
$LN22@getobjname:
  00112	48 83 c7 18	 add	 rdi, 24
$LN21@getobjname:
; Line 439
  00116	4d 8b ce	 mov	 r9, r14
  00119	44 8b c5	 mov	 r8d, ebp
  0011c	8b d3		 mov	 edx, ebx
  0011e	48 8b ce	 mov	 rcx, rsi
  00121	e8 00 00 00 00	 call	 kname
; Line 440
  00126	48 85 ff	 test	 rdi, rdi
  00129	74 34		 je	 SHORT $LN17@getobjname
  0012b	33 c9		 xor	 ecx, ecx
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LJLBKCOP@_ENV?$AA@
  00134	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL35@getobjname:
  00140	0f b6 04 0f	 movzx	 eax, BYTE PTR [rdi+rcx]
  00144	48 ff c1	 inc	 rcx
  00147	3a 44 0a ff	 cmp	 al, BYTE PTR [rdx+rcx-1]
  0014b	75 12		 jne	 SHORT $LN17@getobjname
  0014d	48 83 f9 05	 cmp	 rcx, 5
  00151	75 ed		 jne	 SHORT $LL35@getobjname
  00153	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06FJKEMHGD@global?$AA@
  0015a	e9 53 ff ff ff	 jmp	 $LN13@getobjname
$LN17@getobjname:
  0015f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05EIBGDMPB@field?$AA@
  00166	e9 47 ff ff ff	 jmp	 $LN13@getobjname
$LN5@getobjname:
; Line 443
  0016b	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  0016f	41 c1 e8 17	 shr	 r8d, 23
  00173	41 8b c8	 mov	 ecx, r8d
  00176	48 03 c9	 add	 rcx, rcx
  00179	48 8b 3c c8	 mov	 rdi, QWORD PTR [rax+rcx*8]
  0017d	48 85 ff	 test	 rdi, rdi
  00180	75 16		 jne	 SHORT $LN26@getobjname
  00182	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
; Line 444
  00189	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07NAGMKCIK@upvalue?$AA@
  00190	49 89 3e	 mov	 QWORD PTR [r14], rdi
  00193	e9 1a ff ff ff	 jmp	 $LN13@getobjname
; Line 443
$LN26@getobjname:
  00198	48 83 c7 18	 add	 rdi, 24
; Line 444
  0019c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07NAGMKCIK@upvalue?$AA@
  001a3	49 89 3e	 mov	 QWORD PTR [r14], rdi
  001a6	e9 07 ff ff ff	 jmp	 $LN13@getobjname
$LN4@getobjname:
; Line 449
  001ab	83 fa 01	 cmp	 edx, 1
  001ae	75 06		 jne	 SHORT $LN19@getobjname
  001b0	41 c1 e8 0e	 shr	 r8d, 14
  001b4	eb 0d		 jmp	 SHORT $LN20@getobjname
$LN19@getobjname:
  001b6	48 8b 46 38	 mov	 rax, QWORD PTR [rsi+56]
  001ba	44 8b 44 98 04	 mov	 r8d, DWORD PTR [rax+rbx*4+4]
  001bf	41 c1 e8 06	 shr	 r8d, 6
$LN20@getobjname:
; Line 450
  001c3	49 63 d0	 movsxd	 rdx, r8d
  001c6	48 c1 e2 04	 shl	 rdx, 4
  001ca	48 03 56 30	 add	 rdx, QWORD PTR [rsi+48]
  001ce	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  001d1	24 0f		 and	 al, 15
  001d3	3c 04		 cmp	 al, 4
  001d5	75 3a		 jne	 SHORT $LN1@getobjname
; Line 451
  001d7	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  001da	48 83 c0 18	 add	 rax, 24
  001de	49 89 06	 mov	 QWORD PTR [r14], rax
; Line 452
  001e1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08KFDOCAEB@constant?$AA@
  001e8	e9 c5 fe ff ff	 jmp	 $LN13@getobjname
$LN2@getobjname:
; Line 458
  001ed	41 c1 e8 0e	 shr	 r8d, 14
  001f1	4d 8b ce	 mov	 r9, r14
  001f4	8b d3		 mov	 edx, ebx
  001f6	41 81 e0 ff 01
	00 00		 and	 r8d, 511		; 000001ffH
  001fd	48 8b ce	 mov	 rcx, rsi
  00200	e8 00 00 00 00	 call	 kname
; Line 459
  00205	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06GABBCIBA@method?$AA@
  0020c	e9 a1 fe ff ff	 jmp	 $LN13@getobjname
$LN1@getobjname:
; Line 464
  00211	33 c0		 xor	 eax, eax
  00213	e9 9a fe ff ff	 jmp	 $LN13@getobjname
$LN36@getobjname:
; Line 465
  00218	00 00 00 00	 DD	 $LN8@getobjname
  0021c	00 00 00 00	 DD	 $LN4@getobjname
  00220	00 00 00 00	 DD	 $LN4@getobjname
  00224	00 00 00 00	 DD	 $LN1@getobjname
  00228	00 00 00 00	 DD	 $LN1@getobjname
  0022c	00 00 00 00	 DD	 $LN5@getobjname
  00230	00 00 00 00	 DD	 $LN6@getobjname
  00234	00 00 00 00	 DD	 $LN6@getobjname
  00238	00 00 00 00	 DD	 $LN1@getobjname
  0023c	00 00 00 00	 DD	 $LN1@getobjname
  00240	00 00 00 00	 DD	 $LN1@getobjname
  00244	00 00 00 00	 DD	 $LN1@getobjname
  00248	00 00 00 00	 DD	 $LN2@getobjname
getobjname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT auxgetinfo
_TEXT	SEGMENT
L$ = 64
what$ = 72
ar$ = 80
f$ = 88
ci$ = 96
auxgetinfo PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 242
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	57		 push	 rdi
  0000b	41 56		 push	 r14
  0000d	41 57		 push	 r15
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 244
  00013	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00016	4d 8b f1	 mov	 r14, r9
  00019	49 8b f8	 mov	 rdi, r8
  0001c	48 8b da	 mov	 rbx, rdx
  0001f	4c 8b f9	 mov	 r15, rcx
  00022	bd 01 00 00 00	 mov	 ebp, 1
  00027	84 c0		 test	 al, al
  00029	0f 84 40 01 00
	00		 je	 $LN33@auxgetinfo
  0002f	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00034	48 8b 74 24 60	 mov	 rsi, QWORD PTR ci$[rsp]
  00039	4c 89 6c 24 48	 mov	 QWORD PTR [rsp+72], r13
  0003e	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:__ImageBase
  00045	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0004c	0f 1f 40 00	 npad	 4
$LL18@auxgetinfo:
; Line 245
  00050	0f be c0	 movsx	 eax, al
  00053	83 c0 b4	 add	 eax, -76		; ffffffffffffffb4H
  00056	83 f8 29	 cmp	 eax, 41			; 00000029H
  00059	0f 87 ee 00 00
	00		 ja	 $LN1@auxgetinfo
  0005f	48 98		 cdqe
  00061	41 0f b6 84 05
	00 00 00 00	 movzx	 eax, BYTE PTR $LN31@auxgetinfo[r13+rax]
  0006a	41 8b 8c 85 00
	00 00 00	 mov	 ecx, DWORD PTR $LN32@auxgetinfo[r13+rax*4]
  00072	49 03 cd	 add	 rcx, r13
  00075	ff e1		 jmp	 rcx
$LN13@auxgetinfo:
; Line 247
  00077	49 8b d6	 mov	 rdx, r14
  0007a	48 8b cf	 mov	 rcx, rdi
  0007d	e8 00 00 00 00	 call	 funcinfo
; Line 248
  00082	e9 c8 00 00 00	 jmp	 $LN17@auxgetinfo
$LN12@auxgetinfo:
; Line 251
  00087	48 85 f6	 test	 rsi, rsi
  0008a	74 16		 je	 SHORT $LN21@auxgetinfo
  0008c	f6 46 42 02	 test	 BYTE PTR [rsi+66], 2
  00090	74 10		 je	 SHORT $LN21@auxgetinfo
  00092	48 8b ce	 mov	 rcx, rsi
  00095	e8 00 00 00 00	 call	 currentline
  0009a	89 47 28	 mov	 DWORD PTR [rdi+40], eax
; Line 252
  0009d	e9 ad 00 00 00	 jmp	 $LN17@auxgetinfo
$LN21@auxgetinfo:
; Line 251
  000a2	83 c8 ff	 or	 eax, -1
  000a5	89 47 28	 mov	 DWORD PTR [rdi+40], eax
; Line 252
  000a8	e9 a2 00 00 00	 jmp	 $LN17@auxgetinfo
$LN11@auxgetinfo:
; Line 255
  000ad	4d 85 f6	 test	 r14, r14
  000b0	75 04		 jne	 SHORT $LN23@auxgetinfo
  000b2	33 c0		 xor	 eax, eax
  000b4	eb 05		 jmp	 SHORT $LN24@auxgetinfo
$LN23@auxgetinfo:
  000b6	41 0f b6 46 0a	 movzx	 eax, BYTE PTR [r14+10]
$LN24@auxgetinfo:
  000bb	88 47 34	 mov	 BYTE PTR [rdi+52], al
; Line 256
  000be	4d 85 f6	 test	 r14, r14
  000c1	74 1f		 je	 SHORT $LN9@auxgetinfo
  000c3	41 80 7e 08 26	 cmp	 BYTE PTR [r14+8], 38	; 00000026H
  000c8	74 18		 je	 SHORT $LN9@auxgetinfo
; Line 261
  000ca	49 8b 46 18	 mov	 rax, QWORD PTR [r14+24]
  000ce	0f b6 48 0b	 movzx	 ecx, BYTE PTR [rax+11]
  000d2	88 4f 36	 mov	 BYTE PTR [rdi+54], cl
; Line 262
  000d5	49 8b 46 18	 mov	 rax, QWORD PTR [r14+24]
  000d9	0f b6 48 0a	 movzx	 ecx, BYTE PTR [rax+10]
  000dd	88 4f 35	 mov	 BYTE PTR [rdi+53], cl
  000e0	eb 6d		 jmp	 SHORT $LN17@auxgetinfo
$LN9@auxgetinfo:
; Line 258
  000e2	66 c7 47 35 00
	01		 mov	 WORD PTR [rdi+53], 256	; 00000100H
; Line 264
  000e8	eb 65		 jmp	 SHORT $LN17@auxgetinfo
$LN7@auxgetinfo:
; Line 267
  000ea	48 85 f6	 test	 rsi, rsi
  000ed	74 0c		 je	 SHORT $LN25@auxgetinfo
  000ef	0f b6 46 42	 movzx	 eax, BYTE PTR [rsi+66]
  000f3	83 e0 20	 and	 eax, 32			; 00000020H
  000f6	88 47 37	 mov	 BYTE PTR [rdi+55], al
; Line 268
  000f9	eb 54		 jmp	 SHORT $LN17@auxgetinfo
$LN25@auxgetinfo:
; Line 267
  000fb	33 c0		 xor	 eax, eax
  000fd	88 47 37	 mov	 BYTE PTR [rdi+55], al
; Line 268
  00100	eb 4d		 jmp	 SHORT $LN17@auxgetinfo
$LN6@auxgetinfo:
; Line 272
  00102	48 85 f6	 test	 rsi, rsi
  00105	74 29		 je	 SHORT $LN5@auxgetinfo
  00107	f6 46 42 20	 test	 BYTE PTR [rsi+66], 32	; 00000020H
  0010b	75 23		 jne	 SHORT $LN5@auxgetinfo
  0010d	48 8b 56 10	 mov	 rdx, QWORD PTR [rsi+16]
  00111	f6 42 42 02	 test	 BYTE PTR [rdx+66], 2
  00115	74 19		 je	 SHORT $LN5@auxgetinfo
; Line 273
  00117	4c 8d 47 08	 lea	 r8, QWORD PTR [rdi+8]
  0011b	49 8b cf	 mov	 rcx, r15
  0011e	e8 00 00 00 00	 call	 getfuncname
; Line 274
  00123	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0012a	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax
  0012e	eb 08		 jmp	 SHORT $LN4@auxgetinfo
$LN5@auxgetinfo:
; Line 275
  00130	48 c7 47 10 00
	00 00 00	 mov	 QWORD PTR [rdi+16], 0
$LN4@auxgetinfo:
; Line 276
  00138	48 83 7f 10 00	 cmp	 QWORD PTR [rdi+16], 0
  0013d	75 10		 jne	 SHORT $LN17@auxgetinfo
; Line 277
  0013f	4c 89 47 10	 mov	 QWORD PTR [rdi+16], r8
; Line 278
  00143	48 c7 47 08 00
	00 00 00	 mov	 QWORD PTR [rdi+8], 0
; Line 280
  0014b	eb 02		 jmp	 SHORT $LN17@auxgetinfo
$LN1@auxgetinfo:
; Line 285
  0014d	33 ed		 xor	 ebp, ebp
$LN17@auxgetinfo:
; Line 244
  0014f	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]
  00153	48 ff c3	 inc	 rbx
  00156	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0015d	84 c0		 test	 al, al
  0015f	0f 85 eb fe ff
	ff		 jne	 $LL18@auxgetinfo
  00165	4c 8b 6c 24 48	 mov	 r13, QWORD PTR [rsp+72]
  0016a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
$LN33@auxgetinfo:
; Line 289
  0016f	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00174	8b c5		 mov	 eax, ebp
  00176	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0017b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0017f	41 5f		 pop	 r15
  00181	41 5e		 pop	 r14
  00183	5f		 pop	 rdi
  00184	c3		 ret	 0
  00185	0f 1f 00	 npad	 3
$LN32@auxgetinfo:
  00188	00 00 00 00	 DD	 $LN17@auxgetinfo
  0018c	00 00 00 00	 DD	 $LN13@auxgetinfo
  00190	00 00 00 00	 DD	 $LN12@auxgetinfo
  00194	00 00 00 00	 DD	 $LN6@auxgetinfo
  00198	00 00 00 00	 DD	 $LN7@auxgetinfo
  0019c	00 00 00 00	 DD	 $LN11@auxgetinfo
  001a0	00 00 00 00	 DD	 $LN1@auxgetinfo
$LN31@auxgetinfo:
  001a4	00		 DB	 0
  001a5	06		 DB	 6
  001a6	06		 DB	 6
  001a7	06		 DB	 6
  001a8	06		 DB	 6
  001a9	06		 DB	 6
  001aa	06		 DB	 6
  001ab	01		 DB	 1
  001ac	06		 DB	 6
  001ad	06		 DB	 6
  001ae	06		 DB	 6
  001af	06		 DB	 6
  001b0	06		 DB	 6
  001b1	06		 DB	 6
  001b2	06		 DB	 6
  001b3	06		 DB	 6
  001b4	06		 DB	 6
  001b5	06		 DB	 6
  001b6	06		 DB	 6
  001b7	06		 DB	 6
  001b8	06		 DB	 6
  001b9	06		 DB	 6
  001ba	06		 DB	 6
  001bb	06		 DB	 6
  001bc	06		 DB	 6
  001bd	06		 DB	 6
  001be	00		 DB	 0
  001bf	06		 DB	 6
  001c0	06		 DB	 6
  001c1	06		 DB	 6
  001c2	06		 DB	 6
  001c3	06		 DB	 6
  001c4	02		 DB	 2
  001c5	06		 DB	 6
  001c6	03		 DB	 3
  001c7	06		 DB	 6
  001c8	06		 DB	 6
  001c9	06		 DB	 6
  001ca	06		 DB	 6
  001cb	06		 DB	 6
  001cc	04		 DB	 4
  001cd	05		 DB	 5
auxgetinfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT collectvalidlines
_TEXT	SEGMENT
v$1 = 32
L$ = 64
f$ = 72
collectvalidlines PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 222
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b ea	 mov	 rbp, rdx
  00012	48 8b f9	 mov	 rdi, rcx
; Line 223
  00015	48 85 d2	 test	 rdx, rdx
  00018	0f 84 8e 00 00
	00		 je	 $LN5@collectval
  0001e	80 7a 08 26	 cmp	 BYTE PTR [rdx+8], 38	; 00000026H
  00022	0f 84 84 00 00
	00		 je	 $LN5@collectval
; Line 230
  00028	48 8b 42 18	 mov	 rax, QWORD PTR [rdx+24]
  0002c	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00031	4c 89 74 24 48	 mov	 QWORD PTR [rsp+72], r14
  00036	48 8b 70 48	 mov	 rsi, QWORD PTR [rax+72]
; Line 231
  0003a	e8 00 00 00 00	 call	 luaH_new
; Line 232
  0003f	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00043	48 89 01	 mov	 QWORD PTR [rcx], rax
  00046	c7 41 08 45 00
	00 00		 mov	 DWORD PTR [rcx+8], 69	; 00000045H
; Line 233
  0004d	48 83 47 10 10	 add	 QWORD PTR [rdi+16], 16
; Line 235
  00052	48 8b 4d 18	 mov	 rcx, QWORD PTR [rbp+24]
  00056	33 db		 xor	 ebx, ebx
  00058	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR v$1[rsp], 1
  00060	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR v$1[rsp+8], 1
  00068	4c 8b f0	 mov	 r14, rax
  0006b	39 59 1c	 cmp	 DWORD PTR [rcx+28], ebx
  0006e	7e 22		 jle	 SHORT $LN14@collectval
$LL3@collectval:
; Line 236
  00070	4c 63 06	 movsxd	 r8, DWORD PTR [rsi]
  00073	4c 8d 4c 24 20	 lea	 r9, QWORD PTR v$1[rsp]
  00078	49 8b d6	 mov	 rdx, r14
  0007b	48 8b cf	 mov	 rcx, rdi
  0007e	e8 00 00 00 00	 call	 luaH_setint
  00083	48 8b 45 18	 mov	 rax, QWORD PTR [rbp+24]
  00087	ff c3		 inc	 ebx
  00089	48 8d 76 04	 lea	 rsi, QWORD PTR [rsi+4]
  0008d	3b 58 1c	 cmp	 ebx, DWORD PTR [rax+28]
  00090	7c de		 jl	 SHORT $LL3@collectval
$LN14@collectval:
  00092	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00097	4c 8b 74 24 48	 mov	 r14, QWORD PTR [rsp+72]
; Line 238
  0009c	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000a1	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000a6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
$LN5@collectval:
; Line 224
  000ac	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
; Line 238
  000b0	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000b5	33 db		 xor	 ebx, ebx
  000b7	89 58 08	 mov	 DWORD PTR [rax+8], ebx
  000ba	48 83 41 10 10	 add	 QWORD PTR [rcx+16], 16
  000bf	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000c4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c8	5f		 pop	 rdi
  000c9	c3		 ret	 0
collectvalidlines ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT funcinfo
_TEXT	SEGMENT
ar$ = 8
cl$ = 16
funcinfo PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 204
  00000	48 8b c2	 mov	 rax, rdx
  00003	48 8b d1	 mov	 rdx, rcx
; Line 205
  00006	48 85 c0	 test	 rax, rax
  00009	74 4c		 je	 SHORT $LN2@funcinfo
  0000b	80 78 08 26	 cmp	 BYTE PTR [rax+8], 38	; 00000026H
  0000f	74 46		 je	 SHORT $LN2@funcinfo
; Line 212
  00011	4c 8b 40 18	 mov	 r8, QWORD PTR [rax+24]
; Line 213
  00015	49 8b 40 68	 mov	 rax, QWORD PTR [r8+104]
  00019	48 85 c0	 test	 rax, rax
  0001c	74 06		 je	 SHORT $LN6@funcinfo
  0001e	48 83 c0 18	 add	 rax, 24
  00022	eb 07		 jmp	 SHORT $LN7@funcinfo
$LN6@funcinfo:
  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02HENDHKBC@?$DN?$DP?$AA@
$LN7@funcinfo:
  0002b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
; Line 214
  0002f	41 8b 48 28	 mov	 ecx, DWORD PTR [r8+40]
  00033	89 4a 2c	 mov	 DWORD PTR [rdx+44], ecx
; Line 215
  00036	41 8b 40 2c	 mov	 eax, DWORD PTR [r8+44]
; Line 216
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04GHJNJNPO@main?$AA@
  00041	89 42 30	 mov	 DWORD PTR [rdx+48], eax
  00044	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03CBKFDHDL@Lua?$AA@
  0004b	85 c9		 test	 ecx, ecx
  0004d	49 0f 44 c0	 cmove	 rax, r8
  00051	48 89 42 18	 mov	 QWORD PTR [rdx+24], rax
  00055	eb 1e		 jmp	 SHORT $LN1@funcinfo
$LN2@funcinfo:
; Line 206
  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04BKJOMPG@?$DN?$FLC?$FN?$AA@
; Line 207
  0005e	48 c7 41 2c ff
	ff ff ff	 mov	 QWORD PTR [rcx+44], -1
  00066	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
; Line 209
  0006a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01GFHCPBMG@C?$AA@
  00071	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN1@funcinfo:
; Line 218
  00075	48 8d 4a 38	 lea	 rcx, QWORD PTR [rdx+56]
  00079	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  0007d	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  00083	e9 00 00 00 00	 jmp	 luaO_chunkid
funcinfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT findlocal
_TEXT	SEGMENT
L$ = 48
ci$ = 56
n$ = 64
pos$ = 72
findlocal PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 139
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 142
  0001a	f6 42 42 02	 test	 BYTE PTR [rdx+66], 2
  0001e	4d 8b f1	 mov	 r14, r9
  00021	49 63 d8	 movsxd	 rbx, r8d
  00024	48 8b fa	 mov	 rdi, rdx
  00027	48 8b e9	 mov	 rbp, rcx
  0002a	74 73		 je	 SHORT $LN7@findlocal
; Line 143
  0002c	45 85 c0	 test	 r8d, r8d
  0002f	79 40		 jns	 SHORT $LN6@findlocal
; Line 144
  00031	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00034	f7 db		 neg	 ebx
  00036	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00039	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0003d	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00041	44 0f b6 41 0a	 movzx	 r8d, BYTE PTR [rcx+10]
  00046	48 2b c2	 sub	 rax, rdx
  00049	48 c1 f8 04	 sar	 rax, 4
  0004d	41 2b c0	 sub	 eax, r8d
  00050	3b d8		 cmp	 ebx, eax
  00052	0f 8d 8d 00 00
	00		 jge	 $LN2@findlocal
  00058	48 63 cb	 movsxd	 rcx, ebx
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09DKIONLLI@?$CI?$CKvararg?$CJ?$AA@
  00062	49 03 c8	 add	 rcx, r8
  00065	48 c1 e1 04	 shl	 rcx, 4
  00069	48 03 ca	 add	 rcx, rdx
  0006c	49 89 09	 mov	 QWORD PTR [r9], rcx
  0006f	eb 76		 jmp	 SHORT $LN8@findlocal
$LN6@findlocal:
; Line 147
  00071	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00074	4c 8b 42 28	 mov	 r8, QWORD PTR [rdx+40]
  00078	48 8b 72 20	 mov	 rsi, QWORD PTR [rdx+32]
  0007c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0007f	8b d3		 mov	 edx, ebx
  00081	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00085	4c 2b 41 38	 sub	 r8, QWORD PTR [rcx+56]
  00089	49 c1 f8 02	 sar	 r8, 2
  0008d	41 ff c8	 dec	 r8d
  00090	e8 00 00 00 00	 call	 luaF_getlocalname
  00095	48 8b d0	 mov	 rdx, rax
; Line 152
  00098	48 85 c0	 test	 rax, rax
  0009b	75 33		 jne	 SHORT $LN1@findlocal
  0009d	eb 07		 jmp	 SHORT $LN18@findlocal
$LN7@findlocal:
; Line 151
  0009f	48 8b 32	 mov	 rsi, QWORD PTR [rdx]
  000a2	48 83 c6 10	 add	 rsi, 16
$LN18@findlocal:
; Line 153
  000a6	48 3b 7d 20	 cmp	 rdi, QWORD PTR [rbp+32]
  000aa	75 06		 jne	 SHORT $LN10@findlocal
  000ac	48 8b 4d 10	 mov	 rcx, QWORD PTR [rbp+16]
  000b0	eb 07		 jmp	 SHORT $LN11@findlocal
$LN10@findlocal:
  000b2	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  000b6	48 8b 08	 mov	 rcx, QWORD PTR [rax]
$LN11@findlocal:
; Line 154
  000b9	48 2b ce	 sub	 rcx, rsi
  000bc	48 c1 f9 04	 sar	 rcx, 4
  000c0	48 3b cb	 cmp	 rcx, rbx
  000c3	7c 20		 jl	 SHORT $LN2@findlocal
  000c5	85 db		 test	 ebx, ebx
  000c7	7e 1c		 jle	 SHORT $LN2@findlocal
; Line 155
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@NCKPGBEC@?$CI?$CKtemporary?$CJ?$AA@
$LN1@findlocal:
; Line 159
  000d0	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  000d3	48 63 c8	 movsxd	 rcx, eax
; Line 160
  000d6	48 8b c2	 mov	 rax, rdx
  000d9	48 c1 e1 04	 shl	 rcx, 4
  000dd	48 03 ce	 add	 rcx, rsi
  000e0	49 89 0e	 mov	 QWORD PTR [r14], rcx
  000e3	eb 02		 jmp	 SHORT $LN8@findlocal
$LN2@findlocal:
; Line 157
  000e5	33 c0		 xor	 eax, eax
$LN8@findlocal:
; Line 161
  000e7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ec	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000f1	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000f6	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000fb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ff	41 5e		 pop	 r14
  00101	c3		 ret	 0
findlocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT findvararg
_TEXT	SEGMENT
ci$ = 8
n$ = 16
pos$ = 24
findvararg PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 128
  00000	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  00003	49 8b 02	 mov	 rax, QWORD PTR [r10]
  00006	4c 8b 48 18	 mov	 r9, QWORD PTR [rax+24]
; Line 129
  0000a	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  0000e	45 0f b6 59 0a	 movzx	 r11d, BYTE PTR [r9+10]
  00013	49 2b c2	 sub	 rax, r10
  00016	48 c1 f8 04	 sar	 rax, 4
  0001a	41 2b c3	 sub	 eax, r11d
  0001d	3b d0		 cmp	 edx, eax
  0001f	7c 03		 jl	 SHORT $LN2@findvararg
; Line 130
  00021	33 c0		 xor	 eax, eax
; Line 135
  00023	c3		 ret	 0
$LN2@findvararg:
; Line 132
  00024	48 63 ca	 movsxd	 rcx, edx
; Line 133
  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09DKIONLLI@?$CI?$CKvararg?$CJ?$AA@
  0002e	49 03 cb	 add	 rcx, r11
  00031	48 c1 e1 04	 shl	 rcx, 4
  00035	49 03 ca	 add	 rcx, r10
  00038	49 89 08	 mov	 QWORD PTR [r8], rcx
; Line 135
  0003b	c3		 ret	 0
findvararg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT upvalname
_TEXT	SEGMENT
p$ = 8
uv$ = 16
upvalname PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 121
  00000	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00004	4c 63 c2	 movsxd	 r8, edx
  00007	4d 03 c0	 add	 r8, r8
  0000a	4a 8b 04 c0	 mov	 rax, QWORD PTR [rax+r8*8]
; Line 122
  0000e	48 85 c0	 test	 rax, rax
  00011	75 08		 jne	 SHORT $LN2@upvalname
  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
; Line 124
  0001a	c3		 ret	 0
$LN2@upvalname:
; Line 123
  0001b	48 83 c0 18	 add	 rax, 24
; Line 124
  0001f	c3		 ret	 0
upvalname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT swapextra
_TEXT	SEGMENT
L$ = 8
swapextra PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 62
  00000	80 79 0c 01	 cmp	 BYTE PTR [rcx+12], 1
  00004	75 1a		 jne	 SHORT $LN1@swapextra
; Line 63
  00006	4c 8b 41 20	 mov	 r8, QWORD PTR [rcx+32]
; Line 65
  0000a	48 8b 41 38	 mov	 rax, QWORD PTR [rcx+56]
  0000e	49 03 40 38	 add	 rax, QWORD PTR [r8+56]
  00012	49 8b 10	 mov	 rdx, QWORD PTR [r8]
  00015	49 89 00	 mov	 QWORD PTR [r8], rax
; Line 66
  00018	48 2b 51 38	 sub	 rdx, QWORD PTR [rcx+56]
  0001c	49 89 50 38	 mov	 QWORD PTR [r8+56], rdx
$LN1@swapextra:
; Line 68
  00020	c3		 ret	 0
swapextra ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT currentline
_TEXT	SEGMENT
ci$ = 8
currentline PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 51
  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00006	4c 8b 42 18	 mov	 r8, QWORD PTR [rdx+24]
  0000a	49 8b 50 48	 mov	 rdx, QWORD PTR [r8+72]
  0000e	48 85 d2	 test	 rdx, rdx
  00011	74 13		 je	 SHORT $LN3@currentlin
  00013	48 8b 41 28	 mov	 rax, QWORD PTR [rcx+40]
  00017	49 2b 40 38	 sub	 rax, QWORD PTR [r8+56]
  0001b	48 c1 f8 02	 sar	 rax, 2
  0001f	48 98		 cdqe
  00021	8b 44 82 fc	 mov	 eax, DWORD PTR [rdx+rax*4-4]
; Line 52
  00025	c3		 ret	 0
$LN3@currentlin:
; Line 51
  00026	83 c8 ff	 or	 eax, -1
; Line 52
  00029	c3		 ret	 0
currentline ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT currentpc
_TEXT	SEGMENT
ci$ = 8
currentpc PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 46
  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00006	48 8b 42 18	 mov	 rax, QWORD PTR [rdx+24]
  0000a	48 8b 51 28	 mov	 rdx, QWORD PTR [rcx+40]
  0000e	48 2b 50 38	 sub	 rdx, QWORD PTR [rax+56]
  00012	48 c1 fa 02	 sar	 rdx, 2
  00016	8d 42 ff	 lea	 eax, DWORD PTR [rdx-1]
; Line 47
  00019	c3		 ret	 0
currentpc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getfuncname
_TEXT	SEGMENT
L$ = 48
ci$ = 56
name$ = 64
getfuncname PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 468
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 470
  0000f	48 8b 02	 mov	 rax, QWORD PTR [rdx]
; Line 471
  00012	48 8b 5a 28	 mov	 rbx, QWORD PTR [rdx+40]
  00016	48 8b f1	 mov	 rsi, rcx
  00019	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  0001c	45 33 d2	 xor	 r10d, r10d
  0001f	4d 8b d8	 mov	 r11, r8
  00022	49 8b 79 18	 mov	 rdi, QWORD PTR [r9+24]
  00026	48 2b 5f 38	 sub	 rbx, QWORD PTR [rdi+56]
; Line 472
  0002a	48 8b 47 38	 mov	 rax, QWORD PTR [rdi+56]
  0002e	48 c1 fb 02	 sar	 rbx, 2
  00032	ff cb		 dec	 ebx
; Line 473
  00034	f6 42 42 04	 test	 BYTE PTR [rdx+66], 4
  00038	48 63 cb	 movsxd	 rcx, ebx
  0003b	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  0003e	74 21		 je	 SHORT $LN16@getfuncnam
; Line 474
  00040	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00047	49 89 00	 mov	 QWORD PTR [r8], rax
; Line 475
  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04DGFIONEK@hook?$AA@
; Line 510
  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
$LN16@getfuncnam:
; Line 477
  00061	44 8b c9	 mov	 r9d, ecx
  00064	41 83 e1 3f	 and	 r9d, 63			; 0000003fH
  00068	41 8d 41 fa	 lea	 eax, DWORD PTR [r9-6]
  0006c	83 f8 23	 cmp	 eax, 35			; 00000023H
  0006f	0f 87 a0 00 00
	00		 ja	 $LN1@getfuncnam
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  0007c	48 98		 cdqe
  0007e	0f b6 84 02 00
	00 00 00	 movzx	 eax, BYTE PTR $LN21@getfuncnam[rdx+rax]
  00086	44 8b 84 82 00
	00 00 00	 mov	 r8d, DWORD PTR $LN22@getfuncnam[rdx+rax*4]
  0008e	4c 03 c2	 add	 r8, rdx
  00091	41 ff e0	 jmp	 r8
$LN13@getfuncnam:
; Line 480
  00094	c1 e9 06	 shr	 ecx, 6
  00097	4d 8b cb	 mov	 r9, r11
  0009a	8b d3		 mov	 edx, ebx
  0009c	44 0f b6 c1	 movzx	 r8d, cl
  000a0	48 8b cf	 mov	 rcx, rdi
; Line 510
  000a3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a8	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000ad	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b1	5f		 pop	 rdi
; Line 480
  000b2	e9 00 00 00 00	 jmp	 getobjname
$LN12@getfuncnam:
; Line 482
  000b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@LEHLDOCH@for?5iterator?$AA@
  000be	49 89 03	 mov	 QWORD PTR [r11], rax
; Line 510
  000c1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c6	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000cb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cf	5f		 pop	 rdi
  000d0	c3		 ret	 0
$LN10@getfuncnam:
; Line 490
  000d1	41 ba 01 00 00
	00		 mov	 r10d, 1
; Line 491
  000d7	eb 3c		 jmp	 SHORT $LN1@getfuncnam
$LN9@getfuncnam:
; Line 496
  000d9	45 8d 51 f9	 lea	 r10d, DWORD PTR [r9-7]
; Line 497
  000dd	eb 36		 jmp	 SHORT $LN1@getfuncnam
$LN8@getfuncnam:
; Line 499
  000df	41 ba 12 00 00
	00		 mov	 r10d, 18
  000e5	eb 2e		 jmp	 SHORT $LN1@getfuncnam
$LN7@getfuncnam:
; Line 500
  000e7	41 ba 13 00 00
	00		 mov	 r10d, 19
  000ed	eb 26		 jmp	 SHORT $LN1@getfuncnam
$LN6@getfuncnam:
; Line 501
  000ef	41 ba 04 00 00
	00		 mov	 r10d, 4
  000f5	eb 1e		 jmp	 SHORT $LN1@getfuncnam
$LN5@getfuncnam:
; Line 502
  000f7	41 ba 16 00 00
	00		 mov	 r10d, 22
  000fd	eb 16		 jmp	 SHORT $LN1@getfuncnam
$LN4@getfuncnam:
; Line 503
  000ff	41 ba 05 00 00
	00		 mov	 r10d, 5
  00105	eb 0e		 jmp	 SHORT $LN1@getfuncnam
$LN3@getfuncnam:
; Line 504
  00107	41 ba 14 00 00
	00		 mov	 r10d, 20
  0010d	eb 06		 jmp	 SHORT $LN1@getfuncnam
$LN2@getfuncnam:
; Line 505
  0010f	41 ba 15 00 00
	00		 mov	 r10d, 21
$LN1@getfuncnam:
; Line 508
  00115	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]
; Line 510
  00119	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0011e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00123	49 63 ca	 movsxd	 rcx, r10d
  00126	48 8b 94 c8 e0
	00 00 00	 mov	 rdx, QWORD PTR [rax+rcx*8+224]
  0012e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@ILHKGAHF@metamethod?$AA@
  00135	48 83 c2 18	 add	 rdx, 24
  00139	49 89 13	 mov	 QWORD PTR [r11], rdx
  0013c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00140	5f		 pop	 rdi
  00141	c3		 ret	 0
  00142	66 90		 npad	 2
$LN22@getfuncnam:
  00144	00 00 00 00	 DD	 $LN1@getfuncnam
  00148	00 00 00 00	 DD	 $LN10@getfuncnam
  0014c	00 00 00 00	 DD	 $LN9@getfuncnam
  00150	00 00 00 00	 DD	 $LN8@getfuncnam
  00154	00 00 00 00	 DD	 $LN7@getfuncnam
  00158	00 00 00 00	 DD	 $LN6@getfuncnam
  0015c	00 00 00 00	 DD	 $LN5@getfuncnam
  00160	00 00 00 00	 DD	 $LN4@getfuncnam
  00164	00 00 00 00	 DD	 $LN3@getfuncnam
  00168	00 00 00 00	 DD	 $LN2@getfuncnam
  0016c	00 00 00 00	 DD	 $LN13@getfuncnam
  00170	00 00 00 00	 DD	 $LN12@getfuncnam
  00174	00 00 00 00	 DD	 $LN1@getfuncnam
$LN21@getfuncnam:
  00178	00		 DB	 0
  00179	00		 DB	 0
  0017a	01		 DB	 1
  0017b	0c		 DB	 12
  0017c	01		 DB	 1
  0017d	0c		 DB	 12
  0017e	00		 DB	 0
  0017f	02		 DB	 2
  00180	02		 DB	 2
  00181	02		 DB	 2
  00182	02		 DB	 2
  00183	02		 DB	 2
  00184	02		 DB	 2
  00185	02		 DB	 2
  00186	02		 DB	 2
  00187	02		 DB	 2
  00188	02		 DB	 2
  00189	02		 DB	 2
  0018a	02		 DB	 2
  0018b	03		 DB	 3
  0018c	04		 DB	 4
  0018d	0c		 DB	 12
  0018e	05		 DB	 5
  0018f	06		 DB	 6
  00190	0c		 DB	 12
  00191	07		 DB	 7
  00192	08		 DB	 8
  00193	09		 DB	 9
  00194	0c		 DB	 12
  00195	0c		 DB	 12
  00196	0a		 DB	 10
  00197	0a		 DB	 10
  00198	0c		 DB	 12
  00199	0c		 DB	 12
  0019a	0c		 DB	 12
  0019b	0b		 DB	 11
getfuncname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaG_traceexec
_TEXT	SEGMENT
L$ = 48
luaG_traceexec PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 640
$LN23:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 643
  00015	ff 89 c0 00 00
	00		 dec	 DWORD PTR [rcx+192]
  0001b	48 8b 79 20	 mov	 rdi, QWORD PTR [rcx+32]
  0001f	0f b6 b1 c8 00
	00 00		 movzx	 esi, BYTE PTR [rcx+200]
  00026	48 8b d9	 mov	 rbx, rcx
  00029	75 1a		 jne	 SHORT $LN13@luaG_trace
  0002b	40 f6 c6 08	 test	 sil, 8
  0002f	74 14		 je	 SHORT $LN13@luaG_trace
; Line 645
  00031	8b 81 bc 00 00
	00		 mov	 eax, DWORD PTR [rcx+188]
  00037	41 be 01 00 00
	00		 mov	 r14d, 1
  0003d	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  00043	eb 09		 jmp	 SHORT $LN8@luaG_trace
$LN13@luaG_trace:
; Line 643
  00045	45 33 f6	 xor	 r14d, r14d
; Line 646
  00048	40 f6 c6 04	 test	 sil, 4
  0004c	74 0d		 je	 SHORT $LN2@luaG_trace
$LN8@luaG_trace:
; Line 648
  0004e	0f b6 47 42	 movzx	 eax, BYTE PTR [rdi+66]
  00052	a8 40		 test	 al, 64			; 00000040H
  00054	74 1b		 je	 SHORT $LN7@luaG_trace
; Line 649
  00056	24 bf		 and	 al, 191			; 000000bfH
  00058	88 47 42	 mov	 BYTE PTR [rdi+66], al
$LN2@luaG_trace:
; Line 672
  0005b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00060	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00065	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	41 5e		 pop	 r14
  00070	c3		 ret	 0
$LN7@luaG_trace:
  00071	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
; Line 652
  00076	83 cd ff	 or	 ebp, -1
  00079	45 85 f6	 test	 r14d, r14d
  0007c	74 0b		 je	 SHORT $LN6@luaG_trace
; Line 653
  0007e	8d 55 04	 lea	 edx, QWORD PTR [rbp+4]
  00081	44 8b c5	 mov	 r8d, ebp
  00084	e8 00 00 00 00	 call	 luaD_hook
$LN6@luaG_trace:
; Line 654
  00089	40 f6 c6 04	 test	 sil, 4
  0008d	74 64		 je	 SHORT $LN4@luaG_trace
; Line 655
  0008f	48 8b 07	 mov	 rax, QWORD PTR [rdi]
; Line 656
  00092	4c 8b 4f 28	 mov	 r9, QWORD PTR [rdi+40]
  00096	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00099	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  0009d	49 8b c9	 mov	 rcx, r9
  000a0	4c 8b 50 38	 mov	 r10, QWORD PTR [rax+56]
; Line 657
  000a4	48 8b 50 48	 mov	 rdx, QWORD PTR [rax+72]
  000a8	49 2b ca	 sub	 rcx, r10
  000ab	48 c1 f9 02	 sar	 rcx, 2
  000af	ff c9		 dec	 ecx
  000b1	48 85 d2	 test	 rdx, rdx
  000b4	74 09		 je	 SHORT $LN15@luaG_trace
  000b6	48 63 c1	 movsxd	 rax, ecx
  000b9	44 8b 04 82	 mov	 r8d, DWORD PTR [rdx+rax*4]
  000bd	eb 03		 jmp	 SHORT $LN16@luaG_trace
$LN15@luaG_trace:
  000bf	44 8b c5	 mov	 r8d, ebp
$LN16@luaG_trace:
; Line 660
  000c2	85 c9		 test	 ecx, ecx
  000c4	74 20		 je	 SHORT $LN3@luaG_trace
  000c6	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  000ca	4c 3b c8	 cmp	 r9, rax
  000cd	76 17		 jbe	 SHORT $LN3@luaG_trace
  000cf	48 85 d2	 test	 rdx, rdx
  000d2	74 0d		 je	 SHORT $LN17@luaG_trace
  000d4	49 2b c2	 sub	 rax, r10
  000d7	48 c1 f8 02	 sar	 rax, 2
  000db	48 98		 cdqe
  000dd	8b 6c 82 fc	 mov	 ebp, DWORD PTR [rdx+rax*4-4]
$LN17@luaG_trace:
  000e1	44 3b c5	 cmp	 r8d, ebp
  000e4	74 0d		 je	 SHORT $LN4@luaG_trace
$LN3@luaG_trace:
; Line 661
  000e6	ba 02 00 00 00	 mov	 edx, 2
  000eb	48 8b cb	 mov	 rcx, rbx
  000ee	e8 00 00 00 00	 call	 luaD_hook
$LN4@luaG_trace:
; Line 664
  000f3	80 7b 0c 01	 cmp	 BYTE PTR [rbx+12], 1
  000f7	48 8b 47 28	 mov	 rax, QWORD PTR [rdi+40]
  000fb	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  00100	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  00104	0f 85 51 ff ff
	ff		 jne	 $LN2@luaG_trace
; Line 665
  0010a	45 85 f6	 test	 r14d, r14d
  0010d	74 0a		 je	 SHORT $LN1@luaG_trace
; Line 666
  0010f	c7 83 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+192], 1
$LN1@luaG_trace:
; Line 667
  00119	48 83 47 28 fc	 add	 QWORD PTR [rdi+40], -4
; Line 668
  0011e	80 4f 42 40	 or	 BYTE PTR [rdi+66], 64	; 00000040H
; Line 669
  00122	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00126	48 83 e8 10	 sub	 rax, 16
; Line 670
  0012a	ba 01 00 00 00	 mov	 edx, 1
  0012f	48 8b cb	 mov	 rcx, rbx
  00132	48 89 07	 mov	 QWORD PTR [rdi], rax
  00135	e8 00 00 00 00	 call	 luaD_throw
  0013a	cc		 int	 3
$LN20@luaG_trace:
luaG_traceexec ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaG_errormsg
_TEXT	SEGMENT
L$ = 48
luaG_errormsg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 615
$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 616
  00009	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  00010	48 85 c9	 test	 rcx, rcx
  00013	74 36		 je	 SHORT $LN1@luaG_error
; Line 618
  00015	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00019	48 8b 53 38	 mov	 rdx, QWORD PTR [rbx+56]
; Line 621
  0001d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00023	0f 10 40 f0	 movups	 xmm0, XMMWORD PTR [rax-16]
  00027	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
  0002a	0f 10 04 0a	 movups	 xmm0, XMMWORD PTR [rdx+rcx]
  0002e	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00032	48 8b cb	 mov	 rcx, rbx
  00035	0f 11 40 f0	 movups	 XMMWORD PTR [rax-16], xmm0
  00039	48 83 43 10 10	 add	 QWORD PTR [rbx+16], 16
  0003e	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  00042	48 83 c2 e0	 add	 rdx, -32		; ffffffffffffffe0H
  00046	e8 00 00 00 00	 call	 luaD_callnoyield
$LN1@luaG_error:
; Line 623
  0004b	ba 02 00 00 00	 mov	 edx, 2
  00050	48 8b cb	 mov	 rcx, rbx
  00053	e8 00 00 00 00	 call	 luaD_throw
  00058	cc		 int	 3
$LN4@luaG_error:
luaG_errormsg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaG_addinfo
_TEXT	SEGMENT
buff$ = 48
__$ArrayPad$ = 112
L$ = 160
msg$ = 168
src$ = 176
line$ = 184
luaG_addinfo PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 604
$LN8:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001a	41 8b f1	 mov	 esi, r9d
  0001d	48 8b fa	 mov	 rdi, rdx
  00020	48 8b d9	 mov	 rbx, rcx
; Line 606
  00023	4d 85 c0	 test	 r8, r8
  00026	74 16		 je	 SHORT $LN2@luaG_addin
; Line 607
  00028	49 8d 50 18	 lea	 rdx, QWORD PTR [r8+24]
  0002c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buff$[rsp]
  00031	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  00037	e8 00 00 00 00	 call	 luaO_chunkid
; Line 608
  0003c	eb 07		 jmp	 SHORT $LN1@luaG_addin
$LN2@luaG_addin:
; Line 609
  0003e	66 c7 44 24 30
	3f 00		 mov	 WORD PTR buff$[rsp], 63	; 0000003fH
$LN1@luaG_addin:
; Line 611
  00045	4c 8d 44 24 30	 lea	 r8, QWORD PTR buff$[rsp]
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09BHPFBFOI@?$CFs?3?$CFd?3?5?$CFs?$AA@
  00051	44 8b ce	 mov	 r9d, esi
  00054	48 8b cb	 mov	 rcx, rbx
  00057	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0005c	e8 00 00 00 00	 call	 luaO_pushfstring
; Line 612
  00061	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00066	48 33 cc	 xor	 rcx, rsp
  00069	e8 00 00 00 00	 call	 __security_check_cookie
  0006e	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00075	5f		 pop	 rdi
  00076	5e		 pop	 rsi
  00077	5b		 pop	 rbx
  00078	c3		 ret	 0
luaG_addinfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaG_runerror
_TEXT	SEGMENT
L$ = 64
fmt$ = 72
luaG_runerror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 627
$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000f	53		 push	 rbx
  00010	57		 push	 rdi
  00011	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 628
  00015	48 8b 79 20	 mov	 rdi, QWORD PTR [rcx+32]
; Line 631
  00019	4c 8d 44 24 50	 lea	 r8, QWORD PTR fmt$[rsp+8]
  0001e	48 8b d9	 mov	 rbx, rcx
; Line 632
  00021	e8 00 00 00 00	 call	 luaO_pushvfstring
; Line 634
  00026	f6 47 42 02	 test	 BYTE PTR [rdi+66], 2
  0002a	4c 8b d0	 mov	 r10, rax
  0002d	74 3b		 je	 SHORT $LN1@luaG_runer
; Line 635
  0002f	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  00032	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00035	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
  00039	49 8b 50 48	 mov	 rdx, QWORD PTR [r8+72]
  0003d	48 85 d2	 test	 rdx, rdx
  00040	74 15		 je	 SHORT $LN6@luaG_runer
  00042	48 8b 47 28	 mov	 rax, QWORD PTR [rdi+40]
  00046	49 2b 40 38	 sub	 rax, QWORD PTR [r8+56]
  0004a	48 c1 f8 02	 sar	 rax, 2
  0004e	48 98		 cdqe
  00050	44 8b 4c 82 fc	 mov	 r9d, DWORD PTR [rdx+rax*4-4]
  00055	eb 04		 jmp	 SHORT $LN7@luaG_runer
$LN6@luaG_runer:
  00057	41 83 c9 ff	 or	 r9d, -1
$LN7@luaG_runer:
  0005b	4d 8b 40 68	 mov	 r8, QWORD PTR [r8+104]
  0005f	49 8b d2	 mov	 rdx, r10
  00062	48 8b cb	 mov	 rcx, rbx
  00065	e8 00 00 00 00	 call	 luaG_addinfo
$LN1@luaG_runer:
; Line 636
  0006a	48 8b cb	 mov	 rcx, rbx
  0006d	e8 00 00 00 00	 call	 luaG_errormsg
  00072	cc		 int	 3
$LN10@luaG_runer:
luaG_runerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaG_ordererror
_TEXT	SEGMENT
L$ = 48
p1$ = 56
p2$ = 64
luaG_ordererror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 592
$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 593
  00004	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  00007	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:luaT_typenames_
  0000e	83 e0 0f	 and	 eax, 15
  00011	49 8b 54 c1 08	 mov	 rdx, QWORD PTR [r9+rax*8+8]
; Line 594
  00016	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  0001a	83 e0 0f	 and	 eax, 15
; Line 596
  0001d	4c 8b c2	 mov	 r8, rdx
  00020	4d 8b 4c c1 08	 mov	 r9, QWORD PTR [r9+rax*8+8]
  00025	49 3b d1	 cmp	 rdx, r9
  00028	75 0d		 jne	 SHORT $LN2@luaG_order
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@DEJMKNMB@attempt?5to?5compare?5two?5?$CFs?5values@
  00031	e8 00 00 00 00	 call	 luaG_runerror
  00036	cc		 int	 3
$LN2@luaG_order:
; Line 598
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DNBGDDFP@attempt?5to?5compare?5?$CFs?5with?5?$CFs?$AA@
  0003e	e8 00 00 00 00	 call	 luaG_runerror
  00043	cc		 int	 3
$LN5@luaG_order:
luaG_ordererror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaG_tointerror
_TEXT	SEGMENT
L$ = 48
temp$ = 56
p1$ = 56
p2$ = 64
luaG_tointerror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 584
$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 586
  0000f	83 7a 08 13	 cmp	 DWORD PTR [rdx+8], 19
  00013	49 8b f8	 mov	 rdi, r8
  00016	48 8b da	 mov	 rbx, rdx
  00019	48 8b f1	 mov	 rsi, rcx
  0001c	75 0a		 jne	 SHORT $LN4@luaG_toint
  0001e	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00021	48 89 44 24 38	 mov	 QWORD PTR temp$[rsp], rax
  00026	eb 16		 jmp	 SHORT $LN1@luaG_toint
$LN4@luaG_toint:
  00028	48 8d 54 24 38	 lea	 rdx, QWORD PTR temp$[rsp]
  0002d	45 33 c0	 xor	 r8d, r8d
  00030	48 8b cb	 mov	 rcx, rbx
  00033	e8 00 00 00 00	 call	 luaV_tointeger
  00038	85 c0		 test	 eax, eax
  0003a	48 0f 44 fb	 cmove	 rdi, rbx
$LN1@luaG_toint:
; Line 588
  0003e	48 8b d7	 mov	 rdx, rdi
  00041	48 8b ce	 mov	 rcx, rsi
  00044	e8 00 00 00 00	 call	 varinfo
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@EHJFDOFM@number?$CFs?5has?5no?5integer?5represen@
  00050	48 8b ce	 mov	 rcx, rsi
  00053	4c 8b c0	 mov	 r8, rax
  00056	e8 00 00 00 00	 call	 luaG_runerror
  0005b	cc		 int	 3
$LN6@luaG_toint:
luaG_tointerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaG_opinterror
_TEXT	SEGMENT
L$ = 48
temp$ = 56
p1$ = 56
p2$ = 64
msg$ = 72
luaG_opinterror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 573
$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 575
  00014	83 7a 08 03	 cmp	 DWORD PTR [rdx+8], 3
  00018	49 8b f1	 mov	 rsi, r9
  0001b	49 8b f8	 mov	 rdi, r8
  0001e	48 8b da	 mov	 rbx, rdx
  00021	48 8b e9	 mov	 rbp, rcx
  00024	75 0c		 jne	 SHORT $LN4@luaG_opint
  00026	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0002a	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR temp$[rsp], xmm0
  00030	eb 13		 jmp	 SHORT $LN1@luaG_opint
$LN4@luaG_opint:
  00032	48 8d 54 24 38	 lea	 rdx, QWORD PTR temp$[rsp]
  00037	48 8b cb	 mov	 rcx, rbx
  0003a	e8 00 00 00 00	 call	 luaV_tonumber_
  0003f	85 c0		 test	 eax, eax
  00041	48 0f 44 fb	 cmove	 rdi, rbx
$LN1@luaG_opint:
; Line 577
  00045	4c 8b c6	 mov	 r8, rsi
  00048	48 8b d7	 mov	 rdx, rdi
  0004b	48 8b cd	 mov	 rcx, rbp
  0004e	e8 00 00 00 00	 call	 luaG_typeerror
  00053	cc		 int	 3
$LN6@luaG_opint:
luaG_opinterror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaG_concaterror
_TEXT	SEGMENT
L$ = 64
p1$ = 72
p2$ = 80
luaG_concaterror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 566
$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 567
  0000a	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
; Line 568
  0000d	48 8d 1d 08 00
	00 00		 lea	 rbx, OFFSET FLAT:luaT_typenames_+8
  00014	48 8b f9	 mov	 rdi, rcx
  00017	83 e0 0f	 and	 eax, 15
  0001a	83 e8 03	 sub	 eax, 3
  0001d	83 f8 01	 cmp	 eax, 1
  00020	49 0f 46 d0	 cmovbe	 rdx, r8
  00024	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  00027	83 e0 0f	 and	 eax, 15
  0002a	48 8b 1c c3	 mov	 rbx, QWORD PTR [rbx+rax*8]
  0002e	e8 00 00 00 00	 call	 varinfo
  00033	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@LPKAOE@concatenate?$AA@
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@BEEJNDFB@attempt?5to?5?$CFs?5a?5?$CFs?5value?$CFs?$AA@
  00041	4c 8b cb	 mov	 r9, rbx
  00044	48 8b cf	 mov	 rcx, rdi
  00047	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004c	e8 00 00 00 00	 call	 luaG_runerror
  00051	cc		 int	 3
$LN9@luaG_conca:
luaG_concaterror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaG_typeerror
_TEXT	SEGMENT
L$ = 64
o$ = 72
op$ = 80
luaG_typeerror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 560
$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 561
  0000f	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  00012	48 8d 1d 08 00
	00 00		 lea	 rbx, OFFSET FLAT:luaT_typenames_+8
  00019	49 8b f8	 mov	 rdi, r8
  0001c	83 e0 0f	 and	 eax, 15
  0001f	48 8b f1	 mov	 rsi, rcx
  00022	48 8b 1c c3	 mov	 rbx, QWORD PTR [rbx+rax*8]
; Line 562
  00026	e8 00 00 00 00	 call	 varinfo
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@BEEJNDFB@attempt?5to?5?$CFs?5a?5?$CFs?5value?$CFs?$AA@
  00032	4c 8b cb	 mov	 r9, rbx
  00035	4c 8b c7	 mov	 r8, rdi
  00038	48 8b ce	 mov	 rcx, rsi
  0003b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00040	e8 00 00 00 00	 call	 luaG_runerror
  00045	cc		 int	 3
$LN3@luaG_typee:
luaG_typeerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lua_gethookcount
_TEXT	SEGMENT
L$ = 8
lua_gethookcount PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 99
  00000	8b 81 bc 00 00
	00		 mov	 eax, DWORD PTR [rcx+188]
; Line 100
  00006	c3		 ret	 0
lua_gethookcount ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lua_gethookmask
_TEXT	SEGMENT
L$ = 8
lua_gethookmask PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 94
  00000	0f b6 81 c8 00
	00 00		 movzx	 eax, BYTE PTR [rcx+200]
; Line 95
  00007	c3		 ret	 0
lua_gethookmask ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lua_gethook
_TEXT	SEGMENT
L$ = 8
lua_gethook PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 89
  00000	48 8b 81 a8 00
	00 00		 mov	 rax, QWORD PTR [rcx+168]
; Line 90
  00007	c3		 ret	 0
lua_gethook ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lua_sethook
_TEXT	SEGMENT
L$ = 8
func$ = 16
mask$ = 24
count$ = 32
lua_sethook PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 74
  00000	45 8b d0	 mov	 r10d, r8d
; Line 75
  00003	48 85 d2	 test	 rdx, rdx
  00006	74 05		 je	 SHORT $LN2@lua_sethoo
  00008	45 85 c0	 test	 r8d, r8d
  0000b	75 06		 jne	 SHORT $LN3@lua_sethoo
$LN2@lua_sethoo:
; Line 76
  0000d	45 33 d2	 xor	 r10d, r10d
; Line 77
  00010	41 8b d2	 mov	 edx, r10d
$LN3@lua_sethoo:
; Line 79
  00013	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00017	f6 40 42 02	 test	 BYTE PTR [rax+66], 2
  0001b	74 08		 je	 SHORT $LN1@lua_sethoo
; Line 80
  0001d	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00021	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
$LN1@lua_sethoo:
; Line 81
  00025	48 89 91 a8 00
	00 00		 mov	 QWORD PTR [rcx+168], rdx
; Line 82
  0002c	44 89 89 bc 00
	00 00		 mov	 DWORD PTR [rcx+188], r9d
; Line 83
  00033	44 89 89 c0 00
	00 00		 mov	 DWORD PTR [rcx+192], r9d
; Line 84
  0003a	44 88 91 c8 00
	00 00		 mov	 BYTE PTR [rcx+200], r10b
; Line 85
  00041	c3		 ret	 0
lua_sethook ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lua_setlocal
_TEXT	SEGMENT
pos$ = 48
L$ = 48
ar$ = 56
n$ = 64
lua_setlocal PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 188
$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 192
  00006	80 79 0c 01	 cmp	 BYTE PTR [rcx+12], 1
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0
  00016	75 1a		 jne	 SHORT $LN4@lua_setloc
  00018	4c 8b 51 20	 mov	 r10, QWORD PTR [rcx+32]
  0001c	48 8b 41 38	 mov	 rax, QWORD PTR [rcx+56]
  00020	49 03 42 38	 add	 rax, QWORD PTR [r10+56]
  00024	4d 8b 0a	 mov	 r9, QWORD PTR [r10]
  00027	49 89 02	 mov	 QWORD PTR [r10], rax
  0002a	4c 2b 49 38	 sub	 r9, QWORD PTR [rcx+56]
  0002e	4d 89 4a 38	 mov	 QWORD PTR [r10+56], r9
$LN4@lua_setloc:
; Line 193
  00032	48 8b 52 78	 mov	 rdx, QWORD PTR [rdx+120]
  00036	4c 8d 4c 24 30	 lea	 r9, QWORD PTR pos$[rsp]
  0003b	e8 00 00 00 00	 call	 findlocal
  00040	4c 8b c0	 mov	 r8, rax
; Line 194
  00043	48 85 c0	 test	 rax, rax
  00046	74 15		 je	 SHORT $LN1@lua_setloc
; Line 195
  00048	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0004c	48 8b 54 24 30	 mov	 rdx, QWORD PTR pos$[rsp]
  00051	0f 10 41 f0	 movups	 xmm0, XMMWORD PTR [rcx-16]
  00055	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
; Line 196
  00058	48 83 43 10 f0	 add	 QWORD PTR [rbx+16], -16
$LN1@lua_setloc:
; Line 198
  0005d	80 7b 0c 01	 cmp	 BYTE PTR [rbx+12], 1
  00061	75 1d		 jne	 SHORT $LN7@lua_setloc
  00063	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  00067	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  0006b	48 03 42 38	 add	 rax, QWORD PTR [rdx+56]
  0006f	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00072	48 89 02	 mov	 QWORD PTR [rdx], rax
  00075	48 2b 4b 38	 sub	 rcx, QWORD PTR [rbx+56]
; Line 200
  00079	49 8b c0	 mov	 rax, r8
  0007c	48 89 4a 38	 mov	 QWORD PTR [rdx+56], rcx
$LN7@lua_setloc:
; Line 201
  00080	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00084	5b		 pop	 rbx
  00085	c3		 ret	 0
lua_setlocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lua_getlocal
_TEXT	SEGMENT
pos$1 = 48
L$ = 48
ar$ = 56
n$ = 64
lua_getlocal PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 164
$LN16:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 167
  00006	80 79 0c 01	 cmp	 BYTE PTR [rcx+12], 1
  0000a	45 8b d8	 mov	 r11d, r8d
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	75 1a		 jne	 SHORT $LN8@lua_getloc
  00012	4c 8b 51 20	 mov	 r10, QWORD PTR [rcx+32]
  00016	48 8b 41 38	 mov	 rax, QWORD PTR [rcx+56]
  0001a	49 03 42 38	 add	 rax, QWORD PTR [r10+56]
  0001e	4d 8b 0a	 mov	 r9, QWORD PTR [r10]
  00021	49 89 02	 mov	 QWORD PTR [r10], rax
  00024	4c 2b 49 38	 sub	 r9, QWORD PTR [rcx+56]
  00028	4d 89 4a 38	 mov	 QWORD PTR [r10+56], r9
$LN8@lua_getloc:
; Line 168
  0002c	48 85 d2	 test	 rdx, rdx
  0002f	75 27		 jne	 SHORT $LN5@lua_getloc
; Line 169
  00031	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00035	83 79 f8 46	 cmp	 DWORD PTR [rcx-8], 70	; 00000046H
  00039	74 05		 je	 SHORT $LN4@lua_getloc
; Line 170
  0003b	45 33 c0	 xor	 r8d, r8d
; Line 171
  0003e	eb 4d		 jmp	 SHORT $LN1@lua_getloc
$LN4@lua_getloc:
; Line 172
  00040	48 8b 49 f0	 mov	 rcx, QWORD PTR [rcx-16]
  00044	45 33 c0	 xor	 r8d, r8d
  00047	41 8b d3	 mov	 edx, r11d
  0004a	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0004e	e8 00 00 00 00	 call	 luaF_getlocalname
  00053	4c 8b c0	 mov	 r8, rax
; Line 174
  00056	eb 35		 jmp	 SHORT $LN1@lua_getloc
$LN5@lua_getloc:
; Line 176
  00058	48 8b 52 78	 mov	 rdx, QWORD PTR [rdx+120]
  0005c	45 33 c0	 xor	 r8d, r8d
  0005f	4c 8d 4c 24 30	 lea	 r9, QWORD PTR pos$1[rsp]
  00064	4c 89 44 24 30	 mov	 QWORD PTR pos$1[rsp], r8
  00069	45 8b c3	 mov	 r8d, r11d
  0006c	e8 00 00 00 00	 call	 findlocal
  00071	4c 8b c0	 mov	 r8, rax
; Line 177
  00074	48 85 c0	 test	 rax, rax
  00077	74 14		 je	 SHORT $LN1@lua_getloc
; Line 178
  00079	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0007d	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$1[rsp]
  00082	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00085	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
; Line 179
  00088	48 83 43 10 10	 add	 QWORD PTR [rbx+16], 16
$LN1@lua_getloc:
; Line 182
  0008d	80 7b 0c 01	 cmp	 BYTE PTR [rbx+12], 1
  00091	75 1a		 jne	 SHORT $LN14@lua_getloc
  00093	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  00097	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  0009b	48 03 42 38	 add	 rax, QWORD PTR [rdx+56]
  0009f	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  000a2	48 89 02	 mov	 QWORD PTR [rdx], rax
  000a5	48 2b 4b 38	 sub	 rcx, QWORD PTR [rbx+56]
  000a9	48 89 4a 38	 mov	 QWORD PTR [rdx+56], rcx
$LN14@lua_getloc:
; Line 184
  000ad	49 8b c0	 mov	 rax, r8
; Line 185
  000b0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b4	5b		 pop	 rbx
  000b5	c3		 ret	 0
lua_getlocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lua_getinfo
_TEXT	SEGMENT
L$ = 64
what$ = 72
ar$ = 80
lua_getinfo PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 292
$LN17:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 298
  0001a	80 79 0c 01	 cmp	 BYTE PTR [rcx+12], 1
  0001e	48 8b f2	 mov	 rsi, rdx
  00021	48 8b d9	 mov	 rbx, rcx
  00024	75 1a		 jne	 SHORT $LN9@lua_getinf
  00026	4c 8b 51 20	 mov	 r10, QWORD PTR [rcx+32]
  0002a	48 8b 41 38	 mov	 rax, QWORD PTR [rcx+56]
  0002e	49 03 42 38	 add	 rax, QWORD PTR [r10+56]
  00032	4d 8b 0a	 mov	 r9, QWORD PTR [r10]
  00035	49 89 02	 mov	 QWORD PTR [r10], rax
  00038	4c 2b 49 38	 sub	 r9, QWORD PTR [rcx+56]
  0003c	4d 89 4a 38	 mov	 QWORD PTR [r10+56], r9
$LN9@lua_getinf:
; Line 299
  00040	33 ed		 xor	 ebp, ebp
  00042	80 3a 3e	 cmp	 BYTE PTR [rdx], 62	; 0000003eH
  00045	75 13		 jne	 SHORT $LN4@lua_getinf
; Line 301
  00047	48 8b 7b 10	 mov	 rdi, QWORD PTR [rbx+16]
  0004b	8b cd		 mov	 ecx, ebp
  0004d	48 83 c7 f0	 add	 rdi, -16
; Line 303
  00051	48 ff c6	 inc	 rsi
; Line 304
  00054	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi
; Line 306
  00058	eb 07		 jmp	 SHORT $LN3@lua_getinf
$LN4@lua_getinf:
; Line 307
  0005a	49 8b 48 78	 mov	 rcx, QWORD PTR [r8+120]
; Line 308
  0005e	48 8b 39	 mov	 rdi, QWORD PTR [rcx]
$LN3@lua_getinf:
; Line 311
  00061	8b 47 08	 mov	 eax, DWORD PTR [rdi+8]
  00064	83 e0 1f	 and	 eax, 31
  00067	3c 06		 cmp	 al, 6
  00069	75 03		 jne	 SHORT $LN7@lua_getinf
  0006b	48 8b 2f	 mov	 rbp, QWORD PTR [rdi]
$LN7@lua_getinf:
; Line 312
  0006e	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00073	4c 8b cd	 mov	 r9, rbp
  00076	48 8b d6	 mov	 rdx, rsi
  00079	48 8b cb	 mov	 rcx, rbx
  0007c	e8 00 00 00 00	 call	 auxgetinfo
; Line 313
  00081	ba 66 00 00 00	 mov	 edx, 102		; 00000066H
  00086	48 8b ce	 mov	 rcx, rsi
  00089	44 8b f0	 mov	 r14d, eax
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00092	48 85 c0	 test	 rax, rax
  00095	74 0f		 je	 SHORT $LN2@lua_getinf
; Line 314
  00097	0f 10 07	 movups	 xmm0, XMMWORD PTR [rdi]
  0009a	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0009e	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
; Line 315
  000a1	48 83 43 10 10	 add	 QWORD PTR [rbx+16], 16
$LN2@lua_getinf:
; Line 317
  000a6	80 7b 0c 01	 cmp	 BYTE PTR [rbx+12], 1
  000aa	75 1a		 jne	 SHORT $LN12@lua_getinf
  000ac	4c 8b 43 20	 mov	 r8, QWORD PTR [rbx+32]
  000b0	49 8b 40 38	 mov	 rax, QWORD PTR [r8+56]
  000b4	49 8b 08	 mov	 rcx, QWORD PTR [r8]
  000b7	48 03 43 38	 add	 rax, QWORD PTR [rbx+56]
  000bb	49 89 00	 mov	 QWORD PTR [r8], rax
  000be	48 2b 4b 38	 sub	 rcx, QWORD PTR [rbx+56]
  000c2	49 89 48 38	 mov	 QWORD PTR [r8+56], rcx
$LN12@lua_getinf:
; Line 318
  000c6	ba 4c 00 00 00	 mov	 edx, 76			; 0000004cH
  000cb	48 8b ce	 mov	 rcx, rsi
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  000d4	48 85 c0	 test	 rax, rax
  000d7	74 0b		 je	 SHORT $LN15@lua_getinf
; Line 319
  000d9	48 8b d5	 mov	 rdx, rbp
  000dc	48 8b cb	 mov	 rcx, rbx
  000df	e8 00 00 00 00	 call	 collectvalidlines
$LN15@lua_getinf:
; Line 322
  000e4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000e9	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000ee	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000f3	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  000f8	41 8b c6	 mov	 eax, r14d
  000fb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ff	41 5e		 pop	 r14
  00101	c3		 ret	 0
lua_getinfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lua_getstack
_TEXT	SEGMENT
L$ = 8
level$ = 16
ar$ = 24
lua_getstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldebug.c
; Line 103
  00000	4c 8b c9	 mov	 r9, rcx
; Line 106
  00003	85 d2		 test	 edx, edx
  00005	78 30		 js	 SHORT $LN2@lua_getsta
; Line 108
  00007	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0000b	7e 15		 jle	 SHORT $LN14@lua_getsta
  0000d	49 8d 41 60	 lea	 rax, QWORD PTR [r9+96]
$LL5@lua_getsta:
  00011	48 3b c8	 cmp	 rcx, rax
  00014	74 0a		 je	 SHORT $LN3@lua_getsta
  00016	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
; Line 109
  0001a	ff ca		 dec	 edx
  0001c	85 d2		 test	 edx, edx
  0001e	7f f1		 jg	 SHORT $LL5@lua_getsta
$LN3@lua_getsta:
; Line 110
  00020	85 d2		 test	 edx, edx
$LN14@lua_getsta:
  00022	75 13		 jne	 SHORT $LN2@lua_getsta
  00024	49 8d 41 60	 lea	 rax, QWORD PTR [r9+96]
  00028	48 3b c8	 cmp	 rcx, rax
  0002b	74 0a		 je	 SHORT $LN2@lua_getsta
; Line 111
  0002d	b8 01 00 00 00	 mov	 eax, 1
; Line 112
  00032	49 89 48 78	 mov	 QWORD PTR [r8+120], rcx
; Line 117
  00036	c3		 ret	 0
$LN2@lua_getsta:
; Line 114
  00037	33 c0		 xor	 eax, eax
; Line 117
  00039	c3		 ret	 0
lua_getstack ENDP
_TEXT	ENDS
END
