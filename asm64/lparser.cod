; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
priority DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0eH
	DB	0dH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	06H
	DB	06H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	09H
	DB	08H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
CONST	ENDS
PUBLIC	luaY_parser
PUBLIC	??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@		; `string'
PUBLIC	??_C@_0O@FCKLILMC@main?5function?$AA@		; `string'
PUBLIC	??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@ ; `string'
PUBLIC	??_C@_0BA@EIDMAHJI@local?5variables?$AA@	; `string'
PUBLIC	??_C@_08JKPCMKJ@upvalues?$AA@			; `string'
PUBLIC	??_C@_08CMAFAEJC@C?5levels?$AA@			; `string'
PUBLIC	??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@ ; `string'
PUBLIC	??_C@_0N@OEGJPJFJ@labels?1gotos?$AA@		; `string'
PUBLIC	??_C@_05ELPHFHOI@break?$AA@			; `string'
PUBLIC	??_C@_0CC@KOMACILM@?$DM?$CFs?$DO?5at?5line?5?$CFd?5not?5inside?5a?5loo@ ; `string'
PUBLIC	??_C@_0CM@OGINCFCB@no?5visible?5label?5?8?$CFs?8?5for?5?$DMgoto?$DO@ ; `string'
PUBLIC	??_C@_09CEAIPAHE@functions?$AA@			; `string'
PUBLIC	??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MHIGIDHO@?$DMname?$DO?5or?5?8?4?4?4?8?5expected?$AA@ ; `string'
PUBLIC	??_C@_04PJDNGLKJ@self?$AA@			; `string'
PUBLIC	??_C@_0BM@HEIHHEKF@function?5arguments?5expected?$AA@ ; `string'
PUBLIC	??_C@_0BC@KBCKKGAJ@unexpected?5symbol?$AA@	; `string'
PUBLIC	??_C@_0CL@EJFFCAJP@cannot?5use?5?8?4?4?4?8?5outside?5a?5varar@ ; `string'
PUBLIC	??_C@_0N@MNJHOOI@syntax?5error?$AA@		; `string'
PUBLIC	??_C@_0CG@FBAEKGNA@label?5?8?$CFs?8?5already?5defined?5on?5li@ ; `string'
PUBLIC	??_C@_0M@HHIHAJLG@?$CIfor?5index?$CJ?$AA@	; `string'
PUBLIC	??_C@_0M@HGGGDCAE@?$CIfor?5limit?$CJ?$AA@	; `string'
PUBLIC	??_C@_0L@ELGHHMFI@?$CIfor?5step?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BA@IJIMMPHF@?$CIfor?5generator?$CJ?$AA@	; `string'
PUBLIC	??_C@_0M@CCNPGEGC@?$CIfor?5state?$CJ?$AA@	; `string'
PUBLIC	??_C@_0O@PHJHAIC@?$CIfor?5control?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BF@PACDFECJ@?8?$DN?8?5or?5?8in?8?5expected?$AA@ ; `string'
EXTRN	luaO_int2fb:PROC
EXTRN	luaO_pushfstring:PROC
EXTRN	luaM_realloc_:PROC
EXTRN	luaM_growaux_:PROC
EXTRN	luaX_setinput:PROC
EXTRN	luaX_newstring:PROC
EXTRN	luaX_next:PROC
EXTRN	luaX_lookahead:PROC
EXTRN	luaX_syntaxerror:PROC
EXTRN	luaX_token2str:PROC
EXTRN	luaK_codeABx:PROC
EXTRN	luaK_codeABC:PROC
EXTRN	luaK_codek:PROC
EXTRN	luaK_fixline:PROC
EXTRN	luaK_nil:PROC
EXTRN	luaK_reserveregs:PROC
EXTRN	luaK_checkstack:PROC
EXTRN	luaK_stringK:PROC
EXTRN	luaK_intK:PROC
EXTRN	luaK_dischargevars:PROC
EXTRN	luaK_exp2anyreg:PROC
EXTRN	luaK_exp2anyregup:PROC
EXTRN	luaK_exp2nextreg:PROC
EXTRN	luaK_exp2val:PROC
EXTRN	luaK_exp2RK:PROC
EXTRN	luaK_self:PROC
EXTRN	luaK_indexed:PROC
EXTRN	luaK_goiftrue:PROC
EXTRN	luaK_goiffalse:PROC
EXTRN	luaK_storevar:PROC
EXTRN	luaK_setreturns:PROC
EXTRN	luaK_setoneret:PROC
EXTRN	luaK_jump:PROC
EXTRN	luaK_ret:PROC
EXTRN	luaK_patchlist:PROC
EXTRN	luaK_patchtohere:PROC
EXTRN	luaK_patchclose:PROC
EXTRN	luaK_concat:PROC
EXTRN	luaK_getlabel:PROC
EXTRN	luaK_prefix:PROC
EXTRN	luaK_infix:PROC
EXTRN	luaK_posfix:PROC
EXTRN	luaK_setlist:PROC
EXTRN	luaD_inctop:PROC
EXTRN	luaF_newproto:PROC
EXTRN	luaF_newLclosure:PROC
EXTRN	luaC_step:PROC
EXTRN	luaC_barrier_:PROC
EXTRN	luaS_new:PROC
EXTRN	luaH_new:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaY_parser DD imagerel $LN4
	DD	imagerel $LN4+273
	DD	imagerel $unwind$luaY_parser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$statement DD imagerel statement
	DD	imagerel statement+630
	DD	imagerel $unwind$statement
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$semerror DD imagerel semerror
	DD	imagerel semerror+17
	DD	imagerel $unwind$semerror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$error_expected DD imagerel error_expected
	DD	imagerel error_expected+45
	DD	imagerel $unwind$error_expected
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$errorlimit DD imagerel errorlimit
	DD	imagerel errorlimit+111
	DD	imagerel $unwind$errorlimit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$checklimit DD imagerel checklimit
	DD	imagerel checklimit+24
	DD	imagerel $unwind$checklimit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$checklimit DD imagerel checklimit+24
	DD	imagerel checklimit+63
	DD	imagerel $chain$0$checklimit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$checklimit DD imagerel checklimit+63
	DD	imagerel checklimit+64
	DD	imagerel $chain$1$checklimit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$checklimit DD imagerel checklimit+64
	DD	imagerel checklimit+122
	DD	imagerel $chain$2$checklimit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$testnext DD imagerel testnext
	DD	imagerel testnext+31
	DD	imagerel $unwind$testnext
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$check DD	imagerel check
	DD	imagerel check+56
	DD	imagerel $unwind$check
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$checknext DD imagerel checknext
	DD	imagerel checknext+60
	DD	imagerel $unwind$checknext
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_match DD imagerel check_match
	DD	imagerel check_match+158
	DD	imagerel $unwind$check_match
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_checkname DD imagerel str_checkname
	DD	imagerel str_checkname+18
	DD	imagerel $unwind$str_checkname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$str_checkname DD imagerel str_checkname+18
	DD	imagerel str_checkname+46
	DD	imagerel $chain$0$str_checkname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$str_checkname DD imagerel str_checkname+46
	DD	imagerel str_checkname+87
	DD	imagerel $chain$1$str_checkname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$codestring DD imagerel codestring
	DD	imagerel codestring+44
	DD	imagerel $unwind$codestring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$checkname DD imagerel checkname
	DD	imagerel checkname+25
	DD	imagerel $unwind$checkname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$checkname DD imagerel checkname+25
	DD	imagerel checkname+84
	DD	imagerel $chain$0$checkname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$checkname DD imagerel checkname+84
	DD	imagerel checkname+125
	DD	imagerel $chain$1$checkname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$registerlocalvar DD imagerel registerlocalvar
	DD	imagerel registerlocalvar+216
	DD	imagerel $unwind$registerlocalvar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_localvar DD imagerel new_localvar
	DD	imagerel new_localvar+234
	DD	imagerel $unwind$new_localvar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_localvarliteral_ DD imagerel new_localvarliteral_
	DD	imagerel new_localvarliteral_+30
	DD	imagerel $unwind$new_localvarliteral_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newupvalue DD imagerel newupvalue
	DD	imagerel newupvalue+364
	DD	imagerel $unwind$newupvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$singlevaraux DD imagerel singlevaraux
	DD	imagerel singlevaraux+327
	DD	imagerel $unwind$singlevaraux
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$singlevar DD imagerel singlevar
	DD	imagerel singlevar+41
	DD	imagerel $unwind$singlevar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$singlevar DD imagerel singlevar+41
	DD	imagerel singlevar+186
	DD	imagerel $chain$1$singlevar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$singlevar DD imagerel singlevar+186
	DD	imagerel singlevar+227
	DD	imagerel $chain$2$singlevar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$adjust_assign DD imagerel adjust_assign
	DD	imagerel adjust_assign+54
	DD	imagerel $unwind$adjust_assign
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$adjust_assign DD imagerel adjust_assign+54
	DD	imagerel adjust_assign+96
	DD	imagerel $chain$0$adjust_assign
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$adjust_assign DD imagerel adjust_assign+96
	DD	imagerel adjust_assign+147
	DD	imagerel $chain$1$adjust_assign
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$enterlevel DD imagerel enterlevel
	DD	imagerel enterlevel+43
	DD	imagerel $unwind$enterlevel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$enterlevel DD imagerel enterlevel+43
	DD	imagerel enterlevel+73
	DD	imagerel $chain$0$enterlevel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$enterlevel DD imagerel enterlevel+73
	DD	imagerel enterlevel+84
	DD	imagerel $chain$1$enterlevel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$enterlevel DD imagerel enterlevel+84
	DD	imagerel enterlevel+146
	DD	imagerel $chain$2$enterlevel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$closegoto DD imagerel closegoto
	DD	imagerel closegoto+255
	DD	imagerel $unwind$closegoto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$findlabel DD imagerel findlabel
	DD	imagerel findlabel+390
	DD	imagerel $unwind$findlabel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newlabelentry DD imagerel newlabelentry
	DD	imagerel newlabelentry+178
	DD	imagerel $unwind$newlabelentry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$findgotos DD imagerel findgotos
	DD	imagerel findgotos+46
	DD	imagerel $unwind$findgotos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$findgotos DD imagerel findgotos+46
	DD	imagerel findgotos+215
	DD	imagerel $chain$1$findgotos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$findgotos DD imagerel findgotos+215
	DD	imagerel findgotos+230
	DD	imagerel $chain$2$findgotos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$findgotos DD imagerel findgotos+230
	DD	imagerel findgotos+327
	DD	imagerel $chain$3$findgotos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$movegotosout DD imagerel movegotosout
	DD	imagerel movegotosout+39
	DD	imagerel $unwind$movegotosout
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$movegotosout DD imagerel movegotosout+39
	DD	imagerel movegotosout+244
	DD	imagerel $chain$4$movegotosout
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$movegotosout DD imagerel movegotosout+244
	DD	imagerel movegotosout+253
	DD	imagerel $chain$5$movegotosout
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$movegotosout DD imagerel movegotosout+253
	DD	imagerel movegotosout+309
	DD	imagerel $chain$6$movegotosout
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$breaklabel DD imagerel breaklabel
	DD	imagerel breaklabel+92
	DD	imagerel $unwind$breaklabel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$undefgoto DD imagerel undefgoto
	DD	imagerel undefgoto+79
	DD	imagerel $unwind$undefgoto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$leaveblock DD imagerel leaveblock
	DD	imagerel leaveblock+38
	DD	imagerel $unwind$leaveblock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$leaveblock DD imagerel leaveblock+38
	DD	imagerel leaveblock+80
	DD	imagerel $chain$0$leaveblock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$leaveblock DD imagerel leaveblock+80
	DD	imagerel leaveblock+404
	DD	imagerel $chain$1$leaveblock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$addprototype DD imagerel addprototype
	DD	imagerel addprototype+231
	DD	imagerel $unwind$addprototype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$codeclosure DD imagerel codeclosure
	DD	imagerel codeclosure+81
	DD	imagerel $unwind$codeclosure
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$close_func DD imagerel close_func
	DD	imagerel close_func+335
	DD	imagerel $unwind$close_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$statlist DD imagerel statlist
	DD	imagerel statlist+88
	DD	imagerel $unwind$statlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fieldsel DD imagerel fieldsel
	DD	imagerel fieldsel+61
	DD	imagerel $unwind$fieldsel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$fieldsel DD imagerel fieldsel+61
	DD	imagerel fieldsel+150
	DD	imagerel $chain$0$fieldsel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$fieldsel DD imagerel fieldsel+150
	DD	imagerel fieldsel+191
	DD	imagerel $chain$1$fieldsel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$yindex DD imagerel yindex
	DD	imagerel yindex+112
	DD	imagerel $unwind$yindex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$recfield DD imagerel recfield
	DD	imagerel recfield+473
	DD	imagerel $unwind$recfield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$closelistfield DD imagerel closelistfield
	DD	imagerel closelistfield+81
	DD	imagerel $unwind$closelistfield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lastlistfield DD imagerel lastlistfield
	DD	imagerel lastlistfield+126
	DD	imagerel $unwind$lastlistfield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$listfield DD imagerel listfield
	DD	imagerel listfield+147
	DD	imagerel $unwind$listfield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$field DD	imagerel field
	DD	imagerel field+77
	DD	imagerel $unwind$field
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$constructor DD imagerel constructor
	DD	imagerel constructor+839
	DD	imagerel $unwind$constructor
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$parlist DD imagerel parlist
	DD	imagerel parlist+261
	DD	imagerel $unwind$parlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$body DD	imagerel body
	DD	imagerel body+538
	DD	imagerel $unwind$body
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$explist DD imagerel explist
	DD	imagerel explist+96
	DD	imagerel $unwind$explist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$funcargs DD imagerel funcargs
	DD	imagerel funcargs+373
	DD	imagerel $unwind$funcargs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$primaryexp DD imagerel primaryexp
	DD	imagerel primaryexp+46
	DD	imagerel $unwind$primaryexp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$primaryexp DD imagerel primaryexp+46
	DD	imagerel primaryexp+120
	DD	imagerel $chain$0$primaryexp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$primaryexp DD imagerel primaryexp+120
	DD	imagerel primaryexp+133
	DD	imagerel $chain$1$primaryexp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$suffixedexp DD imagerel suffixedexp
	DD	imagerel suffixedexp+61
	DD	imagerel $unwind$suffixedexp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$suffixedexp DD imagerel suffixedexp+61
	DD	imagerel suffixedexp+345
	DD	imagerel $chain$1$suffixedexp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$suffixedexp DD imagerel suffixedexp+345
	DD	imagerel suffixedexp+368
	DD	imagerel $chain$2$suffixedexp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$suffixedexp DD imagerel suffixedexp+368
	DD	imagerel suffixedexp+726
	DD	imagerel $chain$3$suffixedexp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$simpleexp DD imagerel simpleexp
	DD	imagerel simpleexp+683
	DD	imagerel $unwind$simpleexp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$subexpr DD imagerel subexpr
	DD	imagerel subexpr+352
	DD	imagerel $unwind$subexpr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$block DD	imagerel block
	DD	imagerel block+95
	DD	imagerel $unwind$block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_conflict DD imagerel check_conflict
	DD	imagerel check_conflict+160
	DD	imagerel $unwind$check_conflict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$assignment DD imagerel assignment
	DD	imagerel assignment+61
	DD	imagerel $unwind$assignment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$assignment DD imagerel assignment+61
	DD	imagerel assignment+517
	DD	imagerel $chain$0$assignment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$assignment DD imagerel assignment+517
	DD	imagerel assignment+588
	DD	imagerel $chain$2$assignment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$assignment DD imagerel assignment+588
	DD	imagerel assignment+601
	DD	imagerel $chain$3$assignment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cond DD	imagerel cond
	DD	imagerel cond+93
	DD	imagerel $unwind$cond
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gotostat DD imagerel gotostat
	DD	imagerel gotostat+186
	DD	imagerel $unwind$gotostat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$checkrepeated DD imagerel checkrepeated
	DD	imagerel checkrepeated+29
	DD	imagerel $unwind$checkrepeated
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$checkrepeated DD imagerel checkrepeated+29
	DD	imagerel checkrepeated+76
	DD	imagerel $chain$0$checkrepeated
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$checkrepeated DD imagerel checkrepeated+76
	DD	imagerel checkrepeated+82
	DD	imagerel $chain$1$checkrepeated
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$checkrepeated DD imagerel checkrepeated+82
	DD	imagerel checkrepeated+138
	DD	imagerel $chain$2$checkrepeated
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$skipnoopstat DD imagerel skipnoopstat
	DD	imagerel skipnoopstat+47
	DD	imagerel $unwind$skipnoopstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$labelstat DD imagerel labelstat
	DD	imagerel labelstat+265
	DD	imagerel $unwind$labelstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$whilestat DD imagerel whilestat
	DD	imagerel whilestat+184
	DD	imagerel $unwind$whilestat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$whilestat DD imagerel whilestat+184
	DD	imagerel whilestat+382
	DD	imagerel $chain$0$whilestat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$whilestat DD imagerel whilestat+382
	DD	imagerel whilestat+423
	DD	imagerel $chain$1$whilestat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$repeatstat DD imagerel repeatstat
	DD	imagerel repeatstat+348
	DD	imagerel $unwind$repeatstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$exp1 DD	imagerel exp1
	DD	imagerel exp1+74
	DD	imagerel $unwind$exp1
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$forbody DD imagerel forbody
	DD	imagerel forbody+120
	DD	imagerel $unwind$forbody
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$forbody DD imagerel forbody+120
	DD	imagerel forbody+468
	DD	imagerel $chain$1$forbody
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$forbody DD imagerel forbody+468
	DD	imagerel forbody+582
	DD	imagerel $chain$2$forbody
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$forbody DD imagerel forbody+582
	DD	imagerel forbody+623
	DD	imagerel $chain$3$forbody
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fornum DD imagerel fornum
	DD	imagerel fornum+465
	DD	imagerel $unwind$fornum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$forlist DD imagerel forlist
	DD	imagerel forlist+213
	DD	imagerel $unwind$forlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$forlist DD imagerel forlist+213
	DD	imagerel forlist+504
	DD	imagerel $chain$2$forlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$forlist DD imagerel forlist+504
	DD	imagerel forlist+586
	DD	imagerel $chain$3$forlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$forstat DD imagerel forstat
	DD	imagerel forstat+109
	DD	imagerel $unwind$forstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$forstat DD imagerel forstat+109
	DD	imagerel forstat+221
	DD	imagerel $chain$0$forstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$forstat DD imagerel forstat+221
	DD	imagerel forstat+262
	DD	imagerel $chain$1$forstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$forstat DD imagerel forstat+262
	DD	imagerel forstat+278
	DD	imagerel $chain$2$forstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$test_then_block DD imagerel test_then_block
	DD	imagerel test_then_block+70
	DD	imagerel $unwind$test_then_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$test_then_block DD imagerel test_then_block+70
	DD	imagerel test_then_block+431
	DD	imagerel $chain$0$test_then_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$test_then_block DD imagerel test_then_block+431
	DD	imagerel test_then_block+472
	DD	imagerel $chain$1$test_then_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ifstat DD imagerel ifstat
	DD	imagerel ifstat+146
	DD	imagerel $unwind$ifstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$localfunc DD imagerel localfunc
	DD	imagerel localfunc+45
	DD	imagerel $unwind$localfunc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$localfunc DD imagerel localfunc+45
	DD	imagerel localfunc+219
	DD	imagerel $chain$0$localfunc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$localfunc DD imagerel localfunc+219
	DD	imagerel localfunc+260
	DD	imagerel $chain$1$localfunc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$localstat DD imagerel localstat
	DD	imagerel localstat+106
	DD	imagerel $unwind$localstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$localstat DD imagerel localstat+106
	DD	imagerel localstat+352
	DD	imagerel $chain$2$localstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$localstat DD imagerel localstat+352
	DD	imagerel localstat+476
	DD	imagerel $chain$3$localstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$funcname DD imagerel funcname
	DD	imagerel funcname+95
	DD	imagerel $unwind$funcname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$funcstat DD imagerel funcstat
	DD	imagerel funcstat+321
	DD	imagerel $unwind$funcstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$exprstat DD imagerel exprstat
	DD	imagerel exprstat+159
	DD	imagerel $unwind$exprstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$retstat DD imagerel retstat
	DD	imagerel retstat+301
	DD	imagerel $unwind$retstat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mainfunc DD imagerel mainfunc
	DD	imagerel mainfunc+329
	DD	imagerel $unwind$mainfunc
pdata	ENDS
;	COMDAT ??_C@_0BF@PACDFECJ@?8?$DN?8?5or?5?8in?8?5expected?$AA@
CONST	SEGMENT
??_C@_0BF@PACDFECJ@?8?$DN?8?5or?5?8in?8?5expected?$AA@ DB '''='' or ''in'''
	DB	' expected', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PHJHAIC@?$CIfor?5control?$CJ?$AA@
CONST	SEGMENT
??_C@_0O@PHJHAIC@?$CIfor?5control?$CJ?$AA@ DB '(for control)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CCNPGEGC@?$CIfor?5state?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@CCNPGEGC@?$CIfor?5state?$CJ?$AA@ DB '(for state)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IJIMMPHF@?$CIfor?5generator?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@IJIMMPHF@?$CIfor?5generator?$CJ?$AA@ DB '(for generator)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ELGHHMFI@?$CIfor?5step?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@ELGHHMFI@?$CIfor?5step?$CJ?$AA@ DB '(for step)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HGGGDCAE@?$CIfor?5limit?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@HGGGDCAE@?$CIfor?5limit?$CJ?$AA@ DB '(for limit)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HHIHAJLG@?$CIfor?5index?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@HHIHAJLG@?$CIfor?5index?$CJ?$AA@ DB '(for index)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FBAEKGNA@label?5?8?$CFs?8?5already?5defined?5on?5li@
CONST	SEGMENT
??_C@_0CG@FBAEKGNA@label?5?8?$CFs?8?5already?5defined?5on?5li@ DB 'label '
	DB	'''%s'' already defined on line %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNJHOOI@syntax?5error?$AA@
CONST	SEGMENT
??_C@_0N@MNJHOOI@syntax?5error?$AA@ DB 'syntax error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EJFFCAJP@cannot?5use?5?8?4?4?4?8?5outside?5a?5varar@
CONST	SEGMENT
??_C@_0CL@EJFFCAJP@cannot?5use?5?8?4?4?4?8?5outside?5a?5varar@ DB 'cannot'
	DB	' use ''...'' outside a vararg function', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBCKKGAJ@unexpected?5symbol?$AA@
CONST	SEGMENT
??_C@_0BC@KBCKKGAJ@unexpected?5symbol?$AA@ DB 'unexpected symbol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HEIHHEKF@function?5arguments?5expected?$AA@
CONST	SEGMENT
??_C@_0BM@HEIHHEKF@function?5arguments?5expected?$AA@ DB 'function argume'
	DB	'nts expected', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJDNGLKJ@self?$AA@
CONST	SEGMENT
??_C@_04PJDNGLKJ@self?$AA@ DB 'self', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MHIGIDHO@?$DMname?$DO?5or?5?8?4?4?4?8?5expected?$AA@
CONST	SEGMENT
??_C@_0BJ@MHIGIDHO@?$DMname?$DO?5or?5?8?4?4?4?8?5expected?$AA@ DB '<name>'
	DB	' or ''...'' expected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@
CONST	SEGMENT
??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@ DB 'items in a construc'
	DB	'tor', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09CEAIPAHE@functions?$AA@
CONST	SEGMENT
??_C@_09CEAIPAHE@functions?$AA@ DB 'functions', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OGINCFCB@no?5visible?5label?5?8?$CFs?8?5for?5?$DMgoto?$DO@
CONST	SEGMENT
??_C@_0CM@OGINCFCB@no?5visible?5label?5?8?$CFs?8?5for?5?$DMgoto?$DO@ DB 'n'
	DB	'o visible label ''%s'' for <goto> at line %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KOMACILM@?$DM?$CFs?$DO?5at?5line?5?$CFd?5not?5inside?5a?5loo@
CONST	SEGMENT
??_C@_0CC@KOMACILM@?$DM?$CFs?$DO?5at?5line?5?$CFd?5not?5inside?5a?5loo@ DB '<'
	DB	'%s> at line %d not inside a loop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05ELPHFHOI@break?$AA@
CONST	SEGMENT
??_C@_05ELPHFHOI@break?$AA@ DB 'break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OEGJPJFJ@labels?1gotos?$AA@
CONST	SEGMENT
??_C@_0N@OEGJPJFJ@labels?1gotos?$AA@ DB 'labels/gotos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@
CONST	SEGMENT
??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@ DB '<'
	DB	'goto %s> at line %d jumps into the scope of local ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMAFAEJC@C?5levels?$AA@
CONST	SEGMENT
??_C@_08CMAFAEJC@C?5levels?$AA@ DB 'C levels', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKPCMKJ@upvalues?$AA@
CONST	SEGMENT
??_C@_08JKPCMKJ@upvalues?$AA@ DB 'upvalues', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EIDMAHJI@local?5variables?$AA@
CONST	SEGMENT
??_C@_0BA@EIDMAHJI@local?5variables?$AA@ DB 'local variables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
CONST	SEGMENT
??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@ DB '%'
	DB	's expected (to close %s at line %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@ DB 't'
	DB	'oo many %s (limit is %d) in %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@ DB 'function at line %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FCKLILMC@main?5function?$AA@
CONST	SEGMENT
??_C@_0O@FCKLILMC@main?5function?$AA@ DB 'main function', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
CONST	SEGMENT
??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@ DB '%s expected', 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mainfunc DD 020801H
	DD	030049208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$retstat DD 061e19H
	DD	0c640fH
	DD	0b340fH
	DD	0700b720fH
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$exprstat DD 041919H
	DD	0d340aH
	DD	07006920aH
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$funcstat DD 082119H
	DD	0155412H
	DD	0143412H
	DD	0e00ed212H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$funcname DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$localstat DD 021H
	DD	imagerel localstat
	DD	imagerel localstat+106
	DD	imagerel $unwind$localstat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$localstat DD 040a21H
	DD	0fe40aH
	DD	0d5405H
	DD	imagerel localstat
	DD	imagerel localstat+106
	DD	imagerel $unwind$localstat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$localstat DD 062319H
	DD	0e7423H
	DD	0f0057209H
	DD	030026003H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$localfunc DD 021H
	DD	imagerel localfunc
	DD	imagerel localfunc+45
	DD	imagerel $unwind$localfunc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$localfunc DD 020521H
	DD	0b3405H
	DD	imagerel localfunc
	DD	imagerel localfunc+45
	DD	imagerel $unwind$localfunc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$localfunc DD 041919H
	DD	0c640aH
	DD	07006720aH
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ifstat DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$test_then_block DD 021H
	DD	imagerel test_then_block
	DD	imagerel test_then_block+70
	DD	imagerel $unwind$test_then_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$test_then_block DD 020821H
	DD	0126408H
	DD	imagerel test_then_block
	DD	imagerel test_then_block+70
	DD	imagerel $unwind$test_then_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_then_block DD 041719H
	DD	07004b208H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$forstat DD 020021H
	DD	0a7400H
	DD	imagerel forstat
	DD	imagerel forstat+109
	DD	imagerel $unwind$forstat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$forstat DD 021H
	DD	imagerel forstat
	DD	imagerel forstat+109
	DD	imagerel $unwind$forstat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$forstat DD 020521H
	DD	0a7405H
	DD	imagerel forstat
	DD	imagerel forstat+109
	DD	imagerel $unwind$forstat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$forstat DD 060f01H
	DD	0c540fH
	DD	0b340fH
	DD	0600b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$forlist DD 021H
	DD	imagerel forlist
	DD	imagerel forlist+213
	DD	imagerel $unwind$forlist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$forlist DD 061221H
	DD	0af412H
	DD	0be40dH
	DD	0146408H
	DD	imagerel forlist
	DD	imagerel forlist+213
	DD	imagerel $unwind$forlist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$forlist DD 061b19H
	DD	0d008b20cH
	DD	07004c006H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fornum DD 061a19H
	DD	0e007920bH
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$forbody DD 021H
	DD	imagerel forbody
	DD	imagerel forbody+120
	DD	imagerel $unwind$forbody
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$forbody DD 020021H
	DD	0115400H
	DD	imagerel forbody
	DD	imagerel forbody+120
	DD	imagerel $unwind$forbody
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$forbody DD 041021H
	DD	0115410H
	DD	0103408H
	DD	imagerel forbody
	DD	imagerel forbody+120
	DD	imagerel $unwind$forbody
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$forbody DD 081401H
	DD	0137414H
	DD	0126414H
	DD	0e010b214H
	DD	0c00cd00eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$exp1 DD	021519H
	DD	030027206H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$repeatstat DD 061b19H
	DD	014340cH
	DD	07008d20cH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$whilestat DD 021H
	DD	imagerel whilestat
	DD	imagerel whilestat+184
	DD	imagerel $unwind$whilestat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$whilestat DD 020821H
	DD	0143408H
	DD	imagerel whilestat
	DD	imagerel whilestat+184
	DD	imagerel $unwind$whilestat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$whilestat DD 061c19H
	DD	015540dH
	DD	0e009d20dH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$labelstat DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$skipnoopstat DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$checkrepeated DD 020021H
	DD	067400H
	DD	imagerel checkrepeated
	DD	imagerel checkrepeated+29
	DD	imagerel $unwind$checkrepeated
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$checkrepeated DD 021H
	DD	imagerel checkrepeated
	DD	imagerel checkrepeated+29
	DD	imagerel $unwind$checkrepeated
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$checkrepeated DD 020521H
	DD	067405H
	DD	imagerel checkrepeated
	DD	imagerel checkrepeated+29
	DD	imagerel $unwind$checkrepeated
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checkrepeated DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gotostat DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cond DD	021519H
	DD	030027206H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$assignment DD 021H
	DD	imagerel assignment
	DD	imagerel assignment+61
	DD	imagerel $unwind$assignment
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$assignment DD 020021H
	DD	0176400H
	DD	imagerel assignment
	DD	imagerel assignment+61
	DD	imagerel $unwind$assignment
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$assignment DD 020821H
	DD	0176408H
	DD	imagerel assignment
	DD	imagerel assignment+61
	DD	imagerel $unwind$assignment
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$assignment DD 041a19H
	DD	07004f20bH
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	078H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_conflict DD 020e01H
	DD	0300a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$block DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$subexpr DD 061b19H
	DD	012340cH
	DD	07008b20cH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$simpleexp DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$suffixedexp DD 040021H
	DD	08f400H
	DD	0103400H
	DD	imagerel suffixedexp
	DD	imagerel suffixedexp+61
	DD	imagerel $unwind$suffixedexp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$suffixedexp DD 021H
	DD	imagerel suffixedexp
	DD	imagerel suffixedexp+61
	DD	imagerel $unwind$suffixedexp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$suffixedexp DD 041421H
	DD	0103414H
	DD	08f405H
	DD	imagerel suffixedexp
	DD	imagerel suffixedexp+61
	DD	imagerel $unwind$suffixedexp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$suffixedexp DD 051919H
	DD	0e006820aH
	DD	060037004H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$primaryexp DD 021H
	DD	imagerel primaryexp
	DD	imagerel primaryexp+46
	DD	imagerel $unwind$primaryexp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$primaryexp DD 020521H
	DD	063405H
	DD	imagerel primaryexp
	DD	imagerel primaryexp+46
	DD	imagerel $unwind$primaryexp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$primaryexp DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$funcargs DD 061b19H
	DD	011340cH
	DD	07008920cH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$explist DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$body DD	0a1f01H
	DD	015e41fH
	DD	014741fH
	DD	013641fH
	DD	012341fH
	DD	05015f21fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parlist DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$constructor DD 0a2719H
	DD	0176419H
	DD	0163419H
	DD	0f012d219H
	DD	0c00ee010H
	DD	0500b700cH
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$field DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$listfield DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lastlistfield DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$closelistfield DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$recfield DD 082119H
	DD	0155412H
	DD	0143412H
	DD	0e00ed212H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$yindex DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$fieldsel DD 021H
	DD	imagerel fieldsel
	DD	imagerel fieldsel+61
	DD	imagerel $unwind$fieldsel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$fieldsel DD 020521H
	DD	0e3405H
	DD	imagerel fieldsel
	DD	imagerel fieldsel+61
	DD	imagerel $unwind$fieldsel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fieldsel DD 041719H
	DD	070047208H
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$statlist DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$close_func DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codeclosure DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$addprototype DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$leaveblock DD 021H
	DD	imagerel leaveblock
	DD	imagerel leaveblock+38
	DD	imagerel $unwind$leaveblock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$leaveblock DD 020521H
	DD	087405H
	DD	imagerel leaveblock
	DD	imagerel leaveblock+38
	DD	imagerel $unwind$leaveblock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$leaveblock DD 060f01H
	DD	0a540fH
	DD	09340fH
	DD	0600b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$undefgoto DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$breaklabel DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$movegotosout DD 0a0021H
	DD	04f400H
	DD	05e400H
	DD	0dd400H
	DD	0c6400H
	DD	0b3400H
	DD	imagerel movegotosout
	DD	imagerel movegotosout+39
	DD	imagerel $unwind$movegotosout
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$movegotosout DD 021H
	DD	imagerel movegotosout
	DD	imagerel movegotosout+39
	DD	imagerel $unwind$movegotosout
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$movegotosout DD 0a1d21H
	DD	04f41dH
	DD	05e418H
	DD	0dd40fH
	DD	0c640aH
	DD	0b3405H
	DD	imagerel movegotosout
	DD	imagerel movegotosout+39
	DD	imagerel $unwind$movegotosout
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$movegotosout DD 040d01H
	DD	0c009520dH
	DD	050067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$findgotos DD 040021H
	DD	0b7400H
	DD	0a3400H
	DD	imagerel findgotos
	DD	imagerel findgotos+46
	DD	imagerel $unwind$findgotos
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$findgotos DD 021H
	DD	imagerel findgotos
	DD	imagerel findgotos+46
	DD	imagerel $unwind$findgotos
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$findgotos DD 040a21H
	DD	0b740aH
	DD	0a3405H
	DD	imagerel findgotos
	DD	imagerel findgotos+46
	DD	imagerel $unwind$findgotos
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$findgotos DD 060e01H
	DD	0c540eH
	DD	0f00a520eH
	DD	06006e008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newlabelentry DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0f0145218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$findlabel DD 0c1e01H
	DD	0d741eH
	DD	0c641eH
	DD	0b541eH
	DD	0a341eH
	DD	0e01a521eH
	DD	0c016d018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$closegoto DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$enterlevel DD 020021H
	DD	087400H
	DD	imagerel enterlevel
	DD	imagerel enterlevel+43
	DD	imagerel $unwind$enterlevel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$enterlevel DD 021H
	DD	imagerel enterlevel
	DD	imagerel enterlevel+43
	DD	imagerel $unwind$enterlevel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$enterlevel DD 020521H
	DD	087405H
	DD	imagerel enterlevel
	DD	imagerel enterlevel+43
	DD	imagerel $unwind$enterlevel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enterlevel DD 040a01H
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$adjust_assign DD 021H
	DD	imagerel adjust_assign
	DD	imagerel adjust_assign+54
	DD	imagerel $unwind$adjust_assign
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$adjust_assign DD 020521H
	DD	063405H
	DD	imagerel adjust_assign
	DD	imagerel adjust_assign+54
	DD	imagerel $unwind$adjust_assign
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$adjust_assign DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$singlevar DD 021H
	DD	imagerel singlevar
	DD	imagerel singlevar+41
	DD	imagerel $unwind$singlevar
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$singlevar DD 040e21H
	DD	08640eH
	DD	0e5405H
	DD	imagerel singlevar
	DD	imagerel singlevar+41
	DD	imagerel $unwind$singlevar
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$singlevar DD 031619H
	DD	070038207H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$singlevaraux DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newupvalue DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0f0145218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_localvarliteral_ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_localvar DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$registerlocalvar DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0f0145218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$checkname DD 021H
	DD	imagerel checkname
	DD	imagerel checkname+25
	DD	imagerel $unwind$checkname
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$checkname DD 020521H
	DD	063405H
	DD	imagerel checkname
	DD	imagerel checkname+25
	DD	imagerel $unwind$checkname
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checkname DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codestring DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$str_checkname DD 021H
	DD	imagerel str_checkname
	DD	imagerel str_checkname+18
	DD	imagerel $unwind$str_checkname
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$str_checkname DD 020521H
	DD	063405H
	DD	imagerel str_checkname
	DD	imagerel str_checkname+18
	DD	imagerel $unwind$str_checkname
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_checkname DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_match DD 086201H
	DD	083462H
	DD	0a640fH
	DD	09540fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checknext DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$testnext DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$checklimit DD 020021H
	DD	087400H
	DD	imagerel checklimit
	DD	imagerel checklimit+24
	DD	imagerel $unwind$checklimit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$checklimit DD 021H
	DD	imagerel checklimit
	DD	imagerel checklimit+24
	DD	imagerel $unwind$checklimit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$checklimit DD 020521H
	DD	087405H
	DD	imagerel checklimit
	DD	imagerel checklimit+24
	DD	imagerel $unwind$checklimit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checklimit DD 061401H
	DD	0a5414H
	DD	093414H
	DD	060105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$errorlimit DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$error_expected DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$semerror DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$statement DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaY_parser DD 0b1d01H
	DD	023741dH
	DD	022641dH
	DD	021541dH
	DD	020341dH
	DD	01e011dH
	DD	0e016H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT mainfunc
_TEXT	SEGMENT
bl$ = 32
v$ = 56
ls$ = 96
fs$ = 104
mainfunc PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1610
  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 83 ec 50	 sub	 rsp, 80			; 00000050H
; Line 1613
  00008	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
  0000c	48 89 4a 10	 mov	 QWORD PTR [rdx+16], rcx
  00010	45 33 c0	 xor	 r8d, r8d
  00013	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax
  00017	48 89 51 30	 mov	 QWORD PTR [rcx+48], rdx
  0001b	44 88 42 3a	 mov	 BYTE PTR [rdx+58], r8b
  0001f	4c 89 42 20	 mov	 QWORD PTR [rdx+32], r8
  00023	66 44 89 42 3b	 mov	 WORD PTR [rdx+59], r8w
  00028	4c 89 42 2c	 mov	 QWORD PTR [rdx+44], r8
  0002c	66 44 89 42 38	 mov	 WORD PTR [rdx+56], r8w
  00031	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [rdx+40], -1
  00038	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0003c	48 8b d9	 mov	 rbx, rcx
  0003f	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  00042	4c 89 42 18	 mov	 QWORD PTR [rdx+24], r8
  00046	89 4a 34	 mov	 DWORD PTR [rdx+52], ecx
  00049	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0004c	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00050	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00054	c6 41 0c 02	 mov	 BYTE PTR [rcx+12], 2
  00058	0f b6 42 3a	 movzx	 eax, BYTE PTR [rdx+58]
  0005c	45 88 43 da	 mov	 BYTE PTR [r11-38], r8b
  00060	88 44 24 30	 mov	 BYTE PTR bl$[rsp+16], al
  00064	4c 8b ca	 mov	 r9, rdx
  00067	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
; Line 1615
  0006b	49 c7 43 f0 ff
	ff ff ff	 mov	 QWORD PTR [r11-16], -1
  00073	c7 44 24 38 08
	00 00 00	 mov	 DWORD PTR v$[rsp], 8
  0007b	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0007f	45 89 43 e8	 mov	 DWORD PTR [r11-24], r8d
  00083	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00086	89 4c 24 28	 mov	 DWORD PTR bl$[rsp+8], ecx
  0008a	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0008e	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  00091	49 8b 41 18	 mov	 rax, QWORD PTR [r9+24]
  00095	89 4c 24 2c	 mov	 DWORD PTR bl$[rsp+12], ecx
  00099	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  0009d	49 8d 43 c8	 lea	 rax, QWORD PTR [r11-56]
  000a1	49 89 41 18	 mov	 QWORD PTR [r9+24], rax
  000a5	49 8b 01	 mov	 rax, QWORD PTR [r9]
  000a8	45 88 43 d9	 mov	 BYTE PTR [r11-39], r8b
  000ac	c6 40 0b 02	 mov	 BYTE PTR [rax+11], 2
; Line 1616
  000b0	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  000b4	4d 8d 43 e0	 lea	 r8, QWORD PTR [r11-32]
  000b8	49 8b c9	 mov	 rcx, r9
  000bb	e8 00 00 00 00	 call	 newupvalue
; Line 1617
  000c0	48 8b cb	 mov	 rcx, rbx
  000c3	e8 00 00 00 00	 call	 luaX_next
; Line 1618
  000c8	ba 01 00 00 00	 mov	 edx, 1
  000cd	48 8b cb	 mov	 rcx, rbx
  000d0	e8 00 00 00 00	 call	 block_follow
  000d5	85 c0		 test	 eax, eax
  000d7	75 30		 jne	 SHORT $LN10@mainfunc
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@mainfunc:
  000e0	81 7b 10 12 01
	00 00		 cmp	 DWORD PTR [rbx+16], 274	; 00000112H
  000e7	48 8b cb	 mov	 rcx, rbx
  000ea	74 18		 je	 SHORT $LN22@mainfunc
  000ec	e8 00 00 00 00	 call	 statement
  000f1	ba 01 00 00 00	 mov	 edx, 1
  000f6	48 8b cb	 mov	 rcx, rbx
  000f9	e8 00 00 00 00	 call	 block_follow
  000fe	85 c0		 test	 eax, eax
  00100	74 de		 je	 SHORT $LL11@mainfunc
  00102	eb 05		 jmp	 SHORT $LN10@mainfunc
$LN22@mainfunc:
  00104	e8 00 00 00 00	 call	 statement
$LN10@mainfunc:
; Line 1619
  00109	81 7b 10 21 01
	00 00		 cmp	 DWORD PTR [rbx+16], 289	; 00000121H
  00110	48 8b cb	 mov	 rcx, rbx
  00113	75 0b		 jne	 SHORT $LN27@mainfunc
; Line 1620
  00115	e8 00 00 00 00	 call	 close_func
; Line 1621
  0011a	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0011e	5b		 pop	 rbx
  0011f	c3		 ret	 0
$LN27@mainfunc:
; Line 1619
  00120	ba 21 01 00 00	 mov	 edx, 289		; 00000121H
  00125	e8 00 00 00 00	 call	 luaX_token2str
  0012a	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0012e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00135	4c 8b c0	 mov	 r8, rax
  00138	e8 00 00 00 00	 call	 luaO_pushfstring
  0013d	48 8b cb	 mov	 rcx, rbx
  00140	48 8b d0	 mov	 rdx, rax
  00143	e8 00 00 00 00	 call	 luaX_syntaxerror
  00148	cc		 int	 3
$LN26@mainfunc:
mainfunc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT retstat
_TEXT	SEGMENT
e$ = 32
__$ArrayPad$ = 56
ls$ = 80
retstat	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1502
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1507
  0001e	8b 41 10	 mov	 eax, DWORD PTR [rcx+16]
  00021	48 8b 71 30	 mov	 rsi, QWORD PTR [rcx+48]
  00025	48 8b d9	 mov	 rbx, rcx
  00028	8d 88 fc fe ff
	ff		 lea	 ecx, DWORD PTR [rax-260]
  0002e	83 f9 1d	 cmp	 ecx, 29
  00031	77 0e		 ja	 SHORT $LN12@retstat
  00033	ba 07 00 02 20	 mov	 edx, 537001991		; 20020007H
  00038	0f a3 ca	 bt	 edx, ecx
  0003b	0f 82 b0 00 00
	00		 jb	 $LN8@retstat
$LN12@retstat:
  00041	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00044	0f 84 a7 00 00
	00		 je	 $LN8@retstat
; Line 1510
  0004a	48 8d 54 24 20	 lea	 rdx, QWORD PTR e$[rsp]
  0004f	45 33 c0	 xor	 r8d, r8d
  00052	48 8b cb	 mov	 rcx, rbx
  00055	bf 01 00 00 00	 mov	 edi, 1
  0005a	e8 00 00 00 00	 call	 subexpr
  0005f	90		 npad	 1
$LL20@retstat:
  00060	83 7b 10 2c	 cmp	 DWORD PTR [rbx+16], 44	; 0000002cH
  00064	75 2a		 jne	 SHORT $LN26@retstat
  00066	48 8b cb	 mov	 rcx, rbx
  00069	e8 00 00 00 00	 call	 luaX_next
  0006e	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00072	48 8d 54 24 20	 lea	 rdx, QWORD PTR e$[rsp]
  00077	e8 00 00 00 00	 call	 luaK_exp2nextreg
  0007c	48 8d 54 24 20	 lea	 rdx, QWORD PTR e$[rsp]
  00081	45 33 c0	 xor	 r8d, r8d
  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 subexpr
  0008c	ff c7		 inc	 edi
  0008e	eb d0		 jmp	 SHORT $LL20@retstat
$LN26@retstat:
; Line 1522
  00090	8b 44 24 20	 mov	 eax, DWORD PTR e$[rsp]
  00094	48 8d 54 24 20	 lea	 rdx, QWORD PTR e$[rsp]
  00099	48 8b ce	 mov	 rcx, rsi
  0009c	83 c0 f3	 add	 eax, -13		; fffffff3H
  0009f	83 f8 01	 cmp	 eax, 1
  000a2	76 17		 jbe	 SHORT $LN5@retstat
; Line 1521
  000a4	83 ff 01	 cmp	 edi, 1
  000a7	75 07		 jne	 SHORT $LN2@retstat
; Line 1522
  000a9	e8 00 00 00 00	 call	 luaK_exp2anyreg
; Line 1523
  000ae	eb 45		 jmp	 SHORT $LN1@retstat
$LN2@retstat:
; Line 1524
  000b0	e8 00 00 00 00	 call	 luaK_exp2nextreg
; Line 1525
  000b5	0f b6 46 3a	 movzx	 eax, BYTE PTR [rsi+58]
  000b9	eb 3a		 jmp	 SHORT $LN1@retstat
$LN5@retstat:
; Line 1512
  000bb	41 83 c8 ff	 or	 r8d, -1
  000bf	e8 00 00 00 00	 call	 luaK_setreturns
; Line 1513
  000c4	83 7c 24 20 0d	 cmp	 DWORD PTR e$[rsp], 13
  000c9	75 1d		 jne	 SHORT $LN4@retstat
  000cb	83 ff 01	 cmp	 edi, 1
  000ce	75 18		 jne	 SHORT $LN4@retstat
; Line 1514
  000d0	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000d3	48 63 54 24 28	 movsxd	 rdx, DWORD PTR e$[rsp+8]
  000d8	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  000dc	8b 04 91	 mov	 eax, DWORD PTR [rcx+rdx*4]
  000df	83 e0 e5	 and	 eax, -27		; ffffffe5H
  000e2	83 c8 25	 or	 eax, 37			; 00000025H
  000e5	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax
$LN4@retstat:
; Line 1517
  000e8	0f b6 46 3a	 movzx	 eax, BYTE PTR [rsi+58]
; Line 1518
  000ec	83 cf ff	 or	 edi, -1
; Line 1520
  000ef	eb 04		 jmp	 SHORT $LN1@retstat
$LN8@retstat:
; Line 1508
  000f1	33 ff		 xor	 edi, edi
  000f3	8b c7		 mov	 eax, edi
$LN1@retstat:
; Line 1530
  000f5	44 8b c7	 mov	 r8d, edi
  000f8	8b d0		 mov	 edx, eax
  000fa	48 8b ce	 mov	 rcx, rsi
  000fd	e8 00 00 00 00	 call	 luaK_ret
; Line 1531
  00102	83 7b 10 3b	 cmp	 DWORD PTR [rbx+16], 59	; 0000003bH
  00106	75 08		 jne	 SHORT $LN53@retstat
  00108	48 8b cb	 mov	 rcx, rbx
  0010b	e8 00 00 00 00	 call	 luaX_next
$LN53@retstat:
; Line 1532
  00110	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00115	48 33 cc	 xor	 rcx, rsp
  00118	e8 00 00 00 00	 call	 __security_check_cookie
  0011d	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00122	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00127	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0012b	5f		 pop	 rdi
  0012c	c3		 ret	 0
retstat	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT exprstat
_TEXT	SEGMENT
v$ = 32
__$ArrayPad$ = 64
ls$ = 96
exprstat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1486
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1488
  00019	48 8b 79 30	 mov	 rdi, QWORD PTR [rcx+48]
; Line 1490
  0001d	48 8d 54 24 28	 lea	 rdx, QWORD PTR v$[rsp+8]
  00022	48 8b d9	 mov	 rbx, rcx
  00025	e8 00 00 00 00	 call	 suffixedexp
; Line 1491
  0002a	8b 43 10	 mov	 eax, DWORD PTR [rbx+16]
  0002d	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  00030	74 29		 je	 SHORT $LN3@exprstat
  00032	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00035	74 24		 je	 SHORT $LN3@exprstat
; Line 1496
  00037	83 7c 24 28 0d	 cmp	 DWORD PTR v$[rsp+8], 13
  0003c	75 51		 jne	 SHORT $LN8@exprstat
; Line 1497
  0003e	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00041	48 63 54 24 30	 movsxd	 rdx, DWORD PTR v$[rsp+16]
  00046	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0004a	8b 04 91	 mov	 eax, DWORD PTR [rcx+rdx*4]
  0004d	25 ff 7f 80 ff	 and	 eax, -8355841		; ff807fffH
  00052	0f ba e8 0e	 bts	 eax, 14
  00056	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax
  00059	eb 1c		 jmp	 SHORT $LN2@exprstat
$LN3@exprstat:
; Line 1493
  0005b	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  00060	41 b8 01 00 00
	00		 mov	 r8d, 1
  00066	48 8b cb	 mov	 rcx, rbx
  00069	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR v$[rsp], 0
  00072	e8 00 00 00 00	 call	 assignment
$LN2@exprstat:
; Line 1499
  00077	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0007c	48 33 cc	 xor	 rcx, rsp
  0007f	e8 00 00 00 00	 call	 __security_check_cookie
  00084	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00089	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0008d	5f		 pop	 rdi
  0008e	c3		 ret	 0
$LN8@exprstat:
; Line 1496
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNJHOOI@syntax?5error?$AA@
  00096	48 8b cb	 mov	 rcx, rbx
  00099	e8 00 00 00 00	 call	 luaX_syntaxerror
  0009e	cc		 int	 3
$LN7@exprstat:
exprstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT funcstat
_TEXT	SEGMENT
v$ = 32
key$1 = 56
b$ = 80
__$ArrayPad$ = 104
ls$ = 144
line$ = 152
funcstat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1474
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 56		 push	 r14
  0000e	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00021	44 8b f2	 mov	 r14d, edx
  00024	48 8b d9	 mov	 rbx, rcx
; Line 1478
  00027	e8 00 00 00 00	 call	 luaX_next
; Line 1479
  0002c	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  00031	48 8b cb	 mov	 rcx, rbx
  00034	33 ed		 xor	 ebp, ebp
  00036	e8 00 00 00 00	 call	 singlevar
  0003b	83 7b 10 2e	 cmp	 DWORD PTR [rbx+16], 46	; 0000002eH
  0003f	75 6b		 jne	 SHORT $LN4@funcstat
$LL5@funcstat:
  00041	48 8b 73 30	 mov	 rsi, QWORD PTR [rbx+48]
  00045	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  0004a	48 8b ce	 mov	 rcx, rsi
  0004d	e8 00 00 00 00	 call	 luaK_exp2anyregup
  00052	48 8b cb	 mov	 rcx, rbx
  00055	e8 00 00 00 00	 call	 luaX_next
  0005a	81 7b 10 24 01
	00 00		 cmp	 DWORD PTR [rbx+16], 292	; 00000124H
  00061	48 8b cb	 mov	 rcx, rbx
  00064	0f 85 ae 00 00
	00		 jne	 $LN35@funcstat
  0006a	48 8b 7b 18	 mov	 rdi, QWORD PTR [rbx+24]
  0006e	e8 00 00 00 00	 call	 luaX_next
  00073	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00077	48 8b d7	 mov	 rdx, rdi
  0007a	e8 00 00 00 00	 call	 luaK_stringK
  0007f	4c 8d 44 24 38	 lea	 r8, QWORD PTR key$1[rsp]
  00084	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  00089	48 8b ce	 mov	 rcx, rsi
  0008c	48 c7 44 24 48
	ff ff ff ff	 mov	 QWORD PTR key$1[rsp+16], -1
  00095	c7 44 24 38 04
	00 00 00	 mov	 DWORD PTR key$1[rsp], 4
  0009d	89 44 24 40	 mov	 DWORD PTR key$1[rsp+8], eax
  000a1	e8 00 00 00 00	 call	 luaK_indexed
  000a6	83 7b 10 2e	 cmp	 DWORD PTR [rbx+16], 46	; 0000002eH
  000aa	74 95		 je	 SHORT $LL5@funcstat
$LN4@funcstat:
  000ac	83 7b 10 3a	 cmp	 DWORD PTR [rbx+16], 58	; 0000003aH
  000b0	75 12		 jne	 SHORT $LN3@funcstat
  000b2	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  000b7	48 8b cb	 mov	 rcx, rbx
  000ba	bd 01 00 00 00	 mov	 ebp, 1
  000bf	e8 00 00 00 00	 call	 fieldsel
$LN3@funcstat:
; Line 1480
  000c4	48 8d 54 24 50	 lea	 rdx, QWORD PTR b$[rsp]
  000c9	45 8b ce	 mov	 r9d, r14d
  000cc	44 8b c5	 mov	 r8d, ebp
  000cf	48 8b cb	 mov	 rcx, rbx
  000d2	e8 00 00 00 00	 call	 body
; Line 1481
  000d7	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  000db	4c 8d 44 24 50	 lea	 r8, QWORD PTR b$[rsp]
  000e0	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  000e5	e8 00 00 00 00	 call	 luaK_storevar
; Line 1482
  000ea	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  000ee	41 8b d6	 mov	 edx, r14d
  000f1	e8 00 00 00 00	 call	 luaK_fixline
; Line 1483
  000f6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000fb	48 33 cc	 xor	 rcx, rsp
  000fe	e8 00 00 00 00	 call	 __security_check_cookie
  00103	4c 8d 5c 24 70	 lea	 r11, QWORD PTR [rsp+112]
  00108	49 8b 5b 30	 mov	 rbx, QWORD PTR [r11+48]
  0010c	49 8b 6b 38	 mov	 rbp, QWORD PTR [r11+56]
  00110	49 8b e3	 mov	 rsp, r11
  00113	41 5e		 pop	 r14
  00115	5f		 pop	 rdi
  00116	5e		 pop	 rsi
  00117	c3		 ret	 0
$LN35@funcstat:
; Line 1479
  00118	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  0011d	e8 00 00 00 00	 call	 luaX_token2str
  00122	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00126	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  0012d	4c 8b c0	 mov	 r8, rax
  00130	e8 00 00 00 00	 call	 luaO_pushfstring
  00135	48 8b cb	 mov	 rcx, rbx
  00138	48 8b d0	 mov	 rdx, rax
  0013b	e8 00 00 00 00	 call	 luaX_syntaxerror
  00140	cc		 int	 3
$LN34@funcstat:
funcstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT funcname
_TEXT	SEGMENT
ls$ = 48
v$ = 56
funcname PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1460
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx
; Line 1463
  00010	e8 00 00 00 00	 call	 singlevar
; Line 1464
  00015	83 7b 10 2e	 cmp	 DWORD PTR [rbx+16], 46	; 0000002eH
  00019	75 16		 jne	 SHORT $LN2@funcname
  0001b	0f 1f 44 00 00	 npad	 5
$LL3@funcname:
; Line 1465
  00020	48 8b d7	 mov	 rdx, rdi
  00023	48 8b cb	 mov	 rcx, rbx
  00026	e8 00 00 00 00	 call	 fieldsel
  0002b	83 7b 10 2e	 cmp	 DWORD PTR [rbx+16], 46	; 0000002eH
  0002f	74 ef		 je	 SHORT $LL3@funcname
$LN2@funcname:
; Line 1466
  00031	83 7b 10 3a	 cmp	 DWORD PTR [rbx+16], 58	; 0000003aH
  00035	75 1b		 jne	 SHORT $LN10@funcname
; Line 1468
  00037	48 8b d7	 mov	 rdx, rdi
  0003a	48 8b cb	 mov	 rcx, rbx
  0003d	e8 00 00 00 00	 call	 fieldsel
; Line 1470
  00042	b8 01 00 00 00	 mov	 eax, 1
; Line 1471
  00047	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5f		 pop	 rdi
  00051	c3		 ret	 0
$LN10@funcname:
; Line 1470
  00052	33 c0		 xor	 eax, eax
; Line 1471
  00054	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
  0005e	c3		 ret	 0
funcname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT localstat
_TEXT	SEGMENT
e$ = 32
__$ArrayPad$ = 56
ls$ = 96
localstat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1440
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	41 57		 push	 r15
  00005	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1442
  00018	45 33 ff	 xor	 r15d, r15d
  0001b	48 8b d9	 mov	 rbx, rcx
  0001e	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi
  00023	41 8b f7	 mov	 esi, r15d
  00026	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL5@localstat:
; Line 1446
  00030	81 7b 10 24 01
	00 00		 cmp	 DWORD PTR [rbx+16], 292	; 00000124H
  00037	48 8b cb	 mov	 rcx, rbx
  0003a	0f 85 73 01 00
	00		 jne	 $LN97@localstat
  00040	48 8b 7b 18	 mov	 rdi, QWORD PTR [rbx+24]
  00044	e8 00 00 00 00	 call	 luaX_next
  00049	48 8b d7	 mov	 rdx, rdi
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	e8 00 00 00 00	 call	 new_localvar
; Line 1447
  00054	ff c6		 inc	 esi
; Line 1448
  00056	83 7b 10 2c	 cmp	 DWORD PTR [rbx+16], 44	; 0000002cH
  0005a	75 0a		 jne	 SHORT $LN84@localstat
  0005c	48 8b cb	 mov	 rcx, rbx
  0005f	e8 00 00 00 00	 call	 luaX_next
  00064	eb ca		 jmp	 SHORT $LL5@localstat
$LN84@localstat:
; Line 1449
  00066	83 7b 10 3d	 cmp	 DWORD PTR [rbx+16], 61	; 0000003dH
  0006a	48 89 6c 24 68	 mov	 QWORD PTR [rsp+104], rbp
  0006f	4c 89 74 24 78	 mov	 QWORD PTR [rsp+120], r14
  00074	75 53		 jne	 SHORT $LN2@localstat
  00076	48 8b cb	 mov	 rcx, rbx
  00079	e8 00 00 00 00	 call	 luaX_next
; Line 1450
  0007e	48 8d 54 24 20	 lea	 rdx, QWORD PTR e$[rsp]
  00083	45 33 c0	 xor	 r8d, r8d
  00086	48 8b cb	 mov	 rcx, rbx
  00089	bf 01 00 00 00	 mov	 edi, 1
  0008e	e8 00 00 00 00	 call	 subexpr
$LL27@localstat:
  00093	83 7b 10 2c	 cmp	 DWORD PTR [rbx+16], 44	; 0000002cH
  00097	75 2a		 jne	 SHORT $LN33@localstat
  00099	48 8b cb	 mov	 rcx, rbx
  0009c	e8 00 00 00 00	 call	 luaX_next
  000a1	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  000a5	48 8d 54 24 20	 lea	 rdx, QWORD PTR e$[rsp]
  000aa	e8 00 00 00 00	 call	 luaK_exp2nextreg
  000af	48 8d 54 24 20	 lea	 rdx, QWORD PTR e$[rsp]
  000b4	45 33 c0	 xor	 r8d, r8d
  000b7	48 8b cb	 mov	 rcx, rbx
  000ba	e8 00 00 00 00	 call	 subexpr
  000bf	ff c7		 inc	 edi
  000c1	eb d0		 jmp	 SHORT $LL27@localstat
$LN33@localstat:
; Line 1451
  000c3	8b 4c 24 20	 mov	 ecx, DWORD PTR e$[rsp]
  000c7	eb 0a		 jmp	 SHORT $LN1@localstat
$LN2@localstat:
; Line 1452
  000c9	41 8b cf	 mov	 ecx, r15d
; Line 1453
  000cc	41 8b ff	 mov	 edi, r15d
  000cf	89 4c 24 20	 mov	 DWORD PTR e$[rsp], ecx
$LN1@localstat:
; Line 1455
  000d3	4c 8b 73 30	 mov	 r14, QWORD PTR [rbx+48]
  000d7	8d 41 f3	 lea	 eax, DWORD PTR [rcx-13]
  000da	8b ee		 mov	 ebp, esi
  000dc	2b ef		 sub	 ebp, edi
  000de	83 f8 01	 cmp	 eax, 1
  000e1	76 33		 jbe	 SHORT $LN69@localstat
  000e3	85 c9		 test	 ecx, ecx
  000e5	74 0d		 je	 SHORT $LN65@localstat
  000e7	48 8d 54 24 20	 lea	 rdx, QWORD PTR e$[rsp]
  000ec	49 8b ce	 mov	 rcx, r14
  000ef	e8 00 00 00 00	 call	 luaK_exp2nextreg
$LN65@localstat:
  000f4	85 ed		 test	 ebp, ebp
  000f6	7e 44		 jle	 SHORT $LN67@localstat
  000f8	41 0f b6 7e 3c	 movzx	 edi, BYTE PTR [r14+60]
  000fd	8b d5		 mov	 edx, ebp
  000ff	49 8b ce	 mov	 rcx, r14
  00102	e8 00 00 00 00	 call	 luaK_reserveregs
  00107	44 8b c5	 mov	 r8d, ebp
  0010a	8b d7		 mov	 edx, edi
  0010c	49 8b ce	 mov	 rcx, r14
  0010f	e8 00 00 00 00	 call	 luaK_nil
  00114	eb 26		 jmp	 SHORT $LN67@localstat
$LN69@localstat:
  00116	ff c5		 inc	 ebp
  00118	48 8d 54 24 20	 lea	 rdx, QWORD PTR e$[rsp]
  0011d	49 8b ce	 mov	 rcx, r14
  00120	41 0f 48 ef	 cmovs	 ebp, r15d
  00124	44 8b c5	 mov	 r8d, ebp
  00127	e8 00 00 00 00	 call	 luaK_setreturns
  0012c	83 fd 01	 cmp	 ebp, 1
  0012f	7e 0b		 jle	 SHORT $LN67@localstat
  00131	8d 55 ff	 lea	 edx, DWORD PTR [rbp-1]
  00134	49 8b ce	 mov	 rcx, r14
  00137	e8 00 00 00 00	 call	 luaK_reserveregs
$LN67@localstat:
; Line 1456
  0013c	4c 8b 43 30	 mov	 r8, QWORD PTR [rbx+48]
  00140	4c 8b 74 24 78	 mov	 r14, QWORD PTR [rsp+120]
  00145	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0014a	41 00 70 3a	 add	 BYTE PTR [r8+58], sil
  0014e	85 f6		 test	 esi, esi
  00150	74 46		 je	 SHORT $LN73@localstat
  00152	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL75@localstat:
  00160	41 0f b6 50 3a	 movzx	 edx, BYTE PTR [r8+58]
  00165	48 63 c6	 movsxd	 rax, esi
  00168	48 2b d0	 sub	 rdx, rax
  0016b	49 63 40 34	 movsxd	 rax, DWORD PTR [r8+52]
  0016f	48 03 d0	 add	 rdx, rax
  00172	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  00176	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0017a	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0017d	48 0f bf 14 50	 movsx	 rdx, WORD PTR [rax+rdx*2]
  00182	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00185	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00189	41 8b 40 20	 mov	 eax, DWORD PTR [r8+32]
  0018d	48 03 d2	 add	 rdx, rdx
  00190	89 44 d1 08	 mov	 DWORD PTR [rcx+rdx*8+8], eax
  00194	ff ce		 dec	 esi
  00196	75 c8		 jne	 SHORT $LL75@localstat
$LN73@localstat:
  00198	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]
; Line 1457
  0019d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001a2	48 33 cc	 xor	 rcx, rsp
  001a5	e8 00 00 00 00	 call	 __security_check_cookie
  001aa	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001ae	41 5f		 pop	 r15
  001b0	5e		 pop	 rsi
  001b1	5b		 pop	 rbx
  001b2	c3		 ret	 0
$LN97@localstat:
; Line 1446
  001b3	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  001b8	e8 00 00 00 00	 call	 luaX_token2str
  001bd	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  001c8	4c 8b c0	 mov	 r8, rax
  001cb	e8 00 00 00 00	 call	 luaO_pushfstring
  001d0	48 8b cb	 mov	 rcx, rbx
  001d3	48 8b d0	 mov	 rdx, rax
  001d6	e8 00 00 00 00	 call	 luaX_syntaxerror
  001db	cc		 int	 3
$LN96@localstat:
localstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT localfunc
_TEXT	SEGMENT
b$ = 32
__$ArrayPad$ = 56
ls$ = 80
localfunc PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1429
  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1432
  00019	81 79 10 24 01
	00 00		 cmp	 DWORD PTR [rcx+16], 292	; 00000124H
  00020	48 8b 71 30	 mov	 rsi, QWORD PTR [rcx+48]
  00024	48 8b f9	 mov	 rdi, rcx
  00027	0f 85 ae 00 00
	00		 jne	 $LN27@localfunc
  0002d	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
  00032	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
  00036	e8 00 00 00 00	 call	 luaX_next
  0003b	48 8b d3	 mov	 rdx, rbx
  0003e	48 8b cf	 mov	 rcx, rdi
  00041	e8 00 00 00 00	 call	 new_localvar
; Line 1433
  00046	4c 8b 47 30	 mov	 r8, QWORD PTR [rdi+48]
  0004a	41 fe 40 3a	 inc	 BYTE PTR [r8+58]
  0004e	41 0f b6 40 3a	 movzx	 eax, BYTE PTR [r8+58]
  00053	49 63 50 34	 movsxd	 rdx, DWORD PTR [r8+52]
  00057	48 03 d0	 add	 rdx, rax
  0005a	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  0005e	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00062	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00065	48 0f bf 54 50
	fe		 movsx	 rdx, WORD PTR [rax+rdx*2-2]
  0006b	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0006e	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00072	41 8b 40 20	 mov	 eax, DWORD PTR [r8+32]
  00076	48 03 d2	 add	 rdx, rdx
  00079	89 44 d1 08	 mov	 DWORD PTR [rcx+rdx*8+8], eax
; Line 1434
  0007d	44 8b 4f 04	 mov	 r9d, DWORD PTR [rdi+4]
  00081	48 8d 54 24 20	 lea	 rdx, QWORD PTR b$[rsp]
  00086	45 33 c0	 xor	 r8d, r8d
  00089	48 8b cf	 mov	 rcx, rdi
  0008c	e8 00 00 00 00	 call	 body
; Line 1436
  00091	48 63 44 24 28	 movsxd	 rax, DWORD PTR b$[rsp+8]
  00096	48 63 56 34	 movsxd	 rdx, DWORD PTR [rsi+52]
  0009a	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0009f	48 03 d0	 add	 rdx, rax
  000a2	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  000a6	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000aa	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000ad	48 0f bf 14 50	 movsx	 rdx, WORD PTR [rax+rdx*2]
  000b2	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000b5	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  000b9	8b 46 20	 mov	 eax, DWORD PTR [rsi+32]
  000bc	48 03 d2	 add	 rdx, rdx
  000bf	89 44 d1 08	 mov	 DWORD PTR [rcx+rdx*8+8], eax
; Line 1437
  000c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000c8	48 33 cc	 xor	 rcx, rsp
  000cb	e8 00 00 00 00	 call	 __security_check_cookie
  000d0	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000d5	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000d9	5f		 pop	 rdi
  000da	c3		 ret	 0
$LN27@localfunc:
; Line 1432
  000db	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  000e0	e8 00 00 00 00	 call	 luaX_token2str
  000e5	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  000f0	4c 8b c0	 mov	 r8, rax
  000f3	e8 00 00 00 00	 call	 luaO_pushfstring
  000f8	48 8b cf	 mov	 rcx, rdi
  000fb	48 8b d0	 mov	 rdx, rax
  000fe	e8 00 00 00 00	 call	 luaX_syntaxerror
  00103	cc		 int	 3
$LN26@localfunc:
localfunc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ifstat
_TEXT	SEGMENT
escapelist$ = 48
ls$ = 48
line$ = 56
ifstat	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1415
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1417
  0000f	48 8b 71 30	 mov	 rsi, QWORD PTR [rcx+48]
  00013	8b fa		 mov	 edi, edx
; Line 1419
  00015	48 8d 54 24 30	 lea	 rdx, QWORD PTR escapelist$[rsp]
  0001a	48 8b d9	 mov	 rbx, rcx
  0001d	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR escapelist$[rsp], -1
  00025	e8 00 00 00 00	 call	 test_then_block
; Line 1420
  0002a	81 7b 10 05 01
	00 00		 cmp	 DWORD PTR [rbx+16], 261	; 00000105H
  00031	75 16		 jne	 SHORT $LN2@ifstat
$LL3@ifstat:
; Line 1421
  00033	48 8d 54 24 30	 lea	 rdx, QWORD PTR escapelist$[rsp]
  00038	48 8b cb	 mov	 rcx, rbx
  0003b	e8 00 00 00 00	 call	 test_then_block
  00040	81 7b 10 05 01
	00 00		 cmp	 DWORD PTR [rbx+16], 261	; 00000105H
  00047	74 ea		 je	 SHORT $LL3@ifstat
$LN2@ifstat:
; Line 1422
  00049	81 7b 10 04 01
	00 00		 cmp	 DWORD PTR [rbx+16], 260	; 00000104H
  00050	75 10		 jne	 SHORT $LN1@ifstat
  00052	48 8b cb	 mov	 rcx, rbx
  00055	e8 00 00 00 00	 call	 luaX_next
; Line 1423
  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	e8 00 00 00 00	 call	 block
$LN1@ifstat:
; Line 1424
  00062	ba 06 01 00 00	 mov	 edx, 262		; 00000106H
  00067	44 8b cf	 mov	 r9d, edi
  0006a	48 8b cb	 mov	 rcx, rbx
  0006d	44 8d 42 05	 lea	 r8d, QWORD PTR [rdx+5]
  00071	e8 00 00 00 00	 call	 check_match
; Line 1425
  00076	8b 54 24 30	 mov	 edx, DWORD PTR escapelist$[rsp]
  0007a	48 8b ce	 mov	 rcx, rsi
  0007d	e8 00 00 00 00	 call	 luaK_patchtohere
; Line 1426
  00082	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00087	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0008c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
ifstat	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT test_then_block
_TEXT	SEGMENT
bl$ = 32
v$ = 56
__$ArrayPad$ = 80
ls$ = 128
escapelist$ = 136
test_then_block PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1380
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	57		 push	 rdi
  00004	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00008	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000f	48 33 c4	 xor	 rax, rsp
  00012	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1383
  00017	48 8b 79 30	 mov	 rdi, QWORD PTR [rcx+48]
  0001b	48 8b ea	 mov	 rbp, rdx
  0001e	48 8b d9	 mov	 rbx, rcx
; Line 1386
  00021	e8 00 00 00 00	 call	 luaX_next
; Line 1387
  00026	48 8d 54 24 38	 lea	 rdx, QWORD PTR v$[rsp]
  0002b	45 33 c0	 xor	 r8d, r8d
  0002e	48 8b cb	 mov	 rcx, rbx
  00031	e8 00 00 00 00	 call	 subexpr
; Line 1388
  00036	81 7b 10 13 01
	00 00		 cmp	 DWORD PTR [rbx+16], 275	; 00000113H
  0003d	48 8b cb	 mov	 rcx, rbx
  00040	0f 85 69 01 00
	00		 jne	 $LN80@test_then_
  00046	48 89 b4 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rsi
  0004e	e8 00 00 00 00	 call	 luaX_next
  00053	8b 43 10	 mov	 eax, DWORD PTR [rbx+16]
; Line 1402
  00056	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  0005a	2d 02 01 00 00	 sub	 eax, 258		; 00000102H
  0005f	48 8d 54 24 38	 lea	 rdx, QWORD PTR v$[rsp]
  00064	a9 f7 ff ff ff	 test	 eax, -9			; fffffff7H
  00069	74 50		 je	 SHORT $LN6@test_then_
  0006b	e8 00 00 00 00	 call	 luaK_goiftrue
; Line 1403
  00070	c6 44 24 32 00	 mov	 BYTE PTR bl$[rsp+18], 0
  00075	0f b6 47 3a	 movzx	 eax, BYTE PTR [rdi+58]
  00079	88 44 24 30	 mov	 BYTE PTR bl$[rsp+16], al
  0007d	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00081	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00085	8b 41 28	 mov	 eax, DWORD PTR [rcx+40]
  00088	89 44 24 28	 mov	 DWORD PTR bl$[rsp+8], eax
  0008c	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00090	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00094	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  00097	c6 44 24 31 00	 mov	 BYTE PTR bl$[rsp+17], 0
  0009c	89 44 24 2c	 mov	 DWORD PTR bl$[rsp+12], eax
  000a0	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  000a4	48 89 44 24 20	 mov	 QWORD PTR bl$[rsp], rax
  000a9	48 8d 44 24 20	 lea	 rax, QWORD PTR bl$[rsp]
  000ae	48 89 47 18	 mov	 QWORD PTR [rdi+24], rax
; Line 1404
  000b2	8b 74 24 4c	 mov	 esi, DWORD PTR v$[rsp+20]
  000b6	e9 8c 00 00 00	 jmp	 $LN4@test_then_
$LN6@test_then_:
; Line 1390
  000bb	e8 00 00 00 00	 call	 luaK_goiffalse
; Line 1391
  000c0	c6 44 24 32 00	 mov	 BYTE PTR bl$[rsp+18], 0
  000c5	0f b6 47 3a	 movzx	 eax, BYTE PTR [rdi+58]
  000c9	88 44 24 30	 mov	 BYTE PTR bl$[rsp+16], al
  000cd	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  000d1	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000d5	8b 41 28	 mov	 eax, DWORD PTR [rcx+40]
  000d8	89 44 24 28	 mov	 DWORD PTR bl$[rsp+8], eax
  000dc	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  000e0	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000e4	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  000e7	c6 44 24 31 00	 mov	 BYTE PTR bl$[rsp+17], 0
; Line 1392
  000ec	48 8b cb	 mov	 rcx, rbx
  000ef	89 44 24 2c	 mov	 DWORD PTR bl$[rsp+12], eax
  000f3	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  000f7	48 89 44 24 20	 mov	 QWORD PTR bl$[rsp], rax
  000fc	48 8d 44 24 20	 lea	 rax, QWORD PTR bl$[rsp]
  00101	48 89 47 18	 mov	 QWORD PTR [rdi+24], rax
  00105	8b 54 24 48	 mov	 edx, DWORD PTR v$[rsp+16]
  00109	e8 00 00 00 00	 call	 gotostat
  0010e	66 90		 npad	 2
; Line 1393
$LL26@test_then_:
  00110	8b 43 10	 mov	 eax, DWORD PTR [rbx+16]
  00113	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00116	74 07		 je	 SHORT $LN24@test_then_
  00118	3d 20 01 00 00	 cmp	 eax, 288		; 00000120H
  0011d	75 0a		 jne	 SHORT $LN25@test_then_
$LN24@test_then_:
  0011f	48 8b cb	 mov	 rcx, rbx
  00122	e8 00 00 00 00	 call	 statement
  00127	eb e7		 jmp	 SHORT $LL26@test_then_
$LN25@test_then_:
; Line 1394
  00129	8b c8		 mov	 ecx, eax
  0012b	05 fc fe ff ff	 add	 eax, -260		; fffffefcH
  00130	83 f8 02	 cmp	 eax, 2
  00133	76 55		 jbe	 SHORT $LN73@test_then_
  00135	81 f9 21 01 00
	00		 cmp	 ecx, 289		; 00000121H
  0013b	74 4d		 je	 SHORT $LN73@test_then_
; Line 1399
  0013d	48 8b cf	 mov	 rcx, rdi
  00140	e8 00 00 00 00	 call	 luaK_jump
  00145	8b f0		 mov	 esi, eax
$LN4@test_then_:
; Line 1406
  00147	48 8b cb	 mov	 rcx, rbx
  0014a	e8 00 00 00 00	 call	 statlist
; Line 1407
  0014f	48 8b cf	 mov	 rcx, rdi
  00152	e8 00 00 00 00	 call	 leaveblock
  00157	44 8b 43 10	 mov	 r8d, DWORD PTR [rbx+16]
  0015b	41 81 e8 04 01
	00 00		 sub	 r8d, 260		; 00000104H
  00162	41 83 f8 01	 cmp	 r8d, 1
  00166	77 16		 ja	 SHORT $LN2@test_then_
; Line 1410
  00168	48 8b cf	 mov	 rcx, rdi
  0016b	e8 00 00 00 00	 call	 luaK_jump
  00170	48 8b d5	 mov	 rdx, rbp
  00173	48 8b cf	 mov	 rcx, rdi
  00176	44 8b c0	 mov	 r8d, eax
  00179	e8 00 00 00 00	 call	 luaK_concat
$LN2@test_then_:
; Line 1411
  0017e	8b d6		 mov	 edx, esi
  00180	48 8b cf	 mov	 rcx, rdi
  00183	e8 00 00 00 00	 call	 luaK_patchtohere
  00188	eb 08		 jmp	 SHORT $LN78@test_then_
$LN73@test_then_:
; Line 1395
  0018a	48 8b cf	 mov	 rcx, rdi
  0018d	e8 00 00 00 00	 call	 leaveblock
$LN78@test_then_:
  00192	48 8b b4 24 90
	00 00 00	 mov	 rsi, QWORD PTR [rsp+144]
; Line 1412
  0019a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0019f	48 33 cc	 xor	 rcx, rsp
  001a2	e8 00 00 00 00	 call	 __security_check_cookie
  001a7	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001ab	5f		 pop	 rdi
  001ac	5d		 pop	 rbp
  001ad	5b		 pop	 rbx
  001ae	c3		 ret	 0
$LN80@test_then_:
; Line 1388
  001af	ba 13 01 00 00	 mov	 edx, 275		; 00000113H
  001b4	e8 00 00 00 00	 call	 luaX_token2str
  001b9	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  001c4	4c 8b c0	 mov	 r8, rax
  001c7	e8 00 00 00 00	 call	 luaO_pushfstring
  001cc	48 8b cb	 mov	 rcx, rbx
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	e8 00 00 00 00	 call	 luaX_syntaxerror
  001d7	cc		 int	 3
$LN79@test_then_:
test_then_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT forstat
_TEXT	SEGMENT
bl$ = 32
ls$ = 80
line$ = 88
forstat	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1362
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; Line 1364
  0000f	48 8b 71 30	 mov	 rsi, QWORD PTR [rcx+48]
; Line 1367
  00013	c6 44 24 32 01	 mov	 BYTE PTR bl$[rsp+18], 1
  00018	8b ea		 mov	 ebp, edx
  0001a	0f b6 46 3a	 movzx	 eax, BYTE PTR [rsi+58]
  0001e	48 8b d9	 mov	 rbx, rcx
  00021	88 44 24 30	 mov	 BYTE PTR bl$[rsp+16], al
  00025	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00029	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0002d	41 8b 40 28	 mov	 eax, DWORD PTR [r8+40]
  00031	89 44 24 28	 mov	 DWORD PTR bl$[rsp+8], eax
  00035	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00039	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0003d	41 8b 40 18	 mov	 eax, DWORD PTR [r8+24]
  00041	c6 44 24 31 00	 mov	 BYTE PTR bl$[rsp+17], 0
  00046	89 44 24 2c	 mov	 DWORD PTR bl$[rsp+12], eax
  0004a	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]
  0004e	48 89 44 24 20	 mov	 QWORD PTR bl$[rsp], rax
  00053	48 8d 44 24 20	 lea	 rax, QWORD PTR bl$[rsp]
  00058	48 89 46 18	 mov	 QWORD PTR [rsi+24], rax
; Line 1368
  0005c	e8 00 00 00 00	 call	 luaX_next
; Line 1369
  00061	81 7b 10 24 01
	00 00		 cmp	 DWORD PTR [rbx+16], 292	; 00000124H
  00068	48 8b cb	 mov	 rcx, rbx
  0006b	75 70		 jne	 SHORT $LN22@forstat
  0006d	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00072	48 8b 7b 18	 mov	 rdi, QWORD PTR [rbx+24]
  00076	e8 00 00 00 00	 call	 luaX_next
; Line 1370
  0007b	8b 43 10	 mov	 eax, DWORD PTR [rbx+16]
  0007e	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00081	74 1e		 je	 SHORT $LN2@forstat
  00083	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  00086	74 09		 je	 SHORT $LN3@forstat
  00088	3d 0c 01 00 00	 cmp	 eax, 268		; 0000010cH
  0008d	74 12		 je	 SHORT $LN2@forstat
  0008f	eb 75		 jmp	 SHORT $LN24@forstat
$LN3@forstat:
; Line 1371
  00091	44 8b c5	 mov	 r8d, ebp
  00094	48 8b d7	 mov	 rdx, rdi
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	e8 00 00 00 00	 call	 fornum
  0009f	eb 0b		 jmp	 SHORT $LN4@forstat
$LN2@forstat:
; Line 1372
  000a1	48 8b d7	 mov	 rdx, rdi
  000a4	48 8b cb	 mov	 rcx, rbx
  000a7	e8 00 00 00 00	 call	 forlist
$LN4@forstat:
; Line 1375
  000ac	ba 06 01 00 00	 mov	 edx, 262		; 00000106H
  000b1	44 8b cd	 mov	 r9d, ebp
  000b4	48 8b cb	 mov	 rcx, rbx
  000b7	44 8d 42 02	 lea	 r8d, QWORD PTR [rdx+2]
  000bb	e8 00 00 00 00	 call	 check_match
; Line 1376
  000c0	48 8b ce	 mov	 rcx, rsi
  000c3	e8 00 00 00 00	 call	 leaveblock
  000c8	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
; Line 1377
  000cd	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  000d2	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  000d7	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000db	5e		 pop	 rsi
  000dc	c3		 ret	 0
$LN22@forstat:
; Line 1369
  000dd	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  000e2	e8 00 00 00 00	 call	 luaX_token2str
  000e7	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  000f2	4c 8b c0	 mov	 r8, rax
  000f5	e8 00 00 00 00	 call	 luaO_pushfstring
  000fa	48 8b cb	 mov	 rcx, rbx
  000fd	48 8b d0	 mov	 rdx, rax
  00100	e8 00 00 00 00	 call	 luaX_syntaxerror
  00105	cc		 int	 3
$LN24@forstat:
; Line 1373
  00106	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@PACDFECJ@?8?$DN?8?5or?5?8in?8?5expected?$AA@
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	e8 00 00 00 00	 call	 luaX_syntaxerror
  00115	cc		 int	 3
$LN21@forstat:
forstat	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT forlist
_TEXT	SEGMENT
e$ = 48
__$ArrayPad$ = 72
ls$ = 144
indexname$ = 152
forlist	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1337
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	57		 push	 rdi
  00004	41 54		 push	 r12
  00006	41 55		 push	 r13
  00008	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1339
  0001b	4c 8b 61 30	 mov	 r12, QWORD PTR [rcx+48]
  0001f	48 8b fa	 mov	 rdi, rdx
; Line 1341
  00022	bd 04 00 00 00	 mov	 ebp, 4
; Line 1343
  00027	45 0f b6 6c 24
	3c		 movzx	 r13d, BYTE PTR [r12+60]
; Line 1345
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@IJIMMPHF@?$CIfor?5generator?$CJ?$AA@
  00034	44 8d 45 0b	 lea	 r8d, QWORD PTR [rbp+11]
  00038	48 8b d9	 mov	 rbx, rcx
  0003b	e8 00 00 00 00	 call	 luaX_newstring
  00040	48 8b cb	 mov	 rcx, rbx
  00043	48 8b d0	 mov	 rdx, rax
  00046	e8 00 00 00 00	 call	 new_localvar
; Line 1346
  0004b	44 8d 45 07	 lea	 r8d, QWORD PTR [rbp+7]
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@CCNPGEGC@?$CIfor?5state?$CJ?$AA@
  00056	48 8b cb	 mov	 rcx, rbx
  00059	e8 00 00 00 00	 call	 luaX_newstring
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	48 8b d0	 mov	 rdx, rax
  00064	e8 00 00 00 00	 call	 new_localvar
; Line 1347
  00069	44 8d 45 09	 lea	 r8d, QWORD PTR [rbp+9]
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@PHJHAIC@?$CIfor?5control?$CJ?$AA@
  00074	48 8b cb	 mov	 rcx, rbx
  00077	e8 00 00 00 00	 call	 luaX_newstring
  0007c	48 8b cb	 mov	 rcx, rbx
  0007f	48 8b d0	 mov	 rdx, rax
  00082	e8 00 00 00 00	 call	 new_localvar
; Line 1349
  00087	48 8b d7	 mov	 rdx, rdi
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	e8 00 00 00 00	 call	 new_localvar
$LL2@forlist:
; Line 1350
  00092	83 7b 10 2c	 cmp	 DWORD PTR [rbx+16], 44	; 0000002cH
  00096	48 8b cb	 mov	 rcx, rbx
  00099	75 2d		 jne	 SHORT $LN1@forlist
  0009b	e8 00 00 00 00	 call	 luaX_next
; Line 1351
  000a0	81 7b 10 24 01
	00 00		 cmp	 DWORD PTR [rbx+16], 292	; 00000124H
  000a7	48 8b cb	 mov	 rcx, rbx
  000aa	0f 85 48 01 00
	00		 jne	 $LN92@forlist
  000b0	48 8b 7b 18	 mov	 rdi, QWORD PTR [rbx+24]
  000b4	e8 00 00 00 00	 call	 luaX_next
  000b9	48 8b d7	 mov	 rdx, rdi
  000bc	48 8b cb	 mov	 rcx, rbx
  000bf	e8 00 00 00 00	 call	 new_localvar
; Line 1352
  000c4	ff c5		 inc	 ebp
; Line 1353
  000c6	eb ca		 jmp	 SHORT $LL2@forlist
$LN1@forlist:
; Line 1354
  000c8	81 7b 10 0c 01
	00 00		 cmp	 DWORD PTR [rbx+16], 268	; 0000010cH
  000cf	0f 85 4c 01 00
	00		 jne	 $LN93@forlist
  000d5	48 89 b4 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rsi
  000dd	4c 89 74 24 58	 mov	 QWORD PTR [rsp+88], r14
  000e2	4c 89 7c 24 50	 mov	 QWORD PTR [rsp+80], r15
  000e7	e8 00 00 00 00	 call	 luaX_next
; Line 1355
  000ec	44 8b 7b 04	 mov	 r15d, DWORD PTR [rbx+4]
; Line 1356
  000f0	48 8d 54 24 30	 lea	 rdx, QWORD PTR e$[rsp]
  000f5	45 33 c0	 xor	 r8d, r8d
  000f8	48 8b cb	 mov	 rcx, rbx
  000fb	bf 01 00 00 00	 mov	 edi, 1
  00100	e8 00 00 00 00	 call	 subexpr
$LL35@forlist:
  00105	83 7b 10 2c	 cmp	 DWORD PTR [rbx+16], 44	; 0000002cH
  00109	75 2a		 jne	 SHORT $LN41@forlist
  0010b	48 8b cb	 mov	 rcx, rbx
  0010e	e8 00 00 00 00	 call	 luaX_next
  00113	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00117	48 8d 54 24 30	 lea	 rdx, QWORD PTR e$[rsp]
  0011c	e8 00 00 00 00	 call	 luaK_exp2nextreg
  00121	48 8d 54 24 30	 lea	 rdx, QWORD PTR e$[rsp]
  00126	45 33 c0	 xor	 r8d, r8d
  00129	48 8b cb	 mov	 rcx, rbx
  0012c	e8 00 00 00 00	 call	 subexpr
  00131	ff c7		 inc	 edi
  00133	eb d0		 jmp	 SHORT $LL35@forlist
$LN41@forlist:
  00135	8b 4c 24 30	 mov	 ecx, DWORD PTR e$[rsp]
  00139	4c 8b 73 30	 mov	 r14, QWORD PTR [rbx+48]
  0013d	be 03 00 00 00	 mov	 esi, 3
  00142	8d 41 f3	 lea	 eax, DWORD PTR [rcx-13]
  00145	2b f7		 sub	 esi, edi
  00147	33 d2		 xor	 edx, edx
  00149	83 f8 01	 cmp	 eax, 1
  0014c	76 33		 jbe	 SHORT $LN77@forlist
  0014e	85 c9		 test	 ecx, ecx
  00150	74 0d		 je	 SHORT $LN73@forlist
  00152	48 8d 54 24 30	 lea	 rdx, QWORD PTR e$[rsp]
  00157	49 8b ce	 mov	 rcx, r14
  0015a	e8 00 00 00 00	 call	 luaK_exp2nextreg
$LN73@forlist:
  0015f	85 f6		 test	 esi, esi
  00161	7e 43		 jle	 SHORT $LN75@forlist
  00163	41 0f b6 7e 3c	 movzx	 edi, BYTE PTR [r14+60]
  00168	8b d6		 mov	 edx, esi
  0016a	49 8b ce	 mov	 rcx, r14
  0016d	e8 00 00 00 00	 call	 luaK_reserveregs
  00172	44 8b c6	 mov	 r8d, esi
  00175	8b d7		 mov	 edx, edi
  00177	49 8b ce	 mov	 rcx, r14
  0017a	e8 00 00 00 00	 call	 luaK_nil
  0017f	eb 25		 jmp	 SHORT $LN75@forlist
$LN77@forlist:
  00181	ff c6		 inc	 esi
  00183	49 8b ce	 mov	 rcx, r14
  00186	0f 48 f2	 cmovs	 esi, edx
  00189	48 8d 54 24 30	 lea	 rdx, QWORD PTR e$[rsp]
  0018e	44 8b c6	 mov	 r8d, esi
  00191	e8 00 00 00 00	 call	 luaK_setreturns
  00196	83 fe 01	 cmp	 esi, 1
  00199	7e 0b		 jle	 SHORT $LN75@forlist
  0019b	8d 56 ff	 lea	 edx, DWORD PTR [rsi-1]
  0019e	49 8b ce	 mov	 rcx, r14
  001a1	e8 00 00 00 00	 call	 luaK_reserveregs
$LN75@forlist:
; Line 1357
  001a6	ba 03 00 00 00	 mov	 edx, 3
  001ab	49 8b cc	 mov	 rcx, r12
  001ae	e8 00 00 00 00	 call	 luaK_checkstack
; Line 1358
  001b3	44 8d 4d fd	 lea	 r9d, DWORD PTR [rbp-3]
  001b7	45 8b c7	 mov	 r8d, r15d
  001ba	41 8b d5	 mov	 edx, r13d
  001bd	48 8b cb	 mov	 rcx, rbx
  001c0	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  001c8	e8 00 00 00 00	 call	 forbody
  001cd	4c 8b 7c 24 50	 mov	 r15, QWORD PTR [rsp+80]
  001d2	4c 8b 74 24 58	 mov	 r14, QWORD PTR [rsp+88]
  001d7	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR [rsp+160]
; Line 1359
  001df	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001e4	48 33 cc	 xor	 rcx, rsp
  001e7	e8 00 00 00 00	 call	 __security_check_cookie
  001ec	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001f0	41 5d		 pop	 r13
  001f2	41 5c		 pop	 r12
  001f4	5f		 pop	 rdi
  001f5	5d		 pop	 rbp
  001f6	5b		 pop	 rbx
  001f7	c3		 ret	 0
$LN92@forlist:
; Line 1351
  001f8	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  001fd	e8 00 00 00 00	 call	 luaX_token2str
  00202	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00206	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  0020d	4c 8b c0	 mov	 r8, rax
  00210	e8 00 00 00 00	 call	 luaO_pushfstring
  00215	48 8b cb	 mov	 rcx, rbx
  00218	48 8b d0	 mov	 rdx, rax
  0021b	e8 00 00 00 00	 call	 luaX_syntaxerror
  00220	cc		 int	 3
$LN93@forlist:
; Line 1354
  00221	ba 0c 01 00 00	 mov	 edx, 268		; 0000010cH
  00226	e8 00 00 00 00	 call	 luaX_token2str
  0022b	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0022f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00236	4c 8b c0	 mov	 r8, rax
  00239	e8 00 00 00 00	 call	 luaO_pushfstring
  0023e	48 8b cb	 mov	 rcx, rbx
  00241	48 8b d0	 mov	 rdx, rax
  00244	e8 00 00 00 00	 call	 luaX_syntaxerror
  00249	cc		 int	 3
$LN91@forlist:
forlist	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT fornum
_TEXT	SEGMENT
e$1 = 48
e$2 = 48
e$3 = 48
__$ArrayPad$ = 72
ls$ = 128
varname$ = 136
line$ = 144
fornum	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1315
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 56		 push	 r14
  00007	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1317
  0001a	48 8b 71 30	 mov	 rsi, QWORD PTR [rcx+48]
  0001e	48 8b da	 mov	 rbx, rdx
  00021	41 8b e8	 mov	 ebp, r8d
; Line 1318
  00024	44 0f b6 76 3c	 movzx	 r14d, BYTE PTR [rsi+60]
; Line 1319
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@HHIHAJLG@?$CIfor?5index?$CJ?$AA@
  00030	41 b8 0b 00 00
	00		 mov	 r8d, 11
  00036	48 8b f9	 mov	 rdi, rcx
  00039	e8 00 00 00 00	 call	 luaX_newstring
  0003e	48 8b cf	 mov	 rcx, rdi
  00041	48 8b d0	 mov	 rdx, rax
  00044	e8 00 00 00 00	 call	 new_localvar
; Line 1320
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@HGGGDCAE@?$CIfor?5limit?$CJ?$AA@
  00050	41 b8 0b 00 00
	00		 mov	 r8d, 11
  00056	48 8b cf	 mov	 rcx, rdi
  00059	e8 00 00 00 00	 call	 luaX_newstring
  0005e	48 8b cf	 mov	 rcx, rdi
  00061	48 8b d0	 mov	 rdx, rax
  00064	e8 00 00 00 00	 call	 new_localvar
; Line 1321
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@ELGHHMFI@?$CIfor?5step?$CJ?$AA@
  00070	41 b8 0a 00 00
	00		 mov	 r8d, 10
  00076	48 8b cf	 mov	 rcx, rdi
  00079	e8 00 00 00 00	 call	 luaX_newstring
  0007e	48 8b cf	 mov	 rcx, rdi
  00081	48 8b d0	 mov	 rdx, rax
  00084	e8 00 00 00 00	 call	 new_localvar
; Line 1322
  00089	48 8b d3	 mov	 rdx, rbx
  0008c	48 8b cf	 mov	 rcx, rdi
  0008f	e8 00 00 00 00	 call	 new_localvar
; Line 1323
  00094	83 7f 10 3d	 cmp	 DWORD PTR [rdi+16], 61	; 0000003dH
  00098	48 8b cf	 mov	 rcx, rdi
  0009b	0f 85 de 00 00
	00		 jne	 $LN48@fornum
  000a1	e8 00 00 00 00	 call	 luaX_next
; Line 1324
  000a6	48 8d 54 24 30	 lea	 rdx, QWORD PTR e$3[rsp]
  000ab	45 33 c0	 xor	 r8d, r8d
  000ae	48 8b cf	 mov	 rcx, rdi
  000b1	e8 00 00 00 00	 call	 subexpr
  000b6	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  000ba	48 8d 54 24 30	 lea	 rdx, QWORD PTR e$3[rsp]
  000bf	e8 00 00 00 00	 call	 luaK_exp2nextreg
; Line 1325
  000c4	83 7f 10 2c	 cmp	 DWORD PTR [rdi+16], 44	; 0000002cH
  000c8	48 8b cf	 mov	 rcx, rdi
  000cb	0f 85 d7 00 00
	00		 jne	 $LN50@fornum
  000d1	e8 00 00 00 00	 call	 luaX_next
; Line 1326
  000d6	48 8d 54 24 30	 lea	 rdx, QWORD PTR e$2[rsp]
  000db	45 33 c0	 xor	 r8d, r8d
  000de	48 8b cf	 mov	 rcx, rdi
  000e1	e8 00 00 00 00	 call	 subexpr
  000e6	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  000ea	48 8d 54 24 30	 lea	 rdx, QWORD PTR e$2[rsp]
  000ef	e8 00 00 00 00	 call	 luaK_exp2nextreg
; Line 1327
  000f4	83 7f 10 2c	 cmp	 DWORD PTR [rdi+16], 44	; 0000002cH
  000f8	75 28		 jne	 SHORT $LN2@fornum
  000fa	48 8b cf	 mov	 rcx, rdi
  000fd	e8 00 00 00 00	 call	 luaX_next
; Line 1328
  00102	48 8d 54 24 30	 lea	 rdx, QWORD PTR e$1[rsp]
  00107	45 33 c0	 xor	 r8d, r8d
  0010a	48 8b cf	 mov	 rcx, rdi
  0010d	e8 00 00 00 00	 call	 subexpr
  00112	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00116	48 8d 54 24 30	 lea	 rdx, QWORD PTR e$1[rsp]
  0011b	e8 00 00 00 00	 call	 luaK_exp2nextreg
; Line 1329
  00120	eb 29		 jmp	 SHORT $LN1@fornum
$LN2@fornum:
; Line 1330
  00122	ba 01 00 00 00	 mov	 edx, 1
  00127	48 8b ce	 mov	 rcx, rsi
  0012a	e8 00 00 00 00	 call	 luaK_intK
  0012f	0f b6 56 3c	 movzx	 edx, BYTE PTR [rsi+60]
  00133	48 8b ce	 mov	 rcx, rsi
  00136	44 8b c0	 mov	 r8d, eax
  00139	e8 00 00 00 00	 call	 luaK_codek
; Line 1331
  0013e	ba 01 00 00 00	 mov	 edx, 1
  00143	48 8b ce	 mov	 rcx, rsi
  00146	e8 00 00 00 00	 call	 luaK_reserveregs
$LN1@fornum:
; Line 1333
  0014b	41 b9 01 00 00
	00		 mov	 r9d, 1
  00151	44 8b c5	 mov	 r8d, ebp
  00154	41 8b d6	 mov	 edx, r14d
  00157	48 8b cf	 mov	 rcx, rdi
  0015a	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00162	e8 00 00 00 00	 call	 forbody
; Line 1334
  00167	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0016c	48 33 cc	 xor	 rcx, rsp
  0016f	e8 00 00 00 00	 call	 __security_check_cookie
  00174	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00178	41 5e		 pop	 r14
  0017a	5f		 pop	 rdi
  0017b	5e		 pop	 rsi
  0017c	5d		 pop	 rbp
  0017d	5b		 pop	 rbx
  0017e	c3		 ret	 0
$LN48@fornum:
; Line 1323
  0017f	ba 3d 00 00 00	 mov	 edx, 61			; 0000003dH
  00184	e8 00 00 00 00	 call	 luaX_token2str
  00189	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00194	4c 8b c0	 mov	 r8, rax
  00197	e8 00 00 00 00	 call	 luaO_pushfstring
  0019c	48 8b cf	 mov	 rcx, rdi
  0019f	48 8b d0	 mov	 rdx, rax
  001a2	e8 00 00 00 00	 call	 luaX_syntaxerror
  001a7	cc		 int	 3
$LN50@fornum:
; Line 1325
  001a8	ba 2c 00 00 00	 mov	 edx, 44			; 0000002cH
  001ad	e8 00 00 00 00	 call	 luaX_token2str
  001b2	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  001b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  001bd	4c 8b c0	 mov	 r8, rax
  001c0	e8 00 00 00 00	 call	 luaO_pushfstring
  001c5	48 8b cf	 mov	 rcx, rdi
  001c8	48 8b d0	 mov	 rdx, rax
  001cb	e8 00 00 00 00	 call	 luaX_syntaxerror
  001d0	cc		 int	 3
$LN47@fornum:
fornum	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT forbody
_TEXT	SEGMENT
bl$ = 48
bl$1 = 72
ls$ = 128
base$ = 136
line$ = 144
nvars$ = 152
isnum$ = 160
forbody	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1289
  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 54		 push	 r12
  0000c	41 55		 push	 r13
  0000e	41 56		 push	 r14
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H
; Line 1292
  00014	48 8b 79 30	 mov	 rdi, QWORD PTR [rcx+48]
; Line 1294
  00018	41 ba 03 00 00
	00		 mov	 r10d, 3
  0001e	45 8b e8	 mov	 r13d, r8d
  00021	44 00 57 3a	 add	 BYTE PTR [rdi+58], r10b
  00025	45 8b e1	 mov	 r12d, r9d
  00028	44 8b f2	 mov	 r14d, edx
  0002b	48 8b f1	 mov	 rsi, rcx
  0002e	45 8b c2	 mov	 r8d, r10d
$LL9@forbody:
  00031	48 63 47 34	 movsxd	 rax, DWORD PTR [rdi+52]
  00035	0f b6 57 3a	 movzx	 edx, BYTE PTR [rdi+58]
  00039	49 2b d0	 sub	 rdx, r8
  0003c	49 ff c8	 dec	 r8
  0003f	48 03 d0	 add	 rdx, rax
  00042	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00046	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0004a	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0004d	48 0f bf 14 50	 movsx	 rdx, WORD PTR [rax+rdx*2]
  00052	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00055	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00059	8b 47 20	 mov	 eax, DWORD PTR [rdi+32]
  0005c	48 03 d2	 add	 rdx, rdx
  0005f	89 44 d1 08	 mov	 DWORD PTR [rcx+rdx*8+8], eax
  00063	41 ff ca	 dec	 r10d
  00066	75 c9		 jne	 SHORT $LL9@forbody
; Line 1295
  00068	81 7e 10 03 01
	00 00		 cmp	 DWORD PTR [rsi+16], 259	; 00000103H
  0006f	48 8b ce	 mov	 rcx, rsi
  00072	0f 85 ce 01 00
	00		 jne	 $LN60@forbody
  00078	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx
  00080	48 89 ac 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rbp
  00088	e8 00 00 00 00	 call	 luaX_next
; Line 1296
  0008d	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR isnum$[rsp], 0
  00095	48 8b cf	 mov	 rcx, rdi
  00098	74 15		 je	 SHORT $LN5@forbody
  0009a	41 b9 fe ff 01
	00		 mov	 r9d, 131070		; 0001fffeH
  000a0	45 8b c6	 mov	 r8d, r14d
  000a3	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  000a8	e8 00 00 00 00	 call	 luaK_codeABx
  000ad	eb 05		 jmp	 SHORT $LN58@forbody
$LN5@forbody:
  000af	e8 00 00 00 00	 call	 luaK_jump
$LN58@forbody:
; Line 1297
  000b4	c6 44 24 42 00	 mov	 BYTE PTR bl$[rsp+18], 0
  000b9	8b e8		 mov	 ebp, eax
  000bb	0f b6 47 3a	 movzx	 eax, BYTE PTR [rdi+58]
  000bf	88 44 24 40	 mov	 BYTE PTR bl$[rsp+16], al
  000c3	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
; Line 1298
  000c7	45 8b cc	 mov	 r9d, r12d
  000ca	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000ce	8b 41 28	 mov	 eax, DWORD PTR [rcx+40]
  000d1	89 44 24 38	 mov	 DWORD PTR bl$[rsp+8], eax
  000d5	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  000d9	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000dd	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  000e0	c6 44 24 41 00	 mov	 BYTE PTR bl$[rsp+17], 0
  000e5	89 44 24 3c	 mov	 DWORD PTR bl$[rsp+12], eax
  000e9	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  000ed	48 89 44 24 30	 mov	 QWORD PTR bl$[rsp], rax
  000f2	48 8d 44 24 30	 lea	 rax, QWORD PTR bl$[rsp]
  000f7	48 89 47 18	 mov	 QWORD PTR [rdi+24], rax
  000fb	4c 8b 46 30	 mov	 r8, QWORD PTR [rsi+48]
  000ff	45 00 60 3a	 add	 BYTE PTR [r8+58], r12b
  00103	45 85 e4	 test	 r12d, r12d
  00106	74 41		 je	 SHORT $LN26@forbody
  00108	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL28@forbody:
  00110	41 0f b6 50 3a	 movzx	 edx, BYTE PTR [r8+58]
  00115	49 63 c1	 movsxd	 rax, r9d
  00118	48 2b d0	 sub	 rdx, rax
  0011b	49 63 40 34	 movsxd	 rax, DWORD PTR [r8+52]
  0011f	48 03 d0	 add	 rdx, rax
  00122	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  00126	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0012a	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0012d	48 0f bf 14 50	 movsx	 rdx, WORD PTR [rax+rdx*2]
  00132	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00135	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00139	41 8b 40 20	 mov	 eax, DWORD PTR [r8+32]
  0013d	48 03 d2	 add	 rdx, rdx
  00140	89 44 d1 08	 mov	 DWORD PTR [rcx+rdx*8+8], eax
  00144	41 ff c9	 dec	 r9d
  00147	75 c7		 jne	 SHORT $LL28@forbody
$LN26@forbody:
; Line 1299
  00149	41 8b d4	 mov	 edx, r12d
  0014c	48 8b cf	 mov	 rcx, rdi
  0014f	e8 00 00 00 00	 call	 luaK_reserveregs
; Line 1300
  00154	48 8b 5e 30	 mov	 rbx, QWORD PTR [rsi+48]
  00158	c6 44 24 5a 00	 mov	 BYTE PTR bl$1[rsp+18], 0
  0015d	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  00161	48 8b ce	 mov	 rcx, rsi
  00164	88 44 24 58	 mov	 BYTE PTR bl$1[rsp+16], al
  00168	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0016c	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00170	8b 42 28	 mov	 eax, DWORD PTR [rdx+40]
  00173	89 44 24 50	 mov	 DWORD PTR bl$1[rsp+8], eax
  00177	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0017b	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0017f	8b 42 18	 mov	 eax, DWORD PTR [rdx+24]
  00182	c6 44 24 59 00	 mov	 BYTE PTR bl$1[rsp+17], 0
  00187	89 44 24 54	 mov	 DWORD PTR bl$1[rsp+12], eax
  0018b	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  0018f	48 89 44 24 48	 mov	 QWORD PTR bl$1[rsp], rax
  00194	48 8d 44 24 48	 lea	 rax, QWORD PTR bl$1[rsp]
  00199	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
  0019d	e8 00 00 00 00	 call	 statlist
  001a2	48 8b cb	 mov	 rcx, rbx
  001a5	e8 00 00 00 00	 call	 leaveblock
; Line 1301
  001aa	48 8b cf	 mov	 rcx, rdi
  001ad	e8 00 00 00 00	 call	 leaveblock
; Line 1302
  001b2	8b d5		 mov	 edx, ebp
  001b4	48 8b cf	 mov	 rcx, rdi
  001b7	e8 00 00 00 00	 call	 luaK_patchtohere
; Line 1303
  001bc	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR isnum$[rsp], 0
  001c4	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
; Line 1304
  001cc	45 8b c6	 mov	 r8d, r14d
  001cf	48 8b cf	 mov	 rcx, rdi
  001d2	74 07		 je	 SHORT $LN2@forbody
  001d4	ba 27 00 00 00	 mov	 edx, 39			; 00000027H
; Line 1305
  001d9	eb 28		 jmp	 SHORT $LN59@forbody
$LN2@forbody:
; Line 1306
  001db	45 33 c9	 xor	 r9d, r9d
  001de	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  001e3	41 8d 51 29	 lea	 edx, QWORD PTR [r9+41]
  001e7	e8 00 00 00 00	 call	 luaK_codeABC
; Line 1307
  001ec	41 8b d5	 mov	 edx, r13d
  001ef	48 8b cf	 mov	 rcx, rdi
  001f2	e8 00 00 00 00	 call	 luaK_fixline
; Line 1308
  001f7	45 8d 46 02	 lea	 r8d, DWORD PTR [r14+2]
  001fb	ba 2a 00 00 00	 mov	 edx, 42			; 0000002aH
  00200	48 8b cf	 mov	 rcx, rdi
$LN59@forbody:
  00203	41 b9 fe ff 01
	00		 mov	 r9d, 131070		; 0001fffeH
  00209	e8 00 00 00 00	 call	 luaK_codeABx
; Line 1310
  0020e	44 8d 45 01	 lea	 r8d, DWORD PTR [rbp+1]
  00212	48 8b cf	 mov	 rcx, rdi
  00215	8b d0		 mov	 edx, eax
  00217	e8 00 00 00 00	 call	 luaK_patchlist
; Line 1311
  0021c	41 8b d5	 mov	 edx, r13d
  0021f	48 8b cf	 mov	 rcx, rdi
  00222	e8 00 00 00 00	 call	 luaK_fixline
  00227	48 8b ac 24 88
	00 00 00	 mov	 rbp, QWORD PTR [rsp+136]
; Line 1312
  0022f	4c 8d 5c 24 60	 lea	 r11, QWORD PTR [rsp+96]
  00234	49 8b 73 30	 mov	 rsi, QWORD PTR [r11+48]
  00238	49 8b 7b 38	 mov	 rdi, QWORD PTR [r11+56]
  0023c	49 8b e3	 mov	 rsp, r11
  0023f	41 5e		 pop	 r14
  00241	41 5d		 pop	 r13
  00243	41 5c		 pop	 r12
  00245	c3		 ret	 0
$LN60@forbody:
; Line 1295
  00246	ba 03 01 00 00	 mov	 edx, 259		; 00000103H
  0024b	e8 00 00 00 00	 call	 luaX_token2str
  00250	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  00254	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  0025b	4c 8b c0	 mov	 r8, rax
  0025e	e8 00 00 00 00	 call	 luaO_pushfstring
  00263	48 8b ce	 mov	 rcx, rsi
  00266	48 8b d0	 mov	 rdx, rax
  00269	e8 00 00 00 00	 call	 luaX_syntaxerror
  0026e	cc		 int	 3
$LN57@forbody:
forbody	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT exp1
_TEXT	SEGMENT
e$ = 32
__$ArrayPad$ = 56
ls$ = 80
exp1	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1278
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000d	48 33 c4	 xor	 rax, rsp
  00010	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1281
  00015	48 8d 54 24 20	 lea	 rdx, QWORD PTR e$[rsp]
  0001a	45 33 c0	 xor	 r8d, r8d
  0001d	48 8b d9	 mov	 rbx, rcx
  00020	e8 00 00 00 00	 call	 subexpr
; Line 1282
  00025	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00029	48 8d 54 24 20	 lea	 rdx, QWORD PTR e$[rsp]
  0002e	e8 00 00 00 00	 call	 luaK_exp2nextreg
; Line 1285
  00033	8b 44 24 28	 mov	 eax, DWORD PTR e$[rsp+8]
; Line 1286
  00037	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0003c	48 33 cc	 xor	 rcx, rsp
  0003f	e8 00 00 00 00	 call	 __security_check_cookie
  00044	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
exp1	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT repeatstat
_TEXT	SEGMENT
bl2$ = 32
bl1$ = 56
v$1 = 80
__$ArrayPad$ = 104
ls$ = 144
line$ = 152
repeatstat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1258
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1261
  0001b	48 8b 71 30	 mov	 rsi, QWORD PTR [rcx+48]
  0001f	48 8b f9	 mov	 rdi, rcx
  00022	8b da		 mov	 ebx, edx
; Line 1262
  00024	48 8b ce	 mov	 rcx, rsi
  00027	e8 00 00 00 00	 call	 luaK_getlabel
; Line 1264
  0002c	c6 44 24 4a 01	 mov	 BYTE PTR bl1$[rsp+18], 1
  00031	0f b6 4e 3a	 movzx	 ecx, BYTE PTR [rsi+58]
  00035	88 4c 24 48	 mov	 BYTE PTR bl1$[rsp+16], cl
  00039	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  0003d	8b e8		 mov	 ebp, eax
  0003f	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00043	8b 4a 28	 mov	 ecx, DWORD PTR [rdx+40]
  00046	89 4c 24 40	 mov	 DWORD PTR bl1$[rsp+8], ecx
  0004a	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  0004e	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00052	8b 4a 18	 mov	 ecx, DWORD PTR [rdx+24]
  00055	c6 44 24 49 00	 mov	 BYTE PTR bl1$[rsp+17], 0
  0005a	89 4c 24 44	 mov	 DWORD PTR bl1$[rsp+12], ecx
  0005e	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]
  00062	48 89 44 24 38	 mov	 QWORD PTR bl1$[rsp], rax
  00067	48 8d 44 24 38	 lea	 rax, QWORD PTR bl1$[rsp]
  0006c	48 89 46 18	 mov	 QWORD PTR [rsi+24], rax
; Line 1265
  00070	c6 44 24 32 00	 mov	 BYTE PTR bl2$[rsp+18], 0
  00075	0f b6 46 3a	 movzx	 eax, BYTE PTR [rsi+58]
  00079	88 44 24 30	 mov	 BYTE PTR bl2$[rsp+16], al
  0007d	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00081	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00085	8b 41 28	 mov	 eax, DWORD PTR [rcx+40]
  00088	89 44 24 28	 mov	 DWORD PTR bl2$[rsp+8], eax
  0008c	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00090	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00094	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  00097	c6 44 24 31 00	 mov	 BYTE PTR bl2$[rsp+17], 0
; Line 1266
  0009c	48 8b cf	 mov	 rcx, rdi
  0009f	89 44 24 2c	 mov	 DWORD PTR bl2$[rsp+12], eax
  000a3	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]
  000a7	48 89 44 24 20	 mov	 QWORD PTR bl2$[rsp], rax
  000ac	48 8d 44 24 20	 lea	 rax, QWORD PTR bl2$[rsp]
  000b1	48 89 46 18	 mov	 QWORD PTR [rsi+24], rax
  000b5	e8 00 00 00 00	 call	 luaX_next
; Line 1267
  000ba	48 8b cf	 mov	 rcx, rdi
  000bd	e8 00 00 00 00	 call	 statlist
; Line 1268
  000c2	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  000c7	44 8b cb	 mov	 r9d, ebx
  000ca	44 8d 42 fc	 lea	 r8d, QWORD PTR [rdx-4]
  000ce	48 8b cf	 mov	 rcx, rdi
  000d1	e8 00 00 00 00	 call	 check_match
; Line 1269
  000d6	48 8d 54 24 50	 lea	 rdx, QWORD PTR v$1[rsp]
  000db	45 33 c0	 xor	 r8d, r8d
  000de	48 8b cf	 mov	 rcx, rdi
  000e1	e8 00 00 00 00	 call	 subexpr
  000e6	8b 44 24 50	 mov	 eax, DWORD PTR v$1[rsp]
  000ea	b9 03 00 00 00	 mov	 ecx, 3
  000ef	83 f8 01	 cmp	 eax, 1
  000f2	48 8d 54 24 50	 lea	 rdx, QWORD PTR v$1[rsp]
  000f7	0f 44 c1	 cmove	 eax, ecx
  000fa	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  000fe	89 44 24 50	 mov	 DWORD PTR v$1[rsp], eax
  00102	e8 00 00 00 00	 call	 luaK_goiftrue
; Line 1270
  00107	80 7c 24 31 00	 cmp	 BYTE PTR bl2$[rsp+17], 0
  0010c	8b 5c 24 64	 mov	 ebx, DWORD PTR v$1[rsp+20]
  00110	74 10		 je	 SHORT $LN1@repeatstat
; Line 1271
  00112	44 0f b6 44 24
	30		 movzx	 r8d, BYTE PTR bl2$[rsp+16]
  00118	8b d3		 mov	 edx, ebx
  0011a	48 8b ce	 mov	 rcx, rsi
  0011d	e8 00 00 00 00	 call	 luaK_patchclose
$LN1@repeatstat:
; Line 1272
  00122	48 8b ce	 mov	 rcx, rsi
  00125	e8 00 00 00 00	 call	 leaveblock
; Line 1273
  0012a	44 8b c5	 mov	 r8d, ebp
  0012d	8b d3		 mov	 edx, ebx
  0012f	48 8b ce	 mov	 rcx, rsi
  00132	e8 00 00 00 00	 call	 luaK_patchlist
; Line 1274
  00137	48 8b ce	 mov	 rcx, rsi
  0013a	e8 00 00 00 00	 call	 leaveblock
; Line 1275
  0013f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00144	48 33 cc	 xor	 rcx, rsp
  00147	e8 00 00 00 00	 call	 __security_check_cookie
  0014c	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]
  00154	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00158	5f		 pop	 rdi
  00159	5e		 pop	 rsi
  0015a	5d		 pop	 rbp
  0015b	c3		 ret	 0
repeatstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT whilestat
_TEXT	SEGMENT
bl$1 = 32
bl$ = 56
v$2 = 80
__$ArrayPad$ = 104
ls$ = 144
line$ = 152
whilestat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1239
  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 56		 push	 r14
  00009	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1241
  0001c	48 8b 71 30	 mov	 rsi, QWORD PTR [rcx+48]
  00020	8b ea		 mov	 ebp, edx
  00022	48 8b f9	 mov	 rdi, rcx
; Line 1245
  00025	e8 00 00 00 00	 call	 luaX_next
; Line 1246
  0002a	48 8b ce	 mov	 rcx, rsi
  0002d	e8 00 00 00 00	 call	 luaK_getlabel
; Line 1247
  00032	48 8d 54 24 50	 lea	 rdx, QWORD PTR v$2[rsp]
  00037	45 33 c0	 xor	 r8d, r8d
  0003a	48 8b cf	 mov	 rcx, rdi
  0003d	44 8b f0	 mov	 r14d, eax
  00040	e8 00 00 00 00	 call	 subexpr
  00045	8b 4c 24 50	 mov	 ecx, DWORD PTR v$2[rsp]
  00049	b8 03 00 00 00	 mov	 eax, 3
  0004e	83 f9 01	 cmp	 ecx, 1
  00051	48 8d 54 24 50	 lea	 rdx, QWORD PTR v$2[rsp]
  00056	0f 44 c8	 cmove	 ecx, eax
  00059	89 4c 24 50	 mov	 DWORD PTR v$2[rsp], ecx
  0005d	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00061	e8 00 00 00 00	 call	 luaK_goiftrue
; Line 1248
  00066	c6 44 24 4a 01	 mov	 BYTE PTR bl$[rsp+18], 1
  0006b	0f b6 46 3a	 movzx	 eax, BYTE PTR [rsi+58]
  0006f	88 44 24 48	 mov	 BYTE PTR bl$[rsp+16], al
  00073	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00077	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0007b	8b 41 28	 mov	 eax, DWORD PTR [rcx+40]
  0007e	89 44 24 40	 mov	 DWORD PTR bl$[rsp+8], eax
  00082	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00086	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0008a	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  0008d	c6 44 24 49 00	 mov	 BYTE PTR bl$[rsp+17], 0
; Line 1249
  00092	48 8b cf	 mov	 rcx, rdi
  00095	89 44 24 44	 mov	 DWORD PTR bl$[rsp+12], eax
  00099	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]
  0009d	48 89 44 24 38	 mov	 QWORD PTR bl$[rsp], rax
  000a2	48 8d 44 24 38	 lea	 rax, QWORD PTR bl$[rsp]
  000a7	48 89 46 18	 mov	 QWORD PTR [rsi+24], rax
  000ab	81 7f 10 03 01
	00 00		 cmp	 DWORD PTR [rdi+16], 259	; 00000103H
  000b2	0f 85 c6 00 00
	00		 jne	 $LN37@whilestat
  000b8	48 89 9c 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rbx
  000c0	e8 00 00 00 00	 call	 luaX_next
; Line 1250
  000c5	48 8b 5f 30	 mov	 rbx, QWORD PTR [rdi+48]
  000c9	c6 44 24 32 00	 mov	 BYTE PTR bl$1[rsp+18], 0
  000ce	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  000d2	48 8b cf	 mov	 rcx, rdi
  000d5	88 44 24 30	 mov	 BYTE PTR bl$1[rsp+16], al
  000d9	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000dd	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000e1	8b 42 28	 mov	 eax, DWORD PTR [rdx+40]
  000e4	89 44 24 28	 mov	 DWORD PTR bl$1[rsp+8], eax
  000e8	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000ec	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000f0	8b 42 18	 mov	 eax, DWORD PTR [rdx+24]
  000f3	c6 44 24 31 00	 mov	 BYTE PTR bl$1[rsp+17], 0
  000f8	89 44 24 2c	 mov	 DWORD PTR bl$1[rsp+12], eax
  000fc	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00100	48 89 44 24 20	 mov	 QWORD PTR bl$1[rsp], rax
  00105	48 8d 44 24 20	 lea	 rax, QWORD PTR bl$1[rsp]
  0010a	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
  0010e	e8 00 00 00 00	 call	 statlist
  00113	48 8b cb	 mov	 rcx, rbx
  00116	e8 00 00 00 00	 call	 leaveblock
; Line 1251
  0011b	48 8b ce	 mov	 rcx, rsi
  0011e	e8 00 00 00 00	 call	 luaK_jump
  00123	45 8b c6	 mov	 r8d, r14d
  00126	48 8b ce	 mov	 rcx, rsi
  00129	8b d0		 mov	 edx, eax
  0012b	e8 00 00 00 00	 call	 luaK_patchlist
; Line 1252
  00130	ba 06 01 00 00	 mov	 edx, 262		; 00000106H
  00135	44 8b cd	 mov	 r9d, ebp
  00138	44 8d 42 10	 lea	 r8d, QWORD PTR [rdx+16]
  0013c	48 8b cf	 mov	 rcx, rdi
  0013f	e8 00 00 00 00	 call	 check_match
; Line 1253
  00144	48 8b ce	 mov	 rcx, rsi
  00147	e8 00 00 00 00	 call	 leaveblock
; Line 1254
  0014c	8b 54 24 64	 mov	 edx, DWORD PTR v$2[rsp+20]
  00150	48 8b ce	 mov	 rcx, rsi
  00153	e8 00 00 00 00	 call	 luaK_patchtohere
  00158	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]
; Line 1255
  00160	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00165	48 33 cc	 xor	 rcx, rsp
  00168	e8 00 00 00 00	 call	 __security_check_cookie
  0016d	48 8b ac 24 a8
	00 00 00	 mov	 rbp, QWORD PTR [rsp+168]
  00175	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00179	41 5e		 pop	 r14
  0017b	5f		 pop	 rdi
  0017c	5e		 pop	 rsi
  0017d	c3		 ret	 0
$LN37@whilestat:
; Line 1249
  0017e	ba 03 01 00 00	 mov	 edx, 259		; 00000103H
  00183	e8 00 00 00 00	 call	 luaX_token2str
  00188	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  0018c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00193	4c 8b c0	 mov	 r8, rax
  00196	e8 00 00 00 00	 call	 luaO_pushfstring
  0019b	48 8b cf	 mov	 rcx, rdi
  0019e	48 8b d0	 mov	 rdx, rax
  001a1	e8 00 00 00 00	 call	 luaX_syntaxerror
  001a6	cc		 int	 3
$LN36@whilestat:
whilestat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT labelstat
_TEXT	SEGMENT
ls$ = 64
label$ = 72
line$ = 80
labelstat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1221
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 1224
  0001a	48 8b 79 58	 mov	 rdi, QWORD PTR [rcx+88]
  0001e	48 8b 69 30	 mov	 rbp, QWORD PTR [rcx+48]
  00022	45 8b f0	 mov	 r14d, r8d
  00025	48 8b f2	 mov	 rsi, rdx
; Line 1226
  00028	4c 8b c2	 mov	 r8, rdx
  0002b	48 8b d9	 mov	 rbx, rcx
  0002e	48 8d 57 20	 lea	 rdx, QWORD PTR [rdi+32]
  00032	48 8b cd	 mov	 rcx, rbp
  00035	e8 00 00 00 00	 call	 checkrepeated
; Line 1227
  0003a	81 7b 10 20 01
	00 00		 cmp	 DWORD PTR [rbx+16], 288	; 00000120H
  00041	48 8b cb	 mov	 rcx, rbx
  00044	0f 85 96 00 00
	00		 jne	 $LN71@labelstat
  0004a	e8 00 00 00 00	 call	 luaX_next
; Line 1229
  0004f	8b 45 20	 mov	 eax, DWORD PTR [rbp+32]
  00052	48 8d 57 20	 lea	 rdx, QWORD PTR [rdi+32]
  00056	45 8b ce	 mov	 r9d, r14d
  00059	4c 8b c6	 mov	 r8, rsi
  0005c	48 8b cb	 mov	 rcx, rbx
  0005f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00063	e8 00 00 00 00	 call	 newlabelentry
  00068	48 63 f0	 movsxd	 rsi, eax
  0006b	0f 1f 44 00 00	 npad	 5
; Line 1230
$LL16@labelstat:
  00070	8b 4b 10	 mov	 ecx, DWORD PTR [rbx+16]
  00073	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  00076	74 08		 je	 SHORT $LN14@labelstat
  00078	81 f9 20 01 00
	00		 cmp	 ecx, 288		; 00000120H
  0007e	75 0a		 jne	 SHORT $LN15@labelstat
$LN14@labelstat:
  00080	48 8b cb	 mov	 rcx, rbx
  00083	e8 00 00 00 00	 call	 statement
  00088	eb e6		 jmp	 SHORT $LL16@labelstat
$LN15@labelstat:
  0008a	8d 81 fc fe ff
	ff		 lea	 eax, DWORD PTR [rcx-260]
  00090	83 f8 02	 cmp	 eax, 2
  00093	76 08		 jbe	 SHORT $LN67@labelstat
  00095	81 f9 21 01 00
	00		 cmp	 ecx, 289		; 00000121H
  0009b	75 15		 jne	 SHORT $LN1@labelstat
$LN67@labelstat:
; Line 1233
  0009d	4c 8b 45 18	 mov	 r8, QWORD PTR [rbp+24]
  000a1	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000a5	48 8d 14 76	 lea	 rdx, QWORD PTR [rsi+rsi*2]
  000a9	41 0f b6 40 10	 movzx	 eax, BYTE PTR [r8+16]
  000ae	88 44 d1 10	 mov	 BYTE PTR [rcx+rdx*8+16], al
$LN1@labelstat:
; Line 1235
  000b2	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000b6	48 8d 0c 76	 lea	 rcx, QWORD PTR [rsi+rsi*2]
  000ba	48 8d 14 c8	 lea	 rdx, QWORD PTR [rax+rcx*8]
  000be	48 8b cb	 mov	 rcx, rbx
; Line 1236
  000c1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000c6	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000cb	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000d0	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  000d5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d9	41 5e		 pop	 r14
; Line 1235
  000db	e9 00 00 00 00	 jmp	 findgotos
$LN71@labelstat:
; Line 1227
  000e0	ba 20 01 00 00	 mov	 edx, 288		; 00000120H
  000e5	e8 00 00 00 00	 call	 luaX_token2str
  000ea	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  000f5	4c 8b c0	 mov	 r8, rax
  000f8	e8 00 00 00 00	 call	 luaO_pushfstring
  000fd	48 8b cb	 mov	 rcx, rbx
  00100	48 8b d0	 mov	 rdx, rax
  00103	e8 00 00 00 00	 call	 luaX_syntaxerror
  00108	cc		 int	 3
$LN70@labelstat:
labelstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT skipnoopstat
_TEXT	SEGMENT
ls$ = 48
skipnoopstat PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1215
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@skipnoopst:
; Line 1216
  00010	8b 43 10	 mov	 eax, DWORD PTR [rbx+16]
  00013	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00016	74 07		 je	 SHORT $LN1@skipnoopst
  00018	3d 20 01 00 00	 cmp	 eax, 288		; 00000120H
  0001d	75 0a		 jne	 SHORT $LN2@skipnoopst
$LN1@skipnoopst:
; Line 1217
  0001f	48 8b cb	 mov	 rcx, rbx
  00022	e8 00 00 00 00	 call	 statement
  00027	eb e7		 jmp	 SHORT $LL3@skipnoopst
$LN2@skipnoopst:
; Line 1218
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
skipnoopstat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT checkrepeated
_TEXT	SEGMENT
fs$ = 48
ll$ = 56
label$ = 64
checkrepeated PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1201
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1203
  00006	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  0000a	4d 8b d0	 mov	 r10, r8
  0000d	4c 63 42 08	 movsxd	 r8, DWORD PTR [rdx+8]
  00011	4c 63 48 08	 movsxd	 r9, DWORD PTR [rax+8]
  00015	48 8b d9	 mov	 rbx, rcx
  00018	45 3b c8	 cmp	 r9d, r8d
  0001b	7d 2f		 jge	 SHORT $LN2@checkrepea
; Line 1204
  0001d	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00022	48 8b 3a	 mov	 rdi, QWORD PTR [rdx]
  00025	4b 8d 14 49	 lea	 rdx, QWORD PTR [r9+r9*2]
  00029	4d 8b d8	 mov	 r11, r8
  0002c	49 8b c1	 mov	 rax, r9
  0002f	4c 8d 04 d7	 lea	 r8, QWORD PTR [rdi+rdx*8]
$LL4@checkrepea:
  00033	4d 3b 10	 cmp	 r10, QWORD PTR [r8]
  00036	74 1a		 je	 SHORT $LN17@checkrepea
; Line 1203
  00038	48 ff c0	 inc	 rax
  0003b	41 ff c1	 inc	 r9d
  0003e	49 83 c0 18	 add	 r8, 24
  00042	49 3b c3	 cmp	 rax, r11
  00045	7c ec		 jl	 SHORT $LL4@checkrepea
  00047	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN2@checkrepea:
; Line 1211
  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
$LN17@checkrepea:
; Line 1207
  00052	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00056	49 63 c1	 movsxd	 rax, r9d
  00059	4d 8d 42 18	 lea	 r8, QWORD PTR [r10+24]
  0005d	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00061	48 8d 14 40	 lea	 rdx, QWORD PTR [rax+rax*2]
  00065	44 8b 4c d7 0c	 mov	 r9d, DWORD PTR [rdi+rdx*8+12]
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@FBAEKGNA@label?5?8?$CFs?8?5already?5defined?5on?5li@
  00071	e8 00 00 00 00	 call	 luaO_pushfstring
; Line 1208
  00076	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0007a	48 8b d0	 mov	 rdx, rax
  0007d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [rcx+16], 0
  00084	e8 00 00 00 00	 call	 luaX_syntaxerror
  00089	cc		 int	 3
$LN16@checkrepea:
checkrepeated ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gotostat
_TEXT	SEGMENT
ls$ = 64
pc$ = 72
gotostat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1185
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 1189
  00014	81 79 10 0a 01
	00 00		 cmp	 DWORD PTR [rcx+16], 266	; 0000010aH
  0001b	8b 69 04	 mov	 ebp, DWORD PTR [rcx+4]
  0001e	8b f2		 mov	 esi, edx
  00020	48 8b d9	 mov	 rbx, rcx
  00023	75 1c		 jne	 SHORT $LN2@gotostat
  00025	e8 00 00 00 00	 call	 luaX_next
; Line 1190
  0002a	81 7b 10 24 01
	00 00		 cmp	 DWORD PTR [rbx+16], 292	; 00000124H
  00031	48 8b cb	 mov	 rcx, rbx
  00034	75 5b		 jne	 SHORT $LN21@gotostat
  00036	48 8b 7b 18	 mov	 rdi, QWORD PTR [rbx+24]
  0003a	e8 00 00 00 00	 call	 luaX_next
; Line 1191
  0003f	eb 18		 jmp	 SHORT $LN1@gotostat
$LN2@gotostat:
; Line 1192
  00041	e8 00 00 00 00	 call	 luaX_next
; Line 1193
  00046	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05ELPHFHOI@break?$AA@
  00051	e8 00 00 00 00	 call	 luaS_new
  00056	48 8b f8	 mov	 rdi, rax
$LN1@gotostat:
; Line 1195
  00059	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0005d	44 8b cd	 mov	 r9d, ebp
  00060	4c 8b c7	 mov	 r8, rdi
  00063	48 8b cb	 mov	 rcx, rbx
  00066	48 83 c2 10	 add	 rdx, 16
  0006a	89 74 24 20	 mov	 DWORD PTR [rsp+32], esi
  0006e	e8 00 00 00 00	 call	 newlabelentry
; Line 1196
  00073	48 8b cb	 mov	 rcx, rbx
  00076	8b d0		 mov	 edx, eax
; Line 1197
  00078	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0007d	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00082	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00087	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008b	5f		 pop	 rdi
; Line 1196
  0008c	e9 00 00 00 00	 jmp	 findlabel
$LN21@gotostat:
; Line 1190
  00091	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  00096	e8 00 00 00 00	 call	 luaX_token2str
  0009b	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  000a6	4c 8b c0	 mov	 r8, rax
  000a9	e8 00 00 00 00	 call	 luaO_pushfstring
  000ae	48 8b cb	 mov	 rcx, rbx
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	e8 00 00 00 00	 call	 luaX_syntaxerror
  000b9	cc		 int	 3
$LN20@gotostat:
gotostat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cond
_TEXT	SEGMENT
v$ = 32
__$ArrayPad$ = 56
ls$ = 80
cond	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1175
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000d	48 33 c4	 xor	 rax, rsp
  00010	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1178
  00015	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  0001a	45 33 c0	 xor	 r8d, r8d
  0001d	48 8b d9	 mov	 rbx, rcx
  00020	e8 00 00 00 00	 call	 subexpr
; Line 1179
  00025	8b 44 24 20	 mov	 eax, DWORD PTR v$[rsp]
  00029	b9 03 00 00 00	 mov	 ecx, 3
  0002e	83 f8 01	 cmp	 eax, 1
; Line 1180
  00031	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  00036	0f 44 c1	 cmove	 eax, ecx
  00039	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  0003d	89 44 24 20	 mov	 DWORD PTR v$[rsp], eax
  00041	e8 00 00 00 00	 call	 luaK_goiftrue
; Line 1181
  00046	8b 44 24 34	 mov	 eax, DWORD PTR v$[rsp+20]
; Line 1182
  0004a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0004f	48 33 cc	 xor	 rcx, rsp
  00052	e8 00 00 00 00	 call	 __security_check_cookie
  00057	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005b	5b		 pop	 rbx
  0005c	c3		 ret	 0
cond	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT assignment
_TEXT	SEGMENT
tv460 = 48
fs$1$ = 56
nv$1 = 64
e$ = 96
__$ArrayPad$ = 120
ls$ = 160
lh$ = 168
nvars$ = 176
assignment PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1142
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	57		 push	 rdi
  00004	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 44 24 78	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 1144
  0001a	48 8d 42 08	 lea	 rax, QWORD PTR [rdx+8]
  0001e	41 8b e8	 mov	 ebp, r8d
  00021	48 8b da	 mov	 rbx, rdx
  00024	48 89 44 24 30	 mov	 QWORD PTR tv460[rsp], rax
  00029	8b 00		 mov	 eax, DWORD PTR [rax]
  0002b	48 8b f9	 mov	 rdi, rcx
  0002e	83 e8 08	 sub	 eax, 8
  00031	83 f8 02	 cmp	 eax, 2
  00034	0f 87 12 02 00
	00		 ja	 $LN7@assignment
; Line 1145
  0003a	8b 41 10	 mov	 eax, DWORD PTR [rcx+16]
  0003d	48 89 b4 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rsi
  00045	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00048	0f 85 f1 00 00
	00		 jne	 $LN6@assignment
  0004e	e8 00 00 00 00	 call	 luaX_next
; Line 1148
  00053	48 8d 54 24 48	 lea	 rdx, QWORD PTR nv$1[rsp+8]
  00058	48 8b cf	 mov	 rcx, rdi
  0005b	48 89 5c 24 40	 mov	 QWORD PTR nv$1[rsp], rbx
  00060	e8 00 00 00 00	 call	 suffixedexp
; Line 1149
  00065	8b 4c 24 48	 mov	 ecx, DWORD PTR nv$1[rsp+8]
  00069	83 f9 0a	 cmp	 ecx, 10
  0006c	0f 84 97 00 00
	00		 je	 $LN15@assignment
; Line 1150
  00072	4c 8b 57 30	 mov	 r10, QWORD PTR [rdi+48]
  00076	44 8b 4c 24 50	 mov	 r9d, DWORD PTR nv$1[rsp+16]
  0007b	45 33 db	 xor	 r11d, r11d
  0007e	45 0f b6 42 3c	 movzx	 r8d, BYTE PTR [r10+60]
  00083	41 8b d3	 mov	 edx, r11d
  00086	41 8d 73 01	 lea	 esi, QWORD PTR [r11+1]
  0008a	4c 89 54 24 38	 mov	 QWORD PTR fs$1$[rsp], r10
  0008f	90		 npad	 1
$LL21@assignment:
  00090	83 7b 08 0a	 cmp	 DWORD PTR [rbx+8], 10
  00094	75 42		 jne	 SHORT $LN20@assignment
  00096	0f b6 43 13	 movzx	 eax, BYTE PTR [rbx+19]
  0009a	3b c1		 cmp	 eax, ecx
  0009c	75 1c		 jne	 SHORT $LN17@assignment
  0009e	0f b6 43 12	 movzx	 eax, BYTE PTR [rbx+18]
  000a2	41 3b c1	 cmp	 eax, r9d
  000a5	75 13		 jne	 SHORT $LN17@assignment
  000a7	c6 43 13 08	 mov	 BYTE PTR [rbx+19], 8
  000ab	44 88 43 12	 mov	 BYTE PTR [rbx+18], r8b
  000af	44 8b 4c 24 50	 mov	 r9d, DWORD PTR nv$1[rsp+16]
  000b4	8b 4c 24 48	 mov	 ecx, DWORD PTR nv$1[rsp+8]
  000b8	8b d6		 mov	 edx, esi
$LN17@assignment:
  000ba	83 f9 08	 cmp	 ecx, 8
  000bd	75 19		 jne	 SHORT $LN20@assignment
  000bf	0f bf 43 10	 movsx	 eax, WORD PTR [rbx+16]
  000c3	41 3b c1	 cmp	 eax, r9d
  000c6	75 10		 jne	 SHORT $LN20@assignment
  000c8	66 44 89 43 10	 mov	 WORD PTR [rbx+16], r8w
  000cd	44 8b 4c 24 50	 mov	 r9d, DWORD PTR nv$1[rsp+16]
  000d2	8b 4c 24 48	 mov	 ecx, DWORD PTR nv$1[rsp+8]
  000d6	8b d6		 mov	 edx, esi
$LN20@assignment:
  000d8	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  000db	48 85 db	 test	 rbx, rbx
  000de	75 b0		 jne	 SHORT $LL21@assignment
  000e0	85 d2		 test	 edx, edx
  000e2	74 25		 je	 SHORT $LN15@assignment
  000e4	83 f9 08	 cmp	 ecx, 8
  000e7	ba 05 00 00 00	 mov	 edx, 5
  000ec	49 8b ca	 mov	 rcx, r10
  000ef	41 0f 44 d3	 cmove	 edx, r11d
  000f3	44 89 5c 24 20	 mov	 DWORD PTR [rsp+32], r11d
  000f8	e8 00 00 00 00	 call	 luaK_codeABC
  000fd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR fs$1$[rsp]
  00102	8b d6		 mov	 edx, esi
  00104	e8 00 00 00 00	 call	 luaK_reserveregs
$LN15@assignment:
; Line 1152
  00109	48 8b 47 38	 mov	 rax, QWORD PTR [rdi+56]
  0010d	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00111	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08CMAFAEJC@C?5levels?$AA@
  00118	0f b7 90 c6 00
	00 00		 movzx	 edx, WORD PTR [rax+198]
  0011f	41 b8 c8 00 00
	00		 mov	 r8d, 200		; 000000c8H
  00125	03 d5		 add	 edx, ebp
  00127	e8 00 00 00 00	 call	 checklimit
; Line 1153
  0012c	44 8d 45 01	 lea	 r8d, DWORD PTR [rbp+1]
  00130	48 8d 54 24 40	 lea	 rdx, QWORD PTR nv$1[rsp]
  00135	48 8b cf	 mov	 rcx, rdi
  00138	e8 00 00 00 00	 call	 assignment
; Line 1155
  0013d	eb 78		 jmp	 SHORT $LN2@assignment
$LN6@assignment:
; Line 1157
  0013f	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  00142	0f 85 db 00 00
	00		 jne	 $LN78@assignment
  00148	e8 00 00 00 00	 call	 luaX_next
; Line 1158
  0014d	48 8d 54 24 60	 lea	 rdx, QWORD PTR e$[rsp]
  00152	45 33 c0	 xor	 r8d, r8d
  00155	48 8b cf	 mov	 rcx, rdi
  00158	be 01 00 00 00	 mov	 esi, 1
  0015d	e8 00 00 00 00	 call	 subexpr
$LL35@assignment:
  00162	83 7f 10 2c	 cmp	 DWORD PTR [rdi+16], 44	; 0000002cH
  00166	75 2a		 jne	 SHORT $LN41@assignment
  00168	48 8b cf	 mov	 rcx, rdi
  0016b	e8 00 00 00 00	 call	 luaX_next
  00170	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00174	48 8d 54 24 60	 lea	 rdx, QWORD PTR e$[rsp]
  00179	e8 00 00 00 00	 call	 luaK_exp2nextreg
  0017e	48 8d 54 24 60	 lea	 rdx, QWORD PTR e$[rsp]
  00183	45 33 c0	 xor	 r8d, r8d
  00186	48 8b cf	 mov	 rcx, rdi
  00189	e8 00 00 00 00	 call	 subexpr
  0018e	ff c6		 inc	 esi
  00190	eb d0		 jmp	 SHORT $LL35@assignment
$LN41@assignment:
; Line 1159
  00192	3b f5		 cmp	 esi, ebp
  00194	74 6f		 je	 SHORT $LN3@assignment
; Line 1160
  00196	4c 8d 4c 24 60	 lea	 r9, QWORD PTR e$[rsp]
  0019b	44 8b c6	 mov	 r8d, esi
  0019e	8b d5		 mov	 edx, ebp
  001a0	48 8b cf	 mov	 rcx, rdi
  001a3	e8 00 00 00 00	 call	 adjust_assign
; Line 1161
  001a8	3b f5		 cmp	 esi, ebp
  001aa	7e 0b		 jle	 SHORT $LN2@assignment
; Line 1162
  001ac	48 8b 47 30	 mov	 rax, QWORD PTR [rdi+48]
  001b0	40 2a ee	 sub	 bpl, sil
  001b3	40 00 68 3c	 add	 BYTE PTR [rax+60], bpl
$LN2@assignment:
; Line 1170
  001b7	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
; Line 1171
  001bb	48 8b 54 24 30	 mov	 rdx, QWORD PTR tv460[rsp]
  001c0	4c 8d 44 24 60	 lea	 r8, QWORD PTR e$[rsp]
  001c5	0f b6 41 3c	 movzx	 eax, BYTE PTR [rcx+60]
  001c9	48 c7 44 24 70
	ff ff ff ff	 mov	 QWORD PTR e$[rsp+16], -1
  001d2	c7 44 24 60 07
	00 00 00	 mov	 DWORD PTR e$[rsp], 7
  001da	ff c8		 dec	 eax
  001dc	89 44 24 68	 mov	 DWORD PTR e$[rsp+8], eax
$LN77@assignment:
  001e0	e8 00 00 00 00	 call	 luaK_storevar
  001e5	48 8b b4 24 b8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+184]
; Line 1172
  001ed	48 8b 4c 24 78	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001f2	48 33 cc	 xor	 rcx, rsp
  001f5	e8 00 00 00 00	 call	 __security_check_cookie
  001fa	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00201	5f		 pop	 rdi
  00202	5d		 pop	 rbp
  00203	5b		 pop	 rbx
  00204	c3		 ret	 0
$LN3@assignment:
; Line 1165
  00205	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00209	48 8d 54 24 60	 lea	 rdx, QWORD PTR e$[rsp]
  0020e	e8 00 00 00 00	 call	 luaK_setoneret
; Line 1166
  00213	48 8b 54 24 30	 mov	 rdx, QWORD PTR tv460[rsp]
  00218	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  0021c	4c 8d 44 24 60	 lea	 r8, QWORD PTR e$[rsp]
; Line 1167
  00221	eb bd		 jmp	 SHORT $LN77@assignment
$LN78@assignment:
; Line 1157
  00223	ba 3d 00 00 00	 mov	 edx, 61			; 0000003dH
  00228	e8 00 00 00 00	 call	 luaX_token2str
  0022d	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  00231	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00238	4c 8b c0	 mov	 r8, rax
  0023b	e8 00 00 00 00	 call	 luaO_pushfstring
  00240	48 8b cf	 mov	 rcx, rdi
  00243	48 8b d0	 mov	 rdx, rax
  00246	e8 00 00 00 00	 call	 luaX_syntaxerror
  0024b	cc		 int	 3
$LN7@assignment:
; Line 1144
  0024c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNJHOOI@syntax?5error?$AA@
  00253	e8 00 00 00 00	 call	 luaX_syntaxerror
  00258	cc		 int	 3
$LN76@assignment:
assignment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT check_conflict
_TEXT	SEGMENT
ls$ = 64
lh$ = 72
v$ = 80
check_conflict PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1118
  00000	48 85 d2	 test	 rdx, rdx
  00003	0f 84 96 00 00
	00		 je	 $LN14@check_conf
  00009	53		 push	 rbx
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 1115
  0000e	48 8b 59 30	 mov	 rbx, QWORD PTR [rcx+48]
; Line 1117
  00012	45 33 c9	 xor	 r9d, r9d
  00015	44 0f b6 53 3c	 movzx	 r10d, BYTE PTR [rbx+60]
  0001a	41 8b c9	 mov	 ecx, r9d
  0001d	0f 1f 00	 npad	 3
$LL7@check_conf:
; Line 1119
  00020	83 7a 08 0a	 cmp	 DWORD PTR [rdx+8], 10
  00024	75 3a		 jne	 SHORT $LN6@check_conf
; Line 1121
  00026	0f b6 42 13	 movzx	 eax, BYTE PTR [rdx+19]
  0002a	41 3b 00	 cmp	 eax, DWORD PTR [r8]
  0002d	75 17		 jne	 SHORT $LN3@check_conf
  0002f	0f b6 42 12	 movzx	 eax, BYTE PTR [rdx+18]
  00033	41 3b 40 08	 cmp	 eax, DWORD PTR [r8+8]
  00037	75 0d		 jne	 SHORT $LN3@check_conf
; Line 1122
  00039	b9 01 00 00 00	 mov	 ecx, 1
; Line 1123
  0003e	c6 42 13 08	 mov	 BYTE PTR [rdx+19], 8
; Line 1124
  00042	44 88 52 12	 mov	 BYTE PTR [rdx+18], r10b
$LN3@check_conf:
; Line 1127
  00046	41 83 38 08	 cmp	 DWORD PTR [r8], 8
  0004a	75 14		 jne	 SHORT $LN6@check_conf
  0004c	0f bf 42 10	 movsx	 eax, WORD PTR [rdx+16]
  00050	41 3b 40 08	 cmp	 eax, DWORD PTR [r8+8]
  00054	75 0a		 jne	 SHORT $LN6@check_conf
; Line 1128
  00056	b9 01 00 00 00	 mov	 ecx, 1
; Line 1129
  0005b	66 44 89 52 10	 mov	 WORD PTR [rdx+16], r10w
$LN6@check_conf:
; Line 1118
  00060	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00063	48 85 d2	 test	 rdx, rdx
  00066	75 b8		 jne	 SHORT $LL7@check_conf
; Line 1133
  00068	85 c9		 test	 ecx, ecx
  0006a	74 2e		 je	 SHORT $LN1@check_conf
; Line 1135
  0006c	41 83 38 08	 cmp	 DWORD PTR [r8], 8
  00070	ba 05 00 00 00	 mov	 edx, 5
; Line 1136
  00075	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  0007a	41 0f 44 d1	 cmove	 edx, r9d
  0007e	45 8b 48 08	 mov	 r9d, DWORD PTR [r8+8]
  00082	45 8b c2	 mov	 r8d, r10d
  00085	48 8b cb	 mov	 rcx, rbx
  00088	e8 00 00 00 00	 call	 luaK_codeABC
; Line 1137
  0008d	ba 01 00 00 00	 mov	 edx, 1
  00092	48 8b cb	 mov	 rcx, rbx
  00095	e8 00 00 00 00	 call	 luaK_reserveregs
$LN1@check_conf:
; Line 1139
  0009a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009e	5b		 pop	 rbx
$LN14@check_conf:
  0009f	c3		 ret	 0
check_conflict ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT block
_TEXT	SEGMENT
bl$ = 32
ls$ = 80
block	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1088
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; Line 1090
  00006	48 8b 59 30	 mov	 rbx, QWORD PTR [rcx+48]
; Line 1092
  0000a	c6 44 24 32 00	 mov	 BYTE PTR bl$[rsp+18], 0
  0000f	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  00013	88 44 24 30	 mov	 BYTE PTR bl$[rsp+16], al
  00017	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0001b	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0001f	8b 42 28	 mov	 eax, DWORD PTR [rdx+40]
  00022	89 44 24 28	 mov	 DWORD PTR bl$[rsp+8], eax
  00026	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0002a	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0002e	8b 42 18	 mov	 eax, DWORD PTR [rdx+24]
  00031	c6 44 24 31 00	 mov	 BYTE PTR bl$[rsp+17], 0
  00036	89 44 24 2c	 mov	 DWORD PTR bl$[rsp+12], eax
  0003a	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  0003e	48 89 44 24 20	 mov	 QWORD PTR bl$[rsp], rax
  00043	48 8d 44 24 20	 lea	 rax, QWORD PTR bl$[rsp]
  00048	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
; Line 1093
  0004c	e8 00 00 00 00	 call	 statlist
; Line 1094
  00051	48 8b cb	 mov	 rcx, rbx
  00054	e8 00 00 00 00	 call	 leaveblock
; Line 1095
  00059	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005d	5b		 pop	 rbx
  0005e	c3		 ret	 0
block	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT subexpr
_TEXT	SEGMENT
limit$1$ = 48
v$GSCopy$1$ = 56
v2$1 = 64
__$ArrayPad$ = 88
ls$ = 128
v$ = 136
limit$ = 144
subexpr	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1043
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 44 24 58	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001b	41 8b f0	 mov	 esi, r8d
  0001e	44 89 44 24 30	 mov	 DWORD PTR limit$1$[rsp], r8d
  00023	48 8b ea	 mov	 rbp, rdx
  00026	48 89 54 24 38	 mov	 QWORD PTR v$GSCopy$1$[rsp], rdx
  0002b	48 8b d9	 mov	 rbx, rcx
; Line 1046
  0002e	e8 00 00 00 00	 call	 enterlevel
; Line 1047
  00033	8b 43 10	 mov	 eax, DWORD PTR [rbx+16]
  00036	83 f8 23	 cmp	 eax, 35			; 00000023H
  00039	74 30		 je	 SHORT $LN8@subexpr
  0003b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0003e	74 27		 je	 SHORT $LN10@subexpr
  00040	83 f8 7e	 cmp	 eax, 126		; 0000007eH
  00043	74 1b		 je	 SHORT $LN9@subexpr
  00045	3d 0f 01 00 00	 cmp	 eax, 271		; 0000010fH
  0004a	75 07		 jne	 SHORT $LN4@subexpr
  0004c	be 02 00 00 00	 mov	 esi, 2
  00051	eb 1d		 jmp	 SHORT $LN20@subexpr
$LN4@subexpr:
; Line 1054
  00053	48 8b d5	 mov	 rdx, rbp
  00056	48 8b cb	 mov	 rcx, rbx
  00059	e8 00 00 00 00	 call	 simpleexp
  0005e	eb 41		 jmp	 SHORT $LN3@subexpr
; Line 1047
$LN9@subexpr:
  00060	be 01 00 00 00	 mov	 esi, 1
  00065	eb 09		 jmp	 SHORT $LN20@subexpr
$LN10@subexpr:
  00067	33 f6		 xor	 esi, esi
  00069	eb 05		 jmp	 SHORT $LN20@subexpr
$LN8@subexpr:
  0006b	be 03 00 00 00	 mov	 esi, 3
$LN20@subexpr:
; Line 1049
  00070	8b 7b 04	 mov	 edi, DWORD PTR [rbx+4]
; Line 1050
  00073	48 8b cb	 mov	 rcx, rbx
  00076	e8 00 00 00 00	 call	 luaX_next
; Line 1051
  0007b	41 b8 0c 00 00
	00		 mov	 r8d, 12
  00081	48 8b d5	 mov	 rdx, rbp
  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 subexpr
; Line 1052
  0008c	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00090	44 8b cf	 mov	 r9d, edi
  00093	4c 8b c5	 mov	 r8, rbp
  00096	8b d6		 mov	 edx, esi
  00098	e8 00 00 00 00	 call	 luaK_prefix
  0009d	8b 74 24 30	 mov	 esi, DWORD PTR limit$1$[rsp]
$LN3@subexpr:
; Line 1056
  000a1	8b 4b 10	 mov	 ecx, DWORD PTR [rbx+16]
  000a4	e8 00 00 00 00	 call	 getbinopr
  000a9	8b e8		 mov	 ebp, eax
; Line 1057
  000ab	83 f8 15	 cmp	 eax, 21
  000ae	0f 84 7d 00 00
	00		 je	 $LN21@subexpr
  000b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:priority
  000bb	0f 1f 44 00 00	 npad	 5
$LL2@subexpr:
  000c0	48 63 cd	 movsxd	 rcx, ebp
  000c3	48 8d 3c 09	 lea	 rdi, QWORD PTR [rcx+rcx]
  000c7	0f b6 0c 07	 movzx	 ecx, BYTE PTR [rdi+rax]
  000cb	3b ce		 cmp	 ecx, esi
  000cd	7e 62		 jle	 SHORT $LN21@subexpr
; Line 1060
  000cf	8b 73 04	 mov	 esi, DWORD PTR [rbx+4]
; Line 1061
  000d2	48 8b cb	 mov	 rcx, rbx
  000d5	e8 00 00 00 00	 call	 luaX_next
; Line 1062
  000da	4c 8b 44 24 38	 mov	 r8, QWORD PTR v$GSCopy$1$[rsp]
  000df	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  000e3	8b d5		 mov	 edx, ebp
  000e5	e8 00 00 00 00	 call	 luaK_infix
; Line 1064
  000ea	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:priority
  000f1	48 8d 54 24 40	 lea	 rdx, QWORD PTR v2$1[rsp]
  000f6	44 0f b6 44 07
	01		 movzx	 r8d, BYTE PTR [rdi+rax+1]
  000fc	48 8b cb	 mov	 rcx, rbx
  000ff	e8 00 00 00 00	 call	 subexpr
; Line 1065
  00104	4c 8b 44 24 38	 mov	 r8, QWORD PTR v$GSCopy$1$[rsp]
  00109	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  0010d	4c 8d 4c 24 40	 lea	 r9, QWORD PTR v2$1[rsp]
  00112	8b d5		 mov	 edx, ebp
  00114	8b f8		 mov	 edi, eax
  00116	89 74 24 20	 mov	 DWORD PTR [rsp+32], esi
  0011a	e8 00 00 00 00	 call	 luaK_posfix
  0011f	8b 74 24 30	 mov	 esi, DWORD PTR limit$1$[rsp]
; Line 1066
  00123	8b ef		 mov	 ebp, edi
  00125	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:priority
  0012c	83 ff 15	 cmp	 edi, 21
  0012f	75 8f		 jne	 SHORT $LL2@subexpr
$LN21@subexpr:
; Line 1068
  00131	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00135	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0013a	66 01 88 c6 00
	00 00		 add	 WORD PTR [rax+198], cx
; Line 1069
  00141	8b c5		 mov	 eax, ebp
; Line 1070
  00143	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00148	48 33 cc	 xor	 rcx, rsp
  0014b	e8 00 00 00 00	 call	 __security_check_cookie
  00150	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]
  00158	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0015c	5f		 pop	 rdi
  0015d	5e		 pop	 rsi
  0015e	5d		 pop	 rbp
  0015f	c3		 ret	 0
subexpr	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getbinopr
_TEXT	SEGMENT
op$ = 8
getbinopr PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 993
  00000	83 c1 db	 add	 ecx, -37		; ffffffffffffffdbH
  00003	81 f9 fa 00 00
	00		 cmp	 ecx, 250		; 000000faH
  00009	0f 87 99 00 00
	00		 ja	 $LN1@getbinopr
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  00016	48 63 c1	 movsxd	 rax, ecx
  00019	0f b6 84 02 00
	00 00 00	 movzx	 eax, BYTE PTR $LN27@getbinopr[rdx+rax]
  00021	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN28@getbinopr[rdx+rax*4]
  00028	48 03 ca	 add	 rcx, rdx
  0002b	ff e1		 jmp	 rcx
$LN22@getbinopr:
; Line 994
  0002d	33 c0		 xor	 eax, eax
; Line 1017
  0002f	c3		 ret	 0
$LN21@getbinopr:
; Line 995
  00030	b8 01 00 00 00	 mov	 eax, 1
; Line 1017
  00035	c3		 ret	 0
$LN20@getbinopr:
; Line 996
  00036	b8 02 00 00 00	 mov	 eax, 2
; Line 1017
  0003b	c3		 ret	 0
$LN19@getbinopr:
; Line 997
  0003c	b8 03 00 00 00	 mov	 eax, 3
; Line 1017
  00041	c3		 ret	 0
$LN18@getbinopr:
; Line 998
  00042	b8 04 00 00 00	 mov	 eax, 4
; Line 1017
  00047	c3		 ret	 0
$LN17@getbinopr:
; Line 999
  00048	b8 05 00 00 00	 mov	 eax, 5
; Line 1017
  0004d	c3		 ret	 0
$LN16@getbinopr:
; Line 1000
  0004e	b8 06 00 00 00	 mov	 eax, 6
; Line 1017
  00053	c3		 ret	 0
$LN15@getbinopr:
; Line 1001
  00054	b8 07 00 00 00	 mov	 eax, 7
; Line 1017
  00059	c3		 ret	 0
$LN14@getbinopr:
; Line 1002
  0005a	b8 08 00 00 00	 mov	 eax, 8
; Line 1017
  0005f	c3		 ret	 0
$LN13@getbinopr:
; Line 1003
  00060	b8 09 00 00 00	 mov	 eax, 9
; Line 1017
  00065	c3		 ret	 0
$LN12@getbinopr:
; Line 1004
  00066	b8 0a 00 00 00	 mov	 eax, 10
; Line 1017
  0006b	c3		 ret	 0
$LN11@getbinopr:
; Line 1005
  0006c	b8 0b 00 00 00	 mov	 eax, 11
; Line 1017
  00071	c3		 ret	 0
$LN10@getbinopr:
; Line 1006
  00072	b8 0c 00 00 00	 mov	 eax, 12
; Line 1017
  00077	c3		 ret	 0
$LN9@getbinopr:
; Line 1007
  00078	b8 10 00 00 00	 mov	 eax, 16
; Line 1017
  0007d	c3		 ret	 0
$LN8@getbinopr:
; Line 1008
  0007e	b8 0d 00 00 00	 mov	 eax, 13
; Line 1017
  00083	c3		 ret	 0
$LN7@getbinopr:
; Line 1009
  00084	b8 0e 00 00 00	 mov	 eax, 14
; Line 1017
  00089	c3		 ret	 0
$LN6@getbinopr:
; Line 1010
  0008a	b8 0f 00 00 00	 mov	 eax, 15
; Line 1017
  0008f	c3		 ret	 0
$LN5@getbinopr:
; Line 1011
  00090	b8 11 00 00 00	 mov	 eax, 17
; Line 1017
  00095	c3		 ret	 0
$LN4@getbinopr:
; Line 1012
  00096	b8 12 00 00 00	 mov	 eax, 18
; Line 1017
  0009b	c3		 ret	 0
$LN3@getbinopr:
; Line 1013
  0009c	b8 13 00 00 00	 mov	 eax, 19
; Line 1017
  000a1	c3		 ret	 0
$LN2@getbinopr:
; Line 1014
  000a2	b8 14 00 00 00	 mov	 eax, 20
; Line 1017
  000a7	c3		 ret	 0
$LN1@getbinopr:
; Line 1015
  000a8	b8 15 00 00 00	 mov	 eax, 21
; Line 1017
  000ad	c3		 ret	 0
  000ae	66 90		 npad	 2
$LN28@getbinopr:
  000b0	00 00 00 00	 DD	 $LN19@getbinopr
  000b4	00 00 00 00	 DD	 $LN15@getbinopr
  000b8	00 00 00 00	 DD	 $LN20@getbinopr
  000bc	00 00 00 00	 DD	 $LN22@getbinopr
  000c0	00 00 00 00	 DD	 $LN21@getbinopr
  000c4	00 00 00 00	 DD	 $LN17@getbinopr
  000c8	00 00 00 00	 DD	 $LN7@getbinopr
  000cc	00 00 00 00	 DD	 $LN5@getbinopr
  000d0	00 00 00 00	 DD	 $LN18@getbinopr
  000d4	00 00 00 00	 DD	 $LN14@getbinopr
  000d8	00 00 00 00	 DD	 $LN13@getbinopr
  000dc	00 00 00 00	 DD	 $LN3@getbinopr
  000e0	00 00 00 00	 DD	 $LN2@getbinopr
  000e4	00 00 00 00	 DD	 $LN16@getbinopr
  000e8	00 00 00 00	 DD	 $LN10@getbinopr
  000ec	00 00 00 00	 DD	 $LN8@getbinopr
  000f0	00 00 00 00	 DD	 $LN4@getbinopr
  000f4	00 00 00 00	 DD	 $LN6@getbinopr
  000f8	00 00 00 00	 DD	 $LN9@getbinopr
  000fc	00 00 00 00	 DD	 $LN12@getbinopr
  00100	00 00 00 00	 DD	 $LN11@getbinopr
  00104	00 00 00 00	 DD	 $LN1@getbinopr
$LN27@getbinopr:
  00108	00		 DB	 0
  00109	01		 DB	 1
  0010a	15		 DB	 21
  0010b	15		 DB	 21
  0010c	15		 DB	 21
  0010d	02		 DB	 2
  0010e	03		 DB	 3
  0010f	15		 DB	 21
  00110	04		 DB	 4
  00111	15		 DB	 21
  00112	05		 DB	 5
  00113	15		 DB	 21
  00114	15		 DB	 21
  00115	15		 DB	 21
  00116	15		 DB	 21
  00117	15		 DB	 21
  00118	15		 DB	 21
  00119	15		 DB	 21
  0011a	15		 DB	 21
  0011b	15		 DB	 21
  0011c	15		 DB	 21
  0011d	15		 DB	 21
  0011e	15		 DB	 21
  0011f	06		 DB	 6
  00120	15		 DB	 21
  00121	07		 DB	 7
  00122	15		 DB	 21
  00123	15		 DB	 21
  00124	15		 DB	 21
  00125	15		 DB	 21
  00126	15		 DB	 21
  00127	15		 DB	 21
  00128	15		 DB	 21
  00129	15		 DB	 21
  0012a	15		 DB	 21
  0012b	15		 DB	 21
  0012c	15		 DB	 21
  0012d	15		 DB	 21
  0012e	15		 DB	 21
  0012f	15		 DB	 21
  00130	15		 DB	 21
  00131	15		 DB	 21
  00132	15		 DB	 21
  00133	15		 DB	 21
  00134	15		 DB	 21
  00135	15		 DB	 21
  00136	15		 DB	 21
  00137	15		 DB	 21
  00138	15		 DB	 21
  00139	15		 DB	 21
  0013a	15		 DB	 21
  0013b	15		 DB	 21
  0013c	15		 DB	 21
  0013d	15		 DB	 21
  0013e	15		 DB	 21
  0013f	15		 DB	 21
  00140	15		 DB	 21
  00141	08		 DB	 8
  00142	15		 DB	 21
  00143	15		 DB	 21
  00144	15		 DB	 21
  00145	15		 DB	 21
  00146	15		 DB	 21
  00147	15		 DB	 21
  00148	15		 DB	 21
  00149	15		 DB	 21
  0014a	15		 DB	 21
  0014b	15		 DB	 21
  0014c	15		 DB	 21
  0014d	15		 DB	 21
  0014e	15		 DB	 21
  0014f	15		 DB	 21
  00150	15		 DB	 21
  00151	15		 DB	 21
  00152	15		 DB	 21
  00153	15		 DB	 21
  00154	15		 DB	 21
  00155	15		 DB	 21
  00156	15		 DB	 21
  00157	15		 DB	 21
  00158	15		 DB	 21
  00159	15		 DB	 21
  0015a	15		 DB	 21
  0015b	15		 DB	 21
  0015c	15		 DB	 21
  0015d	15		 DB	 21
  0015e	15		 DB	 21
  0015f	09		 DB	 9
  00160	15		 DB	 21
  00161	0a		 DB	 10
  00162	15		 DB	 21
  00163	15		 DB	 21
  00164	15		 DB	 21
  00165	15		 DB	 21
  00166	15		 DB	 21
  00167	15		 DB	 21
  00168	15		 DB	 21
  00169	15		 DB	 21
  0016a	15		 DB	 21
  0016b	15		 DB	 21
  0016c	15		 DB	 21
  0016d	15		 DB	 21
  0016e	15		 DB	 21
  0016f	15		 DB	 21
  00170	15		 DB	 21
  00171	15		 DB	 21
  00172	15		 DB	 21
  00173	15		 DB	 21
  00174	15		 DB	 21
  00175	15		 DB	 21
  00176	15		 DB	 21
  00177	15		 DB	 21
  00178	15		 DB	 21
  00179	15		 DB	 21
  0017a	15		 DB	 21
  0017b	15		 DB	 21
  0017c	15		 DB	 21
  0017d	15		 DB	 21
  0017e	15		 DB	 21
  0017f	15		 DB	 21
  00180	15		 DB	 21
  00181	15		 DB	 21
  00182	15		 DB	 21
  00183	15		 DB	 21
  00184	15		 DB	 21
  00185	15		 DB	 21
  00186	15		 DB	 21
  00187	15		 DB	 21
  00188	15		 DB	 21
  00189	15		 DB	 21
  0018a	15		 DB	 21
  0018b	15		 DB	 21
  0018c	15		 DB	 21
  0018d	15		 DB	 21
  0018e	15		 DB	 21
  0018f	15		 DB	 21
  00190	15		 DB	 21
  00191	15		 DB	 21
  00192	15		 DB	 21
  00193	15		 DB	 21
  00194	15		 DB	 21
  00195	15		 DB	 21
  00196	15		 DB	 21
  00197	15		 DB	 21
  00198	15		 DB	 21
  00199	15		 DB	 21
  0019a	15		 DB	 21
  0019b	15		 DB	 21
  0019c	15		 DB	 21
  0019d	15		 DB	 21
  0019e	15		 DB	 21
  0019f	15		 DB	 21
  001a0	15		 DB	 21
  001a1	15		 DB	 21
  001a2	15		 DB	 21
  001a3	15		 DB	 21
  001a4	15		 DB	 21
  001a5	15		 DB	 21
  001a6	15		 DB	 21
  001a7	15		 DB	 21
  001a8	15		 DB	 21
  001a9	15		 DB	 21
  001aa	15		 DB	 21
  001ab	15		 DB	 21
  001ac	15		 DB	 21
  001ad	15		 DB	 21
  001ae	15		 DB	 21
  001af	15		 DB	 21
  001b0	15		 DB	 21
  001b1	15		 DB	 21
  001b2	15		 DB	 21
  001b3	15		 DB	 21
  001b4	15		 DB	 21
  001b5	15		 DB	 21
  001b6	15		 DB	 21
  001b7	15		 DB	 21
  001b8	15		 DB	 21
  001b9	15		 DB	 21
  001ba	15		 DB	 21
  001bb	15		 DB	 21
  001bc	15		 DB	 21
  001bd	15		 DB	 21
  001be	15		 DB	 21
  001bf	15		 DB	 21
  001c0	15		 DB	 21
  001c1	15		 DB	 21
  001c2	15		 DB	 21
  001c3	15		 DB	 21
  001c4	15		 DB	 21
  001c5	15		 DB	 21
  001c6	15		 DB	 21
  001c7	15		 DB	 21
  001c8	15		 DB	 21
  001c9	15		 DB	 21
  001ca	15		 DB	 21
  001cb	15		 DB	 21
  001cc	15		 DB	 21
  001cd	15		 DB	 21
  001ce	15		 DB	 21
  001cf	15		 DB	 21
  001d0	15		 DB	 21
  001d1	15		 DB	 21
  001d2	15		 DB	 21
  001d3	15		 DB	 21
  001d4	15		 DB	 21
  001d5	15		 DB	 21
  001d6	15		 DB	 21
  001d7	15		 DB	 21
  001d8	15		 DB	 21
  001d9	15		 DB	 21
  001da	15		 DB	 21
  001db	15		 DB	 21
  001dc	15		 DB	 21
  001dd	15		 DB	 21
  001de	15		 DB	 21
  001df	15		 DB	 21
  001e0	15		 DB	 21
  001e1	15		 DB	 21
  001e2	15		 DB	 21
  001e3	15		 DB	 21
  001e4	0b		 DB	 11
  001e5	15		 DB	 21
  001e6	15		 DB	 21
  001e7	15		 DB	 21
  001e8	15		 DB	 21
  001e9	15		 DB	 21
  001ea	15		 DB	 21
  001eb	15		 DB	 21
  001ec	15		 DB	 21
  001ed	15		 DB	 21
  001ee	15		 DB	 21
  001ef	15		 DB	 21
  001f0	15		 DB	 21
  001f1	15		 DB	 21
  001f2	15		 DB	 21
  001f3	0c		 DB	 12
  001f4	15		 DB	 21
  001f5	15		 DB	 21
  001f6	15		 DB	 21
  001f7	15		 DB	 21
  001f8	15		 DB	 21
  001f9	15		 DB	 21
  001fa	0d		 DB	 13
  001fb	0e		 DB	 14
  001fc	15		 DB	 21
  001fd	0f		 DB	 15
  001fe	10		 DB	 16
  001ff	11		 DB	 17
  00200	12		 DB	 18
  00201	13		 DB	 19
  00202	14		 DB	 20
getbinopr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getunopr
_TEXT	SEGMENT
op$ = 8
getunopr PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 982
  00000	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00003	74 27		 je	 SHORT $LN2@getunopr
  00005	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  00008	74 1f		 je	 SHORT $LN4@getunopr
  0000a	83 f9 7e	 cmp	 ecx, 126		; 0000007eH
  0000d	74 14		 je	 SHORT $LN3@getunopr
  0000f	b8 02 00 00 00	 mov	 eax, 2
  00014	ba 04 00 00 00	 mov	 edx, 4
  00019	81 f9 0f 01 00
	00		 cmp	 ecx, 271		; 0000010fH
  0001f	0f 45 c2	 cmovne	 eax, edx
; Line 989
  00022	c3		 ret	 0
$LN3@getunopr:
; Line 985
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 989
  00028	c3		 ret	 0
$LN4@getunopr:
; Line 984
  00029	33 c0		 xor	 eax, eax
; Line 989
  0002b	c3		 ret	 0
$LN2@getunopr:
; Line 986
  0002c	b8 03 00 00 00	 mov	 eax, 3
; Line 989
  00031	c3		 ret	 0
getunopr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT simpleexp
_TEXT	SEGMENT
ls$ = 64
v$ = 72
simpleexp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 925
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 928
  0000a	8b 41 10	 mov	 eax, DWORD PTR [rcx+16]
  0000d	48 8b da	 mov	 rbx, rdx
  00010	48 8b f9	 mov	 rdi, rcx
  00013	83 c0 85	 add	 eax, -123		; ffffffffffffff85H
  00016	3d aa 00 00 00	 cmp	 eax, 170		; 000000aaH
  0001b	0f 87 92 01 00
	00		 ja	 $LN1@simpleexp
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00028	48 98		 cdqe
  0002a	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN32@simpleexp[rcx+rax]
  00032	44 8b 84 81 00
	00 00 00	 mov	 r8d, DWORD PTR $LN33@simpleexp[rcx+rax*4]
  0003a	4c 03 c1	 add	 r8, rcx
  0003d	41 ff e0	 jmp	 r8
$LN11@simpleexp:
; Line 930
  00040	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [rdx+8], 0
  00047	48 c7 42 10 ff
	ff ff ff	 mov	 QWORD PTR [rdx+16], -1
  0004f	c7 02 05 00 00
	00		 mov	 DWORD PTR [rdx], 5
; Line 931
  00055	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
; Line 977
  00059	48 8b cf	 mov	 rcx, rdi
  0005c	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax
; Line 978
  00060	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00065	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00069	5f		 pop	 rdi
; Line 977
  0006a	e9 00 00 00 00	 jmp	 luaX_next
$LN10@simpleexp:
; Line 935
  0006f	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [rdx+8], 0
  00076	48 c7 42 10 ff
	ff ff ff	 mov	 QWORD PTR [rdx+16], -1
  0007e	c7 02 06 00 00
	00		 mov	 DWORD PTR [rdx], 6
; Line 936
  00084	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
; Line 977
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax
; Line 978
  0008f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00094	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00098	5f		 pop	 rdi
; Line 977
  00099	e9 00 00 00 00	 jmp	 luaX_next
$LN9@simpleexp:
; Line 940
  0009e	48 8b 57 18	 mov	 rdx, QWORD PTR [rdi+24]
  000a2	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  000a6	e8 00 00 00 00	 call	 luaK_stringK
  000ab	c7 03 04 00 00
	00		 mov	 DWORD PTR [rbx], 4
; Line 941
  000b1	e9 aa 00 00 00	 jmp	 $LN35@simpleexp
$LN8@simpleexp:
; Line 977
  000b6	48 8b cf	 mov	 rcx, rdi
  000b9	48 c7 42 10 ff
	ff ff ff	 mov	 QWORD PTR [rdx+16], -1
  000c1	c7 02 01 00 00
	00		 mov	 DWORD PTR [rdx], 1
  000c7	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [rdx+8], 0
; Line 978
  000ce	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d7	5f		 pop	 rdi
; Line 977
  000d8	e9 00 00 00 00	 jmp	 luaX_next
$LN7@simpleexp:
  000dd	48 8b cf	 mov	 rcx, rdi
  000e0	48 c7 42 10 ff
	ff ff ff	 mov	 QWORD PTR [rdx+16], -1
  000e8	c7 02 02 00 00
	00		 mov	 DWORD PTR [rdx], 2
  000ee	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [rdx+8], 0
; Line 978
  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
; Line 977
  000ff	e9 00 00 00 00	 jmp	 luaX_next
$LN6@simpleexp:
  00104	48 8b cf	 mov	 rcx, rdi
  00107	48 c7 42 10 ff
	ff ff ff	 mov	 QWORD PTR [rdx+16], -1
  0010f	c7 02 03 00 00
	00		 mov	 DWORD PTR [rdx], 3
  00115	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [rdx+8], 0
; Line 978
  0011c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00121	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00125	5f		 pop	 rdi
; Line 977
  00126	e9 00 00 00 00	 jmp	 luaX_next
$LN5@simpleexp:
; Line 956
  0012b	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
; Line 958
  0012f	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00132	80 78 0b 00	 cmp	 BYTE PTR [rax+11], 0
  00136	0f 84 89 00 00
	00		 je	 $LN36@simpleexp
; Line 960
  0013c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00142	45 33 c0	 xor	 r8d, r8d
  00145	c6 40 0b 01	 mov	 BYTE PTR [rax+11], 1
  00149	41 8d 51 2c	 lea	 edx, QWORD PTR [r9+44]
  0014d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00155	e8 00 00 00 00	 call	 luaK_codeABC
  0015a	c7 03 0e 00 00
	00		 mov	 DWORD PTR [rbx], 14
$LN35@simpleexp:
; Line 977
  00160	48 8b cf	 mov	 rcx, rdi
  00163	89 43 08	 mov	 DWORD PTR [rbx+8], eax
  00166	48 c7 43 10 ff
	ff ff ff	 mov	 QWORD PTR [rbx+16], -1
; Line 978
  0016e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00173	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00177	5f		 pop	 rdi
; Line 977
  00178	e9 00 00 00 00	 jmp	 luaX_next
$LN3@simpleexp:
; Line 964
  0017d	48 8b cf	 mov	 rcx, rdi
; Line 978
  00180	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00185	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00189	5f		 pop	 rdi
; Line 964
  0018a	e9 00 00 00 00	 jmp	 constructor
$LN2@simpleexp:
; Line 968
  0018f	48 8b cf	 mov	 rcx, rdi
  00192	e8 00 00 00 00	 call	 luaX_next
; Line 969
  00197	44 8b 4f 04	 mov	 r9d, DWORD PTR [rdi+4]
  0019b	45 33 c0	 xor	 r8d, r8d
  0019e	48 8b d3	 mov	 rdx, rbx
  001a1	48 8b cf	 mov	 rcx, rdi
; Line 978
  001a4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001a9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ad	5f		 pop	 rdi
; Line 969
  001ae	e9 00 00 00 00	 jmp	 body
$LN1@simpleexp:
; Line 973
  001b3	48 8b cf	 mov	 rcx, rdi
; Line 978
  001b6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001bb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001bf	5f		 pop	 rdi
; Line 973
  001c0	e9 00 00 00 00	 jmp	 suffixedexp
$LN36@simpleexp:
; Line 958
  001c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@EJFFCAJP@cannot?5use?5?8?4?4?4?8?5outside?5a?5varar@
  001cc	48 8b cf	 mov	 rcx, rdi
  001cf	e8 00 00 00 00	 call	 luaX_syntaxerror
  001d4	cc		 int	 3
$LN34@simpleexp:
  001d5	0f 1f 00	 npad	 3
$LN33@simpleexp:
; Line 978
  001d8	00 00 00 00	 DD	 $LN3@simpleexp
  001dc	00 00 00 00	 DD	 $LN6@simpleexp
  001e0	00 00 00 00	 DD	 $LN2@simpleexp
  001e4	00 00 00 00	 DD	 $LN8@simpleexp
  001e8	00 00 00 00	 DD	 $LN7@simpleexp
  001ec	00 00 00 00	 DD	 $LN5@simpleexp
  001f0	00 00 00 00	 DD	 $LN11@simpleexp
  001f4	00 00 00 00	 DD	 $LN10@simpleexp
  001f8	00 00 00 00	 DD	 $LN9@simpleexp
  001fc	00 00 00 00	 DD	 $LN1@simpleexp
$LN32@simpleexp:
  00200	00		 DB	 0
  00201	09		 DB	 9
  00202	09		 DB	 9
  00203	09		 DB	 9
  00204	09		 DB	 9
  00205	09		 DB	 9
  00206	09		 DB	 9
  00207	09		 DB	 9
  00208	09		 DB	 9
  00209	09		 DB	 9
  0020a	09		 DB	 9
  0020b	09		 DB	 9
  0020c	09		 DB	 9
  0020d	09		 DB	 9
  0020e	09		 DB	 9
  0020f	09		 DB	 9
  00210	09		 DB	 9
  00211	09		 DB	 9
  00212	09		 DB	 9
  00213	09		 DB	 9
  00214	09		 DB	 9
  00215	09		 DB	 9
  00216	09		 DB	 9
  00217	09		 DB	 9
  00218	09		 DB	 9
  00219	09		 DB	 9
  0021a	09		 DB	 9
  0021b	09		 DB	 9
  0021c	09		 DB	 9
  0021d	09		 DB	 9
  0021e	09		 DB	 9
  0021f	09		 DB	 9
  00220	09		 DB	 9
  00221	09		 DB	 9
  00222	09		 DB	 9
  00223	09		 DB	 9
  00224	09		 DB	 9
  00225	09		 DB	 9
  00226	09		 DB	 9
  00227	09		 DB	 9
  00228	09		 DB	 9
  00229	09		 DB	 9
  0022a	09		 DB	 9
  0022b	09		 DB	 9
  0022c	09		 DB	 9
  0022d	09		 DB	 9
  0022e	09		 DB	 9
  0022f	09		 DB	 9
  00230	09		 DB	 9
  00231	09		 DB	 9
  00232	09		 DB	 9
  00233	09		 DB	 9
  00234	09		 DB	 9
  00235	09		 DB	 9
  00236	09		 DB	 9
  00237	09		 DB	 9
  00238	09		 DB	 9
  00239	09		 DB	 9
  0023a	09		 DB	 9
  0023b	09		 DB	 9
  0023c	09		 DB	 9
  0023d	09		 DB	 9
  0023e	09		 DB	 9
  0023f	09		 DB	 9
  00240	09		 DB	 9
  00241	09		 DB	 9
  00242	09		 DB	 9
  00243	09		 DB	 9
  00244	09		 DB	 9
  00245	09		 DB	 9
  00246	09		 DB	 9
  00247	09		 DB	 9
  00248	09		 DB	 9
  00249	09		 DB	 9
  0024a	09		 DB	 9
  0024b	09		 DB	 9
  0024c	09		 DB	 9
  0024d	09		 DB	 9
  0024e	09		 DB	 9
  0024f	09		 DB	 9
  00250	09		 DB	 9
  00251	09		 DB	 9
  00252	09		 DB	 9
  00253	09		 DB	 9
  00254	09		 DB	 9
  00255	09		 DB	 9
  00256	09		 DB	 9
  00257	09		 DB	 9
  00258	09		 DB	 9
  00259	09		 DB	 9
  0025a	09		 DB	 9
  0025b	09		 DB	 9
  0025c	09		 DB	 9
  0025d	09		 DB	 9
  0025e	09		 DB	 9
  0025f	09		 DB	 9
  00260	09		 DB	 9
  00261	09		 DB	 9
  00262	09		 DB	 9
  00263	09		 DB	 9
  00264	09		 DB	 9
  00265	09		 DB	 9
  00266	09		 DB	 9
  00267	09		 DB	 9
  00268	09		 DB	 9
  00269	09		 DB	 9
  0026a	09		 DB	 9
  0026b	09		 DB	 9
  0026c	09		 DB	 9
  0026d	09		 DB	 9
  0026e	09		 DB	 9
  0026f	09		 DB	 9
  00270	09		 DB	 9
  00271	09		 DB	 9
  00272	09		 DB	 9
  00273	09		 DB	 9
  00274	09		 DB	 9
  00275	09		 DB	 9
  00276	09		 DB	 9
  00277	09		 DB	 9
  00278	09		 DB	 9
  00279	09		 DB	 9
  0027a	09		 DB	 9
  0027b	09		 DB	 9
  0027c	09		 DB	 9
  0027d	09		 DB	 9
  0027e	09		 DB	 9
  0027f	09		 DB	 9
  00280	09		 DB	 9
  00281	09		 DB	 9
  00282	09		 DB	 9
  00283	09		 DB	 9
  00284	09		 DB	 9
  00285	09		 DB	 9
  00286	09		 DB	 9
  00287	09		 DB	 9
  00288	09		 DB	 9
  00289	09		 DB	 9
  0028a	09		 DB	 9
  0028b	09		 DB	 9
  0028c	01		 DB	 1
  0028d	09		 DB	 9
  0028e	02		 DB	 2
  0028f	09		 DB	 9
  00290	09		 DB	 9
  00291	09		 DB	 9
  00292	09		 DB	 9
  00293	03		 DB	 3
  00294	09		 DB	 9
  00295	09		 DB	 9
  00296	09		 DB	 9
  00297	09		 DB	 9
  00298	09		 DB	 9
  00299	04		 DB	 4
  0029a	09		 DB	 9
  0029b	09		 DB	 9
  0029c	09		 DB	 9
  0029d	09		 DB	 9
  0029e	05		 DB	 5
  0029f	09		 DB	 9
  002a0	09		 DB	 9
  002a1	09		 DB	 9
  002a2	09		 DB	 9
  002a3	09		 DB	 9
  002a4	09		 DB	 9
  002a5	09		 DB	 9
  002a6	09		 DB	 9
  002a7	06		 DB	 6
  002a8	07		 DB	 7
  002a9	09		 DB	 9
  002aa	08		 DB	 8
simpleexp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT suffixedexp
_TEXT	SEGMENT
key$1 = 32
key$2 = 32
__$ArrayPad$ = 56
ls$ = 112
v$ = 120
suffixedexp PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 887
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	41 56		 push	 r14
  00006	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 890
  00019	48 8b 69 30	 mov	 rbp, QWORD PTR [rcx+48]
; Line 891
  0001d	44 8b 71 04	 mov	 r14d, DWORD PTR [rcx+4]
  00021	48 8b f2	 mov	 rsi, rdx
  00024	48 8b f9	 mov	 rdi, rcx
; Line 892
  00027	e8 00 00 00 00	 call	 primaryexp
; Line 894
  0002c	8b 47 10	 mov	 eax, DWORD PTR [rdi+16]
  0002f	83 e8 28	 sub	 eax, 40			; 00000028H
  00032	3d fd 00 00 00	 cmp	 eax, 253		; 000000fdH
  00037	0f 87 1c 01 00
	00		 ja	 $LN48@suffixedex
  0003d	4c 89 7c 24 40	 mov	 QWORD PTR [rsp+64], r15
  00042	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:__ImageBase
  00049	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx
$LL9@suffixedex:
  00051	48 98		 cdqe
  00053	41 0f b6 84 07
	00 00 00 00	 movzx	 eax, BYTE PTR $LN49@suffixedex[r15+rax]
  0005c	41 8b 8c 87 00
	00 00 00	 mov	 ecx, DWORD PTR $LN50@suffixedex[r15+rax*4]
  00064	49 03 cf	 add	 rcx, r15
  00067	ff e1		 jmp	 rcx
$LN5@suffixedex:
; Line 896
  00069	48 8b d6	 mov	 rdx, rsi
  0006c	48 8b cf	 mov	 rcx, rdi
  0006f	e8 00 00 00 00	 call	 fieldsel
; Line 897
  00074	e9 c2 00 00 00	 jmp	 $LN6@suffixedex
$LN4@suffixedex:
; Line 901
  00079	48 8b d6	 mov	 rdx, rsi
  0007c	48 8b cd	 mov	 rcx, rbp
  0007f	e8 00 00 00 00	 call	 luaK_exp2anyregup
; Line 902
  00084	48 8b cf	 mov	 rcx, rdi
  00087	e8 00 00 00 00	 call	 luaX_next
  0008c	48 8d 54 24 20	 lea	 rdx, QWORD PTR key$2[rsp]
  00091	45 33 c0	 xor	 r8d, r8d
  00094	48 8b cf	 mov	 rcx, rdi
  00097	e8 00 00 00 00	 call	 subexpr
  0009c	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  000a0	48 8d 54 24 20	 lea	 rdx, QWORD PTR key$2[rsp]
  000a5	e8 00 00 00 00	 call	 luaK_exp2val
  000aa	83 7f 10 5d	 cmp	 DWORD PTR [rdi+16], 93	; 0000005dH
  000ae	48 8b cf	 mov	 rcx, rdi
  000b1	0f 85 b9 00 00
	00		 jne	 $LN55@suffixedex
  000b7	e8 00 00 00 00	 call	 luaX_next
; Line 903
  000bc	4c 8d 44 24 20	 lea	 r8, QWORD PTR key$2[rsp]
  000c1	48 8b d6	 mov	 rdx, rsi
  000c4	48 8b cd	 mov	 rcx, rbp
  000c7	e8 00 00 00 00	 call	 luaK_indexed
; Line 904
  000cc	eb 6d		 jmp	 SHORT $LN6@suffixedex
$LN3@suffixedex:
; Line 908
  000ce	48 8b cf	 mov	 rcx, rdi
  000d1	e8 00 00 00 00	 call	 luaX_next
; Line 909
  000d6	81 7f 10 24 01
	00 00		 cmp	 DWORD PTR [rdi+16], 292	; 00000124H
  000dd	48 8b cf	 mov	 rcx, rdi
  000e0	0f 85 b3 00 00
	00		 jne	 $LN45@suffixedex
  000e6	48 8b 5f 18	 mov	 rbx, QWORD PTR [rdi+24]
  000ea	e8 00 00 00 00	 call	 luaX_next
  000ef	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  000f3	48 8b d3	 mov	 rdx, rbx
  000f6	e8 00 00 00 00	 call	 luaK_stringK
; Line 910
  000fb	4c 8d 44 24 20	 lea	 r8, QWORD PTR key$1[rsp]
  00100	48 8b d6	 mov	 rdx, rsi
  00103	48 8b cd	 mov	 rcx, rbp
  00106	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR key$1[rsp+16], -1
  0010f	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR key$1[rsp], 4
  00117	89 44 24 28	 mov	 DWORD PTR key$1[rsp+8], eax
  0011b	e8 00 00 00 00	 call	 luaK_self
; Line 912
  00120	eb 0b		 jmp	 SHORT $LN54@suffixedex
$LN2@suffixedex:
; Line 915
  00122	48 8b d6	 mov	 rdx, rsi
  00125	48 8b cd	 mov	 rcx, rbp
  00128	e8 00 00 00 00	 call	 luaK_exp2nextreg
$LN54@suffixedex:
; Line 916
  0012d	45 8b c6	 mov	 r8d, r14d
  00130	48 8b d6	 mov	 rdx, rsi
  00133	48 8b cf	 mov	 rcx, rdi
  00136	e8 00 00 00 00	 call	 funcargs
$LN6@suffixedex:
; Line 894
  0013b	8b 47 10	 mov	 eax, DWORD PTR [rdi+16]
  0013e	83 e8 28	 sub	 eax, 40			; 00000028H
  00141	3d fd 00 00 00	 cmp	 eax, 253		; 000000fdH
  00146	0f 86 05 ff ff
	ff		 jbe	 $LL9@suffixedex
$LN52@suffixedex:
  0014c	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  00154	4c 8b 7c 24 40	 mov	 r15, QWORD PTR [rsp+64]
$LN48@suffixedex:
; Line 922
  00159	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0015e	48 33 cc	 xor	 rcx, rsp
  00161	e8 00 00 00 00	 call	 __security_check_cookie
  00166	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0016a	41 5e		 pop	 r14
  0016c	5f		 pop	 rdi
  0016d	5e		 pop	 rsi
  0016e	5d		 pop	 rbp
  0016f	c3		 ret	 0
$LN55@suffixedex:
; Line 902
  00170	ba 5d 00 00 00	 mov	 edx, 93			; 0000005dH
  00175	e8 00 00 00 00	 call	 luaX_token2str
  0017a	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00185	4c 8b c0	 mov	 r8, rax
  00188	e8 00 00 00 00	 call	 luaO_pushfstring
  0018d	48 8b cf	 mov	 rcx, rdi
  00190	48 8b d0	 mov	 rdx, rax
  00193	e8 00 00 00 00	 call	 luaX_syntaxerror
  00198	cc		 int	 3
$LN45@suffixedex:
; Line 909
  00199	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  0019e	e8 00 00 00 00	 call	 luaX_token2str
  001a3	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  001a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  001ae	4c 8b c0	 mov	 r8, rax
  001b1	e8 00 00 00 00	 call	 luaO_pushfstring
  001b6	48 8b cf	 mov	 rcx, rdi
  001b9	48 8b d0	 mov	 rdx, rax
  001bc	e8 00 00 00 00	 call	 luaX_syntaxerror
  001c1	cc		 int	 3
$LN53@suffixedex:
  001c2	66 90		 npad	 2
$LN50@suffixedex:
; Line 922
  001c4	00 00 00 00	 DD	 $LN2@suffixedex
  001c8	00 00 00 00	 DD	 $LN5@suffixedex
  001cc	00 00 00 00	 DD	 $LN3@suffixedex
  001d0	00 00 00 00	 DD	 $LN4@suffixedex
  001d4	00 00 00 00	 DD	 $LN52@suffixedex
$LN49@suffixedex:
  001d8	00		 DB	 0
  001d9	04		 DB	 4
  001da	04		 DB	 4
  001db	04		 DB	 4
  001dc	04		 DB	 4
  001dd	04		 DB	 4
  001de	01		 DB	 1
  001df	04		 DB	 4
  001e0	04		 DB	 4
  001e1	04		 DB	 4
  001e2	04		 DB	 4
  001e3	04		 DB	 4
  001e4	04		 DB	 4
  001e5	04		 DB	 4
  001e6	04		 DB	 4
  001e7	04		 DB	 4
  001e8	04		 DB	 4
  001e9	04		 DB	 4
  001ea	02		 DB	 2
  001eb	04		 DB	 4
  001ec	04		 DB	 4
  001ed	04		 DB	 4
  001ee	04		 DB	 4
  001ef	04		 DB	 4
  001f0	04		 DB	 4
  001f1	04		 DB	 4
  001f2	04		 DB	 4
  001f3	04		 DB	 4
  001f4	04		 DB	 4
  001f5	04		 DB	 4
  001f6	04		 DB	 4
  001f7	04		 DB	 4
  001f8	04		 DB	 4
  001f9	04		 DB	 4
  001fa	04		 DB	 4
  001fb	04		 DB	 4
  001fc	04		 DB	 4
  001fd	04		 DB	 4
  001fe	04		 DB	 4
  001ff	04		 DB	 4
  00200	04		 DB	 4
  00201	04		 DB	 4
  00202	04		 DB	 4
  00203	04		 DB	 4
  00204	04		 DB	 4
  00205	04		 DB	 4
  00206	04		 DB	 4
  00207	04		 DB	 4
  00208	04		 DB	 4
  00209	04		 DB	 4
  0020a	04		 DB	 4
  0020b	03		 DB	 3
  0020c	04		 DB	 4
  0020d	04		 DB	 4
  0020e	04		 DB	 4
  0020f	04		 DB	 4
  00210	04		 DB	 4
  00211	04		 DB	 4
  00212	04		 DB	 4
  00213	04		 DB	 4
  00214	04		 DB	 4
  00215	04		 DB	 4
  00216	04		 DB	 4
  00217	04		 DB	 4
  00218	04		 DB	 4
  00219	04		 DB	 4
  0021a	04		 DB	 4
  0021b	04		 DB	 4
  0021c	04		 DB	 4
  0021d	04		 DB	 4
  0021e	04		 DB	 4
  0021f	04		 DB	 4
  00220	04		 DB	 4
  00221	04		 DB	 4
  00222	04		 DB	 4
  00223	04		 DB	 4
  00224	04		 DB	 4
  00225	04		 DB	 4
  00226	04		 DB	 4
  00227	04		 DB	 4
  00228	04		 DB	 4
  00229	04		 DB	 4
  0022a	04		 DB	 4
  0022b	00		 DB	 0
  0022c	04		 DB	 4
  0022d	04		 DB	 4
  0022e	04		 DB	 4
  0022f	04		 DB	 4
  00230	04		 DB	 4
  00231	04		 DB	 4
  00232	04		 DB	 4
  00233	04		 DB	 4
  00234	04		 DB	 4
  00235	04		 DB	 4
  00236	04		 DB	 4
  00237	04		 DB	 4
  00238	04		 DB	 4
  00239	04		 DB	 4
  0023a	04		 DB	 4
  0023b	04		 DB	 4
  0023c	04		 DB	 4
  0023d	04		 DB	 4
  0023e	04		 DB	 4
  0023f	04		 DB	 4
  00240	04		 DB	 4
  00241	04		 DB	 4
  00242	04		 DB	 4
  00243	04		 DB	 4
  00244	04		 DB	 4
  00245	04		 DB	 4
  00246	04		 DB	 4
  00247	04		 DB	 4
  00248	04		 DB	 4
  00249	04		 DB	 4
  0024a	04		 DB	 4
  0024b	04		 DB	 4
  0024c	04		 DB	 4
  0024d	04		 DB	 4
  0024e	04		 DB	 4
  0024f	04		 DB	 4
  00250	04		 DB	 4
  00251	04		 DB	 4
  00252	04		 DB	 4
  00253	04		 DB	 4
  00254	04		 DB	 4
  00255	04		 DB	 4
  00256	04		 DB	 4
  00257	04		 DB	 4
  00258	04		 DB	 4
  00259	04		 DB	 4
  0025a	04		 DB	 4
  0025b	04		 DB	 4
  0025c	04		 DB	 4
  0025d	04		 DB	 4
  0025e	04		 DB	 4
  0025f	04		 DB	 4
  00260	04		 DB	 4
  00261	04		 DB	 4
  00262	04		 DB	 4
  00263	04		 DB	 4
  00264	04		 DB	 4
  00265	04		 DB	 4
  00266	04		 DB	 4
  00267	04		 DB	 4
  00268	04		 DB	 4
  00269	04		 DB	 4
  0026a	04		 DB	 4
  0026b	04		 DB	 4
  0026c	04		 DB	 4
  0026d	04		 DB	 4
  0026e	04		 DB	 4
  0026f	04		 DB	 4
  00270	04		 DB	 4
  00271	04		 DB	 4
  00272	04		 DB	 4
  00273	04		 DB	 4
  00274	04		 DB	 4
  00275	04		 DB	 4
  00276	04		 DB	 4
  00277	04		 DB	 4
  00278	04		 DB	 4
  00279	04		 DB	 4
  0027a	04		 DB	 4
  0027b	04		 DB	 4
  0027c	04		 DB	 4
  0027d	04		 DB	 4
  0027e	04		 DB	 4
  0027f	04		 DB	 4
  00280	04		 DB	 4
  00281	04		 DB	 4
  00282	04		 DB	 4
  00283	04		 DB	 4
  00284	04		 DB	 4
  00285	04		 DB	 4
  00286	04		 DB	 4
  00287	04		 DB	 4
  00288	04		 DB	 4
  00289	04		 DB	 4
  0028a	04		 DB	 4
  0028b	04		 DB	 4
  0028c	04		 DB	 4
  0028d	04		 DB	 4
  0028e	04		 DB	 4
  0028f	04		 DB	 4
  00290	04		 DB	 4
  00291	04		 DB	 4
  00292	04		 DB	 4
  00293	04		 DB	 4
  00294	04		 DB	 4
  00295	04		 DB	 4
  00296	04		 DB	 4
  00297	04		 DB	 4
  00298	04		 DB	 4
  00299	04		 DB	 4
  0029a	04		 DB	 4
  0029b	04		 DB	 4
  0029c	04		 DB	 4
  0029d	04		 DB	 4
  0029e	04		 DB	 4
  0029f	04		 DB	 4
  002a0	04		 DB	 4
  002a1	04		 DB	 4
  002a2	04		 DB	 4
  002a3	04		 DB	 4
  002a4	04		 DB	 4
  002a5	04		 DB	 4
  002a6	04		 DB	 4
  002a7	04		 DB	 4
  002a8	04		 DB	 4
  002a9	04		 DB	 4
  002aa	04		 DB	 4
  002ab	04		 DB	 4
  002ac	04		 DB	 4
  002ad	04		 DB	 4
  002ae	04		 DB	 4
  002af	04		 DB	 4
  002b0	04		 DB	 4
  002b1	04		 DB	 4
  002b2	04		 DB	 4
  002b3	04		 DB	 4
  002b4	04		 DB	 4
  002b5	04		 DB	 4
  002b6	04		 DB	 4
  002b7	04		 DB	 4
  002b8	04		 DB	 4
  002b9	04		 DB	 4
  002ba	04		 DB	 4
  002bb	04		 DB	 4
  002bc	04		 DB	 4
  002bd	04		 DB	 4
  002be	04		 DB	 4
  002bf	04		 DB	 4
  002c0	04		 DB	 4
  002c1	04		 DB	 4
  002c2	04		 DB	 4
  002c3	04		 DB	 4
  002c4	04		 DB	 4
  002c5	04		 DB	 4
  002c6	04		 DB	 4
  002c7	04		 DB	 4
  002c8	04		 DB	 4
  002c9	04		 DB	 4
  002ca	04		 DB	 4
  002cb	04		 DB	 4
  002cc	04		 DB	 4
  002cd	04		 DB	 4
  002ce	04		 DB	 4
  002cf	04		 DB	 4
  002d0	04		 DB	 4
  002d1	04		 DB	 4
  002d2	04		 DB	 4
  002d3	04		 DB	 4
  002d4	04		 DB	 4
  002d5	00		 DB	 0
suffixedexp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT primaryexp
_TEXT	SEGMENT
ls$ = 48
v$ = 56
primaryexp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 865
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 867
  0000a	8b 41 10	 mov	 eax, DWORD PTR [rcx+16]
  0000d	48 8b f2	 mov	 rsi, rdx
  00010	48 8b f9	 mov	 rdi, rcx
  00013	83 f8 28	 cmp	 eax, 40			; 00000028H
  00016	74 16		 je	 SHORT $LN3@primaryexp
  00018	3d 24 01 00 00	 cmp	 eax, 292		; 00000124H
  0001d	75 59		 jne	 SHORT $LN32@primaryexp
; Line 884
  0001f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5f		 pop	 rdi
; Line 877
  00029	e9 00 00 00 00	 jmp	 singlevar
$LN3@primaryexp:
  0002e	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
; Line 869
  00033	8b 59 04	 mov	 ebx, DWORD PTR [rcx+4]
; Line 870
  00036	e8 00 00 00 00	 call	 luaX_next
; Line 871
  0003b	45 33 c0	 xor	 r8d, r8d
  0003e	48 8b d6	 mov	 rdx, rsi
  00041	48 8b cf	 mov	 rcx, rdi
  00044	e8 00 00 00 00	 call	 subexpr
; Line 872
  00049	ba 29 00 00 00	 mov	 edx, 41			; 00000029H
  0004e	44 8b cb	 mov	 r9d, ebx
  00051	44 8d 42 ff	 lea	 r8d, QWORD PTR [rdx-1]
  00055	48 8b cf	 mov	 rcx, rdi
  00058	e8 00 00 00 00	 call	 check_match
; Line 873
  0005d	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00061	48 8b d6	 mov	 rdx, rsi
  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
; Line 884
  00069	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00072	5f		 pop	 rdi
; Line 873
  00073	e9 00 00 00 00	 jmp	 luaK_dischargevars
$LN32@primaryexp:
; Line 881
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@KBCKKGAJ@unexpected?5symbol?$AA@
  0007f	e8 00 00 00 00	 call	 luaX_syntaxerror
  00084	cc		 int	 3
$LN31@primaryexp:
primaryexp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT funcargs
_TEXT	SEGMENT
args$ = 48
__$ArrayPad$ = 72
ls$ = 112
f$ = 120
line$ = 128
funcargs PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 811
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 815
  0001b	8b 41 10	 mov	 eax, DWORD PTR [rcx+16]
  0001e	48 8b 79 30	 mov	 rdi, QWORD PTR [rcx+48]
  00022	41 8b e8	 mov	 ebp, r8d
  00025	48 8b f2	 mov	 rsi, rdx
  00028	48 8b d9	 mov	 rbx, rcx
  0002b	83 f8 28	 cmp	 eax, 40			; 00000028H
  0002e	74 47		 je	 SHORT $LN10@funcargs
  00030	83 f8 7b	 cmp	 eax, 123		; 0000007bH
  00033	74 36		 je	 SHORT $LN7@funcargs
  00035	3d 25 01 00 00	 cmp	 eax, 293		; 00000125H
  0003a	0f 85 28 01 00
	00		 jne	 $LN39@funcargs
; Line 832
  00040	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]
  00044	48 8b cf	 mov	 rcx, rdi
  00047	e8 00 00 00 00	 call	 luaK_stringK
; Line 833
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	48 c7 44 24 40
	ff ff ff ff	 mov	 QWORD PTR args$[rsp+16], -1
  00058	89 44 24 38	 mov	 DWORD PTR args$[rsp+8], eax
  0005c	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR args$[rsp], 4
  00064	e8 00 00 00 00	 call	 luaX_next
; Line 834
  00069	eb 74		 jmp	 SHORT $LN11@funcargs
$LN7@funcargs:
; Line 828
  0006b	48 8d 54 24 30	 lea	 rdx, QWORD PTR args$[rsp]
  00070	e8 00 00 00 00	 call	 constructor
; Line 829
  00075	eb 68		 jmp	 SHORT $LN11@funcargs
$LN10@funcargs:
; Line 817
  00077	e8 00 00 00 00	 call	 luaX_next
; Line 818
  0007c	83 7b 10 29	 cmp	 DWORD PTR [rbx+16], 41	; 00000029H
  00080	75 0a		 jne	 SHORT $LN9@funcargs
; Line 819
  00082	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR args$[rsp], 0
; Line 820
  0008a	eb 3f		 jmp	 SHORT $LN8@funcargs
$LN9@funcargs:
; Line 821
  0008c	48 8d 54 24 30	 lea	 rdx, QWORD PTR args$[rsp]
  00091	45 33 c0	 xor	 r8d, r8d
  00094	48 8b cb	 mov	 rcx, rbx
  00097	e8 00 00 00 00	 call	 subexpr
  0009c	83 7b 10 2c	 cmp	 DWORD PTR [rbx+16], 44	; 0000002cH
  000a0	75 18		 jne	 SHORT $LN22@funcargs
  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	e8 00 00 00 00	 call	 luaX_next
  000aa	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  000ae	48 8d 54 24 30	 lea	 rdx, QWORD PTR args$[rsp]
  000b3	e8 00 00 00 00	 call	 luaK_exp2nextreg
  000b8	eb d2		 jmp	 SHORT $LN9@funcargs
$LN22@funcargs:
; Line 822
  000ba	48 8d 54 24 30	 lea	 rdx, QWORD PTR args$[rsp]
  000bf	41 83 c8 ff	 or	 r8d, -1
  000c3	48 8b cf	 mov	 rcx, rdi
  000c6	e8 00 00 00 00	 call	 luaK_setreturns
$LN8@funcargs:
; Line 824
  000cb	ba 29 00 00 00	 mov	 edx, 41			; 00000029H
  000d0	44 8b cd	 mov	 r9d, ebp
  000d3	48 8b cb	 mov	 rcx, rbx
  000d6	44 8d 42 ff	 lea	 r8d, QWORD PTR [rdx-1]
  000da	e8 00 00 00 00	 call	 check_match
$LN11@funcargs:
; Line 841
  000df	8b 4c 24 30	 mov	 ecx, DWORD PTR args$[rsp]
  000e3	8b 5e 08	 mov	 ebx, DWORD PTR [rsi+8]
  000e6	8d 41 f3	 lea	 eax, DWORD PTR [rcx-13]
  000e9	83 f8 01	 cmp	 eax, 1
  000ec	76 1e		 jbe	 SHORT $LN3@funcargs
; Line 845
  000ee	85 c9		 test	 ecx, ecx
  000f0	74 0d		 je	 SHORT $LN1@funcargs
; Line 846
  000f2	48 8d 54 24 30	 lea	 rdx, QWORD PTR args$[rsp]
  000f7	48 8b cf	 mov	 rcx, rdi
  000fa	e8 00 00 00 00	 call	 luaK_exp2nextreg
$LN1@funcargs:
; Line 847
  000ff	44 0f b6 4f 3c	 movzx	 r9d, BYTE PTR [rdi+60]
  00104	44 2b cb	 sub	 r9d, ebx
  00107	41 ff c9	 dec	 r9d
  0010a	eb 04		 jmp	 SHORT $LN2@funcargs
$LN3@funcargs:
; Line 843
  0010c	41 83 c9 ff	 or	 r9d, -1
$LN2@funcargs:
; Line 849
  00110	41 ff c1	 inc	 r9d
  00113	44 8b c3	 mov	 r8d, ebx
  00116	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0011b	48 8b cf	 mov	 rcx, rdi
  0011e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00126	e8 00 00 00 00	 call	 luaK_codeABC
; Line 850
  0012b	8b d5		 mov	 edx, ebp
  0012d	48 8b cf	 mov	 rcx, rdi
  00130	48 c7 46 10 ff
	ff ff ff	 mov	 QWORD PTR [rsi+16], -1
  00138	c7 06 0d 00 00
	00		 mov	 DWORD PTR [rsi], 13
  0013e	89 46 08	 mov	 DWORD PTR [rsi+8], eax
  00141	e8 00 00 00 00	 call	 luaK_fixline
; Line 851
  00146	fe c3		 inc	 bl
  00148	88 5f 3c	 mov	 BYTE PTR [rdi+60], bl
; Line 853
  0014b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00150	48 33 cc	 xor	 rcx, rsp
  00153	e8 00 00 00 00	 call	 __security_check_cookie
  00158	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR [rsp+136]
  00160	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00164	5f		 pop	 rdi
  00165	5e		 pop	 rsi
  00166	5d		 pop	 rbp
  00167	c3		 ret	 0
$LN39@funcargs:
; Line 837
  00168	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@HEIHHEKF@function?5arguments?5expected?$AA@
  0016f	e8 00 00 00 00	 call	 luaX_syntaxerror
  00174	cc		 int	 3
$LN38@funcargs:
funcargs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT explist
_TEXT	SEGMENT
ls$ = 48
v$ = 56
explist	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 798
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 801
  0000f	45 33 c0	 xor	 r8d, r8d
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx
  00018	bf 01 00 00 00	 mov	 edi, 1
  0001d	e8 00 00 00 00	 call	 subexpr
$LL2@explist:
; Line 802
  00022	83 7b 10 2c	 cmp	 DWORD PTR [rbx+16], 44	; 0000002cH
  00026	75 26		 jne	 SHORT $LN120@explist
  00028	48 8b cb	 mov	 rcx, rbx
  0002b	e8 00 00 00 00	 call	 luaX_next
; Line 803
  00030	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00034	48 8b d6	 mov	 rdx, rsi
  00037	e8 00 00 00 00	 call	 luaK_exp2nextreg
; Line 804
  0003c	45 33 c0	 xor	 r8d, r8d
  0003f	48 8b d6	 mov	 rdx, rsi
  00042	48 8b cb	 mov	 rcx, rbx
  00045	e8 00 00 00 00	 call	 subexpr
; Line 805
  0004a	ff c7		 inc	 edi
; Line 806
  0004c	eb d4		 jmp	 SHORT $LL2@explist
$LN120@explist:
; Line 808
  0004e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00053	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00058	8b c7		 mov	 eax, edi
  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5f		 pop	 rdi
  0005f	c3		 ret	 0
explist	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT body
_TEXT	SEGMENT
bl$ = 32
new_fs$ = 64
ls$ = 144
e$ = 152
ismethod$ = 160
line$ = 168
body	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 776
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00014	55		 push	 rbp
  00015	48 8b ec	 mov	 rbp, rsp
  00018	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0001f	45 8b f1	 mov	 r14d, r9d
  00022	41 8b d8	 mov	 ebx, r8d
  00025	48 8b f2	 mov	 rsi, rdx
  00028	48 8b f9	 mov	 rdi, rcx
; Line 780
  0002b	e8 00 00 00 00	 call	 addprototype
; Line 782
  00030	33 d2		 xor	 edx, edx
  00032	48 89 45 c0	 mov	 QWORD PTR new_fs$[rbp-128], rax
  00036	44 89 70 28	 mov	 DWORD PTR [rax+40], r14d
  0003a	48 8b 47 30	 mov	 rax, QWORD PTR [rdi+48]
  0003e	48 89 45 c8	 mov	 QWORD PTR new_fs$[rbp-120], rax
  00042	88 55 fa	 mov	 BYTE PTR new_fs$[rbp-70], dl
  00045	48 89 7d d0	 mov	 QWORD PTR new_fs$[rbp-112], rdi
  00049	48 89 55 e0	 mov	 QWORD PTR new_fs$[rbp-96], rdx
  0004d	66 89 55 fb	 mov	 WORD PTR new_fs$[rbp-69], dx
  00051	48 89 55 ec	 mov	 QWORD PTR new_fs$[rbp-84], rdx
  00055	66 89 55 f8	 mov	 WORD PTR new_fs$[rbp-72], dx
  00059	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR new_fs$[rbp-88], -1
  00060	48 8d 45 c0	 lea	 rax, QWORD PTR new_fs$[rbp-128]
  00064	48 89 47 30	 mov	 QWORD PTR [rdi+48], rax
  00068	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0006c	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0006f	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00073	48 89 55 d8	 mov	 QWORD PTR new_fs$[rbp-104], rdx
  00077	89 4d f4	 mov	 DWORD PTR new_fs$[rbp-76], ecx
  0007a	48 8b 4d c0	 mov	 rcx, QWORD PTR new_fs$[rbp-128]
  0007e	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00082	c6 41 0c 02	 mov	 BYTE PTR [rcx+12], 2
; Line 783
  00086	83 7f 10 28	 cmp	 DWORD PTR [rdi+16], 40	; 00000028H
  0008a	0f b6 45 fa	 movzx	 eax, BYTE PTR new_fs$[rbp-70]
  0008e	88 55 b2	 mov	 BYTE PTR bl$[rbp-110], dl
  00091	48 8b 55 d0	 mov	 rdx, QWORD PTR new_fs$[rbp-112]
  00095	88 45 b0	 mov	 BYTE PTR bl$[rbp-112], al
  00098	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0009c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0009f	89 4d a8	 mov	 DWORD PTR bl$[rbp-120], ecx
  000a2	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  000a6	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  000a9	48 8b 45 d8	 mov	 rax, QWORD PTR new_fs$[rbp-104]
  000ad	c6 45 b1 00	 mov	 BYTE PTR bl$[rbp-111], 0
  000b1	48 89 45 a0	 mov	 QWORD PTR bl$[rbp-128], rax
  000b5	48 8d 45 a0	 lea	 rax, QWORD PTR bl$[rbp-128]
  000b9	89 4d ac	 mov	 DWORD PTR bl$[rbp-116], ecx
  000bc	48 89 45 d8	 mov	 QWORD PTR new_fs$[rbp-104], rax
  000c0	48 8b cf	 mov	 rcx, rdi
  000c3	0f 85 ff 00 00
	00		 jne	 $LN57@body
  000c9	e8 00 00 00 00	 call	 luaX_next
; Line 784
  000ce	85 db		 test	 ebx, ebx
  000d0	74 57		 je	 SHORT $LN20@body
; Line 785
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04PJDNGLKJ@self?$AA@
  000d9	41 b8 04 00 00
	00		 mov	 r8d, 4
  000df	48 8b cf	 mov	 rcx, rdi
  000e2	e8 00 00 00 00	 call	 luaX_newstring
  000e7	48 8b cf	 mov	 rcx, rdi
  000ea	48 8b d0	 mov	 rdx, rax
  000ed	e8 00 00 00 00	 call	 new_localvar
; Line 786
  000f2	4c 8b 47 30	 mov	 r8, QWORD PTR [rdi+48]
  000f6	41 fe 40 3a	 inc	 BYTE PTR [r8+58]
  000fa	41 0f b6 40 3a	 movzx	 eax, BYTE PTR [r8+58]
  000ff	49 63 50 34	 movsxd	 rdx, DWORD PTR [r8+52]
  00103	48 03 d0	 add	 rdx, rax
  00106	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  0010a	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0010e	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00111	48 0f bf 54 50
	fe		 movsx	 rdx, WORD PTR [rax+rdx*2-2]
  00117	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0011a	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  0011e	41 8b 40 20	 mov	 eax, DWORD PTR [r8+32]
  00122	48 03 d2	 add	 rdx, rdx
  00125	89 44 d1 08	 mov	 DWORD PTR [rcx+rdx*8+8], eax
$LN20@body:
; Line 788
  00129	48 8b cf	 mov	 rcx, rdi
  0012c	e8 00 00 00 00	 call	 parlist
; Line 789
  00131	83 7f 10 29	 cmp	 DWORD PTR [rdi+16], 41	; 00000029H
  00135	48 8b cf	 mov	 rcx, rdi
  00138	0f 85 b3 00 00
	00		 jne	 $LN59@body
  0013e	e8 00 00 00 00	 call	 luaX_next
; Line 790
  00143	48 8b cf	 mov	 rcx, rdi
  00146	e8 00 00 00 00	 call	 statlist
; Line 791
  0014b	8b 4f 04	 mov	 ecx, DWORD PTR [rdi+4]
  0014e	48 8b 45 c0	 mov	 rax, QWORD PTR new_fs$[rbp-128]
; Line 792
  00152	ba 06 01 00 00	 mov	 edx, 262		; 00000106H
  00157	89 48 2c	 mov	 DWORD PTR [rax+44], ecx
  0015a	45 8b ce	 mov	 r9d, r14d
  0015d	44 8d 42 03	 lea	 r8d, QWORD PTR [rdx+3]
  00161	48 8b cf	 mov	 rcx, rdi
  00164	e8 00 00 00 00	 call	 check_match
; Line 793
  00169	48 8b 47 30	 mov	 rax, QWORD PTR [rdi+48]
  0016d	45 33 c0	 xor	 r8d, r8d
  00170	48 8b 58 08	 mov	 rbx, QWORD PTR [rax+8]
  00174	41 8d 50 2c	 lea	 edx, QWORD PTR [r8+44]
  00178	44 8b 4b 30	 mov	 r9d, DWORD PTR [rbx+48]
  0017c	48 8b cb	 mov	 rcx, rbx
  0017f	41 ff c9	 dec	 r9d
  00182	e8 00 00 00 00	 call	 luaK_codeABx
  00187	48 8b d6	 mov	 rdx, rsi
  0018a	48 8b cb	 mov	 rcx, rbx
  0018d	48 c7 46 10 ff
	ff ff ff	 mov	 QWORD PTR [rsi+16], -1
  00195	c7 06 0c 00 00
	00		 mov	 DWORD PTR [rsi], 12
  0019b	89 46 08	 mov	 DWORD PTR [rsi+8], eax
  0019e	e8 00 00 00 00	 call	 luaK_exp2nextreg
; Line 794
  001a3	48 8b cf	 mov	 rcx, rdi
  001a6	e8 00 00 00 00	 call	 close_func
; Line 795
  001ab	4c 8d 9c 24 80
	00 00 00	 lea	 r11, QWORD PTR [rsp+128]
  001b3	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  001b7	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  001bb	49 8b 7b 20	 mov	 rdi, QWORD PTR [r11+32]
  001bf	4d 8b 73 28	 mov	 r14, QWORD PTR [r11+40]
  001c3	49 8b e3	 mov	 rsp, r11
  001c6	5d		 pop	 rbp
  001c7	c3		 ret	 0
$LN57@body:
; Line 783
  001c8	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  001cd	e8 00 00 00 00	 call	 luaX_token2str
  001d2	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  001d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  001dd	4c 8b c0	 mov	 r8, rax
  001e0	e8 00 00 00 00	 call	 luaO_pushfstring
  001e5	48 8b cf	 mov	 rcx, rdi
  001e8	48 8b d0	 mov	 rdx, rax
  001eb	e8 00 00 00 00	 call	 luaX_syntaxerror
  001f0	cc		 int	 3
$LN59@body:
; Line 789
  001f1	ba 29 00 00 00	 mov	 edx, 41			; 00000029H
  001f6	e8 00 00 00 00	 call	 luaX_token2str
  001fb	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  001ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00206	4c 8b c0	 mov	 r8, rax
  00209	e8 00 00 00 00	 call	 luaO_pushfstring
  0020e	48 8b cf	 mov	 rcx, rdi
  00211	48 8b d0	 mov	 rdx, rax
  00214	e8 00 00 00 00	 call	 luaX_syntaxerror
  00219	cc		 int	 3
$LN56@body:
body	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT parlist
_TEXT	SEGMENT
ls$ = 48
parlist	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 747
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 749
  0001a	4c 8b 71 30	 mov	 r14, QWORD PTR [rcx+48]
; Line 751
  0001e	33 f6		 xor	 esi, esi
  00020	48 8b d9	 mov	 rbx, rcx
  00023	49 8b 2e	 mov	 rbp, QWORD PTR [r14]
; Line 752
  00026	40 88 75 0b	 mov	 BYTE PTR [rbp+11], sil
; Line 753
  0002a	83 79 10 29	 cmp	 DWORD PTR [rcx+16], 41	; 00000029H
  0002e	74 4f		 je	 SHORT $LN7@parlist
$LL9@parlist:
; Line 755
  00030	8b 4b 10	 mov	 ecx, DWORD PTR [rbx+16]
  00033	81 e9 19 01 00
	00		 sub	 ecx, 281		; 00000119H
  00039	74 38		 je	 SHORT $LN3@parlist
  0003b	83 f9 0b	 cmp	 ecx, 11
; Line 757
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	0f 85 b1 00 00
	00		 jne	 $LN45@parlist
  00047	48 8b 7b 18	 mov	 rdi, QWORD PTR [rbx+24]
  0004b	e8 00 00 00 00	 call	 luaX_next
  00050	48 8b d7	 mov	 rdx, rdi
  00053	48 8b cb	 mov	 rcx, rbx
  00056	e8 00 00 00 00	 call	 new_localvar
; Line 758
  0005b	ff c6		 inc	 esi
; Line 768
  0005d	80 7d 0b 00	 cmp	 BYTE PTR [rbp+11], 0
  00061	75 1c		 jne	 SHORT $LN7@parlist
  00063	83 7b 10 2c	 cmp	 DWORD PTR [rbx+16], 44	; 0000002cH
  00067	75 16		 jne	 SHORT $LN7@parlist
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 luaX_next
  00071	eb bd		 jmp	 SHORT $LL9@parlist
$LN3@parlist:
; Line 762
  00073	48 8b cb	 mov	 rcx, rbx
  00076	e8 00 00 00 00	 call	 luaX_next
; Line 763
  0007b	c6 45 0b 02	 mov	 BYTE PTR [rbp+11], 2
$LN7@parlist:
; Line 770
  0007f	4c 8b 4b 30	 mov	 r9, QWORD PTR [rbx+48]
  00083	41 00 71 3a	 add	 BYTE PTR [r9+58], sil
  00087	85 f6		 test	 esi, esi
  00089	74 3e		 je	 SHORT $LN27@parlist
  0008b	0f 1f 44 00 00	 npad	 5
$LL29@parlist:
  00090	41 0f b6 51 3a	 movzx	 edx, BYTE PTR [r9+58]
  00095	48 63 c6	 movsxd	 rax, esi
  00098	48 2b d0	 sub	 rdx, rax
  0009b	49 63 41 34	 movsxd	 rax, DWORD PTR [r9+52]
  0009f	48 03 d0	 add	 rdx, rax
  000a2	49 8b 41 10	 mov	 rax, QWORD PTR [r9+16]
  000a6	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000aa	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000ad	4c 0f bf 04 50	 movsx	 r8, WORD PTR [rax+rdx*2]
  000b2	49 8b 01	 mov	 rax, QWORD PTR [r9]
  000b5	48 8b 50 50	 mov	 rdx, QWORD PTR [rax+80]
  000b9	41 8b 41 20	 mov	 eax, DWORD PTR [r9+32]
  000bd	4d 03 c0	 add	 r8, r8
  000c0	42 89 44 c2 08	 mov	 DWORD PTR [rdx+r8*8+8], eax
  000c5	ff ce		 dec	 esi
  000c7	75 c7		 jne	 SHORT $LL29@parlist
$LN27@parlist:
; Line 771
  000c9	41 0f b6 46 3a	 movzx	 eax, BYTE PTR [r14+58]
; Line 772
  000ce	49 8b ce	 mov	 rcx, r14
  000d1	88 45 0a	 mov	 BYTE PTR [rbp+10], al
  000d4	41 0f b6 56 3a	 movzx	 edx, BYTE PTR [r14+58]
; Line 773
  000d9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000de	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000e3	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000e8	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000ed	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f1	41 5e		 pop	 r14
; Line 772
  000f3	e9 00 00 00 00	 jmp	 luaK_reserveregs
$LN45@parlist:
; Line 766
  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@MHIGIDHO@?$DMname?$DO?5or?5?8?4?4?4?8?5expected?$AA@
  000ff	e8 00 00 00 00	 call	 luaX_syntaxerror
  00104	cc		 int	 3
$LN44@parlist:
parlist	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT constructor
_TEXT	SEGMENT
cc$ = 48
__$ArrayPad$ = 96
ls$ = 160
t$ = 168
constructor PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 718
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 45 f0	 mov	 QWORD PTR __$ArrayPad$[rbp-112], rax
; Line 721
  00027	48 8b 71 30	 mov	 rsi, QWORD PTR [rcx+48]
; Line 722
  0002b	44 8b 71 04	 mov	 r14d, DWORD PTR [rcx+4]
; Line 723
  0002f	45 33 e4	 xor	 r12d, r12d
  00032	48 8b da	 mov	 rbx, rdx
  00035	48 8b f9	 mov	 rdi, rcx
  00038	41 8d 54 24 0b	 lea	 edx, QWORD PTR [r12+11]
  0003d	45 33 c9	 xor	 r9d, r9d
  00040	45 33 c0	 xor	 r8d, r8d
  00043	48 8b ce	 mov	 rcx, rsi
  00046	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  0004b	e8 00 00 00 00	 call	 luaK_codeABC
; Line 727
  00050	48 c7 43 10 ff
	ff ff ff	 mov	 QWORD PTR [rbx+16], -1
  00058	4c 63 f8	 movsxd	 r15, eax
  0005b	c7 03 0c 00 00
	00		 mov	 DWORD PTR [rbx], 12
; Line 729
  00061	48 8b d3	 mov	 rdx, rbx
  00064	44 89 7b 08	 mov	 DWORD PTR [rbx+8], r15d
  00068	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  0006c	4c 89 65 e4	 mov	 QWORD PTR cc$[rbp-76], r12
  00070	44 89 65 e0	 mov	 DWORD PTR cc$[rbp-80], r12d
  00074	48 89 5d d8	 mov	 QWORD PTR cc$[rbp-88], rbx
  00078	48 c7 45 d0 ff
	ff ff ff	 mov	 QWORD PTR cc$[rbp-96], -1
  00080	44 89 65 c0	 mov	 DWORD PTR cc$[rbp-112], r12d
  00084	44 89 65 c8	 mov	 DWORD PTR cc$[rbp-104], r12d
  00088	e8 00 00 00 00	 call	 luaK_exp2nextreg
; Line 730
  0008d	83 7f 10 7b	 cmp	 DWORD PTR [rdi+16], 123	; 0000007bH
  00091	48 8b cf	 mov	 rcx, rdi
  00094	74 08		 je	 SHORT $LN13@constructo
  00096	e9 09 02 00 00	 jmp	 $LN89@constructo
$LN88@constructo:
; Line 736
  0009b	48 8b cf	 mov	 rcx, rdi
; Line 730
$LN13@constructo:
  0009e	e8 00 00 00 00	 call	 luaX_next
; Line 733
  000a3	83 7f 10 7d	 cmp	 DWORD PTR [rdi+16], 125	; 0000007dH
  000a7	0f 84 c6 00 00
	00		 je	 $LN2@constructo
; Line 734
  000ad	44 39 65 c0	 cmp	 DWORD PTR cc$[rbp-112], r12d
  000b1	74 33		 je	 SHORT $LN21@constructo
  000b3	48 8d 55 c0	 lea	 rdx, QWORD PTR cc$[rbp-112]
  000b7	48 8b ce	 mov	 rcx, rsi
  000ba	e8 00 00 00 00	 call	 luaK_exp2nextreg
  000bf	83 7d e8 32	 cmp	 DWORD PTR cc$[rbp-72], 50 ; 00000032H
  000c3	44 89 65 c0	 mov	 DWORD PTR cc$[rbp-112], r12d
  000c7	75 1d		 jne	 SHORT $LN21@constructo
  000c9	48 8b 45 d8	 mov	 rax, QWORD PTR cc$[rbp-88]
  000cd	44 8b 45 e4	 mov	 r8d, DWORD PTR cc$[rbp-76]
  000d1	41 b9 32 00 00
	00		 mov	 r9d, 50			; 00000032H
  000d7	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  000da	48 8b ce	 mov	 rcx, rsi
  000dd	e8 00 00 00 00	 call	 luaK_setlist
  000e2	44 89 65 e8	 mov	 DWORD PTR cc$[rbp-72], r12d
$LN21@constructo:
; Line 735
  000e6	8b 47 10	 mov	 eax, DWORD PTR [rdi+16]
  000e9	48 8b cf	 mov	 rcx, rdi
  000ec	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  000ef	74 64		 je	 SHORT $LN26@constructo
  000f1	3d 24 01 00 00	 cmp	 eax, 292		; 00000124H
  000f6	74 28		 je	 SHORT $LN29@constructo
  000f8	48 8d 55 c0	 lea	 rdx, QWORD PTR cc$[rbp-112]
  000fc	45 33 c0	 xor	 r8d, r8d
  000ff	e8 00 00 00 00	 call	 subexpr
  00104	8b 45 e4	 mov	 eax, DWORD PTR cc$[rbp-76]
  00107	48 8b 5f 30	 mov	 rbx, QWORD PTR [rdi+48]
  0010b	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00110	0f 8f b2 00 00
	00		 jg	 $LN79@constructo
  00116	ff c0		 inc	 eax
  00118	ff 45 e8	 inc	 DWORD PTR cc$[rbp-72]
  0011b	89 45 e4	 mov	 DWORD PTR cc$[rbp-76], eax
  0011e	eb 3e		 jmp	 SHORT $LN3@constructo
$LN29@constructo:
  00120	e8 00 00 00 00	 call	 luaX_lookahead
  00125	48 8d 55 c0	 lea	 rdx, QWORD PTR cc$[rbp-112]
  00129	48 8b cf	 mov	 rcx, rdi
  0012c	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  0012f	74 28		 je	 SHORT $LN28@constructo
  00131	45 33 c0	 xor	 r8d, r8d
  00134	e8 00 00 00 00	 call	 subexpr
  00139	8b 45 e4	 mov	 eax, DWORD PTR cc$[rbp-76]
  0013c	48 8b 5f 30	 mov	 rbx, QWORD PTR [rdi+48]
  00140	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00145	0f 8f a1 00 00
	00		 jg	 $LN80@constructo
  0014b	ff c0		 inc	 eax
  0014d	ff 45 e8	 inc	 DWORD PTR cc$[rbp-72]
  00150	89 45 e4	 mov	 DWORD PTR cc$[rbp-76], eax
  00153	eb 09		 jmp	 SHORT $LN3@constructo
$LN26@constructo:
  00155	48 8d 55 c0	 lea	 rdx, QWORD PTR cc$[rbp-112]
$LN28@constructo:
  00159	e8 00 00 00 00	 call	 recfield
$LN3@constructo:
; Line 736
  0015e	8b 47 10	 mov	 eax, DWORD PTR [rdi+16]
  00161	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00164	0f 84 31 ff ff
	ff		 je	 $LN88@constructo
  0016a	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  0016d	0f 84 28 ff ff
	ff		 je	 $LN88@constructo
$LN2@constructo:
; Line 737
  00173	ba 7d 00 00 00	 mov	 edx, 125		; 0000007dH
  00178	45 8b ce	 mov	 r9d, r14d
  0017b	48 8b cf	 mov	 rcx, rdi
  0017e	44 8d 42 fe	 lea	 r8d, QWORD PTR [rdx-2]
  00182	e8 00 00 00 00	 call	 check_match
; Line 738
  00187	44 8b 4d e8	 mov	 r9d, DWORD PTR cc$[rbp-72]
  0018b	45 85 c9	 test	 r9d, r9d
  0018e	0f 84 a6 00 00
	00		 je	 $LN86@constructo
  00194	8b 4d c0	 mov	 ecx, DWORD PTR cc$[rbp-112]
  00197	8d 41 f3	 lea	 eax, DWORD PTR [rcx-13]
  0019a	83 f8 01	 cmp	 eax, 1
  0019d	76 71		 jbe	 SHORT $LN71@constructo
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 10		 je	 SHORT $LN69@constructo
  001a3	48 8d 55 c0	 lea	 rdx, QWORD PTR cc$[rbp-112]
  001a7	48 8b ce	 mov	 rcx, rsi
  001aa	e8 00 00 00 00	 call	 luaK_exp2nextreg
  001af	44 8b 4d e8	 mov	 r9d, DWORD PTR cc$[rbp-72]
$LN69@constructo:
  001b3	48 8b 45 d8	 mov	 rax, QWORD PTR cc$[rbp-88]
  001b7	44 8b 45 e4	 mov	 r8d, DWORD PTR cc$[rbp-76]
  001bb	48 8b ce	 mov	 rcx, rsi
  001be	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  001c1	e8 00 00 00 00	 call	 luaK_setlist
  001c6	eb 72		 jmp	 SHORT $LN86@constructo
$LN79@constructo:
; Line 735
  001c8	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  001cc	48 8b 78 38	 mov	 rdi, QWORD PTR [rax+56]
  001d0	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  001d3	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  001d7	45 85 c0	 test	 r8d, r8d
  001da	0f 85 ed 00 00
	00		 jne	 $LN57@constructo
  001e0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@FCKLILMC@main?5function?$AA@
  001e7	e9 f0 00 00 00	 jmp	 $LN58@constructo
$LN80@constructo:
  001ec	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  001f0	48 8b 78 38	 mov	 rdi, QWORD PTR [rax+56]
  001f4	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  001f7	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  001fb	45 85 c0	 test	 r8d, r8d
  001fe	0f 85 06 01 00
	00		 jne	 $LN43@constructo
  00204	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@FCKLILMC@main?5function?$AA@
  0020b	e9 09 01 00 00	 jmp	 $LN44@constructo
; Line 738
$LN71@constructo:
  00210	48 8d 55 c0	 lea	 rdx, QWORD PTR cc$[rbp-112]
  00214	41 83 c8 ff	 or	 r8d, -1
  00218	48 8b ce	 mov	 rcx, rsi
  0021b	e8 00 00 00 00	 call	 luaK_setreturns
  00220	48 8b 45 d8	 mov	 rax, QWORD PTR cc$[rbp-88]
  00224	44 8b 45 e4	 mov	 r8d, DWORD PTR cc$[rbp-76]
  00228	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  0022b	41 83 c9 ff	 or	 r9d, -1
  0022f	48 8b ce	 mov	 rcx, rsi
  00232	e8 00 00 00 00	 call	 luaK_setlist
  00237	ff 4d e4	 dec	 DWORD PTR cc$[rbp-76]
$LN86@constructo:
; Line 739
  0023a	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  0023d	8b 4d e4	 mov	 ecx, DWORD PTR cc$[rbp-76]
  00240	4a 8d 3c bd 00
	00 00 00	 lea	 rdi, QWORD PTR [r15*4]
  00248	48 8b 58 38	 mov	 rbx, QWORD PTR [rax+56]
  0024c	e8 00 00 00 00	 call	 luaO_int2fb
  00251	8b 0c 3b	 mov	 ecx, DWORD PTR [rbx+rdi]
  00254	81 e1 ff ff 7f
	00		 and	 ecx, 8388607		; 007fffffH
  0025a	c1 e0 17	 shl	 eax, 23
  0025d	0b c1		 or	 eax, ecx
  0025f	89 04 3b	 mov	 DWORD PTR [rbx+rdi], eax
; Line 740
  00262	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00265	8b 4d e0	 mov	 ecx, DWORD PTR cc$[rbp-80]
  00268	48 8b 58 38	 mov	 rbx, QWORD PTR [rax+56]
  0026c	e8 00 00 00 00	 call	 luaO_int2fb
  00271	c1 e0 0e	 shl	 eax, 14
  00274	33 04 3b	 xor	 eax, DWORD PTR [rbx+rdi]
  00277	25 00 c0 7f 00	 and	 eax, 8372224		; 007fc000H
  0027c	31 04 3b	 xor	 DWORD PTR [rbx+rdi], eax
; Line 741
  0027f	48 8b 4d f0	 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-112]
  00283	48 33 cc	 xor	 rcx, rsp
  00286	e8 00 00 00 00	 call	 __security_check_cookie
  0028b	4c 8d 5c 24 70	 lea	 r11, QWORD PTR [rsp+112]
  00290	49 8b 5b 40	 mov	 rbx, QWORD PTR [r11+64]
  00294	49 8b 73 48	 mov	 rsi, QWORD PTR [r11+72]
  00298	49 8b e3	 mov	 rsp, r11
  0029b	41 5f		 pop	 r15
  0029d	41 5e		 pop	 r14
  0029f	41 5c		 pop	 r12
  002a1	5f		 pop	 rdi
  002a2	5d		 pop	 rbp
  002a3	c3		 ret	 0
$LN89@constructo:
; Line 730
  002a4	ba 7b 00 00 00	 mov	 edx, 123		; 0000007bH
  002a9	e8 00 00 00 00	 call	 luaX_token2str
  002ae	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  002b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  002b9	4c 8b c0	 mov	 r8, rax
  002bc	e8 00 00 00 00	 call	 luaO_pushfstring
  002c1	48 8b cf	 mov	 rcx, rdi
  002c4	48 8b d0	 mov	 rdx, rax
  002c7	e8 00 00 00 00	 call	 luaX_syntaxerror
  002cc	cc		 int	 3
; Line 735
$LN57@constructo:
  002cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
  002d4	48 8b cf	 mov	 rcx, rdi
  002d7	e8 00 00 00 00	 call	 luaO_pushfstring
$LN58@constructo:
  002dc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@
  002e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
  002ea	41 b9 ff ff ff
	7f		 mov	 r9d, 2147483647		; 7fffffffH
  002f0	48 8b cf	 mov	 rcx, rdi
  002f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002f8	e8 00 00 00 00	 call	 luaO_pushfstring
  002fd	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00301	48 8b d0	 mov	 rdx, rax
  00304	e8 00 00 00 00	 call	 luaX_syntaxerror
  00309	cc		 int	 3
$LN43@constructo:
  0030a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
  00311	48 8b cf	 mov	 rcx, rdi
  00314	e8 00 00 00 00	 call	 luaO_pushfstring
$LN44@constructo:
  00319	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@
  00320	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
  00327	41 b9 ff ff ff
	7f		 mov	 r9d, 2147483647		; 7fffffffH
  0032d	48 8b cf	 mov	 rcx, rdi
  00330	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00335	e8 00 00 00 00	 call	 luaO_pushfstring
  0033a	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0033e	48 8b d0	 mov	 rdx, rax
  00341	e8 00 00 00 00	 call	 luaX_syntaxerror
  00346	cc		 int	 3
$LN87@constructo:
constructor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT field
_TEXT	SEGMENT
ls$ = 48
cc$ = 56
field	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 696
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 698
  0000a	8b 41 10	 mov	 eax, DWORD PTR [rcx+16]
  0000d	48 8b fa	 mov	 rdi, rdx
  00010	48 8b d9	 mov	 rbx, rcx
  00013	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00016	74 26		 je	 SHORT $LN2@field
  00018	3d 24 01 00 00	 cmp	 eax, 292		; 00000124H
  0001d	74 0f		 je	 SHORT $LN5@field
$LN10@field:
; Line 715
  0001f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5f		 pop	 rdi
; Line 711
  00029	e9 00 00 00 00	 jmp	 listfield
$LN5@field:
; Line 700
  0002e	e8 00 00 00 00	 call	 luaX_lookahead
; Line 701
  00033	48 8b d7	 mov	 rdx, rdi
  00036	48 8b cb	 mov	 rcx, rbx
  00039	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  0003c	75 e1		 jne	 SHORT $LN10@field
$LN2@field:
; Line 715
  0003e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5f		 pop	 rdi
; Line 707
  00048	e9 00 00 00 00	 jmp	 recfield
field	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT listfield
_TEXT	SEGMENT
ls$ = 64
cc$ = 72
listfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 687
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 689
  0000a	45 33 c0	 xor	 r8d, r8d
  0000d	48 8b fa	 mov	 rdi, rdx
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 subexpr
; Line 690
  00018	8b 47 24	 mov	 eax, DWORD PTR [rdi+36]
  0001b	48 8b 5b 30	 mov	 rbx, QWORD PTR [rbx+48]
  0001f	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00024	7e 1d		 jle	 SHORT $LN57@listfield
  00026	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0002a	48 8b 78 38	 mov	 rdi, QWORD PTR [rax+56]
  0002e	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00031	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00035	45 85 c0	 test	 r8d, r8d
  00038	75 1c		 jne	 SHORT $LN67@listfield
  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@FCKLILMC@main?5function?$AA@
  00041	eb 22		 jmp	 SHORT $LN63@listfield
$LN57@listfield:
; Line 693
  00043	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00048	ff c0		 inc	 eax
  0004a	ff 47 28	 inc	 DWORD PTR [rdi+40]
  0004d	89 47 24	 mov	 DWORD PTR [rdi+36], eax
  00050	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
$LN67@listfield:
; Line 690
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
  0005d	48 8b cf	 mov	 rcx, rdi
  00060	e8 00 00 00 00	 call	 luaO_pushfstring
$LN63@listfield:
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
  00073	41 b9 ff ff ff
	7f		 mov	 r9d, 2147483647		; 7fffffffH
  00079	48 8b cf	 mov	 rcx, rdi
  0007c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00081	e8 00 00 00 00	 call	 luaO_pushfstring
  00086	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0008a	48 8b d0	 mov	 rdx, rax
  0008d	e8 00 00 00 00	 call	 luaX_syntaxerror
  00092	cc		 int	 3
$LN66@listfield:
listfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lastlistfield
_TEXT	SEGMENT
fs$ = 48
cc$ = 56
lastlistfield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 672
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 673
  0000a	83 7a 28 00	 cmp	 DWORD PTR [rdx+40], 0
  0000e	48 8b da	 mov	 rbx, rdx
  00011	48 8b f9	 mov	 rdi, rcx
  00014	74 5d		 je	 SHORT $LN2@lastlistfi
; Line 674
  00016	8b 0a		 mov	 ecx, DWORD PTR [rdx]
  00018	8d 41 f3	 lea	 eax, DWORD PTR [rcx-13]
  0001b	83 f8 01	 cmp	 eax, 1
  0001e	76 2d		 jbe	 SHORT $LN3@lastlistfi
; Line 680
  00020	85 c9		 test	 ecx, ecx
  00022	74 08		 je	 SHORT $LN1@lastlistfi
; Line 681
  00024	48 8b cf	 mov	 rcx, rdi
  00027	e8 00 00 00 00	 call	 luaK_exp2nextreg
$LN1@lastlistfi:
; Line 682
  0002c	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00030	44 8b 4b 28	 mov	 r9d, DWORD PTR [rbx+40]
  00034	44 8b 43 24	 mov	 r8d, DWORD PTR [rbx+36]
  00038	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  0003b	48 8b cf	 mov	 rcx, rdi
; Line 684
  0003e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5f		 pop	 rdi
; Line 682
  00048	e9 00 00 00 00	 jmp	 luaK_setlist
$LN3@lastlistfi:
; Line 675
  0004d	41 83 c8 ff	 or	 r8d, -1
  00051	48 8b cf	 mov	 rcx, rdi
  00054	e8 00 00 00 00	 call	 luaK_setreturns
; Line 676
  00059	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  0005d	44 8b 43 24	 mov	 r8d, DWORD PTR [rbx+36]
  00061	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  00064	41 83 c9 ff	 or	 r9d, -1
  00068	48 8b cf	 mov	 rcx, rdi
  0006b	e8 00 00 00 00	 call	 luaK_setlist
; Line 677
  00070	ff 4b 24	 dec	 DWORD PTR [rbx+36]
$LN2@lastlistfi:
; Line 684
  00073	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
lastlistfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT closelistfield
_TEXT	SEGMENT
fs$ = 48
cc$ = 56
closelistfield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 661
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 662
  0000a	83 3a 00	 cmp	 DWORD PTR [rdx], 0
  0000d	48 8b da	 mov	 rbx, rdx
  00010	48 8b f9	 mov	 rdi, rcx
  00013	74 31		 je	 SHORT $LN1@closelistf
; Line 663
  00015	e8 00 00 00 00	 call	 luaK_exp2nextreg
; Line 665
  0001a	83 7b 28 32	 cmp	 DWORD PTR [rbx+40], 50	; 00000032H
  0001e	c7 03 00 00 00
	00		 mov	 DWORD PTR [rbx], 0
  00024	75 20		 jne	 SHORT $LN1@closelistf
; Line 666
  00026	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  0002a	44 8b 43 24	 mov	 r8d, DWORD PTR [rbx+36]
  0002e	41 b9 32 00 00
	00		 mov	 r9d, 50			; 00000032H
  00034	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  00037	48 8b cf	 mov	 rcx, rdi
  0003a	e8 00 00 00 00	 call	 luaK_setlist
; Line 667
  0003f	c7 43 28 00 00
	00 00		 mov	 DWORD PTR [rbx+40], 0
$LN1@closelistf:
; Line 669
  00046	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
closelistfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT recfield
_TEXT	SEGMENT
key$ = 48
val$ = 72
__$ArrayPad$ = 96
ls$ = 144
cc$ = 152
recfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 640
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 56		 push	 r14
  0000e	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 646
  00021	81 79 10 24 01
	00 00		 cmp	 DWORD PTR [rcx+16], 292	; 00000124H
  00028	48 8b 71 30	 mov	 rsi, QWORD PTR [rcx+48]
  0002c	48 8b ea	 mov	 rbp, rdx
  0002f	44 0f b6 76 3c	 movzx	 r14d, BYTE PTR [rsi+60]
  00034	48 8b f9	 mov	 rdi, rcx
  00037	75 59		 jne	 SHORT $LN2@recfield
; Line 647
  00039	81 7a 20 ff ff
	ff 7f		 cmp	 DWORD PTR [rdx+32], 2147483647 ; 7fffffffH
  00040	7e 24		 jle	 SHORT $LN5@recfield
  00042	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00046	48 8b 58 38	 mov	 rbx, QWORD PTR [rax+56]
  0004a	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  0004d	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00051	45 85 c0	 test	 r8d, r8d
  00054	0f 85 f0 00 00
	00		 jne	 $LN163@recfield
  0005a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@FCKLILMC@main?5function?$AA@
  00061	e9 f3 00 00 00	 jmp	 $LN11@recfield
$LN5@recfield:
; Line 648
  00066	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
  0006a	e8 00 00 00 00	 call	 luaX_next
  0006f	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00073	48 8b d3	 mov	 rdx, rbx
  00076	e8 00 00 00 00	 call	 luaK_stringK
  0007b	48 c7 44 24 40
	ff ff ff ff	 mov	 QWORD PTR key$[rsp+16], -1
  00084	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR key$[rsp], 4
  0008c	89 44 24 38	 mov	 DWORD PTR key$[rsp+8], eax
; Line 650
  00090	eb 35		 jmp	 SHORT $LN34@recfield
$LN2@recfield:
; Line 651
  00092	e8 00 00 00 00	 call	 luaX_next
  00097	48 8d 54 24 30	 lea	 rdx, QWORD PTR key$[rsp]
  0009c	45 33 c0	 xor	 r8d, r8d
  0009f	48 8b cf	 mov	 rcx, rdi
  000a2	e8 00 00 00 00	 call	 subexpr
  000a7	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  000ab	48 8d 54 24 30	 lea	 rdx, QWORD PTR key$[rsp]
  000b0	e8 00 00 00 00	 call	 luaK_exp2val
  000b5	83 7f 10 5d	 cmp	 DWORD PTR [rdi+16], 93	; 0000005dH
  000b9	48 8b cf	 mov	 rcx, rdi
  000bc	0f 85 c5 00 00
	00		 jne	 $LN164@recfield
  000c2	e8 00 00 00 00	 call	 luaX_next
$LN34@recfield:
; Line 652
  000c7	ff 45 20	 inc	 DWORD PTR [rbp+32]
; Line 653
  000ca	83 7f 10 3d	 cmp	 DWORD PTR [rdi+16], 61	; 0000003dH
  000ce	48 8b cf	 mov	 rcx, rdi
  000d1	0f 85 d9 00 00
	00		 jne	 $LN165@recfield
  000d7	e8 00 00 00 00	 call	 luaX_next
; Line 654
  000dc	48 8d 54 24 30	 lea	 rdx, QWORD PTR key$[rsp]
  000e1	48 8b ce	 mov	 rcx, rsi
  000e4	e8 00 00 00 00	 call	 luaK_exp2RK
; Line 655
  000e9	48 8d 54 24 48	 lea	 rdx, QWORD PTR val$[rsp]
  000ee	45 33 c0	 xor	 r8d, r8d
  000f1	48 8b cf	 mov	 rcx, rdi
  000f4	8b d8		 mov	 ebx, eax
  000f6	e8 00 00 00 00	 call	 subexpr
; Line 656
  000fb	48 8d 54 24 48	 lea	 rdx, QWORD PTR val$[rsp]
  00100	48 8b ce	 mov	 rcx, rsi
  00103	e8 00 00 00 00	 call	 luaK_exp2RK
  00108	48 8b 4d 18	 mov	 rcx, QWORD PTR [rbp+24]
  0010c	44 8b cb	 mov	 r9d, ebx
  0010f	44 8b 41 08	 mov	 r8d, DWORD PTR [rcx+8]
  00113	ba 0a 00 00 00	 mov	 edx, 10
  00118	48 8b ce	 mov	 rcx, rsi
  0011b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0011f	e8 00 00 00 00	 call	 luaK_codeABC
; Line 657
  00124	44 88 76 3c	 mov	 BYTE PTR [rsi+60], r14b
; Line 658
  00128	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0012d	48 33 cc	 xor	 rcx, rsp
  00130	e8 00 00 00 00	 call	 __security_check_cookie
  00135	4c 8d 5c 24 70	 lea	 r11, QWORD PTR [rsp+112]
  0013a	49 8b 5b 30	 mov	 rbx, QWORD PTR [r11+48]
  0013e	49 8b 6b 38	 mov	 rbp, QWORD PTR [r11+56]
  00142	49 8b e3	 mov	 rsp, r11
  00145	41 5e		 pop	 r14
  00147	5f		 pop	 rdi
  00148	5e		 pop	 rsi
  00149	c3		 ret	 0
$LN163@recfield:
; Line 647
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
  00151	48 8b cb	 mov	 rcx, rbx
  00154	e8 00 00 00 00	 call	 luaO_pushfstring
$LN11@recfield:
  00159	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@IAOKECIM@items?5in?5a?5constructor?$AA@
  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
  00167	41 b9 ff ff ff
	7f		 mov	 r9d, 2147483647		; 7fffffffH
  0016d	48 8b cb	 mov	 rcx, rbx
  00170	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00175	e8 00 00 00 00	 call	 luaO_pushfstring
  0017a	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  0017e	48 8b d0	 mov	 rdx, rax
  00181	e8 00 00 00 00	 call	 luaX_syntaxerror
  00186	cc		 int	 3
$LN164@recfield:
; Line 651
  00187	ba 5d 00 00 00	 mov	 edx, 93			; 0000005dH
  0018c	e8 00 00 00 00	 call	 luaX_token2str
  00191	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  0019c	4c 8b c0	 mov	 r8, rax
  0019f	e8 00 00 00 00	 call	 luaO_pushfstring
  001a4	48 8b cf	 mov	 rcx, rdi
  001a7	48 8b d0	 mov	 rdx, rax
  001aa	e8 00 00 00 00	 call	 luaX_syntaxerror
  001af	cc		 int	 3
$LN165@recfield:
; Line 653
  001b0	ba 3d 00 00 00	 mov	 edx, 61			; 0000003dH
  001b5	e8 00 00 00 00	 call	 luaX_token2str
  001ba	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  001be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  001c5	4c 8b c0	 mov	 r8, rax
  001c8	e8 00 00 00 00	 call	 luaO_pushfstring
  001cd	48 8b cf	 mov	 rcx, rdi
  001d0	48 8b d0	 mov	 rdx, rax
  001d3	e8 00 00 00 00	 call	 luaX_syntaxerror
  001d8	cc		 int	 3
$LN162@recfield:
recfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT yindex
_TEXT	SEGMENT
ls$ = 48
v$ = 56
yindex	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 615
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx
; Line 617
  00010	e8 00 00 00 00	 call	 luaX_next
; Line 618
  00015	45 33 c0	 xor	 r8d, r8d
  00018	48 8b d3	 mov	 rdx, rbx
  0001b	48 8b cf	 mov	 rcx, rdi
  0001e	e8 00 00 00 00	 call	 subexpr
; Line 619
  00023	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00027	48 8b d3	 mov	 rdx, rbx
  0002a	e8 00 00 00 00	 call	 luaK_exp2val
; Line 620
  0002f	83 7f 10 5d	 cmp	 DWORD PTR [rdi+16], 93	; 0000005dH
  00033	48 8b cf	 mov	 rcx, rdi
  00036	75 0f		 jne	 SHORT $LN63@yindex
; Line 621
  00038	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
; Line 620
  00042	e9 00 00 00 00	 jmp	 luaX_next
$LN63@yindex:
  00047	ba 5d 00 00 00	 mov	 edx, 93			; 0000005dH
  0004c	e8 00 00 00 00	 call	 luaX_token2str
  00051	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  0005c	4c 8b c0	 mov	 r8, rax
  0005f	e8 00 00 00 00	 call	 luaO_pushfstring
  00064	48 8b cf	 mov	 rcx, rdi
  00067	48 8b d0	 mov	 rdx, rax
  0006a	e8 00 00 00 00	 call	 luaX_syntaxerror
  0006f	cc		 int	 3
$LN62@yindex:
yindex	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT fieldsel
_TEXT	SEGMENT
key$ = 32
__$ArrayPad$ = 56
ls$ = 96
v$ = 104
fieldsel PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 604
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00008	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000f	48 33 c4	 xor	 rax, rsp
  00012	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 606
  00017	48 8b 69 30	 mov	 rbp, QWORD PTR [rcx+48]
  0001b	48 8b f9	 mov	 rdi, rcx
  0001e	48 8b f2	 mov	 rsi, rdx
; Line 608
  00021	48 8b cd	 mov	 rcx, rbp
  00024	e8 00 00 00 00	 call	 luaK_exp2anyregup
; Line 609
  00029	48 8b cf	 mov	 rcx, rdi
  0002c	e8 00 00 00 00	 call	 luaX_next
; Line 610
  00031	81 7f 10 24 01
	00 00		 cmp	 DWORD PTR [rdi+16], 292	; 00000124H
  00038	48 8b cf	 mov	 rcx, rdi
  0003b	75 59		 jne	 SHORT $LN21@fieldsel
  0003d	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  00042	48 8b 5f 18	 mov	 rbx, QWORD PTR [rdi+24]
  00046	e8 00 00 00 00	 call	 luaX_next
  0004b	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  0004f	48 8b d3	 mov	 rdx, rbx
  00052	e8 00 00 00 00	 call	 luaK_stringK
; Line 611
  00057	4c 8d 44 24 20	 lea	 r8, QWORD PTR key$[rsp]
  0005c	48 8b d6	 mov	 rdx, rsi
  0005f	48 8b cd	 mov	 rcx, rbp
  00062	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR key$[rsp+16], -1
  0006b	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR key$[rsp], 4
  00073	89 44 24 28	 mov	 DWORD PTR key$[rsp+8], eax
  00077	e8 00 00 00 00	 call	 luaK_indexed
  0007c	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
; Line 612
  00081	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00086	48 33 cc	 xor	 rcx, rsp
  00089	e8 00 00 00 00	 call	 __security_check_cookie
  0008e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00092	5f		 pop	 rdi
  00093	5e		 pop	 rsi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
$LN21@fieldsel:
; Line 610
  00096	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  0009b	e8 00 00 00 00	 call	 luaX_token2str
  000a0	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  000ab	4c 8b c0	 mov	 r8, rax
  000ae	e8 00 00 00 00	 call	 luaO_pushfstring
  000b3	48 8b cf	 mov	 rcx, rdi
  000b6	48 8b d0	 mov	 rdx, rax
  000b9	e8 00 00 00 00	 call	 luaX_syntaxerror
  000be	cc		 int	 3
$LN20@fieldsel:
fieldsel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT statlist
_TEXT	SEGMENT
ls$ = 48
statlist PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 592
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 594
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 block_follow
  00013	85 c0		 test	 eax, eax
  00015	75 3b		 jne	 SHORT $LN2@statlist
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL3@statlist:
; Line 595
  00020	81 7b 10 12 01
	00 00		 cmp	 DWORD PTR [rbx+16], 274	; 00000112H
; Line 599
  00027	48 8b cb	 mov	 rcx, rbx
  0002a	74 1c		 je	 SHORT $LN7@statlist
  0002c	e8 00 00 00 00	 call	 statement
  00031	ba 01 00 00 00	 mov	 edx, 1
  00036	48 8b cb	 mov	 rcx, rbx
  00039	e8 00 00 00 00	 call	 block_follow
  0003e	85 c0		 test	 eax, eax
  00040	74 de		 je	 SHORT $LL3@statlist
; Line 601
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5b		 pop	 rbx
  00047	c3		 ret	 0
$LN7@statlist:
  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5b		 pop	 rbx
; Line 596
  0004d	e9 00 00 00 00	 jmp	 statement
$LN2@statlist:
; Line 601
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5b		 pop	 rbx
  00057	c3		 ret	 0
statlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT block_follow
_TEXT	SEGMENT
ls$ = 8
withuntil$ = 16
block_follow PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 582
  00000	8b 41 10	 mov	 eax, DWORD PTR [rcx+16]
  00003	3d 04 01 00 00	 cmp	 eax, 260		; 00000104H
  00008	7c 15		 jl	 SHORT $LN1@block_foll
  0000a	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0000f	7e 14		 jle	 SHORT $LN3@block_foll
  00011	3d 15 01 00 00	 cmp	 eax, 277		; 00000115H
  00016	74 0a		 je	 SHORT $LN2@block_foll
  00018	3d 21 01 00 00	 cmp	 eax, 289		; 00000121H
  0001d	74 06		 je	 SHORT $LN3@block_foll
$LN1@block_foll:
; Line 587
  0001f	33 c0		 xor	 eax, eax
; Line 589
  00021	c3		 ret	 0
$LN2@block_foll:
; Line 586
  00022	8b c2		 mov	 eax, edx
; Line 589
  00024	c3		 ret	 0
$LN3@block_foll:
; Line 585
  00025	b8 01 00 00 00	 mov	 eax, 1
; Line 589
  0002a	c3		 ret	 0
block_follow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT close_func
_TEXT	SEGMENT
ls$ = 48
close_func PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 546
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 548
  00014	48 8b 79 30	 mov	 rdi, QWORD PTR [rcx+48]
  00018	48 8b 69 38	 mov	 rbp, QWORD PTR [rcx+56]
  0001c	48 8b f1	 mov	 rsi, rcx
; Line 549
  0001f	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
; Line 550
  00022	45 33 c0	 xor	 r8d, r8d
  00025	33 d2		 xor	 edx, edx
  00027	48 8b cf	 mov	 rcx, rdi
  0002a	e8 00 00 00 00	 call	 luaK_ret
; Line 551
  0002f	48 8b cf	 mov	 rcx, rdi
  00032	e8 00 00 00 00	 call	 leaveblock
; Line 552
  00037	4c 63 4f 20	 movsxd	 r9, DWORD PTR [rdi+32]
  0003b	4c 63 43 18	 movsxd	 r8, DWORD PTR [rbx+24]
  0003f	48 8b 53 38	 mov	 rdx, QWORD PTR [rbx+56]
  00043	49 c1 e1 02	 shl	 r9, 2
  00047	49 c1 e0 02	 shl	 r8, 2
  0004b	48 8b cd	 mov	 rcx, rbp
  0004e	e8 00 00 00 00	 call	 luaM_realloc_
; Line 554
  00053	4c 63 43 1c	 movsxd	 r8, DWORD PTR [rbx+28]
  00057	48 8b 53 48	 mov	 rdx, QWORD PTR [rbx+72]
  0005b	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  0005f	8b 47 20	 mov	 eax, DWORD PTR [rdi+32]
  00062	49 c1 e0 02	 shl	 r8, 2
  00066	89 43 18	 mov	 DWORD PTR [rbx+24], eax
  00069	4c 63 4f 20	 movsxd	 r9, DWORD PTR [rdi+32]
  0006d	48 8b cd	 mov	 rcx, rbp
  00070	49 c1 e1 02	 shl	 r9, 2
  00074	e8 00 00 00 00	 call	 luaM_realloc_
; Line 556
  00079	4c 63 43 14	 movsxd	 r8, DWORD PTR [rbx+20]
  0007d	48 8b 53 30	 mov	 rdx, QWORD PTR [rbx+48]
  00081	48 89 43 48	 mov	 QWORD PTR [rbx+72], rax
  00085	8b 47 20	 mov	 eax, DWORD PTR [rdi+32]
  00088	49 c1 e0 04	 shl	 r8, 4
  0008c	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
  0008f	4c 63 4f 2c	 movsxd	 r9, DWORD PTR [rdi+44]
  00093	48 8b cd	 mov	 rcx, rbp
  00096	49 c1 e1 04	 shl	 r9, 4
  0009a	e8 00 00 00 00	 call	 luaM_realloc_
; Line 558
  0009f	4c 63 43 20	 movsxd	 r8, DWORD PTR [rbx+32]
  000a3	48 8b 53 40	 mov	 rdx, QWORD PTR [rbx+64]
  000a7	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  000ab	8b 47 2c	 mov	 eax, DWORD PTR [rdi+44]
  000ae	49 c1 e0 03	 shl	 r8, 3
  000b2	89 43 14	 mov	 DWORD PTR [rbx+20], eax
  000b5	4c 63 4f 30	 movsxd	 r9, DWORD PTR [rdi+48]
  000b9	48 8b cd	 mov	 rcx, rbp
  000bc	49 c1 e1 03	 shl	 r9, 3
  000c0	e8 00 00 00 00	 call	 luaM_realloc_
; Line 560
  000c5	4c 63 43 24	 movsxd	 r8, DWORD PTR [rbx+36]
  000c9	48 8b 53 50	 mov	 rdx, QWORD PTR [rbx+80]
  000cd	48 89 43 40	 mov	 QWORD PTR [rbx+64], rax
  000d1	8b 47 30	 mov	 eax, DWORD PTR [rdi+48]
  000d4	49 c1 e0 04	 shl	 r8, 4
  000d8	89 43 20	 mov	 DWORD PTR [rbx+32], eax
  000db	4c 0f bf 4f 38	 movsx	 r9, WORD PTR [rdi+56]
  000e0	48 8b cd	 mov	 rcx, rbp
  000e3	49 c1 e1 04	 shl	 r9, 4
  000e7	e8 00 00 00 00	 call	 luaM_realloc_
; Line 562
  000ec	4c 63 43 10	 movsxd	 r8, DWORD PTR [rbx+16]
  000f0	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000f4	48 89 43 50	 mov	 QWORD PTR [rbx+80], rax
  000f8	0f bf 47 38	 movsx	 eax, WORD PTR [rdi+56]
  000fc	49 c1 e0 04	 shl	 r8, 4
  00100	89 43 24	 mov	 DWORD PTR [rbx+36], eax
  00103	44 0f b6 4f 3b	 movzx	 r9d, BYTE PTR [rdi+59]
  00108	48 8b cd	 mov	 rcx, rbp
  0010b	49 c1 e1 04	 shl	 r9, 4
  0010f	e8 00 00 00 00	 call	 luaM_realloc_
  00114	48 89 43 58	 mov	 QWORD PTR [rbx+88], rax
; Line 563
  00118	0f b6 47 3b	 movzx	 eax, BYTE PTR [rdi+59]
  0011c	89 43 10	 mov	 DWORD PTR [rbx+16], eax
; Line 565
  0011f	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  00123	48 89 46 30	 mov	 QWORD PTR [rsi+48], rax
; Line 566
  00127	48 8b 45 18	 mov	 rax, QWORD PTR [rbp+24]
  0012b	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00130	7e 08		 jle	 SHORT $LN1@close_func
  00132	48 8b cd	 mov	 rcx, rbp
  00135	e8 00 00 00 00	 call	 luaC_step
$LN1@close_func:
; Line 567
  0013a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0013f	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00144	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00149	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0014d	5f		 pop	 rdi
  0014e	c3		 ret	 0
close_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT open_func
_TEXT	SEGMENT
ls$ = 8
fs$ = 16
bl$ = 24
open_func PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 525
  00000	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
; Line 526
  00004	48 89 4a 10	 mov	 QWORD PTR [rdx+16], rcx
; Line 528
  00008	45 33 d2	 xor	 r10d, r10d
  0000b	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax
  0000f	48 89 51 30	 mov	 QWORD PTR [rcx+48], rdx
; Line 536
  00013	44 88 52 3a	 mov	 BYTE PTR [rdx+58], r10b
  00017	4c 89 52 20	 mov	 QWORD PTR [rdx+32], r10
  0001b	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [rdx+40], -1
  00022	66 44 89 52 3b	 mov	 WORD PTR [rdx+59], r10w
  00027	4c 89 52 2c	 mov	 QWORD PTR [rdx+44], r10
  0002b	66 44 89 52 38	 mov	 WORD PTR [rdx+56], r10w
; Line 537
  00030	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00034	4c 8b c9	 mov	 r9, rcx
  00037	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
; Line 538
  0003a	4c 89 52 18	 mov	 QWORD PTR [rdx+24], r10
  0003e	89 4a 34	 mov	 DWORD PTR [rdx+52], ecx
; Line 540
  00041	49 8b 41 60	 mov	 rax, QWORD PTR [r9+96]
  00045	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00048	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
; Line 541
  0004c	c6 41 0c 02	 mov	 BYTE PTR [rcx+12], 2
; Line 542
  00050	45 88 50 12	 mov	 BYTE PTR [r8+18], r10b
  00054	0f b6 42 3a	 movzx	 eax, BYTE PTR [rdx+58]
  00058	41 88 40 10	 mov	 BYTE PTR [r8+16], al
  0005c	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  00060	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00064	8b 41 28	 mov	 eax, DWORD PTR [rcx+40]
  00067	41 89 40 08	 mov	 DWORD PTR [r8+8], eax
  0006b	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  0006f	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00073	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  00076	45 88 50 11	 mov	 BYTE PTR [r8+17], r10b
  0007a	41 89 40 0c	 mov	 DWORD PTR [r8+12], eax
  0007e	48 8b 42 18	 mov	 rax, QWORD PTR [rdx+24]
  00082	49 89 00	 mov	 QWORD PTR [r8], rax
  00085	4c 89 42 18	 mov	 QWORD PTR [rdx+24], r8
; Line 543
  00089	c3		 ret	 0
open_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT codeclosure
_TEXT	SEGMENT
ls$ = 48
v$ = 56
codeclosure PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 516
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 517
  0000a	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
; Line 518
  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b 58 08	 mov	 rbx, QWORD PTR [rax+8]
  00018	41 8d 50 2c	 lea	 edx, QWORD PTR [r8+44]
  0001c	44 8b 4b 30	 mov	 r9d, DWORD PTR [rbx+48]
  00020	48 8b cb	 mov	 rcx, rbx
  00023	41 ff c9	 dec	 r9d
  00026	e8 00 00 00 00	 call	 luaK_codeABx
; Line 519
  0002b	48 8b d7	 mov	 rdx, rdi
  0002e	48 8b cb	 mov	 rcx, rbx
  00031	48 c7 47 10 ff
	ff ff ff	 mov	 QWORD PTR [rdi+16], -1
  00039	c7 07 0c 00 00
	00		 mov	 DWORD PTR [rdi], 12
  0003f	89 47 08	 mov	 DWORD PTR [rdi+8], eax
; Line 520
  00042	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
; Line 519
  0004c	e9 00 00 00 00	 jmp	 luaK_exp2nextreg
codeclosure ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT addprototype
_TEXT	SEGMENT
ls$ = 64
addprototype PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 494
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 497
  0001a	4c 8b 71 30	 mov	 r14, QWORD PTR [rcx+48]
  0001e	48 8b 69 38	 mov	 rbp, QWORD PTR [rcx+56]
; Line 498
  00022	49 8b 3e	 mov	 rdi, QWORD PTR [r14]
; Line 499
  00025	41 8b 46 30	 mov	 eax, DWORD PTR [r14+48]
  00029	48 63 5f 20	 movsxd	 rbx, DWORD PTR [rdi+32]
  0002d	3b c3		 cmp	 eax, ebx
  0002f	7c 63		 jl	 SHORT $LN1@addprototy
; Line 501
  00031	ff c0		 inc	 eax
  00033	3b c3		 cmp	 eax, ebx
  00035	7e 2e		 jle	 SHORT $LN9@addprototy
  00037	48 8b 57 40	 mov	 rdx, QWORD PTR [rdi+64]
  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09CEAIPAHE@functions?$AA@
  00042	4c 8d 47 20	 lea	 r8, QWORD PTR [rdi+32]
  00046	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0004b	41 b9 08 00 00
	00		 mov	 r9d, 8
  00051	48 8b cd	 mov	 rcx, rbp
  00054	c7 44 24 20 ff
	ff 03 00	 mov	 DWORD PTR [rsp+32], 262143 ; 0003ffffH
  0005c	e8 00 00 00 00	 call	 luaM_growaux_
  00061	48 89 47 40	 mov	 QWORD PTR [rdi+64], rax
$LN9@addprototy:
; Line 502
  00065	3b 5f 20	 cmp	 ebx, DWORD PTR [rdi+32]
  00068	7d 2a		 jge	 SHORT $LN1@addprototy
; Line 500
  0006a	48 8d 0c dd 00
	00 00 00	 lea	 rcx, QWORD PTR [rbx*8]
  00072	33 d2		 xor	 edx, edx
  00074	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL2@addprototy:
; Line 502
  00080	48 8b 47 40	 mov	 rax, QWORD PTR [rdi+64]
  00084	ff c3		 inc	 ebx
  00086	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  0008a	48 89 54 01 f8	 mov	 QWORD PTR [rcx+rax-8], rdx
  0008f	3b 5f 20	 cmp	 ebx, DWORD PTR [rdi+32]
  00092	7c ec		 jl	 SHORT $LL2@addprototy
$LN1@addprototy:
; Line 504
  00094	48 8b cd	 mov	 rcx, rbp
  00097	e8 00 00 00 00	 call	 luaF_newproto
  0009c	4d 63 4e 30	 movsxd	 r9, DWORD PTR [r14+48]
  000a0	4c 8b 47 40	 mov	 r8, QWORD PTR [rdi+64]
  000a4	4b 89 04 c8	 mov	 QWORD PTR [r8+r9*8], rax
  000a8	41 ff 46 30	 inc	 DWORD PTR [r14+48]
; Line 505
  000ac	f6 47 09 04	 test	 BYTE PTR [rdi+9], 4
  000b0	48 8b d8	 mov	 rbx, rax
  000b3	74 17		 je	 SHORT $LN7@addprototy
  000b5	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  000b9	74 11		 je	 SHORT $LN7@addprototy
  000bb	4c 8b c0	 mov	 r8, rax
  000be	48 8b d7	 mov	 rdx, rdi
  000c1	48 8b cd	 mov	 rcx, rbp
  000c4	e8 00 00 00 00	 call	 luaC_barrier_
; Line 506
  000c9	48 8b c3	 mov	 rax, rbx
$LN7@addprototy:
; Line 507
  000cc	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d1	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000d6	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000db	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  000e0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e4	41 5e		 pop	 r14
  000e6	c3		 ret	 0
addprototype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT leaveblock
_TEXT	SEGMENT
fs$ = 64
leaveblock PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 468
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 469
  0000f	48 8b 71 18	 mov	 rsi, QWORD PTR [rcx+24]
; Line 470
  00013	48 8b 69 10	 mov	 rbp, QWORD PTR [rcx+16]
  00017	48 8b d9	 mov	 rbx, rcx
; Line 471
  0001a	48 83 3e 00	 cmp	 QWORD PTR [rsi], 0
  0001e	74 30		 je	 SHORT $LN5@leaveblock
  00020	80 7e 11 00	 cmp	 BYTE PTR [rsi+17], 0
  00024	74 2a		 je	 SHORT $LN5@leaveblock
; Line 473
  00026	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0002b	e8 00 00 00 00	 call	 luaK_jump
; Line 474
  00030	44 0f b6 46 10	 movzx	 r8d, BYTE PTR [rsi+16]
  00035	8b d0		 mov	 edx, eax
  00037	48 8b cb	 mov	 rcx, rbx
  0003a	8b f8		 mov	 edi, eax
  0003c	e8 00 00 00 00	 call	 luaK_patchclose
; Line 475
  00041	8b d7		 mov	 edx, edi
  00043	48 8b cb	 mov	 rcx, rbx
  00046	e8 00 00 00 00	 call	 luaK_patchtohere
  0004b	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN5@leaveblock:
; Line 477
  00050	80 7e 12 00	 cmp	 BYTE PTR [rsi+18], 0
  00054	74 4c		 je	 SHORT $LN8@leaveblock
; Line 478
  00056	48 8b 4d 38	 mov	 rcx, QWORD PTR [rbp+56]
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05ELPHFHOI@break?$AA@
  00061	e8 00 00 00 00	 call	 luaS_new
  00066	48 8b 4d 30	 mov	 rcx, QWORD PTR [rbp+48]
  0006a	48 8b 55 58	 mov	 rdx, QWORD PTR [rbp+88]
  0006e	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00071	48 83 c2 20	 add	 rdx, 32			; 00000020H
  00075	45 33 c9	 xor	 r9d, r9d
  00078	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0007c	48 8b cd	 mov	 rcx, rbp
  0007f	4c 8b c0	 mov	 r8, rax
  00082	e8 00 00 00 00	 call	 newlabelentry
  00087	48 63 c8	 movsxd	 rcx, eax
  0008a	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  0008e	48 8d 14 49	 lea	 rdx, QWORD PTR [rcx+rcx*2]
  00092	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00096	48 8d 14 d1	 lea	 rdx, QWORD PTR [rcx+rdx*8]
  0009a	48 8b cd	 mov	 rcx, rbp
  0009d	e8 00 00 00 00	 call	 findgotos
$LN8@leaveblock:
; Line 479
  000a2	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000a5	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
; Line 480
  000a9	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000ad	44 0f b6 46 10	 movzx	 r8d, BYTE PTR [rsi+16]
  000b2	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b6	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  000ba	41 8b c8	 mov	 ecx, r8d
  000bd	2b c8		 sub	 ecx, eax
  000bf	01 4a 08	 add	 DWORD PTR [rdx+8], ecx
  000c2	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  000c6	41 3b c0	 cmp	 eax, r8d
  000c9	7e 3d		 jle	 SHORT $LN10@leaveblock
  000cb	0f 1f 44 00 00	 npad	 5
$LL11@leaveblock:
  000d0	fe 4b 3a	 dec	 BYTE PTR [rbx+58]
  000d3	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  000d7	48 63 53 34	 movsxd	 rdx, DWORD PTR [rbx+52]
  000db	48 03 d0	 add	 rdx, rax
  000de	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000e2	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000e6	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000e9	48 0f bf 14 50	 movsx	 rdx, WORD PTR [rax+rdx*2]
  000ee	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000f1	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  000f5	8b 43 20	 mov	 eax, DWORD PTR [rbx+32]
  000f8	48 03 d2	 add	 rdx, rdx
  000fb	89 44 d1 0c	 mov	 DWORD PTR [rcx+rdx*8+12], eax
  000ff	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  00103	41 3b c0	 cmp	 eax, r8d
  00106	7f c8		 jg	 SHORT $LL11@leaveblock
$LN10@leaveblock:
; Line 482
  00108	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  0010c	88 43 3c	 mov	 BYTE PTR [rbx+60], al
; Line 483
  0010f	48 8b 4d 58	 mov	 rcx, QWORD PTR [rbp+88]
  00113	8b 46 08	 mov	 eax, DWORD PTR [rsi+8]
  00116	89 41 28	 mov	 DWORD PTR [rcx+40], eax
; Line 484
  00119	48 83 3e 00	 cmp	 QWORD PTR [rsi], 0
  0011d	74 1b		 je	 SHORT $LN3@leaveblock
; Line 485
  0011f	48 8b d6	 mov	 rdx, rsi
  00122	48 8b cb	 mov	 rcx, rbx
  00125	e8 00 00 00 00	 call	 movegotosout
$LN1@leaveblock:
; Line 488
  0012a	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0012f	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00134	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00138	5e		 pop	 rsi
  00139	c3		 ret	 0
$LN3@leaveblock:
; Line 486
  0013a	48 8b 55 58	 mov	 rdx, QWORD PTR [rbp+88]
  0013e	48 63 46 0c	 movsxd	 rax, DWORD PTR [rsi+12]
  00142	3b 42 18	 cmp	 eax, DWORD PTR [rdx+24]
  00145	7d e3		 jge	 SHORT $LN1@leaveblock
; Line 487
  00147	48 8d 0c 40	 lea	 rcx, QWORD PTR [rax+rax*2]
  0014b	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  0014f	4c 8b 04 c8	 mov	 r8, QWORD PTR [rax+rcx*8]
  00153	41 80 78 08 04	 cmp	 BYTE PTR [r8+8], 4
  00158	75 0e		 jne	 SHORT $LN29@leaveblock
  0015a	41 80 78 0a 00	 cmp	 BYTE PTR [r8+10], 0
  0015f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@KOMACILM@?$DM?$CFs?$DO?5at?5line?5?$CFd?5not?5inside?5a?5loo@
  00166	77 07		 ja	 SHORT $LN19@leaveblock
$LN29@leaveblock:
  00168	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@OGINCFCB@no?5visible?5label?5?8?$CFs?8?5for?5?$DMgoto?$DO@
$LN19@leaveblock:
  0016f	44 8b 4c c8 0c	 mov	 r9d, DWORD PTR [rax+rcx*8+12]
  00174	48 8b 4d 38	 mov	 rcx, QWORD PTR [rbp+56]
  00178	49 83 c0 18	 add	 r8, 24
  0017c	e8 00 00 00 00	 call	 luaO_pushfstring
  00181	48 8b cd	 mov	 rcx, rbp
  00184	c7 45 10 00 00
	00 00		 mov	 DWORD PTR [rbp+16], 0
  0018b	48 8b d0	 mov	 rdx, rax
  0018e	e8 00 00 00 00	 call	 luaX_syntaxerror
  00193	cc		 int	 3
$LN28@leaveblock:
leaveblock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT undefgoto
_TEXT	SEGMENT
ls$ = 48
gt$ = 56
undefgoto PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 459
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 462
  00006	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00009	48 8b c2	 mov	 rax, rdx
  0000c	48 8b d9	 mov	 rbx, rcx
  0000f	41 80 78 08 04	 cmp	 BYTE PTR [r8+8], 4
  00014	75 0e		 jne	 SHORT $LN3@undefgoto
  00016	41 80 78 0a 00	 cmp	 BYTE PTR [r8+10], 0
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@KOMACILM@?$DM?$CFs?$DO?5at?5line?5?$CFd?5not?5inside?5a?5loo@
  00022	77 07		 ja	 SHORT $LN4@undefgoto
$LN3@undefgoto:
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@OGINCFCB@no?5visible?5label?5?8?$CFs?8?5for?5?$DMgoto?$DO@
$LN4@undefgoto:
; Line 463
  0002b	44 8b 48 0c	 mov	 r9d, DWORD PTR [rax+12]
  0002f	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00033	49 83 c0 18	 add	 r8, 24
  00037	e8 00 00 00 00	 call	 luaO_pushfstring
; Line 464
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [rbx+16], 0
  00046	48 8b d0	 mov	 rdx, rax
  00049	e8 00 00 00 00	 call	 luaX_syntaxerror
  0004e	cc		 int	 3
$LN8@undefgoto:
undefgoto ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT breaklabel
_TEXT	SEGMENT
ls$ = 64
breaklabel PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 449
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 450
  00009	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05ELPHFHOI@break?$AA@
  00014	e8 00 00 00 00	 call	 luaS_new
; Line 451
  00019	4c 8b 43 30	 mov	 r8, QWORD PTR [rbx+48]
  0001d	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00021	45 8b 40 20	 mov	 r8d, DWORD PTR [r8+32]
  00025	48 83 c2 20	 add	 rdx, 32			; 00000020H
  00029	45 33 c9	 xor	 r9d, r9d
  0002c	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  00031	4c 8b c0	 mov	 r8, rax
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 newlabelentry
; Line 452
  0003c	48 63 c8	 movsxd	 rcx, eax
  0003f	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00043	48 8d 14 49	 lea	 rdx, QWORD PTR [rcx+rcx*2]
  00047	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0004b	48 8d 14 d1	 lea	 rdx, QWORD PTR [rcx+rdx*8]
  0004f	48 8b cb	 mov	 rcx, rbx
; Line 453
  00052	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00056	5b		 pop	 rbx
; Line 452
  00057	e9 00 00 00 00	 jmp	 findgotos
breaklabel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT enterblock
_TEXT	SEGMENT
fs$ = 8
bl$ = 16
isloop$ = 24
enterblock PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 435
  00000	44 88 42 12	 mov	 BYTE PTR [rdx+18], r8b
; Line 436
  00004	0f b6 41 3a	 movzx	 eax, BYTE PTR [rcx+58]
  00008	88 42 10	 mov	 BYTE PTR [rdx+16], al
; Line 437
  0000b	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0000f	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00013	41 8b 40 28	 mov	 eax, DWORD PTR [r8+40]
  00017	89 42 08	 mov	 DWORD PTR [rdx+8], eax
; Line 438
  0001a	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0001e	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00022	41 8b 40 18	 mov	 eax, DWORD PTR [r8+24]
; Line 439
  00026	c6 42 11 00	 mov	 BYTE PTR [rdx+17], 0
  0002a	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
; Line 440
  0002d	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00031	48 89 02	 mov	 QWORD PTR [rdx], rax
; Line 441
  00034	48 89 51 18	 mov	 QWORD PTR [rcx+24], rdx
; Line 443
  00038	c3		 ret	 0
enterblock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT movegotosout
_TEXT	SEGMENT
fs$ = 80
bl$ = 88
movegotosout PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 416
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	41 54		 push	 r12
  00009	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 418
  0000d	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00011	48 63 7a 0c	 movsxd	 rdi, DWORD PTR [rdx+12]
  00015	48 8b ea	 mov	 rbp, rdx
  00018	4c 8b 60 58	 mov	 r12, QWORD PTR [rax+88]
; Line 421
  0001c	41 3b 7c 24 18	 cmp	 edi, DWORD PTR [r12+24]
  00021	0f 8d cd 00 00
	00		 jge	 $LN4@movegotoso
; Line 417
  00027	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
  0002c	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  00031	4c 89 6c 24 68	 mov	 QWORD PTR [rsp+104], r13
  00036	48 8d 34 7f	 lea	 rsi, QWORD PTR [rdi+rdi*2]
  0003a	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  0003f	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00044	48 c1 e6 03	 shl	 rsi, 3
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@movegotoso:
; Line 422
  00050	49 8b 44 24 10	 mov	 rax, QWORD PTR [r12+16]
  00055	48 8d 1c 06	 lea	 rbx, QWORD PTR [rsi+rax]
; Line 423
  00059	0f b6 45 10	 movzx	 eax, BYTE PTR [rbp+16]
  0005d	38 43 10	 cmp	 BYTE PTR [rbx+16], al
  00060	76 1e		 jbe	 SHORT $LN3@movegotoso
; Line 424
  00062	80 7d 11 00	 cmp	 BYTE PTR [rbp+17], 0
  00066	74 11		 je	 SHORT $LN2@movegotoso
; Line 425
  00068	8b 53 08	 mov	 edx, DWORD PTR [rbx+8]
  0006b	44 0f b6 c0	 movzx	 r8d, al
  0006f	e8 00 00 00 00	 call	 luaK_patchclose
  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fs$[rsp]
$LN2@movegotoso:
; Line 426
  00079	0f b6 45 10	 movzx	 eax, BYTE PTR [rbp+16]
  0007d	88 43 10	 mov	 BYTE PTR [rbx+16], al
$LN3@movegotoso:
; Line 428
  00080	4c 8b 71 10	 mov	 r14, QWORD PTR [rcx+16]
  00084	49 8b 4e 58	 mov	 rcx, QWORD PTR [r14+88]
  00088	49 8b 46 30	 mov	 rax, QWORD PTR [r14+48]
  0008c	4c 8b 68 18	 mov	 r13, QWORD PTR [rax+24]
  00090	4c 63 79 28	 movsxd	 r15, DWORD PTR [rcx+40]
  00094	4c 8b 51 10	 mov	 r10, QWORD PTR [rcx+16]
  00098	4d 63 5d 08	 movsxd	 r11, DWORD PTR [r13+8]
  0009c	45 3b df	 cmp	 r11d, r15d
  0009f	7d 24		 jge	 SHORT $LN11@movegotoso
  000a1	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000a5	4d 8b 0c 32	 mov	 r9, QWORD PTR [r10+rsi]
  000a9	4b 8d 04 5b	 lea	 rax, QWORD PTR [r11+r11*2]
  000ad	48 8d 1c c1	 lea	 rbx, QWORD PTR [rcx+rax*8]
  000b1	49 8b d3	 mov	 rdx, r11
$LL13@movegotoso:
  000b4	4c 39 0b	 cmp	 QWORD PTR [rbx], r9
  000b7	74 44		 je	 SHORT $LN18@movegotoso
  000b9	48 ff c2	 inc	 rdx
  000bc	48 83 c3 18	 add	 rbx, 24
  000c0	49 3b d7	 cmp	 rdx, r15
  000c3	7c ef		 jl	 SHORT $LL13@movegotoso
$LN11@movegotoso:
; Line 429
  000c5	ff c7		 inc	 edi
  000c7	48 83 c6 18	 add	 rsi, 24
$LN1@movegotoso:
; Line 421
  000cb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fs$[rsp]
  000d0	41 3b 7c 24 18	 cmp	 edi, DWORD PTR [r12+24]
  000d5	0f 8c 75 ff ff
	ff		 jl	 $LL5@movegotoso
  000db	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  000e0	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
  000e5	4c 8b 6c 24 68	 mov	 r13, QWORD PTR [rsp+104]
  000ea	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000ef	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
$LN4@movegotoso:
; Line 431
  000f4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f8	41 5c		 pop	 r12
  000fa	5f		 pop	 rdi
  000fb	5d		 pop	 rbp
  000fc	c3		 ret	 0
$LN18@movegotoso:
; Line 428
  000fd	0f b6 43 10	 movzx	 eax, BYTE PTR [rbx+16]
  00101	41 38 44 32 10	 cmp	 BYTE PTR [r10+rsi+16], al
  00106	76 1e		 jbe	 SHORT $LN9@movegotoso
  00108	41 80 7d 11 00	 cmp	 BYTE PTR [r13+17], 0
  0010d	75 05		 jne	 SHORT $LN8@movegotoso
  0010f	45 3b fb	 cmp	 r15d, r11d
  00112	7e 12		 jle	 SHORT $LN9@movegotoso
$LN8@movegotoso:
  00114	41 8b 54 32 08	 mov	 edx, DWORD PTR [r10+rsi+8]
  00119	49 8b 4e 30	 mov	 rcx, QWORD PTR [r14+48]
  0011d	44 0f b6 c0	 movzx	 r8d, al
  00121	e8 00 00 00 00	 call	 luaK_patchclose
$LN9@movegotoso:
  00126	4c 8b c3	 mov	 r8, rbx
  00129	8b d7		 mov	 edx, edi
  0012b	49 8b ce	 mov	 rcx, r14
  0012e	e8 00 00 00 00	 call	 closegoto
  00133	eb 96		 jmp	 SHORT $LN1@movegotoso
movegotosout ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT findgotos
_TEXT	SEGMENT
ls$ = 80
lb$ = 88
findgotos PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 398
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	56		 push	 rsi
  00006	41 56		 push	 r14
  00008	41 57		 push	 r15
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 400
  0000e	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
  00012	4c 8b 71 58	 mov	 r14, QWORD PTR [rcx+88]
  00016	4c 8b fa	 mov	 r15, rdx
  00019	4c 8b 40 18	 mov	 r8, QWORD PTR [rax+24]
  0001d	48 8b e9	 mov	 rbp, rcx
  00020	49 63 70 0c	 movsxd	 rsi, DWORD PTR [r8+12]
; Line 401
  00024	41 3b 76 18	 cmp	 esi, DWORD PTR [r14+24]
  00028	0f 8d a9 00 00
	00		 jge	 $LN27@findgotos
; Line 400
  0002e	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00033	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  00038	48 8d 3c 76	 lea	 rdi, QWORD PTR [rsi+rsi*2]
  0003c	48 c1 e7 03	 shl	 rdi, 3
$LL4@findgotos:
; Line 402
  00040	49 8b 4e 10	 mov	 rcx, QWORD PTR [r14+16]
  00044	49 8b 07	 mov	 rax, QWORD PTR [r15]
  00047	48 39 04 0f	 cmp	 QWORD PTR [rdi+rcx], rax
  0004b	75 70		 jne	 SHORT $LN2@findgotos
; Line 403
  0004d	48 8b 5d 58	 mov	 rbx, QWORD PTR [rbp+88]
  00051	41 0f b6 47 10	 movzx	 eax, BYTE PTR [r15+16]
  00056	4c 8b 55 30	 mov	 r10, QWORD PTR [rbp+48]
  0005a	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  0005e	4c 03 cf	 add	 r9, rdi
  00061	41 38 41 10	 cmp	 BYTE PTR [r9+16], al
  00065	72 7f		 jb	 SHORT $LN31@findgotos
  00067	45 8b 47 08	 mov	 r8d, DWORD PTR [r15+8]
  0006b	41 8b 51 08	 mov	 edx, DWORD PTR [r9+8]
  0006f	49 8b ca	 mov	 rcx, r10
  00072	e8 00 00 00 00	 call	 luaK_patchlist
  00077	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  0007a	8b d6		 mov	 edx, esi
  0007c	ff c8		 dec	 eax
  0007e	3b f0		 cmp	 esi, eax
  00080	7d 36		 jge	 SHORT $LN7@findgotos
  00082	48 8b cf	 mov	 rcx, rdi
  00085	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL9@findgotos:
  00090	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00094	ff c2		 inc	 edx
  00096	48 8d 49 18	 lea	 rcx, QWORD PTR [rcx+24]
  0009a	0f 10 04 01	 movups	 xmm0, XMMWORD PTR [rcx+rax]
  0009e	0f 11 44 01 e8	 movups	 XMMWORD PTR [rcx+rax-24], xmm0
  000a3	f2 0f 10 4c 01
	10		 movsdx	 xmm1, QWORD PTR [rcx+rax+16]
  000a9	f2 0f 11 4c 01
	f8		 movsdx	 QWORD PTR [rcx+rax-8], xmm1
  000af	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  000b2	ff c8		 dec	 eax
  000b4	3b d0		 cmp	 edx, eax
  000b6	7c d8		 jl	 SHORT $LL9@findgotos
$LN7@findgotos:
  000b8	ff 4b 18	 dec	 DWORD PTR [rbx+24]
; Line 404
  000bb	eb 06		 jmp	 SHORT $LN1@findgotos
$LN2@findgotos:
; Line 405
  000bd	ff c6		 inc	 esi
  000bf	48 83 c7 18	 add	 rdi, 24
$LN1@findgotos:
; Line 401
  000c3	41 3b 76 18	 cmp	 esi, DWORD PTR [r14+24]
  000c7	0f 8c 73 ff ff
	ff		 jl	 $LL4@findgotos
  000cd	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000d2	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
$LN27@findgotos:
; Line 407
  000d7	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  000dc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e0	41 5f		 pop	 r15
  000e2	41 5e		 pop	 r14
  000e4	5e		 pop	 rsi
  000e5	c3		 ret	 0
$LN31@findgotos:
; Line 403
  000e6	41 0f b6 41 10	 movzx	 eax, BYTE PTR [r9+16]
  000eb	49 63 52 34	 movsxd	 rdx, DWORD PTR [r10+52]
  000ef	4d 8b 01	 mov	 r8, QWORD PTR [r9]
  000f2	45 8b 49 0c	 mov	 r9d, DWORD PTR [r9+12]
  000f6	48 03 d0	 add	 rdx, rax
  000f9	49 8b 42 10	 mov	 rax, QWORD PTR [r10+16]
  000fd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00101	49 83 c0 18	 add	 r8, 24
  00105	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00108	48 0f bf 14 50	 movsx	 rdx, WORD PTR [rax+rdx*2]
  0010d	49 8b 02	 mov	 rax, QWORD PTR [r10]
  00110	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00114	48 03 d2	 add	 rdx, rdx
  00117	48 8b 04 d1	 mov	 rax, QWORD PTR [rcx+rdx*8]
  0011b	48 8b 4d 38	 mov	 rcx, QWORD PTR [rbp+56]
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@
  00126	48 83 c0 18	 add	 rax, 24
  0012a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012f	e8 00 00 00 00	 call	 luaO_pushfstring
  00134	48 8b cd	 mov	 rcx, rbp
  00137	48 8b d0	 mov	 rdx, rax
  0013a	c7 45 10 00 00
	00 00		 mov	 DWORD PTR [rbp+16], 0
  00141	e8 00 00 00 00	 call	 luaX_syntaxerror
  00146	cc		 int	 3
$LN30@findgotos:
findgotos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT newlabelentry
_TEXT	SEGMENT
ls$ = 80
l$ = 88
name$ = 96
line$ = 104
pc$ = 112
newlabelentry PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 381
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 382
  00018	48 63 7a 08	 movsxd	 rdi, DWORD PTR [rdx+8]
  0001c	4d 8b f8	 mov	 r15, r8
; Line 384
  0001f	4c 8d 42 0c	 lea	 r8, QWORD PTR [rdx+12]
  00023	8d 77 01	 lea	 esi, DWORD PTR [rdi+1]
  00026	45 8b f1	 mov	 r14d, r9d
  00029	48 8b da	 mov	 rbx, rdx
  0002c	48 8b e9	 mov	 rbp, rcx
  0002f	41 3b 30	 cmp	 esi, DWORD PTR [r8]
  00032	7e 29		 jle	 SHORT $LN1@newlabelen
  00034	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00037	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@OEGJPJFJ@labels?1gotos?$AA@
  00042	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00047	41 b9 18 00 00
	00		 mov	 r9d, 24
  0004d	c7 44 24 20 ff
	7f 00 00	 mov	 DWORD PTR [rsp+32], 32767 ; 00007fffH
  00055	e8 00 00 00 00	 call	 luaM_growaux_
  0005a	48 89 03	 mov	 QWORD PTR [rbx], rax
$LN1@newlabelen:
; Line 385
  0005d	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00060	48 8d 14 7f	 lea	 rdx, QWORD PTR [rdi+rdi*2]
; Line 390
  00064	8b c7		 mov	 eax, edi
  00066	4c 8d 04 d5 00
	00 00 00	 lea	 r8, QWORD PTR [rdx*8]
  0006e	4d 89 3c 08	 mov	 QWORD PTR [r8+rcx], r15
  00072	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00075	46 89 74 01 0c	 mov	 DWORD PTR [rcx+r8+12], r14d
  0007a	48 8b 4d 30	 mov	 rcx, QWORD PTR [rbp+48]
  0007e	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00081	0f b6 49 3a	 movzx	 ecx, BYTE PTR [rcx+58]
; Line 391
  00085	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0008a	42 88 4c 02 10	 mov	 BYTE PTR [rdx+r8+16], cl
  0008f	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00092	8b 4c 24 70	 mov	 ecx, DWORD PTR pc$[rsp]
  00096	42 89 4c 02 08	 mov	 DWORD PTR [rdx+r8+8], ecx
  0009b	89 73 08	 mov	 DWORD PTR [rbx+8], esi
  0009e	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000a3	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ac	41 5f		 pop	 r15
  000ae	41 5e		 pop	 r14
  000b0	5f		 pop	 rdi
  000b1	c3		 ret	 0
newlabelentry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT findlabel
_TEXT	SEGMENT
ls$ = 80
g$ = 88
findlabel PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 360
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 55		 push	 r13
  00018	41 56		 push	 r14
  0001a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 363
  0001e	4c 8b 51 58	 mov	 r10, QWORD PTR [rcx+88]
  00022	4c 8b 61 30	 mov	 r12, QWORD PTR [rcx+48]
  00026	48 63 fa	 movsxd	 rdi, edx
  00029	4d 8b 6c 24 18	 mov	 r13, QWORD PTR [r12+24]
; Line 364
  0002e	4d 8b 5a 10	 mov	 r11, QWORD PTR [r10+16]
  00032	48 8d 14 7f	 lea	 rdx, QWORD PTR [rdi+rdi*2]
; Line 366
  00036	49 63 5d 08	 movsxd	 rbx, DWORD PTR [r13+8]
  0003a	4c 8b f1	 mov	 r14, rcx
  0003d	48 8d 34 d5 00
	00 00 00	 lea	 rsi, QWORD PTR [rdx*8]
  00045	41 3b 5a 28	 cmp	 ebx, DWORD PTR [r10+40]
  00049	7d 29		 jge	 SHORT $LN4@findlabel
; Line 367
  0004b	49 8b 42 20	 mov	 rax, QWORD PTR [r10+32]
; Line 368
  0004f	4d 8b 0c 33	 mov	 r9, QWORD PTR [r11+rsi]
  00053	4d 63 42 28	 movsxd	 r8, DWORD PTR [r10+40]
  00057	48 8d 0c 5b	 lea	 rcx, QWORD PTR [rbx+rbx*2]
  0005b	48 8b d3	 mov	 rdx, rbx
  0005e	48 8d 2c c8	 lea	 rbp, QWORD PTR [rax+rcx*8]
$LL6@findlabel:
  00062	4c 39 4d 00	 cmp	 QWORD PTR [rbp], r9
  00066	74 2d		 je	 SHORT $LN23@findlabel
; Line 366
  00068	48 ff c2	 inc	 rdx
  0006b	48 83 c5 18	 add	 rbp, 24
  0006f	49 3b d0	 cmp	 rdx, r8
  00072	7c ee		 jl	 SHORT $LL6@findlabel
$LN4@findlabel:
; Line 376
  00074	33 c0		 xor	 eax, eax
$LN7@findlabel:
; Line 377
  00076	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0007b	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00080	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00085	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  0008a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008e	41 5e		 pop	 r14
  00090	41 5d		 pop	 r13
  00092	41 5c		 pop	 r12
  00094	c3		 ret	 0
$LN23@findlabel:
; Line 370
  00095	0f b6 45 10	 movzx	 eax, BYTE PTR [rbp+16]
  00099	41 38 44 33 10	 cmp	 BYTE PTR [r11+rsi+16], al
  0009e	76 1e		 jbe	 SHORT $LN2@findlabel
  000a0	41 80 7d 11 00	 cmp	 BYTE PTR [r13+17], 0
  000a5	75 06		 jne	 SHORT $LN1@findlabel
  000a7	41 39 5a 28	 cmp	 DWORD PTR [r10+40], ebx
  000ab	7e 11		 jle	 SHORT $LN2@findlabel
$LN1@findlabel:
; Line 371
  000ad	41 8b 54 33 08	 mov	 edx, DWORD PTR [r11+rsi+8]
  000b2	44 0f b6 c0	 movzx	 r8d, al
  000b6	49 8b cc	 mov	 rcx, r12
  000b9	e8 00 00 00 00	 call	 luaK_patchclose
$LN2@findlabel:
; Line 372
  000be	49 8b 5e 58	 mov	 rbx, QWORD PTR [r14+88]
  000c2	4d 8b 56 30	 mov	 r10, QWORD PTR [r14+48]
  000c6	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000ca	4c 8d 0c 06	 lea	 r9, QWORD PTR [rsi+rax]
  000ce	0f b6 44 06 10	 movzx	 eax, BYTE PTR [rsi+rax+16]
  000d3	3a 45 10	 cmp	 al, BYTE PTR [rbp+16]
  000d6	72 4e		 jb	 SHORT $LN31@findlabel
  000d8	44 8b 45 08	 mov	 r8d, DWORD PTR [rbp+8]
  000dc	41 8b 51 08	 mov	 edx, DWORD PTR [r9+8]
  000e0	49 8b ca	 mov	 rcx, r10
  000e3	e8 00 00 00 00	 call	 luaK_patchlist
  000e8	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  000eb	ff c8		 dec	 eax
  000ed	3b f8		 cmp	 edi, eax
  000ef	7d 28		 jge	 SHORT $LN9@findlabel
$LL11@findlabel:
  000f1	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000f5	ff c7		 inc	 edi
  000f7	48 8d 76 18	 lea	 rsi, QWORD PTR [rsi+24]
  000fb	0f 10 04 30	 movups	 xmm0, XMMWORD PTR [rax+rsi]
  000ff	0f 11 44 30 e8	 movups	 XMMWORD PTR [rax+rsi-24], xmm0
  00104	f2 0f 10 4c 30
	10		 movsdx	 xmm1, QWORD PTR [rax+rsi+16]
  0010a	f2 0f 11 4c 30
	f8		 movsdx	 QWORD PTR [rax+rsi-8], xmm1
  00110	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  00113	ff c8		 dec	 eax
  00115	3b f8		 cmp	 edi, eax
  00117	7c d8		 jl	 SHORT $LL11@findlabel
$LN9@findlabel:
  00119	ff 4b 18	 dec	 DWORD PTR [rbx+24]
; Line 373
  0011c	b8 01 00 00 00	 mov	 eax, 1
  00121	e9 50 ff ff ff	 jmp	 $LN7@findlabel
$LN31@findlabel:
; Line 372
  00126	49 63 52 34	 movsxd	 rdx, DWORD PTR [r10+52]
  0012a	4d 8b 01	 mov	 r8, QWORD PTR [r9]
  0012d	45 8b 49 0c	 mov	 r9d, DWORD PTR [r9+12]
  00131	0f b6 c0	 movzx	 eax, al
  00134	49 83 c0 18	 add	 r8, 24
  00138	48 03 d0	 add	 rdx, rax
  0013b	49 8b 42 10	 mov	 rax, QWORD PTR [r10+16]
  0013f	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00143	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00146	48 0f bf 14 50	 movsx	 rdx, WORD PTR [rax+rdx*2]
  0014b	49 8b 02	 mov	 rax, QWORD PTR [r10]
  0014e	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00152	48 03 d2	 add	 rdx, rdx
  00155	48 8b 04 d1	 mov	 rax, QWORD PTR [rcx+rdx*8]
  00159	49 8b 4e 38	 mov	 rcx, QWORD PTR [r14+56]
  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@
  00164	48 83 c0 18	 add	 rax, 24
  00168	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016d	e8 00 00 00 00	 call	 luaO_pushfstring
  00172	49 8b ce	 mov	 rcx, r14
  00175	48 8b d0	 mov	 rdx, rax
  00178	41 c7 46 10 00
	00 00 00	 mov	 DWORD PTR [r14+16], 0
  00180	e8 00 00 00 00	 call	 luaX_syntaxerror
  00185	cc		 int	 3
$LN30@findlabel:
findlabel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT closegoto
_TEXT	SEGMENT
ls$ = 64
g$ = 72
label$ = 80
closegoto PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 336
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 339
  00014	48 8b 59 58	 mov	 rbx, QWORD PTR [rcx+88]
  00018	4c 8b 51 30	 mov	 r10, QWORD PTR [rcx+48]
  0001c	48 63 fa	 movsxd	 rdi, edx
; Line 340
  0001f	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00023	4c 8d 0c 7f	 lea	 r9, QWORD PTR [rdi+rdi*2]
  00027	48 8b e9	 mov	 rbp, rcx
  0002a	4a 8d 34 cd 00
	00 00 00	 lea	 rsi, QWORD PTR [r9*8]
  00032	4c 8d 0c 06	 lea	 r9, QWORD PTR [rsi+rax]
; Line 342
  00036	0f b6 44 06 10	 movzx	 eax, BYTE PTR [rsi+rax+16]
  0003b	41 3a 40 10	 cmp	 al, BYTE PTR [r8+16]
  0003f	72 5f		 jb	 SHORT $LN17@closegoto
; Line 349
  00041	45 8b 40 08	 mov	 r8d, DWORD PTR [r8+8]
  00045	41 8b 51 08	 mov	 edx, DWORD PTR [r9+8]
  00049	49 8b ca	 mov	 rcx, r10
  0004c	e8 00 00 00 00	 call	 luaK_patchlist
; Line 351
  00051	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  00054	ff c8		 dec	 eax
  00056	3b f8		 cmp	 edi, eax
  00058	7d 2e		 jge	 SHORT $LN1@closegoto
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL3@closegoto:
; Line 352
  00060	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00064	ff c7		 inc	 edi
  00066	48 8d 76 18	 lea	 rsi, QWORD PTR [rsi+24]
  0006a	0f 10 04 30	 movups	 xmm0, XMMWORD PTR [rax+rsi]
  0006e	0f 11 44 30 e8	 movups	 XMMWORD PTR [rax+rsi-24], xmm0
  00073	f2 0f 10 4c 30
	10		 movsdx	 xmm1, QWORD PTR [rax+rsi+16]
  00079	f2 0f 11 4c 30
	f8		 movsdx	 QWORD PTR [rax+rsi-8], xmm1
  0007f	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  00082	ff c8		 dec	 eax
  00084	3b f8		 cmp	 edi, eax
  00086	7c d8		 jl	 SHORT $LL3@closegoto
$LN1@closegoto:
; Line 353
  00088	ff 4b 18	 dec	 DWORD PTR [rbx+24]
; Line 354
  0008b	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00090	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00095	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
$LN17@closegoto:
; Line 343
  000a0	49 63 52 34	 movsxd	 rdx, DWORD PTR [r10+52]
; Line 346
  000a4	4d 8b 01	 mov	 r8, QWORD PTR [r9]
  000a7	45 8b 49 0c	 mov	 r9d, DWORD PTR [r9+12]
  000ab	0f b6 c0	 movzx	 eax, al
  000ae	49 83 c0 18	 add	 r8, 24
  000b2	48 03 d0	 add	 rdx, rax
  000b5	49 8b 42 10	 mov	 rax, QWORD PTR [r10+16]
  000b9	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000bd	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000c0	48 0f bf 14 50	 movsx	 rdx, WORD PTR [rax+rdx*2]
  000c5	49 8b 02	 mov	 rax, QWORD PTR [r10]
  000c8	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  000cc	48 03 d2	 add	 rdx, rdx
  000cf	48 8b 04 d1	 mov	 rax, QWORD PTR [rcx+rdx*8]
  000d3	48 8b 4d 38	 mov	 rcx, QWORD PTR [rbp+56]
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@LMKMCOIF@?$DMgoto?5?$CFs?$DO?5at?5line?5?$CFd?5jumps?5into?5@
  000de	48 83 c0 18	 add	 rax, 24
  000e2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e7	e8 00 00 00 00	 call	 luaO_pushfstring
; Line 347
  000ec	48 8b cd	 mov	 rcx, rbp
  000ef	48 8b d0	 mov	 rdx, rax
  000f2	c7 45 10 00 00
	00 00		 mov	 DWORD PTR [rbp+16], 0
  000f9	e8 00 00 00 00	 call	 luaX_syntaxerror
  000fe	cc		 int	 3
$LN16@closegoto:
closegoto ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT enterlevel
_TEXT	SEGMENT
ls$ = 64
enterlevel PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 326
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 327
  0000a	48 8b 41 38	 mov	 rax, QWORD PTR [rcx+56]
; Line 329
  0000e	be c8 00 00 00	 mov	 esi, 200		; 000000c8H
  00013	66 ff 80 c6 00
	00 00		 inc	 WORD PTR [rax+198]
  0001a	48 8b 59 30	 mov	 rbx, QWORD PTR [rcx+48]
  0001e	66 39 b0 c6 00
	00 00		 cmp	 WORD PTR [rax+198], si
  00025	76 22		 jbe	 SHORT $LN3@enterlevel
  00027	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0002b	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00030	48 8b 78 38	 mov	 rdi, QWORD PTR [rax+56]
  00034	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00037	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  0003b	45 85 c0	 test	 r8d, r8d
  0003e	75 14		 jne	 SHORT $LN13@enterlevel
  00040	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@FCKLILMC@main?5function?$AA@
  00047	eb 1a		 jmp	 SHORT $LN9@enterlevel
$LN3@enterlevel:
; Line 330
  00049	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0004e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00052	5e		 pop	 rsi
  00053	c3		 ret	 0
$LN13@enterlevel:
; Line 329
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
  0005b	48 8b cf	 mov	 rcx, rdi
  0005e	e8 00 00 00 00	 call	 luaO_pushfstring
$LN9@enterlevel:
  00063	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08CMAFAEJC@C?5levels?$AA@
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
  00071	44 8b ce	 mov	 r9d, esi
  00074	48 8b cf	 mov	 rcx, rdi
  00077	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007c	e8 00 00 00 00	 call	 luaO_pushfstring
  00081	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00085	48 8b d0	 mov	 rdx, rax
  00088	e8 00 00 00 00	 call	 luaX_syntaxerror
  0008d	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN12@enterlevel:
enterlevel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT adjust_assign
_TEXT	SEGMENT
ls$ = 48
nvars$ = 56
nexps$ = 64
e$ = 72
adjust_assign PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 306
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 307
  0000a	48 8b 71 30	 mov	 rsi, QWORD PTR [rcx+48]
; Line 309
  0000e	41 8b 09	 mov	 ecx, DWORD PTR [r9]
  00011	8b fa		 mov	 edi, edx
  00013	8d 41 f3	 lea	 eax, DWORD PTR [rcx-13]
  00016	41 2b f8	 sub	 edi, r8d
  00019	83 f8 01	 cmp	 eax, 1
  0001c	76 42		 jbe	 SHORT $LN6@adjust_ass
; Line 316
  0001e	85 c9		 test	 ecx, ecx
  00020	74 0b		 je	 SHORT $LN2@adjust_ass
  00022	49 8b d1	 mov	 rdx, r9
  00025	48 8b ce	 mov	 rcx, rsi
  00028	e8 00 00 00 00	 call	 luaK_exp2nextreg
$LN2@adjust_ass:
; Line 317
  0002d	85 ff		 test	 edi, edi
  0002f	7e 57		 jle	 SHORT $LN4@adjust_ass
; Line 319
  00031	8b d7		 mov	 edx, edi
  00033	48 8b ce	 mov	 rcx, rsi
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	0f b6 5e 3c	 movzx	 ebx, BYTE PTR [rsi+60]
  0003f	e8 00 00 00 00	 call	 luaK_reserveregs
; Line 320
  00044	44 8b c7	 mov	 r8d, edi
  00047	8b d3		 mov	 edx, ebx
  00049	48 8b ce	 mov	 rcx, rsi
  0004c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
; Line 323
  00051	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5f		 pop	 rdi
; Line 320
  0005b	e9 00 00 00 00	 jmp	 luaK_nil
$LN6@adjust_ass:
; Line 311
  00060	b8 00 00 00 00	 mov	 eax, 0
  00065	ff c7		 inc	 edi
; Line 312
  00067	49 8b d1	 mov	 rdx, r9
  0006a	0f 48 f8	 cmovs	 edi, eax
  0006d	48 8b ce	 mov	 rcx, rsi
  00070	44 8b c7	 mov	 r8d, edi
  00073	e8 00 00 00 00	 call	 luaK_setreturns
; Line 313
  00078	83 ff 01	 cmp	 edi, 1
  0007b	7e 0b		 jle	 SHORT $LN4@adjust_ass
  0007d	8d 57 ff	 lea	 edx, DWORD PTR [rdi-1]
  00080	48 8b ce	 mov	 rcx, rsi
  00083	e8 00 00 00 00	 call	 luaK_reserveregs
$LN4@adjust_ass:
; Line 323
  00088	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
adjust_assign ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT singlevar
_TEXT	SEGMENT
key$1 = 32
__$ArrayPad$ = 56
ls$ = 96
var$ = 104
singlevar PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 293
  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 294
  00016	81 79 10 24 01
	00 00		 cmp	 DWORD PTR [rcx+16], 292	; 00000124H
  0001d	48 8b fa	 mov	 rdi, rdx
  00020	48 8b d9	 mov	 rbx, rcx
  00023	0f 85 91 00 00
	00		 jne	 $LN21@singlevar
  00029	48 89 6c 24 70	 mov	 QWORD PTR [rsp+112], rbp
  0002e	48 8b 69 18	 mov	 rbp, QWORD PTR [rcx+24]
  00032	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00037	e8 00 00 00 00	 call	 luaX_next
; Line 295
  0003c	48 8b 73 30	 mov	 rsi, QWORD PTR [rbx+48]
; Line 296
  00040	41 b9 01 00 00
	00		 mov	 r9d, 1
  00046	4c 8b c7	 mov	 r8, rdi
  00049	48 8b d5	 mov	 rdx, rbp
  0004c	48 8b ce	 mov	 rcx, rsi
  0004f	e8 00 00 00 00	 call	 singlevaraux
  00054	85 c0		 test	 eax, eax
  00056	75 44		 jne	 SHORT $LN19@singlevar
; Line 298
  00058	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  0005c	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  00060	4c 8b c7	 mov	 r8, rdi
  00063	48 8b ce	 mov	 rcx, rsi
  00066	e8 00 00 00 00	 call	 singlevaraux
; Line 300
  0006b	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  0006f	48 8b d5	 mov	 rdx, rbp
  00072	e8 00 00 00 00	 call	 luaK_stringK
; Line 301
  00077	4c 8d 44 24 20	 lea	 r8, QWORD PTR key$1[rsp]
  0007c	48 8b d7	 mov	 rdx, rdi
  0007f	48 8b ce	 mov	 rcx, rsi
  00082	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR key$1[rsp+16], -1
  0008b	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR key$1[rsp], 4
  00093	89 44 24 28	 mov	 DWORD PTR key$1[rsp+8], eax
  00097	e8 00 00 00 00	 call	 luaK_indexed
$LN19@singlevar:
  0009c	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  000a1	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
; Line 303
  000a6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ab	48 33 cc	 xor	 rcx, rsp
  000ae	e8 00 00 00 00	 call	 __security_check_cookie
  000b3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b7	5f		 pop	 rdi
  000b8	5b		 pop	 rbx
  000b9	c3		 ret	 0
$LN21@singlevar:
; Line 294
  000ba	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  000bf	e8 00 00 00 00	 call	 luaX_token2str
  000c4	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  000cf	4c 8b c0	 mov	 r8, rax
  000d2	e8 00 00 00 00	 call	 luaO_pushfstring
  000d7	48 8b cb	 mov	 rcx, rbx
  000da	48 8b d0	 mov	 rdx, rax
  000dd	e8 00 00 00 00	 call	 luaX_syntaxerror
  000e2	cc		 int	 3
$LN20@singlevar:
singlevar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT singlevaraux
_TEXT	SEGMENT
fs$ = 48
n$ = 56
var$ = 64
base$ = 72
singlevaraux PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 267
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	45 8b d9	 mov	 r11d, r9d
  00012	49 8b d8	 mov	 rbx, r8
  00015	48 8b fa	 mov	 rdi, rdx
  00018	48 8b f1	 mov	 rsi, rcx
; Line 268
  0001b	48 85 c9	 test	 rcx, rcx
  0001e	75 12		 jne	 SHORT $LN7@singlevara
$LN47@singlevara:
; Line 269
  00020	33 c0		 xor	 eax, eax
; Line 290
  00022	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00027	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5f		 pop	 rdi
  00031	c3		 ret	 0
$LN7@singlevara:
; Line 271
  00032	44 0f b6 41 3a	 movzx	 r8d, BYTE PTR [rcx+58]
  00037	41 ff c8	 dec	 r8d
  0003a	78 3d		 js	 SHORT $LN5@singlevara
  0003c	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00040	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00044	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00047	4c 8b 50 50	 mov	 r10, QWORD PTR [rax+80]
  0004b	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0004e	48 63 46 34	 movsxd	 rax, DWORD PTR [rsi+52]
  00052	49 63 c8	 movsxd	 rcx, r8d
  00055	48 03 c1	 add	 rax, rcx
  00058	4c 8d 0c 42	 lea	 r9, QWORD PTR [rdx+rax*2]
  0005c	0f 1f 40 00	 npad	 4
$LL13@singlevara:
  00060	49 0f bf 01	 movsx	 rax, WORD PTR [r9]
  00064	48 03 c0	 add	 rax, rax
  00067	49 3b 3c c2	 cmp	 rdi, QWORD PTR [r10+rax*8]
  0006b	74 38		 je	 SHORT $LN14@singlevara
  0006d	41 ff c8	 dec	 r8d
  00070	49 83 e9 02	 sub	 r9, 2
  00074	48 ff c9	 dec	 rcx
  00077	79 e7		 jns	 SHORT $LL13@singlevara
$LN5@singlevara:
; Line 279
  00079	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  0007c	44 0f b6 46 3b	 movzx	 r8d, BYTE PTR [rsi+59]
  00081	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00085	33 c0		 xor	 eax, eax
  00087	8b d0		 mov	 edx, eax
  00089	4d 85 c0	 test	 r8, r8
  0008c	7e 6b		 jle	 SHORT $LN46@singlevara
  0008e	66 90		 npad	 2
$LL27@singlevara:
  00090	48 39 39	 cmp	 QWORD PTR [rcx], rdi
  00093	74 60		 je	 SHORT $LN36@singlevara
  00095	48 ff c2	 inc	 rdx
  00098	ff c0		 inc	 eax
  0009a	48 83 c1 10	 add	 rcx, 16
  0009e	49 3b d0	 cmp	 rdx, r8
  000a1	7c ed		 jl	 SHORT $LL27@singlevara
  000a3	eb 54		 jmp	 SHORT $LN46@singlevara
; Line 271
$LN14@singlevara:
; Line 272
  000a5	45 85 c0	 test	 r8d, r8d
  000a8	78 cf		 js	 SHORT $LN5@singlevara
; Line 273
  000aa	48 c7 43 10 ff
	ff ff ff	 mov	 QWORD PTR [rbx+16], -1
  000b2	c7 03 08 00 00
	00		 mov	 DWORD PTR [rbx], 8
  000b8	44 89 43 08	 mov	 DWORD PTR [rbx+8], r8d
; Line 274
  000bc	45 85 db	 test	 r11d, r11d
  000bf	75 1f		 jne	 SHORT $LN22@singlevara
; Line 275
  000c1	48 8b 56 18	 mov	 rdx, QWORD PTR [rsi+24]
  000c5	0f b6 42 10	 movzx	 eax, BYTE PTR [rdx+16]
  000c9	41 3b c0	 cmp	 eax, r8d
  000cc	7e 0e		 jle	 SHORT $LN20@singlevara
  000ce	66 90		 npad	 2
$LL21@singlevara:
  000d0	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  000d3	0f b6 4a 10	 movzx	 ecx, BYTE PTR [rdx+16]
  000d7	41 3b c8	 cmp	 ecx, r8d
  000da	7f f4		 jg	 SHORT $LL21@singlevara
$LN20@singlevara:
  000dc	c6 42 11 01	 mov	 BYTE PTR [rdx+17], 1
$LN22@singlevara:
; Line 276
  000e0	b8 08 00 00 00	 mov	 eax, 8
; Line 290
  000e5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ea	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000ef	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f3	5f		 pop	 rdi
  000f4	c3		 ret	 0
$LN36@singlevara:
; Line 280
  000f5	85 c0		 test	 eax, eax
  000f7	79 28		 jns	 SHORT $LN2@singlevara
$LN46@singlevara:
; Line 281
  000f9	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  000fd	45 33 c9	 xor	 r9d, r9d
  00100	4c 8b c3	 mov	 r8, rbx
  00103	48 8b d7	 mov	 rdx, rdi
  00106	e8 00 00 00 00	 call	 singlevaraux
  0010b	85 c0		 test	 eax, eax
  0010d	0f 84 0d ff ff
	ff		 je	 $LN47@singlevara
; Line 284
  00113	4c 8b c3	 mov	 r8, rbx
  00116	48 8b d7	 mov	 rdx, rdi
  00119	48 8b ce	 mov	 rcx, rsi
  0011c	e8 00 00 00 00	 call	 newupvalue
$LN2@singlevara:
; Line 290
  00121	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00126	89 43 08	 mov	 DWORD PTR [rbx+8], eax
  00129	48 c7 43 10 ff
	ff ff ff	 mov	 QWORD PTR [rbx+16], -1
  00131	c7 03 09 00 00
	00		 mov	 DWORD PTR [rbx], 9
  00137	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0013c	b8 09 00 00 00	 mov	 eax, 9
  00141	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00145	5f		 pop	 rdi
  00146	c3		 ret	 0
singlevaraux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT markupval
_TEXT	SEGMENT
fs$ = 8
level$ = 16
markupval PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 257
  00000	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
; Line 258
  00004	0f b6 48 10	 movzx	 ecx, BYTE PTR [rax+16]
  00008	3b ca		 cmp	 ecx, edx
  0000a	7e 0f		 jle	 SHORT $LN9@markupval
  0000c	0f 1f 40 00	 npad	 4
$LL2@markupval:
  00010	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00013	0f b6 48 10	 movzx	 ecx, BYTE PTR [rax+16]
  00017	3b ca		 cmp	 ecx, edx
  00019	7f f5		 jg	 SHORT $LL2@markupval
$LN9@markupval:
; Line 259
  0001b	c6 40 11 01	 mov	 BYTE PTR [rax+17], 1
; Line 260
  0001f	c3		 ret	 0
markupval ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT searchvar
_TEXT	SEGMENT
fs$ = 8
n$ = 16
searchvar PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 244
  00000	44 0f b6 51 3a	 movzx	 r10d, BYTE PTR [rcx+58]
  00005	4c 8b da	 mov	 r11, rdx
  00008	41 ff ca	 dec	 r10d
  0000b	78 3c		 js	 SHORT $LN2@searchvar
; Line 245
  0000d	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00011	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00015	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00018	48 63 49 34	 movsxd	 rcx, DWORD PTR [rcx+52]
  0001c	4d 8b 08	 mov	 r9, QWORD PTR [r8]
  0001f	4c 8b 40 50	 mov	 r8, QWORD PTR [rax+80]
  00023	49 63 c2	 movsxd	 rax, r10d
  00026	48 03 c8	 add	 rcx, rax
  00029	49 8d 14 49	 lea	 rdx, QWORD PTR [r9+rcx*2]
  0002d	0f 1f 00	 npad	 3
$LL4@searchvar:
  00030	48 0f bf 0a	 movsx	 rcx, WORD PTR [rdx]
  00034	48 03 c9	 add	 rcx, rcx
  00037	4d 3b 1c c8	 cmp	 r11, QWORD PTR [r8+rcx*8]
  0003b	74 10		 je	 SHORT $LN10@searchvar
; Line 244
  0003d	41 ff ca	 dec	 r10d
  00040	48 83 ea 02	 sub	 rdx, 2
  00044	48 ff c8	 dec	 rax
  00047	79 e7		 jns	 SHORT $LL4@searchvar
$LN2@searchvar:
; Line 248
  00049	83 c8 ff	 or	 eax, -1
; Line 249
  0004c	c3		 ret	 0
$LN10@searchvar:
; Line 246
  0004d	41 8b c2	 mov	 eax, r10d
; Line 249
  00050	c3		 ret	 0
searchvar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT newupvalue
_TEXT	SEGMENT
fs$ = 80
name$ = 88
v$ = 96
newupvalue PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 227
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 230
  00018	0f b6 41 3b	 movzx	 eax, BYTE PTR [rcx+59]
  0001c	48 8b 39	 mov	 rdi, QWORD PTR [rcx]
  0001f	4d 8b f8	 mov	 r15, r8
  00022	48 63 5f 10	 movsxd	 rbx, DWORD PTR [rdi+16]
  00026	ff c0		 inc	 eax
  00028	48 8b ea	 mov	 rbp, rdx
  0002b	48 8b f1	 mov	 rsi, rcx
  0002e	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00033	7e 21		 jle	 SHORT $LN8@newupvalue
  00035	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00039	44 8b 47 28	 mov	 r8d, DWORD PTR [rdi+40]
  0003d	48 8b 58 38	 mov	 rbx, QWORD PTR [rax+56]
  00041	45 85 c0	 test	 r8d, r8d
  00044	0f 85 e5 00 00
	00		 jne	 $LN22@newupvalue
  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@FCKLILMC@main?5function?$AA@
  00051	e9 e8 00 00 00	 jmp	 $LN14@newupvalue
$LN8@newupvalue:
; Line 232
  00056	3b c3		 cmp	 eax, ebx
  00058	7e 33		 jle	 SHORT $LN17@newupvalue
  0005a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0005e	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08JKPCMKJ@upvalues?$AA@
  00069	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0006d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00072	4c 8d 47 10	 lea	 r8, QWORD PTR [rdi+16]
  00076	41 b9 10 00 00
	00		 mov	 r9d, 16
  0007c	c7 44 24 20 ff
	00 00 00	 mov	 DWORD PTR [rsp+32], 255	; 000000ffH
  00084	e8 00 00 00 00	 call	 luaM_growaux_
  00089	48 89 47 58	 mov	 QWORD PTR [rdi+88], rax
$LN17@newupvalue:
; Line 233
  0008d	3b 5f 10	 cmp	 ebx, DWORD PTR [rdi+16]
  00090	7d 22		 jge	 SHORT $LN1@newupvalue
; Line 229
  00092	48 8b cb	 mov	 rcx, rbx
  00095	48 c1 e1 04	 shl	 rcx, 4
  00099	33 d2		 xor	 edx, edx
  0009b	0f 1f 44 00 00	 npad	 5
$LL2@newupvalue:
; Line 233
  000a0	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000a4	ff c3		 inc	 ebx
  000a6	48 8d 49 10	 lea	 rcx, QWORD PTR [rcx+16]
  000aa	48 89 54 01 f0	 mov	 QWORD PTR [rcx+rax-16], rdx
  000af	3b 5f 10	 cmp	 ebx, DWORD PTR [rdi+16]
  000b2	7c ec		 jl	 SHORT $LL2@newupvalue
$LN1@newupvalue:
; Line 234
  000b4	41 83 3f 08	 cmp	 DWORD PTR [r15], 8
  000b8	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000bc	0f b6 4e 3b	 movzx	 ecx, BYTE PTR [rsi+59]
  000c0	0f 94 c2	 sete	 dl
  000c3	48 03 c9	 add	 rcx, rcx
  000c6	88 54 c8 08	 mov	 BYTE PTR [rax+rcx*8+8], dl
; Line 235
  000ca	0f b6 56 3b	 movzx	 edx, BYTE PTR [rsi+59]
  000ce	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  000d2	41 0f b6 47 08	 movzx	 eax, BYTE PTR [r15+8]
  000d7	48 03 d2	 add	 rdx, rdx
  000da	88 44 d1 09	 mov	 BYTE PTR [rcx+rdx*8+9], al
; Line 236
  000de	0f b6 4e 3b	 movzx	 ecx, BYTE PTR [rsi+59]
  000e2	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000e6	48 03 c9	 add	 rcx, rcx
  000e9	48 89 2c c8	 mov	 QWORD PTR [rax+rcx*8], rbp
; Line 237
  000ed	f6 47 09 04	 test	 BYTE PTR [rdi+9], 4
  000f1	74 19		 je	 SHORT $LN6@newupvalue
  000f3	f6 45 09 03	 test	 BYTE PTR [rbp+9], 3
  000f7	74 13		 je	 SHORT $LN6@newupvalue
  000f9	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  000fd	4c 8b c5	 mov	 r8, rbp
  00100	48 8b d7	 mov	 rdx, rdi
  00103	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00107	e8 00 00 00 00	 call	 luaC_barrier_
$LN6@newupvalue:
; Line 238
  0010c	0f b6 46 3b	 movzx	 eax, BYTE PTR [rsi+59]
; Line 239
  00110	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00115	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0011a	8d 48 01	 lea	 ecx, DWORD PTR [rax+1]
  0011d	88 4e 3b	 mov	 BYTE PTR [rsi+59], cl
  00120	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00125	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00129	41 5f		 pop	 r15
  0012b	41 5e		 pop	 r14
  0012d	5f		 pop	 rdi
  0012e	c3		 ret	 0
$LN22@newupvalue:
; Line 230
  0012f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
  00136	48 8b cb	 mov	 rcx, rbx
  00139	e8 00 00 00 00	 call	 luaO_pushfstring
$LN14@newupvalue:
  0013e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08JKPCMKJ@upvalues?$AA@
  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
  0014c	41 b9 ff 00 00
	00		 mov	 r9d, 255		; 000000ffH
  00152	48 8b cb	 mov	 rcx, rbx
  00155	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0015a	e8 00 00 00 00	 call	 luaO_pushfstring
  0015f	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00163	48 8b d0	 mov	 rdx, rax
  00166	e8 00 00 00 00	 call	 luaX_syntaxerror
  0016b	cc		 int	 3
$LN21@newupvalue:
newupvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT searchupvalue
_TEXT	SEGMENT
fs$ = 8
name$ = 16
searchupvalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 219
  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; Line 220
  00003	44 0f b6 51 3b	 movzx	 r10d, BYTE PTR [rcx+59]
  00008	45 33 c9	 xor	 r9d, r9d
  0000b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0000f	45 8b c1	 mov	 r8d, r9d
  00012	4d 85 d2	 test	 r10, r10
  00015	7e 14		 jle	 SHORT $LN2@searchupva
$LL4@searchupva:
; Line 221
  00017	48 39 10	 cmp	 QWORD PTR [rax], rdx
  0001a	74 13		 je	 SHORT $LN8@searchupva
; Line 220
  0001c	49 ff c0	 inc	 r8
  0001f	41 ff c1	 inc	 r9d
  00022	48 83 c0 10	 add	 rax, 16
  00026	4d 3b c2	 cmp	 r8, r10
  00029	7c ec		 jl	 SHORT $LL4@searchupva
$LN2@searchupva:
; Line 223
  0002b	83 c8 ff	 or	 eax, -1
; Line 224
  0002e	c3		 ret	 0
$LN8@searchupva:
; Line 221
  0002f	41 8b c1	 mov	 eax, r9d
; Line 224
  00032	c3		 ret	 0
searchupvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT removevars
_TEXT	SEGMENT
fs$ = 8
tolevel$ = 16
removevars PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 211
  00000	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00004	44 8b c2	 mov	 r8d, edx
  00007	44 8b d2	 mov	 r10d, edx
  0000a	4c 8b 48 58	 mov	 r9, QWORD PTR [rax+88]
  0000e	0f b6 41 3a	 movzx	 eax, BYTE PTR [rcx+58]
  00012	44 2b c0	 sub	 r8d, eax
  00015	45 01 41 08	 add	 DWORD PTR [r9+8], r8d
; Line 212
  00019	0f b6 41 3a	 movzx	 eax, BYTE PTR [rcx+58]
  0001d	3b c2		 cmp	 eax, edx
  0001f	7e 39		 jle	 SHORT $LN1@removevars
$LL2@removevars:
; Line 213
  00021	fe 49 3a	 dec	 BYTE PTR [rcx+58]
  00024	0f b6 41 3a	 movzx	 eax, BYTE PTR [rcx+58]
  00028	4c 63 41 34	 movsxd	 r8, DWORD PTR [rcx+52]
  0002c	4c 03 c0	 add	 r8, rax
  0002f	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00033	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00037	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0003a	4e 0f bf 04 40	 movsx	 r8, WORD PTR [rax+r8*2]
  0003f	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00042	48 8b 50 50	 mov	 rdx, QWORD PTR [rax+80]
  00046	8b 41 20	 mov	 eax, DWORD PTR [rcx+32]
  00049	4d 03 c0	 add	 r8, r8
  0004c	42 89 44 c2 0c	 mov	 DWORD PTR [rdx+r8*8+12], eax
  00051	0f b6 41 3a	 movzx	 eax, BYTE PTR [rcx+58]
  00055	41 3b c2	 cmp	 eax, r10d
  00058	7f c7		 jg	 SHORT $LL2@removevars
$LN1@removevars:
; Line 214
  0005a	c3		 ret	 0
removevars ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT adjustlocalvars
_TEXT	SEGMENT
ls$ = 8
nvars$ = 16
adjustlocalvars PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 202
  00000	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
  00004	44 8b ca	 mov	 r9d, edx
; Line 203
  00007	00 50 3a	 add	 BYTE PTR [rax+58], dl
; Line 204
  0000a	85 d2		 test	 edx, edx
  0000c	74 3b		 je	 SHORT $LN1@adjustloca
  0000e	66 90		 npad	 2
$LL3@adjustloca:
; Line 205
  00010	44 0f b6 40 3a	 movzx	 r8d, BYTE PTR [rax+58]
  00015	49 63 c9	 movsxd	 rcx, r9d
  00018	4c 2b c1	 sub	 r8, rcx
  0001b	48 63 48 34	 movsxd	 rcx, DWORD PTR [rax+52]
  0001f	4c 03 c1	 add	 r8, rcx
  00022	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00026	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0002a	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0002d	4e 0f bf 04 41	 movsx	 r8, WORD PTR [rcx+r8*2]
  00032	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00035	48 8b 51 50	 mov	 rdx, QWORD PTR [rcx+80]
  00039	8b 48 20	 mov	 ecx, DWORD PTR [rax+32]
  0003c	4d 03 c0	 add	 r8, r8
  0003f	42 89 4c c2 08	 mov	 DWORD PTR [rdx+r8*8+8], ecx
  00044	41 ff c9	 dec	 r9d
  00047	75 c7		 jne	 SHORT $LL3@adjustloca
$LN1@adjustloca:
; Line 207
  00049	c3		 ret	 0
adjustlocalvars ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getlocvar
_TEXT	SEGMENT
fs$ = 8
i$ = 16
getlocvar PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 197
  00000	4c 63 41 34	 movsxd	 r8, DWORD PTR [rcx+52]
  00004	48 63 c2	 movsxd	 rax, edx
  00007	4c 03 c0	 add	 r8, rax
  0000a	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0000e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00011	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00015	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00018	4a 0f bf 04 40	 movsx	 rax, WORD PTR [rax+r8*2]
  0001d	48 c1 e0 04	 shl	 rax, 4
  00021	48 03 41 50	 add	 rax, QWORD PTR [rcx+80]
; Line 198
  00025	c3		 ret	 0
getlocvar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT new_localvarliteral_
_TEXT	SEGMENT
ls$ = 48
name$ = 56
sz$ = 64
new_localvarliteral_ PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 186
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 187
  00009	e8 00 00 00 00	 call	 luaX_newstring
  0000e	48 8b cb	 mov	 rcx, rbx
  00011	48 8b d0	 mov	 rdx, rax
; Line 188
  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5b		 pop	 rbx
; Line 187
  00019	e9 00 00 00 00	 jmp	 new_localvar
new_localvarliteral_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT new_localvar
_TEXT	SEGMENT
ls$ = 64
name$ = 72
new_localvar PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 174
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 175
  00014	48 8b 79 30	 mov	 rdi, QWORD PTR [rcx+48]
; Line 176
  00018	48 8b 59 58	 mov	 rbx, QWORD PTR [rcx+88]
  0001c	48 8b f1	 mov	 rsi, rcx
; Line 177
  0001f	e8 00 00 00 00	 call	 registerlocalvar
  00024	8b e8		 mov	 ebp, eax
; Line 179
  00026	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
  00029	8b d0		 mov	 edx, eax
  0002b	2b 57 34	 sub	 edx, DWORD PTR [rdi+52]
  0002e	ff c2		 inc	 edx
  00030	81 fa c8 00 00
	00		 cmp	 edx, 200		; 000000c8H
  00036	7e 1d		 jle	 SHORT $LN4@new_localv
  00038	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  0003c	48 8b 58 38	 mov	 rbx, QWORD PTR [rax+56]
  00040	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00043	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00047	45 85 c0	 test	 r8d, r8d
  0004a	75 61		 jne	 SHORT $LN14@new_localv
  0004c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@FCKLILMC@main?5function?$AA@
  00053	eb 67		 jmp	 SHORT $LN10@new_localv
$LN4@new_localv:
; Line 181
  00055	4c 8d 43 0c	 lea	 r8, QWORD PTR [rbx+12]
  00059	83 c0 02	 add	 eax, 2
  0005c	41 3b 00	 cmp	 eax, DWORD PTR [r8]
  0005f	7e 29		 jle	 SHORT $LN1@new_localv
  00061	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00064	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BA@EIDMAHJI@local?5variables?$AA@
  0006f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00074	41 b9 02 00 00
	00		 mov	 r9d, 2
  0007a	c7 44 24 20 ff
	ff ff 7f	 mov	 DWORD PTR [rsp+32], 2147483647 ; 7fffffffH
  00082	e8 00 00 00 00	 call	 luaM_growaux_
  00087	48 89 03	 mov	 QWORD PTR [rbx], rax
$LN1@new_localv:
; Line 182
  0008a	48 63 4b 08	 movsxd	 rcx, DWORD PTR [rbx+8]
  0008e	48 8b 03	 mov	 rax, QWORD PTR [rbx]
; Line 183
  00091	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00096	66 89 2c 48	 mov	 WORD PTR [rax+rcx*2], bp
  0009a	ff 43 08	 inc	 DWORD PTR [rbx+8]
  0009d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a2	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000a7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ab	5f		 pop	 rdi
  000ac	c3		 ret	 0
$LN14@new_localv:
; Line 179
  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
  000b4	48 8b cb	 mov	 rcx, rbx
  000b7	e8 00 00 00 00	 call	 luaO_pushfstring
$LN10@new_localv:
  000bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@EIDMAHJI@local?5variables?$AA@
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
  000ca	41 b9 c8 00 00
	00		 mov	 r9d, 200		; 000000c8H
  000d0	48 8b cb	 mov	 rcx, rbx
  000d3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d8	e8 00 00 00 00	 call	 luaO_pushfstring
  000dd	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  000e1	48 8b d0	 mov	 rdx, rax
  000e4	e8 00 00 00 00	 call	 luaX_syntaxerror
  000e9	cc		 int	 3
$LN13@new_localv:
new_localvar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT registerlocalvar
_TEXT	SEGMENT
ls$ = 80
varname$ = 88
registerlocalvar PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 161
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 162
  00018	4c 8b 71 30	 mov	 r14, QWORD PTR [rcx+48]
  0001c	48 8b ea	 mov	 rbp, rdx
  0001f	4c 8b f9	 mov	 r15, rcx
; Line 163
  00022	49 8b 3e	 mov	 rdi, QWORD PTR [r14]
; Line 166
  00025	41 0f bf 46 38	 movsx	 eax, WORD PTR [r14+56]
  0002a	48 63 5f 24	 movsxd	 rbx, DWORD PTR [rdi+36]
  0002e	ff c0		 inc	 eax
  00030	3b c3		 cmp	 eax, ebx
  00032	7e 2f		 jle	 SHORT $LN8@registerlo
  00034	48 8b 57 50	 mov	 rdx, QWORD PTR [rdi+80]
  00038	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0003c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BA@EIDMAHJI@local?5variables?$AA@
  00043	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00048	4c 8d 47 24	 lea	 r8, QWORD PTR [rdi+36]
  0004c	41 b9 10 00 00
	00		 mov	 r9d, 16
  00052	c7 44 24 20 ff
	7f 00 00	 mov	 DWORD PTR [rsp+32], 32767 ; 00007fffH
  0005a	e8 00 00 00 00	 call	 luaM_growaux_
  0005f	48 89 47 50	 mov	 QWORD PTR [rdi+80], rax
$LN8@registerlo:
; Line 167
  00063	3b 5f 24	 cmp	 ebx, DWORD PTR [rdi+36]
  00066	7d 1d		 jge	 SHORT $LN1@registerlo
; Line 164
  00068	48 8b cb	 mov	 rcx, rbx
  0006b	48 c1 e1 04	 shl	 rcx, 4
  0006f	33 d2		 xor	 edx, edx
$LL2@registerlo:
; Line 167
  00071	48 8b 47 50	 mov	 rax, QWORD PTR [rdi+80]
  00075	ff c3		 inc	 ebx
  00077	48 8d 49 10	 lea	 rcx, QWORD PTR [rcx+16]
  0007b	48 89 54 01 f0	 mov	 QWORD PTR [rcx+rax-16], rdx
  00080	3b 5f 24	 cmp	 ebx, DWORD PTR [rdi+36]
  00083	7c ec		 jl	 SHORT $LL2@registerlo
$LN1@registerlo:
; Line 168
  00085	49 0f bf 4e 38	 movsx	 rcx, WORD PTR [r14+56]
  0008a	48 8b 47 50	 mov	 rax, QWORD PTR [rdi+80]
  0008e	48 03 c9	 add	 rcx, rcx
  00091	48 89 2c c8	 mov	 QWORD PTR [rax+rcx*8], rbp
; Line 169
  00095	f6 47 09 04	 test	 BYTE PTR [rdi+9], 4
  00099	74 15		 je	 SHORT $LN6@registerlo
  0009b	f6 45 09 03	 test	 BYTE PTR [rbp+9], 3
  0009f	74 0f		 je	 SHORT $LN6@registerlo
  000a1	49 8b 4f 38	 mov	 rcx, QWORD PTR [r15+56]
  000a5	4c 8b c5	 mov	 r8, rbp
  000a8	48 8b d7	 mov	 rdx, rdi
  000ab	e8 00 00 00 00	 call	 luaC_barrier_
$LN6@registerlo:
; Line 170
  000b0	41 0f bf 4e 38	 movsx	 ecx, WORD PTR [r14+56]
; Line 171
  000b5	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000ba	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000bf	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000c4	8d 41 01	 lea	 eax, DWORD PTR [rcx+1]
  000c7	66 41 89 46 38	 mov	 WORD PTR [r14+56], ax
  000cc	8b c1		 mov	 eax, ecx
  000ce	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d2	41 5f		 pop	 r15
  000d4	41 5e		 pop	 r14
  000d6	5f		 pop	 rdi
  000d7	c3		 ret	 0
registerlocalvar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT checkname
_TEXT	SEGMENT
ls$ = 48
e$ = 56
checkname PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 156
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 157
  0000a	81 79 10 24 01
	00 00		 cmp	 DWORD PTR [rcx+16], 292	; 00000124H
  00011	48 8b f2	 mov	 rsi, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	75 3b		 jne	 SHORT $LN18@checkname
  00019	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0001e	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
  00022	e8 00 00 00 00	 call	 luaX_next
  00027	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  0002b	48 8b d3	 mov	 rdx, rbx
  0002e	e8 00 00 00 00	 call	 luaK_stringK
  00033	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00038	48 c7 46 10 ff
	ff ff ff	 mov	 QWORD PTR [rsi+16], -1
  00040	89 46 08	 mov	 DWORD PTR [rsi+8], eax
  00043	c7 06 04 00 00
	00		 mov	 DWORD PTR [rsi], 4
; Line 158
  00049	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
$LN18@checkname:
; Line 157
  00054	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  00059	e8 00 00 00 00	 call	 luaX_token2str
  0005e	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00069	4c 8b c0	 mov	 r8, rax
  0006c	e8 00 00 00 00	 call	 luaO_pushfstring
  00071	48 8b cf	 mov	 rcx, rdi
  00074	48 8b d0	 mov	 rdx, rax
  00077	e8 00 00 00 00	 call	 luaX_syntaxerror
  0007c	cc		 int	 3
$LN17@checkname:
checkname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT codestring
_TEXT	SEGMENT
ls$ = 48
e$ = 56
s$ = 64
codestring PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 151
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 152
  00006	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	49 8b d0	 mov	 rdx, r8
  00010	e8 00 00 00 00	 call	 luaK_stringK
  00015	48 c7 43 10 ff
	ff ff ff	 mov	 QWORD PTR [rbx+16], -1
  0001d	c7 03 04 00 00
	00		 mov	 DWORD PTR [rbx], 4
  00023	89 43 08	 mov	 DWORD PTR [rbx+8], eax
; Line 153
  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5b		 pop	 rbx
  0002b	c3		 ret	 0
codestring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT init_exp
_TEXT	SEGMENT
e$ = 8
k$ = 16
i$ = 24
init_exp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 145
  00000	48 c7 41 10 ff
	ff ff ff	 mov	 QWORD PTR [rcx+16], -1
; Line 146
  00008	89 11		 mov	 DWORD PTR [rcx], edx
; Line 147
  0000a	44 89 41 08	 mov	 DWORD PTR [rcx+8], r8d
; Line 148
  0000e	c3		 ret	 0
init_exp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_checkname
_TEXT	SEGMENT
ls$ = 48
str_checkname PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 135
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 137
  00006	81 79 10 24 01
	00 00		 cmp	 DWORD PTR [rcx+16], 292	; 00000124H
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	75 1c		 jne	 SHORT $LN11@str_checkn
; Line 138
  00012	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00017	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
; Line 139
  0001b	e8 00 00 00 00	 call	 luaX_next
; Line 140
  00020	48 8b c3	 mov	 rax, rbx
  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
; Line 141
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
$LN11@str_checkn:
; Line 137
  0002e	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  00033	e8 00 00 00 00	 call	 luaX_token2str
  00038	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00043	4c 8b c0	 mov	 r8, rax
  00046	e8 00 00 00 00	 call	 luaO_pushfstring
  0004b	48 8b cf	 mov	 rcx, rdi
  0004e	48 8b d0	 mov	 rdx, rax
  00051	e8 00 00 00 00	 call	 luaX_syntaxerror
  00056	cc		 int	 3
$LN10@str_checkn:
str_checkname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT check_match
_TEXT	SEGMENT
ls$ = 64
what$ = 72
who$ = 80
where$ = 88
check_match PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 122
  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	41 8b e9	 mov	 ebp, r9d
  00012	8b f2		 mov	 esi, edx
  00014	48 8b f9	 mov	 rdi, rcx
; Line 123
  00017	39 51 10	 cmp	 DWORD PTR [rcx+16], edx
  0001a	75 14		 jne	 SHORT $LN7@check_matc
; Line 132
  0001c	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00021	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00026	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002a	5f		 pop	 rdi
; Line 123
  0002b	e9 00 00 00 00	 jmp	 luaX_next
$LN7@check_matc:
; Line 124
  00030	44 3b 49 04	 cmp	 r9d, DWORD PTR [rcx+4]
  00034	75 24		 jne	 SHORT $LN17@check_matc
; Line 125
  00036	e8 00 00 00 00	 call	 luaX_token2str
  0003b	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00046	4c 8b c0	 mov	 r8, rax
  00049	e8 00 00 00 00	 call	 luaO_pushfstring
  0004e	48 8b cf	 mov	 rcx, rdi
  00051	48 8b d0	 mov	 rdx, rax
  00054	e8 00 00 00 00	 call	 luaX_syntaxerror
  00059	cc		 int	 3
$LN17@check_matc:
; Line 129
  0005a	41 8b d0	 mov	 edx, r8d
  0005d	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00062	e8 00 00 00 00	 call	 luaX_token2str
  00067	8b d6		 mov	 edx, esi
  00069	48 8b cf	 mov	 rcx, rdi
  0006c	48 8b d8	 mov	 rbx, rax
  0006f	e8 00 00 00 00	 call	 luaX_token2str
  00074	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@PKDGNAMA@?$CFs?5expected?5?$CIto?5close?5?$CFs?5at?5line@
  0007f	4c 8b cb	 mov	 r9, rbx
  00082	4c 8b c0	 mov	 r8, rax
  00085	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  00089	e8 00 00 00 00	 call	 luaO_pushfstring
  0008e	48 8b cf	 mov	 rcx, rdi
  00091	48 8b d0	 mov	 rdx, rax
  00094	e8 00 00 00 00	 call	 luaX_syntaxerror
  00099	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN14@check_matc:
check_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT checknext
_TEXT	SEGMENT
ls$ = 48
c$ = 56
checknext PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 112
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 113
  00009	39 51 10	 cmp	 DWORD PTR [rcx+16], edx
  0000c	75 0a		 jne	 SHORT $LN11@checknext
; Line 115
  0000e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00012	5b		 pop	 rbx
; Line 114
  00013	e9 00 00 00 00	 jmp	 luaX_next
$LN11@checknext:
; Line 113
  00018	e8 00 00 00 00	 call	 luaX_token2str
  0001d	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00028	4c 8b c0	 mov	 r8, rax
  0002b	e8 00 00 00 00	 call	 luaO_pushfstring
  00030	48 8b cb	 mov	 rcx, rbx
  00033	48 8b d0	 mov	 rdx, rax
  00036	e8 00 00 00 00	 call	 luaX_syntaxerror
  0003b	cc		 int	 3
$LN10@checknext:
checknext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT check
_TEXT	SEGMENT
ls$ = 48
c$ = 56
check	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 106
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 107
  00009	39 51 10	 cmp	 DWORD PTR [rcx+16], edx
  0000c	75 06		 jne	 SHORT $LN8@check
; Line 109
  0000e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00012	5b		 pop	 rbx
  00013	c3		 ret	 0
$LN8@check:
; Line 108
  00014	e8 00 00 00 00	 call	 luaX_token2str
  00019	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00024	4c 8b c0	 mov	 r8, rax
  00027	e8 00 00 00 00	 call	 luaO_pushfstring
  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	48 8b d0	 mov	 rdx, rax
  00032	e8 00 00 00 00	 call	 luaX_syntaxerror
  00037	cc		 int	 3
$LN7@check:
check	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT testnext
_TEXT	SEGMENT
ls$ = 48
c$ = 56
testnext PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 97
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 98
  00004	39 51 10	 cmp	 DWORD PTR [rcx+16], edx
  00007	75 0f		 jne	 SHORT $LN2@testnext
; Line 99
  00009	e8 00 00 00 00	 call	 luaX_next
; Line 100
  0000e	b8 01 00 00 00	 mov	 eax, 1
; Line 103
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
$LN2@testnext:
; Line 102
  00018	33 c0		 xor	 eax, eax
; Line 103
  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
testnext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT checklimit
_TEXT	SEGMENT
fs$ = 64
v$ = 72
l$ = 80
what$ = 88
checklimit PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 93
  00000	41 3b d0	 cmp	 edx, r8d
  00003	7e 3a		 jle	 SHORT $LN10@checklimit
  00005	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  0000a	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000f	56		 push	 rsi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00018	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0001d	41 8b f0	 mov	 esi, r8d
  00020	48 8b 78 38	 mov	 rdi, QWORD PTR [rax+56]
  00024	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00027	49 8b e9	 mov	 rbp, r9
  0002a	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  0002e	48 8b d9	 mov	 rbx, rcx
  00031	45 85 c0	 test	 r8d, r8d
  00034	75 0a		 jne	 SHORT $LN11@checklimit
  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@FCKLILMC@main?5function?$AA@
  0003d	eb 10		 jmp	 SHORT $LN7@checklimit
$LN10@checklimit:
; Line 94
  0003f	c3		 ret	 0
$LN11@checklimit:
; Line 93
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
  00047	48 8b cf	 mov	 rcx, rdi
  0004a	e8 00 00 00 00	 call	 luaO_pushfstring
$LN7@checklimit:
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
  00056	44 8b ce	 mov	 r9d, esi
  00059	4c 8b c5	 mov	 r8, rbp
  0005c	48 8b cf	 mov	 rcx, rdi
  0005f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00064	e8 00 00 00 00	 call	 luaO_pushfstring
  00069	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0006d	48 8b d0	 mov	 rdx, rax
  00070	e8 00 00 00 00	 call	 luaX_syntaxerror
  00075	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN9@checklimit:
checklimit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT errorlimit
_TEXT	SEGMENT
fs$ = 64
limit$ = 72
what$ = 80
errorlimit PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 79
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 80
  00014	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00018	49 8b f0	 mov	 rsi, r8
  0001b	8b ea		 mov	 ebp, edx
  0001d	48 8b 78 38	 mov	 rdi, QWORD PTR [rax+56]
; Line 82
  00021	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00024	48 8b d9	 mov	 rbx, rcx
  00027	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
; Line 85
  0002b	45 85 c0	 test	 r8d, r8d
  0002e	75 09		 jne	 SHORT $LN3@errorlimit
  00030	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@FCKLILMC@main?5function?$AA@
  00037	eb 0f		 jmp	 SHORT $LN4@errorlimit
$LN3@errorlimit:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EDMMCJEE@function?5at?5line?5?$CFd?$AA@
  00040	48 8b cf	 mov	 rcx, rdi
  00043	e8 00 00 00 00	 call	 luaO_pushfstring
$LN4@errorlimit:
; Line 87
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@FBOMDEEF@too?5many?5?$CFs?5?$CIlimit?5is?5?$CFd?$CJ?5in?5?$CFs?$AA@
  0004f	44 8b cd	 mov	 r9d, ebp
  00052	4c 8b c6	 mov	 r8, rsi
  00055	48 8b cf	 mov	 rcx, rdi
  00058	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005d	e8 00 00 00 00	 call	 luaO_pushfstring
; Line 88
  00062	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00066	48 8b d0	 mov	 rdx, rax
  00069	e8 00 00 00 00	 call	 luaX_syntaxerror
  0006e	cc		 int	 3
$LN5@errorlimit:
errorlimit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT error_expected
_TEXT	SEGMENT
ls$ = 48
token$ = 56
error_expected PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 73
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 75
  00009	e8 00 00 00 00	 call	 luaX_token2str
  0000e	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IEHHDPGI@?$CFs?5expected?$AA@
  00019	4c 8b c0	 mov	 r8, rax
  0001c	e8 00 00 00 00	 call	 luaO_pushfstring
  00021	48 8b cb	 mov	 rcx, rbx
  00024	48 8b d0	 mov	 rdx, rax
  00027	e8 00 00 00 00	 call	 luaX_syntaxerror
  0002c	cc		 int	 3
$LN3@error_expe:
error_expected ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT semerror
_TEXT	SEGMENT
ls$ = 48
msg$ = 56
semerror PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 67
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 68
  00004	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [rcx+16], 0
; Line 69
  0000b	e8 00 00 00 00	 call	 luaX_syntaxerror
  00010	cc		 int	 3
$LN3@semerror:
semerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT expr
_TEXT	SEGMENT
ls$ = 8
v$ = 16
expr	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1074
  00000	45 33 c0	 xor	 r8d, r8d
  00003	e9 00 00 00 00	 jmp	 subexpr
expr	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT statement
_TEXT	SEGMENT
ls$ = 48
statement PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1535
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1536
  0000a	8b 79 04	 mov	 edi, DWORD PTR [rcx+4]
  0000d	48 8b d9	 mov	 rbx, rcx
; Line 1537
  00010	e8 00 00 00 00	 call	 enterlevel
; Line 1538
  00015	8b 43 10	 mov	 eax, DWORD PTR [rbx+16]
  00018	83 c0 c5	 add	 eax, -59		; ffffffffffffffc5H
  0001b	3d e5 00 00 00	 cmp	 eax, 229		; 000000e5H
  00020	0f 87 0c 01 00
	00		 ja	 $LN1@statement
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0002d	48 98		 cdqe
  0002f	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN24@statement[rcx+rax]
  00037	8b 94 81 00 00
	00 00		 mov	 edx, DWORD PTR $LN25@statement[rcx+rax*4]
  0003e	48 03 d1	 add	 rdx, rcx
  00041	ff e2		 jmp	 rdx
$LN14@statement:
; Line 1540
  00043	48 8b cb	 mov	 rcx, rbx
  00046	e8 00 00 00 00	 call	 luaX_next
; Line 1541
  0004b	e9 ea 00 00 00	 jmp	 $LN15@statement
$LN13@statement:
; Line 1544
  00050	8b d7		 mov	 edx, edi
  00052	48 8b cb	 mov	 rcx, rbx
  00055	e8 00 00 00 00	 call	 ifstat
; Line 1545
  0005a	e9 db 00 00 00	 jmp	 $LN15@statement
$LN12@statement:
; Line 1548
  0005f	8b d7		 mov	 edx, edi
  00061	48 8b cb	 mov	 rcx, rbx
  00064	e8 00 00 00 00	 call	 whilestat
; Line 1549
  00069	e9 cc 00 00 00	 jmp	 $LN15@statement
$LN11@statement:
; Line 1552
  0006e	48 8b cb	 mov	 rcx, rbx
  00071	e8 00 00 00 00	 call	 luaX_next
; Line 1553
  00076	48 8b cb	 mov	 rcx, rbx
  00079	e8 00 00 00 00	 call	 block
; Line 1554
  0007e	ba 06 01 00 00	 mov	 edx, 262		; 00000106H
  00083	44 8b cf	 mov	 r9d, edi
  00086	44 8d 42 fd	 lea	 r8d, QWORD PTR [rdx-3]
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	e8 00 00 00 00	 call	 check_match
; Line 1555
  00092	e9 a3 00 00 00	 jmp	 $LN15@statement
$LN10@statement:
; Line 1558
  00097	8b d7		 mov	 edx, edi
  00099	48 8b cb	 mov	 rcx, rbx
  0009c	e8 00 00 00 00	 call	 forstat
; Line 1559
  000a1	e9 94 00 00 00	 jmp	 $LN15@statement
$LN9@statement:
; Line 1562
  000a6	8b d7		 mov	 edx, edi
  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	e8 00 00 00 00	 call	 repeatstat
; Line 1563
  000b0	e9 85 00 00 00	 jmp	 $LN15@statement
$LN8@statement:
; Line 1566
  000b5	8b d7		 mov	 edx, edi
  000b7	48 8b cb	 mov	 rcx, rbx
  000ba	e8 00 00 00 00	 call	 funcstat
; Line 1567
  000bf	eb 79		 jmp	 SHORT $LN15@statement
$LN7@statement:
; Line 1570
  000c1	48 8b cb	 mov	 rcx, rbx
  000c4	e8 00 00 00 00	 call	 luaX_next
; Line 1571
  000c9	81 7b 10 09 01
	00 00		 cmp	 DWORD PTR [rbx+16], 265	; 00000109H
  000d0	48 8b cb	 mov	 rcx, rbx
  000d3	75 0f		 jne	 SHORT $LN6@statement
  000d5	e8 00 00 00 00	 call	 luaX_next
; Line 1572
  000da	48 8b cb	 mov	 rcx, rbx
  000dd	e8 00 00 00 00	 call	 localfunc
; Line 1573
  000e2	eb 56		 jmp	 SHORT $LN15@statement
$LN6@statement:
; Line 1574
  000e4	e8 00 00 00 00	 call	 localstat
; Line 1575
  000e9	eb 4f		 jmp	 SHORT $LN15@statement
$LN4@statement:
; Line 1578
  000eb	48 8b cb	 mov	 rcx, rbx
  000ee	e8 00 00 00 00	 call	 luaX_next
; Line 1579
  000f3	48 8b cb	 mov	 rcx, rbx
  000f6	e8 00 00 00 00	 call	 str_checkname
  000fb	44 8b c7	 mov	 r8d, edi
  000fe	48 8b cb	 mov	 rcx, rbx
  00101	48 8b d0	 mov	 rdx, rax
  00104	e8 00 00 00 00	 call	 labelstat
; Line 1580
  00109	eb 2f		 jmp	 SHORT $LN15@statement
$LN3@statement:
; Line 1583
  0010b	48 8b cb	 mov	 rcx, rbx
  0010e	e8 00 00 00 00	 call	 luaX_next
; Line 1584
  00113	48 8b cb	 mov	 rcx, rbx
  00116	e8 00 00 00 00	 call	 retstat
; Line 1585
  0011b	eb 1d		 jmp	 SHORT $LN15@statement
$LN2@statement:
; Line 1589
  0011d	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00121	e8 00 00 00 00	 call	 luaK_jump
  00126	48 8b cb	 mov	 rcx, rbx
  00129	8b d0		 mov	 edx, eax
  0012b	e8 00 00 00 00	 call	 gotostat
; Line 1590
  00130	eb 08		 jmp	 SHORT $LN15@statement
$LN1@statement:
; Line 1593
  00132	48 8b cb	 mov	 rcx, rbx
  00135	e8 00 00 00 00	 call	 exprstat
$LN15@statement:
; Line 1599
  0013a	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  0013e	0f b6 41 3a	 movzx	 eax, BYTE PTR [rcx+58]
  00142	88 41 3c	 mov	 BYTE PTR [rcx+60], al
; Line 1600
  00145	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
; Line 1601
  00149	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0014e	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00153	66 01 88 c6 00
	00 00		 add	 WORD PTR [rax+198], cx
  0015a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0015e	5f		 pop	 rdi
  0015f	c3		 ret	 0
$LN25@statement:
  00160	00 00 00 00	 DD	 $LN14@statement
  00164	00 00 00 00	 DD	 $LN2@statement
  00168	00 00 00 00	 DD	 $LN11@statement
  0016c	00 00 00 00	 DD	 $LN10@statement
  00170	00 00 00 00	 DD	 $LN8@statement
  00174	00 00 00 00	 DD	 $LN13@statement
  00178	00 00 00 00	 DD	 $LN7@statement
  0017c	00 00 00 00	 DD	 $LN9@statement
  00180	00 00 00 00	 DD	 $LN3@statement
  00184	00 00 00 00	 DD	 $LN12@statement
  00188	00 00 00 00	 DD	 $LN4@statement
  0018c	00 00 00 00	 DD	 $LN1@statement
$LN24@statement:
  00190	00		 DB	 0
  00191	0b		 DB	 11
  00192	0b		 DB	 11
  00193	0b		 DB	 11
  00194	0b		 DB	 11
  00195	0b		 DB	 11
  00196	0b		 DB	 11
  00197	0b		 DB	 11
  00198	0b		 DB	 11
  00199	0b		 DB	 11
  0019a	0b		 DB	 11
  0019b	0b		 DB	 11
  0019c	0b		 DB	 11
  0019d	0b		 DB	 11
  0019e	0b		 DB	 11
  0019f	0b		 DB	 11
  001a0	0b		 DB	 11
  001a1	0b		 DB	 11
  001a2	0b		 DB	 11
  001a3	0b		 DB	 11
  001a4	0b		 DB	 11
  001a5	0b		 DB	 11
  001a6	0b		 DB	 11
  001a7	0b		 DB	 11
  001a8	0b		 DB	 11
  001a9	0b		 DB	 11
  001aa	0b		 DB	 11
  001ab	0b		 DB	 11
  001ac	0b		 DB	 11
  001ad	0b		 DB	 11
  001ae	0b		 DB	 11
  001af	0b		 DB	 11
  001b0	0b		 DB	 11
  001b1	0b		 DB	 11
  001b2	0b		 DB	 11
  001b3	0b		 DB	 11
  001b4	0b		 DB	 11
  001b5	0b		 DB	 11
  001b6	0b		 DB	 11
  001b7	0b		 DB	 11
  001b8	0b		 DB	 11
  001b9	0b		 DB	 11
  001ba	0b		 DB	 11
  001bb	0b		 DB	 11
  001bc	0b		 DB	 11
  001bd	0b		 DB	 11
  001be	0b		 DB	 11
  001bf	0b		 DB	 11
  001c0	0b		 DB	 11
  001c1	0b		 DB	 11
  001c2	0b		 DB	 11
  001c3	0b		 DB	 11
  001c4	0b		 DB	 11
  001c5	0b		 DB	 11
  001c6	0b		 DB	 11
  001c7	0b		 DB	 11
  001c8	0b		 DB	 11
  001c9	0b		 DB	 11
  001ca	0b		 DB	 11
  001cb	0b		 DB	 11
  001cc	0b		 DB	 11
  001cd	0b		 DB	 11
  001ce	0b		 DB	 11
  001cf	0b		 DB	 11
  001d0	0b		 DB	 11
  001d1	0b		 DB	 11
  001d2	0b		 DB	 11
  001d3	0b		 DB	 11
  001d4	0b		 DB	 11
  001d5	0b		 DB	 11
  001d6	0b		 DB	 11
  001d7	0b		 DB	 11
  001d8	0b		 DB	 11
  001d9	0b		 DB	 11
  001da	0b		 DB	 11
  001db	0b		 DB	 11
  001dc	0b		 DB	 11
  001dd	0b		 DB	 11
  001de	0b		 DB	 11
  001df	0b		 DB	 11
  001e0	0b		 DB	 11
  001e1	0b		 DB	 11
  001e2	0b		 DB	 11
  001e3	0b		 DB	 11
  001e4	0b		 DB	 11
  001e5	0b		 DB	 11
  001e6	0b		 DB	 11
  001e7	0b		 DB	 11
  001e8	0b		 DB	 11
  001e9	0b		 DB	 11
  001ea	0b		 DB	 11
  001eb	0b		 DB	 11
  001ec	0b		 DB	 11
  001ed	0b		 DB	 11
  001ee	0b		 DB	 11
  001ef	0b		 DB	 11
  001f0	0b		 DB	 11
  001f1	0b		 DB	 11
  001f2	0b		 DB	 11
  001f3	0b		 DB	 11
  001f4	0b		 DB	 11
  001f5	0b		 DB	 11
  001f6	0b		 DB	 11
  001f7	0b		 DB	 11
  001f8	0b		 DB	 11
  001f9	0b		 DB	 11
  001fa	0b		 DB	 11
  001fb	0b		 DB	 11
  001fc	0b		 DB	 11
  001fd	0b		 DB	 11
  001fe	0b		 DB	 11
  001ff	0b		 DB	 11
  00200	0b		 DB	 11
  00201	0b		 DB	 11
  00202	0b		 DB	 11
  00203	0b		 DB	 11
  00204	0b		 DB	 11
  00205	0b		 DB	 11
  00206	0b		 DB	 11
  00207	0b		 DB	 11
  00208	0b		 DB	 11
  00209	0b		 DB	 11
  0020a	0b		 DB	 11
  0020b	0b		 DB	 11
  0020c	0b		 DB	 11
  0020d	0b		 DB	 11
  0020e	0b		 DB	 11
  0020f	0b		 DB	 11
  00210	0b		 DB	 11
  00211	0b		 DB	 11
  00212	0b		 DB	 11
  00213	0b		 DB	 11
  00214	0b		 DB	 11
  00215	0b		 DB	 11
  00216	0b		 DB	 11
  00217	0b		 DB	 11
  00218	0b		 DB	 11
  00219	0b		 DB	 11
  0021a	0b		 DB	 11
  0021b	0b		 DB	 11
  0021c	0b		 DB	 11
  0021d	0b		 DB	 11
  0021e	0b		 DB	 11
  0021f	0b		 DB	 11
  00220	0b		 DB	 11
  00221	0b		 DB	 11
  00222	0b		 DB	 11
  00223	0b		 DB	 11
  00224	0b		 DB	 11
  00225	0b		 DB	 11
  00226	0b		 DB	 11
  00227	0b		 DB	 11
  00228	0b		 DB	 11
  00229	0b		 DB	 11
  0022a	0b		 DB	 11
  0022b	0b		 DB	 11
  0022c	0b		 DB	 11
  0022d	0b		 DB	 11
  0022e	0b		 DB	 11
  0022f	0b		 DB	 11
  00230	0b		 DB	 11
  00231	0b		 DB	 11
  00232	0b		 DB	 11
  00233	0b		 DB	 11
  00234	0b		 DB	 11
  00235	0b		 DB	 11
  00236	0b		 DB	 11
  00237	0b		 DB	 11
  00238	0b		 DB	 11
  00239	0b		 DB	 11
  0023a	0b		 DB	 11
  0023b	0b		 DB	 11
  0023c	0b		 DB	 11
  0023d	0b		 DB	 11
  0023e	0b		 DB	 11
  0023f	0b		 DB	 11
  00240	0b		 DB	 11
  00241	0b		 DB	 11
  00242	0b		 DB	 11
  00243	0b		 DB	 11
  00244	0b		 DB	 11
  00245	0b		 DB	 11
  00246	0b		 DB	 11
  00247	0b		 DB	 11
  00248	0b		 DB	 11
  00249	0b		 DB	 11
  0024a	0b		 DB	 11
  0024b	0b		 DB	 11
  0024c	0b		 DB	 11
  0024d	0b		 DB	 11
  0024e	0b		 DB	 11
  0024f	0b		 DB	 11
  00250	0b		 DB	 11
  00251	0b		 DB	 11
  00252	0b		 DB	 11
  00253	0b		 DB	 11
  00254	0b		 DB	 11
  00255	0b		 DB	 11
  00256	0b		 DB	 11
  00257	01		 DB	 1
  00258	02		 DB	 2
  00259	0b		 DB	 11
  0025a	0b		 DB	 11
  0025b	0b		 DB	 11
  0025c	0b		 DB	 11
  0025d	03		 DB	 3
  0025e	04		 DB	 4
  0025f	01		 DB	 1
  00260	05		 DB	 5
  00261	0b		 DB	 11
  00262	06		 DB	 6
  00263	0b		 DB	 11
  00264	0b		 DB	 11
  00265	0b		 DB	 11
  00266	07		 DB	 7
  00267	08		 DB	 8
  00268	0b		 DB	 11
  00269	0b		 DB	 11
  0026a	0b		 DB	 11
  0026b	09		 DB	 9
  0026c	0b		 DB	 11
  0026d	0b		 DB	 11
  0026e	0b		 DB	 11
  0026f	0b		 DB	 11
  00270	0b		 DB	 11
  00271	0b		 DB	 11
  00272	0b		 DB	 11
  00273	0b		 DB	 11
  00274	0b		 DB	 11
  00275	0a		 DB	 10
statement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaY_parser
_TEXT	SEGMENT
funcstate$ = 48
lexstate$ = 112
L$ = 256
z$ = 264
buff$ = 272
dyd$ = 280
name$ = 288
firstchar$ = 296
luaY_parser PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lparser.c
; Line 1625
$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  0001d	48 8b f2	 mov	 rsi, rdx
; Line 1628
  00020	ba 01 00 00 00	 mov	 edx, 1
  00025	49 8b f9	 mov	 rdi, r9
  00028	49 8b d8	 mov	 rbx, r8
  0002b	4c 8b f1	 mov	 r14, rcx
  0002e	e8 00 00 00 00	 call	 luaF_newLclosure
; Line 1629
  00033	4d 8b 56 10	 mov	 r10, QWORD PTR [r14+16]
; Line 1630
  00037	49 8b ce	 mov	 rcx, r14
  0003a	48 8b e8	 mov	 rbp, rax
  0003d	49 89 02	 mov	 QWORD PTR [r10], rax
  00040	41 c7 42 08 46
	00 00 00	 mov	 DWORD PTR [r10+8], 70	; 00000046H
  00048	e8 00 00 00 00	 call	 luaD_inctop
; Line 1631
  0004d	49 8b ce	 mov	 rcx, r14
  00050	e8 00 00 00 00	 call	 luaH_new
; Line 1632
  00055	49 8b 4e 10	 mov	 rcx, QWORD PTR [r14+16]
  00059	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR lexstate$[rsp+80], rax
  00061	48 89 01	 mov	 QWORD PTR [rcx], rax
  00064	c7 41 08 45 00
	00 00		 mov	 DWORD PTR [rcx+8], 69	; 00000045H
; Line 1633
  0006b	49 8b ce	 mov	 rcx, r14
  0006e	e8 00 00 00 00	 call	 luaD_inctop
; Line 1634
  00073	49 8b ce	 mov	 rcx, r14
  00076	e8 00 00 00 00	 call	 luaF_newproto
; Line 1635
  0007b	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  00083	49 8b ce	 mov	 rcx, r14
  00086	48 89 45 18	 mov	 QWORD PTR [rbp+24], rax
  0008a	48 89 44 24 30	 mov	 QWORD PTR funcstate$[rsp], rax
  0008f	e8 00 00 00 00	 call	 luaS_new
  00094	48 8b 4c 24 30	 mov	 rcx, QWORD PTR funcstate$[rsp]
; Line 1640
  00099	48 8d 54 24 70	 lea	 rdx, QWORD PTR lexstate$[rsp]
  0009e	4c 8b c6	 mov	 r8, rsi
  000a1	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000a5	4c 8b 4c 24 30	 mov	 r9, QWORD PTR funcstate$[rsp]
  000aa	33 c0		 xor	 eax, eax
  000ac	89 47 28	 mov	 DWORD PTR [rdi+40], eax
  000af	89 47 18	 mov	 DWORD PTR [rdi+24], eax
  000b2	89 47 08	 mov	 DWORD PTR [rdi+8], eax
  000b5	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR firstchar$[rsp]
  000bc	48 89 9c 24 b8
	00 00 00	 mov	 QWORD PTR lexstate$[rsp+72], rbx
  000c4	48 89 bc 24 c8
	00 00 00	 mov	 QWORD PTR lexstate$[rsp+88], rdi
  000cc	4d 8b 49 68	 mov	 r9, QWORD PTR [r9+104]
  000d0	49 8b ce	 mov	 rcx, r14
  000d3	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000d7	e8 00 00 00 00	 call	 luaX_setinput
; Line 1641
  000dc	48 8d 54 24 30	 lea	 rdx, QWORD PTR funcstate$[rsp]
  000e1	48 8d 4c 24 70	 lea	 rcx, QWORD PTR lexstate$[rsp]
  000e6	e8 00 00 00 00	 call	 mainfunc
; Line 1645
  000eb	49 83 46 10 f0	 add	 QWORD PTR [r14+16], -16
; Line 1647
  000f0	4c 8d 9c 24 f0
	00 00 00	 lea	 r11, QWORD PTR [rsp+240]
  000f8	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  000fc	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  00100	49 8b 7b 28	 mov	 rdi, QWORD PTR [r11+40]
  00104	48 8b c5	 mov	 rax, rbp
  00107	49 8b 6b 18	 mov	 rbp, QWORD PTR [r11+24]
  0010b	49 8b e3	 mov	 rsp, r11
  0010e	41 5e		 pop	 r14
  00110	c3		 ret	 0
luaY_parser ENDP
_TEXT	ENDS
END
