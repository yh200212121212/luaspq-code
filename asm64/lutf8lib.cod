; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06KLHHMIGM@offset?$AA@			; `string'
PUBLIC	??_C@_09HHCEKEIA@codepoint?$AA@			; `string'
PUBLIC	??_C@_04ENMBGAPA@char?$AA@			; `string'
PUBLIC	??_C@_03BKCJCHLK@len?$AA@			; `string'
PUBLIC	??_C@_05CFHFIAJO@codes?$AA@			; `string'
PUBLIC	??_C@_0M@GMACFGDH@charpattern?$AA@		; `string'
;	COMDAT ??_C@_0M@GMACFGDH@charpattern?$AA@
CONST	SEGMENT
??_C@_0M@GMACFGDH@charpattern?$AA@ DB 'charpattern', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFHFIAJO@codes?$AA@
CONST	SEGMENT
??_C@_05CFHFIAJO@codes?$AA@ DB 'codes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKCJCHLK@len?$AA@
CONST	SEGMENT
??_C@_03BKCJCHLK@len?$AA@ DB 'len', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENMBGAPA@char?$AA@
CONST	SEGMENT
??_C@_04ENMBGAPA@char?$AA@ DB 'char', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HHCEKEIA@codepoint?$AA@
CONST	SEGMENT
??_C@_09HHCEKEIA@codepoint?$AA@ DB 'codepoint', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLHHMIGM@offset?$AA@
CONST	SEGMENT
??_C@_06KLHHMIGM@offset?$AA@ DB 'offset', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
?limits@?1??utf8_decode@@9@9 DD 0ffH			; `utf8_decode'::`2'::limits
	DD	07fH
	DD	07ffH
	DD	0ffffH
funcs	DQ	FLAT:??_C@_06KLHHMIGM@offset?$AA@
	DQ	FLAT:byteoffset
	DQ	FLAT:??_C@_09HHCEKEIA@codepoint?$AA@
	DQ	FLAT:codepoint
	DQ	FLAT:??_C@_04ENMBGAPA@char?$AA@
	DQ	FLAT:utfchar
	DQ	FLAT:??_C@_03BKCJCHLK@len?$AA@
	DQ	FLAT:utflen
	DQ	FLAT:??_C@_05CFHFIAJO@codes?$AA@
	DQ	FLAT:iter_codes
	DQ	FLAT:??_C@_0M@GMACFGDH@charpattern?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
CONST	ENDS
PUBLIC	luaopen_utf8
PUBLIC	??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@ ; `string'
PUBLIC	??_C@_0BN@IINPNO@final?5position?5out?5of?5string?$AA@ ; `string'
PUBLIC	??_C@_0N@FCPHIMMG@out?5of?5range?$AA@		; `string'
PUBLIC	??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BD@MJACNLBA@invalid?5UTF?98?5code?$AA@	; `string'
PUBLIC	??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_02PJPEALPH@?$CFU?$AA@			; `string'
PUBLIC	??_C@_0BG@OBAFCJJL@position?5out?5of?5range?$AA@ ; `string'
PUBLIC	??_C@_0CI@HDBIKOFJ@initial?5position?5is?5a?5continuati@ ; `string'
PUBLIC	??_C@_0P@NELPIPKN@?$FL?$AA?9?$HP?B?9?t?$FN?$FL?$IA?9?$LP?$FN?$CK?$AA@ ; `string'
PUBLIC	__real@405bc00000000000
EXTRN	lua_gettop:PROC
EXTRN	lua_pushvalue:PROC
EXTRN	lua_tointegerx:PROC
EXTRN	lua_pushnil:PROC
EXTRN	lua_pushinteger:PROC
EXTRN	lua_pushlstring:PROC
EXTRN	lua_pushfstring:PROC
EXTRN	lua_pushcclosure:PROC
EXTRN	lua_createtable:PROC
EXTRN	lua_setfield:PROC
EXTRN	luaL_checkversion_:PROC
EXTRN	luaL_argerror:PROC
EXTRN	luaL_checklstring:PROC
EXTRN	luaL_checkinteger:PROC
EXTRN	luaL_optinteger:PROC
EXTRN	luaL_checkstack:PROC
EXTRN	luaL_error:PROC
EXTRN	luaL_setfuncs:PROC
EXTRN	luaL_buffinit:PROC
EXTRN	luaL_addvalue:PROC
EXTRN	luaL_pushresult:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaopen_utf8 DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$luaopen_utf8
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf8_decode DD imagerel utf8_decode
	DD	imagerel utf8_decode+166
	DD	imagerel $unwind$utf8_decode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$utflen DD imagerel utflen
	DD	imagerel utflen+433
	DD	imagerel $unwind$utflen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$codepoint DD imagerel codepoint
	DD	imagerel codepoint+472
	DD	imagerel $unwind$codepoint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pushutfchar DD imagerel pushutfchar
	DD	imagerel pushutfchar+86
	DD	imagerel $unwind$pushutfchar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$utfchar DD imagerel utfchar
	DD	imagerel utfchar+134
	DD	imagerel $unwind$utfchar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utfchar DD imagerel utfchar+134
	DD	imagerel utfchar+224
	DD	imagerel $chain$0$utfchar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$utfchar DD imagerel utfchar+224
	DD	imagerel utfchar+276
	DD	imagerel $chain$1$utfchar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$byteoffset DD imagerel byteoffset
	DD	imagerel byteoffset+377
	DD	imagerel $unwind$byteoffset
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$iter_aux DD imagerel iter_aux
	DD	imagerel iter_aux+240
	DD	imagerel $unwind$iter_aux
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$iter_codes DD imagerel iter_codes
	DD	imagerel iter_codes+73
	DD	imagerel $unwind$iter_codes
pdata	ENDS
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_0P@NELPIPKN@?$FL?$AA?9?$HP?B?9?t?$FN?$FL?$IA?9?$LP?$FN?$CK?$AA@
CONST	SEGMENT
??_C@_0P@NELPIPKN@?$FL?$AA?9?$HP?B?9?t?$FN?$FL?$IA?9?$LP?$FN?$CK?$AA@ DB '['
	DB	00H, '-', 07fH, 0c2H, '-', 0f4H, '][', 080H, '-', 0bfH, ']*', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HDBIKOFJ@initial?5position?5is?5a?5continuati@
CONST	SEGMENT
??_C@_0CI@HDBIKOFJ@initial?5position?5is?5a?5continuati@ DB 'initial posi'
	DB	'tion is a continuation byte', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OBAFCJJL@position?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BG@OBAFCJJL@position?5out?5of?5range?$AA@ DB 'position out of rang'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02PJPEALPH@?$CFU?$AA@
CONST	SEGMENT
??_C@_02PJPEALPH@?$CFU?$AA@ DB '%U', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@ DB 'value out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MJACNLBA@invalid?5UTF?98?5code?$AA@
CONST	SEGMENT
??_C@_0BD@MJACNLBA@invalid?5UTF?98?5code?$AA@ DB 'invalid UTF-8 code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@ DB 'string slice too lon'
	DB	'g', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FCPHIMMG@out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0N@FCPHIMMG@out?5of?5range?$AA@ DB 'out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IINPNO@final?5position?5out?5of?5string?$AA@
CONST	SEGMENT
??_C@_0BN@IINPNO@final?5position?5out?5of?5string?$AA@ DB 'final position'
	DB	' out of string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@
CONST	SEGMENT
??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@ DB 'initial po'
	DB	'sition out of string', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_codes DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_aux DD 060f01H
	DD	09640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$byteoffset DD 081201H
	DD	0a5412H
	DD	083412H
	DD	0e00e3212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$utfchar DD 021H
	DD	imagerel utfchar
	DD	imagerel utfchar+134
	DD	imagerel $unwind$utfchar
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utfchar DD 020821H
	DD	040d6408H
	DD	imagerel utfchar
	DD	imagerel utfchar+134
	DD	imagerel $unwind$utfchar
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utfchar DD 072a19H
	DD	040f5418H
	DD	040e3418H
	DD	040a0118H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	02040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pushutfchar DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codepoint DD 081201H
	DD	0a5412H
	DD	083412H
	DD	0e00e3212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utflen DD 0a1801H
	DD	0b6418H
	DD	0a5418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf8_decode DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaopen_utf8 DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT iter_codes
_TEXT	SEGMENT
L$ = 48
iter_codes PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 225
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 226
  00006	45 33 c0	 xor	 r8d, r8d
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00010	e8 00 00 00 00	 call	 luaL_checklstring
; Line 227
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:iter_aux
  0001c	45 33 c0	 xor	 r8d, r8d
  0001f	48 8b cb	 mov	 rcx, rbx
  00022	e8 00 00 00 00	 call	 lua_pushcclosure
; Line 228
  00027	ba 01 00 00 00	 mov	 edx, 1
  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	e8 00 00 00 00	 call	 lua_pushvalue
; Line 229
  00034	33 d2		 xor	 edx, edx
  00036	48 8b cb	 mov	 rcx, rbx
  00039	e8 00 00 00 00	 call	 lua_pushinteger
; Line 230
  0003e	b8 03 00 00 00	 mov	 eax, 3
; Line 231
  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5b		 pop	 rbx
  00048	c3		 ret	 0
iter_codes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT iter_aux
_TEXT	SEGMENT
L$ = 48
code$1 = 56
len$ = 64
iter_aux PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 201
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 203
  0000f	4c 8d 44 24 40	 lea	 r8, QWORD PTR len$[rsp]
  00014	ba 01 00 00 00	 mov	 edx, 1
  00019	48 8b f1	 mov	 rsi, rcx
  0001c	e8 00 00 00 00	 call	 luaL_checklstring
; Line 204
  00021	45 33 c0	 xor	 r8d, r8d
  00024	48 8b ce	 mov	 rcx, rsi
  00027	41 8d 50 02	 lea	 edx, QWORD PTR [r8+2]
  0002b	48 8b f8	 mov	 rdi, rax
  0002e	e8 00 00 00 00	 call	 lua_tointegerx
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR len$[rsp]
  00038	48 8b d8	 mov	 rbx, rax
  0003b	48 ff cb	 dec	 rbx
; Line 205
  0003e	79 04		 jns	 SHORT $LN9@iter_aux
; Line 206
  00040	33 db		 xor	 ebx, ebx
  00042	eb 2a		 jmp	 SHORT $LN5@iter_aux
$LN9@iter_aux:
; Line 207
  00044	48 3b d9	 cmp	 rbx, rcx
  00047	0f 8d 91 00 00
	00		 jge	 $LN16@iter_aux
; Line 209
  0004d	0f b6 44 3b 01	 movzx	 eax, BYTE PTR [rbx+rdi+1]
  00052	48 ff c3	 inc	 rbx
  00055	24 c0		 and	 al, 192			; 000000c0H
  00057	3c 80		 cmp	 al, 128			; 00000080H
  00059	75 13		 jne	 SHORT $LN5@iter_aux
  0005b	0f 1f 44 00 00	 npad	 5
$LL6@iter_aux:
  00060	0f b6 44 3b 01	 movzx	 eax, BYTE PTR [rbx+rdi+1]
  00065	48 ff c3	 inc	 rbx
  00068	24 c0		 and	 al, 192			; 000000c0H
  0006a	3c 80		 cmp	 al, 128			; 00000080H
  0006c	74 f2		 je	 SHORT $LL6@iter_aux
$LN5@iter_aux:
; Line 211
  0006e	48 3b d9	 cmp	 rbx, rcx
  00071	7d 6b		 jge	 SHORT $LN16@iter_aux
; Line 215
  00073	48 8d 0c 3b	 lea	 rcx, QWORD PTR [rbx+rdi]
  00077	48 8d 54 24 38	 lea	 rdx, QWORD PTR code$1[rsp]
  0007c	e8 00 00 00 00	 call	 utf8_decode
; Line 216
  00081	48 85 c0	 test	 rax, rax
  00084	74 39		 je	 SHORT $LN1@iter_aux
  00086	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00089	80 e1 c0	 and	 cl, 192			; 000000c0H
  0008c	80 f9 80	 cmp	 cl, 128			; 00000080H
  0008f	74 2e		 je	 SHORT $LN1@iter_aux
; Line 218
  00091	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  00095	48 8b ce	 mov	 rcx, rsi
  00098	e8 00 00 00 00	 call	 lua_pushinteger
; Line 219
  0009d	48 63 54 24 38	 movsxd	 rdx, DWORD PTR code$1[rsp]
  000a2	48 8b ce	 mov	 rcx, rsi
  000a5	e8 00 00 00 00	 call	 lua_pushinteger
; Line 220
  000aa	b8 02 00 00 00	 mov	 eax, 2
; Line 222
  000af	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b4	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000b9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bd	5f		 pop	 rdi
  000be	c3		 ret	 0
$LN1@iter_aux:
; Line 217
  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@MJACNLBA@invalid?5UTF?98?5code?$AA@
  000c6	48 8b ce	 mov	 rcx, rsi
  000c9	e8 00 00 00 00	 call	 luaL_error
; Line 222
  000ce	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d3	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000d8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000dc	5f		 pop	 rdi
  000dd	c3		 ret	 0
$LN16@iter_aux:
  000de	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e3	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000e8	33 c0		 xor	 eax, eax
  000ea	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ee	5f		 pop	 rdi
  000ef	c3		 ret	 0
iter_aux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT byteoffset
_TEXT	SEGMENT
L$ = 64
len$ = 72
byteoffset PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 160
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 56		 push	 r14
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 162
  00012	4c 8d 44 24 48	 lea	 r8, QWORD PTR len$[rsp]
  00017	ba 01 00 00 00	 mov	 edx, 1
  0001c	4c 8b f1	 mov	 r14, rcx
  0001f	e8 00 00 00 00	 call	 luaL_checklstring
; Line 163
  00024	ba 02 00 00 00	 mov	 edx, 2
  00029	49 8b ce	 mov	 rcx, r14
  0002c	48 8b f8	 mov	 rdi, rax
  0002f	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 164
  00034	48 8b 6c 24 48	 mov	 rbp, QWORD PTR len$[rsp]
  00039	48 8b f0	 mov	 rsi, rax
  0003c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00042	48 85 c0	 test	 rax, rax
  00045	79 04		 jns	 SHORT $LN24@byteoffset
  00047	4c 8d 45 01	 lea	 r8, QWORD PTR [rbp+1]
$LN24@byteoffset:
; Line 165
  0004b	ba 03 00 00 00	 mov	 edx, 3
  00050	49 8b ce	 mov	 rcx, r14
  00053	e8 00 00 00 00	 call	 luaL_optinteger
  00058	48 8b d8	 mov	 rbx, rax
  0005b	48 85 c0	 test	 rax, rax
  0005e	79 12		 jns	 SHORT $LN27@byteoffset
  00060	48 f7 d8	 neg	 rax
  00063	48 3b c5	 cmp	 rax, rbp
  00066	76 04		 jbe	 SHORT $LN28@byteoffset
  00068	33 db		 xor	 ebx, ebx
  0006a	eb 19		 jmp	 SHORT $LN25@byteoffset
$LN28@byteoffset:
  0006c	48 ff c3	 inc	 rbx
  0006f	48 03 dd	 add	 rbx, rbp
$LN27@byteoffset:
; Line 167
  00072	48 83 fb 01	 cmp	 rbx, 1
  00076	7c 0d		 jl	 SHORT $LN25@byteoffset
  00078	48 8b 4c 24 48	 mov	 rcx, QWORD PTR len$[rsp]
  0007d	48 ff cb	 dec	 rbx
  00080	48 3b d9	 cmp	 rbx, rcx
  00083	7e 19		 jle	 SHORT $LN26@byteoffset
$LN25@byteoffset:
  00085	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@OBAFCJJL@position?5out?5of?5range?$AA@
  0008c	ba 03 00 00 00	 mov	 edx, 3
  00091	49 8b ce	 mov	 rcx, r14
  00094	e8 00 00 00 00	 call	 luaL_argerror
  00099	48 8b 4c 24 48	 mov	 rcx, QWORD PTR len$[rsp]
$LN26@byteoffset:
; Line 168
  0009e	48 85 f6	 test	 rsi, rsi
  000a1	75 34		 jne	 SHORT $LN20@byteoffset
; Line 170
  000a3	48 85 db	 test	 rbx, rbx
  000a6	0f 8e 9f 00 00
	00		 jle	 $LN56@byteoffset
  000ac	0f 1f 40 00	 npad	 4
$LL19@byteoffset:
  000b0	0f b6 04 3b	 movzx	 eax, BYTE PTR [rbx+rdi]
  000b4	24 c0		 and	 al, 192			; 000000c0H
  000b6	3c 80		 cmp	 al, 128			; 00000080H
  000b8	0f 85 8d 00 00
	00		 jne	 $LN56@byteoffset
  000be	48 ff cb	 dec	 rbx
  000c1	48 85 db	 test	 rbx, rbx
  000c4	7f ea		 jg	 SHORT $LL19@byteoffset
; Line 194
  000c6	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  000ca	49 8b ce	 mov	 rcx, r14
  000cd	e8 00 00 00 00	 call	 lua_pushinteger
; Line 195
  000d2	e9 8a 00 00 00	 jmp	 $LN59@byteoffset
$LN20@byteoffset:
; Line 173
  000d7	0f b6 04 3b	 movzx	 eax, BYTE PTR [rbx+rdi]
  000db	24 c0		 and	 al, 192			; 000000c0H
  000dd	3c 80		 cmp	 al, 128			; 00000080H
  000df	75 14		 jne	 SHORT $LN16@byteoffset
; Line 174
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@HDBIKOFJ@initial?5position?5is?5a?5continuati@
  000e8	49 8b ce	 mov	 rcx, r14
  000eb	e8 00 00 00 00	 call	 luaL_error
  000f0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR len$[rsp]
$LN16@byteoffset:
; Line 175
  000f5	48 85 f6	 test	 rsi, rsi
  000f8	79 24		 jns	 SHORT $LN15@byteoffset
  000fa	66 0f 1f 44 00
	00		 npad	 6
$LL14@byteoffset:
; Line 176
  00100	48 85 db	 test	 rbx, rbx
  00103	7e 41		 jle	 SHORT $LN57@byteoffset
$LL12@byteoffset:
; Line 178
  00105	48 ff cb	 dec	 rbx
; Line 179
  00108	48 85 db	 test	 rbx, rbx
  0010b	7e 0a		 jle	 SHORT $LN9@byteoffset
  0010d	0f b6 04 3b	 movzx	 eax, BYTE PTR [rbx+rdi]
  00111	24 c0		 and	 al, 192			; 000000c0H
  00113	3c 80		 cmp	 al, 128			; 00000080H
  00115	74 ee		 je	 SHORT $LL12@byteoffset
$LN9@byteoffset:
; Line 180
  00117	48 ff c6	 inc	 rsi
; Line 176
  0011a	78 e4		 js	 SHORT $LL14@byteoffset
; Line 183
  0011c	eb 28		 jmp	 SHORT $LN57@byteoffset
$LN15@byteoffset:
; Line 184
  0011e	48 ff ce	 dec	 rsi
; Line 185
  00121	48 85 f6	 test	 rsi, rsi
  00124	7e 23		 jle	 SHORT $LN58@byteoffset
$LL7@byteoffset:
  00126	48 3b d9	 cmp	 rbx, rcx
  00129	7d 1b		 jge	 SHORT $LN57@byteoffset
  0012b	0f 1f 44 00 00	 npad	 5
$LL5@byteoffset:
; Line 188
  00130	0f b6 44 3b 01	 movzx	 eax, BYTE PTR [rbx+rdi+1]
  00135	48 ff c3	 inc	 rbx
  00138	24 c0		 and	 al, 192			; 000000c0H
  0013a	3c 80		 cmp	 al, 128			; 00000080H
  0013c	74 f2		 je	 SHORT $LL5@byteoffset
; Line 189
  0013e	48 ff ce	 dec	 rsi
  00141	48 85 f6	 test	 rsi, rsi
  00144	7f e0		 jg	 SHORT $LL7@byteoffset
$LN57@byteoffset:
; Line 193
  00146	48 85 f6	 test	 rsi, rsi
$LN58@byteoffset:
  00149	75 0e		 jne	 SHORT $LN2@byteoffset
$LN56@byteoffset:
; Line 194
  0014b	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  0014f	49 8b ce	 mov	 rcx, r14
  00152	e8 00 00 00 00	 call	 lua_pushinteger
; Line 195
  00157	eb 08		 jmp	 SHORT $LN59@byteoffset
$LN2@byteoffset:
; Line 196
  00159	49 8b ce	 mov	 rcx, r14
  0015c	e8 00 00 00 00	 call	 lua_pushnil
$LN59@byteoffset:
; Line 198
  00161	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00166	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0016b	b8 01 00 00 00	 mov	 eax, 1
  00170	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00174	41 5e		 pop	 r14
  00176	5f		 pop	 rdi
  00177	5e		 pop	 rsi
  00178	c3		 ret	 0
byteoffset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT utfchar
_TEXT	SEGMENT
b$1 = 32
__$ArrayPad$ = 8256
L$ = 8288
utfchar	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 138
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	57		 push	 rdi
  0000b	b8 50 20 00 00	 mov	 eax, 8272		; 00002050H
  00010	e8 00 00 00 00	 call	 __chkstk
  00015	48 2b e0	 sub	 rsp, rax
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 40
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002a	48 8b d9	 mov	 rbx, rcx
; Line 139
  0002d	e8 00 00 00 00	 call	 lua_gettop
; Line 141
  00032	48 8b cb	 mov	 rcx, rbx
  00035	8b e8		 mov	 ebp, eax
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 37		 jne	 SHORT $LN5@utfchar
  0003c	8b d0		 mov	 edx, eax
  0003e	e8 00 00 00 00	 call	 luaL_checkinteger
  00043	48 8b f8	 mov	 rdi, rax
  00046	48 3d ff ff 10
	00		 cmp	 rax, 1114111		; 0010ffffH
  0004c	76 11		 jbe	 SHORT $LN11@utfchar
  0004e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
  00055	8b d5		 mov	 edx, ebp
  00057	48 8b cb	 mov	 rcx, rbx
  0005a	e8 00 00 00 00	 call	 luaL_argerror
$LN11@utfchar:
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02PJPEALPH@?$CFU?$AA@
  00066	44 8b c7	 mov	 r8d, edi
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 lua_pushfstring
; Line 142
  00071	eb 77		 jmp	 SHORT $LN22@utfchar
$LN5@utfchar:
; Line 145
  00073	48 8d 54 24 20	 lea	 rdx, QWORD PTR b$1[rsp]
  00078	e8 00 00 00 00	 call	 luaL_buffinit
; Line 146
  0007d	bf 01 00 00 00	 mov	 edi, 1
  00082	3b ef		 cmp	 ebp, edi
  00084	7c 5a		 jl	 SHORT $LN1@utfchar
  00086	48 89 b4 24 68
	20 00 00	 mov	 QWORD PTR [rsp+8296], rsi
  0008e	66 90		 npad	 2
$LL3@utfchar:
; Line 147
  00090	8b d7		 mov	 edx, edi
  00092	48 8b cb	 mov	 rcx, rbx
  00095	e8 00 00 00 00	 call	 luaL_checkinteger
  0009a	48 8b f0	 mov	 rsi, rax
  0009d	48 3d ff ff 10
	00		 cmp	 rax, 1114111		; 0010ffffH
  000a3	76 11		 jbe	 SHORT $LN15@utfchar
  000a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
  000ac	8b d7		 mov	 edx, edi
  000ae	48 8b cb	 mov	 rcx, rbx
  000b1	e8 00 00 00 00	 call	 luaL_argerror
$LN15@utfchar:
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02PJPEALPH@?$CFU?$AA@
  000bd	44 8b c6	 mov	 r8d, esi
  000c0	48 8b cb	 mov	 rcx, rbx
  000c3	e8 00 00 00 00	 call	 lua_pushfstring
; Line 148
  000c8	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$1[rsp]
  000cd	e8 00 00 00 00	 call	 luaL_addvalue
  000d2	ff c7		 inc	 edi
  000d4	3b fd		 cmp	 edi, ebp
  000d6	7e b8		 jle	 SHORT $LL3@utfchar
  000d8	48 8b b4 24 68
	20 00 00	 mov	 rsi, QWORD PTR [rsp+8296]
$LN1@utfchar:
; Line 150
  000e0	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$1[rsp]
  000e5	e8 00 00 00 00	 call	 luaL_pushresult
$LN22@utfchar:
; Line 152
  000ea	b8 01 00 00 00	 mov	 eax, 1
; Line 153
  000ef	48 8b 8c 24 40
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f7	48 33 cc	 xor	 rcx, rsp
  000fa	e8 00 00 00 00	 call	 __security_check_cookie
  000ff	4c 8d 9c 24 50
	20 00 00	 lea	 r11, QWORD PTR [rsp+8272]
  00107	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  0010b	49 8b 6b 28	 mov	 rbp, QWORD PTR [r11+40]
  0010f	49 8b e3	 mov	 rsp, r11
  00112	5f		 pop	 rdi
  00113	c3		 ret	 0
utfchar	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT pushutfchar
_TEXT	SEGMENT
L$ = 48
arg$ = 56
pushutfchar PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 128
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b f2		 mov	 esi, edx
  00011	48 8b d9	 mov	 rbx, rcx
; Line 129
  00014	e8 00 00 00 00	 call	 luaL_checkinteger
  00019	48 8b f8	 mov	 rdi, rax
  0001c	48 3d ff ff 10
	00		 cmp	 rax, 1114111		; 0010ffffH
  00022	76 11		 jbe	 SHORT $LN4@pushutfcha
; Line 130
  00024	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
  0002b	8b d6		 mov	 edx, esi
  0002d	48 8b cb	 mov	 rcx, rbx
  00030	e8 00 00 00 00	 call	 luaL_argerror
$LN4@pushutfcha:
; Line 131
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02PJPEALPH@?$CFU?$AA@
  0003c	44 8b c7	 mov	 r8d, edi
  0003f	48 8b cb	 mov	 rcx, rbx
; Line 132
  00042	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00047	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5f		 pop	 rdi
; Line 131
  00051	e9 00 00 00 00	 jmp	 lua_pushfstring
pushutfchar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT codepoint
_TEXT	SEGMENT
L$ = 64
len$ = 72
codepoint PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 100
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 56		 push	 r14
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 102
  00012	4c 8d 44 24 48	 lea	 r8, QWORD PTR len$[rsp]
  00017	ba 01 00 00 00	 mov	 edx, 1
  0001c	4c 8b f1	 mov	 r14, rcx
  0001f	e8 00 00 00 00	 call	 luaL_checklstring
; Line 103
  00024	48 8b 7c 24 48	 mov	 rdi, QWORD PTR len$[rsp]
  00029	ba 02 00 00 00	 mov	 edx, 2
  0002e	44 8d 42 ff	 lea	 r8d, QWORD PTR [rdx-1]
  00032	49 8b ce	 mov	 rcx, r14
  00035	48 8b e8	 mov	 rbp, rax
  00038	e8 00 00 00 00	 call	 luaL_optinteger
  0003d	48 8b d8	 mov	 rbx, rax
  00040	48 85 c0	 test	 rax, rax
  00043	79 12		 jns	 SHORT $LN10@codepoint
  00045	48 f7 d8	 neg	 rax
  00048	48 3b c7	 cmp	 rax, rdi
  0004b	76 04		 jbe	 SHORT $LN11@codepoint
  0004d	33 db		 xor	 ebx, ebx
  0004f	eb 06		 jmp	 SHORT $LN10@codepoint
$LN11@codepoint:
  00051	48 ff c3	 inc	 rbx
  00054	48 03 df	 add	 rbx, rdi
$LN10@codepoint:
; Line 104
  00057	48 8b 74 24 48	 mov	 rsi, QWORD PTR len$[rsp]
  0005c	4c 8b c3	 mov	 r8, rbx
  0005f	ba 03 00 00 00	 mov	 edx, 3
  00064	49 8b ce	 mov	 rcx, r14
  00067	e8 00 00 00 00	 call	 luaL_optinteger
  0006c	48 8b f8	 mov	 rdi, rax
  0006f	48 85 c0	 test	 rax, rax
  00072	79 12		 jns	 SHORT $LN16@codepoint
  00074	48 f7 d8	 neg	 rax
  00077	48 3b c6	 cmp	 rax, rsi
  0007a	76 04		 jbe	 SHORT $LN17@codepoint
  0007c	33 ff		 xor	 edi, edi
  0007e	eb 06		 jmp	 SHORT $LN16@codepoint
$LN17@codepoint:
  00080	48 ff c7	 inc	 rdi
  00083	48 03 fe	 add	 rdi, rsi
$LN16@codepoint:
; Line 107
  00086	48 83 fb 01	 cmp	 rbx, 1
  0008a	7d 14		 jge	 SHORT $LN8@codepoint
  0008c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@FCPHIMMG@out?5of?5range?$AA@
  00093	ba 02 00 00 00	 mov	 edx, 2
  00098	49 8b ce	 mov	 rcx, r14
  0009b	e8 00 00 00 00	 call	 luaL_argerror
$LN8@codepoint:
; Line 108
  000a0	48 3b 7c 24 48	 cmp	 rdi, QWORD PTR len$[rsp]
  000a5	7e 14		 jle	 SHORT $LN9@codepoint
  000a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@FCPHIMMG@out?5of?5range?$AA@
  000ae	ba 03 00 00 00	 mov	 edx, 3
  000b3	49 8b ce	 mov	 rcx, r14
  000b6	e8 00 00 00 00	 call	 luaL_argerror
$LN9@codepoint:
; Line 109
  000bb	48 3b df	 cmp	 rbx, rdi
  000be	7e 07		 jle	 SHORT $LN5@codepoint
  000c0	33 c0		 xor	 eax, eax
  000c2	e9 ed 00 00 00	 jmp	 $LN6@codepoint
$LN5@codepoint:
; Line 110
  000c7	48 8b c7	 mov	 rax, rdi
; Line 111
  000ca	49 8b ce	 mov	 rcx, r14
  000cd	48 2b c3	 sub	 rax, rbx
  000d0	48 3d ff ff ff
	7f		 cmp	 rax, 2147483647		; 7fffffffH
  000d6	7c 11		 jl	 SHORT $LN4@codepoint
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
  000df	e8 00 00 00 00	 call	 luaL_error
  000e4	e9 cb 00 00 00	 jmp	 $LN6@codepoint
$LN4@codepoint:
; Line 113
  000e9	8b d7		 mov	 edx, edi
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
  000f2	2b d3		 sub	 edx, ebx
  000f4	ff c2		 inc	 edx
  000f6	e8 00 00 00 00	 call	 luaL_checkstack
; Line 116
  000fb	48 ff cb	 dec	 rbx
  000fe	48 03 fd	 add	 rdi, rbp
  00101	48 03 dd	 add	 rbx, rbp
  00104	33 f6		 xor	 esi, esi
  00106	48 3b df	 cmp	 rbx, rdi
  00109	0f 83 a3 00 00
	00		 jae	 $LN2@codepoint
  0010f	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:?limits@?1??utf8_decode@@9@9
  00116	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL3@codepoint:
; Line 118
  00120	0f b6 13	 movzx	 edx, BYTE PTR [rbx]
  00123	45 33 c0	 xor	 r8d, r8d
  00126	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H
  0012c	73 05		 jae	 SHORT $LN29@codepoint
  0012e	44 8b c2	 mov	 r8d, edx
  00131	eb 64		 jmp	 SHORT $LN28@codepoint
$LN29@codepoint:
  00133	45 33 d2	 xor	 r10d, r10d
  00136	45 33 c9	 xor	 r9d, r9d
  00139	f6 c2 40	 test	 dl, 64			; 00000040H
  0013c	74 31		 je	 SHORT $LN26@codepoint
  0013e	66 90		 npad	 2
$LL27@codepoint:
  00140	41 0f b6 44 19
	01		 movzx	 eax, BYTE PTR [r9+rbx+1]
  00146	49 ff c1	 inc	 r9
  00149	41 ff c2	 inc	 r10d
  0014c	8b c8		 mov	 ecx, eax
  0014e	81 e1 c0 00 00
	00		 and	 ecx, 192		; 000000c0H
  00154	80 f9 80	 cmp	 cl, -128		; ffffffffffffff80H
  00157	75 6e		 jne	 SHORT $LN35@codepoint
  00159	41 8b c8	 mov	 ecx, r8d
  0015c	83 e0 3f	 and	 eax, 63			; 0000003fH
  0015f	03 d2		 add	 edx, edx
  00161	c1 e1 06	 shl	 ecx, 6
  00164	44 8b c0	 mov	 r8d, eax
  00167	44 0b c1	 or	 r8d, ecx
  0016a	f6 c2 40	 test	 dl, 64			; 00000040H
  0016d	75 d1		 jne	 SHORT $LL27@codepoint
$LN26@codepoint:
  0016f	83 e2 7f	 and	 edx, 127		; 0000007fH
  00172	43 8d 0c 92	 lea	 ecx, DWORD PTR [r10+r10*4]
  00176	d3 e2		 shl	 edx, cl
  00178	44 0b c2	 or	 r8d, edx
  0017b	41 83 fa 03	 cmp	 r10d, 3
  0017f	7f 46		 jg	 SHORT $LN35@codepoint
  00181	41 81 f8 ff ff
	10 00		 cmp	 r8d, 1114111		; 0010ffffH
  00188	77 3d		 ja	 SHORT $LN35@codepoint
  0018a	46 3b 44 8d 00	 cmp	 r8d, DWORD PTR [rbp+r9*4]
  0018f	76 36		 jbe	 SHORT $LN35@codepoint
  00191	49 63 c2	 movsxd	 rax, r10d
  00194	48 03 d8	 add	 rbx, rax
$LN28@codepoint:
  00197	48 ff c3	 inc	 rbx
; Line 119
  0019a	74 2b		 je	 SHORT $LN35@codepoint
; Line 121
  0019c	49 63 d0	 movsxd	 rdx, r8d
  0019f	49 8b ce	 mov	 rcx, r14
  001a2	e8 00 00 00 00	 call	 lua_pushinteger
; Line 122
  001a7	ff c6		 inc	 esi
  001a9	48 3b df	 cmp	 rbx, rdi
  001ac	0f 82 6e ff ff
	ff		 jb	 $LL3@codepoint
$LN2@codepoint:
; Line 124
  001b2	8b c6		 mov	 eax, esi
$LN6@codepoint:
; Line 125
  001b4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001b9	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  001be	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001c2	41 5e		 pop	 r14
  001c4	5f		 pop	 rdi
  001c5	5e		 pop	 rsi
  001c6	c3		 ret	 0
$LN35@codepoint:
; Line 120
  001c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@MJACNLBA@invalid?5UTF?98?5code?$AA@
  001ce	49 8b ce	 mov	 rcx, r14
  001d1	e8 00 00 00 00	 call	 luaL_error
  001d6	eb dc		 jmp	 SHORT $LN6@codepoint
codepoint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT utflen
_TEXT	SEGMENT
L$ = 64
len$ = 72
utflen	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 71
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 72
  00018	33 ed		 xor	 ebp, ebp
; Line 74
  0001a	4c 8d 44 24 48	 lea	 r8, QWORD PTR len$[rsp]
  0001f	4c 8b f1	 mov	 r14, rcx
  00022	8d 55 01	 lea	 edx, QWORD PTR [rbp+1]
  00025	e8 00 00 00 00	 call	 luaL_checklstring
; Line 75
  0002a	48 8b 7c 24 48	 mov	 rdi, QWORD PTR len$[rsp]
  0002f	8d 55 02	 lea	 edx, QWORD PTR [rbp+2]
  00032	44 8d 45 01	 lea	 r8d, QWORD PTR [rbp+1]
  00036	49 8b ce	 mov	 rcx, r14
  00039	4c 8b f8	 mov	 r15, rax
  0003c	e8 00 00 00 00	 call	 luaL_optinteger
  00041	48 8b d8	 mov	 rbx, rax
  00044	48 85 c0	 test	 rax, rax
  00047	79 12		 jns	 SHORT $LN9@utflen
  00049	48 f7 d8	 neg	 rax
  0004c	48 3b c7	 cmp	 rax, rdi
  0004f	76 04		 jbe	 SHORT $LN10@utflen
  00051	33 db		 xor	 ebx, ebx
  00053	eb 06		 jmp	 SHORT $LN9@utflen
$LN10@utflen:
  00055	48 ff c3	 inc	 rbx
  00058	48 03 df	 add	 rbx, rdi
$LN9@utflen:
; Line 76
  0005b	48 8b 74 24 48	 mov	 rsi, QWORD PTR len$[rsp]
  00060	49 83 c8 ff	 or	 r8, -1
  00064	49 8b ce	 mov	 rcx, r14
  00067	41 8d 50 04	 lea	 edx, QWORD PTR [r8+4]
  0006b	e8 00 00 00 00	 call	 luaL_optinteger
  00070	48 8b f8	 mov	 rdi, rax
  00073	48 85 c0	 test	 rax, rax
  00076	79 12		 jns	 SHORT $LN15@utflen
  00078	48 f7 d8	 neg	 rax
  0007b	48 3b c6	 cmp	 rax, rsi
  0007e	76 04		 jbe	 SHORT $LN16@utflen
  00080	33 ff		 xor	 edi, edi
  00082	eb 06		 jmp	 SHORT $LN15@utflen
$LN16@utflen:
  00084	48 ff c7	 inc	 rdi
  00087	48 03 fe	 add	 rdi, rsi
$LN15@utflen:
; Line 78
  0008a	48 83 fb 01	 cmp	 rbx, 1
  0008e	7c 0d		 jl	 SHORT $LN6@utflen
  00090	48 8b 44 24 48	 mov	 rax, QWORD PTR len$[rsp]
  00095	48 ff cb	 dec	 rbx
  00098	48 3b d8	 cmp	 rbx, rax
  0009b	7e 19		 jle	 SHORT $LN7@utflen
$LN6@utflen:
  0009d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@
  000a4	ba 02 00 00 00	 mov	 edx, 2
  000a9	49 8b ce	 mov	 rcx, r14
  000ac	e8 00 00 00 00	 call	 luaL_argerror
  000b1	48 8b 44 24 48	 mov	 rax, QWORD PTR len$[rsp]
$LN7@utflen:
; Line 80
  000b6	48 ff cf	 dec	 rdi
  000b9	48 3b f8	 cmp	 rdi, rax
  000bc	7c 14		 jl	 SHORT $LN31@utflen
  000be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BN@IINPNO@final?5position?5out?5of?5string?$AA@
  000c5	ba 03 00 00 00	 mov	 edx, 3
  000ca	49 8b ce	 mov	 rcx, r14
  000cd	e8 00 00 00 00	 call	 luaL_argerror
$LN31@utflen:
; Line 81
  000d2	48 3b df	 cmp	 rbx, rdi
  000d5	0f 8f 92 00 00
	00		 jg	 $LN2@utflen
  000db	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:?limits@?1??utf8_decode@@9@9
$LL3@utflen:
; Line 82
  000e2	42 0f b6 14 3b	 movzx	 edx, BYTE PTR [rbx+r15]
  000e7	4e 8d 1c 3b	 lea	 r11, QWORD PTR [rbx+r15]
  000eb	45 33 d2	 xor	 r10d, r10d
  000ee	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H
  000f4	72 61		 jb	 SHORT $LN27@utflen
  000f6	45 33 c9	 xor	 r9d, r9d
  000f9	45 33 c0	 xor	 r8d, r8d
  000fc	f6 c2 40	 test	 dl, 64			; 00000040H
  000ff	74 2f		 je	 SHORT $LN25@utflen
$LL26@utflen:
  00101	43 0f b6 44 18
	01		 movzx	 eax, BYTE PTR [r8+r11+1]
  00107	49 ff c0	 inc	 r8
  0010a	41 ff c1	 inc	 r9d
  0010d	8b c8		 mov	 ecx, eax
  0010f	81 e1 c0 00 00
	00		 and	 ecx, 192		; 000000c0H
  00115	80 f9 80	 cmp	 cl, -128		; ffffffffffffff80H
  00118	75 7c		 jne	 SHORT $LN34@utflen
  0011a	41 8b ca	 mov	 ecx, r10d
  0011d	83 e0 3f	 and	 eax, 63			; 0000003fH
  00120	03 d2		 add	 edx, edx
  00122	c1 e1 06	 shl	 ecx, 6
  00125	44 8b d0	 mov	 r10d, eax
  00128	44 0b d1	 or	 r10d, ecx
  0012b	f6 c2 40	 test	 dl, 64			; 00000040H
  0012e	75 d1		 jne	 SHORT $LL26@utflen
$LN25@utflen:
  00130	83 e2 7f	 and	 edx, 127		; 0000007fH
  00133	43 8d 0c 89	 lea	 ecx, DWORD PTR [r9+r9*4]
  00137	d3 e2		 shl	 edx, cl
  00139	44 0b d2	 or	 r10d, edx
  0013c	41 83 f9 03	 cmp	 r9d, 3
  00140	7f 54		 jg	 SHORT $LN34@utflen
  00142	41 81 fa ff ff
	10 00		 cmp	 r10d, 1114111		; 0010ffffH
  00149	77 4b		 ja	 SHORT $LN34@utflen
  0014b	46 3b 14 86	 cmp	 r10d, DWORD PTR [rsi+r8*4]
  0014f	76 45		 jbe	 SHORT $LN34@utflen
  00151	49 63 c1	 movsxd	 rax, r9d
  00154	4c 03 d8	 add	 r11, rax
$LN27@utflen:
  00157	49 ff c3	 inc	 r11
; Line 83
  0015a	74 3a		 je	 SHORT $LN34@utflen
; Line 88
  0015c	49 8b db	 mov	 rbx, r11
; Line 89
  0015f	ff c5		 inc	 ebp
  00161	49 2b df	 sub	 rbx, r15
  00164	48 3b df	 cmp	 rbx, rdi
  00167	0f 8e 75 ff ff
	ff		 jle	 $LL3@utflen
$LN2@utflen:
; Line 91
  0016d	48 63 d5	 movsxd	 rdx, ebp
  00170	49 8b ce	 mov	 rcx, r14
  00173	e8 00 00 00 00	 call	 lua_pushinteger
; Line 92
  00178	b8 01 00 00 00	 mov	 eax, 1
$LN4@utflen:
; Line 93
  0017d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00182	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00187	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0018c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00190	41 5f		 pop	 r15
  00192	41 5e		 pop	 r14
  00194	5f		 pop	 rdi
  00195	c3		 ret	 0
$LN34@utflen:
; Line 84
  00196	49 8b ce	 mov	 rcx, r14
  00199	e8 00 00 00 00	 call	 lua_pushnil
; Line 85
  0019e	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  001a2	49 8b ce	 mov	 rcx, r14
  001a5	e8 00 00 00 00	 call	 lua_pushinteger
; Line 86
  001aa	b8 02 00 00 00	 mov	 eax, 2
  001af	eb cc		 jmp	 SHORT $LN4@utflen
utflen	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT utf8_decode
_TEXT	SEGMENT
o$ = 8
val$ = 16
utf8_decode PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 40
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
; Line 43
  00005	44 0f b6 09	 movzx	 r9d, BYTE PTR [rcx]
; Line 44
  00009	45 33 c0	 xor	 r8d, r8d
  0000c	48 8b da	 mov	 rbx, rdx
  0000f	4c 8b d9	 mov	 r11, rcx
; Line 45
  00012	41 81 f9 80 00
	00 00		 cmp	 r9d, 128		; 00000080H
  00019	73 05		 jae	 SHORT $LN8@utf8_decod
; Line 46
  0001b	45 8b c1	 mov	 r8d, r9d
; Line 47
  0001e	eb 6c		 jmp	 SHORT $LN7@utf8_decod
$LN8@utf8_decod:
; Line 48
  00020	41 8b d0	 mov	 edx, r8d
; Line 49
  00023	41 f6 c1 40	 test	 r9b, 64			; 00000040H
  00027	74 35		 je	 SHORT $LN5@utf8_decod
; Line 48
  00029	4c 8b d1	 mov	 r10, rcx
  0002c	0f 1f 40 00	 npad	 4
$LL6@utf8_decod:
; Line 50
  00030	41 0f b6 4a 01	 movzx	 ecx, BYTE PTR [r10+1]
  00035	4d 8d 52 01	 lea	 r10, QWORD PTR [r10+1]
  00039	ff c2		 inc	 edx
; Line 51
  0003b	8b c1		 mov	 eax, ecx
  0003d	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  00042	3c 80		 cmp	 al, -128		; ffffffffffffff80H
  00044	75 58		 jne	 SHORT $LN2@utf8_decod
; Line 53
  00046	41 8b c0	 mov	 eax, r8d
  00049	83 e1 3f	 and	 ecx, 63			; 0000003fH
; Line 54
  0004c	45 03 c9	 add	 r9d, r9d
  0004f	c1 e0 06	 shl	 eax, 6
  00052	44 8b c1	 mov	 r8d, ecx
  00055	44 0b c0	 or	 r8d, eax
  00058	41 f6 c1 40	 test	 r9b, 64			; 00000040H
  0005c	75 d2		 jne	 SHORT $LL6@utf8_decod
$LN5@utf8_decod:
; Line 56
  0005e	41 83 e1 7f	 and	 r9d, 127		; 0000007fH
  00062	8d 0c 92	 lea	 ecx, DWORD PTR [rdx+rdx*4]
  00065	41 d3 e1	 shl	 r9d, cl
  00068	45 0b c1	 or	 r8d, r9d
; Line 57
  0006b	83 fa 03	 cmp	 edx, 3
  0006e	7f 2e		 jg	 SHORT $LN2@utf8_decod
  00070	41 81 f8 ff ff
	10 00		 cmp	 r8d, 1114111		; 0010ffffH
  00077	77 25		 ja	 SHORT $LN2@utf8_decod
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?limits@?1??utf8_decode@@9@9
  00080	48 63 c2	 movsxd	 rax, edx
  00083	44 3b 04 81	 cmp	 r8d, DWORD PTR [rcx+rax*4]
  00087	76 15		 jbe	 SHORT $LN2@utf8_decod
; Line 59
  00089	4c 03 d8	 add	 r11, rax
$LN7@utf8_decod:
; Line 61
  0008c	48 85 db	 test	 rbx, rbx
  0008f	74 03		 je	 SHORT $LN1@utf8_decod
  00091	44 89 03	 mov	 DWORD PTR [rbx], r8d
$LN1@utf8_decod:
; Line 62
  00094	49 8d 43 01	 lea	 rax, QWORD PTR [r11+1]
; Line 63
  00098	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0009d	c3		 ret	 0
$LN2@utf8_decod:
  0009e	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  000a3	33 c0		 xor	 eax, eax
  000a5	c3		 ret	 0
utf8_decode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT u_posrelat
_TEXT	SEGMENT
pos$ = 8
len$ = 16
u_posrelat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 31
  00000	48 8b c1	 mov	 rax, rcx
  00003	48 85 c9	 test	 rcx, rcx
  00006	79 12		 jns	 SHORT $LN1@u_posrelat
; Line 32
  00008	48 f7 d8	 neg	 rax
  0000b	48 3b c2	 cmp	 rax, rdx
  0000e	76 03		 jbe	 SHORT $LN2@u_posrelat
  00010	33 c0		 xor	 eax, eax
; Line 34
  00012	c3		 ret	 0
$LN2@u_posrelat:
; Line 33
  00013	48 8d 42 01	 lea	 rax, QWORD PTR [rdx+1]
  00017	48 03 c1	 add	 rax, rcx
$LN1@u_posrelat:
; Line 34
  0001a	c3		 ret	 0
u_posrelat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaopen_utf8
_TEXT	SEGMENT
L$ = 48
luaopen_utf8 PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lutf8lib.c
; Line 250
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 251
  00006	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@405bc00000000000
  0000e	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00014	48 8b d9	 mov	 rbx, rcx
  00017	e8 00 00 00 00	 call	 luaL_checkversion_
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	44 8d 42 06	 lea	 r8d, QWORD PTR [rdx+6]
  00025	e8 00 00 00 00	 call	 lua_createtable
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:funcs
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 luaL_setfuncs
; Line 252
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@NELPIPKN@?$FL?$AA?9?$HP?B?9?t?$FN?$FL?$IA?9?$LP?$FN?$CK?$AA@
  00043	41 b8 0e 00 00
	00		 mov	 r8d, 14
  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 lua_pushlstring
; Line 253
  00051	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@GMACFGDH@charpattern?$AA@
  00058	ba fe ff ff ff	 mov	 edx, -2
  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 lua_setfield
; Line 254
  00065	b8 01 00 00 00	 mov	 eax, 1
; Line 255
  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	5b		 pop	 rbx
  0006f	c3		 ret	 0
luaopen_utf8 ENDP
_TEXT	ENDS
END
