; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	luaO_nilobject_
CONST	SEGMENT
?log_2@?1??luaO_ceillog2@@9@9 DB 00H			; `luaO_ceillog2'::`2'::log_2
	DB	01H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
luaO_nilobject_ DQ 0000000000000000H
	DD	00H
	ORG $+4
CONST	ENDS
PUBLIC	luaO_int2fb
PUBLIC	luaO_fb2int
PUBLIC	luaO_utf8esc
PUBLIC	luaO_ceillog2
PUBLIC	luaO_arith
PUBLIC	luaO_str2num
PUBLIC	luaO_hexavalue
PUBLIC	luaO_tostring
PUBLIC	luaO_pushvfstring
PUBLIC	luaO_pushfstring
PUBLIC	luaO_chunkid
PUBLIC	??_C@_02CMANKCEM@nN?$AA@			; `string'
PUBLIC	??_C@_02CIDOMIFJ@xX?$AA@			; `string'
PUBLIC	??_C@_04BFAHMMK@?$CFlld?$AA@			; `string'
PUBLIC	??_C@_05CGOEHEFE@?$CF?414g?$AA@			; `string'
PUBLIC	??_C@_0M@MJJAFOKF@?90123456789?$AA@		; `string'
PUBLIC	??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@		; `string'
PUBLIC	??_C@_05FJJBJMMN@?$DM?2?$CFd?$DO?$AA@		; `string'
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	??_C@_01FGNFDNOH@?$CF?$AA@			; `string'
PUBLIC	??_C@_0CL@FANIKJON@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8lua_pu@ ; `string'
PUBLIC	??_C@_03KHICJKCI@?4?4?4?$AA@			; `string'
PUBLIC	??_C@_09PHLFBDIK@?$FLstring?5?$CC?$AA@		; `string'
PUBLIC	??_C@_02DEGCJHHK@?$CC?$FN?$AA@			; `string'
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__imp_localeconv:PROC
EXTRN	__imp__snprintf:PROC
EXTRN	__imp_strtod:PROC
EXTRN	__imp_strchr:PROC
EXTRN	__imp_strpbrk:PROC
EXTRN	__imp_strspn:PROC
EXTRN	luaT_trybinTM:PROC
EXTRN	luaG_runerror:PROC
EXTRN	luaD_growstack:PROC
EXTRN	luaD_inctop:PROC
EXTRN	luaS_newlstr:PROC
EXTRN	luaV_tonumber_:PROC
EXTRN	luaV_tointeger:PROC
EXTRN	luaV_concat:PROC
EXTRN	luaV_div:PROC
EXTRN	luaV_mod:PROC
EXTRN	luaV_shiftl:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	floor:PROC
EXTRN	fmod:PROC
EXTRN	memcpy:PROC
EXTRN	pow:PROC
EXTRN	luai_ctype_:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaO_arith DD imagerel $LN38
	DD	imagerel $LN38+374
	DD	imagerel $unwind$luaO_arith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaO_str2num DD imagerel $LN21
	DD	imagerel $LN21+216
	DD	imagerel $unwind$luaO_str2num
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaO_tostring DD imagerel $LN7
	DD	imagerel $LN7+213
	DD	imagerel $unwind$luaO_tostring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaO_pushvfstring DD imagerel $LN62
	DD	imagerel $LN62+907
	DD	imagerel $unwind$luaO_pushvfstring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaO_pushfstring DD imagerel $LN46
	DD	imagerel $LN46+34
	DD	imagerel $unwind$luaO_pushfstring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaO_chunkid DD imagerel $LN19
	DD	imagerel $LN19+322
	DD	imagerel $unwind$luaO_chunkid
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$numarith DD imagerel numarith
	DD	imagerel numarith+280
	DD	imagerel $unwind$numarith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$l_str2d DD imagerel l_str2d
	DD	imagerel l_str2d+149
	DD	imagerel $unwind$l_str2d
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$l_str2int DD imagerel l_str2int
	DD	imagerel l_str2int+302
	DD	imagerel $unwind$l_str2int
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pushstr DD imagerel pushstr
	DD	imagerel pushstr+53
	DD	imagerel $unwind$pushstr
pdata	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT ??_C@_02DEGCJHHK@?$CC?$FN?$AA@
CONST	SEGMENT
??_C@_02DEGCJHHK@?$CC?$FN?$AA@ DB '"]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHLFBDIK@?$FLstring?5?$CC?$AA@
CONST	SEGMENT
??_C@_09PHLFBDIK@?$FLstring?5?$CC?$AA@ DB '[string "', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHICJKCI@?4?4?4?$AA@
CONST	SEGMENT
??_C@_03KHICJKCI@?4?4?4?$AA@ DB '...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FANIKJON@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8lua_pu@
CONST	SEGMENT
??_C@_0CL@FANIKJON@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8lua_pu@ DB 'i'
	DB	'nvalid option ''%%%c'' to ''lua_pushfstring''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01FGNFDNOH@?$CF?$AA@
CONST	SEGMENT
??_C@_01FGNFDNOH@?$CF?$AA@ DB '%', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FJJBJMMN@?$DM?2?$CFd?$DO?$AA@
CONST	SEGMENT
??_C@_05FJJBJMMN@?$DM?2?$CFd?$DO?$AA@ DB '<\%d>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@
CONST	SEGMENT
??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@ DB '(null)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MJJAFOKF@?90123456789?$AA@
CONST	SEGMENT
??_C@_0M@MJJAFOKF@?90123456789?$AA@ DB '-0123456789', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CGOEHEFE@?$CF?414g?$AA@
CONST	SEGMENT
??_C@_05CGOEHEFE@?$CF?414g?$AA@ DB '%.14g', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFAHMMK@?$CFlld?$AA@
CONST	SEGMENT
??_C@_04BFAHMMK@?$CFlld?$AA@ DB '%lld', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CIDOMIFJ@xX?$AA@
CONST	SEGMENT
??_C@_02CIDOMIFJ@xX?$AA@ DB 'xX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CMANKCEM@nN?$AA@
CONST	SEGMENT
??_C@_02CMANKCEM@nN?$AA@ DB 'nN', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pushstr DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$l_str2int DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$l_str2d DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$numarith DD 030901H
	DD	026809H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaO_chunkid DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaO_pushfstring DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaO_pushvfstring DD 0a2319H
	DD	0173414H
	DD	0f010b214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaO_tostring DD 061e19H
	DD	011640fH
	DD	010340fH
	DD	0700bb20fH
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaO_str2num DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaO_arith DD 081401H
	DD	0c6414H
	DD	0b5414H
	DD	0a3414H
	DD	070107214H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT pushstr
_TEXT	SEGMENT
L$ = 48
str$ = 56
l$ = 64
pushstr	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 348
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 349
  0000a	48 8b 59 10	 mov	 rbx, QWORD PTR [rcx+16]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	e8 00 00 00 00	 call	 luaS_newlstr
  00016	48 89 03	 mov	 QWORD PTR [rbx], rax
  00019	0f b6 50 08	 movzx	 edx, BYTE PTR [rax+8]
; Line 350
  0001d	48 8b cf	 mov	 rcx, rdi
  00020	83 ca 40	 or	 edx, 64			; 00000040H
  00023	89 53 08	 mov	 DWORD PTR [rbx+8], edx
; Line 351
  00026	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
; Line 350
  00030	e9 00 00 00 00	 jmp	 luaD_inctop
pushstr	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT l_str2int
_TEXT	SEGMENT
s$ = 8
result$ = 16
l_str2int PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 260
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi
; Line 264
  0000a	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0000d	45 33 c0	 xor	 r8d, r8d
  00010	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:luai_ctype_
  00017	f6 44 38 01 08	 test	 BYTE PTR [rax+rdi+1], 8
  0001c	48 8b da	 mov	 rbx, rdx
  0001f	45 8d 50 01	 lea	 r10d, QWORD PTR [r8+1]
  00023	74 19		 je	 SHORT $LN15@l_str2int
  00025	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL16@l_str2int:
  00030	0f b6 41 01	 movzx	 eax, BYTE PTR [rcx+1]
  00034	48 ff c1	 inc	 rcx
  00037	f6 44 38 01 08	 test	 BYTE PTR [rax+rdi+1], 8
  0003c	75 f2		 jne	 SHORT $LL16@l_str2int
$LN15@l_str2int:
; Line 265
  0003e	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00041	3c 2d		 cmp	 al, 45			; 0000002dH
  00043	75 08		 jne	 SHORT $LN23@l_str2int
  00045	48 ff c1	 inc	 rcx
  00048	45 8b da	 mov	 r11d, r10d
  0004b	eb 0a		 jmp	 SHORT $LN24@l_str2int
$LN23@l_str2int:
  0004d	3c 2b		 cmp	 al, 43			; 0000002bH
  0004f	75 03		 jne	 SHORT $LN21@l_str2int
  00051	48 ff c1	 inc	 rcx
$LN21@l_str2int:
  00054	45 8b d8	 mov	 r11d, r8d
$LN24@l_str2int:
; Line 267
  00057	44 0f b6 09	 movzx	 r9d, BYTE PTR [rcx]
  0005b	41 80 f9 30	 cmp	 r9b, 48			; 00000030H
  0005f	75 4e		 jne	 SHORT $LN14@l_str2int
  00061	0f b6 41 01	 movzx	 eax, BYTE PTR [rcx+1]
  00065	2c 58		 sub	 al, 88			; 00000058H
  00067	a8 df		 test	 al, 223			; 000000dfH
  00069	75 44		 jne	 SHORT $LN14@l_str2int
; Line 269
  0006b	0f b6 41 02	 movzx	 eax, BYTE PTR [rcx+2]
  0006f	48 83 c1 02	 add	 rcx, 2
  00073	f6 44 38 01 10	 test	 BYTE PTR [rax+rdi+1], 16
  00078	74 65		 je	 SHORT $LN33@l_str2int
; Line 271
  0007a	45 8b d0	 mov	 r10d, r8d
  0007d	0f 1f 00	 npad	 3
$LL12@l_str2int:
; Line 270
  00080	48 0f be d0	 movsx	 rdx, al
  00084	f6 44 3a 01 02	 test	 BYTE PTR [rdx+rdi+1], 2
  00089	74 05		 je	 SHORT $LN27@l_str2int
  0008b	83 c2 d0	 add	 edx, -48		; ffffffffffffffd0H
  0008e	eb 06		 jmp	 SHORT $LN26@l_str2int
$LN27@l_str2int:
  00090	83 ca 20	 or	 edx, 32			; 00000020H
  00093	83 ea 57	 sub	 edx, 87			; 00000057H
$LN26@l_str2int:
  00096	49 c1 e0 04	 shl	 r8, 4
  0009a	48 63 c2	 movsxd	 rax, edx
  0009d	48 ff c1	 inc	 rcx
  000a0	4c 03 c0	 add	 r8, rax
  000a3	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  000a6	f6 44 38 01 10	 test	 BYTE PTR [rax+rdi+1], 16
  000ab	75 d3		 jne	 SHORT $LL12@l_str2int
; Line 274
  000ad	eb 30		 jmp	 SHORT $LN33@l_str2int
$LN14@l_str2int:
; Line 275
  000af	41 0f b6 c1	 movzx	 eax, r9b
  000b3	f6 44 38 01 02	 test	 BYTE PTR [rax+rdi+1], 2
  000b8	74 25		 je	 SHORT $LN33@l_str2int
; Line 277
  000ba	45 8b d0	 mov	 r10d, r8d
  000bd	0f 1f 00	 npad	 3
$LL8@l_str2int:
; Line 276
  000c0	4f 8d 04 80	 lea	 r8, QWORD PTR [r8+r8*4]
  000c4	48 ff c1	 inc	 rcx
  000c7	49 0f be c1	 movsx	 rax, r9b
  000cb	44 0f b6 09	 movzx	 r9d, BYTE PTR [rcx]
  000cf	4d 8d 40 e8	 lea	 r8, QWORD PTR [r8-24]
  000d3	41 f6 44 39 01
	02		 test	 BYTE PTR [r9+rdi+1], 2
  000d9	4e 8d 04 40	 lea	 r8, QWORD PTR [rax+r8*2]
  000dd	75 e1		 jne	 SHORT $LL8@l_str2int
$LN33@l_str2int:
; Line 280
  000df	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  000e2	f6 44 38 01 08	 test	 BYTE PTR [rax+rdi+1], 8
  000e7	74 15		 je	 SHORT $LN4@l_str2int
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@l_str2int:
  000f0	0f b6 41 01	 movzx	 eax, BYTE PTR [rcx+1]
  000f4	48 ff c1	 inc	 rcx
  000f7	f6 44 38 01 08	 test	 BYTE PTR [rax+rdi+1], 8
  000fc	75 f2		 jne	 SHORT $LL5@l_str2int
$LN4@l_str2int:
; Line 281
  000fe	45 85 d2	 test	 r10d, r10d
  00101	75 1e		 jne	 SHORT $LN2@l_str2int
  00103	44 38 11	 cmp	 BYTE PTR [rcx], r10b
  00106	75 19		 jne	 SHORT $LN2@l_str2int
; Line 283
  00108	45 85 db	 test	 r11d, r11d
  0010b	74 03		 je	 SHORT $LN19@l_str2int
  0010d	49 f7 d8	 neg	 r8
$LN19@l_str2int:
  00110	4c 89 03	 mov	 QWORD PTR [rbx], r8
; Line 284
  00113	48 8b c1	 mov	 rax, rcx
; Line 286
  00116	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0011b	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  00120	c3		 ret	 0
$LN2@l_str2int:
  00121	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00126	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  0012b	33 c0		 xor	 eax, eax
  0012d	c3		 ret	 0
l_str2int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT l_str2d
_TEXT	SEGMENT
s$ = 48
result$ = 56
endptr$ = 64
l_str2d	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 246
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
; Line 248
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02CMANKCEM@nN?$AA@
  00014	48 8b d9	 mov	 rbx, rcx
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strpbrk
  0001d	48 85 c0	 test	 rax, rax
  00020	74 0d		 je	 SHORT $LN7@l_str2d
$LN14@l_str2d:
; Line 249
  00022	33 c0		 xor	 eax, eax
; Line 257
  00024	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
$LN7@l_str2d:
; Line 250
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02CIDOMIFJ@xX?$AA@
  00036	48 8b cb	 mov	 rcx, rbx
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strpbrk
; Line 251
  0003f	48 8d 54 24 40	 lea	 rdx, QWORD PTR endptr$[rsp]
  00044	48 8b cb	 mov	 rcx, rbx
; Line 253
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtod
; Line 254
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR endptr$[rsp]
  00052	f2 0f 11 07	 movsdx	 QWORD PTR [rdi], xmm0
  00056	48 3b cb	 cmp	 rcx, rbx
  00059	74 c7		 je	 SHORT $LN14@l_str2d
; Line 255
  0005b	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:luai_ctype_
  00065	f6 44 10 01 08	 test	 BYTE PTR [rax+rdx+1], 8
  0006a	74 16		 je	 SHORT $LN1@l_str2d
  0006c	0f 1f 40 00	 npad	 4
$LL2@l_str2d:
  00070	48 ff c1	 inc	 rcx
  00073	48 89 4c 24 40	 mov	 QWORD PTR endptr$[rsp], rcx
  00078	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0007b	f6 44 10 01 08	 test	 BYTE PTR [rax+rdx+1], 8
  00080	75 ee		 jne	 SHORT $LL2@l_str2d
$LN1@l_str2d:
; Line 257
  00082	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00087	33 c0		 xor	 eax, eax
  00089	38 01		 cmp	 BYTE PTR [rcx], al
  0008b	48 0f 44 c1	 cmove	 rax, rcx
  0008f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0
l_str2d	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT isneg
_TEXT	SEGMENT
s$ = 8
isneg	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 170
  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00006	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  00009	75 0c		 jne	 SHORT $LN3@isneg
  0000b	48 ff c0	 inc	 rax
  0000e	48 89 01	 mov	 QWORD PTR [rcx], rax
  00011	b8 01 00 00 00	 mov	 eax, 1
; Line 173
  00016	c3		 ret	 0
$LN3@isneg:
; Line 171
  00017	80 fa 2b	 cmp	 dl, 43			; 0000002bH
  0001a	75 06		 jne	 SHORT $LN1@isneg
  0001c	48 ff c0	 inc	 rax
  0001f	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN1@isneg:
; Line 172
  00022	33 c0		 xor	 eax, eax
; Line 173
  00024	c3		 ret	 0
isneg	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT numarith
_TEXT	SEGMENT
L$ = 64
op$ = 72
v1$ = 80
v2$ = 88
numarith PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 104
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  00009	0f 28 f3	 movaps	 xmm6, xmm3
; Line 105
  0000c	83 fa 0c	 cmp	 edx, 12
  0000f	0f 87 c0 00 00
	00		 ja	 $LN1@numarith
  00015	48 63 c2	 movsxd	 rax, edx
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  0001f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN15@numarith[rdx+rax*4]
  00026	48 03 ca	 add	 rcx, rdx
  00029	ff e1		 jmp	 rcx
$LN10@numarith:
; Line 106
  0002b	f2 0f 58 d3	 addsd	 xmm2, xmm3
  0002f	0f 28 c2	 movaps	 xmm0, xmm2
; Line 120
  00032	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
$LN9@numarith:
; Line 107
  0003c	f2 0f 5c d3	 subsd	 xmm2, xmm3
  00040	0f 28 c2	 movaps	 xmm0, xmm2
; Line 120
  00043	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  00048	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004c	c3		 ret	 0
$LN8@numarith:
; Line 108
  0004d	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  00051	0f 28 c2	 movaps	 xmm0, xmm2
; Line 120
  00054	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
$LN7@numarith:
; Line 109
  0005e	f2 0f 5e d3	 divsd	 xmm2, xmm3
  00062	0f 28 c2	 movaps	 xmm0, xmm2
; Line 120
  00065	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0006a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006e	c3		 ret	 0
$LN6@numarith:
; Line 110
  0006f	0f 28 cb	 movaps	 xmm1, xmm3
  00072	0f 28 c2	 movaps	 xmm0, xmm2
; Line 120
  00075	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0007a	48 83 c4 38	 add	 rsp, 56			; 00000038H
; Line 110
  0007e	e9 00 00 00 00	 jmp	 pow
$LN5@numarith:
; Line 111
  00083	f2 0f 5e d3	 divsd	 xmm2, xmm3
  00087	0f 28 c2	 movaps	 xmm0, xmm2
; Line 120
  0008a	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0008f	48 83 c4 38	 add	 rsp, 56			; 00000038H
; Line 111
  00093	e9 00 00 00 00	 jmp	 floor
$LN4@numarith:
; Line 112
  00098	0f 57 15 00 00
	00 00		 xorps	 xmm2, QWORD PTR __xmm@80000000000000008000000000000000
  0009f	0f 28 c2	 movaps	 xmm0, xmm2
; Line 120
  000a2	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  000a7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ab	c3		 ret	 0
$LN3@numarith:
; Line 115
  000ac	0f 28 cb	 movaps	 xmm1, xmm3
  000af	0f 28 c2	 movaps	 xmm0, xmm2
  000b2	e8 00 00 00 00	 call	 fmod
  000b7	0f 57 c9	 xorps	 xmm1, xmm1
  000ba	0f 28 d0	 movaps	 xmm2, xmm0
  000bd	f2 0f 59 d6	 mulsd	 xmm2, xmm6
  000c1	66 0f 2f ca	 comisd	 xmm1, xmm2
  000c5	76 11		 jbe	 SHORT $LN11@numarith
  000c7	f2 0f 58 c6	 addsd	 xmm0, xmm6
; Line 120
  000cb	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  000d0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d4	c3		 ret	 0
$LN1@numarith:
  000d5	0f 57 c0	 xorps	 xmm0, xmm0
$LN11@numarith:
  000d8	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  000dd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e1	c3		 ret	 0
  000e2	66 90		 npad	 2
$LN15@numarith:
  000e4	00 00 00 00	 DD	 $LN10@numarith
  000e8	00 00 00 00	 DD	 $LN9@numarith
  000ec	00 00 00 00	 DD	 $LN8@numarith
  000f0	00 00 00 00	 DD	 $LN3@numarith
  000f4	00 00 00 00	 DD	 $LN6@numarith
  000f8	00 00 00 00	 DD	 $LN7@numarith
  000fc	00 00 00 00	 DD	 $LN5@numarith
  00100	00 00 00 00	 DD	 $LN1@numarith
  00104	00 00 00 00	 DD	 $LN1@numarith
  00108	00 00 00 00	 DD	 $LN1@numarith
  0010c	00 00 00 00	 DD	 $LN1@numarith
  00110	00 00 00 00	 DD	 $LN1@numarith
  00114	00 00 00 00	 DD	 $LN4@numarith
numarith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT intarith
_TEXT	SEGMENT
L$ = 8
op$ = 16
v1$ = 24
v2$ = 32
intarith PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 84
  00000	4d 8b d0	 mov	 r10, r8
; Line 85
  00003	83 fa 0d	 cmp	 edx, 13
  00006	77 72		 ja	 SHORT $LN1@intarith
  00008	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:__ImageBase
  0000f	48 63 c2	 movsxd	 rax, edx
  00012	41 8b 94 80 00
	00 00 00	 mov	 edx, DWORD PTR $LN18@intarith[r8+rax*4]
  0001a	49 03 d0	 add	 rdx, r8
  0001d	ff e2		 jmp	 rdx
$LN13@intarith:
; Line 86
  0001f	4b 8d 04 0a	 lea	 rax, QWORD PTR [r10+r9]
; Line 100
  00023	c3		 ret	 0
$LN12@intarith:
; Line 87
  00024	4d 2b d1	 sub	 r10, r9
  00027	49 8b c2	 mov	 rax, r10
; Line 100
  0002a	c3		 ret	 0
$LN11@intarith:
; Line 88
  0002b	4d 0f af d1	 imul	 r10, r9
  0002f	49 8b c2	 mov	 rax, r10
; Line 100
  00032	c3		 ret	 0
$LN10@intarith:
; Line 89
  00033	4d 8b c1	 mov	 r8, r9
  00036	49 8b d2	 mov	 rdx, r10
  00039	e9 00 00 00 00	 jmp	 luaV_mod
$LN9@intarith:
; Line 90
  0003e	4d 8b c1	 mov	 r8, r9
  00041	49 8b d2	 mov	 rdx, r10
  00044	e9 00 00 00 00	 jmp	 luaV_div
$LN8@intarith:
; Line 91
  00049	4d 23 d1	 and	 r10, r9
  0004c	49 8b c2	 mov	 rax, r10
; Line 100
  0004f	c3		 ret	 0
$LN7@intarith:
; Line 92
  00050	4d 0b d1	 or	 r10, r9
  00053	49 8b c2	 mov	 rax, r10
; Line 100
  00056	c3		 ret	 0
$LN6@intarith:
; Line 93
  00057	4d 33 d1	 xor	 r10, r9
  0005a	49 8b c2	 mov	 rax, r10
; Line 100
  0005d	c3		 ret	 0
$LN4@intarith:
; Line 95
  0005e	49 f7 d9	 neg	 r9
$LN5@intarith:
  00061	49 8b d1	 mov	 rdx, r9
  00064	49 8b ca	 mov	 rcx, r10
  00067	e9 00 00 00 00	 jmp	 luaV_shiftl
$LN3@intarith:
; Line 96
  0006c	49 f7 da	 neg	 r10
  0006f	49 8b c2	 mov	 rax, r10
; Line 100
  00072	c3		 ret	 0
$LN2@intarith:
; Line 97
  00073	49 f7 d2	 not	 r10
  00076	49 8b c2	 mov	 rax, r10
; Line 100
  00079	c3		 ret	 0
$LN1@intarith:
; Line 98
  0007a	33 c0		 xor	 eax, eax
; Line 100
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN18@intarith:
  00080	00 00 00 00	 DD	 $LN13@intarith
  00084	00 00 00 00	 DD	 $LN12@intarith
  00088	00 00 00 00	 DD	 $LN11@intarith
  0008c	00 00 00 00	 DD	 $LN10@intarith
  00090	00 00 00 00	 DD	 $LN1@intarith
  00094	00 00 00 00	 DD	 $LN1@intarith
  00098	00 00 00 00	 DD	 $LN9@intarith
  0009c	00 00 00 00	 DD	 $LN8@intarith
  000a0	00 00 00 00	 DD	 $LN7@intarith
  000a4	00 00 00 00	 DD	 $LN6@intarith
  000a8	00 00 00 00	 DD	 $LN5@intarith
  000ac	00 00 00 00	 DD	 $LN4@intarith
  000b0	00 00 00 00	 DD	 $LN3@intarith
  000b4	00 00 00 00	 DD	 $LN2@intarith
intarith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaO_chunkid
_TEXT	SEGMENT
out$ = 48
source$ = 56
bufflen$ = 64
luaO_chunkid PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 442
$LN19:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b e8	 mov	 rbp, r8
  00017	48 8b f2	 mov	 rsi, rdx
  0001a	48 8b f9	 mov	 rdi, rcx
; Line 443
  0001d	48 83 cb ff	 or	 rbx, -1
$LL16@luaO_chunk:
  00021	48 ff c3	 inc	 rbx
  00024	80 3c 1a 00	 cmp	 BYTE PTR [rdx+rbx], 0
  00028	75 f7		 jne	 SHORT $LL16@luaO_chunk
; Line 444
  0002a	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  0002d	3c 3d		 cmp	 al, 61			; 0000003dH
  0002f	75 27		 jne	 SHORT $LN12@luaO_chunk
; Line 446
  00031	48 ff c2	 inc	 rdx
  00034	49 3b d8	 cmp	 rbx, r8
  00037	77 0d		 ja	 SHORT $LN11@luaO_chunk
$LN17@luaO_chunk:
  00039	4c 8b c3	 mov	 r8, rbx
  0003c	e8 00 00 00 00	 call	 memcpy
; Line 447
  00041	e9 e7 00 00 00	 jmp	 $LN5@luaO_chunk
$LN11@luaO_chunk:
; Line 448
  00046	49 ff c8	 dec	 r8
  00049	e8 00 00 00 00	 call	 memcpy
; Line 449
  0004e	c6 44 2f ff 00	 mov	 BYTE PTR [rdi+rbp-1], 0
; Line 450
  00053	e9 d5 00 00 00	 jmp	 $LN5@luaO_chunk
$LN12@luaO_chunk:
; Line 452
  00058	3c 40		 cmp	 al, 64			; 00000040H
  0005a	75 38		 jne	 SHORT $LN8@luaO_chunk
; Line 454
  0005c	48 ff c2	 inc	 rdx
  0005f	49 3b d8	 cmp	 rbx, r8
  00062	76 d5		 jbe	 SHORT $LN17@luaO_chunk
; Line 456
  00064	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_03KHICJKCI@?4?4?4?$AA@
; Line 457
  0006b	48 83 ed 03	 sub	 rbp, 3
  0006f	48 83 c1 03	 add	 rcx, 3
  00073	66 89 41 fd	 mov	 WORD PTR [rcx-3], ax
  00077	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_03KHICJKCI@?4?4?4?$AA@+2
; Line 458
  0007e	48 2b dd	 sub	 rbx, rbp
  00081	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  00084	48 03 d3	 add	 rdx, rbx
  00087	4c 8b c5	 mov	 r8, rbp
  0008a	e8 00 00 00 00	 call	 memcpy
; Line 461
  0008f	e9 99 00 00 00	 jmp	 $LN5@luaO_chunk
$LN8@luaO_chunk:
; Line 462
  00094	ba 0a 00 00 00	 mov	 edx, 10
  00099	48 8b ce	 mov	 rcx, rsi
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
; Line 464
  000a2	48 83 ed 0f	 sub	 rbp, 15
  000a6	48 83 c7 09	 add	 rdi, 9
  000aa	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR ??_C@_09PHLFBDIK@?$FLstring?5?$CC?$AA@
  000b2	f2 0f 11 47 f7	 movsdx	 QWORD PTR [rdi-9], xmm0
  000b7	0f b6 0d 08 00
	00 00		 movzx	 ecx, BYTE PTR ??_C@_09PHLFBDIK@?$FLstring?5?$CC?$AA@+8
  000be	88 4f ff	 mov	 BYTE PTR [rdi-1], cl
; Line 465
  000c1	48 3b dd	 cmp	 rbx, rbp
  000c4	73 18		 jae	 SHORT $LN4@luaO_chunk
  000c6	48 85 c0	 test	 rax, rax
  000c9	75 18		 jne	 SHORT $LN15@luaO_chunk
; Line 466
  000cb	4c 8b c3	 mov	 r8, rbx
  000ce	48 8b d6	 mov	 rdx, rsi
  000d1	48 8b cf	 mov	 rcx, rdi
  000d4	e8 00 00 00 00	 call	 memcpy
  000d9	48 03 fb	 add	 rdi, rbx
; Line 468
  000dc	eb 3b		 jmp	 SHORT $LN3@luaO_chunk
$LN4@luaO_chunk:
; Line 469
  000de	48 85 c0	 test	 rax, rax
  000e1	74 06		 je	 SHORT $LN2@luaO_chunk
$LN15@luaO_chunk:
  000e3	48 8b d8	 mov	 rbx, rax
  000e6	48 2b de	 sub	 rbx, rsi
$LN2@luaO_chunk:
; Line 470
  000e9	48 3b dd	 cmp	 rbx, rbp
; Line 471
  000ec	48 8b d6	 mov	 rdx, rsi
  000ef	48 8b cf	 mov	 rcx, rdi
  000f2	48 0f 47 dd	 cmova	 rbx, rbp
  000f6	4c 8b c3	 mov	 r8, rbx
  000f9	e8 00 00 00 00	 call	 memcpy
; Line 472
  000fe	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_03KHICJKCI@?4?4?4?$AA@
  00105	48 03 fb	 add	 rdi, rbx
  00108	66 89 07	 mov	 WORD PTR [rdi], ax
  0010b	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_03KHICJKCI@?4?4?4?$AA@+2
  00112	48 83 c7 03	 add	 rdi, 3
  00116	88 47 ff	 mov	 BYTE PTR [rdi-1], al
$LN3@luaO_chunk:
; Line 474
  00119	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02DEGCJHHK@?$CC?$FN?$AA@
  00120	66 89 07	 mov	 WORD PTR [rdi], ax
  00123	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02DEGCJHHK@?$CC?$FN?$AA@+2
  0012a	88 47 02	 mov	 BYTE PTR [rdi+2], al
$LN5@luaO_chunk:
; Line 476
  0012d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00132	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00137	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0013c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00140	5f		 pop	 rdi
  00141	c3		 ret	 0
luaO_chunkid ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaO_pushfstring
_TEXT	SEGMENT
L$ = 48
fmt$ = 56
luaO_pushfstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 423
$LN46:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 426
  00013	4c 8d 44 24 40	 lea	 r8, QWORD PTR fmt$[rsp+8]
; Line 427
  00018	e8 00 00 00 00	 call	 luaO_pushvfstring
; Line 430
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
luaO_pushfstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaO_pushvfstring
_TEXT	SEGMENT
buff$1 = 32
buff$2 = 40
buff$3 = 48
__$ArrayPad$ = 88
L$ = 160
fmt$ = 168
argp$ = 176
luaO_pushvfstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 356
$LN62:
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	41 57		 push	 r15
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001b	48 33 c4	 xor	 rax, rsp
  0001e	48 89 44 24 58	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00023	48 8b f2	 mov	 rsi, rdx
  00026	48 8b f9	 mov	 rdi, rcx
; Line 357
  00029	45 33 ed	 xor	 r13d, r13d
; Line 359
  0002c	41 8d 55 25	 lea	 edx, QWORD PTR [r13+37]
  00030	48 8b ce	 mov	 rcx, rsi
  00033	4d 8b f0	 mov	 r14, r8
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
; Line 360
  0003c	48 83 cd ff	 or	 rbp, -1
  00040	4c 8b f8	 mov	 r15, rax
  00043	48 85 c0	 test	 rax, rax
  00046	0f 84 1f 02 00
	00		 je	 $LN46@luaO_pushv
  0004c	49 83 c6 f8	 add	 r14, -8
  00050	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:__ImageBase
  00057	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL20@luaO_pushv:
; Line 361
  00060	48 8b 5f 10	 mov	 rbx, QWORD PTR [rdi+16]
  00064	4d 8b c7	 mov	 r8, r15
  00067	48 8b d6	 mov	 rdx, rsi
  0006a	4c 2b c6	 sub	 r8, rsi
  0006d	48 8b cf	 mov	 rcx, rdi
  00070	e8 00 00 00 00	 call	 luaS_newlstr
  00075	48 89 03	 mov	 QWORD PTR [rbx], rax
  00078	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  0007c	83 c9 40	 or	 ecx, 64			; 00000040H
  0007f	89 4b 08	 mov	 DWORD PTR [rbx+8], ecx
  00082	48 8b cf	 mov	 rcx, rdi
  00085	e8 00 00 00 00	 call	 luaD_inctop
; Line 362
  0008a	41 0f be 47 01	 movsx	 eax, BYTE PTR [r15+1]
  0008f	83 c0 db	 add	 eax, -37		; ffffffffffffffdbH
  00092	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  00095	0f 87 67 02 00
	00		 ja	 $LN61@luaO_pushv
  0009b	48 98		 cdqe
  0009d	41 0f b6 84 04
	00 00 00 00	 movzx	 eax, BYTE PTR $LN54@luaO_pushv[r12+rax]
  000a6	41 8b 8c 84 00
	00 00 00	 mov	 ecx, DWORD PTR $LN55@luaO_pushv[r12+rax*4]
  000ae	49 03 cc	 add	 rcx, r12
  000b1	ff e1		 jmp	 rcx
$LN15@luaO_pushv:
; Line 364
  000b3	49 8b 46 08	 mov	 rax, QWORD PTR [r14+8]
  000b7	49 83 c6 08	 add	 r14, 8
; Line 365
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@
  000c2	48 85 c0	 test	 rax, rax
; Line 366
  000c5	4c 8b c5	 mov	 r8, rbp
  000c8	48 0f 45 d0	 cmovne	 rdx, rax
  000cc	0f 1f 40 00	 npad	 4
$LL53@luaO_pushv:
  000d0	49 ff c0	 inc	 r8
  000d3	42 80 3c 02 00	 cmp	 BYTE PTR [rdx+r8], 0
  000d8	75 f6		 jne	 SHORT $LL53@luaO_pushv
; Line 367
  000da	e9 49 01 00 00	 jmp	 $LN58@luaO_pushv
$LN13@luaO_pushv:
; Line 370
  000df	41 0f b6 4e 08	 movzx	 ecx, BYTE PTR [r14+8]
  000e4	49 83 c6 08	 add	 r14, 8
; Line 371
  000e8	42 f6 84 21 01
	00 00 00 04	 test	 BYTE PTR luai_ctype_[rcx+r12+1], 4
  000f1	88 4c 24 20	 mov	 BYTE PTR buff$1[rsp], cl
  000f5	74 0a		 je	 SHORT $LN12@luaO_pushv
; Line 372
  000f7	48 8d 54 24 20	 lea	 rdx, QWORD PTR buff$1[rsp]
; Line 373
  000fc	e9 21 01 00 00	 jmp	 $LN59@luaO_pushv
$LN12@luaO_pushv:
; Line 374
  00101	44 0f b6 c1	 movzx	 r8d, cl
  00105	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05FJJBJMMN@?$DM?2?$CFd?$DO?$AA@
  0010c	48 8b cf	 mov	 rcx, rdi
  0010f	e8 00 00 00 00	 call	 luaO_pushfstring
; Line 375
  00114	e9 30 01 00 00	 jmp	 $LN16@luaO_pushv
$LN10@luaO_pushv:
; Line 378
  00119	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  0011d	49 63 46 08	 movsxd	 rax, DWORD PTR [r14+8]
  00121	49 83 c6 08	 add	 r14, 8
  00125	c7 41 08 13 00
	00 00		 mov	 DWORD PTR [rcx+8], 19
; Line 379
  0012c	eb 28		 jmp	 SHORT $LN60@luaO_pushv
$LN9@luaO_pushv:
; Line 382
  0012e	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00132	49 8b 46 08	 mov	 rax, QWORD PTR [r14+8]
  00136	49 83 c6 08	 add	 r14, 8
  0013a	c7 41 08 13 00
	00 00		 mov	 DWORD PTR [rcx+8], 19
; Line 383
  00141	eb 13		 jmp	 SHORT $LN60@luaO_pushv
$LN8@luaO_pushv:
; Line 386
  00143	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00147	49 8b 46 08	 mov	 rax, QWORD PTR [r14+8]
  0014b	49 83 c6 08	 add	 r14, 8
  0014f	c7 41 08 03 00
	00 00		 mov	 DWORD PTR [rcx+8], 3
$LN60@luaO_pushv:
  00156	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 388
  00159	48 8b cf	 mov	 rcx, rdi
$top2str$63:
  0015c	e8 00 00 00 00	 call	 luaD_inctop
; Line 389
  00161	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  00165	48 8b cf	 mov	 rcx, rdi
  00168	48 83 ea 10	 sub	 rdx, 16
  0016c	e8 00 00 00 00	 call	 luaO_tostring
; Line 390
  00171	e9 d3 00 00 00	 jmp	 $LN16@luaO_pushv
$LN7@luaO_pushv:
; Line 394
  00176	4d 8b 4e 08	 mov	 r9, QWORD PTR [r14+8]
  0017a	49 83 c6 08	 add	 r14, 8
  0017e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02BBAHNLBA@?$CFp?$AA@
  00185	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buff$3[rsp]
  0018a	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  0018f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
; Line 395
  00195	48 8d 54 24 30	 lea	 rdx, QWORD PTR buff$3[rsp]
  0019a	4c 63 c0	 movsxd	 r8, eax
; Line 396
  0019d	e9 86 00 00 00	 jmp	 $LN58@luaO_pushv
$LN6@luaO_pushv:
; Line 400
  001a2	41 8b 4e 08	 mov	 ecx, DWORD PTR [r14+8]
  001a6	49 83 c6 08	 add	 r14, 8
  001aa	41 ba 01 00 00
	00		 mov	 r10d, 1
  001b0	45 8b ca	 mov	 r9d, r10d
  001b3	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  001b9	73 11		 jae	 SHORT $LN35@luaO_pushv
; Line 401
  001bb	48 8d 54 24 30	 lea	 rdx, QWORD PTR buff$2[rsp+8]
  001c0	4d 63 c2	 movsxd	 r8, r10d
  001c3	88 4c 24 2f	 mov	 BYTE PTR buff$2[rsp+7], cl
  001c7	49 2b d0	 sub	 rdx, r8
; Line 402
  001ca	eb 5c		 jmp	 SHORT $LN58@luaO_pushv
; Line 400
$LN35@luaO_pushv:
  001cc	ba 3f 00 00 00	 mov	 edx, 63			; 0000003fH
  001d1	4c 8d 44 24 2f	 lea	 r8, QWORD PTR buff$2[rsp+7]
  001d6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL33@luaO_pushv:
  001e0	0f b6 c1	 movzx	 eax, cl
  001e3	d1 ea		 shr	 edx, 1
  001e5	c1 e9 06	 shr	 ecx, 6
  001e8	24 3f		 and	 al, 63			; 0000003fH
  001ea	41 ff c2	 inc	 r10d
  001ed	49 ff c1	 inc	 r9
  001f0	0c 80		 or	 al, -128		; ffffffffffffff80H
  001f2	4d 8d 40 ff	 lea	 r8, QWORD PTR [r8-1]
  001f6	41 88 40 01	 mov	 BYTE PTR [r8+1], al
  001fa	3b ca		 cmp	 ecx, edx
  001fc	77 e2		 ja	 SHORT $LL33@luaO_pushv
  001fe	f6 d2		 not	 dl
  00200	48 8d 44 24 30	 lea	 rax, QWORD PTR buff$2[rsp+8]
; Line 401
  00205	4d 63 c2	 movsxd	 r8, r10d
  00208	02 d2		 add	 dl, dl
  0020a	49 2b c1	 sub	 rax, r9
  0020d	0a d1		 or	 dl, cl
  0020f	88 10		 mov	 BYTE PTR [rax], dl
  00211	48 8d 54 24 30	 lea	 rdx, QWORD PTR buff$2[rsp+8]
  00216	49 2b d0	 sub	 rdx, r8
; Line 402
  00219	eb 0d		 jmp	 SHORT $LN58@luaO_pushv
$LN5@luaO_pushv:
; Line 405
  0021b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01FGNFDNOH@?$CF?$AA@
$LN59@luaO_pushv:
  00222	41 b8 01 00 00
	00		 mov	 r8d, 1
$LN58@luaO_pushv:
  00228	48 8b 5f 10	 mov	 rbx, QWORD PTR [rdi+16]
  0022c	48 8b cf	 mov	 rcx, rdi
  0022f	e8 00 00 00 00	 call	 luaS_newlstr
  00234	48 89 03	 mov	 QWORD PTR [rbx], rax
  00237	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  0023b	83 c9 40	 or	 ecx, 64			; 00000040H
  0023e	89 4b 08	 mov	 DWORD PTR [rbx+8], ecx
  00241	48 8b cf	 mov	 rcx, rdi
  00244	e8 00 00 00 00	 call	 luaD_inctop
$LN16@luaO_pushv:
; Line 414
  00249	49 8d 77 02	 lea	 rsi, QWORD PTR [r15+2]
  0024d	ba 25 00 00 00	 mov	 edx, 37			; 00000025H
  00252	41 83 c5 02	 add	 r13d, 2
  00256	48 8b ce	 mov	 rcx, rsi
  00259	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0025f	4c 8b f8	 mov	 r15, rax
  00262	48 85 c0	 test	 rax, rax
  00265	0f 85 f5 fd ff
	ff		 jne	 $LL20@luaO_pushv
$LN46@luaO_pushv:
; Line 416
  0026b	48 8b 47 30	 mov	 rax, QWORD PTR [rdi+48]
  0026f	48 2b 47 10	 sub	 rax, QWORD PTR [rdi+16]
  00273	48 83 e0 f0	 and	 rax, -16
  00277	48 83 f8 10	 cmp	 rax, 16
  0027b	7f 13		 jg	 SHORT $LL3@luaO_pushv
  0027d	ba 01 00 00 00	 mov	 edx, 1
  00282	48 8b cf	 mov	 rcx, rdi
  00285	e8 00 00 00 00	 call	 luaD_growstack
  0028a	66 0f 1f 44 00
	00		 npad	 6
$LL3@luaO_pushv:
; Line 417
  00290	48 ff c5	 inc	 rbp
  00293	80 3c 2e 00	 cmp	 BYTE PTR [rsi+rbp], 0
  00297	75 f7		 jne	 SHORT $LL3@luaO_pushv
  00299	48 8b 5f 10	 mov	 rbx, QWORD PTR [rdi+16]
  0029d	4c 8b c5	 mov	 r8, rbp
  002a0	48 8b d6	 mov	 rdx, rsi
  002a3	48 8b cf	 mov	 rcx, rdi
  002a6	e8 00 00 00 00	 call	 luaS_newlstr
  002ab	48 89 03	 mov	 QWORD PTR [rbx], rax
  002ae	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  002b2	83 c9 40	 or	 ecx, 64			; 00000040H
  002b5	89 4b 08	 mov	 DWORD PTR [rbx+8], ecx
  002b8	48 8b cf	 mov	 rcx, rdi
  002bb	e8 00 00 00 00	 call	 luaD_inctop
; Line 418
  002c0	45 85 ed	 test	 r13d, r13d
  002c3	7e 0c		 jle	 SHORT $LN1@luaO_pushv
  002c5	41 8d 55 01	 lea	 edx, DWORD PTR [r13+1]
  002c9	48 8b cf	 mov	 rcx, rdi
  002cc	e8 00 00 00 00	 call	 luaV_concat
$LN1@luaO_pushv:
; Line 419
  002d1	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  002d5	48 8b 40 f0	 mov	 rax, QWORD PTR [rax-16]
  002d9	48 83 c0 18	 add	 rax, 24
; Line 420
  002dd	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002e2	48 33 cc	 xor	 rcx, rsp
  002e5	e8 00 00 00 00	 call	 __security_check_cookie
  002ea	48 8b 9c 24 b8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+184]
  002f2	48 83 c4 60	 add	 rsp, 96			; 00000060H
  002f6	41 5f		 pop	 r15
  002f8	41 5e		 pop	 r14
  002fa	41 5d		 pop	 r13
  002fc	41 5c		 pop	 r12
  002fe	5f		 pop	 rdi
  002ff	5e		 pop	 rsi
  00300	5d		 pop	 rbp
  00301	c3		 ret	 0
$LN61@luaO_pushv:
; Line 410
  00302	45 0f be 47 01	 movsx	 r8d, BYTE PTR [r15+1]
  00307	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@FANIKJON@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8lua_pu@
  0030e	48 8b cf	 mov	 rcx, rdi
  00311	e8 00 00 00 00	 call	 luaG_runerror
  00316	cc		 int	 3
$LN57@luaO_pushv:
  00317	90		 npad	 1
$LN55@luaO_pushv:
; Line 420
  00318	00 00 00 00	 DD	 $LN5@luaO_pushv
  0031c	00 00 00 00	 DD	 $LN9@luaO_pushv
  00320	00 00 00 00	 DD	 $LN6@luaO_pushv
  00324	00 00 00 00	 DD	 $LN13@luaO_pushv
  00328	00 00 00 00	 DD	 $LN10@luaO_pushv
  0032c	00 00 00 00	 DD	 $LN8@luaO_pushv
  00330	00 00 00 00	 DD	 $LN7@luaO_pushv
  00334	00 00 00 00	 DD	 $LN15@luaO_pushv
  00338	00 00 00 00	 DD	 $LN61@luaO_pushv
$LN54@luaO_pushv:
  0033c	00		 DB	 0
  0033d	08		 DB	 8
  0033e	08		 DB	 8
  0033f	08		 DB	 8
  00340	08		 DB	 8
  00341	08		 DB	 8
  00342	08		 DB	 8
  00343	08		 DB	 8
  00344	08		 DB	 8
  00345	08		 DB	 8
  00346	08		 DB	 8
  00347	08		 DB	 8
  00348	08		 DB	 8
  00349	08		 DB	 8
  0034a	08		 DB	 8
  0034b	08		 DB	 8
  0034c	08		 DB	 8
  0034d	08		 DB	 8
  0034e	08		 DB	 8
  0034f	08		 DB	 8
  00350	08		 DB	 8
  00351	08		 DB	 8
  00352	08		 DB	 8
  00353	08		 DB	 8
  00354	08		 DB	 8
  00355	08		 DB	 8
  00356	08		 DB	 8
  00357	08		 DB	 8
  00358	08		 DB	 8
  00359	08		 DB	 8
  0035a	08		 DB	 8
  0035b	08		 DB	 8
  0035c	08		 DB	 8
  0035d	08		 DB	 8
  0035e	08		 DB	 8
  0035f	08		 DB	 8
  00360	01		 DB	 1
  00361	08		 DB	 8
  00362	08		 DB	 8
  00363	08		 DB	 8
  00364	08		 DB	 8
  00365	08		 DB	 8
  00366	08		 DB	 8
  00367	08		 DB	 8
  00368	08		 DB	 8
  00369	08		 DB	 8
  0036a	08		 DB	 8
  0036b	08		 DB	 8
  0036c	02		 DB	 2
  0036d	08		 DB	 8
  0036e	08		 DB	 8
  0036f	08		 DB	 8
  00370	08		 DB	 8
  00371	08		 DB	 8
  00372	08		 DB	 8
  00373	08		 DB	 8
  00374	08		 DB	 8
  00375	08		 DB	 8
  00376	08		 DB	 8
  00377	08		 DB	 8
  00378	08		 DB	 8
  00379	08		 DB	 8
  0037a	03		 DB	 3
  0037b	04		 DB	 4
  0037c	08		 DB	 8
  0037d	05		 DB	 5
  0037e	08		 DB	 8
  0037f	08		 DB	 8
  00380	08		 DB	 8
  00381	08		 DB	 8
  00382	08		 DB	 8
  00383	08		 DB	 8
  00384	08		 DB	 8
  00385	08		 DB	 8
  00386	08		 DB	 8
  00387	06		 DB	 6
  00388	08		 DB	 8
  00389	08		 DB	 8
  0038a	07		 DB	 7
luaO_pushvfstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaO_tostring
_TEXT	SEGMENT
buff$ = 32
__$ArrayPad$ = 88
L$ = 112
obj$ = 120
luaO_tostring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 329
$LN7:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 44 24 58	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 333
  0001e	83 7a 08 13	 cmp	 DWORD PTR [rdx+8], 19
  00022	48 8b f1	 mov	 rsi, rcx
  00025	48 8b fa	 mov	 rdi, rdx
; Line 334
  00028	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buff$[rsp]
  0002d	75 1a		 jne	 SHORT $LN3@luaO_tostr
  0002f	4c 8b 0a	 mov	 r9, QWORD PTR [rdx]
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04BFAHMMK@?$CFlld?$AA@
  00039	ba 32 00 00 00	 mov	 edx, 50			; 00000032H
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
  00044	48 63 d8	 movsxd	 rbx, eax
; Line 335
  00047	eb 50		 jmp	 SHORT $LN1@luaO_tostr
$LN3@luaO_tostr:
; Line 336
  00049	f2 0f 10 1a	 movsdx	 xmm3, QWORD PTR [rdx]
  0004d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05CGOEHEFE@?$CF?414g?$AA@
  00054	ba 32 00 00 00	 mov	 edx, 50			; 00000032H
  00059	66 49 0f 7e d9	 movd	 r9, xmm3
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
; Line 338
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MJJAFOKF@?90123456789?$AA@
  0006b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buff$[rsp]
  00070	48 63 d8	 movsxd	 rbx, eax
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strspn
  00079	80 7c 04 20 00	 cmp	 BYTE PTR buff$[rsp+rax], 0
  0007e	75 19		 jne	 SHORT $LN1@luaO_tostr
; Line 339
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_localeconv
; Line 340
  00086	48 83 c3 02	 add	 rbx, 2
  0008a	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0008d	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00090	88 44 1c 1e	 mov	 BYTE PTR buff$[rsp+rbx-2], al
  00094	c6 44 1c 1f 30	 mov	 BYTE PTR buff$[rsp+rbx-1], 48 ; 00000030H
$LN1@luaO_tostr:
; Line 344
  00099	48 8d 54 24 20	 lea	 rdx, QWORD PTR buff$[rsp]
  0009e	4c 8b c3	 mov	 r8, rbx
  000a1	48 8b ce	 mov	 rcx, rsi
  000a4	e8 00 00 00 00	 call	 luaS_newlstr
  000a9	48 89 07	 mov	 QWORD PTR [rdi], rax
  000ac	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  000b0	83 c9 40	 or	 ecx, 64			; 00000040H
  000b3	89 4f 08	 mov	 DWORD PTR [rdi+8], ecx
; Line 345
  000b6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000bb	48 33 cc	 xor	 rcx, rsp
  000be	e8 00 00 00 00	 call	 __security_check_cookie
  000c3	4c 8d 5c 24 60	 lea	 r11, QWORD PTR [rsp+96]
  000c8	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  000cc	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  000d0	49 8b e3	 mov	 rsp, r11
  000d3	5f		 pop	 rdi
  000d4	c3		 ret	 0
luaO_tostring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaO_hexavalue
_TEXT	SEGMENT
c$ = 8
luaO_hexavalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 164
  00000	48 8d 15 01 00
	00 00		 lea	 rdx, OFFSET FLAT:luai_ctype_+1
  00007	48 63 c1	 movsxd	 rax, ecx
  0000a	f6 04 10 02	 test	 BYTE PTR [rax+rdx], 2
  0000e	74 04		 je	 SHORT $LN2@luaO_hexav
  00010	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
; Line 166
  00013	c3		 ret	 0
$LN2@luaO_hexav:
; Line 165
  00014	83 c9 20	 or	 ecx, 32			; 00000020H
  00017	8d 41 a9	 lea	 eax, DWORD PTR [rcx-87]
; Line 166
  0001a	c3		 ret	 0
luaO_hexavalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaO_str2num
_TEXT	SEGMENT
s$ = 48
o$ = 56
endptr$1 = 64
i$ = 64
luaO_str2num PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 289
$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
; Line 292
  0000d	48 8d 54 24 40	 lea	 rdx, QWORD PTR i$[rsp]
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 l_str2int
  0001a	48 85 c0	 test	 rax, rax
  0001d	74 20		 je	 SHORT $LN4@luaO_str2n
; Line 293
  0001f	4c 8b 44 24 40	 mov	 r8, QWORD PTR i$[rsp]
; Line 300
  00024	48 2b c3	 sub	 rax, rbx
  00027	c7 47 08 13 00
	00 00		 mov	 DWORD PTR [rdi+8], 19
  0002e	4c 89 07	 mov	 QWORD PTR [rdi], r8
  00031	48 ff c0	 inc	 rax
; Line 301
  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
$LN4@luaO_str2n:
; Line 295
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02CMANKCEM@nN?$AA@
  00046	48 8b cb	 mov	 rcx, rbx
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strpbrk
  0004f	48 85 c0	 test	 rax, rax
  00052	75 77		 jne	 SHORT $LN2@luaO_str2n
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02CIDOMIFJ@xX?$AA@
  0005b	48 8b cb	 mov	 rcx, rbx
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strpbrk
  00064	48 8d 54 24 40	 lea	 rdx, QWORD PTR endptr$1[rsp]
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtod
  00072	48 8b 4c 24 40	 mov	 rcx, QWORD PTR endptr$1[rsp]
  00077	48 3b cb	 cmp	 rcx, rbx
  0007a	74 4f		 je	 SHORT $LN2@luaO_str2n
  0007c	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:luai_ctype_
  00086	f6 44 10 01 08	 test	 BYTE PTR [rax+rdx+1], 8
  0008b	74 15		 je	 SHORT $LN7@luaO_str2n
  0008d	0f 1f 00	 npad	 3
$LL8@luaO_str2n:
  00090	48 ff c1	 inc	 rcx
  00093	48 89 4c 24 40	 mov	 QWORD PTR endptr$1[rsp], rcx
  00098	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0009b	f6 44 10 01 08	 test	 BYTE PTR [rax+rdx+1], 8
  000a0	75 ee		 jne	 SHORT $LL8@luaO_str2n
$LN7@luaO_str2n:
  000a2	33 c0		 xor	 eax, eax
  000a4	38 01		 cmp	 BYTE PTR [rcx], al
  000a6	48 0f 44 c1	 cmove	 rax, rcx
  000aa	48 85 c0	 test	 rax, rax
  000ad	74 1c		 je	 SHORT $LN2@luaO_str2n
; Line 300
  000af	48 2b c3	 sub	 rax, rbx
  000b2	f2 0f 11 07	 movsdx	 QWORD PTR [rdi], xmm0
  000b6	c7 47 08 03 00
	00 00		 mov	 DWORD PTR [rdi+8], 3
  000bd	48 ff c0	 inc	 rax
; Line 301
  000c0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c9	5f		 pop	 rdi
  000ca	c3		 ret	 0
$LN2@luaO_str2n:
; Line 299
  000cb	33 c0		 xor	 eax, eax
; Line 301
  000cd	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d6	5f		 pop	 rdi
  000d7	c3		 ret	 0
luaO_str2num ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaO_arith
_TEXT	SEGMENT
n2$1 = 48
i2$2 = 48
n1$3 = 56
i1$4 = 56
L$ = 80
op$ = 88
p1$ = 96
p2$ = 104
res$ = 112
luaO_arith PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 124
$LN38:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	49 8b d9	 mov	 rbx, r9
  00017	49 8b f8	 mov	 rdi, r8
  0001a	8b f2		 mov	 esi, edx
  0001c	48 8b e9	 mov	 rbp, rcx
; Line 125
  0001f	83 fa 04	 cmp	 edx, 4
  00022	0f 8c fd 00 00
	00		 jl	 $LN6@luaO_arith
  00028	83 fa 05	 cmp	 edx, 5
  0002b	0f 8e 8a 00 00
	00		 jle	 $LN9@luaO_arith
  00031	8d 42 f9	 lea	 eax, DWORD PTR [rdx-7]
  00034	83 f8 04	 cmp	 eax, 4
  00037	76 09		 jbe	 SHORT $LN11@luaO_arith
  00039	83 fa 0d	 cmp	 edx, 13
  0003c	0f 85 e3 00 00
	00		 jne	 $LN6@luaO_arith
$LN11@luaO_arith:
; Line 130
  00042	41 83 78 08 13	 cmp	 DWORD PTR [r8+8], 19
  00047	75 0a		 jne	 SHORT $LN16@luaO_arith
  00049	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0004c	48 89 44 24 38	 mov	 QWORD PTR i1$4[rsp], rax
  00051	eb 18		 jmp	 SHORT $LN28@luaO_arith
$LN16@luaO_arith:
  00053	48 8d 54 24 38	 lea	 rdx, QWORD PTR i1$4[rsp]
  00058	45 33 c0	 xor	 r8d, r8d
  0005b	48 8b cf	 mov	 rcx, rdi
  0005e	e8 00 00 00 00	 call	 luaV_tointeger
  00063	85 c0		 test	 eax, eax
  00065	0f 84 dc 00 00
	00		 je	 $LN2@luaO_arith
$LN28@luaO_arith:
  0006b	83 7b 08 13	 cmp	 DWORD PTR [rbx+8], 19
  0006f	75 0a		 jne	 SHORT $LN18@luaO_arith
  00071	4c 8b 0b	 mov	 r9, QWORD PTR [rbx]
  00074	4c 89 4c 24 30	 mov	 QWORD PTR i2$2[rsp], r9
  00079	eb 1d		 jmp	 SHORT $LN29@luaO_arith
$LN18@luaO_arith:
  0007b	48 8d 54 24 30	 lea	 rdx, QWORD PTR i2$2[rsp]
  00080	45 33 c0	 xor	 r8d, r8d
  00083	48 8b cb	 mov	 rcx, rbx
  00086	e8 00 00 00 00	 call	 luaV_tointeger
  0008b	85 c0		 test	 eax, eax
  0008d	0f 84 b4 00 00
	00		 je	 $LN2@luaO_arith
  00093	4c 8b 4c 24 30	 mov	 r9, QWORD PTR i2$2[rsp]
$LN29@luaO_arith:
; Line 131
  00098	4c 8b 44 24 38	 mov	 r8, QWORD PTR i1$4[rsp]
  0009d	8b d6		 mov	 edx, esi
  0009f	48 8b cd	 mov	 rcx, rbp
$LN35@luaO_arith:
  000a2	e8 00 00 00 00	 call	 intarith
  000a7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR res$[rsp]
  000ac	48 89 01	 mov	 QWORD PTR [rcx], rax
  000af	c7 41 08 13 00
	00 00		 mov	 DWORD PTR [rcx+8], 19
; Line 132
  000b6	e9 a6 00 00 00	 jmp	 $LN14@luaO_arith
$LN9@luaO_arith:
; Line 138
  000bb	41 83 78 08 03	 cmp	 DWORD PTR [r8+8], 3
$LN36@luaO_arith:
  000c0	75 0d		 jne	 SHORT $LN20@luaO_arith
  000c2	f2 41 0f 10 00	 movsdx	 xmm0, QWORD PTR [r8]
  000c7	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR n1$3[rsp], xmm0
  000cd	eb 11		 jmp	 SHORT $LN30@luaO_arith
$LN20@luaO_arith:
  000cf	48 8d 54 24 38	 lea	 rdx, QWORD PTR n1$3[rsp]
  000d4	49 8b c8	 mov	 rcx, r8
  000d7	e8 00 00 00 00	 call	 luaV_tonumber_
  000dc	85 c0		 test	 eax, eax
  000de	74 67		 je	 SHORT $LN2@luaO_arith
$LN30@luaO_arith:
  000e0	83 7b 08 03	 cmp	 DWORD PTR [rbx+8], 3
  000e4	75 06		 jne	 SHORT $LN22@luaO_arith
  000e6	f2 0f 10 1b	 movsdx	 xmm3, QWORD PTR [rbx]
  000ea	eb 17		 jmp	 SHORT $LN31@luaO_arith
$LN22@luaO_arith:
  000ec	48 8d 54 24 30	 lea	 rdx, QWORD PTR n2$1[rsp]
  000f1	48 8b cb	 mov	 rcx, rbx
  000f4	e8 00 00 00 00	 call	 luaV_tonumber_
  000f9	85 c0		 test	 eax, eax
  000fb	74 4a		 je	 SHORT $LN2@luaO_arith
  000fd	f2 0f 10 5c 24
	30		 movsdx	 xmm3, QWORD PTR n2$1[rsp]
$LN31@luaO_arith:
; Line 139
  00103	f2 0f 10 54 24
	38		 movsdx	 xmm2, QWORD PTR n1$3[rsp]
  00109	8b d6		 mov	 edx, esi
  0010b	48 8b cd	 mov	 rcx, rbp
  0010e	e8 00 00 00 00	 call	 numarith
  00113	48 8b 44 24 70	 mov	 rax, QWORD PTR res$[rsp]
  00118	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [rax+8], 3
  0011f	f2 0f 11 00	 movsdx	 QWORD PTR [rax], xmm0
; Line 140
  00123	eb 3c		 jmp	 SHORT $LN14@luaO_arith
$LN6@luaO_arith:
; Line 146
  00125	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00129	83 f8 13	 cmp	 eax, 19
  0012c	75 11		 jne	 SHORT $LN4@luaO_arith
  0012e	41 39 41 08	 cmp	 DWORD PTR [r9+8], eax
  00132	75 0b		 jne	 SHORT $LN4@luaO_arith
; Line 147
  00134	4d 8b 09	 mov	 r9, QWORD PTR [r9]
  00137	4d 8b 00	 mov	 r8, QWORD PTR [r8]
; Line 148
  0013a	e9 63 ff ff ff	 jmp	 $LN35@luaO_arith
$LN4@luaO_arith:
; Line 150
  0013f	83 f8 03	 cmp	 eax, 3
  00142	e9 79 ff ff ff	 jmp	 $LN36@luaO_arith
$LN2@luaO_arith:
; Line 159
  00147	4c 8b 4c 24 70	 mov	 r9, QWORD PTR res$[rsp]
  0014c	8d 46 06	 lea	 eax, DWORD PTR [rsi+6]
  0014f	4c 8b c3	 mov	 r8, rbx
  00152	48 8b d7	 mov	 rdx, rdi
  00155	48 8b cd	 mov	 rcx, rbp
  00158	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0015c	e8 00 00 00 00	 call	 luaT_trybinTM
$LN14@luaO_arith:
; Line 160
  00161	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00166	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0016b	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00170	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00174	5f		 pop	 rdi
  00175	c3		 ret	 0
luaO_arith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaO_ceillog2
_TEXT	SEGMENT
x$ = 8
luaO_ceillog2 PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 77
  00000	ff c9		 dec	 ecx
  00002	33 d2		 xor	 edx, edx
; Line 78
  00004	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  0000a	72 12		 jb	 SHORT $LN1@luaO_ceill
  0000c	0f 1f 40 00	 npad	 4
$LL2@luaO_ceill:
  00010	c1 e9 08	 shr	 ecx, 8
  00013	83 c2 08	 add	 edx, 8
  00016	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  0001c	73 f2		 jae	 SHORT $LL2@luaO_ceill
$LN1@luaO_ceill:
; Line 79
  0001e	8b c1		 mov	 eax, ecx
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log_2@?1??luaO_ceillog2@@9@9
  00027	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0002b	03 c2		 add	 eax, edx
; Line 80
  0002d	c3		 ret	 0
luaO_ceillog2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaO_utf8esc
_TEXT	SEGMENT
buff$ = 8
x$ = 16
luaO_utf8esc PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 304
  00000	4c 8b d1	 mov	 r10, rcx
; Line 305
  00003	41 b9 01 00 00
	00		 mov	 r9d, 1
; Line 307
  00009	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H
  0000f	73 07		 jae	 SHORT $LN5@luaO_utf8e
; Line 308
  00011	88 51 07	 mov	 BYTE PTR [rcx+7], dl
; Line 318
  00014	41 8b c1	 mov	 eax, r9d
; Line 319
  00017	c3		 ret	 0
$LN5@luaO_utf8e:
; Line 310
  00018	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  0001d	4d 8d 42 07	 lea	 r8, QWORD PTR [r10+7]
$LL3@luaO_utf8e:
; Line 312
  00021	0f b6 c2	 movzx	 eax, dl
; Line 314
  00024	d1 e9		 shr	 ecx, 1
  00026	c1 ea 06	 shr	 edx, 6
  00029	24 3f		 and	 al, 63			; 0000003fH
  0002b	41 ff c1	 inc	 r9d
  0002e	4d 8d 40 ff	 lea	 r8, QWORD PTR [r8-1]
  00032	0c 80		 or	 al, -128		; ffffffffffffff80H
  00034	41 88 40 01	 mov	 BYTE PTR [r8+1], al
; Line 315
  00038	3b d1		 cmp	 edx, ecx
  0003a	77 e5		 ja	 SHORT $LL3@luaO_utf8e
; Line 316
  0003c	f6 d1		 not	 cl
  0003e	49 63 c1	 movsxd	 rax, r9d
  00041	4c 2b d0	 sub	 r10, rax
  00044	02 c9		 add	 cl, cl
; Line 318
  00046	41 8b c1	 mov	 eax, r9d
  00049	0a ca		 or	 cl, dl
  0004b	41 88 4a 08	 mov	 BYTE PTR [r10+8], cl
; Line 319
  0004f	c3		 ret	 0
luaO_utf8esc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaO_fb2int
_TEXT	SEGMENT
x$ = 8
luaO_fb2int PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 58
  00000	8b c1		 mov	 eax, ecx
  00002	83 f9 08	 cmp	 ecx, 8
  00005	7c 0d		 jl	 SHORT $LN4@luaO_fb2in
  00007	83 e0 07	 and	 eax, 7
  0000a	c1 f9 03	 sar	 ecx, 3
  0000d	83 c0 08	 add	 eax, 8
  00010	ff c9		 dec	 ecx
  00012	d3 e0		 shl	 eax, cl
$LN4@luaO_fb2in:
; Line 59
  00014	c3		 ret	 0
luaO_fb2int ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaO_int2fb
_TEXT	SEGMENT
x$ = 8
luaO_int2fb PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lobject.c
; Line 42
  00000	33 c0		 xor	 eax, eax
; Line 43
  00002	83 f9 08	 cmp	 ecx, 8
  00005	73 03		 jae	 SHORT $LN8@luaO_int2f
  00007	8b c1		 mov	 eax, ecx
; Line 53
  00009	c3		 ret	 0
$LN8@luaO_int2f:
; Line 44
  0000a	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00010	72 1f		 jb	 SHORT $LN9@luaO_int2f
  00012	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL4@luaO_int2f:
; Line 45
  00020	83 c1 0f	 add	 ecx, 15
; Line 46
  00023	83 c0 04	 add	 eax, 4
  00026	c1 e9 04	 shr	 ecx, 4
  00029	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  0002f	73 ef		 jae	 SHORT $LL4@luaO_int2f
$LN9@luaO_int2f:
; Line 48
  00031	83 f9 10	 cmp	 ecx, 16
  00034	72 15		 jb	 SHORT $LN1@luaO_int2f
  00036	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL2@luaO_int2f:
; Line 49
  00040	ff c1		 inc	 ecx
; Line 50
  00042	ff c0		 inc	 eax
  00044	d1 e9		 shr	 ecx, 1
  00046	83 f9 10	 cmp	 ecx, 16
  00049	73 f5		 jae	 SHORT $LL2@luaO_int2f
$LN1@luaO_int2f:
; Line 52
  0004b	8d 04 c5 08 00
	00 00		 lea	 eax, DWORD PTR [rax*8+8]
  00052	83 c1 f8	 add	 ecx, -8
  00055	0b c1		 or	 eax, ecx
; Line 53
  00057	c3		 ret	 0
luaO_int2fb ENDP
_TEXT	ENDS
END
