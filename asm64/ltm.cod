; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08JEIPHCP@no?5value?$AA@			; `string'
PUBLIC	??_C@_03ILAMHENH@nil?$AA@			; `string'
PUBLIC	??_C@_07GOBOHMJA@boolean?$AA@			; `string'
PUBLIC	??_C@_06EBGNBFIA@number?$AA@			; `string'
PUBLIC	??_C@_06ICGJLFIM@string?$AA@			; `string'
PUBLIC	??_C@_05LCLENNFI@table?$AA@			; `string'
PUBLIC	??_C@_08HFFPPCHF@function?$AA@			; `string'
PUBLIC	??_C@_06FJHNOCKE@thread?$AA@			; `string'
PUBLIC	??_C@_05BENFLAID@proto?$AA@			; `string'
PUBLIC	??_C@_07NHABFFHN@__index?$AA@			; `string'
PUBLIC	??_C@_0L@GADKNKH@__newindex?$AA@		; `string'
PUBLIC	??_C@_04BDLIKKMN@__gc?$AA@			; `string'
PUBLIC	??_C@_06BPGFKLEK@__mode?$AA@			; `string'
PUBLIC	??_C@_05MNDELLDN@__len?$AA@			; `string'
PUBLIC	??_C@_04GIMIAOHA@__eq?$AA@			; `string'
PUBLIC	??_C@_05MEHDOBFN@__add?$AA@			; `string'
PUBLIC	??_C@_05HFNNBAII@__sub?$AA@			; `string'
PUBLIC	??_C@_05FLJIBNKK@__mul?$AA@			; `string'
PUBLIC	??_C@_05ICPALBAE@__mod?$AA@			; `string'
PUBLIC	??_C@_05EBGMHPNE@__pow?$AA@			; `string'
PUBLIC	??_C@_05IDIBPCOP@__div?$AA@			; `string'
PUBLIC	??_C@_06FENDFIEK@__idiv?$AA@			; `string'
PUBLIC	??_C@_06GJGGPPDP@__band?$AA@			; `string'
PUBLIC	??_C@_05MGALBEIF@__bor?$AA@			; `string'
PUBLIC	??_C@_06FJCNDIMK@__bxor?$AA@			; `string'
PUBLIC	??_C@_05PPKAANCF@__shl?$AA@			; `string'
PUBLIC	??_C@_05CLOBDCPK@__shr?$AA@			; `string'
PUBLIC	??_C@_05MHFNBPAK@__unm?$AA@			; `string'
PUBLIC	??_C@_06HKAFJHAP@__bnot?$AA@			; `string'
PUBLIC	??_C@_04BKGOMBLK@__lt?$AA@			; `string'
PUBLIC	??_C@_04EJLHOCKK@__le?$AA@			; `string'
PUBLIC	??_C@_08HGDAODEP@__concat?$AA@			; `string'
PUBLIC	??_C@_06JPFLIIOJ@__call?$AA@			; `string'
PUBLIC	luaT_typenames_
;	COMDAT ??_C@_06JPFLIIOJ@__call?$AA@
CONST	SEGMENT
??_C@_06JPFLIIOJ@__call?$AA@ DB '__call', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGDAODEP@__concat?$AA@
CONST	SEGMENT
??_C@_08HGDAODEP@__concat?$AA@ DB '__concat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EJLHOCKK@__le?$AA@
CONST	SEGMENT
??_C@_04EJLHOCKK@__le?$AA@ DB '__le', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKGOMBLK@__lt?$AA@
CONST	SEGMENT
??_C@_04BKGOMBLK@__lt?$AA@ DB '__lt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKAFJHAP@__bnot?$AA@
CONST	SEGMENT
??_C@_06HKAFJHAP@__bnot?$AA@ DB '__bnot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHFNBPAK@__unm?$AA@
CONST	SEGMENT
??_C@_05MHFNBPAK@__unm?$AA@ DB '__unm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CLOBDCPK@__shr?$AA@
CONST	SEGMENT
??_C@_05CLOBDCPK@__shr?$AA@ DB '__shr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPKAANCF@__shl?$AA@
CONST	SEGMENT
??_C@_05PPKAANCF@__shl?$AA@ DB '__shl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJCNDIMK@__bxor?$AA@
CONST	SEGMENT
??_C@_06FJCNDIMK@__bxor?$AA@ DB '__bxor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MGALBEIF@__bor?$AA@
CONST	SEGMENT
??_C@_05MGALBEIF@__bor?$AA@ DB '__bor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJGGPPDP@__band?$AA@
CONST	SEGMENT
??_C@_06GJGGPPDP@__band?$AA@ DB '__band', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FENDFIEK@__idiv?$AA@
CONST	SEGMENT
??_C@_06FENDFIEK@__idiv?$AA@ DB '__idiv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDIBPCOP@__div?$AA@
CONST	SEGMENT
??_C@_05IDIBPCOP@__div?$AA@ DB '__div', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EBGMHPNE@__pow?$AA@
CONST	SEGMENT
??_C@_05EBGMHPNE@__pow?$AA@ DB '__pow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ICPALBAE@__mod?$AA@
CONST	SEGMENT
??_C@_05ICPALBAE@__mod?$AA@ DB '__mod', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FLJIBNKK@__mul?$AA@
CONST	SEGMENT
??_C@_05FLJIBNKK@__mul?$AA@ DB '__mul', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFNNBAII@__sub?$AA@
CONST	SEGMENT
??_C@_05HFNNBAII@__sub?$AA@ DB '__sub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHDOBFN@__add?$AA@
CONST	SEGMENT
??_C@_05MEHDOBFN@__add?$AA@ DB '__add', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIMIAOHA@__eq?$AA@
CONST	SEGMENT
??_C@_04GIMIAOHA@__eq?$AA@ DB '__eq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MNDELLDN@__len?$AA@
CONST	SEGMENT
??_C@_05MNDELLDN@__len?$AA@ DB '__len', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPGFKLEK@__mode?$AA@
CONST	SEGMENT
??_C@_06BPGFKLEK@__mode?$AA@ DB '__mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BDLIKKMN@__gc?$AA@
CONST	SEGMENT
??_C@_04BDLIKKMN@__gc?$AA@ DB '__gc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GADKNKH@__newindex?$AA@
CONST	SEGMENT
??_C@_0L@GADKNKH@__newindex?$AA@ DB '__newindex', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NHABFFHN@__index?$AA@
CONST	SEGMENT
??_C@_07NHABFFHN@__index?$AA@ DB '__index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BENFLAID@proto?$AA@
CONST	SEGMENT
??_C@_05BENFLAID@proto?$AA@ DB 'proto', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJHNOCKE@thread?$AA@
CONST	SEGMENT
??_C@_06FJHNOCKE@thread?$AA@ DB 'thread', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFFPPCHF@function?$AA@
CONST	SEGMENT
??_C@_08HFFPPCHF@function?$AA@ DB 'function', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCLENNFI@table?$AA@
CONST	SEGMENT
??_C@_05LCLENNFI@table?$AA@ DB 'table', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICGJLFIM@string?$AA@
CONST	SEGMENT
??_C@_06ICGJLFIM@string?$AA@ DB 'string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBGNBFIA@number?$AA@
CONST	SEGMENT
??_C@_06EBGNBFIA@number?$AA@ DB 'number', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GOBOHMJA@boolean?$AA@
CONST	SEGMENT
??_C@_07GOBOHMJA@boolean?$AA@ DB 'boolean', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ILAMHENH@nil?$AA@
CONST	SEGMENT
??_C@_03ILAMHENH@nil?$AA@ DB 'nil', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JEIPHCP@no?5value?$AA@
CONST	SEGMENT
??_C@_08JEIPHCP@no?5value?$AA@ DB 'no value', 00H	; `string'
CONST	ENDS
CONST	SEGMENT
udatatypename DB 'userdata', 00H
	ORG $+7
?luaT_eventname@?1??luaT_init@@9@9 DQ FLAT:??_C@_07NHABFFHN@__index?$AA@ ; `luaT_init'::`2'::luaT_eventname
	DQ	FLAT:??_C@_0L@GADKNKH@__newindex?$AA@
	DQ	FLAT:??_C@_04BDLIKKMN@__gc?$AA@
	DQ	FLAT:??_C@_06BPGFKLEK@__mode?$AA@
	DQ	FLAT:??_C@_05MNDELLDN@__len?$AA@
	DQ	FLAT:??_C@_04GIMIAOHA@__eq?$AA@
	DQ	FLAT:??_C@_05MEHDOBFN@__add?$AA@
	DQ	FLAT:??_C@_05HFNNBAII@__sub?$AA@
	DQ	FLAT:??_C@_05FLJIBNKK@__mul?$AA@
	DQ	FLAT:??_C@_05ICPALBAE@__mod?$AA@
	DQ	FLAT:??_C@_05EBGMHPNE@__pow?$AA@
	DQ	FLAT:??_C@_05IDIBPCOP@__div?$AA@
	DQ	FLAT:??_C@_06FENDFIEK@__idiv?$AA@
	DQ	FLAT:??_C@_06GJGGPPDP@__band?$AA@
	DQ	FLAT:??_C@_05MGALBEIF@__bor?$AA@
	DQ	FLAT:??_C@_06FJCNDIMK@__bxor?$AA@
	DQ	FLAT:??_C@_05PPKAANCF@__shl?$AA@
	DQ	FLAT:??_C@_05CLOBDCPK@__shr?$AA@
	DQ	FLAT:??_C@_05MHFNBPAK@__unm?$AA@
	DQ	FLAT:??_C@_06HKAFJHAP@__bnot?$AA@
	DQ	FLAT:??_C@_04BKGOMBLK@__lt?$AA@
	DQ	FLAT:??_C@_04EJLHOCKK@__le?$AA@
	DQ	FLAT:??_C@_08HGDAODEP@__concat?$AA@
	DQ	FLAT:??_C@_06JPFLIIOJ@__call?$AA@
luaT_typenames_ DQ FLAT:??_C@_08JEIPHCP@no?5value?$AA@
	DQ	FLAT:??_C@_03ILAMHENH@nil?$AA@
	DQ	FLAT:??_C@_07GOBOHMJA@boolean?$AA@
	DQ	FLAT:udatatypename
	DQ	FLAT:??_C@_06EBGNBFIA@number?$AA@
	DQ	FLAT:??_C@_06ICGJLFIM@string?$AA@
	DQ	FLAT:??_C@_05LCLENNFI@table?$AA@
	DQ	FLAT:??_C@_08HFFPPCHF@function?$AA@
	DQ	FLAT:udatatypename
	DQ	FLAT:??_C@_06FJHNOCKE@thread?$AA@
	DQ	FLAT:??_C@_05BENFLAID@proto?$AA@
CONST	ENDS
PUBLIC	luaT_gettm
PUBLIC	luaT_gettmbyobj
PUBLIC	luaT_init
PUBLIC	luaT_callTM
PUBLIC	luaT_callbinTM
PUBLIC	luaT_trybinTM
PUBLIC	luaT_callorderTM
PUBLIC	??_C@_0BN@DBGLHCNA@perform?5bitwise?5operation?5on?$AA@ ; `string'
PUBLIC	??_C@_0BG@IOLALLOM@perform?5arithmetic?5on?$AA@	; `string'
EXTRN	luaG_concaterror:PROC
EXTRN	luaG_opinterror:PROC
EXTRN	luaG_tointerror:PROC
EXTRN	luaD_call:PROC
EXTRN	luaD_callnoyield:PROC
EXTRN	luaC_fix:PROC
EXTRN	luaS_new:PROC
EXTRN	luaH_getshortstr:PROC
EXTRN	luaV_tonumber_:PROC
EXTRN	luaO_nilobject_:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaT_gettm DD imagerel $LN6
	DD	imagerel $LN6+54
	DD	imagerel $unwind$luaT_gettm
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaT_init DD imagerel $LN11
	DD	imagerel $LN11+101
	DD	imagerel $unwind$luaT_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaT_callTM DD imagerel $LN8
	DD	imagerel $LN8+162
	DD	imagerel $unwind$luaT_callTM
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaT_callbinTM DD imagerel $LN31
	DD	imagerel $LN31+335
	DD	imagerel $unwind$luaT_callbinTM
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaT_trybinTM DD imagerel $LN22
	DD	imagerel $LN22+243
	DD	imagerel $unwind$luaT_trybinTM
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaT_callorderTM DD imagerel $LN9
	DD	imagerel $LN9+76
	DD	imagerel $unwind$luaT_callorderTM
pdata	ENDS
;	COMDAT ??_C@_0BG@IOLALLOM@perform?5arithmetic?5on?$AA@
CONST	SEGMENT
??_C@_0BG@IOLALLOM@perform?5arithmetic?5on?$AA@ DB 'perform arithmetic on'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DBGLHCNA@perform?5bitwise?5operation?5on?$AA@
CONST	SEGMENT
??_C@_0BN@DBGLHCNA@perform?5bitwise?5operation?5on?$AA@ DB 'perform bitwi'
	DB	'se operation on', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaT_callorderTM DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaT_trybinTM DD 081401H
	DD	0c6414H
	DD	0b5414H
	DD	0a3414H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaT_callbinTM DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaT_callTM DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaT_init DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaT_gettm DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaT_callorderTM
_TEXT	SEGMENT
L$ = 64
p1$ = 72
p2$ = 80
event$ = 88
luaT_callorderTM PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltm.c
; Line 143
$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 144
  00006	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  0000b	4c 8b 49 10	 mov	 r9, QWORD PTR [rcx+16]
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	e8 00 00 00 00	 call	 luaT_callbinTM
  00017	85 c0		 test	 eax, eax
  00019	75 09		 jne	 SHORT $LN2@luaT_callo
; Line 145
  0001b	83 c8 ff	 or	 eax, -1
; Line 148
  0001e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00022	5b		 pop	 rbx
  00023	c3		 ret	 0
$LN2@luaT_callo:
; Line 147
  00024	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00028	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 15		 je	 SHORT $LN6@luaT_callo
  0002f	83 f9 01	 cmp	 ecx, 1
  00032	75 05		 jne	 SHORT $LN5@luaT_callo
  00034	83 38 00	 cmp	 DWORD PTR [rax], 0
  00037	74 0b		 je	 SHORT $LN6@luaT_callo
$LN5@luaT_callo:
  00039	b8 01 00 00 00	 mov	 eax, 1
; Line 148
  0003e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00042	5b		 pop	 rbx
  00043	c3		 ret	 0
$LN6@luaT_callo:
; Line 147
  00044	33 c0		 xor	 eax, eax
; Line 148
  00046	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004a	5b		 pop	 rbx
  0004b	c3		 ret	 0
luaT_callorderTM ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaT_trybinTM
_TEXT	SEGMENT
dummy$1 = 48
L$ = 80
p1$ = 88
p2$ = 96
res$ = 104
event$ = 112
luaT_trybinTM PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltm.c
; Line 120
$LN22:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; Line 121
  00014	8b 74 24 70	 mov	 esi, DWORD PTR event$[rsp]
  00018	49 8b d8	 mov	 rbx, r8
  0001b	48 8b fa	 mov	 rdi, rdx
  0001e	89 74 24 20	 mov	 DWORD PTR [rsp+32], esi
  00022	48 8b e9	 mov	 rbp, rcx
  00025	e8 00 00 00 00	 call	 luaT_callbinTM
  0002a	85 c0		 test	 eax, eax
  0002c	75 66		 jne	 SHORT $LN6@luaT_trybi
; Line 122
  0002e	83 fe 0d	 cmp	 esi, 13
  00031	0f 8c a6 00 00
	00		 jl	 $LN2@luaT_trybi
  00037	83 fe 11	 cmp	 esi, 17
  0003a	7e 10		 jle	 SHORT $LN4@luaT_trybi
  0003c	83 fe 13	 cmp	 esi, 19
  0003f	74 0b		 je	 SHORT $LN4@luaT_trybi
  00041	83 fe 16	 cmp	 esi, 22
  00044	0f 85 93 00 00
	00		 jne	 $LN2@luaT_trybi
  0004a	eb 5d		 jmp	 SHORT $LN18@luaT_trybi
$LN4@luaT_trybi:
; Line 129
  0004c	83 7f 08 03	 cmp	 DWORD PTR [rdi+8], 3
  00050	75 0c		 jne	 SHORT $LN11@luaT_trybi
  00052	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00056	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR dummy$1[rsp], xmm0
  0005c	eb 11		 jmp	 SHORT $LN15@luaT_trybi
$LN11@luaT_trybi:
  0005e	48 8d 54 24 30	 lea	 rdx, QWORD PTR dummy$1[rsp]
  00063	48 8b cf	 mov	 rcx, rdi
  00066	e8 00 00 00 00	 call	 luaV_tonumber_
  0006b	85 c0		 test	 eax, eax
  0006d	74 58		 je	 SHORT $LN21@luaT_trybi
$LN15@luaT_trybi:
  0006f	83 7b 08 03	 cmp	 DWORD PTR [rbx+8], 3
  00073	75 0c		 jne	 SHORT $LN13@luaT_trybi
  00075	f2 0f 10 03	 movsdx	 xmm0, QWORD PTR [rbx]
  00079	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR dummy$1[rsp], xmm0
  0007f	eb 37		 jmp	 SHORT $LN20@luaT_trybi
$LN13@luaT_trybi:
  00081	48 8d 54 24 30	 lea	 rdx, QWORD PTR dummy$1[rsp]
  00086	48 8b cb	 mov	 rcx, rbx
  00089	e8 00 00 00 00	 call	 luaV_tonumber_
  0008e	85 c0		 test	 eax, eax
  00090	75 26		 jne	 SHORT $LN20@luaT_trybi
  00092	eb 33		 jmp	 SHORT $LN21@luaT_trybi
$LN6@luaT_trybi:
; Line 139
  00094	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00099	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0009e	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000a3	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
$LN18@luaT_trybi:
; Line 124
  000a9	4c 8b c3	 mov	 r8, rbx
  000ac	48 8b d7	 mov	 rdx, rdi
  000af	48 8b cd	 mov	 rcx, rbp
  000b2	e8 00 00 00 00	 call	 luaG_concaterror
  000b7	cc		 int	 3
$LN20@luaT_trybi:
; Line 130
  000b8	4c 8b c3	 mov	 r8, rbx
  000bb	48 8b d7	 mov	 rdx, rdi
  000be	48 8b cd	 mov	 rcx, rbp
  000c1	e8 00 00 00 00	 call	 luaG_tointerror
  000c6	cc		 int	 3
$LN21@luaT_trybi:
; Line 132
  000c7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0BN@DBGLHCNA@perform?5bitwise?5operation?5on?$AA@
  000ce	4c 8b c3	 mov	 r8, rbx
  000d1	48 8b d7	 mov	 rdx, rdi
  000d4	48 8b cd	 mov	 rcx, rbp
  000d7	e8 00 00 00 00	 call	 luaG_opinterror
  000dc	cc		 int	 3
$LN2@luaT_trybi:
; Line 136
  000dd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0BG@IOLALLOM@perform?5arithmetic?5on?$AA@
  000e4	4c 8b c3	 mov	 r8, rbx
  000e7	48 8b d7	 mov	 rdx, rdi
  000ea	48 8b cd	 mov	 rcx, rbp
  000ed	e8 00 00 00 00	 call	 luaG_opinterror
  000f2	cc		 int	 3
$LN17@luaT_trybi:
luaT_trybinTM ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaT_callbinTM
_TEXT	SEGMENT
L$ = 48
p1$ = 56
p2$ = 64
res$ = 72
event$ = 80
luaT_callbinTM PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltm.c
; Line 109
$LN31:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	48 8b d9	 mov	 rbx, rcx
; Line 110
  00018	8b 4a 08	 mov	 ecx, DWORD PTR [rdx+8]
  0001b	4d 8b f1	 mov	 r14, r9
  0001e	8b c1		 mov	 eax, ecx
  00020	49 8b f0	 mov	 rsi, r8
  00023	48 8b fa	 mov	 rdi, rdx
  00026	83 e0 0f	 and	 eax, 15
  00029	83 f8 05	 cmp	 eax, 5
  0002c	74 1f		 je	 SHORT $LN7@luaT_callb
  0002e	83 f8 07	 cmp	 eax, 7
  00031	74 11		 je	 SHORT $LN6@luaT_callb
  00033	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00037	83 e1 0f	 and	 ecx, 15
  0003a	48 8b 8c c8 a0
	01 00 00	 mov	 rcx, QWORD PTR [rax+rcx*8+416]
  00042	eb 10		 jmp	 SHORT $LN8@luaT_callb
$LN6@luaT_callb:
  00044	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00047	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0004b	eb 07		 jmp	 SHORT $LN8@luaT_callb
$LN7@luaT_callb:
  0004d	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00050	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
$LN8@luaT_callb:
  00054	48 85 c9	 test	 rcx, rcx
  00057	74 18		 je	 SHORT $LN12@luaT_callb
  00059	48 63 44 24 50	 movsxd	 rax, DWORD PTR event$[rsp]
  0005e	48 8b 53 18	 mov	 rdx, QWORD PTR [rbx+24]
  00062	48 8b 94 c2 e0
	00 00 00	 mov	 rdx, QWORD PTR [rdx+rax*8+224]
  0006a	e8 00 00 00 00	 call	 luaH_getshortstr
  0006f	eb 07		 jmp	 SHORT $LN13@luaT_callb
$LN12@luaT_callb:
  00071	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:luaO_nilobject_
$LN13@luaT_callb:
; Line 111
  00078	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0007c	75 61		 jne	 SHORT $LN1@luaT_callb
; Line 112
  0007e	8b 4e 08	 mov	 ecx, DWORD PTR [rsi+8]
  00081	8b c1		 mov	 eax, ecx
  00083	83 e0 0f	 and	 eax, 15
  00086	83 f8 05	 cmp	 eax, 5
  00089	74 1f		 je	 SHORT $LN16@luaT_callb
  0008b	83 f8 07	 cmp	 eax, 7
  0008e	74 11		 je	 SHORT $LN15@luaT_callb
  00090	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00094	83 e1 0f	 and	 ecx, 15
  00097	48 8b 8c c8 a0
	01 00 00	 mov	 rcx, QWORD PTR [rax+rcx*8+416]
  0009f	eb 10		 jmp	 SHORT $LN17@luaT_callb
$LN15@luaT_callb:
  000a1	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000a4	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  000a8	eb 07		 jmp	 SHORT $LN17@luaT_callb
$LN16@luaT_callb:
  000aa	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000ad	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
$LN17@luaT_callb:
  000b1	48 85 c9	 test	 rcx, rcx
  000b4	74 18		 je	 SHORT $LN21@luaT_callb
  000b6	48 63 44 24 50	 movsxd	 rax, DWORD PTR event$[rsp]
  000bb	48 8b 53 18	 mov	 rdx, QWORD PTR [rbx+24]
  000bf	48 8b 94 c2 e0
	00 00 00	 mov	 rdx, QWORD PTR [rdx+rax*8+224]
  000c7	e8 00 00 00 00	 call	 luaH_getshortstr
  000cc	eb 07		 jmp	 SHORT $LN22@luaT_callb
$LN21@luaT_callb:
  000ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:luaO_nilobject_
$LN22@luaT_callb:
; Line 113
  000d5	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  000d9	75 04		 jne	 SHORT $LN1@luaT_callb
  000db	33 c0		 xor	 eax, eax
  000dd	eb 5a		 jmp	 SHORT $LN3@luaT_callb
$LN1@luaT_callb:
; Line 114
  000df	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000e2	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  000e6	4c 2b 73 38	 sub	 r14, QWORD PTR [rbx+56]
  000ea	41 b8 01 00 00
	00		 mov	 r8d, 1
  000f0	48 8b cb	 mov	 rcx, rbx
  000f3	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  000f6	0f 10 07	 movups	 xmm0, XMMWORD PTR [rdi]
  000f9	0f 11 42 10	 movups	 XMMWORD PTR [rdx+16], xmm0
  000fd	0f 10 06	 movups	 xmm0, XMMWORD PTR [rsi]
  00100	0f 11 42 20	 movups	 XMMWORD PTR [rdx+32], xmm0
  00104	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00108	48 83 43 10 30	 add	 QWORD PTR [rbx+16], 48	; 00000030H
  0010d	f6 40 42 02	 test	 BYTE PTR [rax+66], 2
  00111	74 07		 je	 SHORT $LN25@luaT_callb
  00113	e8 00 00 00 00	 call	 luaD_call
  00118	eb 05		 jmp	 SHORT $LN24@luaT_callb
$LN25@luaT_callb:
  0011a	e8 00 00 00 00	 call	 luaD_callnoyield
$LN24@luaT_callb:
  0011f	48 83 43 10 f0	 add	 QWORD PTR [rbx+16], -16
  00124	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  00128	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0012c	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]
; Line 115
  0012f	b8 01 00 00 00	 mov	 eax, 1
  00134	42 0f 11 04 31	 movups	 XMMWORD PTR [rcx+r14], xmm0
$LN3@luaT_callb:
; Line 116
  00139	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0013e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00143	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  00148	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0014c	41 5e		 pop	 r14
  0014e	c3		 ret	 0
luaT_callbinTM ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaT_callTM
_TEXT	SEGMENT
L$ = 48
f$ = 56
p1$ = 64
p2$ = 72
p3$ = 80
hasres$ = 88
luaT_callTM PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltm.c
; Line 87
$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 90
  0000f	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]
  00012	4c 8b 54 24 50	 mov	 r10, QWORD PTR p3$[rsp]
; Line 94
  00017	8b 7c 24 58	 mov	 edi, DWORD PTR hasres$[rsp]
  0001b	48 8b d9	 mov	 rbx, rcx
  0001e	49 8b f2	 mov	 rsi, r10
  00021	48 2b 71 38	 sub	 rsi, QWORD PTR [rcx+56]
  00025	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00029	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
  0002c	41 0f 10 00	 movups	 xmm0, XMMWORD PTR [r8]
  00030	0f 11 41 10	 movups	 XMMWORD PTR [rcx+16], xmm0
  00034	41 0f 10 01	 movups	 xmm0, XMMWORD PTR [r9]
  00038	0f 11 41 20	 movups	 XMMWORD PTR [rcx+32], xmm0
  0003c	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  00040	48 83 c2 30	 add	 rdx, 48			; 00000030H
  00044	48 89 53 10	 mov	 QWORD PTR [rbx+16], rdx
  00048	85 ff		 test	 edi, edi
  0004a	75 0f		 jne	 SHORT $LN4@luaT_callT
; Line 95
  0004c	48 8d 42 10	 lea	 rax, QWORD PTR [rdx+16]
  00050	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  00054	41 0f 10 02	 movups	 xmm0, XMMWORD PTR [r10]
  00058	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
$LN4@luaT_callT:
; Line 97
  0005b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
; Line 98
  0005f	48 8b d1	 mov	 rdx, rcx
  00062	44 8b c7	 mov	 r8d, edi
  00065	f6 40 42 02	 test	 BYTE PTR [rax+66], 2
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	74 07		 je	 SHORT $LN3@luaT_callT
  0006e	e8 00 00 00 00	 call	 luaD_call
; Line 99
  00073	eb 05		 jmp	 SHORT $LN2@luaT_callT
$LN3@luaT_callT:
; Line 100
  00075	e8 00 00 00 00	 call	 luaD_callnoyield
$LN2@luaT_callT:
; Line 101
  0007a	85 ff		 test	 edi, edi
  0007c	74 14		 je	 SHORT $LN1@luaT_callT
; Line 103
  0007e	48 83 43 10 f0	 add	 QWORD PTR [rbx+16], -16
  00083	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00087	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  0008b	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  0008e	0f 11 04 06	 movups	 XMMWORD PTR [rsi+rax], xmm0
$LN1@luaT_callT:
; Line 105
  00092	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00097	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0009c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
luaT_callTM ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaT_init
_TEXT	SEGMENT
L$ = 48
luaT_init PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltm.c
; Line 37
$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f9	 mov	 rdi, rcx
; Line 48
  00012	bb e0 00 00 00	 mov	 ebx, 224		; 000000e0H
  00017	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:?luaT_eventname@?1??luaT_init@@9@9
  0001e	66 90		 npad	 2
$LL3@luaT_init:
; Line 49
  00020	48 8b 94 1e 20
	ff ff ff	 mov	 rdx, QWORD PTR [rsi+rbx-224]
  00028	48 8b cf	 mov	 rcx, rdi
  0002b	e8 00 00 00 00	 call	 luaS_new
  00030	48 8b 57 18	 mov	 rdx, QWORD PTR [rdi+24]
; Line 50
  00034	48 8b cf	 mov	 rcx, rdi
  00037	48 89 04 13	 mov	 QWORD PTR [rbx+rdx], rax
  0003b	48 8b 57 18	 mov	 rdx, QWORD PTR [rdi+24]
  0003f	48 8b 14 1a	 mov	 rdx, QWORD PTR [rdx+rbx]
  00043	e8 00 00 00 00	 call	 luaC_fix
  00048	48 83 c3 08	 add	 rbx, 8
  0004c	48 81 fb a0 01
	00 00		 cmp	 rbx, 416		; 000001a0H
  00053	7c cb		 jl	 SHORT $LL3@luaT_init
; Line 52
  00055	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
luaT_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaT_gettmbyobj
_TEXT	SEGMENT
L$ = 8
o$ = 16
event$ = 24
luaT_gettmbyobj PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltm.c
; Line 70
  00000	4c 8b c9	 mov	 r9, rcx
; Line 72
  00003	8b 4a 08	 mov	 ecx, DWORD PTR [rdx+8]
  00006	8b c1		 mov	 eax, ecx
  00008	83 e0 0f	 and	 eax, 15
  0000b	83 f8 05	 cmp	 eax, 5
  0000e	74 1f		 je	 SHORT $LN3@luaT_gettm
  00010	83 f8 07	 cmp	 eax, 7
  00013	74 11		 je	 SHORT $LN2@luaT_gettm
; Line 80
  00015	49 8b 41 18	 mov	 rax, QWORD PTR [r9+24]
  00019	83 e1 0f	 and	 ecx, 15
  0001c	48 8b 8c c8 a0
	01 00 00	 mov	 rcx, QWORD PTR [rax+rcx*8+416]
  00024	eb 10		 jmp	 SHORT $LN4@luaT_gettm
$LN2@luaT_gettm:
; Line 77
  00026	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00029	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
; Line 78
  0002d	eb 07		 jmp	 SHORT $LN4@luaT_gettm
$LN3@luaT_gettm:
; Line 74
  0002f	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00032	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
$LN4@luaT_gettm:
; Line 82
  00036	48 85 c9	 test	 rcx, rcx
  00039	74 14		 je	 SHORT $LN8@luaT_gettm
  0003b	49 8b 51 18	 mov	 rdx, QWORD PTR [r9+24]
  0003f	49 63 c0	 movsxd	 rax, r8d
  00042	48 8b 94 c2 e0
	00 00 00	 mov	 rdx, QWORD PTR [rdx+rax*8+224]
  0004a	e9 00 00 00 00	 jmp	 luaH_getshortstr
$LN8@luaT_gettm:
  0004f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:luaO_nilobject_
; Line 83
  00056	c3		 ret	 0
luaT_gettmbyobj ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaT_gettm
_TEXT	SEGMENT
events$ = 48
event$ = 56
ename$ = 64
luaT_gettm PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltm.c
; Line 59
$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b fa		 mov	 edi, edx
; Line 60
  0000c	49 8b d0	 mov	 rdx, r8
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	e8 00 00 00 00	 call	 luaH_getshortstr
; Line 62
  00017	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0001b	75 0e		 jne	 SHORT $LN2@luaT_gettm
; Line 63
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	8b cf		 mov	 ecx, edi
  00024	d2 e0		 shl	 al, cl
  00026	08 43 0a	 or	 BYTE PTR [rbx+10], al
; Line 64
  00029	33 c0		 xor	 eax, eax
$LN2@luaT_gettm:
; Line 67
  0002b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
luaT_gettm ENDP
_TEXT	ENDS
END
