; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07PANPENDC@running?$AA@			; `string'
PUBLIC	??_C@_06HBNONAG@create?$AA@			; `string'
PUBLIC	??_C@_06PLELHCEK@resume?$AA@			; `string'
PUBLIC	??_C@_06DJIHEMFI@status?$AA@			; `string'
PUBLIC	??_C@_04NFDDIEML@wrap?$AA@			; `string'
PUBLIC	??_C@_05LKJGIMLP@yield?$AA@			; `string'
PUBLIC	??_C@_0M@IHMPMLIH@isyieldable?$AA@		; `string'
;	COMDAT ??_C@_0M@IHMPMLIH@isyieldable?$AA@
CONST	SEGMENT
??_C@_0M@IHMPMLIH@isyieldable?$AA@ DB 'isyieldable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LKJGIMLP@yield?$AA@
CONST	SEGMENT
??_C@_05LKJGIMLP@yield?$AA@ DB 'yield', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NFDDIEML@wrap?$AA@
CONST	SEGMENT
??_C@_04NFDDIEML@wrap?$AA@ DB 'wrap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJIHEMFI@status?$AA@
CONST	SEGMENT
??_C@_06DJIHEMFI@status?$AA@ DB 'status', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PLELHCEK@resume?$AA@
CONST	SEGMENT
??_C@_06PLELHCEK@resume?$AA@ DB 'resume', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBNONAG@create?$AA@
CONST	SEGMENT
??_C@_06HBNONAG@create?$AA@ DB 'create', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
co_funcs DQ	FLAT:??_C@_06HBNONAG@create?$AA@
	DQ	FLAT:luaB_cocreate
	DQ	FLAT:??_C@_06PLELHCEK@resume?$AA@
	DQ	FLAT:luaB_coresume
	DQ	FLAT:??_C@_07PANPENDC@running?$AA@
	DQ	FLAT:luaB_corunning
	DQ	FLAT:??_C@_06DJIHEMFI@status?$AA@
	DQ	FLAT:luaB_costatus
	DQ	FLAT:??_C@_04NFDDIEML@wrap?$AA@
	DQ	FLAT:luaB_cowrap
	DQ	FLAT:??_C@_05LKJGIMLP@yield?$AA@
	DQ	FLAT:luaB_yield
	DQ	FLAT:??_C@_0M@IHMPMLIH@isyieldable?$AA@
	DQ	FLAT:luaB_yieldable
	DQ	0000000000000000H
	DQ	0000000000000000H
CONST	ENDS
;	COMDAT ??_C@_07PANPENDC@running?$AA@
CONST	SEGMENT
??_C@_07PANPENDC@running?$AA@ DB 'running', 00H		; `string'
CONST	ENDS
PUBLIC	luaopen_coroutine
PUBLIC	??_C@_0BA@DJIMIHMK@thread?5expected?$AA@	; `string'
PUBLIC	??_C@_0BN@CLPLGDGN@too?5many?5arguments?5to?5resume?$AA@ ; `string'
PUBLIC	??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@ ; `string'
PUBLIC	??_C@_0BL@OALEJBKN@too?5many?5results?5to?5resume?$AA@ ; `string'
PUBLIC	??_C@_09PAHKPJCJ@suspended?$AA@			; `string'
PUBLIC	??_C@_06IKLLLDHL@normal?$AA@			; `string'
PUBLIC	??_C@_04BBBDNBOK@dead?$AA@			; `string'
PUBLIC	__real@405bc00000000000
EXTRN	lua_newthread:PROC
EXTRN	lua_gettop:PROC
EXTRN	lua_settop:PROC
EXTRN	lua_pushvalue:PROC
EXTRN	lua_rotate:PROC
EXTRN	lua_checkstack:PROC
EXTRN	lua_xmove:PROC
EXTRN	lua_isstring:PROC
EXTRN	lua_tothread:PROC
EXTRN	lua_pushstring:PROC
EXTRN	lua_pushcclosure:PROC
EXTRN	lua_pushboolean:PROC
EXTRN	lua_pushthread:PROC
EXTRN	lua_createtable:PROC
EXTRN	lua_yieldk:PROC
EXTRN	lua_resume:PROC
EXTRN	lua_status:PROC
EXTRN	lua_isyieldable:PROC
EXTRN	lua_error:PROC
EXTRN	lua_concat:PROC
EXTRN	lua_getstack:PROC
EXTRN	luaL_checkversion_:PROC
EXTRN	luaL_argerror:PROC
EXTRN	luaL_checktype:PROC
EXTRN	luaL_where:PROC
EXTRN	luaL_setfuncs:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaopen_coroutine DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$luaopen_coroutine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getco DD	imagerel getco
	DD	imagerel getco+63
	DD	imagerel $unwind$getco
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$auxresume DD imagerel auxresume
	DD	imagerel auxresume+298
	DD	imagerel $unwind$auxresume
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaB_coresume DD imagerel luaB_coresume
	DD	imagerel luaB_coresume+164
	DD	imagerel $unwind$luaB_coresume
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaB_auxwrap DD imagerel luaB_auxwrap
	DD	imagerel luaB_auxwrap+129
	DD	imagerel $unwind$luaB_auxwrap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaB_cocreate DD imagerel luaB_cocreate
	DD	imagerel luaB_cocreate+84
	DD	imagerel $unwind$luaB_cocreate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaB_cowrap DD imagerel luaB_cowrap
	DD	imagerel luaB_cowrap+105
	DD	imagerel $unwind$luaB_cowrap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaB_yield DD imagerel luaB_yield
	DD	imagerel luaB_yield+35
	DD	imagerel $unwind$luaB_yield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaB_costatus DD imagerel luaB_costatus
	DD	imagerel luaB_costatus+221
	DD	imagerel $unwind$luaB_costatus
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaB_yieldable DD imagerel luaB_yieldable
	DD	imagerel luaB_yieldable+35
	DD	imagerel $unwind$luaB_yieldable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaB_corunning DD imagerel luaB_corunning
	DD	imagerel luaB_corunning+35
	DD	imagerel $unwind$luaB_corunning
pdata	ENDS
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_04BBBDNBOK@dead?$AA@
CONST	SEGMENT
??_C@_04BBBDNBOK@dead?$AA@ DB 'dead', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKLLLDHL@normal?$AA@
CONST	SEGMENT
??_C@_06IKLLLDHL@normal?$AA@ DB 'normal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PAHKPJCJ@suspended?$AA@
CONST	SEGMENT
??_C@_09PAHKPJCJ@suspended?$AA@ DB 'suspended', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OALEJBKN@too?5many?5results?5to?5resume?$AA@
CONST	SEGMENT
??_C@_0BL@OALEJBKN@too?5many?5results?5to?5resume?$AA@ DB 'too many resul'
	DB	'ts to resume', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@
CONST	SEGMENT
??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@ DB 'cannot resume'
	DB	' dead coroutine', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CLPLGDGN@too?5many?5arguments?5to?5resume?$AA@
CONST	SEGMENT
??_C@_0BN@CLPLGDGN@too?5many?5arguments?5to?5resume?$AA@ DB 'too many arg'
	DB	'uments to resume', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DJIMIHMK@thread?5expected?$AA@
CONST	SEGMENT
??_C@_0BA@DJIMIHMK@thread?5expected?$AA@ DB 'thread expected', 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaB_corunning DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaB_yieldable DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaB_costatus DD 051f19H
	DD	019340dH
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaB_yield DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaB_cowrap DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaB_cocreate DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaB_auxwrap DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaB_coresume DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$auxresume DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getco DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaopen_coroutine DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaB_corunning
_TEXT	SEGMENT
L$ = 48
luaB_corunning PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 144
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 145
  00009	e8 00 00 00 00	 call	 lua_pushthread
; Line 146
  0000e	48 8b cb	 mov	 rcx, rbx
  00011	8b d0		 mov	 edx, eax
  00013	e8 00 00 00 00	 call	 lua_pushboolean
; Line 147
  00018	b8 02 00 00 00	 mov	 eax, 2
; Line 148
  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5b		 pop	 rbx
  00022	c3		 ret	 0
luaB_corunning ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaB_yieldable
_TEXT	SEGMENT
L$ = 48
luaB_yieldable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 138
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 139
  00009	e8 00 00 00 00	 call	 lua_isyieldable
  0000e	48 8b cb	 mov	 rcx, rbx
  00011	8b d0		 mov	 edx, eax
  00013	e8 00 00 00 00	 call	 lua_pushboolean
; Line 140
  00018	b8 01 00 00 00	 mov	 eax, 1
; Line 141
  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5b		 pop	 rbx
  00022	c3		 ret	 0
luaB_yieldable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaB_costatus
_TEXT	SEGMENT
ar$1 = 32
__$ArrayPad$ = 160
L$ = 192
luaB_costatus PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 111
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 112
  0001f	ba 01 00 00 00	 mov	 edx, 1
  00024	48 8b d9	 mov	 rbx, rcx
  00027	e8 00 00 00 00	 call	 lua_tothread
  0002c	48 8b f8	 mov	 rdi, rax
  0002f	48 85 c0	 test	 rax, rax
  00032	75 12		 jne	 SHORT $LN16@luaB_costa
  00034	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@DJIMIHMK@thread?5expected?$AA@
  0003b	8d 50 01	 lea	 edx, QWORD PTR [rax+1]
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	e8 00 00 00 00	 call	 luaL_argerror
$LN16@luaB_costa:
; Line 113
  00046	48 3b df	 cmp	 rbx, rdi
  00049	75 09		 jne	 SHORT $LN11@luaB_costa
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07PANPENDC@running?$AA@
; Line 114
  00052	eb 5b		 jmp	 SHORT $LN17@luaB_costa
$LN11@luaB_costa:
; Line 115
  00054	48 8b cf	 mov	 rcx, rdi
  00057	e8 00 00 00 00	 call	 lua_status
  0005c	85 c0		 test	 eax, eax
  0005e	74 19		 je	 SHORT $LN6@luaB_costa
; Line 130
  00060	48 8b cb	 mov	 rcx, rbx
  00063	ff c8		 dec	 eax
  00065	74 09		 je	 SHORT $LN7@luaB_costa
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BBBDNBOK@dead?$AA@
; Line 131
  0006e	eb 42		 jmp	 SHORT $LN18@luaB_costa
$LN7@luaB_costa:
; Line 117
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09PAHKPJCJ@suspended?$AA@
; Line 118
  00077	eb 39		 jmp	 SHORT $LN18@luaB_costa
$LN6@luaB_costa:
; Line 121
  00079	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$1[rsp]
  0007e	33 d2		 xor	 edx, edx
  00080	48 8b cf	 mov	 rcx, rdi
  00083	e8 00 00 00 00	 call	 lua_getstack
  00088	85 c0		 test	 eax, eax
  0008a	7e 09		 jle	 SHORT $LN5@luaB_costa
; Line 122
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IKLLLDHL@normal?$AA@
  00093	eb 1a		 jmp	 SHORT $LN17@luaB_costa
$LN5@luaB_costa:
; Line 123
  00095	48 8b cf	 mov	 rcx, rdi
  00098	e8 00 00 00 00	 call	 lua_gettop
; Line 124
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BBBDNBOK@dead?$AA@
  000a4	85 c0		 test	 eax, eax
  000a6	74 07		 je	 SHORT $LN17@luaB_costa
; Line 126
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09PAHKPJCJ@suspended?$AA@
$LN17@luaB_costa:
  000af	48 8b cb	 mov	 rcx, rbx
$LN18@luaB_costa:
  000b2	e8 00 00 00 00	 call	 lua_pushstring
; Line 134
  000b7	b8 01 00 00 00	 mov	 eax, 1
; Line 135
  000bc	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000c4	48 33 cc	 xor	 rcx, rsp
  000c7	e8 00 00 00 00	 call	 __security_check_cookie
  000cc	48 8b 9c 24 c8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+200]
  000d4	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000db	5f		 pop	 rdi
  000dc	c3		 ret	 0
luaB_costatus ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaB_yield
_TEXT	SEGMENT
L$ = 48
luaB_yield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 106
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 107
  00009	e8 00 00 00 00	 call	 lua_gettop
  0000e	45 33 c9	 xor	 r9d, r9d
  00011	45 33 c0	 xor	 r8d, r8d
  00014	48 8b cb	 mov	 rcx, rbx
  00017	8b d0		 mov	 edx, eax
; Line 108
  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5b		 pop	 rbx
; Line 107
  0001e	e9 00 00 00 00	 jmp	 lua_yieldk
luaB_yield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaB_cowrap
_TEXT	SEGMENT
L$ = 48
luaB_cowrap PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 99
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 100
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	44 8d 42 05	 lea	 r8d, QWORD PTR [rdx+5]
  00016	e8 00 00 00 00	 call	 luaL_checktype
  0001b	48 8b cf	 mov	 rcx, rdi
  0001e	e8 00 00 00 00	 call	 lua_newthread
  00023	ba 01 00 00 00	 mov	 edx, 1
  00028	48 8b cf	 mov	 rcx, rdi
  0002b	48 8b d8	 mov	 rbx, rax
  0002e	e8 00 00 00 00	 call	 lua_pushvalue
  00033	41 b8 01 00 00
	00		 mov	 r8d, 1
  00039	48 8b d3	 mov	 rdx, rbx
  0003c	48 8b cf	 mov	 rcx, rdi
  0003f	e8 00 00 00 00	 call	 lua_xmove
; Line 101
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:luaB_auxwrap
  0004b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00051	48 8b cf	 mov	 rcx, rdi
  00054	e8 00 00 00 00	 call	 lua_pushcclosure
; Line 103
  00059	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005e	b8 01 00 00 00	 mov	 eax, 1
  00063	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00067	5f		 pop	 rdi
  00068	c3		 ret	 0
luaB_cowrap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaB_cocreate
_TEXT	SEGMENT
L$ = 48
luaB_cocreate PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 89
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 91
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	44 8d 42 05	 lea	 r8d, QWORD PTR [rdx+5]
  00016	e8 00 00 00 00	 call	 luaL_checktype
; Line 92
  0001b	48 8b cf	 mov	 rcx, rdi
  0001e	e8 00 00 00 00	 call	 lua_newthread
; Line 93
  00023	ba 01 00 00 00	 mov	 edx, 1
  00028	48 8b cf	 mov	 rcx, rdi
  0002b	48 8b d8	 mov	 rbx, rax
  0002e	e8 00 00 00 00	 call	 lua_pushvalue
; Line 94
  00033	41 b8 01 00 00
	00		 mov	 r8d, 1
  00039	48 8b d3	 mov	 rdx, rbx
  0003c	48 8b cf	 mov	 rcx, rdi
  0003f	e8 00 00 00 00	 call	 lua_xmove
; Line 96
  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
luaB_cocreate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaB_auxwrap
_TEXT	SEGMENT
L$ = 48
luaB_auxwrap PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 74
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 75
  0000a	ba d7 b9 f0 ff	 mov	 edx, -1001001		; fffffffffff0b9d7H
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 lua_tothread
; Line 76
  00017	48 8b cf	 mov	 rcx, rdi
  0001a	48 8b d8	 mov	 rbx, rax
  0001d	e8 00 00 00 00	 call	 lua_gettop
  00022	48 8b d3	 mov	 rdx, rbx
  00025	44 8b c0	 mov	 r8d, eax
  00028	48 8b cf	 mov	 rcx, rdi
  0002b	e8 00 00 00 00	 call	 auxresume
; Line 77
  00030	85 c0		 test	 eax, eax
  00032	79 42		 jns	 SHORT $LN2@luaB_auxwr
; Line 78
  00034	83 ca ff	 or	 edx, -1
  00037	48 8b cf	 mov	 rcx, rdi
  0003a	e8 00 00 00 00	 call	 lua_isstring
  0003f	85 c0		 test	 eax, eax
  00041	74 2b		 je	 SHORT $LN1@luaB_auxwr
; Line 79
  00043	ba 01 00 00 00	 mov	 edx, 1
  00048	48 8b cf	 mov	 rcx, rdi
  0004b	e8 00 00 00 00	 call	 luaL_where
; Line 80
  00050	ba fe ff ff ff	 mov	 edx, -2
  00055	48 8b cf	 mov	 rcx, rdi
  00058	44 8d 42 03	 lea	 r8d, QWORD PTR [rdx+3]
  0005c	e8 00 00 00 00	 call	 lua_rotate
; Line 81
  00061	ba 02 00 00 00	 mov	 edx, 2
  00066	48 8b cf	 mov	 rcx, rdi
  00069	e8 00 00 00 00	 call	 lua_concat
$LN1@luaB_auxwr:
; Line 83
  0006e	48 8b cf	 mov	 rcx, rdi
  00071	e8 00 00 00 00	 call	 lua_error
$LN2@luaB_auxwr:
; Line 86
  00076	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007f	5f		 pop	 rdi
  00080	c3		 ret	 0
luaB_auxwrap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaB_coresume
_TEXT	SEGMENT
L$ = 48
luaB_coresume PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 57
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 58
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	e8 00 00 00 00	 call	 lua_tothread
  00017	48 8b f8	 mov	 rdi, rax
  0001a	48 85 c0	 test	 rax, rax
  0001d	75 12		 jne	 SHORT $LN7@luaB_cores
  0001f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@DJIMIHMK@thread?5expected?$AA@
  00026	8d 50 01	 lea	 edx, QWORD PTR [rax+1]
  00029	48 8b cb	 mov	 rcx, rbx
  0002c	e8 00 00 00 00	 call	 luaL_argerror
$LN7@luaB_cores:
; Line 60
  00031	48 8b cb	 mov	 rcx, rbx
  00034	e8 00 00 00 00	 call	 lua_gettop
  00039	48 8b d7	 mov	 rdx, rdi
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	44 8d 40 ff	 lea	 r8d, DWORD PTR [rax-1]
  00043	e8 00 00 00 00	 call	 auxresume
; Line 62
  00048	48 8b cb	 mov	 rcx, rbx
  0004b	8b f8		 mov	 edi, eax
  0004d	85 c0		 test	 eax, eax
  0004f	79 28		 jns	 SHORT $LN2@luaB_cores
  00051	33 d2		 xor	 edx, edx
  00053	e8 00 00 00 00	 call	 lua_pushboolean
; Line 63
  00058	ba fe ff ff ff	 mov	 edx, -2
  0005d	48 8b cb	 mov	 rcx, rbx
  00060	44 8d 42 03	 lea	 r8d, QWORD PTR [rdx+3]
  00064	e8 00 00 00 00	 call	 lua_rotate
; Line 64
  00069	b8 02 00 00 00	 mov	 eax, 2
; Line 71
  0006e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
$LN2@luaB_cores:
; Line 67
  00079	ba 01 00 00 00	 mov	 edx, 1
  0007e	e8 00 00 00 00	 call	 lua_pushboolean
; Line 68
  00083	83 ca ff	 or	 edx, -1
  00086	41 b8 01 00 00
	00		 mov	 r8d, 1
  0008c	2b d7		 sub	 edx, edi
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	e8 00 00 00 00	 call	 lua_rotate
; Line 71
  00096	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009b	8d 47 01	 lea	 eax, DWORD PTR [rdi+1]
  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5f		 pop	 rdi
  000a3	c3		 ret	 0
luaB_coresume ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT auxresume
_TEXT	SEGMENT
L$ = 48
co$ = 56
narg$ = 64
auxresume PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 28
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b da	 mov	 rbx, rdx
  00012	48 8b f9	 mov	 rdi, rcx
; Line 30
  00015	41 8b d0	 mov	 edx, r8d
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	41 8b f0	 mov	 esi, r8d
  0001e	e8 00 00 00 00	 call	 lua_checkstack
  00023	85 c0		 test	 eax, eax
  00025	75 22		 jne	 SHORT $LN6@auxresume
; Line 31
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@CLPLGDGN@too?5many?5arguments?5to?5resume?$AA@
  0002e	48 8b cf	 mov	 rcx, rdi
  00031	e8 00 00 00 00	 call	 lua_pushstring
; Line 32
  00036	83 c8 ff	 or	 eax, -1
; Line 54
  00039	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
$LN6@auxresume:
; Line 34
  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 lua_status
  00051	85 c0		 test	 eax, eax
  00053	75 2e		 jne	 SHORT $LN5@auxresume
  00055	48 8b cb	 mov	 rcx, rbx
  00058	e8 00 00 00 00	 call	 lua_gettop
  0005d	85 c0		 test	 eax, eax
  0005f	75 22		 jne	 SHORT $LN5@auxresume
; Line 35
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@
  00068	48 8b cf	 mov	 rcx, rdi
  0006b	e8 00 00 00 00	 call	 lua_pushstring
; Line 36
  00070	83 c8 ff	 or	 eax, -1
; Line 54
  00073	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00078	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0007d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00081	5f		 pop	 rdi
  00082	c3		 ret	 0
$LN5@auxresume:
; Line 38
  00083	44 8b c6	 mov	 r8d, esi
  00086	48 8b d3	 mov	 rdx, rbx
  00089	48 8b cf	 mov	 rcx, rdi
  0008c	e8 00 00 00 00	 call	 lua_xmove
; Line 39
  00091	44 8b c6	 mov	 r8d, esi
  00094	48 8b d7	 mov	 rdx, rdi
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	e8 00 00 00 00	 call	 lua_resume
; Line 51
  0009f	48 8b cb	 mov	 rcx, rbx
  000a2	83 f8 01	 cmp	 eax, 1
  000a5	76 21		 jbe	 SHORT $LN3@auxresume
  000a7	41 b8 01 00 00
	00		 mov	 r8d, 1
  000ad	48 8b d7	 mov	 rdx, rdi
  000b0	e8 00 00 00 00	 call	 lua_xmove
; Line 52
  000b5	83 c8 ff	 or	 eax, -1
; Line 54
  000b8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000bd	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0
$LN3@auxresume:
; Line 41
  000c8	e8 00 00 00 00	 call	 lua_gettop
; Line 42
  000cd	48 8b cf	 mov	 rcx, rdi
  000d0	8d 50 01	 lea	 edx, DWORD PTR [rax+1]
  000d3	8b f0		 mov	 esi, eax
  000d5	e8 00 00 00 00	 call	 lua_checkstack
; Line 43
  000da	48 8b cb	 mov	 rcx, rbx
  000dd	85 c0		 test	 eax, eax
  000df	75 2c		 jne	 SHORT $LN2@auxresume
  000e1	83 ca ff	 or	 edx, -1
  000e4	2b d6		 sub	 edx, esi
  000e6	e8 00 00 00 00	 call	 lua_settop
; Line 44
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@OALEJBKN@too?5many?5results?5to?5resume?$AA@
  000f2	48 8b cf	 mov	 rcx, rdi
  000f5	e8 00 00 00 00	 call	 lua_pushstring
; Line 45
  000fa	83 c8 ff	 or	 eax, -1
; Line 54
  000fd	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00102	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00107	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0010b	5f		 pop	 rdi
  0010c	c3		 ret	 0
$LN2@auxresume:
; Line 47
  0010d	44 8b c6	 mov	 r8d, esi
  00110	48 8b d7	 mov	 rdx, rdi
  00113	e8 00 00 00 00	 call	 lua_xmove
; Line 54
  00118	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0011d	8b c6		 mov	 eax, esi
  0011f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00124	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00128	5f		 pop	 rdi
  00129	c3		 ret	 0
auxresume ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getco
_TEXT	SEGMENT
L$ = 48
getco	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 21
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 22
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 lua_tothread
  00017	48 8b d8	 mov	 rbx, rax
; Line 23
  0001a	48 85 c0	 test	 rax, rax
  0001d	75 15		 jne	 SHORT $LN3@getco
  0001f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@DJIMIHMK@thread?5expected?$AA@
  00026	8d 50 01	 lea	 edx, QWORD PTR [rax+1]
  00029	48 8b cf	 mov	 rcx, rdi
  0002c	e8 00 00 00 00	 call	 luaL_argerror
; Line 24
  00031	48 8b c3	 mov	 rax, rbx
$LN3@getco:
; Line 25
  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
getco	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaopen_coroutine
_TEXT	SEGMENT
L$ = 48
luaopen_coroutine PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcorolib.c
; Line 164
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 165
  00006	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@405bc00000000000
  0000e	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00014	48 8b d9	 mov	 rbx, rcx
  00017	e8 00 00 00 00	 call	 luaL_checkversion_
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	44 8d 42 07	 lea	 r8d, QWORD PTR [rdx+7]
  00025	e8 00 00 00 00	 call	 lua_createtable
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:co_funcs
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 luaL_setfuncs
; Line 166
  0003c	b8 01 00 00 00	 mov	 eax, 1
; Line 167
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5b		 pop	 rbx
  00046	c3		 ret	 0
luaopen_coroutine ENDP
_TEXT	ENDS
END
