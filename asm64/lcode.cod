; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	luaK_codeABx
PUBLIC	luaK_codeABC
PUBLIC	luaK_codek
PUBLIC	luaK_fixline
PUBLIC	luaK_nil
PUBLIC	luaK_reserveregs
PUBLIC	luaK_checkstack
PUBLIC	luaK_stringK
PUBLIC	luaK_intK
PUBLIC	luaK_dischargevars
PUBLIC	luaK_exp2anyreg
PUBLIC	luaK_exp2anyregup
PUBLIC	luaK_exp2nextreg
PUBLIC	luaK_exp2val
PUBLIC	luaK_exp2RK
PUBLIC	luaK_self
PUBLIC	luaK_indexed
PUBLIC	luaK_goiftrue
PUBLIC	luaK_goiffalse
PUBLIC	luaK_storevar
PUBLIC	luaK_setreturns
PUBLIC	luaK_setoneret
PUBLIC	luaK_jump
PUBLIC	luaK_ret
PUBLIC	luaK_patchlist
PUBLIC	luaK_patchtohere
PUBLIC	luaK_patchclose
PUBLIC	luaK_concat
PUBLIC	luaK_getlabel
PUBLIC	luaK_prefix
PUBLIC	luaK_infix
PUBLIC	luaK_posfix
PUBLIC	luaK_setlist
PUBLIC	??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_07BEDGJMGI@opcodes?$AA@			; `string'
PUBLIC	??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@ ; `string'
PUBLIC	??_C@_09FGMGFBD@constants?$AA@			; `string'
PUBLIC	??_C@_0BF@ODGJFGDP@constructor?5too?5long?$AA@	; `string'
EXTRN	luaO_arith:PROC
EXTRN	luaM_growaux_:PROC
EXTRN	luaX_syntaxerror:PROC
EXTRN	luaC_barrier_:PROC
EXTRN	luaH_set:PROC
EXTRN	luaV_equalobj:PROC
EXTRN	luaV_tointeger:PROC
EXTRN	luaP_opmodes:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_codek DD imagerel $LN12
	DD	imagerel $LN12+103
	DD	imagerel $unwind$luaK_codek
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_nil DD imagerel $LN15
	DD	imagerel $LN15+182
	DD	imagerel $unwind$luaK_nil
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_reserveregs DD imagerel $LN11
	DD	imagerel $LN11+63
	DD	imagerel $unwind$luaK_reserveregs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_checkstack DD imagerel $LN8
	DD	imagerel $LN8+59
	DD	imagerel $unwind$luaK_checkstack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_stringK DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$luaK_stringK
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_intK DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$luaK_intK
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_dischargevars DD imagerel $LN22
	DD	imagerel $LN22+195
	DD	imagerel $unwind$luaK_dischargevars
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_exp2anyreg DD imagerel $LN8
	DD	imagerel $LN8+97
	DD	imagerel $unwind$luaK_exp2anyreg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_exp2anyregup DD imagerel $LN11
	DD	imagerel $LN11+103
	DD	imagerel $unwind$luaK_exp2anyregup
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_exp2nextreg DD imagerel $LN20
	DD	imagerel $LN20+123
	DD	imagerel $unwind$luaK_exp2nextreg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_exp2val DD imagerel $LN11
	DD	imagerel $LN11+113
	DD	imagerel $unwind$luaK_exp2val
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_exp2RK DD imagerel $LN31
	DD	imagerel $LN31+335
	DD	imagerel $unwind$luaK_exp2RK
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_self DD imagerel $LN33
	DD	imagerel $LN33+257
	DD	imagerel $unwind$luaK_self
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_indexed DD imagerel $LN4
	DD	imagerel $LN4+51
	DD	imagerel $unwind$luaK_indexed
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_goiftrue DD imagerel $LN13
	DD	imagerel $LN13+133
	DD	imagerel $unwind$luaK_goiftrue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_goiffalse DD imagerel $LN13
	DD	imagerel $LN13+123
	DD	imagerel $unwind$luaK_goiffalse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_storevar DD imagerel $LN26
	DD	imagerel $LN26+44
	DD	imagerel $unwind$luaK_storevar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$luaK_storevar DD imagerel $LN26+44
	DD	imagerel $LN26+116
	DD	imagerel $chain$0$luaK_storevar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$luaK_storevar DD imagerel $LN26+116
	DD	imagerel $LN26+251
	DD	imagerel $chain$1$luaK_storevar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_setreturns DD imagerel $LN17
	DD	imagerel $LN17+185
	DD	imagerel $unwind$luaK_setreturns
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_jump DD imagerel $LN29
	DD	imagerel $LN29+193
	DD	imagerel $unwind$luaK_jump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_patchlist DD imagerel $LN10
	DD	imagerel $LN10+56
	DD	imagerel $unwind$luaK_patchlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_concat DD imagerel $LN24
	DD	imagerel $LN24+154
	DD	imagerel $unwind$luaK_concat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_prefix DD imagerel $LN9
	DD	imagerel $LN9+84
	DD	imagerel $unwind$luaK_prefix
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_posfix DD imagerel $LN25
	DD	imagerel $LN25+468
	DD	imagerel $unwind$luaK_posfix
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_setlist DD imagerel $LN16
	DD	imagerel $LN16+173
	DD	imagerel $unwind$luaK_setlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$condjump DD imagerel condjump
	DD	imagerel condjump+50
	DD	imagerel $unwind$condjump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fixjump DD imagerel fixjump
	DD	imagerel fixjump+84
	DD	imagerel $unwind$fixjump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$removevalues DD imagerel removevalues
	DD	imagerel removevalues+16
	DD	imagerel $unwind$removevalues
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$removevalues DD imagerel removevalues+16
	DD	imagerel removevalues+153
	DD	imagerel $chain$0$removevalues
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$removevalues DD imagerel removevalues+153
	DD	imagerel removevalues+158
	DD	imagerel $chain$1$removevalues
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$patchlistaux DD imagerel patchlistaux
	DD	imagerel patchlistaux+19
	DD	imagerel $unwind$patchlistaux
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$patchlistaux DD imagerel patchlistaux+19
	DD	imagerel patchlistaux+350
	DD	imagerel $chain$2$patchlistaux
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$patchlistaux DD imagerel patchlistaux+350
	DD	imagerel patchlistaux+351
	DD	imagerel $chain$3$patchlistaux
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$patchlistaux DD imagerel patchlistaux+351
	DD	imagerel patchlistaux+385
	DD	imagerel $chain$4$patchlistaux
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dischargejpc DD imagerel dischargejpc
	DD	imagerel dischargejpc+45
	DD	imagerel $unwind$dischargejpc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_code DD imagerel luaK_code
	DD	imagerel luaK_code+232
	DD	imagerel $unwind$luaK_code
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$addk DD	imagerel addk
	DD	imagerel addk+121
	DD	imagerel $unwind$addk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$addk DD imagerel addk+121
	DD	imagerel addk+295
	DD	imagerel $chain$2$addk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$addk DD imagerel addk+295
	DD	imagerel addk+343
	DD	imagerel $chain$3$addk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaK_numberK DD imagerel luaK_numberK
	DD	imagerel luaK_numberK+38
	DD	imagerel $unwind$luaK_numberK
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$boolK DD	imagerel boolK
	DD	imagerel boolK+36
	DD	imagerel $unwind$boolK
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$nilK DD	imagerel nilK
	DD	imagerel nilK+53
	DD	imagerel $unwind$nilK
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$discharge2reg DD imagerel discharge2reg
	DD	imagerel discharge2reg+336
	DD	imagerel $unwind$discharge2reg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$discharge2anyreg DD imagerel discharge2anyreg
	DD	imagerel discharge2anyreg+85
	DD	imagerel $unwind$discharge2anyreg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$exp2reg DD imagerel exp2reg
	DD	imagerel exp2reg+58
	DD	imagerel $unwind$exp2reg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$exp2reg DD imagerel exp2reg+58
	DD	imagerel exp2reg+263
	DD	imagerel $chain$2$exp2reg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$exp2reg DD imagerel exp2reg+263
	DD	imagerel exp2reg+367
	DD	imagerel $chain$3$exp2reg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$exp2reg DD imagerel exp2reg+367
	DD	imagerel exp2reg+432
	DD	imagerel $chain$4$exp2reg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$exp2reg DD imagerel exp2reg+432
	DD	imagerel exp2reg+459
	DD	imagerel $chain$5$exp2reg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$jumponcond DD imagerel jumponcond
	DD	imagerel jumponcond+233
	DD	imagerel $unwind$jumponcond
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$codenot DD imagerel codenot
	DD	imagerel codenot+236
	DD	imagerel $unwind$codenot
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validop DD imagerel validop
	DD	imagerel validop+204
	DD	imagerel $unwind$validop
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$constfolding DD imagerel constfolding
	DD	imagerel constfolding+488
	DD	imagerel $unwind$constfolding
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$codeexpval DD imagerel codeexpval
	DD	imagerel codeexpval+55
	DD	imagerel $unwind$codeexpval
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$codeexpval DD imagerel codeexpval+55
	DD	imagerel codeexpval+318
	DD	imagerel $chain$0$codeexpval
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$codeexpval DD imagerel codeexpval+318
	DD	imagerel codeexpval+339
	DD	imagerel $chain$1$codeexpval
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$codecomp DD imagerel codecomp
	DD	imagerel codecomp+209
	DD	imagerel $unwind$codecomp
pdata	ENDS
;	COMDAT ??_C@_0BF@ODGJFGDP@constructor?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BF@ODGJFGDP@constructor?5too?5long?$AA@ DB 'constructor too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FGMGFBD@constants?$AA@
CONST	SEGMENT
??_C@_09FGMGFBD@constants?$AA@ DB 'constants', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
CONST	SEGMENT
??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@ DB 'function or '
	DB	'expression needs too many registers', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BEDGJMGI@opcodes?$AA@
CONST	SEGMENT
??_C@_07BEDGJMGI@opcodes?$AA@ DB 'opcodes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@ DB 'control structu'
	DB	're too long', 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codecomp DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$codeexpval DD 021H
	DD	imagerel codeexpval
	DD	imagerel codeexpval+55
	DD	imagerel $unwind$codeexpval
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$codeexpval DD 020521H
	DD	06e405H
	DD	imagerel codeexpval
	DD	imagerel codeexpval+55
	DD	imagerel $unwind$codeexpval
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codeexpval DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$constfolding DD 081801H
	DD	066818H
	DD	011640fH
	DD	010340fH
	DD	0700bd20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validop DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codenot DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$jumponcond DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$exp2reg DD 021H
	DD	imagerel exp2reg
	DD	imagerel exp2reg+58
	DD	imagerel $unwind$exp2reg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$exp2reg DD 021H
	DD	imagerel exp2reg+58
	DD	imagerel exp2reg+263
	DD	imagerel $chain$2$exp2reg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$exp2reg DD 020521H
	DD	0b5405H
	DD	imagerel exp2reg+58
	DD	imagerel exp2reg+263
	DD	imagerel $chain$2$exp2reg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$exp2reg DD 060f21H
	DD	0df40fH
	DD	0cc40aH
	DD	0a3405H
	DD	imagerel exp2reg
	DD	imagerel exp2reg+58
	DD	imagerel $unwind$exp2reg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$exp2reg DD 040901H
	DD	0e0055209H
	DD	060027003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$discharge2anyreg DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$discharge2reg DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$nilK DD	010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$boolK DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_numberK DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$addk DD 020021H
	DD	0fd400H
	DD	imagerel addk
	DD	imagerel addk+121
	DD	imagerel $unwind$addk
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$addk DD 060f21H
	DD	0fd40fH
	DD	0ec40aH
	DD	0d6405H
	DD	imagerel addk
	DD	imagerel addk+121
	DD	imagerel $unwind$addk
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$addk DD	060c01H
	DD	0f008520cH
	DD	07004e006H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_code DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dischargejpc DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$patchlistaux DD 060021H
	DD	08e400H
	DD	076400H
	DD	063400H
	DD	imagerel patchlistaux
	DD	imagerel patchlistaux+19
	DD	imagerel $unwind$patchlistaux
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$patchlistaux DD 021H
	DD	imagerel patchlistaux
	DD	imagerel patchlistaux+19
	DD	imagerel $unwind$patchlistaux
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$patchlistaux DD 061321H
	DD	08e413H
	DD	07640aH
	DD	063405H
	DD	imagerel patchlistaux
	DD	imagerel patchlistaux+19
	DD	imagerel $unwind$patchlistaux
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$patchlistaux DD 041301H
	DD	095413H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$removevalues DD 021H
	DD	imagerel removevalues
	DD	imagerel removevalues+16
	DD	imagerel $unwind$removevalues
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$removevalues DD 020421H
	DD	03404H
	DD	imagerel removevalues
	DD	imagerel removevalues+16
	DD	imagerel $unwind$removevalues
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$removevalues DD 010401H
	DD	0204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fixjump DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$condjump DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_setlist DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_posfix DD 061801H
	DD	096418H
	DD	083418H
	DD	070145218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_prefix DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_concat DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_patchlist DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_jump DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_setreturns DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$luaK_storevar DD 021H
	DD	imagerel $LN26
	DD	imagerel $LN26+44
	DD	imagerel $unwind$luaK_storevar
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$luaK_storevar DD 020521H
	DD	063405H
	DD	imagerel $LN26
	DD	imagerel $LN26+44
	DD	imagerel $unwind$luaK_storevar
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_storevar DD 061001H
	DD	087410H
	DD	076410H
	DD	0e00c3210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_goiffalse DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_goiftrue DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_indexed DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_self DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_exp2RK DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_exp2val DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_exp2nextreg DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_exp2anyregup DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_exp2anyreg DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_dischargevars DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_intK DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_stringK DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_checkstack DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_reserveregs DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_nil DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaK_codek DD 063b01H
	DD	06343bH
	DD	07640aH
	DD	07006320aH
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT codecomp
_TEXT	SEGMENT
fs$ = 64
op$ = 72
cond$ = 80
e1$ = 88
e2$ = 96
codecomp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 826
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00018	44 8b fa	 mov	 r15d, edx
; Line 827
  0001b	49 8b d1	 mov	 rdx, r9
  0001e	49 8b f1	 mov	 rsi, r9
  00021	41 8b e8	 mov	 ebp, r8d
  00024	48 8b d9	 mov	 rbx, rcx
  00027	e8 00 00 00 00	 call	 luaK_exp2RK
; Line 828
  0002c	4c 8b 74 24 60	 mov	 r14, QWORD PTR e2$[rsp]
  00031	48 8b cb	 mov	 rcx, rbx
  00034	8b f8		 mov	 edi, eax
  00036	49 8b d6	 mov	 rdx, r14
  00039	e8 00 00 00 00	 call	 luaK_exp2RK
; Line 829
  0003e	41 83 3e 07	 cmp	 DWORD PTR [r14], 7
  00042	44 8b c0	 mov	 r8d, eax
  00045	75 15		 jne	 SHORT $LN7@codecomp
  00047	41 8b 56 08	 mov	 edx, DWORD PTR [r14+8]
  0004b	0f ba e2 08	 bt	 edx, 8
  0004f	72 0b		 jb	 SHORT $LN7@codecomp
  00051	0f b6 4b 3a	 movzx	 ecx, BYTE PTR [rbx+58]
  00055	3b d1		 cmp	 edx, ecx
  00057	7c 03		 jl	 SHORT $LN7@codecomp
  00059	fe 4b 3c	 dec	 BYTE PTR [rbx+60]
$LN7@codecomp:
; Line 830
  0005c	83 3e 07	 cmp	 DWORD PTR [rsi], 7
  0005f	75 14		 jne	 SHORT $LN13@codecomp
  00061	8b 4e 08	 mov	 ecx, DWORD PTR [rsi+8]
  00064	0f ba e1 08	 bt	 ecx, 8
  00068	72 0b		 jb	 SHORT $LN13@codecomp
  0006a	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  0006e	3b c8		 cmp	 ecx, eax
  00070	7c 03		 jl	 SHORT $LN13@codecomp
  00072	fe 4b 3c	 dec	 BYTE PTR [rbx+60]
$LN13@codecomp:
; Line 831
  00075	85 ed		 test	 ebp, ebp
  00077	75 13		 jne	 SHORT $LN1@codecomp
  00079	41 83 ff 1f	 cmp	 r15d, 31
  0007d	74 0d		 je	 SHORT $LN1@codecomp
; Line 833
  0007f	8b c7		 mov	 eax, edi
  00081	41 8b f8	 mov	 edi, r8d
; Line 834
  00084	bd 01 00 00 00	 mov	 ebp, 1
  00089	44 8b c0	 mov	 r8d, eax
$LN1@codecomp:
; Line 836
  0008c	c1 e7 09	 shl	 edi, 9
  0008f	48 8b cb	 mov	 rcx, rbx
  00092	41 0b f8	 or	 edi, r8d
  00095	c1 e7 08	 shl	 edi, 8
  00098	0b fd		 or	 edi, ebp
  0009a	c1 e7 06	 shl	 edi, 6
  0009d	41 0b ff	 or	 edi, r15d
  000a0	8b d7		 mov	 edx, edi
  000a2	e8 00 00 00 00	 call	 luaK_code
  000a7	48 8b cb	 mov	 rcx, rbx
  000aa	e8 00 00 00 00	 call	 luaK_jump
; Line 838
  000af	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b4	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000b9	89 46 08	 mov	 DWORD PTR [rsi+8], eax
  000bc	c7 06 0b 00 00
	00		 mov	 DWORD PTR [rsi], 11
  000c2	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000c7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cb	41 5f		 pop	 r15
  000cd	41 5e		 pop	 r14
  000cf	5f		 pop	 rdi
  000d0	c3		 ret	 0
codecomp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT codeexpval
_TEXT	SEGMENT
fs$ = 48
op$ = 56
e1$ = 64
e2$ = 72
line$ = 80
codeexpval PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 795
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f1	 mov	 rsi, r9
  00017	49 8b f8	 mov	 rdi, r8
  0001a	8b ea		 mov	 ebp, edx
  0001c	48 8b d9	 mov	 rbx, rcx
; Line 797
  0001f	83 fa 1a	 cmp	 edx, 26
  00022	7f 10		 jg	 SHORT $LN7@codeexpval
  00024	83 c2 f3	 add	 edx, -13
  00027	e8 00 00 00 00	 call	 constfolding
  0002c	85 c0		 test	 eax, eax
  0002e	0f 85 0a 01 00
	00		 jne	 $LN41@codeexpval
$LN7@codeexpval:
  00034	8d 45 e7	 lea	 eax, DWORD PTR [rbp-25]
  00037	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  0003c	a9 fc ff ff ff	 test	 eax, -4			; fffffffcH
  00041	75 52		 jne	 SHORT $LN43@codeexpval
  00043	83 fd 1b	 cmp	 ebp, 27
  00046	74 4d		 je	 SHORT $LN43@codeexpval
; Line 804
  00048	48 8b d7	 mov	 rdx, rdi
  0004b	48 8b cb	 mov	 rcx, rbx
  0004e	45 33 f6	 xor	 r14d, r14d
  00051	e8 00 00 00 00	 call	 luaK_dischargevars
  00056	83 3f 07	 cmp	 DWORD PTR [rdi], 7
  00059	75 2a		 jne	 SHORT $LN10@codeexpval
  0005b	8b 47 14	 mov	 eax, DWORD PTR [rdi+20]
  0005e	39 47 10	 cmp	 DWORD PTR [rdi+16], eax
  00061	75 05		 jne	 SHORT $LN11@codeexpval
  00063	8b 57 08	 mov	 edx, DWORD PTR [rdi+8]
  00066	eb 48		 jmp	 SHORT $LN13@codeexpval
$LN11@codeexpval:
  00068	44 8b 47 08	 mov	 r8d, DWORD PTR [rdi+8]
  0006c	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  00070	44 3b c0	 cmp	 r8d, eax
  00073	7c 10		 jl	 SHORT $LN10@codeexpval
  00075	48 8b d7	 mov	 rdx, rdi
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 exp2reg
  00080	8b 57 08	 mov	 edx, DWORD PTR [rdi+8]
  00083	eb 2b		 jmp	 SHORT $LN13@codeexpval
$LN10@codeexpval:
  00085	48 8b d7	 mov	 rdx, rdi
  00088	48 8b cb	 mov	 rcx, rbx
  0008b	e8 00 00 00 00	 call	 luaK_exp2nextreg
  00090	8b 57 08	 mov	 edx, DWORD PTR [rdi+8]
  00093	eb 1b		 jmp	 SHORT $LN13@codeexpval
$LN43@codeexpval:
; Line 807
  00095	48 8b d6	 mov	 rdx, rsi
  00098	48 8b cb	 mov	 rcx, rbx
  0009b	e8 00 00 00 00	 call	 luaK_exp2RK
; Line 808
  000a0	48 8b d7	 mov	 rdx, rdi
  000a3	48 8b cb	 mov	 rcx, rbx
  000a6	44 8b f0	 mov	 r14d, eax
  000a9	e8 00 00 00 00	 call	 luaK_exp2RK
  000ae	8b d0		 mov	 edx, eax
$LN13@codeexpval:
; Line 810
  000b0	41 3b d6	 cmp	 edx, r14d
  000b3	7e 23		 jle	 SHORT $LN2@codeexpval
; Line 811
  000b5	83 3f 07	 cmp	 DWORD PTR [rdi], 7
  000b8	75 14		 jne	 SHORT $LN18@codeexpval
  000ba	8b 4f 08	 mov	 ecx, DWORD PTR [rdi+8]
  000bd	0f ba e1 08	 bt	 ecx, 8
  000c1	72 0b		 jb	 SHORT $LN18@codeexpval
  000c3	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  000c7	3b c8		 cmp	 ecx, eax
  000c9	7c 03		 jl	 SHORT $LN18@codeexpval
  000cb	fe 4b 3c	 dec	 BYTE PTR [rbx+60]
$LN18@codeexpval:
; Line 812
  000ce	83 3e 07	 cmp	 DWORD PTR [rsi], 7
  000d1	75 37		 jne	 SHORT $LN36@codeexpval
  000d3	8b 4e 08	 mov	 ecx, DWORD PTR [rsi+8]
; Line 814
  000d6	eb 21		 jmp	 SHORT $LN47@codeexpval
$LN2@codeexpval:
; Line 815
  000d8	83 3e 07	 cmp	 DWORD PTR [rsi], 7
  000db	75 14		 jne	 SHORT $LN30@codeexpval
  000dd	8b 4e 08	 mov	 ecx, DWORD PTR [rsi+8]
  000e0	0f ba e1 08	 bt	 ecx, 8
  000e4	72 0b		 jb	 SHORT $LN30@codeexpval
  000e6	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  000ea	3b c8		 cmp	 ecx, eax
  000ec	7c 03		 jl	 SHORT $LN30@codeexpval
  000ee	fe 4b 3c	 dec	 BYTE PTR [rbx+60]
$LN30@codeexpval:
; Line 816
  000f1	83 3f 07	 cmp	 DWORD PTR [rdi], 7
  000f4	75 14		 jne	 SHORT $LN36@codeexpval
  000f6	8b 4f 08	 mov	 ecx, DWORD PTR [rdi+8]
$LN47@codeexpval:
  000f9	0f ba e1 08	 bt	 ecx, 8
  000fd	72 0b		 jb	 SHORT $LN36@codeexpval
  000ff	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  00103	3b c8		 cmp	 ecx, eax
  00105	7c 03		 jl	 SHORT $LN36@codeexpval
  00107	fe 4b 3c	 dec	 BYTE PTR [rbx+60]
$LN36@codeexpval:
; Line 818
  0010a	c1 e2 09	 shl	 edx, 9
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	41 0b d6	 or	 edx, r14d
  00113	c1 e2 0e	 shl	 edx, 14
  00116	0b d5		 or	 edx, ebp
  00118	e8 00 00 00 00	 call	 luaK_code
  0011d	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]
; Line 819
  00122	c7 07 0c 00 00
	00		 mov	 DWORD PTR [rdi], 12
  00128	89 47 08	 mov	 DWORD PTR [rdi+8], eax
; Line 820
  0012b	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0012e	48 63 53 20	 movsxd	 rdx, DWORD PTR [rbx+32]
  00132	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00136	8b 44 24 50	 mov	 eax, DWORD PTR line$[rsp]
  0013a	89 44 91 fc	 mov	 DWORD PTR [rcx+rdx*4-4], eax
$LN41@codeexpval:
; Line 822
  0013e	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00143	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00148	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0014d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00151	5f		 pop	 rdi
  00152	c3		 ret	 0
codeexpval ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT constfolding
_TEXT	SEGMENT
v2$ = 48
v1$ = 64
res$ = 80
fs$ = 128
op$ = 136
i$1 = 144
e1$ = 144
e2$ = 152
constfolding PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 767
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 70	 sub	 rsp, 112		; 00000070H
; Line 769
  0000f	41 8b 40 14	 mov	 eax, DWORD PTR [r8+20]
  00013	0f 29 74 24 60	 movaps	 XMMWORD PTR [rsp+96], xmm6
  00018	49 8b d8	 mov	 rbx, r8
  0001b	8b fa		 mov	 edi, edx
  0001d	48 8b f1	 mov	 rsi, rcx
  00020	41 39 40 10	 cmp	 DWORD PTR [r8+16], eax
  00024	0f 85 79 01 00
	00		 jne	 $LN5@constfoldi
  0002a	45 8b 10	 mov	 r10d, DWORD PTR [r8]
  0002d	41 b8 13 00 00
	00		 mov	 r8d, 19
  00033	41 83 ea 05	 sub	 r10d, 5
  00037	74 17		 je	 SHORT $LN46@constfoldi
  00039	41 ff ca	 dec	 r10d
  0003c	0f 85 61 01 00
	00		 jne	 $LN5@constfoldi
  00042	4c 8b 5b 08	 mov	 r11, QWORD PTR [rbx+8]
  00046	41 8b d0	 mov	 edx, r8d
  00049	4c 89 5c 24 40	 mov	 QWORD PTR v1$[rsp], r11
  0004e	eb 15		 jmp	 SHORT $LN56@constfoldi
$LN46@constfoldi:
  00050	f2 0f 10 43 08	 movsdx	 xmm0, QWORD PTR [rbx+8]
  00055	ba 03 00 00 00	 mov	 edx, 3
  0005a	f2 0f 11 44 24
	40		 movsdx	 QWORD PTR v1$[rsp], xmm0
  00060	4c 8b 5c 24 40	 mov	 r11, QWORD PTR v1$[rsp]
$LN56@constfoldi:
  00065	41 8b 41 14	 mov	 eax, DWORD PTR [r9+20]
  00069	89 54 24 48	 mov	 DWORD PTR v1$[rsp+8], edx
  0006d	41 39 41 10	 cmp	 DWORD PTR [r9+16], eax
  00071	0f 85 2c 01 00
	00		 jne	 $LN5@constfoldi
  00077	41 8b 09	 mov	 ecx, DWORD PTR [r9]
  0007a	83 e9 05	 sub	 ecx, 5
  0007d	74 19		 je	 SHORT $LN48@constfoldi
  0007f	ff c9		 dec	 ecx
  00081	0f 85 1c 01 00
	00		 jne	 $LN5@constfoldi
  00087	4d 8b 51 08	 mov	 r10, QWORD PTR [r9+8]
  0008b	4c 89 54 24 30	 mov	 QWORD PTR v2$[rsp], r10
  00090	f2 0f 10 44 24
	30		 movsdx	 xmm0, QWORD PTR v2$[rsp]
  00096	eb 17		 jmp	 SHORT $LN57@constfoldi
$LN48@constfoldi:
  00098	f2 41 0f 10 41
	08		 movsdx	 xmm0, QWORD PTR [r9+8]
  0009e	41 b8 03 00 00
	00		 mov	 r8d, 3
  000a4	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR v2$[rsp], xmm0
  000aa	4c 8b 54 24 30	 mov	 r10, QWORD PTR v2$[rsp]
$LN57@constfoldi:
  000af	8d 47 fd	 lea	 eax, DWORD PTR [rdi-3]
  000b2	44 89 44 24 38	 mov	 DWORD PTR v2$[rsp+8], r8d
  000b7	0f 57 f6	 xorps	 xmm6, xmm6
  000ba	83 f8 0a	 cmp	 eax, 10
  000bd	77 7c		 ja	 SHORT $LN54@constfoldi
  000bf	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:__ImageBase
  000c6	48 98		 cdqe
  000c8	41 8b 8c 81 00
	00 00 00	 mov	 ecx, DWORD PTR $LN55@constfoldi[r9+rax*4]
  000d0	49 03 c9	 add	 rcx, r9
  000d3	ff e1		 jmp	 rcx
$LN31@constfoldi:
  000d5	83 fa 13	 cmp	 edx, 19
  000d8	75 0a		 jne	 SHORT $LN36@constfoldi
  000da	4c 89 9c 24 90
	00 00 00	 mov	 QWORD PTR i$1[rsp], r11
  000e2	eb 22		 jmp	 SHORT $LN50@constfoldi
$LN36@constfoldi:
  000e4	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR i$1[rsp]
  000ec	48 8d 4c 24 40	 lea	 rcx, QWORD PTR v1$[rsp]
  000f1	45 33 c0	 xor	 r8d, r8d
  000f4	e8 00 00 00 00	 call	 luaV_tointeger
  000f9	85 c0		 test	 eax, eax
  000fb	0f 84 a2 00 00
	00		 je	 $LN5@constfoldi
  00101	44 8b 44 24 38	 mov	 r8d, DWORD PTR v2$[rsp+8]
$LN50@constfoldi:
  00106	41 83 f8 13	 cmp	 r8d, 19
  0010a	74 2f		 je	 SHORT $LN54@constfoldi
  0010c	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR i$1[rsp]
  00114	48 8d 4c 24 30	 lea	 rcx, QWORD PTR v2$[rsp]
  00119	45 33 c0	 xor	 r8d, r8d
  0011c	e8 00 00 00 00	 call	 luaV_tointeger
  00121	85 c0		 test	 eax, eax
  00123	eb 14		 jmp	 SHORT $LN58@constfoldi
$LN30@constfoldi:
  00125	41 83 f8 13	 cmp	 r8d, 19
  00129	75 08		 jne	 SHORT $LN42@constfoldi
  0012b	0f 57 c0	 xorps	 xmm0, xmm0
  0012e	f2 49 0f 2a c2	 cvtsi2sd xmm0, r10
$LN42@constfoldi:
  00133	66 0f 2e c6	 ucomisd xmm0, xmm6
  00137	7a 02		 jp	 SHORT $LN54@constfoldi
$LN58@constfoldi:
  00139	74 68		 je	 SHORT $LN5@constfoldi
$LN54@constfoldi:
; Line 771
  0013b	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  0013f	48 8d 44 24 50	 lea	 rax, QWORD PTR res$[rsp]
  00144	4c 8d 4c 24 30	 lea	 r9, QWORD PTR v2$[rsp]
  00149	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0014d	4c 8d 44 24 40	 lea	 r8, QWORD PTR v1$[rsp]
  00152	8b d7		 mov	 edx, edi
  00154	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00159	e8 00 00 00 00	 call	 luaO_arith
; Line 772
  0015e	83 7c 24 58 13	 cmp	 DWORD PTR res$[rsp+8], 19
  00163	75 16		 jne	 SHORT $LN4@constfoldi
; Line 774
  00165	48 8b 44 24 50	 mov	 rax, QWORD PTR res$[rsp]
  0016a	c7 03 06 00 00
	00		 mov	 DWORD PTR [rbx], 6
  00170	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
; Line 783
  00174	b8 01 00 00 00	 mov	 eax, 1
  00179	eb 2a		 jmp	 SHORT $LN7@constfoldi
$LN4@constfoldi:
; Line 778
  0017b	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR res$[rsp]
  00181	66 0f 2e c0	 ucomisd xmm0, xmm0
  00185	7a 1c		 jp	 SHORT $LN5@constfoldi
  00187	75 1a		 jne	 SHORT $LN5@constfoldi
  00189	66 0f 2e c6	 ucomisd xmm0, xmm6
  0018d	7a 02		 jp	 SHORT $LN53@constfoldi
  0018f	74 12		 je	 SHORT $LN5@constfoldi
$LN53@constfoldi:
; Line 781
  00191	f2 0f 11 43 08	 movsdx	 QWORD PTR [rbx+8], xmm0
  00196	c7 03 05 00 00
	00		 mov	 DWORD PTR [rbx], 5
; Line 783
  0019c	b8 01 00 00 00	 mov	 eax, 1
  001a1	eb 02		 jmp	 SHORT $LN7@constfoldi
$LN5@constfoldi:
; Line 770
  001a3	33 c0		 xor	 eax, eax
$LN7@constfoldi:
; Line 784
  001a5	0f 28 74 24 60	 movaps	 xmm6, XMMWORD PTR [rsp+96]
  001aa	4c 8d 5c 24 70	 lea	 r11, QWORD PTR [rsp+112]
  001af	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  001b3	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  001b7	49 8b e3	 mov	 rsp, r11
  001ba	5f		 pop	 rdi
  001bb	c3		 ret	 0
$LN55@constfoldi:
  001bc	00 00 00 00	 DD	 $LN30@constfoldi
  001c0	00 00 00 00	 DD	 $LN54@constfoldi
  001c4	00 00 00 00	 DD	 $LN30@constfoldi
  001c8	00 00 00 00	 DD	 $LN30@constfoldi
  001cc	00 00 00 00	 DD	 $LN31@constfoldi
  001d0	00 00 00 00	 DD	 $LN31@constfoldi
  001d4	00 00 00 00	 DD	 $LN31@constfoldi
  001d8	00 00 00 00	 DD	 $LN31@constfoldi
  001dc	00 00 00 00	 DD	 $LN31@constfoldi
  001e0	00 00 00 00	 DD	 $LN54@constfoldi
  001e4	00 00 00 00	 DD	 $LN31@constfoldi
constfolding ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT validop
_TEXT	SEGMENT
op$ = 48
v1$ = 56
v2$ = 64
i$1 = 72
validop	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 750
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 751
  00006	83 c1 fd	 add	 ecx, -3
  00009	49 8b d8	 mov	 rbx, r8
  0000c	4c 8b ca	 mov	 r9, rdx
  0000f	83 f9 0a	 cmp	 ecx, 10
  00012	77 7e		 ja	 SHORT $LN1@validop
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  0001b	48 63 c1	 movsxd	 rax, ecx
  0001e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN21@validop[rdx+rax*4]
  00025	48 03 ca	 add	 rcx, rdx
  00028	ff e1		 jmp	 rcx
$LN3@validop:
; Line 755
  0002a	41 83 79 08 13	 cmp	 DWORD PTR [r9+8], 19
  0002f	75 0a		 jne	 SHORT $LN8@validop
  00031	49 8b 01	 mov	 rax, QWORD PTR [r9]
  00034	48 89 44 24 48	 mov	 QWORD PTR i$1[rsp], rax
  00039	eb 14		 jmp	 SHORT $LN18@validop
$LN8@validop:
  0003b	48 8d 54 24 48	 lea	 rdx, QWORD PTR i$1[rsp]
  00040	45 33 c0	 xor	 r8d, r8d
  00043	49 8b c9	 mov	 rcx, r9
  00046	e8 00 00 00 00	 call	 luaV_tointeger
  0004b	85 c0		 test	 eax, eax
  0004d	74 1a		 je	 SHORT $LN12@validop
$LN18@validop:
  0004f	83 7b 08 13	 cmp	 DWORD PTR [rbx+8], 19
  00053	74 3d		 je	 SHORT $LN1@validop
  00055	48 8d 54 24 48	 lea	 rdx, QWORD PTR i$1[rsp]
  0005a	45 33 c0	 xor	 r8d, r8d
  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 luaV_tointeger
  00065	85 c0		 test	 eax, eax
  00067	75 29		 jne	 SHORT $LN1@validop
$LN12@validop:
  00069	33 c0		 xor	 eax, eax
; Line 761
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5b		 pop	 rbx
  00070	c3		 ret	 0
$LN2@validop:
; Line 758
  00071	41 83 78 08 13	 cmp	 DWORD PTR [r8+8], 19
  00076	75 0a		 jne	 SHORT $LN14@validop
  00078	0f 57 c9	 xorps	 xmm1, xmm1
  0007b	f2 49 0f 2a 08	 cvtsi2sd xmm1, QWORD PTR [r8]
  00080	eb 05		 jmp	 SHORT $LN15@validop
$LN14@validop:
  00082	f2 41 0f 10 08	 movsdx	 xmm1, QWORD PTR [r8]
$LN15@validop:
  00087	0f 57 c0	 xorps	 xmm0, xmm0
  0008a	66 0f 2e c8	 ucomisd xmm1, xmm0
  0008e	7a 02		 jp	 SHORT $LN1@validop
  00090	74 d7		 je	 SHORT $LN12@validop
$LN1@validop:
; Line 759
  00092	b8 01 00 00 00	 mov	 eax, 1
; Line 761
  00097	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009b	5b		 pop	 rbx
  0009c	c3		 ret	 0
  0009d	0f 1f 00	 npad	 3
$LN21@validop:
  000a0	00 00 00 00	 DD	 $LN2@validop
  000a4	00 00 00 00	 DD	 $LN1@validop
  000a8	00 00 00 00	 DD	 $LN2@validop
  000ac	00 00 00 00	 DD	 $LN2@validop
  000b0	00 00 00 00	 DD	 $LN3@validop
  000b4	00 00 00 00	 DD	 $LN3@validop
  000b8	00 00 00 00	 DD	 $LN3@validop
  000bc	00 00 00 00	 DD	 $LN3@validop
  000c0	00 00 00 00	 DD	 $LN3@validop
  000c4	00 00 00 00	 DD	 $LN1@validop
  000c8	00 00 00 00	 DD	 $LN3@validop
validop	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT codenot
_TEXT	SEGMENT
fs$ = 48
e$ = 56
codenot	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 702
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx
; Line 703
  00010	e8 00 00 00 00	 call	 luaK_dischargevars
; Line 704
  00015	8b 03		 mov	 eax, DWORD PTR [rbx]
  00017	ff c8		 dec	 eax
  00019	83 f8 0b	 cmp	 eax, 11
  0001c	77 72		 ja	 SHORT $LN1@codenot
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00025	48 98		 cdqe
  00027	44 8b 84 81 00
	00 00 00	 mov	 r8d, DWORD PTR $LN18@codenot[rcx+rax*4]
  0002f	4c 03 c1	 add	 r8, rcx
  00032	41 ff e0	 jmp	 r8
$LN5@codenot:
; Line 706
  00035	c7 03 02 00 00
	00		 mov	 DWORD PTR [rbx], 2
; Line 707
  0003b	eb 53		 jmp	 SHORT $LN1@codenot
$LN4@codenot:
; Line 710
  0003d	c7 03 03 00 00
	00		 mov	 DWORD PTR [rbx], 3
; Line 711
  00043	eb 4b		 jmp	 SHORT $LN1@codenot
$LN3@codenot:
; Line 714
  00045	48 8b d3	 mov	 rdx, rbx
  00048	48 8b cf	 mov	 rcx, rdi
  0004b	e8 00 00 00 00	 call	 invertjump
; Line 715
  00050	eb 3e		 jmp	 SHORT $LN1@codenot
$LN2@codenot:
; Line 719
  00052	48 8b d3	 mov	 rdx, rbx
  00055	48 8b cf	 mov	 rcx, rdi
  00058	e8 00 00 00 00	 call	 discharge2anyreg
; Line 720
  0005d	83 3b 07	 cmp	 DWORD PTR [rbx], 7
  00060	75 14		 jne	 SHORT $LN13@codenot
  00062	8b 4b 08	 mov	 ecx, DWORD PTR [rbx+8]
  00065	0f ba e1 08	 bt	 ecx, 8
  00069	72 0b		 jb	 SHORT $LN13@codenot
  0006b	0f b6 47 3a	 movzx	 eax, BYTE PTR [rdi+58]
  0006f	3b c8		 cmp	 ecx, eax
  00071	7c 03		 jl	 SHORT $LN13@codenot
  00073	fe 4f 3c	 dec	 BYTE PTR [rdi+60]
$LN13@codenot:
; Line 721
  00076	8b 53 08	 mov	 edx, DWORD PTR [rbx+8]
  00079	48 8b cf	 mov	 rcx, rdi
  0007c	c1 e2 17	 shl	 edx, 23
  0007f	83 ca 1b	 or	 edx, 27
  00082	e8 00 00 00 00	 call	 luaK_code
; Line 722
  00087	c7 03 0c 00 00
	00		 mov	 DWORD PTR [rbx], 12
  0008d	89 43 08	 mov	 DWORD PTR [rbx+8], eax
$LN1@codenot:
; Line 731
  00090	8b 43 14	 mov	 eax, DWORD PTR [rbx+20]
  00093	8b 53 10	 mov	 edx, DWORD PTR [rbx+16]
; Line 732
  00096	48 8b cf	 mov	 rcx, rdi
  00099	89 53 14	 mov	 DWORD PTR [rbx+20], edx
  0009c	89 43 10	 mov	 DWORD PTR [rbx+16], eax
  0009f	e8 00 00 00 00	 call	 removevalues
; Line 733
  000a4	8b 53 10	 mov	 edx, DWORD PTR [rbx+16]
  000a7	48 8b cf	 mov	 rcx, rdi
; Line 734
  000aa	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000af	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b3	5f		 pop	 rdi
; Line 733
  000b4	e9 00 00 00 00	 jmp	 removevalues
  000b9	0f 1f 00	 npad	 3
$LN18@codenot:
; Line 734
  000bc	00 00 00 00	 DD	 $LN5@codenot
  000c0	00 00 00 00	 DD	 $LN4@codenot
  000c4	00 00 00 00	 DD	 $LN5@codenot
  000c8	00 00 00 00	 DD	 $LN4@codenot
  000cc	00 00 00 00	 DD	 $LN4@codenot
  000d0	00 00 00 00	 DD	 $LN4@codenot
  000d4	00 00 00 00	 DD	 $LN2@codenot
  000d8	00 00 00 00	 DD	 $LN1@codenot
  000dc	00 00 00 00	 DD	 $LN1@codenot
  000e0	00 00 00 00	 DD	 $LN1@codenot
  000e4	00 00 00 00	 DD	 $LN3@codenot
  000e8	00 00 00 00	 DD	 $LN2@codenot
codenot	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT jumponcond
_TEXT	SEGMENT
fs$ = 48
e$ = 56
cond$ = 64
jumponcond PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 640
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b d9	 mov	 rbx, rcx
; Line 641
  00012	8b 0a		 mov	 ecx, DWORD PTR [rdx]
  00014	41 8b f0	 mov	 esi, r8d
  00017	48 8b fa	 mov	 rdi, rdx
  0001a	83 f9 0c	 cmp	 ecx, 12
  0001d	75 39		 jne	 SHORT $LN1@jumponcond
; Line 642
  0001f	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00022	4c 63 52 08	 movsxd	 r10, DWORD PTR [rdx+8]
  00026	4c 8b 48 38	 mov	 r9, QWORD PTR [rax+56]
  0002a	43 8b 14 91	 mov	 edx, DWORD PTR [r9+r10*4]
; Line 643
  0002e	8b c2		 mov	 eax, edx
  00030	83 e0 3f	 and	 eax, 63			; 0000003fH
  00033	3c 1b		 cmp	 al, 27
  00035	75 21		 jne	 SHORT $LN1@jumponcond
; Line 644
  00037	ff 4b 20	 dec	 DWORD PTR [rbx+32]
; Line 645
  0003a	81 e2 ff ff c5
	ff		 and	 edx, -3801089		; ffc5ffffH
  00040	33 c0		 xor	 eax, eax
  00042	81 ca 00 00 44
	00		 or	 edx, 4456448		; 00440000H
  00048	c1 ea 11	 shr	 edx, 17
  0004b	45 85 c0	 test	 r8d, r8d
  0004e	0f 94 c0	 sete	 al
  00051	c1 e0 0e	 shl	 eax, 14
  00054	0b d0		 or	 edx, eax
  00056	eb 61		 jmp	 SHORT $LN33@jumponcond
$LN1@jumponcond:
; Line 649
  00058	83 f9 07	 cmp	 ecx, 7
  0005b	74 37		 je	 SHORT $LN31@jumponcond
  0005d	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00060	0f b6 4b 3c	 movzx	 ecx, BYTE PTR [rbx+60]
  00064	0f b6 42 0c	 movzx	 eax, BYTE PTR [rdx+12]
  00068	ff c1		 inc	 ecx
  0006a	3b c8		 cmp	 ecx, eax
  0006c	7e 0b		 jle	 SHORT $LN15@jumponcond
  0006e	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00074	7d 62		 jge	 SHORT $LN34@jumponcond
  00076	88 4a 0c	 mov	 BYTE PTR [rdx+12], cl
$LN15@jumponcond:
  00079	fe 43 3c	 inc	 BYTE PTR [rbx+60]
  0007c	44 0f b6 43 3c	 movzx	 r8d, BYTE PTR [rbx+60]
  00081	48 8b d7	 mov	 rdx, rdi
  00084	41 ff c8	 dec	 r8d
  00087	48 8b cb	 mov	 rcx, rbx
  0008a	e8 00 00 00 00	 call	 discharge2reg
; Line 650
  0008f	83 3f 07	 cmp	 DWORD PTR [rdi], 7
  00092	75 14		 jne	 SHORT $LN24@jumponcond
$LN31@jumponcond:
  00094	8b 4f 08	 mov	 ecx, DWORD PTR [rdi+8]
  00097	0f ba e1 08	 bt	 ecx, 8
  0009b	72 0b		 jb	 SHORT $LN24@jumponcond
  0009d	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  000a1	3b c8		 cmp	 ecx, eax
  000a3	7c 03		 jl	 SHORT $LN24@jumponcond
  000a5	fe 4b 3c	 dec	 BYTE PTR [rbx+60]
$LN24@jumponcond:
; Line 651
  000a8	8b 57 08	 mov	 edx, DWORD PTR [rdi+8]
  000ab	c1 e2 09	 shl	 edx, 9
  000ae	0b d6		 or	 edx, esi
  000b0	c1 e2 0e	 shl	 edx, 14
  000b3	81 ca e3 3f 00
	00		 or	 edx, 16355		; 00003fe3H
$LN33@jumponcond:
  000b9	48 8b cb	 mov	 rcx, rbx
  000bc	e8 00 00 00 00	 call	 luaK_code
  000c1	48 8b cb	 mov	 rcx, rbx
; Line 652
  000c4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c9	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000ce	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d2	5f		 pop	 rdi
; Line 651
  000d3	e9 00 00 00 00	 jmp	 luaK_jump
$LN34@jumponcond:
; Line 649
  000d8	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  000e3	e8 00 00 00 00	 call	 luaX_syntaxerror
  000e8	cc		 int	 3
$LN32@jumponcond:
jumponcond ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT invertjump
_TEXT	SEGMENT
fs$ = 8
e$ = 16
invertjump PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 633
  00000	4c 63 42 08	 movsxd	 r8, DWORD PTR [rdx+8]
  00004	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00007	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0000b	4e 8d 0c 81	 lea	 r9, QWORD PTR [rcx+r8*4]
  0000f	41 83 f8 01	 cmp	 r8d, 1
  00013	7c 18		 jl	 SHORT $LN4@invertjump
  00015	41 8b 41 fc	 mov	 eax, DWORD PTR [r9-4]
  00019	49 8d 51 fc	 lea	 rdx, QWORD PTR [r9-4]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:luaP_opmodes
  00024	83 e0 3f	 and	 eax, 63			; 0000003fH
  00027	f6 04 08 80	 test	 BYTE PTR [rax+rcx], 128	; 00000080H
  0002b	75 03		 jne	 SHORT $LN3@invertjump
$LN4@invertjump:
  0002d	49 8b d1	 mov	 rdx, r9
$LN3@invertjump:
; Line 636
  00030	8b 0a		 mov	 ecx, DWORD PTR [rdx]
  00032	b8 00 00 00 00	 mov	 eax, 0
  00037	f7 c1 c0 3f 00
	00		 test	 ecx, 16320		; 00003fc0H
  0003d	0f 94 c0	 sete	 al
  00040	c1 e0 06	 shl	 eax, 6
  00043	33 c1		 xor	 eax, ecx
  00045	25 c0 3f 00 00	 and	 eax, 16320		; 00003fc0H
  0004a	33 c1		 xor	 eax, ecx
  0004c	89 02		 mov	 DWORD PTR [rdx], eax
; Line 637
  0004e	c3		 ret	 0
invertjump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT exp2reg
_TEXT	SEGMENT
fs$ = 80
e$ = 88
reg$ = 96
exp2reg	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 496
  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	41 56		 push	 r14
  00005	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00009	45 8b f0	 mov	 r14d, r8d
  0000c	48 8b fa	 mov	 rdi, rdx
  0000f	48 8b f1	 mov	 rsi, rcx
; Line 497
  00012	e8 00 00 00 00	 call	 discharge2reg
; Line 498
  00017	83 3f 0b	 cmp	 DWORD PTR [rdi], 11
  0001a	75 10		 jne	 SHORT $LN4@exp2reg
; Line 499
  0001c	44 8b 47 08	 mov	 r8d, DWORD PTR [rdi+8]
  00020	48 8d 57 10	 lea	 rdx, QWORD PTR [rdi+16]
  00024	48 8b ce	 mov	 rcx, rsi
  00027	e8 00 00 00 00	 call	 luaK_concat
$LN4@exp2reg:
; Line 500
  0002c	8b 4f 10	 mov	 ecx, DWORD PTR [rdi+16]
  0002f	8b 57 14	 mov	 edx, DWORD PTR [rdi+20]
  00032	3b ca		 cmp	 ecx, edx
  00034	0f 84 76 01 00
	00		 je	 $LN3@exp2reg
; Line 502
  0003a	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0003f	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  00044	4c 89 7c 24 68	 mov	 QWORD PTR [rsp+104], r15
  00049	41 83 cf ff	 or	 r15d, -1
; Line 504
  0004d	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:luaP_opmodes
  00054	45 0b e7	 or	 r12d, r15d
  00057	41 3b cf	 cmp	 ecx, r15d
  0005a	74 4b		 je	 SHORT $LN10@exp2reg
  0005c	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  0005f	4c 8b 50 38	 mov	 r10, QWORD PTR [rax+56]
$LL15@exp2reg:
  00063	48 63 c1	 movsxd	 rax, ecx
  00066	4d 8d 04 82	 lea	 r8, QWORD PTR [r10+rax*4]
  0006a	83 f9 01	 cmp	 ecx, 1
  0006d	7c 12		 jl	 SHORT $LN20@exp2reg
  0006f	41 8b 40 fc	 mov	 eax, DWORD PTR [r8-4]
  00073	4d 8d 48 fc	 lea	 r9, QWORD PTR [r8-4]
  00077	83 e0 3f	 and	 eax, 63			; 0000003fH
  0007a	42 f6 04 18 80	 test	 BYTE PTR [rax+r11], 128	; 00000080H
  0007f	75 03		 jne	 SHORT $LN19@exp2reg
$LN20@exp2reg:
  00081	4d 8b c8	 mov	 r9, r8
$LN19@exp2reg:
  00084	41 8b 01	 mov	 eax, DWORD PTR [r9]
  00087	83 e0 3f	 and	 eax, 63			; 0000003fH
  0008a	3c 23		 cmp	 al, 35			; 00000023H
  0008c	75 76		 jne	 SHORT $LN1@exp2reg
  0008e	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00091	c1 e8 0e	 shr	 eax, 14
  00094	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
  00099	83 f8 ff	 cmp	 eax, -1
  0009c	74 09		 je	 SHORT $LN10@exp2reg
  0009e	ff c1		 inc	 ecx
  000a0	03 c8		 add	 ecx, eax
  000a2	83 f9 ff	 cmp	 ecx, -1
  000a5	75 bc		 jne	 SHORT $LL15@exp2reg
$LN10@exp2reg:
  000a7	83 fa ff	 cmp	 edx, -1
  000aa	0f 84 bf 00 00
	00		 je	 $LN49@exp2reg
  000b0	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000b3	4c 8b 48 38	 mov	 r9, QWORD PTR [rax+56]
  000b7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL29@exp2reg:
  000c0	48 63 c2	 movsxd	 rax, edx
  000c3	49 8d 0c 81	 lea	 rcx, QWORD PTR [r9+rax*4]
  000c7	83 fa 01	 cmp	 edx, 1
  000ca	7c 11		 jl	 SHORT $LN34@exp2reg
  000cc	8b 41 fc	 mov	 eax, DWORD PTR [rcx-4]
  000cf	4c 8d 41 fc	 lea	 r8, QWORD PTR [rcx-4]
  000d3	83 e0 3f	 and	 eax, 63			; 0000003fH
  000d6	42 f6 04 18 80	 test	 BYTE PTR [rax+r11], 128	; 00000080H
  000db	75 03		 jne	 SHORT $LN33@exp2reg
$LN34@exp2reg:
  000dd	4c 8b c1	 mov	 r8, rcx
$LN33@exp2reg:
  000e0	41 8b 00	 mov	 eax, DWORD PTR [r8]
  000e3	83 e0 3f	 and	 eax, 63			; 0000003fH
  000e6	3c 23		 cmp	 al, 35			; 00000023H
  000e8	75 1a		 jne	 SHORT $LN1@exp2reg
  000ea	8b 01		 mov	 eax, DWORD PTR [rcx]
  000ec	c1 e8 0e	 shr	 eax, 14
  000ef	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
  000f4	83 f8 ff	 cmp	 eax, -1
  000f7	74 76		 je	 SHORT $LN49@exp2reg
  000f9	ff c2		 inc	 edx
  000fb	03 d0		 add	 edx, eax
  000fd	83 fa ff	 cmp	 edx, -1
  00100	75 be		 jne	 SHORT $LL29@exp2reg
  00102	eb 6b		 jmp	 SHORT $LN49@exp2reg
$LN1@exp2reg:
; Line 505
  00104	83 3f 0b	 cmp	 DWORD PTR [rdi], 11
  00107	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  0010c	75 05		 jne	 SHORT $LN7@exp2reg
  0010e	83 cd ff	 or	 ebp, -1
  00111	eb 0a		 jmp	 SHORT $LN8@exp2reg
$LN7@exp2reg:
  00113	48 8b ce	 mov	 rcx, rsi
  00116	e8 00 00 00 00	 call	 luaK_jump
  0011b	8b e8		 mov	 ebp, eax
$LN8@exp2reg:
; Line 506
  0011d	8b 46 20	 mov	 eax, DWORD PTR [rsi+32]
  00120	41 8b de	 mov	 ebx, r14d
  00123	48 8b ce	 mov	 rcx, rsi
  00126	c1 e3 06	 shl	 ebx, 6
  00129	89 46 24	 mov	 DWORD PTR [rsi+36], eax
  0012c	8b d3		 mov	 edx, ebx
  0012e	81 ca 03 40 00
	00		 or	 edx, 16387		; 00004003H
  00134	e8 00 00 00 00	 call	 luaK_code
; Line 507
  00139	8b 4e 20	 mov	 ecx, DWORD PTR [rsi+32]
  0013c	81 cb 03 00 80
	00		 or	 ebx, 8388611		; 00800003H
  00142	89 4e 24	 mov	 DWORD PTR [rsi+36], ecx
  00145	48 8b ce	 mov	 rcx, rsi
  00148	8b d3		 mov	 edx, ebx
  0014a	44 8b f8	 mov	 r15d, eax
  0014d	e8 00 00 00 00	 call	 luaK_code
; Line 508
  00152	8b 4e 20	 mov	 ecx, DWORD PTR [rsi+32]
  00155	89 4e 24	 mov	 DWORD PTR [rsi+36], ecx
  00158	48 8d 56 28	 lea	 rdx, QWORD PTR [rsi+40]
  0015c	44 8b c5	 mov	 r8d, ebp
  0015f	48 8b ce	 mov	 rcx, rsi
  00162	44 8b e0	 mov	 r12d, eax
  00165	e8 00 00 00 00	 call	 luaK_concat
  0016a	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
$LN49@exp2reg:
; Line 510
  0016f	8b 5e 20	 mov	 ebx, DWORD PTR [rsi+32]
; Line 511
  00172	45 8b ce	 mov	 r9d, r14d
  00175	48 8b ce	 mov	 rcx, rsi
  00178	89 5e 24	 mov	 DWORD PTR [rsi+36], ebx
  0017b	8b 57 14	 mov	 edx, DWORD PTR [rdi+20]
  0017e	44 8b c3	 mov	 r8d, ebx
  00181	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  00186	e8 00 00 00 00	 call	 patchlistaux
; Line 512
  0018b	8b 57 10	 mov	 edx, DWORD PTR [rdi+16]
  0018e	45 8b ce	 mov	 r9d, r14d
  00191	44 8b c3	 mov	 r8d, ebx
  00194	48 8b ce	 mov	 rcx, rsi
  00197	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  0019c	e8 00 00 00 00	 call	 patchlistaux
  001a1	4c 8b 7c 24 68	 mov	 r15, QWORD PTR [rsp+104]
  001a6	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  001ab	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
$LN3@exp2reg:
; Line 514
  001b0	48 c7 47 10 ff
	ff ff ff	 mov	 QWORD PTR [rdi+16], -1
; Line 515
  001b8	44 89 77 08	 mov	 DWORD PTR [rdi+8], r14d
; Line 516
  001bc	c7 07 07 00 00
	00		 mov	 DWORD PTR [rdi], 7
; Line 517
  001c2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001c6	41 5e		 pop	 r14
  001c8	5f		 pop	 rdi
  001c9	5e		 pop	 rsi
  001ca	c3		 ret	 0
exp2reg	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT discharge2anyreg
_TEXT	SEGMENT
fs$ = 48
e$ = 56
discharge2anyreg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 488
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 489
  00004	83 3a 07	 cmp	 DWORD PTR [rdx], 7
  00007	74 36		 je	 SHORT $LN1@discharge2
; Line 490
  00009	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0000c	44 0f b6 41 3c	 movzx	 r8d, BYTE PTR [rcx+60]
  00011	41 0f b6 41 0c	 movzx	 eax, BYTE PTR [r9+12]
  00016	41 ff c0	 inc	 r8d
  00019	44 3b c0	 cmp	 r8d, eax
  0001c	7e 0d		 jle	 SHORT $LN7@discharge2
  0001e	41 81 f8 ff 00
	00 00		 cmp	 r8d, 255		; 000000ffH
  00025	7d 1d		 jge	 SHORT $LN13@discharge2
  00027	45 88 41 0c	 mov	 BYTE PTR [r9+12], r8b
$LN7@discharge2:
  0002b	fe 41 3c	 inc	 BYTE PTR [rcx+60]
  0002e	44 0f b6 41 3c	 movzx	 r8d, BYTE PTR [rcx+60]
; Line 491
  00033	41 ff c8	 dec	 r8d
; Line 493
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
; Line 491
  0003a	e9 00 00 00 00	 jmp	 discharge2reg
$LN1@discharge2:
; Line 493
  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
$LN13@discharge2:
; Line 490
  00044	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  0004f	e8 00 00 00 00	 call	 luaX_syntaxerror
  00054	cc		 int	 3
$LN12@discharge2:
discharge2anyreg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT discharge2reg
_TEXT	SEGMENT
o$1 = 32
fs$ = 64
e$ = 72
reg$ = 80
discharge2reg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 445
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	41 8b f8	 mov	 edi, r8d
  00012	48 8b da	 mov	 rbx, rdx
  00015	48 8b f1	 mov	 rsi, rcx
; Line 446
  00018	e8 00 00 00 00	 call	 luaK_dischargevars
; Line 447
  0001d	8b 0b		 mov	 ecx, DWORD PTR [rbx]
  0001f	8d 41 ff	 lea	 eax, DWORD PTR [rcx-1]
  00022	83 f8 0b	 cmp	 eax, 11
  00025	0f 87 e4 00 00
	00		 ja	 $LN1@discharge2
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  00032	48 98		 cdqe
  00034	44 8b 8c 82 00
	00 00 00	 mov	 r9d, DWORD PTR $LN20@discharge2[rdx+rax*4]
  0003c	4c 03 ca	 add	 r9, rdx
  0003f	41 ff e1	 jmp	 r9
$LN9@discharge2:
; Line 449
  00042	41 b8 01 00 00
	00		 mov	 r8d, 1
  00048	8b d7		 mov	 edx, edi
  0004a	48 8b ce	 mov	 rcx, rsi
  0004d	e8 00 00 00 00	 call	 luaK_nil
; Line 450
  00052	e9 af 00 00 00	 jmp	 $LN18@discharge2
$LN8@discharge2:
; Line 453
  00057	33 d2		 xor	 edx, edx
  00059	83 f9 02	 cmp	 ecx, 2
  0005c	0f 94 c2	 sete	 dl
  0005f	c1 e2 11	 shl	 edx, 17
  00062	0b d7		 or	 edx, edi
  00064	c1 e2 06	 shl	 edx, 6
  00067	83 ca 03	 or	 edx, 3
; Line 454
  0006a	e9 8f 00 00 00	 jmp	 $LN21@discharge2
$LN7@discharge2:
; Line 457
  0006f	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
  00073	8b d7		 mov	 edx, edi
  00075	48 8b ce	 mov	 rcx, rsi
  00078	e8 00 00 00 00	 call	 luaK_codek
; Line 458
  0007d	e9 84 00 00 00	 jmp	 $LN18@discharge2
$LN6@discharge2:
; Line 461
  00082	f2 0f 10 43 08	 movsdx	 xmm0, QWORD PTR [rbx+8]
  00087	4c 8d 44 24 20	 lea	 r8, QWORD PTR o$1[rsp]
  0008c	48 8d 54 24 20	 lea	 rdx, QWORD PTR o$1[rsp]
  00091	48 8b ce	 mov	 rcx, rsi
  00094	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR o$1[rsp+8], 3
  0009c	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR o$1[rsp], xmm0
  000a2	e8 00 00 00 00	 call	 addk
  000a7	8b d7		 mov	 edx, edi
  000a9	48 8b ce	 mov	 rcx, rsi
  000ac	44 8b c0	 mov	 r8d, eax
  000af	e8 00 00 00 00	 call	 luaK_codek
; Line 462
  000b4	eb 50		 jmp	 SHORT $LN18@discharge2
$LN5@discharge2:
; Line 465
  000b6	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  000ba	48 8b ce	 mov	 rcx, rsi
  000bd	e8 00 00 00 00	 call	 luaK_intK
  000c2	8b d7		 mov	 edx, edi
  000c4	48 8b ce	 mov	 rcx, rsi
  000c7	44 8b c0	 mov	 r8d, eax
  000ca	e8 00 00 00 00	 call	 luaK_codek
; Line 466
  000cf	eb 35		 jmp	 SHORT $LN18@discharge2
$LN4@discharge2:
; Line 469
  000d1	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000d4	48 63 53 08	 movsxd	 rdx, DWORD PTR [rbx+8]
  000d8	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
; Line 470
  000dc	40 0f b6 c7	 movzx	 eax, dil
  000e0	81 24 91 3f c0
	ff ff		 and	 DWORD PTR [rcx+rdx*4], -16321 ; ffffc03fH
  000e7	c1 e0 06	 shl	 eax, 6
  000ea	09 04 91	 or	 DWORD PTR [rcx+rdx*4], eax
; Line 471
  000ed	eb 17		 jmp	 SHORT $LN18@discharge2
$LN3@discharge2:
; Line 474
  000ef	8b 53 08	 mov	 edx, DWORD PTR [rbx+8]
  000f2	3b fa		 cmp	 edi, edx
  000f4	74 10		 je	 SHORT $LN18@discharge2
; Line 475
  000f6	c1 e2 11	 shl	 edx, 17
  000f9	0b d7		 or	 edx, edi
  000fb	c1 e2 06	 shl	 edx, 6
$LN21@discharge2:
  000fe	48 8b ce	 mov	 rcx, rsi
  00101	e8 00 00 00 00	 call	 luaK_code
$LN18@discharge2:
; Line 483
  00106	89 7b 08	 mov	 DWORD PTR [rbx+8], edi
; Line 484
  00109	c7 03 07 00 00
	00		 mov	 DWORD PTR [rbx], 7
$LN1@discharge2:
; Line 485
  0010f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00114	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00119	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0011d	5f		 pop	 rdi
  0011e	c3		 ret	 0
  0011f	90		 npad	 1
$LN20@discharge2:
  00120	00 00 00 00	 DD	 $LN9@discharge2
  00124	00 00 00 00	 DD	 $LN8@discharge2
  00128	00 00 00 00	 DD	 $LN8@discharge2
  0012c	00 00 00 00	 DD	 $LN7@discharge2
  00130	00 00 00 00	 DD	 $LN6@discharge2
  00134	00 00 00 00	 DD	 $LN5@discharge2
  00138	00 00 00 00	 DD	 $LN3@discharge2
  0013c	00 00 00 00	 DD	 $LN1@discharge2
  00140	00 00 00 00	 DD	 $LN1@discharge2
  00144	00 00 00 00	 DD	 $LN1@discharge2
  00148	00 00 00 00	 DD	 $LN1@discharge2
  0014c	00 00 00 00	 DD	 $LN4@discharge2
discharge2reg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT code_label
_TEXT	SEGMENT
fs$ = 8
A$ = 16
b$ = 24
jump$ = 32
code_label PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 440
  00000	8b 41 20	 mov	 eax, DWORD PTR [rcx+32]
; Line 441
  00003	41 c1 e0 09	 shl	 r8d, 9
  00007	45 0b c1	 or	 r8d, r9d
  0000a	89 41 24	 mov	 DWORD PTR [rcx+36], eax
  0000d	41 c1 e0 08	 shl	 r8d, 8
  00011	41 0b d0	 or	 edx, r8d
  00014	c1 e2 06	 shl	 edx, 6
  00017	83 ca 03	 or	 edx, 3
  0001a	e9 00 00 00 00	 jmp	 luaK_code
code_label ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT nilK
_TEXT	SEGMENT
k$ = 32
v$ = 48
fs$ = 80
nilK	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 374
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
; Line 378
  00004	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00008	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR v$[rsp+8], 0
; Line 379
  00010	4c 8d 44 24 30	 lea	 r8, QWORD PTR v$[rsp]
  00015	48 8b 50 50	 mov	 rdx, QWORD PTR [rax+80]
  00019	c7 44 24 28 45
	00 00 00	 mov	 DWORD PTR k$[rsp+8], 69	; 00000045H
  00021	48 89 54 24 20	 mov	 QWORD PTR k$[rsp], rdx
  00026	48 8d 54 24 20	 lea	 rdx, QWORD PTR k$[rsp]
  0002b	e8 00 00 00 00	 call	 addk
; Line 380
  00030	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00034	c3		 ret	 0
nilK	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT boolK
_TEXT	SEGMENT
o$ = 32
fs$ = 64
b$ = 72
boolK	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 367
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 369
  00004	89 54 24 20	 mov	 DWORD PTR o$[rsp], edx
; Line 370
  00008	4c 8d 44 24 20	 lea	 r8, QWORD PTR o$[rsp]
  0000d	48 8d 54 24 20	 lea	 rdx, QWORD PTR o$[rsp]
  00012	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR o$[rsp+8], 1
  0001a	e8 00 00 00 00	 call	 addk
; Line 371
  0001f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00023	c3		 ret	 0
boolK	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_numberK
_TEXT	SEGMENT
o$ = 32
fs$ = 64
r$ = 72
luaK_numberK PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 360
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 363
  00004	4c 8d 44 24 20	 lea	 r8, QWORD PTR o$[rsp]
  00009	48 8d 54 24 20	 lea	 rdx, QWORD PTR o$[rsp]
  0000e	f2 0f 11 4c 24
	20		 movsdx	 QWORD PTR o$[rsp], xmm1
  00014	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR o$[rsp+8], 3
  0001c	e8 00 00 00 00	 call	 addk
; Line 364
  00021	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00025	c3		 ret	 0
luaK_numberK ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT addk
_TEXT	SEGMENT
L$1$ = 96
fs$ = 96
key$ = 104
v$ = 112
addk	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 313
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	57		 push	 rdi
  00004	41 56		 push	 r14
  00006	41 57		 push	 r15
  00008	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 315
  0000c	48 8b 39	 mov	 rdi, QWORD PTR [rcx]
  0000f	49 8b e8	 mov	 rbp, r8
  00012	4c 8b c2	 mov	 r8, rdx
  00015	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  00019	4c 8b f1	 mov	 r14, rcx
  0001c	48 8b 42 38	 mov	 rax, QWORD PTR [rdx+56]
; Line 316
  00020	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00024	48 8b c8	 mov	 rcx, rax
  00027	48 89 44 24 60	 mov	 QWORD PTR L$1$[rsp], rax
  0002c	e8 00 00 00 00	 call	 luaH_set
  00031	4c 8b f8	 mov	 r15, rax
; Line 318
  00034	83 78 08 13	 cmp	 DWORD PTR [rax+8], 19
  00038	75 3b		 jne	 SHORT $LN4@addk
; Line 319
  0003a	48 63 18	 movsxd	 rbx, DWORD PTR [rax]
; Line 322
  0003d	41 3b 5e 2c	 cmp	 ebx, DWORD PTR [r14+44]
  00041	7d 32		 jge	 SHORT $LN4@addk
  00043	48 8b d3	 mov	 rdx, rbx
  00046	48 c1 e2 04	 shl	 rdx, 4
  0004a	48 03 57 30	 add	 rdx, QWORD PTR [rdi+48]
  0004e	8b 4a 08	 mov	 ecx, DWORD PTR [rdx+8]
  00051	33 4d 08	 xor	 ecx, DWORD PTR [rbp+8]
  00054	f6 c1 3f	 test	 cl, 63			; 0000003fH
  00057	75 1c		 jne	 SHORT $LN4@addk
  00059	4c 8b c5	 mov	 r8, rbp
  0005c	33 c9		 xor	 ecx, ecx
  0005e	e8 00 00 00 00	 call	 luaV_equalobj
  00063	85 c0		 test	 eax, eax
  00065	74 0e		 je	 SHORT $LN4@addk
; Line 323
  00067	8b c3		 mov	 eax, ebx
; Line 337
  00069	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006d	41 5f		 pop	 r15
  0006f	41 5e		 pop	 r14
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	5b		 pop	 rbx
  00074	c3		 ret	 0
$LN4@addk:
; Line 326
  00075	48 63 5f 14	 movsxd	 rbx, DWORD PTR [rdi+20]
  00079	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  0007e	4c 89 64 24 70	 mov	 QWORD PTR [rsp+112], r12
  00083	4c 89 6c 24 78	 mov	 QWORD PTR [rsp+120], r13
; Line 327
  00088	4d 63 6e 2c	 movsxd	 r13, DWORD PTR [r14+44]
; Line 330
  0008c	41 c7 47 08 13
	00 00 00	 mov	 DWORD PTR [r15+8], 19
  00094	4d 89 2f	 mov	 QWORD PTR [r15], r13
; Line 331
  00097	4c 8b 7c 24 60	 mov	 r15, QWORD PTR L$1$[rsp]
  0009c	41 8d 45 01	 lea	 eax, DWORD PTR [r13+1]
  000a0	4d 8b e5	 mov	 r12, r13
  000a3	3b 47 14	 cmp	 eax, DWORD PTR [rdi+20]
  000a6	7e 2e		 jle	 SHORT $LN10@addk
  000a8	48 8b 57 30	 mov	 rdx, QWORD PTR [rdi+48]
  000ac	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09FGMGFBD@constants?$AA@
  000b3	4c 8d 47 14	 lea	 r8, QWORD PTR [rdi+20]
  000b7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000bc	41 b9 10 00 00
	00		 mov	 r9d, 16
  000c2	49 8b cf	 mov	 rcx, r15
  000c5	c7 44 24 20 ff
	ff ff 03	 mov	 DWORD PTR [rsp+32], 67108863 ; 03ffffffH
  000cd	e8 00 00 00 00	 call	 luaM_growaux_
  000d2	48 89 47 30	 mov	 QWORD PTR [rdi+48], rax
$LN10@addk:
; Line 332
  000d6	3b 5f 14	 cmp	 ebx, DWORD PTR [rdi+20]
  000d9	7d 28		 jge	 SHORT $LN1@addk
; Line 326
  000db	48 8b cb	 mov	 rcx, rbx
  000de	48 c1 e1 04	 shl	 rcx, 4
  000e2	33 d2		 xor	 edx, edx
  000e4	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL2@addk:
; Line 332
  000f0	48 8b 47 30	 mov	 rax, QWORD PTR [rdi+48]
  000f4	ff c3		 inc	 ebx
  000f6	48 8d 49 10	 lea	 rcx, QWORD PTR [rcx+16]
  000fa	89 54 08 f8	 mov	 DWORD PTR [rax+rcx-8], edx
  000fe	3b 5f 14	 cmp	 ebx, DWORD PTR [rdi+20]
  00101	7c ed		 jl	 SHORT $LL2@addk
$LN1@addk:
; Line 333
  00103	0f 10 45 00	 movups	 xmm0, XMMWORD PTR [rbp]
  00107	48 8b 47 30	 mov	 rax, QWORD PTR [rdi+48]
  0010b	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  00110	4d 03 e4	 add	 r12, r12
  00113	42 0f 11 04 e0	 movups	 XMMWORD PTR [rax+r12*8], xmm0
; Line 334
  00118	41 ff 46 2c	 inc	 DWORD PTR [r14+44]
; Line 335
  0011c	f6 45 08 40	 test	 BYTE PTR [rbp+8], 64	; 00000040H
  00120	4c 8b 64 24 70	 mov	 r12, QWORD PTR [rsp+112]
  00125	74 1c		 je	 SHORT $LN8@addk
  00127	f6 47 09 04	 test	 BYTE PTR [rdi+9], 4
  0012b	74 16		 je	 SHORT $LN8@addk
  0012d	4c 8b 45 00	 mov	 r8, QWORD PTR [rbp]
  00131	41 f6 40 09 03	 test	 BYTE PTR [r8+9], 3
  00136	74 0b		 je	 SHORT $LN8@addk
  00138	48 8b d7	 mov	 rdx, rdi
  0013b	49 8b cf	 mov	 rcx, r15
  0013e	e8 00 00 00 00	 call	 luaC_barrier_
$LN8@addk:
; Line 336
  00143	41 8b c5	 mov	 eax, r13d
  00146	4c 8b 6c 24 78	 mov	 r13, QWORD PTR [rsp+120]
; Line 337
  0014b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0014f	41 5f		 pop	 r15
  00151	41 5e		 pop	 r14
  00153	5f		 pop	 rdi
  00154	5d		 pop	 rbp
  00155	5b		 pop	 rbx
  00156	c3		 ret	 0
addk	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT freeexp
_TEXT	SEGMENT
fs$ = 8
e$ = 16
freeexp	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 304
  00000	83 3a 07	 cmp	 DWORD PTR [rdx], 7
  00003	75 14		 jne	 SHORT $LN4@freeexp
; Line 305
  00005	8b 52 08	 mov	 edx, DWORD PTR [rdx+8]
  00008	0f ba e2 08	 bt	 edx, 8
  0000c	72 0b		 jb	 SHORT $LN4@freeexp
  0000e	0f b6 41 3a	 movzx	 eax, BYTE PTR [rcx+58]
  00012	3b d0		 cmp	 edx, eax
  00014	7c 03		 jl	 SHORT $LN4@freeexp
  00016	fe 49 3c	 dec	 BYTE PTR [rcx+60]
$LN4@freeexp:
; Line 306
  00019	c3		 ret	 0
freeexp	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT freereg
_TEXT	SEGMENT
fs$ = 8
reg$ = 16
freereg	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 296
  00000	0f ba e2 08	 bt	 edx, 8
  00004	72 0b		 jb	 SHORT $LN1@freereg
  00006	0f b6 41 3a	 movzx	 eax, BYTE PTR [rcx+58]
  0000a	3b d0		 cmp	 edx, eax
  0000c	7c 03		 jl	 SHORT $LN1@freereg
; Line 297
  0000e	fe 49 3c	 dec	 BYTE PTR [rcx+60]
$LN1@freereg:
; Line 300
  00011	c3		 ret	 0
freereg	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT codeextraarg
_TEXT	SEGMENT
fs$ = 8
a$ = 16
codeextraarg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 263
  00000	c1 e2 06	 shl	 edx, 6
  00003	83 ca 2e	 or	 edx, 46			; 0000002eH
  00006	e9 00 00 00 00	 jmp	 luaK_code
codeextraarg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_code
_TEXT	SEGMENT
fs$ = 64
i$ = 72
luaK_code PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 229
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 231
  00014	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00018	48 8b 39	 mov	 rdi, QWORD PTR [rcx]
  0001b	8b f2		 mov	 esi, edx
  0001d	8b 51 28	 mov	 edx, DWORD PTR [rcx+40]
  00020	41 b9 ff 00 00
	00		 mov	 r9d, 255		; 000000ffH
  00026	48 8b d9	 mov	 rbx, rcx
  00029	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  0002e	e8 00 00 00 00	 call	 patchlistaux
; Line 234
  00033	8b 43 20	 mov	 eax, DWORD PTR [rbx+32]
  00036	4c 8d 47 18	 lea	 r8, QWORD PTR [rdi+24]
  0003a	ff c0		 inc	 eax
  0003c	c7 43 28 ff ff
	ff ff		 mov	 DWORD PTR [rbx+40], -1
  00043	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:??_C@_07BEDGJMGI@opcodes?$AA@
  0004a	41 3b 00	 cmp	 eax, DWORD PTR [r8]
  0004d	7e 28		 jle	 SHORT $LN2@luaK_code
  0004f	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00053	48 8b 57 38	 mov	 rdx, QWORD PTR [rdi+56]
  00057	41 b9 04 00 00
	00		 mov	 r9d, 4
  0005d	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00061	48 89 6c 24 28	 mov	 QWORD PTR [rsp+40], rbp
  00066	c7 44 24 20 ff
	ff ff 7f	 mov	 DWORD PTR [rsp+32], 2147483647 ; 7fffffffH
  0006e	e8 00 00 00 00	 call	 luaM_growaux_
  00073	48 89 47 38	 mov	 QWORD PTR [rdi+56], rax
$LN2@luaK_code:
; Line 235
  00077	48 8b 47 38	 mov	 rax, QWORD PTR [rdi+56]
  0007b	48 63 4b 20	 movsxd	 rcx, DWORD PTR [rbx+32]
; Line 238
  0007f	4c 8d 47 1c	 lea	 r8, QWORD PTR [rdi+28]
  00083	89 34 88	 mov	 DWORD PTR [rax+rcx*4], esi
  00086	8b 43 20	 mov	 eax, DWORD PTR [rbx+32]
  00089	ff c0		 inc	 eax
  0008b	41 3b 00	 cmp	 eax, DWORD PTR [r8]
  0008e	7e 28		 jle	 SHORT $LN1@luaK_code
  00090	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00094	48 8b 57 48	 mov	 rdx, QWORD PTR [rdi+72]
  00098	41 b9 04 00 00
	00		 mov	 r9d, 4
  0009e	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  000a2	48 89 6c 24 28	 mov	 QWORD PTR [rsp+40], rbp
  000a7	c7 44 24 20 ff
	ff ff 7f	 mov	 DWORD PTR [rsp+32], 2147483647 ; 7fffffffH
  000af	e8 00 00 00 00	 call	 luaM_growaux_
  000b4	48 89 47 48	 mov	 QWORD PTR [rdi+72], rax
$LN1@luaK_code:
; Line 239
  000b8	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000bc	48 63 53 20	 movsxd	 rdx, DWORD PTR [rbx+32]
  000c0	48 8b 4f 48	 mov	 rcx, QWORD PTR [rdi+72]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
; Line 241
  000c7	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000cc	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000d1	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax
  000d4	8b 43 20	 mov	 eax, DWORD PTR [rbx+32]
  000d7	8d 48 01	 lea	 ecx, DWORD PTR [rax+1]
  000da	89 4b 20	 mov	 DWORD PTR [rbx+32], ecx
  000dd	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000e2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e6	5f		 pop	 rdi
  000e7	c3		 ret	 0
luaK_code ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT dischargejpc
_TEXT	SEGMENT
fs$ = 64
dischargejpc PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 180
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 181
  00006	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  0000a	8b 51 28	 mov	 edx, DWORD PTR [rcx+40]
  0000d	41 b9 ff 00 00
	00		 mov	 r9d, 255		; 000000ffH
  00013	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  00018	48 8b d9	 mov	 rbx, rcx
  0001b	e8 00 00 00 00	 call	 patchlistaux
; Line 182
  00020	c7 43 28 ff ff
	ff ff		 mov	 DWORD PTR [rbx+40], -1
; Line 183
  00027	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
dischargejpc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT patchlistaux
_TEXT	SEGMENT
fs$ = 48
list$ = 56
vtarget$ = 64
reg$ = 72
dtarget$ = 80
patchlistaux PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 169
  00000	83 fa ff	 cmp	 edx, -1
  00003	0f 84 55 01 00
	00		 je	 $LN39@patchlista
  00009	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000e	57		 push	 rdi
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00018	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0001d	8b 74 24 50	 mov	 esi, DWORD PTR dtarget$[rsp]
  00021	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14
  00026	45 8b d9	 mov	 r11d, r9d
  00029	41 8b e8	 mov	 ebp, r8d
  0002c	44 8b d2	 mov	 r10d, edx
  0002f	48 8b f9	 mov	 rdi, rcx
  00032	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:luaP_opmodes
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@patchlista:
; Line 170
  00040	49 63 c2	 movsxd	 rax, r10d
  00043	48 8d 1c 85 00
	00 00 00	 lea	 rbx, QWORD PTR [rax*4]
  0004b	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0004e	4c 8b 40 38	 mov	 r8, QWORD PTR [rax+56]
  00052	4c 03 c3	 add	 r8, rbx
  00055	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00058	c1 e8 0e	 shr	 eax, 14
  0005b	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
  00060	83 f8 ff	 cmp	 eax, -1
  00063	75 05		 jne	 SHORT $LN8@patchlista
  00065	44 0b c8	 or	 r9d, eax
  00068	eb 07		 jmp	 SHORT $LN7@patchlista
$LN8@patchlista:
  0006a	44 8d 48 01	 lea	 r9d, DWORD PTR [rax+1]
  0006e	45 03 ca	 add	 r9d, r10d
$LN7@patchlista:
; Line 171
  00071	41 83 fa 01	 cmp	 r10d, 1
  00075	7c 12		 jl	 SHORT $LN17@patchlista
  00077	41 8b 40 fc	 mov	 eax, DWORD PTR [r8-4]
  0007b	49 8d 50 fc	 lea	 rdx, QWORD PTR [r8-4]
  0007f	83 e0 3f	 and	 eax, 63			; 0000003fH
  00082	42 f6 04 30 80	 test	 BYTE PTR [rax+r14], 128	; 00000080H
  00087	75 03		 jne	 SHORT $LN16@patchlista
$LN17@patchlista:
  00089	49 8b d0	 mov	 rdx, r8
$LN16@patchlista:
  0008c	8b 0a		 mov	 ecx, DWORD PTR [rdx]
  0008e	8b c1		 mov	 eax, ecx
  00090	83 e0 3f	 and	 eax, 63			; 0000003fH
  00093	3c 23		 cmp	 al, 35			; 00000023H
  00095	75 75		 jne	 SHORT $LN2@patchlista
  00097	41 81 fb ff 00
	00 00		 cmp	 r11d, 255		; 000000ffH
  0009e	74 1b		 je	 SHORT $LN12@patchlista
  000a0	8b c1		 mov	 eax, ecx
  000a2	c1 e8 17	 shr	 eax, 23
  000a5	44 3b d8	 cmp	 r11d, eax
  000a8	74 11		 je	 SHORT $LN12@patchlista
  000aa	41 8b c3	 mov	 eax, r11d
  000ad	c1 e0 06	 shl	 eax, 6
  000b0	33 c1		 xor	 eax, ecx
  000b2	25 c0 3f 00 00	 and	 eax, 16320		; 00003fc0H
  000b7	33 c1		 xor	 eax, ecx
  000b9	eb 17		 jmp	 SHORT $LN40@patchlista
$LN12@patchlista:
  000bb	8b c1		 mov	 eax, ecx
  000bd	81 e1 00 c0 7f
	00		 and	 ecx, 8372224		; 007fc000H
  000c3	25 ff ff c5 ff	 and	 eax, -3801089		; ffc5ffffH
  000c8	0d 00 00 44 00	 or	 eax, 4456448		; 00440000H
  000cd	c1 e8 11	 shr	 eax, 17
  000d0	0b c1		 or	 eax, ecx
$LN40@patchlista:
  000d2	89 02		 mov	 DWORD PTR [rdx], eax
; Line 172
  000d4	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000d7	44 8b c5	 mov	 r8d, ebp
  000da	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  000de	45 2b c2	 sub	 r8d, r10d
  000e1	41 8d 40 ff	 lea	 eax, DWORD PTR [r8-1]
  000e5	99		 cdq
  000e6	33 c2		 xor	 eax, edx
  000e8	2b c2		 sub	 eax, edx
  000ea	3d ff ff 01 00	 cmp	 eax, 131071		; 0001ffffH
  000ef	7f 6e		 jg	 SHORT $LN41@patchlista
  000f1	81 24 0b ff 3f
	00 00		 and	 DWORD PTR [rbx+rcx], 16383 ; 00003fffH
  000f8	41 8d 80 fe ff
	01 00		 lea	 eax, DWORD PTR [r8+131070]
  000ff	c1 e0 0e	 shl	 eax, 14
  00102	25 00 c0 ff ff	 and	 eax, -16384		; ffffc000H
  00107	09 04 0b	 or	 DWORD PTR [rbx+rcx], eax
; Line 173
  0010a	eb 2c		 jmp	 SHORT $LN25@patchlista
$LN2@patchlista:
; Line 174
  0010c	8b ce		 mov	 ecx, esi
  0010e	41 2b ca	 sub	 ecx, r10d
  00111	8d 41 ff	 lea	 eax, DWORD PTR [rcx-1]
  00114	99		 cdq
  00115	33 c2		 xor	 eax, edx
  00117	2b c2		 sub	 eax, edx
  00119	3d ff ff 01 00	 cmp	 eax, 131071		; 0001ffffH
  0011e	7f 50		 jg	 SHORT $LN29@patchlista
  00120	41 81 20 ff 3f
	00 00		 and	 DWORD PTR [r8], 16383	; 00003fffH
  00127	8d 81 fe ff 01
	00		 lea	 eax, DWORD PTR [rcx+131070]
  0012d	c1 e0 0e	 shl	 eax, 14
  00130	25 00 c0 ff ff	 and	 eax, -16384		; ffffc000H
  00135	41 09 00	 or	 DWORD PTR [r8], eax
$LN25@patchlista:
; Line 175
  00138	45 8b d1	 mov	 r10d, r9d
  0013b	41 83 f9 ff	 cmp	 r9d, -1
  0013f	0f 85 fb fe ff
	ff		 jne	 $LL4@patchlista
; Line 177
  00145	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0014a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0014f	4c 8b 74 24 40	 mov	 r14, QWORD PTR [rsp+64]
  00154	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00159	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0015d	5f		 pop	 rdi
$LN39@patchlista:
  0015e	c3		 ret	 0
$LN41@patchlista:
; Line 172
  0015f	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00163	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@
  0016a	e8 00 00 00 00	 call	 luaX_syntaxerror
  0016f	cc		 int	 3
$LN29@patchlista:
; Line 174
  00170	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@
  0017b	e8 00 00 00 00	 call	 luaX_syntaxerror
  00180	cc		 int	 3
$LN38@patchlista:
patchlistaux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT removevalues
_TEXT	SEGMENT
fs$ = 16
list$ = 24
removevalues PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 161
  00000	48 83 ec 08	 sub	 rsp, 8
  00004	4c 8b d9	 mov	 r11, rcx
; Line 162
  00007	83 fa ff	 cmp	 edx, -1
  0000a	0f 84 89 00 00
	00		 je	 $LN25@removevalu
  00010	48 89 1c 24	 mov	 QWORD PTR [rsp], rbx
  00014	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:luaP_opmodes
  0001b	0f 1f 44 00 00	 npad	 5
$LL6@removevalu:
; Line 163
  00020	48 63 c2	 movsxd	 rax, edx
  00023	4c 8d 14 85 00
	00 00 00	 lea	 r10, QWORD PTR [rax*4]
  0002b	49 8b 03	 mov	 rax, QWORD PTR [r11]
  0002e	4c 8b 48 38	 mov	 r9, QWORD PTR [rax+56]
  00032	4d 03 ca	 add	 r9, r10
  00035	83 fa 01	 cmp	 edx, 1
  00038	7c 11		 jl	 SHORT $LN16@removevalu
  0003a	41 8b 41 fc	 mov	 eax, DWORD PTR [r9-4]
  0003e	4d 8d 41 fc	 lea	 r8, QWORD PTR [r9-4]
  00042	83 e0 3f	 and	 eax, 63			; 0000003fH
  00045	f6 04 18 80	 test	 BYTE PTR [rax+rbx], 128	; 00000080H
  00049	75 03		 jne	 SHORT $LN15@removevalu
$LN16@removevalu:
  0004b	4d 8b c1	 mov	 r8, r9
$LN15@removevalu:
  0004e	41 8b 08	 mov	 ecx, DWORD PTR [r8]
  00051	8b c1		 mov	 eax, ecx
  00053	83 e0 3f	 and	 eax, 63			; 0000003fH
  00056	3c 23		 cmp	 al, 35			; 00000023H
  00058	75 1a		 jne	 SHORT $LN2@removevalu
  0005a	8b c1		 mov	 eax, ecx
  0005c	81 e1 00 c0 7f
	00		 and	 ecx, 8372224		; 007fc000H
  00062	25 ff ff c5 ff	 and	 eax, -3801089		; ffc5ffffH
  00067	0d 00 00 44 00	 or	 eax, 4456448		; 00440000H
  0006c	c1 e8 11	 shr	 eax, 17
  0006f	0b c1		 or	 eax, ecx
  00071	41 89 00	 mov	 DWORD PTR [r8], eax
$LN2@removevalu:
; Line 162
  00074	49 8b 03	 mov	 rax, QWORD PTR [r11]
  00077	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0007b	41 8b 04 0a	 mov	 eax, DWORD PTR [r10+rcx]
  0007f	c1 e8 0e	 shr	 eax, 14
  00082	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
  00087	83 f8 ff	 cmp	 eax, -1
  0008a	74 09		 je	 SHORT $LN26@removevalu
  0008c	ff c2		 inc	 edx
  0008e	03 d0		 add	 edx, eax
  00090	83 fa ff	 cmp	 edx, -1
  00093	75 8b		 jne	 SHORT $LL6@removevalu
$LN26@removevalu:
  00095	48 8b 1c 24	 mov	 rbx, QWORD PTR [rsp]
$LN25@removevalu:
; Line 164
  00099	48 83 c4 08	 add	 rsp, 8
  0009d	c3		 ret	 0
removevalues ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT patchtestreg
_TEXT	SEGMENT
fs$ = 8
node$ = 16
reg$ = 24
patchtestreg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 149
  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	4c 63 ca	 movsxd	 r9, edx
  00006	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0000a	4e 8d 14 89	 lea	 r10, QWORD PTR [rcx+r9*4]
  0000e	83 fa 01	 cmp	 edx, 1
  00011	7c 18		 jl	 SHORT $LN7@patchtestr
  00013	41 8b 42 fc	 mov	 eax, DWORD PTR [r10-4]
  00017	49 8d 52 fc	 lea	 rdx, QWORD PTR [r10-4]
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:luaP_opmodes
  00022	83 e0 3f	 and	 eax, 63			; 0000003fH
  00025	f6 04 08 80	 test	 BYTE PTR [rax+rcx], 128	; 00000080H
  00029	75 03		 jne	 SHORT $LN6@patchtestr
$LN7@patchtestr:
  0002b	49 8b d2	 mov	 rdx, r10
$LN6@patchtestr:
; Line 150
  0002e	8b 0a		 mov	 ecx, DWORD PTR [rdx]
  00030	8b c1		 mov	 eax, ecx
  00032	83 e0 3f	 and	 eax, 63			; 0000003fH
  00035	3c 23		 cmp	 al, 35			; 00000023H
  00037	74 03		 je	 SHORT $LN3@patchtestr
; Line 151
  00039	33 c0		 xor	 eax, eax
; Line 158
  0003b	c3		 ret	 0
$LN3@patchtestr:
; Line 152
  0003c	41 81 f8 ff 00
	00 00		 cmp	 r8d, 255		; 000000ffH
  00043	74 24		 je	 SHORT $LN2@patchtestr
  00045	8b c1		 mov	 eax, ecx
  00047	c1 e8 17	 shr	 eax, 23
  0004a	44 3b c0	 cmp	 r8d, eax
  0004d	74 1a		 je	 SHORT $LN2@patchtestr
; Line 153
  0004f	41 c1 e0 06	 shl	 r8d, 6
; Line 157
  00053	b8 01 00 00 00	 mov	 eax, 1
  00058	44 33 c1	 xor	 r8d, ecx
  0005b	41 81 e0 c0 3f
	00 00		 and	 r8d, 16320		; 00003fc0H
  00062	44 33 c1	 xor	 r8d, ecx
  00065	44 89 02	 mov	 DWORD PTR [rdx], r8d
; Line 158
  00068	c3		 ret	 0
$LN2@patchtestr:
; Line 155
  00069	8b c1		 mov	 eax, ecx
  0006b	81 e1 00 c0 7f
	00		 and	 ecx, 8372224		; 007fc000H
  00071	25 ff ff c5 ff	 and	 eax, -3801089		; ffc5ffffH
  00076	0d 00 00 44 00	 or	 eax, 4456448		; 00440000H
  0007b	c1 e8 11	 shr	 eax, 17
  0007e	0b c1		 or	 eax, ecx
  00080	89 02		 mov	 DWORD PTR [rdx], eax
; Line 157
  00082	b8 01 00 00 00	 mov	 eax, 1
; Line 158
  00087	c3		 ret	 0
patchtestreg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT need_value
_TEXT	SEGMENT
fs$ = 8
list$ = 16
need_value PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 140
  00000	83 fa ff	 cmp	 edx, -1
  00003	74 50		 je	 SHORT $LN2@need_value
; Line 141
  00005	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00008	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:luaP_opmodes
  0000f	4c 8b 48 38	 mov	 r9, QWORD PTR [rax+56]
$LL7@need_value:
  00013	48 63 c2	 movsxd	 rax, edx
  00016	49 8d 0c 81	 lea	 rcx, QWORD PTR [r9+rax*4]
  0001a	83 fa 01	 cmp	 edx, 1
  0001d	7c 11		 jl	 SHORT $LN12@need_value
  0001f	8b 41 fc	 mov	 eax, DWORD PTR [rcx-4]
  00022	4c 8d 41 fc	 lea	 r8, QWORD PTR [rcx-4]
  00026	83 e0 3f	 and	 eax, 63			; 0000003fH
  00029	42 f6 04 10 80	 test	 BYTE PTR [rax+r10], 128	; 00000080H
  0002e	75 03		 jne	 SHORT $LN11@need_value
$LN12@need_value:
  00030	4c 8b c1	 mov	 r8, rcx
$LN11@need_value:
; Line 142
  00033	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00036	83 e0 3f	 and	 eax, 63			; 0000003fH
  00039	3c 23		 cmp	 al, 35			; 00000023H
  0003b	75 1b		 jne	 SHORT $LN16@need_value
; Line 140
  0003d	8b 01		 mov	 eax, DWORD PTR [rcx]
  0003f	c1 e8 0e	 shr	 eax, 14
  00042	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
  00047	83 f8 ff	 cmp	 eax, -1
  0004a	74 09		 je	 SHORT $LN2@need_value
  0004c	ff c2		 inc	 edx
  0004e	03 d0		 add	 edx, eax
  00050	83 fa ff	 cmp	 edx, -1
  00053	75 be		 jne	 SHORT $LL7@need_value
$LN2@need_value:
; Line 144
  00055	33 c0		 xor	 eax, eax
; Line 145
  00057	c3		 ret	 0
$LN16@need_value:
; Line 142
  00058	b8 01 00 00 00	 mov	 eax, 1
; Line 145
  0005d	c3		 ret	 0
need_value ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getjumpcontrol
_TEXT	SEGMENT
fs$ = 8
pc$ = 16
getjumpcontrol PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 127
  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	4c 63 c2	 movsxd	 r8, edx
  00006	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0000a	4e 8d 0c 81	 lea	 r9, QWORD PTR [rcx+r8*4]
; Line 128
  0000e	83 fa 01	 cmp	 edx, 1
  00011	7c 18		 jl	 SHORT $LN2@getjumpcon
  00013	41 8b 41 fc	 mov	 eax, DWORD PTR [r9-4]
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:luaP_opmodes
  0001e	83 e0 3f	 and	 eax, 63			; 0000003fH
  00021	f6 04 10 80	 test	 BYTE PTR [rax+rdx], 128	; 00000080H
; Line 129
  00025	49 8d 41 fc	 lea	 rax, QWORD PTR [r9-4]
  00029	75 03		 jne	 SHORT $LN1@getjumpcon
$LN2@getjumpcon:
; Line 131
  0002b	49 8b c1	 mov	 rax, r9
$LN1@getjumpcon:
; Line 132
  0002e	c3		 ret	 0
getjumpcontrol ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getjump
_TEXT	SEGMENT
fs$ = 8
pc$ = 16
getjump	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 118
  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	4c 63 c2	 movsxd	 r8, edx
  00006	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0000a	42 8b 04 81	 mov	 eax, DWORD PTR [rcx+r8*4]
  0000e	c1 e8 0e	 shr	 eax, 14
  00011	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
; Line 119
  00016	83 f8 ff	 cmp	 eax, -1
  00019	75 03		 jne	 SHORT $LN2@getjump
; Line 120
  0001b	0b c0		 or	 eax, eax
; Line 123
  0001d	c3		 ret	 0
$LN2@getjump:
; Line 122
  0001e	ff c0		 inc	 eax
  00020	03 c2		 add	 eax, edx
; Line 123
  00022	c3		 ret	 0
getjump	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT fixjump
_TEXT	SEGMENT
fs$ = 48
pc$ = 56
dest$ = 64
fixjump	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 97
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 98
  00004	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; Line 99
  00007	44 2b c2	 sub	 r8d, edx
  0000a	4c 63 d2	 movsxd	 r10, edx
  0000d	4c 8b 48 38	 mov	 r9, QWORD PTR [rax+56]
; Line 101
  00011	41 8d 40 ff	 lea	 eax, DWORD PTR [r8-1]
  00015	99		 cdq
  00016	4f 8d 1c 91	 lea	 r11, QWORD PTR [r9+r10*4]
  0001a	33 c2		 xor	 eax, edx
  0001c	2b c2		 sub	 eax, edx
  0001e	3d ff ff 01 00	 cmp	 eax, 131071		; 0001ffffH
  00023	7f 1e		 jg	 SHORT $LN5@fixjump
; Line 103
  00025	41 81 23 ff 3f
	00 00		 and	 DWORD PTR [r11], 16383	; 00003fffH
  0002c	41 8d 80 fe ff
	01 00		 lea	 eax, DWORD PTR [r8+131070]
  00033	c1 e0 0e	 shl	 eax, 14
  00036	25 00 c0 ff ff	 and	 eax, -16384		; ffffc000H
  0003b	41 09 03	 or	 DWORD PTR [r11], eax
; Line 104
  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
$LN5@fixjump:
; Line 102
  00043	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@
  0004e	e8 00 00 00 00	 call	 luaX_syntaxerror
  00053	cc		 int	 3
$LN4@fixjump:
fixjump	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT condjump
_TEXT	SEGMENT
fs$ = 48
op$ = 56
A$ = 64
B$ = 72
C$ = 80
condjump PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 91
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 92
  00006	41 c1 e1 09	 shl	 r9d, 9
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	44 0b 4c 24 50	 or	 r9d, DWORD PTR C$[rsp]
  00012	41 c1 e1 08	 shl	 r9d, 8
  00016	45 0b c8	 or	 r9d, r8d
  00019	41 c1 e1 06	 shl	 r9d, 6
  0001d	41 0b d1	 or	 edx, r9d
  00020	e8 00 00 00 00	 call	 luaK_code
; Line 93
  00025	48 8b cb	 mov	 rcx, rbx
; Line 94
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
; Line 93
  0002d	e9 00 00 00 00	 jmp	 luaK_jump
condjump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT tonumeral
_TEXT	SEGMENT
e$ = 8
v$ = 16
tonumeral PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 40
  00000	8b 41 14	 mov	 eax, DWORD PTR [rcx+20]
  00003	39 41 10	 cmp	 DWORD PTR [rcx+16], eax
  00006	74 03		 je	 SHORT $LN8@tonumeral
$LN12@tonumeral:
; Line 41
  00008	33 c0		 xor	 eax, eax
; Line 51
  0000a	c3		 ret	 0
$LN8@tonumeral:
; Line 42
  0000b	44 8b 01	 mov	 r8d, DWORD PTR [rcx]
  0000e	41 83 e8 05	 sub	 r8d, 5
  00012	74 1d		 je	 SHORT $LN3@tonumeral
  00014	41 ff c8	 dec	 r8d
  00017	75 ef		 jne	 SHORT $LN12@tonumeral
; Line 44
  00019	48 85 d2	 test	 rdx, rdx
  0001c	74 26		 je	 SHORT $LN2@tonumeral
  0001e	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00022	c7 42 08 13 00
	00 00		 mov	 DWORD PTR [rdx+8], 19
; Line 47
  00029	48 89 02	 mov	 QWORD PTR [rdx], rax
; Line 48
  0002c	41 8d 40 01	 lea	 eax, QWORD PTR [r8+1]
; Line 51
  00030	c3		 ret	 0
$LN3@tonumeral:
; Line 47
  00031	48 85 d2	 test	 rdx, rdx
  00034	74 0e		 je	 SHORT $LN2@tonumeral
  00036	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0003a	c7 42 08 03 00
	00 00		 mov	 DWORD PTR [rdx+8], 3
  00041	48 89 02	 mov	 QWORD PTR [rdx], rax
$LN2@tonumeral:
; Line 48
  00044	b8 01 00 00 00	 mov	 eax, 1
; Line 51
  00049	c3		 ret	 0
tonumeral ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_setlist
_TEXT	SEGMENT
fs$ = 48
base$ = 56
nelems$ = 64
tostore$ = 72
luaK_setlist PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 941
$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 942
  0000f	41 ff c8	 dec	 r8d
  00012	8b da		 mov	 ebx, edx
  00014	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00019	48 8b f1	 mov	 rsi, rcx
  0001c	41 f7 e8	 imul	 r8d
  0001f	c1 fa 04	 sar	 edx, 4
; Line 943
  00022	33 c0		 xor	 eax, eax
  00024	8b fa		 mov	 edi, edx
  00026	c1 ef 1f	 shr	 edi, 31
  00029	ff c7		 inc	 edi
  0002b	03 fa		 add	 edi, edx
  0002d	41 83 f9 ff	 cmp	 r9d, -1
  00031	44 0f 44 c8	 cmove	 r9d, eax
; Line 945
  00035	81 ff ff 01 00
	00		 cmp	 edi, 511		; 000001ffH
  0003b	7f 1b		 jg	 SHORT $LN4@luaK_setli
; Line 946
  0003d	41 c1 e1 09	 shl	 r9d, 9
  00041	44 0b cf	 or	 r9d, edi
  00044	41 c1 e1 08	 shl	 r9d, 8
  00048	44 0b cb	 or	 r9d, ebx
  0004b	41 c1 e1 06	 shl	 r9d, 6
  0004f	41 83 c9 2b	 or	 r9d, 43			; 0000002bH
  00053	41 8b d1	 mov	 edx, r9d
  00056	eb 2a		 jmp	 SHORT $LN14@luaK_setli
$LN4@luaK_setli:
; Line 947
  00058	81 ff ff ff ff
	03		 cmp	 edi, 67108863		; 03ffffffH
  0005e	7f 3c		 jg	 SHORT $LN15@luaK_setli
; Line 948
  00060	41 c1 e1 11	 shl	 r9d, 17
  00064	44 0b cb	 or	 r9d, ebx
  00067	41 c1 e1 06	 shl	 r9d, 6
  0006b	41 83 c9 2b	 or	 r9d, 43			; 0000002bH
  0006f	41 8b d1	 mov	 edx, r9d
  00072	e8 00 00 00 00	 call	 luaK_code
; Line 949
  00077	c1 e7 06	 shl	 edi, 6
  0007a	48 8b ce	 mov	 rcx, rsi
  0007d	83 cf 2e	 or	 edi, 46			; 0000002eH
  00080	8b d7		 mov	 edx, edi
$LN14@luaK_setli:
  00082	e8 00 00 00 00	 call	 luaK_code
; Line 953
  00087	fe c3		 inc	 bl
  00089	88 5e 3c	 mov	 BYTE PTR [rsi+60], bl
; Line 954
  0008c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00091	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00096	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009a	5f		 pop	 rdi
  0009b	c3		 ret	 0
$LN15@luaK_setli:
; Line 952
  0009c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@ODGJFGDP@constructor?5too?5long?$AA@
  000a7	e8 00 00 00 00	 call	 luaX_syntaxerror
  000ac	cc		 int	 3
$LN13@luaK_setli:
luaK_setlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_posfix
_TEXT	SEGMENT
fs$ = 64
op$ = 72
e1$ = 80
e2$ = 88
line$ = 96
luaK_posfix PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 886
$LN25:
; Line 887
  00000	83 fa 14	 cmp	 edx, 20
  00003	0f 87 73 01 00
	00		 ja	 $LN21@luaK_posfi
  00009	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  0000e	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00013	57		 push	 rdi
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 886
  00018	48 8b f9	 mov	 rdi, rcx
; Line 887
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00022	48 63 c2	 movsxd	 rax, edx
  00025	44 8b 94 81 00
	00 00 00	 mov	 r10d, DWORD PTR $LN20@luaK_posfi[rcx+rax*4]
  0002d	49 8b d9	 mov	 rbx, r9
  00030	49 8b f0	 mov	 rsi, r8
  00033	4c 03 d1	 add	 r10, rcx
  00036	41 ff e2	 jmp	 r10
$LN9@luaK_posfi:
; Line 890
  00039	48 8b d3	 mov	 rdx, rbx
  0003c	48 8b cf	 mov	 rcx, rdi
  0003f	e8 00 00 00 00	 call	 luaK_dischargevars
; Line 891
  00044	44 8b 46 14	 mov	 r8d, DWORD PTR [rsi+20]
  00048	48 8d 53 14	 lea	 rdx, QWORD PTR [rbx+20]
$LN23@luaK_posfi:
  0004c	48 8b cf	 mov	 rcx, rdi
  0004f	e8 00 00 00 00	 call	 luaK_concat
; Line 892
  00054	0f 10 03	 movups	 xmm0, XMMWORD PTR [rbx]
  00057	0f 11 06	 movups	 XMMWORD PTR [rsi], xmm0
  0005a	f2 0f 10 4b 10	 movsdx	 xmm1, QWORD PTR [rbx+16]
  0005f	f2 0f 11 4e 10	 movsdx	 QWORD PTR [rsi+16], xmm1
; Line 933
  00064	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00069	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0006e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
$LN8@luaK_posfi:
; Line 897
  00074	48 8b d3	 mov	 rdx, rbx
  00077	48 8b cf	 mov	 rcx, rdi
  0007a	e8 00 00 00 00	 call	 luaK_dischargevars
; Line 898
  0007f	44 8b 46 10	 mov	 r8d, DWORD PTR [rsi+16]
  00083	48 8d 53 10	 lea	 rdx, QWORD PTR [rbx+16]
; Line 900
  00087	eb c3		 jmp	 SHORT $LN23@luaK_posfi
$LN7@luaK_posfi:
; Line 903
  00089	48 8b d3	 mov	 rdx, rbx
  0008c	48 8b cf	 mov	 rcx, rdi
  0008f	e8 00 00 00 00	 call	 luaK_exp2val
; Line 904
  00094	83 3b 0c	 cmp	 DWORD PTR [rbx], 12
  00097	75 69		 jne	 SHORT $LN6@luaK_posfi
  00099	4c 8b 07	 mov	 r8, QWORD PTR [rdi]
  0009c	48 63 4b 08	 movsxd	 rcx, DWORD PTR [rbx+8]
  000a0	49 8b 40 38	 mov	 rax, QWORD PTR [r8+56]
  000a4	8b 14 88	 mov	 edx, DWORD PTR [rax+rcx*4]
  000a7	83 e2 3f	 and	 edx, 63			; 0000003fH
  000aa	80 fa 1d	 cmp	 dl, 29
  000ad	75 53		 jne	 SHORT $LN6@luaK_posfi
; Line 906
  000af	83 3e 07	 cmp	 DWORD PTR [rsi], 7
  000b2	75 14		 jne	 SHORT $LN17@luaK_posfi
  000b4	8b 4e 08	 mov	 ecx, DWORD PTR [rsi+8]
  000b7	0f ba e1 08	 bt	 ecx, 8
  000bb	72 0b		 jb	 SHORT $LN17@luaK_posfi
  000bd	0f b6 47 3a	 movzx	 eax, BYTE PTR [rdi+58]
  000c1	3b c8		 cmp	 ecx, eax
  000c3	7c 03		 jl	 SHORT $LN17@luaK_posfi
  000c5	fe 4f 3c	 dec	 BYTE PTR [rdi+60]
$LN17@luaK_posfi:
; Line 907
  000c8	48 63 4b 08	 movsxd	 rcx, DWORD PTR [rbx+8]
  000cc	49 8b 40 38	 mov	 rax, QWORD PTR [r8+56]
  000d0	48 8d 14 88	 lea	 rdx, QWORD PTR [rax+rcx*4]
  000d4	8b 46 08	 mov	 eax, DWORD PTR [rsi+8]
  000d7	8b 0a		 mov	 ecx, DWORD PTR [rdx]
  000d9	c1 e0 17	 shl	 eax, 23
  000dc	81 e1 ff ff 7f
	00		 and	 ecx, 8388607		; 007fffffH
  000e2	0b c8		 or	 ecx, eax
  000e4	89 0a		 mov	 DWORD PTR [rdx], ecx
; Line 908
  000e6	c7 06 0c 00 00
	00		 mov	 DWORD PTR [rsi], 12
  000ec	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
  000ef	89 46 08	 mov	 DWORD PTR [rsi+8], eax
; Line 933
  000f2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f7	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000fc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00100	5f		 pop	 rdi
  00101	c3		 ret	 0
$LN6@luaK_posfi:
; Line 911
  00102	48 8b d3	 mov	 rdx, rbx
  00105	48 8b cf	 mov	 rcx, rdi
  00108	e8 00 00 00 00	 call	 luaK_exp2nextreg
; Line 912
  0010d	4c 8b cb	 mov	 r9, rbx
  00110	4c 8b c6	 mov	 r8, rsi
  00113	ba 1d 00 00 00	 mov	 edx, 29
  00118	48 8b cf	 mov	 rcx, rdi
; Line 933
  0011b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00120	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00125	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00129	5f		 pop	 rdi
; Line 912
  0012a	e9 00 00 00 00	 jmp	 codeexpval
$LN4@luaK_posfi:
; Line 920
  0012f	83 c2 0d	 add	 edx, 13
  00132	48 8b cf	 mov	 rcx, rdi
; Line 933
  00135	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0013a	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0013f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00143	5f		 pop	 rdi
; Line 920
  00144	e9 00 00 00 00	 jmp	 codeexpval
$LN3@luaK_posfi:
; Line 924
  00149	4d 8b c8	 mov	 r9, r8
  0014c	83 c2 12	 add	 edx, 18
  0014f	41 b8 01 00 00
	00		 mov	 r8d, 1
; Line 925
  00155	eb 09		 jmp	 SHORT $LN22@luaK_posfi
$LN2@luaK_posfi:
; Line 928
  00157	83 c2 0f	 add	 edx, 15
  0015a	4d 8b c8	 mov	 r9, r8
  0015d	45 33 c0	 xor	 r8d, r8d
$LN22@luaK_posfi:
  00160	48 8b cf	 mov	 rcx, rdi
  00163	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00168	e8 00 00 00 00	 call	 codecomp
$LN1@luaK_posfi:
; Line 933
  0016d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00172	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00177	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0017b	5f		 pop	 rdi
$LN21@luaK_posfi:
  0017c	c3		 ret	 0
  0017d	0f 1f 00	 npad	 3
$LN20@luaK_posfi:
  00180	00 00 00 00	 DD	 $LN4@luaK_posfi
  00184	00 00 00 00	 DD	 $LN4@luaK_posfi
  00188	00 00 00 00	 DD	 $LN4@luaK_posfi
  0018c	00 00 00 00	 DD	 $LN4@luaK_posfi
  00190	00 00 00 00	 DD	 $LN4@luaK_posfi
  00194	00 00 00 00	 DD	 $LN4@luaK_posfi
  00198	00 00 00 00	 DD	 $LN4@luaK_posfi
  0019c	00 00 00 00	 DD	 $LN4@luaK_posfi
  001a0	00 00 00 00	 DD	 $LN4@luaK_posfi
  001a4	00 00 00 00	 DD	 $LN4@luaK_posfi
  001a8	00 00 00 00	 DD	 $LN4@luaK_posfi
  001ac	00 00 00 00	 DD	 $LN4@luaK_posfi
  001b0	00 00 00 00	 DD	 $LN7@luaK_posfi
  001b4	00 00 00 00	 DD	 $LN3@luaK_posfi
  001b8	00 00 00 00	 DD	 $LN3@luaK_posfi
  001bc	00 00 00 00	 DD	 $LN3@luaK_posfi
  001c0	00 00 00 00	 DD	 $LN2@luaK_posfi
  001c4	00 00 00 00	 DD	 $LN2@luaK_posfi
  001c8	00 00 00 00	 DD	 $LN2@luaK_posfi
  001cc	00 00 00 00	 DD	 $LN9@luaK_posfi
  001d0	00 00 00 00	 DD	 $LN8@luaK_posfi
luaK_posfix ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_infix
_TEXT	SEGMENT
fs$ = 8
op$ = 16
v$ = 24
luaK_infix PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 855
  00000	4c 8b c9	 mov	 r9, rcx
; Line 856
  00003	85 d2		 test	 edx, edx
  00005	78 45		 js	 SHORT $LN1@luaK_infix
  00007	83 fa 0b	 cmp	 edx, 11
  0000a	7e 27		 jle	 SHORT $LN3@luaK_infix
  0000c	83 fa 0c	 cmp	 edx, 12
  0000f	74 1a		 je	 SHORT $LN4@luaK_infix
  00011	83 fa 13	 cmp	 edx, 19
  00014	74 0d		 je	 SHORT $LN6@luaK_infix
  00016	83 fa 14	 cmp	 edx, 20
  00019	75 31		 jne	 SHORT $LN1@luaK_infix
; Line 862
  0001b	49 8b d0	 mov	 rdx, r8
  0001e	e9 00 00 00 00	 jmp	 luaK_goiffalse
$LN6@luaK_infix:
; Line 858
  00023	49 8b d0	 mov	 rdx, r8
  00026	e9 00 00 00 00	 jmp	 luaK_goiftrue
$LN4@luaK_infix:
; Line 866
  0002b	49 8b d0	 mov	 rdx, r8
  0002e	e9 00 00 00 00	 jmp	 luaK_exp2nextreg
$LN3@luaK_infix:
; Line 874
  00033	41 8b 40 14	 mov	 eax, DWORD PTR [r8+20]
  00037	41 39 40 10	 cmp	 DWORD PTR [r8+16], eax
  0003b	75 0c		 jne	 SHORT $LN21@luaK_infix
  0003d	41 8b 08	 mov	 ecx, DWORD PTR [r8]
  00040	83 e9 05	 sub	 ecx, 5
  00043	74 0f		 je	 SHORT $LN7@luaK_infix
  00045	ff c9		 dec	 ecx
  00047	74 0b		 je	 SHORT $LN7@luaK_infix
$LN21@luaK_infix:
  00049	49 8b c9	 mov	 rcx, r9
$LN1@luaK_infix:
; Line 878
  0004c	49 8b d0	 mov	 rdx, r8
  0004f	e9 00 00 00 00	 jmp	 luaK_exp2RK
$LN7@luaK_infix:
; Line 882
  00054	c3		 ret	 0
luaK_infix ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_prefix
_TEXT	SEGMENT
e2$ = 48
fs$ = 96
op$ = 104
e$ = 112
line$ = 120
luaK_prefix PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 841
$LN9:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H
; Line 843
  00004	48 c7 44 24 40
	ff ff ff ff	 mov	 QWORD PTR e2$[rsp+16], -1
  0000d	c7 44 24 30 06
	00 00 00	 mov	 DWORD PTR e2$[rsp], 6
  00015	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR e2$[rsp+8], 0
; Line 844
  0001e	85 d2		 test	 edx, edx
  00020	78 21		 js	 SHORT $LN1@luaK_prefi
  00022	83 fa 01	 cmp	 edx, 1
  00025	7e 0a		 jle	 SHORT $LN3@luaK_prefi
  00027	83 fa 02	 cmp	 edx, 2
  0002a	74 1c		 je	 SHORT $LN2@luaK_prefi
  0002c	83 fa 03	 cmp	 edx, 3
  0002f	75 12		 jne	 SHORT $LN1@luaK_prefi
$LN3@luaK_prefi:
; Line 846
  00031	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00036	4c 8d 4c 24 30	 lea	 r9, QWORD PTR e2$[rsp]
  0003b	83 c2 19	 add	 edx, 25
  0003e	e8 00 00 00 00	 call	 codeexpval
$LN1@luaK_prefi:
; Line 852
  00043	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00047	c3		 ret	 0
$LN2@luaK_prefi:
; Line 849
  00048	49 8b d0	 mov	 rdx, r8
; Line 852
  0004b	48 83 c4 58	 add	 rsp, 88			; 00000058H
; Line 849
  0004f	e9 00 00 00 00	 jmp	 codenot
luaK_prefix ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_getlabel
_TEXT	SEGMENT
fs$ = 8
luaK_getlabel PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 112
  00000	8b 41 20	 mov	 eax, DWORD PTR [rcx+32]
  00003	89 41 24	 mov	 DWORD PTR [rcx+36], eax
; Line 114
  00006	c3		 ret	 0
luaK_getlabel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_concat
_TEXT	SEGMENT
fs$ = 48
l1$ = 56
l2$ = 64
luaK_concat PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 215
$LN24:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b d1	 mov	 r10, rcx
; Line 216
  00007	41 83 f8 ff	 cmp	 r8d, -1
  0000b	74 77		 je	 SHORT $LN14@luaK_conca
; Line 217
  0000d	44 8b 0a	 mov	 r9d, DWORD PTR [rdx]
  00010	41 83 f9 ff	 cmp	 r9d, -1
  00014	75 08		 jne	 SHORT $LN4@luaK_conca
; Line 218
  00016	44 89 02	 mov	 DWORD PTR [rdx], r8d
; Line 226
  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
$LN4@luaK_conca:
; Line 222
  0001e	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00021	48 8b 50 38	 mov	 rdx, QWORD PTR [rax+56]
  00025	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL2@luaK_conca:
  00030	49 63 c1	 movsxd	 rax, r9d
  00033	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  00036	c1 e8 0e	 shr	 eax, 14
  00039	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
  0003e	83 f8 ff	 cmp	 eax, -1
  00041	74 10		 je	 SHORT $LN20@luaK_conca
  00043	41 8d 49 01	 lea	 ecx, DWORD PTR [r9+1]
  00047	03 c8		 add	 ecx, eax
  00049	83 f9 ff	 cmp	 ecx, -1
  0004c	74 05		 je	 SHORT $LN20@luaK_conca
; Line 223
  0004e	44 8b c9	 mov	 r9d, ecx
  00051	eb dd		 jmp	 SHORT $LL2@luaK_conca
$LN20@luaK_conca:
; Line 224
  00053	49 63 c1	 movsxd	 rax, r9d
  00056	45 2b c1	 sub	 r8d, r9d
  00059	48 8d 0c 82	 lea	 rcx, QWORD PTR [rdx+rax*4]
  0005d	41 8d 40 ff	 lea	 eax, DWORD PTR [r8-1]
  00061	99		 cdq
  00062	33 c2		 xor	 eax, edx
  00064	2b c2		 sub	 eax, edx
  00066	3d ff ff 01 00	 cmp	 eax, 131071		; 0001ffffH
  0006b	7f 1c		 jg	 SHORT $LN22@luaK_conca
  0006d	81 21 ff 3f 00
	00		 and	 DWORD PTR [rcx], 16383	; 00003fffH
  00073	41 8d 80 fe ff
	01 00		 lea	 eax, DWORD PTR [r8+131070]
  0007a	c1 e0 0e	 shl	 eax, 14
  0007d	25 00 c0 ff ff	 and	 eax, -16384		; ffffc000H
  00082	09 01		 or	 DWORD PTR [rcx], eax
$LN14@luaK_conca:
; Line 226
  00084	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00088	c3		 ret	 0
$LN22@luaK_conca:
; Line 224
  00089	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@
  00094	e8 00 00 00 00	 call	 luaX_syntaxerror
  00099	cc		 int	 3
$LN21@luaK_conca:
luaK_concat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_patchclose
_TEXT	SEGMENT
fs$ = 8
list$ = 16
level$ = 24
luaK_patchclose PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 197
  00000	41 ff c0	 inc	 r8d
  00003	4c 8b d9	 mov	 r11, rcx
; Line 198
  00006	83 fa ff	 cmp	 edx, -1
  00009	74 4f		 je	 SHORT $LN1@luaK_patch
  0000b	45 0f b6 d0	 movzx	 r10d, r8b
  0000f	41 c1 e2 06	 shl	 r10d, 6
  00013	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL2@luaK_patch:
; Line 199
  00020	49 8b 03	 mov	 rax, QWORD PTR [r11]
  00023	4c 63 c2	 movsxd	 r8, edx
  00026	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0002a	42 8b 04 81	 mov	 eax, DWORD PTR [rcx+r8*4]
  0002e	4e 8d 0c 81	 lea	 r9, QWORD PTR [rcx+r8*4]
  00032	8b c8		 mov	 ecx, eax
  00034	c1 e9 0e	 shr	 ecx, 14
  00037	81 e9 ff ff 01
	00		 sub	 ecx, 131071		; 0001ffffH
  0003d	83 f9 ff	 cmp	 ecx, -1
  00040	75 04		 jne	 SHORT $LN6@luaK_patch
  00042	0b d1		 or	 edx, ecx
  00044	eb 04		 jmp	 SHORT $LN5@luaK_patch
$LN6@luaK_patch:
  00046	ff c2		 inc	 edx
  00048	03 d1		 add	 edx, ecx
$LN5@luaK_patch:
; Line 203
  0004a	25 3f c0 ff ff	 and	 eax, -16321		; ffffc03fH
  0004f	41 0b c2	 or	 eax, r10d
  00052	41 89 01	 mov	 DWORD PTR [r9], eax
  00055	83 fa ff	 cmp	 edx, -1
  00058	75 c6		 jne	 SHORT $LL2@luaK_patch
$LN1@luaK_patch:
; Line 206
  0005a	c3		 ret	 0
luaK_patchclose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_patchtohere
_TEXT	SEGMENT
fs$ = 8
list$ = 16
luaK_patchtohere PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 210
  00000	8b 41 20	 mov	 eax, DWORD PTR [rcx+32]
  00003	44 8b c2	 mov	 r8d, edx
; Line 211
  00006	48 8d 51 28	 lea	 rdx, QWORD PTR [rcx+40]
  0000a	89 41 24	 mov	 DWORD PTR [rcx+36], eax
  0000d	e9 00 00 00 00	 jmp	 luaK_concat
luaK_patchtohere ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_patchlist
_TEXT	SEGMENT
fs$ = 64
list$ = 72
target$ = 80
luaK_patchlist PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 186
$LN10:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	8b c2		 mov	 eax, edx
; Line 187
  00006	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  00009	44 3b c2	 cmp	 r8d, edx
  0000c	75 13		 jne	 SHORT $LN2@luaK_patch
; Line 188
  0000e	89 51 24	 mov	 DWORD PTR [rcx+36], edx
  00011	48 8d 51 28	 lea	 rdx, QWORD PTR [rcx+40]
  00015	44 8b c0	 mov	 r8d, eax
; Line 193
  00018	48 83 c4 38	 add	 rsp, 56			; 00000038H
; Line 188
  0001c	e9 00 00 00 00	 jmp	 luaK_concat
$LN2@luaK_patch:
; Line 191
  00021	41 b9 ff 00 00
	00		 mov	 r9d, 255		; 000000ffH
  00027	8b d0		 mov	 edx, eax
  00029	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  0002e	e8 00 00 00 00	 call	 patchlistaux
; Line 193
  00033	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00037	c3		 ret	 0
luaK_patchlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_ret
_TEXT	SEGMENT
fs$ = 8
first$ = 16
nret$ = 24
luaK_ret PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 87
  00000	c1 e2 06	 shl	 edx, 6
  00003	41 ff c0	 inc	 r8d
  00006	41 c1 e0 17	 shl	 r8d, 23
  0000a	41 0b d0	 or	 edx, r8d
  0000d	83 ca 26	 or	 edx, 38			; 00000026H
  00010	e9 00 00 00 00	 jmp	 luaK_code
luaK_ret ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_jump
_TEXT	SEGMENT
fs$ = 48
luaK_jump PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 76
$LN29:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 77
  0000a	8b 59 28	 mov	 ebx, DWORD PTR [rcx+40]
; Line 80
  0000d	ba 1e 80 ff 7f	 mov	 edx, 2147450910		; 7fff801eH
  00012	48 8b f9	 mov	 rdi, rcx
  00015	c7 41 28 ff ff
	ff ff		 mov	 DWORD PTR [rcx+40], -1
  0001c	e8 00 00 00 00	 call	 luaK_code
  00021	44 8b c8	 mov	 r9d, eax
; Line 81
  00024	83 fb ff	 cmp	 ebx, -1
  00027	74 79		 je	 SHORT $LN18@luaK_jump
  00029	83 f8 ff	 cmp	 eax, -1
  0002c	75 10		 jne	 SHORT $LN8@luaK_jump
  0002e	44 8b cb	 mov	 r9d, ebx
; Line 82
  00031	8b c3		 mov	 eax, ebx
; Line 83
  00033	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
; Line 81
$LN8@luaK_jump:
  0003e	8b c8		 mov	 ecx, eax
  00040	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00043	4c 8b 40 38	 mov	 r8, QWORD PTR [rax+56]
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL6@luaK_jump:
  00050	48 63 c1	 movsxd	 rax, ecx
  00053	41 8b 04 80	 mov	 eax, DWORD PTR [r8+rax*4]
  00057	c1 e8 0e	 shr	 eax, 14
  0005a	2d ff ff 01 00	 sub	 eax, 131071		; 0001ffffH
  0005f	83 f8 ff	 cmp	 eax, -1
  00062	74 0e		 je	 SHORT $LN25@luaK_jump
  00064	8d 51 01	 lea	 edx, DWORD PTR [rcx+1]
  00067	03 d0		 add	 edx, eax
  00069	83 fa ff	 cmp	 edx, -1
  0006c	74 04		 je	 SHORT $LN25@luaK_jump
  0006e	8b ca		 mov	 ecx, edx
  00070	eb de		 jmp	 SHORT $LL6@luaK_jump
$LN25@luaK_jump:
  00072	48 63 c1	 movsxd	 rax, ecx
  00075	2b d9		 sub	 ebx, ecx
  00077	4d 8d 04 80	 lea	 r8, QWORD PTR [r8+rax*4]
  0007b	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  0007e	99		 cdq
  0007f	33 c2		 xor	 eax, edx
  00081	2b c2		 sub	 eax, edx
  00083	3d ff ff 01 00	 cmp	 eax, 131071		; 0001ffffH
  00088	7f 26		 jg	 SHORT $LN27@luaK_jump
  0008a	41 81 20 ff 3f
	00 00		 and	 DWORD PTR [r8], 16383	; 00003fffH
  00091	8d 83 fe ff 01
	00		 lea	 eax, DWORD PTR [rbx+131070]
  00097	c1 e0 0e	 shl	 eax, 14
  0009a	25 00 c0 ff ff	 and	 eax, -16384		; ffffc000H
  0009f	41 09 00	 or	 DWORD PTR [r8], eax
$LN18@luaK_jump:
; Line 82
  000a2	41 8b c1	 mov	 eax, r9d
; Line 83
  000a5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000aa	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ae	5f		 pop	 rdi
  000af	c3		 ret	 0
$LN27@luaK_jump:
; Line 81
  000b0	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@BDOLDOFI@control?5structure?5too?5long?$AA@
  000bb	e8 00 00 00 00	 call	 luaX_syntaxerror
  000c0	cc		 int	 3
$LN26@luaK_jump:
luaK_jump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_setoneret
_TEXT	SEGMENT
fs$ = 8
e$ = 16
luaK_setoneret PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 396
  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	4c 8b ca	 mov	 r9, rdx
  00005	83 f8 0d	 cmp	 eax, 13
  00008	75 1f		 jne	 SHORT $LN3@luaK_seton
; Line 398
  0000a	4c 63 42 08	 movsxd	 r8, DWORD PTR [rdx+8]
  0000e	c7 02 07 00 00
	00		 mov	 DWORD PTR [rdx], 7
  00014	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00017	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0001b	42 8b 04 81	 mov	 eax, DWORD PTR [rcx+r8*4]
  0001f	c1 e8 06	 shr	 eax, 6
  00022	0f b6 c0	 movzx	 eax, al
  00025	89 42 08	 mov	 DWORD PTR [rdx+8], eax
; Line 404
  00028	c3		 ret	 0
$LN3@luaK_seton:
; Line 400
  00029	83 f8 0e	 cmp	 eax, 14
  0002c	75 21		 jne	 SHORT $LN1@luaK_seton
; Line 401
  0002e	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00031	48 63 52 08	 movsxd	 rdx, DWORD PTR [rdx+8]
  00035	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00039	8b 04 91	 mov	 eax, DWORD PTR [rcx+rdx*4]
  0003c	25 ff ff 7f 00	 and	 eax, 8388607		; 007fffffH
  00041	0f ba e8 18	 bts	 eax, 24
  00045	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax
; Line 402
  00048	41 c7 01 0c 00
	00 00		 mov	 DWORD PTR [r9], 12
$LN1@luaK_seton:
; Line 404
  0004f	c3		 ret	 0
luaK_setoneret ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_setreturns
_TEXT	SEGMENT
fs$ = 48
e$ = 56
nresults$ = 64
luaK_setreturns PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 383
$LN17:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 384
  00004	8b 02		 mov	 eax, DWORD PTR [rdx]
  00006	45 8b d8	 mov	 r11d, r8d
  00009	4c 8b d2	 mov	 r10, rdx
  0000c	4c 8b c9	 mov	 r9, rcx
  0000f	83 f8 0d	 cmp	 eax, 13
  00012	75 22		 jne	 SHORT $LN3@luaK_setre
; Line 385
  00014	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00017	48 63 52 08	 movsxd	 rdx, DWORD PTR [rdx+8]
  0001b	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0001f	41 8d 40 01	 lea	 eax, DWORD PTR [r8+1]
  00023	c1 e0 0e	 shl	 eax, 14
  00026	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00029	25 00 c0 7f 00	 and	 eax, 8372224		; 007fc000H
  0002e	31 04 91	 xor	 DWORD PTR [rcx+rdx*4], eax
; Line 392
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
$LN3@luaK_setre:
; Line 387
  00036	83 f8 0e	 cmp	 eax, 14
  00039	75 68		 jne	 SHORT $LN6@luaK_setre
; Line 388
  0003b	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0003e	48 63 52 08	 movsxd	 rdx, DWORD PTR [rdx+8]
  00042	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00046	8b 04 91	 mov	 eax, DWORD PTR [rcx+rdx*4]
  00049	4c 8d 04 91	 lea	 r8, QWORD PTR [rcx+rdx*4]
  0004d	25 ff ff 7f 00	 and	 eax, 8388607		; 007fffffH
  00052	41 8d 4b 01	 lea	 ecx, DWORD PTR [r11+1]
  00056	c1 e1 17	 shl	 ecx, 23
  00059	33 c8		 xor	 ecx, eax
  0005b	41 89 08	 mov	 DWORD PTR [r8], ecx
; Line 389
  0005e	49 8b 01	 mov	 rax, QWORD PTR [r9]
  00061	49 63 52 08	 movsxd	 rdx, DWORD PTR [r10+8]
  00065	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00069	8b 04 91	 mov	 eax, DWORD PTR [rcx+rdx*4]
  0006c	4c 8d 04 91	 lea	 r8, QWORD PTR [rcx+rdx*4]
  00070	41 0f b6 49 3c	 movzx	 ecx, BYTE PTR [r9+60]
  00075	25 3f c0 ff ff	 and	 eax, -16321		; ffffc03fH
  0007a	c1 e1 06	 shl	 ecx, 6
  0007d	0b c8		 or	 ecx, eax
  0007f	41 89 08	 mov	 DWORD PTR [r8], ecx
; Line 390
  00082	49 8b 11	 mov	 rdx, QWORD PTR [r9]
  00085	41 0f b6 49 3c	 movzx	 ecx, BYTE PTR [r9+60]
  0008a	0f b6 42 0c	 movzx	 eax, BYTE PTR [rdx+12]
  0008e	ff c1		 inc	 ecx
  00090	3b c8		 cmp	 ecx, eax
  00092	7e 0b		 jle	 SHORT $LN9@luaK_setre
  00094	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  0009a	7d 0c		 jge	 SHORT $LN15@luaK_setre
  0009c	88 4a 0c	 mov	 BYTE PTR [rdx+12], cl
$LN9@luaK_setre:
  0009f	41 fe 41 3c	 inc	 BYTE PTR [r9+60]
$LN6@luaK_setre:
; Line 392
  000a3	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a7	c3		 ret	 0
$LN15@luaK_setre:
; Line 390
  000a8	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  000b3	e8 00 00 00 00	 call	 luaX_syntaxerror
  000b8	cc		 int	 3
$LN14@luaK_setre:
luaK_setreturns ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_storevar
_TEXT	SEGMENT
fs$ = 48
var$ = 56
ex$ = 64
luaK_storevar PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 592
$LN26:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000a	41 56		 push	 r14
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00010	48 8b f9	 mov	 rdi, rcx
; Line 593
  00013	8b 0a		 mov	 ecx, DWORD PTR [rdx]
  00015	49 8b f0	 mov	 rsi, r8
  00018	4c 8b f2	 mov	 r14, rdx
  0001b	83 e9 08	 sub	 ecx, 8
  0001e	0f 84 9c 00 00
	00		 je	 $LN4@luaK_store
  00024	ff c9		 dec	 ecx
  00026	74 4c		 je	 SHORT $LN3@luaK_store
  00028	ff c9		 dec	 ecx
  0002a	75 6a		 jne	 SHORT $LN5@luaK_store
; Line 605
  0002c	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00031	bb 08 00 00 00	 mov	 ebx, 8
  00036	b8 0a 00 00 00	 mov	 eax, 10
  0003b	38 5a 0b	 cmp	 BYTE PTR [rdx+11], bl
; Line 606
  0003e	49 8b d0	 mov	 rdx, r8
  00041	48 8b cf	 mov	 rcx, rdi
  00044	0f 44 d8	 cmove	 ebx, eax
  00047	e8 00 00 00 00	 call	 luaK_exp2RK
  0004c	41 0f bf 56 08	 movsx	 edx, WORD PTR [r14+8]
; Line 607
  00051	c1 e2 09	 shl	 edx, 9
  00054	48 8b cf	 mov	 rcx, rdi
  00057	0b d0		 or	 edx, eax
  00059	41 0f b6 46 0a	 movzx	 eax, BYTE PTR [r14+10]
  0005e	c1 e2 08	 shl	 edx, 8
  00061	0b d0		 or	 edx, eax
  00063	c1 e2 06	 shl	 edx, 6
  00066	0b d3		 or	 edx, ebx
  00068	e8 00 00 00 00	 call	 luaK_code
  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
; Line 608
  00072	eb 22		 jmp	 SHORT $LN5@luaK_store
$LN3@luaK_store:
; Line 600
  00074	49 8b d0	 mov	 rdx, r8
  00077	48 8b cf	 mov	 rcx, rdi
  0007a	e8 00 00 00 00	 call	 luaK_exp2anyreg
; Line 601
  0007f	41 8b 56 08	 mov	 edx, DWORD PTR [r14+8]
  00083	48 8b cf	 mov	 rcx, rdi
  00086	c1 e2 11	 shl	 edx, 17
  00089	0b d0		 or	 edx, eax
  0008b	c1 e2 06	 shl	 edx, 6
  0008e	83 ca 09	 or	 edx, 9
  00091	e8 00 00 00 00	 call	 luaK_code
$LN5@luaK_store:
; Line 615
  00096	83 3e 07	 cmp	 DWORD PTR [rsi], 7
  00099	75 4f		 jne	 SHORT $LN22@luaK_store
  0009b	8b 4e 08	 mov	 ecx, DWORD PTR [rsi+8]
  0009e	0f ba e1 08	 bt	 ecx, 8
  000a2	72 46		 jb	 SHORT $LN22@luaK_store
  000a4	0f b6 47 3a	 movzx	 eax, BYTE PTR [rdi+58]
  000a8	3b c8		 cmp	 ecx, eax
  000aa	7c 3e		 jl	 SHORT $LN22@luaK_store
  000ac	fe 4f 3c	 dec	 BYTE PTR [rdi+60]
; Line 616
  000af	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000b4	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000b9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bd	41 5e		 pop	 r14
  000bf	c3		 ret	 0
$LN4@luaK_store:
; Line 595
  000c0	41 83 38 07	 cmp	 DWORD PTR [r8], 7
  000c4	75 15		 jne	 SHORT $LN12@luaK_store
  000c6	41 8b 48 08	 mov	 ecx, DWORD PTR [r8+8]
  000ca	0f ba e1 08	 bt	 ecx, 8
  000ce	72 0b		 jb	 SHORT $LN12@luaK_store
  000d0	0f b6 47 3a	 movzx	 eax, BYTE PTR [rdi+58]
  000d4	3b c8		 cmp	 ecx, eax
  000d6	7c 03		 jl	 SHORT $LN12@luaK_store
  000d8	fe 4f 3c	 dec	 BYTE PTR [rdi+60]
$LN12@luaK_store:
; Line 596
  000db	44 8b 42 08	 mov	 r8d, DWORD PTR [rdx+8]
  000df	48 8b cf	 mov	 rcx, rdi
  000e2	48 8b d6	 mov	 rdx, rsi
  000e5	e8 00 00 00 00	 call	 exp2reg
; Line 615
$LN22@luaK_store:
; Line 616
  000ea	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000ef	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000f4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f8	41 5e		 pop	 r14
  000fa	c3		 ret	 0
luaK_storevar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_goiffalse
_TEXT	SEGMENT
fs$ = 48
e$ = 56
luaK_goiffalse PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 679
$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx
; Line 681
  00010	e8 00 00 00 00	 call	 luaK_dischargevars
; Line 682
  00015	44 8b 03	 mov	 r8d, DWORD PTR [rbx]
  00018	41 ff c8	 dec	 r8d
  0001b	74 24		 je	 SHORT $LN2@luaK_goiff
  0001d	41 83 e8 02	 sub	 r8d, 2
  00021	74 1e		 je	 SHORT $LN2@luaK_goiff
  00023	41 83 f8 08	 cmp	 r8d, 8
  00027	74 13		 je	 SHORT $LN3@luaK_goiff
; Line 692
  00029	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002f	48 8b d3	 mov	 rdx, rbx
  00032	48 8b cf	 mov	 rcx, rdi
  00035	e8 00 00 00 00	 call	 jumponcond
; Line 693
  0003a	eb 08		 jmp	 SHORT $LN4@luaK_goiff
$LN3@luaK_goiff:
; Line 684
  0003c	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
; Line 685
  0003f	eb 03		 jmp	 SHORT $LN4@luaK_goiff
$LN2@luaK_goiff:
; Line 688
  00041	83 c8 ff	 or	 eax, -1
$LN4@luaK_goiff:
; Line 696
  00044	48 8d 53 10	 lea	 rdx, QWORD PTR [rbx+16]
  00048	44 8b c0	 mov	 r8d, eax
  0004b	48 8b cf	 mov	 rcx, rdi
  0004e	e8 00 00 00 00	 call	 luaK_concat
; Line 697
  00053	8b 47 20	 mov	 eax, DWORD PTR [rdi+32]
  00056	44 8b 43 14	 mov	 r8d, DWORD PTR [rbx+20]
  0005a	48 8d 57 28	 lea	 rdx, QWORD PTR [rdi+40]
  0005e	48 8b cf	 mov	 rcx, rdi
  00061	89 47 24	 mov	 DWORD PTR [rdi+36], eax
  00064	e8 00 00 00 00	 call	 luaK_concat
; Line 698
  00069	c7 43 14 ff ff
	ff ff		 mov	 DWORD PTR [rbx+20], -1
; Line 699
  00070	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5f		 pop	 rdi
  0007a	c3		 ret	 0
luaK_goiffalse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_goiftrue
_TEXT	SEGMENT
fs$ = 48
e$ = 56
luaK_goiftrue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 655
$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx
; Line 657
  00010	e8 00 00 00 00	 call	 luaK_dischargevars
; Line 658
  00015	8b 03		 mov	 eax, DWORD PTR [rbx]
  00017	83 f8 02	 cmp	 eax, 2
  0001a	74 2f		 je	 SHORT $LN2@luaK_goift
  0001c	83 f8 03	 cmp	 eax, 3
  0001f	7e 1a		 jle	 SHORT $LN1@luaK_goift
  00021	83 f8 06	 cmp	 eax, 6
  00024	7e 25		 jle	 SHORT $LN2@luaK_goift
  00026	83 f8 0b	 cmp	 eax, 11
  00029	75 10		 jne	 SHORT $LN1@luaK_goift
; Line 660
  0002b	48 8b d3	 mov	 rdx, rbx
  0002e	48 8b cf	 mov	 rcx, rdi
  00031	e8 00 00 00 00	 call	 invertjump
; Line 661
  00036	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
; Line 662
  00039	eb 13		 jmp	 SHORT $LN4@luaK_goift
$LN1@luaK_goift:
; Line 669
  0003b	45 33 c0	 xor	 r8d, r8d
  0003e	48 8b d3	 mov	 rdx, rbx
  00041	48 8b cf	 mov	 rcx, rdi
  00044	e8 00 00 00 00	 call	 jumponcond
; Line 670
  00049	eb 03		 jmp	 SHORT $LN4@luaK_goift
$LN2@luaK_goift:
; Line 665
  0004b	83 c8 ff	 or	 eax, -1
$LN4@luaK_goift:
; Line 673
  0004e	48 8d 53 14	 lea	 rdx, QWORD PTR [rbx+20]
  00052	44 8b c0	 mov	 r8d, eax
  00055	48 8b cf	 mov	 rcx, rdi
  00058	e8 00 00 00 00	 call	 luaK_concat
; Line 674
  0005d	8b 47 20	 mov	 eax, DWORD PTR [rdi+32]
  00060	44 8b 43 10	 mov	 r8d, DWORD PTR [rbx+16]
  00064	48 8d 57 28	 lea	 rdx, QWORD PTR [rdi+40]
  00068	48 8b cf	 mov	 rcx, rdi
  0006b	89 47 24	 mov	 DWORD PTR [rdi+36], eax
  0006e	e8 00 00 00 00	 call	 luaK_concat
; Line 675
  00073	c7 43 10 ff ff
	ff ff		 mov	 DWORD PTR [rbx+16], -1
; Line 676
  0007a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
luaK_goiftrue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_indexed
_TEXT	SEGMENT
fs$ = 48
t$ = 56
k$ = 64
luaK_indexed PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 737
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 739
  00006	0f b6 42 08	 movzx	 eax, BYTE PTR [rdx+8]
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	88 42 0a	 mov	 BYTE PTR [rdx+10], al
; Line 740
  00010	49 8b d0	 mov	 rdx, r8
  00013	e8 00 00 00 00	 call	 luaK_exp2RK
; Line 742
  00018	83 3b 09	 cmp	 DWORD PTR [rbx], 9
; Line 743
  0001b	c7 03 0a 00 00
	00		 mov	 DWORD PTR [rbx], 10
  00021	66 89 43 08	 mov	 WORD PTR [rbx+8], ax
  00025	0f 94 c0	 sete	 al
  00028	04 08		 add	 al, 8
  0002a	88 43 0b	 mov	 BYTE PTR [rbx+11], al
; Line 744
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5b		 pop	 rbx
  00032	c3		 ret	 0
luaK_indexed ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_self
_TEXT	SEGMENT
fs$ = 48
e$ = 56
key$ = 64
luaK_self PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 619
$LN33:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b e8	 mov	 rbp, r8
  00017	48 8b fa	 mov	 rdi, rdx
  0001a	48 8b d9	 mov	 rbx, rcx
; Line 621
  0001d	e8 00 00 00 00	 call	 luaK_dischargevars
  00022	83 3f 07	 cmp	 DWORD PTR [rdi], 7
  00025	75 22		 jne	 SHORT $LN3@luaK_self
  00027	8b 47 14	 mov	 eax, DWORD PTR [rdi+20]
  0002a	39 47 10	 cmp	 DWORD PTR [rdi+16], eax
  0002d	74 25		 je	 SHORT $LN6@luaK_self
  0002f	44 8b 47 08	 mov	 r8d, DWORD PTR [rdi+8]
  00033	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  00037	44 3b c0	 cmp	 r8d, eax
  0003a	7c 0d		 jl	 SHORT $LN3@luaK_self
  0003c	48 8b d7	 mov	 rdx, rdi
  0003f	48 8b cb	 mov	 rcx, rbx
  00042	e8 00 00 00 00	 call	 exp2reg
  00047	eb 0b		 jmp	 SHORT $LN6@luaK_self
$LN3@luaK_self:
  00049	48 8b d7	 mov	 rdx, rdi
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	e8 00 00 00 00	 call	 luaK_exp2nextreg
$LN6@luaK_self:
; Line 623
  00054	83 3f 07	 cmp	 DWORD PTR [rdi], 7
  00057	8b 77 08	 mov	 esi, DWORD PTR [rdi+8]
  0005a	75 11		 jne	 SHORT $LN11@luaK_self
  0005c	0f ba e6 08	 bt	 esi, 8
  00060	72 0b		 jb	 SHORT $LN11@luaK_self
  00062	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  00066	3b f0		 cmp	 esi, eax
  00068	7c 03		 jl	 SHORT $LN11@luaK_self
  0006a	fe 4b 3c	 dec	 BYTE PTR [rbx+60]
$LN11@luaK_self:
; Line 624
  0006d	0f b6 43 3c	 movzx	 eax, BYTE PTR [rbx+60]
; Line 625
  00071	c7 07 07 00 00
	00		 mov	 DWORD PTR [rdi], 7
  00077	89 47 08	 mov	 DWORD PTR [rdi+8], eax
; Line 626
  0007a	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0007d	0f b6 4b 3c	 movzx	 ecx, BYTE PTR [rbx+60]
  00081	0f b6 42 0c	 movzx	 eax, BYTE PTR [rdx+12]
  00085	83 c1 02	 add	 ecx, 2
  00088	3b c8		 cmp	 ecx, eax
  0008a	7e 0b		 jle	 SHORT $LN17@luaK_self
  0008c	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00092	7d 5c		 jge	 SHORT $LN31@luaK_self
  00094	88 4a 0c	 mov	 BYTE PTR [rdx+12], cl
$LN17@luaK_self:
  00097	80 43 3c 02	 add	 BYTE PTR [rbx+60], 2
; Line 627
  0009b	48 8b d5	 mov	 rdx, rbp
  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	e8 00 00 00 00	 call	 luaK_exp2RK
  000a6	c1 e6 09	 shl	 esi, 9
  000a9	48 8b cb	 mov	 rcx, rbx
  000ac	0b f0		 or	 esi, eax
  000ae	c1 e6 08	 shl	 esi, 8
  000b1	0b 77 08	 or	 esi, DWORD PTR [rdi+8]
  000b4	c1 e6 06	 shl	 esi, 6
  000b7	83 ce 0c	 or	 esi, 12
  000ba	8b d6		 mov	 edx, esi
  000bc	e8 00 00 00 00	 call	 luaK_code
; Line 628
  000c1	83 7d 00 07	 cmp	 DWORD PTR [rbp], 7
  000c5	75 14		 jne	 SHORT $LN27@luaK_self
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR [rbp+8]
  000ca	0f ba e1 08	 bt	 ecx, 8
  000ce	72 0b		 jb	 SHORT $LN27@luaK_self
  000d0	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  000d4	3b c8		 cmp	 ecx, eax
  000d6	7c 03		 jl	 SHORT $LN27@luaK_self
  000d8	fe 4b 3c	 dec	 BYTE PTR [rbx+60]
$LN27@luaK_self:
; Line 629
  000db	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e0	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000e5	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ea	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ee	5f		 pop	 rdi
  000ef	c3		 ret	 0
$LN31@luaK_self:
; Line 626
  000f0	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  000fb	e8 00 00 00 00	 call	 luaX_syntaxerror
  00100	cc		 int	 3
$LN30@luaK_self:
luaK_self ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_exp2RK
_TEXT	SEGMENT
o$1 = 32
o$2 = 32
k$3 = 32
v$4 = 48
fs$ = 80
e$ = 88
luaK_exp2RK PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 556
$LN31:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx
; Line 557
  00010	e8 00 00 00 00	 call	 luaK_exp2val
; Line 558
  00015	8b 03		 mov	 eax, DWORD PTR [rbx]
  00017	85 c0		 test	 eax, eax
  00019	0f 8e d9 00 00
	00		 jle	 $LN8@luaK_exp2R
  0001f	83 f8 03	 cmp	 eax, 3
  00022	7e 68		 jle	 SHORT $LN9@luaK_exp2R
  00024	83 f8 04	 cmp	 eax, 4
  00027	74 4a		 je	 SHORT $vk$32
  00029	83 f8 05	 cmp	 eax, 5
  0002c	74 17		 je	 SHORT $LN5@luaK_exp2R
  0002e	83 f8 06	 cmp	 eax, 6
  00031	0f 85 c1 00 00
	00		 jne	 $LN8@luaK_exp2R
; Line 570
  00037	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  0003b	48 8b cf	 mov	 rcx, rdi
  0003e	e8 00 00 00 00	 call	 luaK_intK
; Line 572
  00043	eb 25		 jmp	 SHORT $LN27@luaK_exp2R
$LN5@luaK_exp2R:
; Line 575
  00045	f2 0f 10 43 08	 movsdx	 xmm0, QWORD PTR [rbx+8]
  0004a	4c 8d 44 24 20	 lea	 r8, QWORD PTR o$1[rsp]
  0004f	48 8d 54 24 20	 lea	 rdx, QWORD PTR o$1[rsp]
  00054	48 8b cf	 mov	 rcx, rdi
  00057	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR o$1[rsp+8], 3
  0005f	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR o$1[rsp], xmm0
  00065	e8 00 00 00 00	 call	 addk
$LN27@luaK_exp2R:
; Line 576
  0006a	c7 03 04 00 00
	00		 mov	 DWORD PTR [rbx], 4
  00070	89 43 08	 mov	 DWORD PTR [rbx+8], eax
$vk$32:
; Line 581
  00073	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
  00076	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0007b	7f 7b		 jg	 SHORT $LN8@luaK_exp2R
; Line 582
  0007d	0f ba e8 08	 bts	 eax, 8
; Line 589
  00081	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00086	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
$LN9@luaK_exp2R:
; Line 562
  0008c	81 7f 2c ff 00
	00 00		 cmp	 DWORD PTR [rdi+44], 255	; 000000ffH
  00093	7f 63		 jg	 SHORT $LN8@luaK_exp2R
; Line 563
  00095	33 c9		 xor	 ecx, ecx
  00097	48 8d 54 24 20	 lea	 rdx, QWORD PTR k$3[rsp]
  0009c	83 f8 01	 cmp	 eax, 1
  0009f	75 20		 jne	 SHORT $LN14@luaK_exp2R
  000a1	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  000a5	89 4c 24 38	 mov	 DWORD PTR v$4[rsp+8], ecx
  000a9	4c 8d 44 24 30	 lea	 r8, QWORD PTR v$4[rsp]
  000ae	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  000b2	c7 44 24 28 45
	00 00 00	 mov	 DWORD PTR k$3[rsp+8], 69 ; 00000045H
  000ba	48 89 4c 24 20	 mov	 QWORD PTR k$3[rsp], rcx
  000bf	eb 17		 jmp	 SHORT $LN28@luaK_exp2R
$LN14@luaK_exp2R:
  000c1	83 f8 02	 cmp	 eax, 2
  000c4	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR o$2[rsp+8], 1
  000cc	4c 8d 44 24 20	 lea	 r8, QWORD PTR o$2[rsp]
  000d1	0f 94 c1	 sete	 cl
  000d4	89 4c 24 20	 mov	 DWORD PTR o$2[rsp], ecx
$LN28@luaK_exp2R:
  000d8	48 8b cf	 mov	 rcx, rdi
  000db	e8 00 00 00 00	 call	 addk
; Line 564
  000e0	c7 03 04 00 00
	00		 mov	 DWORD PTR [rbx], 4
  000e6	89 43 08	 mov	 DWORD PTR [rbx+8], eax
; Line 565
  000e9	0f ba e8 08	 bts	 eax, 8
; Line 589
  000ed	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000f2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000f6	5f		 pop	 rdi
  000f7	c3		 ret	 0
$LN8@luaK_exp2R:
; Line 588
  000f8	48 8b d3	 mov	 rdx, rbx
  000fb	48 8b cf	 mov	 rcx, rdi
  000fe	e8 00 00 00 00	 call	 luaK_dischargevars
  00103	83 3b 07	 cmp	 DWORD PTR [rbx], 7
  00106	75 2e		 jne	 SHORT $LN22@luaK_exp2R
  00108	8b 43 14	 mov	 eax, DWORD PTR [rbx+20]
  0010b	39 43 10	 cmp	 DWORD PTR [rbx+16], eax
  0010e	74 31		 je	 SHORT $LN29@luaK_exp2R
  00110	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
  00114	0f b6 47 3a	 movzx	 eax, BYTE PTR [rdi+58]
  00118	44 3b c0	 cmp	 r8d, eax
  0011b	7c 19		 jl	 SHORT $LN22@luaK_exp2R
  0011d	48 8b d3	 mov	 rdx, rbx
  00120	48 8b cf	 mov	 rcx, rdi
  00123	e8 00 00 00 00	 call	 exp2reg
  00128	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
; Line 589
  0012b	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00130	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00134	5f		 pop	 rdi
  00135	c3		 ret	 0
; Line 588
$LN22@luaK_exp2R:
  00136	48 8b d3	 mov	 rdx, rbx
  00139	48 8b cf	 mov	 rcx, rdi
  0013c	e8 00 00 00 00	 call	 luaK_exp2nextreg
$LN29@luaK_exp2R:
  00141	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
; Line 589
  00144	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00149	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0014d	5f		 pop	 rdi
  0014e	c3		 ret	 0
luaK_exp2RK ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_exp2val
_TEXT	SEGMENT
fs$ = 48
e$ = 56
luaK_exp2val PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 548
$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 549
  0000a	8b 42 14	 mov	 eax, DWORD PTR [rdx+20]
  0000d	48 8b da	 mov	 rbx, rdx
  00010	48 8b f9	 mov	 rdi, rcx
  00013	39 42 10	 cmp	 DWORD PTR [rdx+16], eax
  00016	74 49		 je	 SHORT $LN2@luaK_exp2v
; Line 550
  00018	e8 00 00 00 00	 call	 luaK_dischargevars
  0001d	83 3b 07	 cmp	 DWORD PTR [rbx], 7
  00020	75 2a		 jne	 SHORT $LN5@luaK_exp2v
  00022	8b 43 14	 mov	 eax, DWORD PTR [rbx+20]
  00025	39 43 10	 cmp	 DWORD PTR [rbx+16], eax
  00028	74 3c		 je	 SHORT $LN1@luaK_exp2v
  0002a	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
  0002e	0f b6 47 3a	 movzx	 eax, BYTE PTR [rdi+58]
  00032	44 3b c0	 cmp	 r8d, eax
  00035	7c 15		 jl	 SHORT $LN5@luaK_exp2v
  00037	48 8b d3	 mov	 rdx, rbx
  0003a	48 8b cf	 mov	 rcx, rdi
; Line 553
  0003d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
; Line 550
  00047	e9 00 00 00 00	 jmp	 exp2reg
$LN5@luaK_exp2v:
  0004c	48 8b d3	 mov	 rdx, rbx
  0004f	48 8b cf	 mov	 rcx, rdi
; Line 553
  00052	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
; Line 550
  0005c	e9 00 00 00 00	 jmp	 luaK_exp2nextreg
$LN2@luaK_exp2v:
; Line 552
  00061	e8 00 00 00 00	 call	 luaK_dischargevars
$LN1@luaK_exp2v:
; Line 553
  00066	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
luaK_exp2val ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_exp2nextreg
_TEXT	SEGMENT
fs$ = 48
e$ = 56
luaK_exp2nextreg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 520
$LN20:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx
; Line 521
  00010	e8 00 00 00 00	 call	 luaK_dischargevars
; Line 522
  00015	83 3f 07	 cmp	 DWORD PTR [rdi], 7
  00018	75 14		 jne	 SHORT $LN6@luaK_exp2n
  0001a	8b 4f 08	 mov	 ecx, DWORD PTR [rdi+8]
  0001d	0f ba e1 08	 bt	 ecx, 8
  00021	72 0b		 jb	 SHORT $LN6@luaK_exp2n
  00023	0f b6 43 3a	 movzx	 eax, BYTE PTR [rbx+58]
  00027	3b c8		 cmp	 ecx, eax
  00029	7c 03		 jl	 SHORT $LN6@luaK_exp2n
  0002b	fe 4b 3c	 dec	 BYTE PTR [rbx+60]
$LN6@luaK_exp2n:
; Line 523
  0002e	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00031	0f b6 4b 3c	 movzx	 ecx, BYTE PTR [rbx+60]
  00035	0f b6 42 0c	 movzx	 eax, BYTE PTR [rdx+12]
  00039	ff c1		 inc	 ecx
  0003b	3b c8		 cmp	 ecx, eax
  0003d	7e 0b		 jle	 SHORT $LN12@luaK_exp2n
  0003f	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00045	7d 23		 jge	 SHORT $LN18@luaK_exp2n
  00047	88 4a 0c	 mov	 BYTE PTR [rdx+12], cl
$LN12@luaK_exp2n:
  0004a	fe 43 3c	 inc	 BYTE PTR [rbx+60]
  0004d	44 0f b6 43 3c	 movzx	 r8d, BYTE PTR [rbx+60]
; Line 524
  00052	48 8b d7	 mov	 rdx, rdi
  00055	41 ff c8	 dec	 r8d
  00058	48 8b cb	 mov	 rcx, rbx
; Line 525
  0005b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00060	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00064	5f		 pop	 rdi
; Line 524
  00065	e9 00 00 00 00	 jmp	 exp2reg
$LN18@luaK_exp2n:
; Line 523
  0006a	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  00075	e8 00 00 00 00	 call	 luaX_syntaxerror
  0007a	cc		 int	 3
$LN17@luaK_exp2n:
luaK_exp2nextreg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_exp2anyregup
_TEXT	SEGMENT
fs$ = 48
e$ = 56
luaK_exp2anyregup PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 542
$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 543
  0000a	83 3a 09	 cmp	 DWORD PTR [rdx], 9
  0000d	48 8b da	 mov	 rbx, rdx
  00010	48 8b f9	 mov	 rdi, rcx
  00013	75 08		 jne	 SHORT $LN1@luaK_exp2a
  00015	8b 42 14	 mov	 eax, DWORD PTR [rdx+20]
  00018	39 42 10	 cmp	 DWORD PTR [rdx+16], eax
  0001b	74 3f		 je	 SHORT $LN8@luaK_exp2a
$LN1@luaK_exp2a:
; Line 544
  0001d	e8 00 00 00 00	 call	 luaK_dischargevars
  00022	83 3b 07	 cmp	 DWORD PTR [rbx], 7
  00025	75 2a		 jne	 SHORT $LN5@luaK_exp2a
  00027	8b 43 14	 mov	 eax, DWORD PTR [rbx+20]
  0002a	39 43 10	 cmp	 DWORD PTR [rbx+16], eax
  0002d	74 2d		 je	 SHORT $LN8@luaK_exp2a
  0002f	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
  00033	0f b6 47 3a	 movzx	 eax, BYTE PTR [rdi+58]
  00037	44 3b c0	 cmp	 r8d, eax
  0003a	7c 15		 jl	 SHORT $LN5@luaK_exp2a
  0003c	48 8b d3	 mov	 rdx, rbx
  0003f	48 8b cf	 mov	 rcx, rdi
; Line 545
  00042	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
; Line 544
  0004c	e9 00 00 00 00	 jmp	 exp2reg
$LN5@luaK_exp2a:
  00051	48 8b d3	 mov	 rdx, rbx
  00054	48 8b cf	 mov	 rcx, rdi
  00057	e8 00 00 00 00	 call	 luaK_exp2nextreg
$LN8@luaK_exp2a:
; Line 545
  0005c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
luaK_exp2anyregup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_exp2anyreg
_TEXT	SEGMENT
fs$ = 48
e$ = 56
luaK_exp2anyreg PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 528
$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx
; Line 529
  00010	e8 00 00 00 00	 call	 luaK_dischargevars
; Line 530
  00015	83 3b 07	 cmp	 DWORD PTR [rbx], 7
  00018	75 2e		 jne	 SHORT $LN1@luaK_exp2a
; Line 531
  0001a	8b 43 14	 mov	 eax, DWORD PTR [rbx+20]
  0001d	39 43 10	 cmp	 DWORD PTR [rbx+16], eax
  00020	74 31		 je	 SHORT $LN6@luaK_exp2a
; Line 532
  00022	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
  00026	0f b6 47 3a	 movzx	 eax, BYTE PTR [rdi+58]
  0002a	44 3b c0	 cmp	 r8d, eax
  0002d	7c 19		 jl	 SHORT $LN1@luaK_exp2a
; Line 533
  0002f	48 8b d3	 mov	 rdx, rbx
  00032	48 8b cf	 mov	 rcx, rdi
  00035	e8 00 00 00 00	 call	 exp2reg
; Line 538
  0003a	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
; Line 539
  0003d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
$LN1@luaK_exp2a:
; Line 537
  00048	48 8b d3	 mov	 rdx, rbx
  0004b	48 8b cf	 mov	 rcx, rdi
  0004e	e8 00 00 00 00	 call	 luaK_exp2nextreg
$LN6@luaK_exp2a:
; Line 538
  00053	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
; Line 539
  00056	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
luaK_exp2anyreg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_dischargevars
_TEXT	SEGMENT
fs$ = 48
e$ = 56
luaK_dischargevars PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 407
$LN22:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 408
  00006	8b 02		 mov	 eax, DWORD PTR [rdx]
  00008	48 8b da	 mov	 rbx, rdx
  0000b	83 f8 08	 cmp	 eax, 8
  0000e	0f 84 a0 00 00
	00		 je	 $LN6@luaK_disch
  00014	83 f8 09	 cmp	 eax, 9
  00017	74 7e		 je	 SHORT $LN5@luaK_disch
  00019	83 f8 0a	 cmp	 eax, 10
  0001c	74 16		 je	 SHORT $LN4@luaK_disch
  0001e	83 c0 f3	 add	 eax, -13		; fffffff3H
  00021	83 f8 01	 cmp	 eax, 1
  00024	0f 87 93 00 00
	00		 ja	 $LN7@luaK_disch
; Line 436
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5b		 pop	 rbx
; Line 431
  0002f	e9 00 00 00 00	 jmp	 luaK_setoneret
$LN4@luaK_disch:
; Line 420
  00034	0f bf 52 08	 movsx	 edx, WORD PTR [rdx+8]
  00038	41 b8 06 00 00
	00		 mov	 r8d, 6
  0003e	0f ba e2 08	 bt	 edx, 8
  00042	72 0b		 jb	 SHORT $LN13@luaK_disch
  00044	0f b6 41 3a	 movzx	 eax, BYTE PTR [rcx+58]
  00048	3b d0		 cmp	 edx, eax
  0004a	7c 03		 jl	 SHORT $LN13@luaK_disch
  0004c	fe 49 3c	 dec	 BYTE PTR [rcx+60]
$LN13@luaK_disch:
; Line 421
  0004f	80 7b 0b 08	 cmp	 BYTE PTR [rbx+11], 8
  00053	75 1b		 jne	 SHORT $LN3@luaK_disch
; Line 422
  00055	0f b6 53 0a	 movzx	 edx, BYTE PTR [rbx+10]
  00059	0f ba e2 08	 bt	 edx, 8
  0005d	72 0b		 jb	 SHORT $LN16@luaK_disch
  0005f	0f b6 41 3a	 movzx	 eax, BYTE PTR [rcx+58]
  00063	3b d0		 cmp	 edx, eax
  00065	7c 03		 jl	 SHORT $LN16@luaK_disch
  00067	fe 49 3c	 dec	 BYTE PTR [rcx+60]
$LN16@luaK_disch:
; Line 423
  0006a	41 b8 07 00 00
	00		 mov	 r8d, 7
$LN3@luaK_disch:
; Line 425
  00070	0f b6 53 0a	 movzx	 edx, BYTE PTR [rbx+10]
  00074	0f bf 43 08	 movsx	 eax, WORD PTR [rbx+8]
  00078	c1 e2 09	 shl	 edx, 9
  0007b	0b d0		 or	 edx, eax
  0007d	c1 e2 0e	 shl	 edx, 14
  00080	41 0b d0	 or	 edx, r8d
  00083	e8 00 00 00 00	 call	 luaK_code
; Line 426
  00088	c7 03 0c 00 00
	00		 mov	 DWORD PTR [rbx], 12
  0008e	89 43 08	 mov	 DWORD PTR [rbx+8], eax
; Line 436
  00091	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00095	5b		 pop	 rbx
  00096	c3		 ret	 0
$LN5@luaK_disch:
; Line 414
  00097	8b 52 08	 mov	 edx, DWORD PTR [rdx+8]
  0009a	c1 e2 17	 shl	 edx, 23
  0009d	83 ca 05	 or	 edx, 5
  000a0	e8 00 00 00 00	 call	 luaK_code
; Line 415
  000a5	c7 03 0c 00 00
	00		 mov	 DWORD PTR [rbx], 12
  000ab	89 43 08	 mov	 DWORD PTR [rbx+8], eax
; Line 436
  000ae	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b2	5b		 pop	 rbx
  000b3	c3		 ret	 0
$LN6@luaK_disch:
; Line 410
  000b4	41 b8 07 00 00
	00		 mov	 r8d, 7
  000ba	44 89 02	 mov	 DWORD PTR [rdx], r8d
$LN7@luaK_disch:
; Line 436
  000bd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c1	5b		 pop	 rbx
  000c2	c3		 ret	 0
luaK_dischargevars ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_intK
_TEXT	SEGMENT
o$ = 32
k$ = 48
fs$ = 80
n$ = 88
luaK_intK PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 352
$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
; Line 354
  00004	48 89 54 24 30	 mov	 QWORD PTR k$[rsp], rdx
; Line 355
  00009	48 89 54 24 20	 mov	 QWORD PTR o$[rsp], rdx
; Line 356
  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR o$[rsp]
  00013	48 8d 54 24 30	 lea	 rdx, QWORD PTR k$[rsp]
  00018	c7 44 24 38 02
	00 00 00	 mov	 DWORD PTR k$[rsp+8], 2
  00020	c7 44 24 28 13
	00 00 00	 mov	 DWORD PTR o$[rsp+8], 19
  00028	e8 00 00 00 00	 call	 addk
; Line 357
  0002d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00031	c3		 ret	 0
luaK_intK ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_stringK
_TEXT	SEGMENT
o$ = 32
fs$ = 64
s$ = 72
luaK_stringK PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 340
$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 342
  00004	0f b6 42 08	 movzx	 eax, BYTE PTR [rdx+8]
  00008	48 89 54 24 20	 mov	 QWORD PTR o$[rsp], rdx
; Line 343
  0000d	4c 8d 44 24 20	 lea	 r8, QWORD PTR o$[rsp]
  00012	83 c8 40	 or	 eax, 64			; 00000040H
  00015	48 8d 54 24 20	 lea	 rdx, QWORD PTR o$[rsp]
  0001a	89 44 24 28	 mov	 DWORD PTR o$[rsp+8], eax
  0001e	e8 00 00 00 00	 call	 addk
; Line 344
  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
luaK_stringK ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_checkstack
_TEXT	SEGMENT
fs$ = 48
n$ = 56
luaK_checkstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 278
$LN8:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 279
  00004	44 0f b6 41 3c	 movzx	 r8d, BYTE PTR [rcx+60]
  00009	44 03 c2	 add	 r8d, edx
; Line 280
  0000c	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0000f	0f b6 42 0c	 movzx	 eax, BYTE PTR [rdx+12]
  00013	44 3b c0	 cmp	 r8d, eax
  00016	7e 0d		 jle	 SHORT $LN2@luaK_check
; Line 281
  00018	41 81 f8 ff 00
	00 00		 cmp	 r8d, 255		; 000000ffH
  0001f	7d 09		 jge	 SHORT $LN6@luaK_check
; Line 284
  00021	44 88 42 0c	 mov	 BYTE PTR [rdx+12], r8b
$LN2@luaK_check:
; Line 286
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
$LN6@luaK_check:
; Line 283
  0002a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  00035	e8 00 00 00 00	 call	 luaX_syntaxerror
  0003a	cc		 int	 3
$LN5@luaK_check:
luaK_checkstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_reserveregs
_TEXT	SEGMENT
fs$ = 48
n$ = 56
luaK_reserveregs PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 289
$LN11:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 290
  00004	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00007	44 0f b6 41 3c	 movzx	 r8d, BYTE PTR [rcx+60]
  0000c	41 0f b6 41 0c	 movzx	 eax, BYTE PTR [r9+12]
  00011	44 03 c2	 add	 r8d, edx
  00014	44 3b c0	 cmp	 r8d, eax
  00017	7e 0d		 jle	 SHORT $LN4@luaK_reser
  00019	41 81 f8 ff 00
	00 00		 cmp	 r8d, 255		; 000000ffH
  00020	7d 0c		 jge	 SHORT $LN9@luaK_reser
  00022	45 88 41 0c	 mov	 BYTE PTR [r9+12], r8b
$LN4@luaK_reser:
; Line 291
  00026	00 51 3c	 add	 BYTE PTR [rcx+60], dl
; Line 292
  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
$LN9@luaK_reser:
; Line 290
  0002e	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@PHCKMDLF@function?5or?5expression?5needs?5too@
  00039	e8 00 00 00 00	 call	 luaX_syntaxerror
  0003e	cc		 int	 3
$LN8@luaK_reser:
luaK_reserveregs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_nil
_TEXT	SEGMENT
fs$ = 48
from$ = 56
n$ = 64
luaK_nil PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 54
$LN15:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 57
  0000a	8b 41 20	 mov	 eax, DWORD PTR [rcx+32]
  0000d	41 8d 58 ff	 lea	 ebx, DWORD PTR [r8-1]
  00011	44 8b da	 mov	 r11d, edx
  00014	03 da		 add	 ebx, edx
  00016	48 8b f9	 mov	 rdi, rcx
  00019	3b 41 24	 cmp	 eax, DWORD PTR [rcx+36]
  0001c	7e 76		 jle	 SHORT $LN5@luaK_nil
; Line 58
  0001e	ff c8		 dec	 eax
  00020	4c 63 d0	 movsxd	 r10, eax
  00023	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00026	4c 8b 48 38	 mov	 r9, QWORD PTR [rax+56]
; Line 59
  0002a	43 8b 14 91	 mov	 edx, DWORD PTR [r9+r10*4]
  0002e	8b c2		 mov	 eax, edx
  00030	24 3f		 and	 al, 63			; 0000003fH
  00032	3c 04		 cmp	 al, 4
  00034	75 5e		 jne	 SHORT $LN5@luaK_nil
; Line 60
  00036	8b c2		 mov	 eax, edx
; Line 61
  00038	c1 ea 17	 shr	 edx, 23
  0003b	c1 e8 06	 shr	 eax, 6
  0003e	0f b6 c8	 movzx	 ecx, al
  00041	03 d1		 add	 edx, ecx
; Line 63
  00043	44 3b d9	 cmp	 r11d, ecx
  00046	7c 0d		 jl	 SHORT $LN13@luaK_nil
  00048	8d 42 01	 lea	 eax, DWORD PTR [rdx+1]
  0004b	44 3b d8	 cmp	 r11d, eax
  0004e	7e 0c		 jle	 SHORT $LN4@luaK_nil
  00050	44 3b d9	 cmp	 r11d, ecx
  00053	7f 3f		 jg	 SHORT $LN5@luaK_nil
$LN13@luaK_nil:
  00055	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  00058	3b c8		 cmp	 ecx, eax
  0005a	7f 38		 jg	 SHORT $LN5@luaK_nil
$LN4@luaK_nil:
; Line 64
  0005c	41 3b cb	 cmp	 ecx, r11d
  0005f	44 0f 4c d9	 cmovl	 r11d, ecx
; Line 65
  00063	3b d3		 cmp	 edx, ebx
  00065	0f 4f da	 cmovg	 ebx, edx
  00068	43 81 24 91 3f
	c0 7f 00	 and	 DWORD PTR [r9+r10*4], 8372287 ; 007fc03fH
; Line 67
  00070	41 0f b6 c3	 movzx	 eax, r11b
  00074	41 2b db	 sub	 ebx, r11d
  00077	c1 e0 06	 shl	 eax, 6
  0007a	c1 e3 17	 shl	 ebx, 23
  0007d	81 e3 00 00 80
	ff		 and	 ebx, -8388608		; ff800000H
  00083	0b d8		 or	 ebx, eax
  00085	43 09 1c 91	 or	 DWORD PTR [r9+r10*4], ebx
; Line 73
  00089	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00092	5f		 pop	 rdi
  00093	c3		 ret	 0
$LN5@luaK_nil:
; Line 72
  00094	41 8d 50 ff	 lea	 edx, DWORD PTR [r8-1]
  00098	48 8b cf	 mov	 rcx, rdi
  0009b	c1 e2 11	 shl	 edx, 17
  0009e	41 0b d3	 or	 edx, r11d
  000a1	c1 e2 06	 shl	 edx, 6
  000a4	83 ca 04	 or	 edx, 4
; Line 73
  000a7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ac	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b0	5f		 pop	 rdi
; Line 72
  000b1	e9 00 00 00 00	 jmp	 luaK_code
luaK_nil ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_fixline
_TEXT	SEGMENT
fs$ = 8
line$ = 16
luaK_fixline PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 937
  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	4c 63 41 20	 movsxd	 r8, DWORD PTR [rcx+32]
  00007	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  0000b	42 89 54 81 fc	 mov	 DWORD PTR [rcx+r8*4-4], edx
; Line 938
  00010	c3		 ret	 0
luaK_fixline ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_codek
_TEXT	SEGMENT
fs$ = 48
reg$ = 56
k$ = 64
luaK_codek PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 267
$LN12:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	41 8b f8	 mov	 edi, r8d
  0000d	48 8b f1	 mov	 rsi, rcx
; Line 268
  00010	41 81 f8 ff ff
	03 00		 cmp	 r8d, 262143		; 0003ffffH
  00017	7f 1a		 jg	 SHORT $LN2@luaK_codek
; Line 269
  00019	c1 e7 08	 shl	 edi, 8
  0001c	0b d7		 or	 edx, edi
  0001e	c1 e2 06	 shl	 edx, 6
  00021	83 ca 01	 or	 edx, 1
; Line 275
  00024	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
; Line 269
  0002e	e9 00 00 00 00	 jmp	 luaK_code
$LN2@luaK_codek:
; Line 271
  00033	c1 e2 06	 shl	 edx, 6
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	83 ca 02	 or	 edx, 2
  0003e	e8 00 00 00 00	 call	 luaK_code
; Line 272
  00043	c1 e7 06	 shl	 edi, 6
  00046	48 8b ce	 mov	 rcx, rsi
  00049	83 cf 2e	 or	 edi, 46			; 0000002eH
  0004c	8b d8		 mov	 ebx, eax
  0004e	8b d7		 mov	 edx, edi
  00050	e8 00 00 00 00	 call	 luaK_code
; Line 275
  00055	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005a	8b c3		 mov	 eax, ebx
  0005c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
luaK_codek ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_codeABC
_TEXT	SEGMENT
fs$ = 8
o$ = 16
a$ = 24
b$ = 32
c$ = 40
luaK_codeABC PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 249
  00000	41 c1 e1 09	 shl	 r9d, 9
  00004	44 0b 4c 24 28	 or	 r9d, DWORD PTR c$[rsp]
  00009	41 c1 e1 08	 shl	 r9d, 8
  0000d	45 0b c8	 or	 r9d, r8d
  00010	41 c1 e1 06	 shl	 r9d, 6
  00014	41 0b d1	 or	 edx, r9d
  00017	e9 00 00 00 00	 jmp	 luaK_code
luaK_codeABC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaK_codeABx
_TEXT	SEGMENT
fs$ = 8
o$ = 16
a$ = 24
bc$ = 32
luaK_codeABx PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lcode.c
; Line 257
  00000	41 c1 e1 08	 shl	 r9d, 8
  00004	45 0b c8	 or	 r9d, r8d
  00007	41 c1 e1 06	 shl	 r9d, 6
  0000b	41 0b d1	 or	 edx, r9d
  0000e	e9 00 00 00 00	 jmp	 luaK_code
luaK_codeABx ENDP
_TEXT	ENDS
END
