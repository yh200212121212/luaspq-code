; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06CMLIEHFC@concat?$AA@			; `string'
PUBLIC	??_C@_04HKHJFELJ@maxn?$AA@			; `string'
PUBLIC	??_C@_06OAOPNKHP@insert?$AA@			; `string'
PUBLIC	??_C@_04IPANLPFO@pack?$AA@			; `string'
PUBLIC	??_C@_06FIONAGJL@unpack?$AA@			; `string'
PUBLIC	??_C@_06LEMKAMD@remove?$AA@			; `string'
PUBLIC	??_C@_04HDMMNHEL@move?$AA@			; `string'
PUBLIC	??_C@_04PIMMHFGE@sort?$AA@			; `string'
;	COMDAT ??_C@_04PIMMHFGE@sort?$AA@
CONST	SEGMENT
??_C@_04PIMMHFGE@sort?$AA@ DB 'sort', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDMMNHEL@move?$AA@
CONST	SEGMENT
??_C@_04HDMMNHEL@move?$AA@ DB 'move', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEMKAMD@remove?$AA@
CONST	SEGMENT
??_C@_06LEMKAMD@remove?$AA@ DB 'remove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FIONAGJL@unpack?$AA@
CONST	SEGMENT
??_C@_06FIONAGJL@unpack?$AA@ DB 'unpack', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IPANLPFO@pack?$AA@
CONST	SEGMENT
??_C@_04IPANLPFO@pack?$AA@ DB 'pack', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OAOPNKHP@insert?$AA@
CONST	SEGMENT
??_C@_06OAOPNKHP@insert?$AA@ DB 'insert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HKHJFELJ@maxn?$AA@
CONST	SEGMENT
??_C@_04HKHJFELJ@maxn?$AA@ DB 'maxn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMLIEHFC@concat?$AA@
CONST	SEGMENT
??_C@_06CMLIEHFC@concat?$AA@ DB 'concat', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
tab_funcs DQ	FLAT:??_C@_06CMLIEHFC@concat?$AA@
	DQ	FLAT:tconcat
	DQ	FLAT:??_C@_04HKHJFELJ@maxn?$AA@
	DQ	FLAT:maxn
	DQ	FLAT:??_C@_06OAOPNKHP@insert?$AA@
	DQ	FLAT:tinsert
	DQ	FLAT:??_C@_04IPANLPFO@pack?$AA@
	DQ	FLAT:pack
	DQ	FLAT:??_C@_06FIONAGJL@unpack?$AA@
	DQ	FLAT:unpack
	DQ	FLAT:??_C@_06LEMKAMD@remove?$AA@
	DQ	FLAT:tremove
	DQ	FLAT:??_C@_04HDMMNHEL@move?$AA@
	DQ	FLAT:tmove
	DQ	FLAT:??_C@_04PIMMHFGE@sort?$AA@
	DQ	FLAT:sort
	DQ	0000000000000000H
	DQ	0000000000000000H
CONST	ENDS
PUBLIC	luaopen_table
PUBLIC	??_C@_07NHABFFHN@__index?$AA@			; `string'
PUBLIC	??_C@_0L@GADKNKH@__newindex?$AA@		; `string'
PUBLIC	??_C@_05MNDELLDN@__len?$AA@			; `string'
PUBLIC	??_C@_0P@DAKFMHIM@table?5expected?$AA@		; `string'
PUBLIC	??_C@_0BH@FFAABLEA@position?5out?5of?5bounds?$AA@ ; `string'
PUBLIC	??_C@_0CG@LPGHMHCC@wrong?5number?5of?5arguments?5to?5?8in@ ; `string'
PUBLIC	??_C@_0BK@ICIDIFLD@too?5many?5elements?5to?5move?$AA@ ; `string'
PUBLIC	??_C@_0BI@GJMBFEK@destination?5wrap?5around?$AA@ ; `string'
PUBLIC	??_C@_0DF@OJJECDJJ@invalid?5value?5?$CI?$CFs?$CJ?5at?5index?5?$CFd?5i@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_0BL@EDBCOFHM@too?5many?5results?5to?5unpack?$AA@ ; `string'
PUBLIC	??_C@_0CD@OFHMGIPD@invalid?5order?5function?5for?5sorti@ ; `string'
PUBLIC	??_C@_0O@KFKKFIGA@array?5too?5big?$AA@		; `string'
PUBLIC	__real@405bc00000000000
EXTRN	lua_gettop:PROC
EXTRN	lua_settop:PROC
EXTRN	lua_pushvalue:PROC
EXTRN	lua_rotate:PROC
EXTRN	lua_checkstack:PROC
EXTRN	lua_isstring:PROC
EXTRN	lua_type:PROC
EXTRN	lua_typename:PROC
EXTRN	lua_tonumberx:PROC
EXTRN	lua_toboolean:PROC
EXTRN	lua_compare:PROC
EXTRN	lua_pushnil:PROC
EXTRN	lua_pushnumber:PROC
EXTRN	lua_pushinteger:PROC
EXTRN	lua_pushstring:PROC
EXTRN	lua_getfield:PROC
EXTRN	lua_geti:PROC
EXTRN	lua_rawget:PROC
EXTRN	lua_createtable:PROC
EXTRN	lua_getmetatable:PROC
EXTRN	lua_setglobal:PROC
EXTRN	lua_setfield:PROC
EXTRN	lua_seti:PROC
EXTRN	lua_callk:PROC
EXTRN	lua_next:PROC
EXTRN	luaL_checkversion_:PROC
EXTRN	luaL_argerror:PROC
EXTRN	luaL_optlstring:PROC
EXTRN	luaL_checkinteger:PROC
EXTRN	luaL_optinteger:PROC
EXTRN	luaL_checkstack:PROC
EXTRN	luaL_checktype:PROC
EXTRN	luaL_error:PROC
EXTRN	luaL_len:PROC
EXTRN	luaL_setfuncs:PROC
EXTRN	luaL_buffinit:PROC
EXTRN	luaL_addlstring:PROC
EXTRN	luaL_addvalue:PROC
EXTRN	luaL_pushresult:PROC
EXTRN	__imp_clock:PROC
EXTRN	__imp__time64:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaopen_table DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$luaopen_table
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$checkfield DD imagerel checkfield
	DD	imagerel checkfield+53
	DD	imagerel $unwind$checkfield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$checktab DD imagerel checktab
	DD	imagerel checktab+42
	DD	imagerel $unwind$checktab
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$checktab DD imagerel checktab+42
	DD	imagerel checktab+220
	DD	imagerel $chain$0$checktab
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$checktab DD imagerel checktab+220
	DD	imagerel checktab+236
	DD	imagerel $chain$1$checktab
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$maxn DD	imagerel maxn
	DD	imagerel maxn+160
	DD	imagerel $unwind$maxn
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tinsert DD imagerel tinsert
	DD	imagerel tinsert+302
	DD	imagerel $unwind$tinsert
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$tinsert DD imagerel tinsert+302
	DD	imagerel tinsert+371
	DD	imagerel $chain$1$tinsert
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$tinsert DD imagerel tinsert+371
	DD	imagerel tinsert+408
	DD	imagerel $chain$2$tinsert
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tremove DD imagerel tremove
	DD	imagerel tremove+281
	DD	imagerel $unwind$tremove
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tremove DD imagerel tremove+281
	DD	imagerel tremove+337
	DD	imagerel $chain$0$tremove
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$tremove DD imagerel tremove+337
	DD	imagerel tremove+382
	DD	imagerel $chain$1$tremove
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tmove DD	imagerel tmove
	DD	imagerel tmove+560
	DD	imagerel $unwind$tmove
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$addfield DD imagerel addfield
	DD	imagerel addfield+114
	DD	imagerel $unwind$addfield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tconcat DD imagerel tconcat
	DD	imagerel tconcat+554
	DD	imagerel $unwind$tconcat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pack DD	imagerel pack
	DD	imagerel pack+58
	DD	imagerel $unwind$pack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$pack DD imagerel pack+58
	DD	imagerel pack+114
	DD	imagerel $chain$1$pack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$pack DD imagerel pack+114
	DD	imagerel pack+161
	DD	imagerel $chain$2$pack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unpack DD imagerel unpack
	DD	imagerel unpack+225
	DD	imagerel $unwind$unpack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$l_randomizePivot DD imagerel l_randomizePivot
	DD	imagerel l_randomizePivot+67
	DD	imagerel $unwind$l_randomizePivot
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$set2 DD	imagerel set2
	DD	imagerel set2+55
	DD	imagerel $unwind$set2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sort_comp DD imagerel sort_comp
	DD	imagerel sort_comp+173
	DD	imagerel $unwind$sort_comp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$partition DD imagerel partition
	DD	imagerel partition+535
	DD	imagerel $unwind$partition
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$auxsort DD imagerel auxsort
	DD	imagerel auxsort+44
	DD	imagerel $unwind$auxsort
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$auxsort DD imagerel auxsort+44
	DD	imagerel auxsort+636
	DD	imagerel $chain$0$auxsort
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$auxsort DD imagerel auxsort+636
	DD	imagerel auxsort+637
	DD	imagerel $chain$1$auxsort
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sort DD	imagerel sort
	DD	imagerel sort+328
	DD	imagerel $unwind$sort
pdata	ENDS
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_0O@KFKKFIGA@array?5too?5big?$AA@
CONST	SEGMENT
??_C@_0O@KFKKFIGA@array?5too?5big?$AA@ DB 'array too big', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OFHMGIPD@invalid?5order?5function?5for?5sorti@
CONST	SEGMENT
??_C@_0CD@OFHMGIPD@invalid?5order?5function?5for?5sorti@ DB 'invalid orde'
	DB	'r function for sorting', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EDBCOFHM@too?5many?5results?5to?5unpack?$AA@
CONST	SEGMENT
??_C@_0BL@EDBCOFHM@too?5many?5results?5to?5unpack?$AA@ DB 'too many resul'
	DB	'ts to unpack', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@OJJECDJJ@invalid?5value?5?$CI?$CFs?$CJ?5at?5index?5?$CFd?5i@
CONST	SEGMENT
??_C@_0DF@OJJECDJJ@invalid?5value?5?$CI?$CFs?$CJ?5at?5index?5?$CFd?5i@ DB 'i'
	DB	'nvalid value (%s) at index %d in table for ''concat''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GJMBFEK@destination?5wrap?5around?$AA@
CONST	SEGMENT
??_C@_0BI@GJMBFEK@destination?5wrap?5around?$AA@ DB 'destination wrap aro'
	DB	'und', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ICIDIFLD@too?5many?5elements?5to?5move?$AA@
CONST	SEGMENT
??_C@_0BK@ICIDIFLD@too?5many?5elements?5to?5move?$AA@ DB 'too many elemen'
	DB	'ts to move', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LPGHMHCC@wrong?5number?5of?5arguments?5to?5?8in@
CONST	SEGMENT
??_C@_0CG@LPGHMHCC@wrong?5number?5of?5arguments?5to?5?8in@ DB 'wrong numb'
	DB	'er of arguments to ''insert''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FFAABLEA@position?5out?5of?5bounds?$AA@
CONST	SEGMENT
??_C@_0BH@FFAABLEA@position?5out?5of?5bounds?$AA@ DB 'position out of bou'
	DB	'nds', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DAKFMHIM@table?5expected?$AA@
CONST	SEGMENT
??_C@_0P@DAKFMHIM@table?5expected?$AA@ DB 'table expected', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MNDELLDN@__len?$AA@
CONST	SEGMENT
??_C@_05MNDELLDN@__len?$AA@ DB '__len', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GADKNKH@__newindex?$AA@
CONST	SEGMENT
??_C@_0L@GADKNKH@__newindex?$AA@ DB '__newindex', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NHABFFHN@__index?$AA@
CONST	SEGMENT
??_C@_07NHABFFHN@__index?$AA@ DB '__index', 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sort DD	040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$auxsort DD 021H
	DD	imagerel auxsort
	DD	imagerel auxsort+44
	DD	imagerel $unwind$auxsort
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$auxsort DD 020521H
	DD	0b3405H
	DD	imagerel auxsort
	DD	imagerel auxsort+44
	DD	imagerel $unwind$auxsort
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$auxsort DD 041f19H
	DD	0700cb210H
	DD	0500a600bH
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partition DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0f0145218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sort_comp DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$set2 DD	040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$l_randomizePivot DD 021519H
	DD	030027206H
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unpack DD 086c01H
	DD	06546cH
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$pack DD 021H
	DD	imagerel pack
	DD	imagerel pack+58
	DD	imagerel $unwind$pack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$pack DD 040a21H
	DD	07740aH
	DD	063405H
	DD	imagerel pack
	DD	imagerel pack+58
	DD	imagerel $unwind$pack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pack DD	040a01H
	DD	08540aH
	DD	06006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tconcat DD 092f19H
	DD	0411641dH
	DD	0410541dH
	DD	040f341dH
	DD	040c011dH
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	02050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$addfield DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tmove DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$tremove DD 021H
	DD	imagerel tremove
	DD	imagerel tremove+281
	DD	imagerel $unwind$tremove
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tremove DD 020521H
	DD	063405H
	DD	imagerel tremove
	DD	imagerel tremove+281
	DD	imagerel $unwind$tremove
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tremove DD 060f01H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$tinsert DD 021H
	DD	imagerel tinsert
	DD	imagerel tinsert+302
	DD	imagerel $unwind$tinsert
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$tinsert DD 020521H
	DD	063405H
	DD	imagerel tinsert
	DD	imagerel tinsert+302
	DD	imagerel $unwind$tinsert
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tinsert DD 06c101H
	DD	0754c1H
	DD	08640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$maxn DD	041001H
	DD	026810H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$checktab DD 021H
	DD	imagerel checktab
	DD	imagerel checktab+42
	DD	imagerel $unwind$checktab
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$checktab DD 020521H
	DD	067405H
	DD	imagerel checktab
	DD	imagerel checktab+42
	DD	imagerel $unwind$checktab
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checktab DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checkfield DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaopen_table DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT sort
_TEXT	SEGMENT
L$ = 48
sort	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 409
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 410
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	e8 00 00 00 00	 call	 lua_type
  00017	83 f8 05	 cmp	 eax, 5
  0001a	0f 84 94 00 00
	00		 je	 $LN6@sort
  00020	ba 01 00 00 00	 mov	 edx, 1
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 lua_getmetatable
  0002d	85 c0		 test	 eax, eax
  0002f	74 6f		 je	 SHORT $LN10@sort
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NHABFFHN@__index?$AA@
  00038	48 8b cb	 mov	 rcx, rbx
  0003b	e8 00 00 00 00	 call	 lua_pushstring
  00040	ba fe ff ff ff	 mov	 edx, -2
  00045	48 8b cb	 mov	 rcx, rbx
  00048	e8 00 00 00 00	 call	 lua_rawget
  0004d	85 c0		 test	 eax, eax
  0004f	74 4f		 je	 SHORT $LN10@sort
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@GADKNKH@__newindex?$AA@
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 lua_pushstring
  00060	ba fd ff ff ff	 mov	 edx, -3
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 lua_rawget
  0006d	85 c0		 test	 eax, eax
  0006f	74 2f		 je	 SHORT $LN10@sort
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MNDELLDN@__len?$AA@
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 lua_pushstring
  00080	ba fc ff ff ff	 mov	 edx, -4
  00085	48 8b cb	 mov	 rcx, rbx
  00088	e8 00 00 00 00	 call	 lua_rawget
  0008d	85 c0		 test	 eax, eax
  0008f	74 0f		 je	 SHORT $LN10@sort
  00091	ba fb ff ff ff	 mov	 edx, -5
  00096	48 8b cb	 mov	 rcx, rbx
  00099	e8 00 00 00 00	 call	 lua_settop
  0009e	eb 14		 jmp	 SHORT $LN6@sort
$LN10@sort:
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@DAKFMHIM@table?5expected?$AA@
  000a7	ba 01 00 00 00	 mov	 edx, 1
  000ac	48 8b cb	 mov	 rcx, rbx
  000af	e8 00 00 00 00	 call	 luaL_argerror
$LN6@sort:
  000b4	ba 01 00 00 00	 mov	 edx, 1
  000b9	48 8b cb	 mov	 rcx, rbx
  000bc	e8 00 00 00 00	 call	 luaL_len
  000c1	48 8b f8	 mov	 rdi, rax
; Line 411
  000c4	48 83 f8 01	 cmp	 rax, 1
  000c8	7e 71		 jle	 SHORT $LN20@sort
; Line 412
  000ca	48 3d ff ff ff
	7f		 cmp	 rax, 2147483647		; 7fffffffH
  000d0	7c 14		 jl	 SHORT $LN5@sort
  000d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@KFKKFIGA@array?5too?5big?$AA@
  000d9	ba 01 00 00 00	 mov	 edx, 1
  000de	48 8b cb	 mov	 rcx, rbx
  000e1	e8 00 00 00 00	 call	 luaL_argerror
$LN5@sort:
; Line 413
  000e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000ed	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  000f2	48 8b cb	 mov	 rcx, rbx
  000f5	e8 00 00 00 00	 call	 luaL_checkstack
; Line 414
  000fa	ba 02 00 00 00	 mov	 edx, 2
  000ff	48 8b cb	 mov	 rcx, rbx
  00102	e8 00 00 00 00	 call	 lua_type
  00107	85 c0		 test	 eax, eax
  00109	7e 11		 jle	 SHORT $LN1@sort
; Line 415
  0010b	ba 02 00 00 00	 mov	 edx, 2
  00110	48 8b cb	 mov	 rcx, rbx
  00113	44 8d 42 04	 lea	 r8d, QWORD PTR [rdx+4]
  00117	e8 00 00 00 00	 call	 luaL_checktype
$LN1@sort:
; Line 416
  0011c	ba 02 00 00 00	 mov	 edx, 2
  00121	48 8b cb	 mov	 rcx, rbx
  00124	e8 00 00 00 00	 call	 lua_settop
; Line 417
  00129	45 33 c9	 xor	 r9d, r9d
  0012c	44 8b c7	 mov	 r8d, edi
  0012f	41 8d 51 01	 lea	 edx, QWORD PTR [r9+1]
  00133	48 8b cb	 mov	 rcx, rbx
  00136	e8 00 00 00 00	 call	 auxsort
$LN20@sort:
; Line 419
  0013b	33 c0		 xor	 eax, eax
; Line 420
  0013d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00142	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00146	5f		 pop	 rdi
  00147	c3		 ret	 0
sort	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT auxsort
_TEXT	SEGMENT
rnd$GSCopy$1$ = 32
tv388 = 40
tv385 = 40
n$1$ = 48
buff$1 = 56
__$ArrayPad$ = 72
L$ = 128
lo$ = 136
up$ = 144
rnd$ = 152
auxsort	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 357
  00000	41 3b d0	 cmp	 edx, r8d
  00003	0f 83 73 02 00
	00		 jae	 $LN50@auxsort
  00009	55		 push	 rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 356
  0001f	44 89 4c 24 20	 mov	 DWORD PTR rnd$GSCopy$1$[rsp], r9d
  00024	41 8b e8	 mov	 ebp, r8d
  00027	8b f2		 mov	 esi, edx
  00029	48 8b f9	 mov	 rdi, rcx
  0002c	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
$LL16@auxsort:
; Line 361
  00031	44 8b c6	 mov	 r8d, esi
  00034	ba 01 00 00 00	 mov	 edx, 1
  00039	48 8b cf	 mov	 rcx, rdi
  0003c	8b de		 mov	 ebx, esi
  0003e	e8 00 00 00 00	 call	 lua_geti
; Line 362
  00043	44 8b c5	 mov	 r8d, ebp
  00046	ba 01 00 00 00	 mov	 edx, 1
  0004b	48 8b cf	 mov	 rcx, rdi
  0004e	e8 00 00 00 00	 call	 lua_geti
; Line 363
  00053	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00059	83 ca ff	 or	 edx, -1
  0005c	48 8b cf	 mov	 rcx, rdi
  0005f	e8 00 00 00 00	 call	 sort_comp
; Line 364
  00064	48 8b cf	 mov	 rcx, rdi
  00067	85 c0		 test	 eax, eax
  00069	74 1f		 je	 SHORT $LN14@auxsort
  0006b	44 8b c3	 mov	 r8d, ebx
  0006e	ba 01 00 00 00	 mov	 edx, 1
  00073	e8 00 00 00 00	 call	 lua_seti
  00078	44 8b c5	 mov	 r8d, ebp
  0007b	ba 01 00 00 00	 mov	 edx, 1
  00080	48 8b cf	 mov	 rcx, rdi
  00083	e8 00 00 00 00	 call	 lua_seti
; Line 365
  00088	eb 0a		 jmp	 SHORT $LN13@auxsort
$LN14@auxsort:
; Line 366
  0008a	ba fd ff ff ff	 mov	 edx, -3
  0008f	e8 00 00 00 00	 call	 lua_settop
$LN13@auxsort:
; Line 367
  00094	8b dd		 mov	 ebx, ebp
  00096	2b de		 sub	 ebx, esi
  00098	83 fb 01	 cmp	 ebx, 1
  0009b	0f 84 c2 01 00
	00		 je	 $LN49@auxsort
; Line 369
  000a1	83 fb 64	 cmp	 ebx, 100		; 00000064H
  000a4	72 1e		 jb	 SHORT $LN10@auxsort
  000a6	8b 44 24 20	 mov	 eax, DWORD PTR rnd$GSCopy$1$[rsp]
  000aa	85 c0		 test	 eax, eax
  000ac	74 16		 je	 SHORT $LN10@auxsort
; Line 372
  000ae	33 d2		 xor	 edx, edx
  000b0	44 8b c3	 mov	 r8d, ebx
  000b3	41 c1 e8 02	 shr	 r8d, 2
  000b7	43 8d 0c 00	 lea	 ecx, DWORD PTR [r8+r8]
  000bb	f7 f1		 div	 ecx
  000bd	03 d6		 add	 edx, esi
  000bf	41 03 d0	 add	 edx, r8d
  000c2	eb 05		 jmp	 SHORT $LN9@auxsort
$LN10@auxsort:
; Line 370
  000c4	8d 14 2e	 lea	 edx, DWORD PTR [rsi+rbp]
  000c7	d1 ea		 shr	 edx, 1
$LN9@auxsort:
; Line 373
  000c9	8b c2		 mov	 eax, edx
  000cb	44 8b c2	 mov	 r8d, edx
  000ce	48 8b cf	 mov	 rcx, rdi
  000d1	ba 01 00 00 00	 mov	 edx, 1
  000d6	48 89 44 24 28	 mov	 QWORD PTR tv388[rsp], rax
  000db	e8 00 00 00 00	 call	 lua_geti
; Line 374
  000e0	44 8b c6	 mov	 r8d, esi
  000e3	ba 01 00 00 00	 mov	 edx, 1
  000e8	48 8b cf	 mov	 rcx, rdi
  000eb	e8 00 00 00 00	 call	 lua_geti
; Line 375
  000f0	41 83 c8 ff	 or	 r8d, -1
  000f4	48 8b cf	 mov	 rcx, rdi
  000f7	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  000fb	e8 00 00 00 00	 call	 sort_comp
; Line 376
  00100	48 8b cf	 mov	 rcx, rdi
  00103	85 c0		 test	 eax, eax
  00105	74 21		 je	 SHORT $LN8@auxsort
  00107	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv388[rsp]
  0010c	ba 01 00 00 00	 mov	 edx, 1
  00111	e8 00 00 00 00	 call	 lua_seti
  00116	44 8b c6	 mov	 r8d, esi
  00119	ba 01 00 00 00	 mov	 edx, 1
  0011e	48 8b cf	 mov	 rcx, rdi
  00121	e8 00 00 00 00	 call	 lua_seti
; Line 377
  00126	eb 5d		 jmp	 SHORT $LN5@auxsort
$LN8@auxsort:
; Line 378
  00128	ba fe ff ff ff	 mov	 edx, -2
  0012d	e8 00 00 00 00	 call	 lua_settop
; Line 379
  00132	44 8b c5	 mov	 r8d, ebp
  00135	ba 01 00 00 00	 mov	 edx, 1
  0013a	48 8b cf	 mov	 rcx, rdi
  0013d	e8 00 00 00 00	 call	 lua_geti
; Line 380
  00142	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00148	83 ca ff	 or	 edx, -1
  0014b	48 8b cf	 mov	 rcx, rdi
  0014e	e8 00 00 00 00	 call	 sort_comp
; Line 381
  00153	48 8b cf	 mov	 rcx, rdi
  00156	85 c0		 test	 eax, eax
  00158	74 21		 je	 SHORT $LN6@auxsort
  0015a	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv388[rsp]
  0015f	ba 01 00 00 00	 mov	 edx, 1
  00164	e8 00 00 00 00	 call	 lua_seti
  00169	44 8b c5	 mov	 r8d, ebp
  0016c	ba 01 00 00 00	 mov	 edx, 1
  00171	48 8b cf	 mov	 rcx, rdi
  00174	e8 00 00 00 00	 call	 lua_seti
; Line 382
  00179	eb 0a		 jmp	 SHORT $LN5@auxsort
$LN6@auxsort:
; Line 383
  0017b	ba fd ff ff ff	 mov	 edx, -3
  00180	e8 00 00 00 00	 call	 lua_settop
$LN5@auxsort:
; Line 385
  00185	83 fb 02	 cmp	 ebx, 2
  00188	0f 84 d5 00 00
	00		 je	 $LN49@auxsort
; Line 387
  0018e	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv388[rsp]
  00193	ba 01 00 00 00	 mov	 edx, 1
  00198	48 8b cf	 mov	 rcx, rdi
  0019b	e8 00 00 00 00	 call	 lua_geti
; Line 388
  001a0	83 ca ff	 or	 edx, -1
  001a3	48 8b cf	 mov	 rcx, rdi
  001a6	e8 00 00 00 00	 call	 lua_pushvalue
; Line 389
  001ab	8d 45 ff	 lea	 eax, DWORD PTR [rbp-1]
  001ae	ba 01 00 00 00	 mov	 edx, 1
  001b3	44 8b c0	 mov	 r8d, eax
  001b6	48 8b cf	 mov	 rcx, rdi
  001b9	8b d8		 mov	 ebx, eax
  001bb	e8 00 00 00 00	 call	 lua_geti
; Line 390
  001c0	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv388[rsp]
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b cf	 mov	 rcx, rdi
  001cd	e8 00 00 00 00	 call	 lua_seti
  001d2	44 8b c3	 mov	 r8d, ebx
  001d5	ba 01 00 00 00	 mov	 edx, 1
  001da	48 8b cf	 mov	 rcx, rdi
  001dd	e8 00 00 00 00	 call	 lua_seti
; Line 391
  001e2	44 8b c5	 mov	 r8d, ebp
  001e5	8b d6		 mov	 edx, esi
  001e7	48 8b cf	 mov	 rcx, rdi
  001ea	e8 00 00 00 00	 call	 partition
; Line 394
  001ef	44 8b 4c 24 20	 mov	 r9d, DWORD PTR rnd$GSCopy$1$[rsp]
  001f4	8b cd		 mov	 ecx, ebp
  001f6	8b d8		 mov	 ebx, eax
  001f8	2b c6		 sub	 eax, esi
  001fa	2b cb		 sub	 ecx, ebx
  001fc	89 44 24 30	 mov	 DWORD PTR n$1$[rsp], eax
  00200	89 4c 24 28	 mov	 DWORD PTR tv385[rsp], ecx
  00204	3b c1		 cmp	 eax, ecx
  00206	48 8b cf	 mov	 rcx, rdi
  00209	73 14		 jae	 SHORT $LN3@auxsort
  0020b	44 8d 43 ff	 lea	 r8d, DWORD PTR [rbx-1]
  0020f	8b d6		 mov	 edx, esi
  00211	e8 00 00 00 00	 call	 auxsort
; Line 398
  00216	8b 4c 24 30	 mov	 ecx, DWORD PTR n$1$[rsp]
  0021a	8d 73 01	 lea	 esi, DWORD PTR [rbx+1]
  0021d	eb 12		 jmp	 SHORT $LN2@auxsort
$LN3@auxsort:
; Line 399
  0021f	8d 53 01	 lea	 edx, DWORD PTR [rbx+1]
  00222	44 8b c5	 mov	 r8d, ebp
  00225	e8 00 00 00 00	 call	 auxsort
; Line 400
  0022a	8b 4c 24 28	 mov	 ecx, DWORD PTR tv385[rsp]
; Line 401
  0022e	8d 6b ff	 lea	 ebp, DWORD PTR [rbx-1]
$LN2@auxsort:
; Line 403
  00231	8b c5		 mov	 eax, ebp
  00233	2b c6		 sub	 eax, esi
  00235	c1 e8 07	 shr	 eax, 7
  00238	3b c1		 cmp	 eax, ecx
  0023a	76 1f		 jbe	 SHORT $LN1@auxsort
; Line 404
  0023c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clock
  00242	33 c9		 xor	 ecx, ecx
  00244	8b d8		 mov	 ebx, eax
  00246	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64
  0024c	48 89 44 24 3c	 mov	 QWORD PTR buff$1[rsp+4], rax
  00251	03 44 24 40	 add	 eax, DWORD PTR buff$1[rsp+8]
  00255	03 c3		 add	 eax, ebx
  00257	89 44 24 20	 mov	 DWORD PTR rnd$GSCopy$1$[rsp], eax
$LN1@auxsort:
; Line 357
  0025b	3b f5		 cmp	 esi, ebp
  0025d	0f 82 ce fd ff
	ff		 jb	 $LL16@auxsort
$LN49@auxsort:
  00263	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
; Line 406
  00268	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0026d	48 33 cc	 xor	 rcx, rsp
  00270	e8 00 00 00 00	 call	 __security_check_cookie
  00275	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00279	5f		 pop	 rdi
  0027a	5e		 pop	 rsi
  0027b	5d		 pop	 rbp
$LN50@auxsort:
  0027c	c3		 ret	 0
auxsort	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT choosePivot
_TEXT	SEGMENT
lo$ = 8
up$ = 16
rnd$ = 24
choosePivot PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 344
  00000	44 8b d2	 mov	 r10d, edx
; Line 346
  00003	33 d2		 xor	 edx, edx
  00005	41 8b c0	 mov	 eax, r8d
  00008	44 2b d1	 sub	 r10d, ecx
  0000b	41 c1 ea 02	 shr	 r10d, 2
  0000f	47 8d 0c 12	 lea	 r9d, DWORD PTR [r10+r10]
  00013	41 f7 f1	 div	 r9d
  00016	41 8d 04 12	 lea	 eax, DWORD PTR [r10+rdx]
  0001a	03 c1		 add	 eax, ecx
; Line 349
  0001c	c3		 ret	 0
choosePivot ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT partition
_TEXT	SEGMENT
L$ = 80
lo$ = 88
up$ = 96
partition PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 307
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 309
  00018	45 8d 70 ff	 lea	 r14d, DWORD PTR [r8-1]
  0001c	8b fa		 mov	 edi, edx
  0001e	48 8b d9	 mov	 rbx, rcx
  00021	41 8b f6	 mov	 esi, r14d
  00024	45 33 ff	 xor	 r15d, r15d
  00027	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL7@partition:
; Line 313
  00030	ff c7		 inc	 edi
  00032	ba 01 00 00 00	 mov	 edx, 1
  00037	48 8b cb	 mov	 rcx, rbx
  0003a	44 8b c7	 mov	 r8d, edi
  0003d	e8 00 00 00 00	 call	 lua_geti
  00042	ba 02 00 00 00	 mov	 edx, 2
  00047	48 8b cb	 mov	 rcx, rbx
  0004a	e8 00 00 00 00	 call	 lua_type
  0004f	48 8b cb	 mov	 rcx, rbx
  00052	85 c0		 test	 eax, eax
  00054	75 14		 jne	 SHORT $LN13@partition
  00056	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  0005a	44 8d 40 fe	 lea	 r8d, QWORD PTR [rax-2]
  0005e	83 ca ff	 or	 edx, -1
  00061	e8 00 00 00 00	 call	 lua_compare
  00066	8b e8		 mov	 ebp, eax
  00068	eb 56		 jmp	 SHORT $LN12@partition
$LN13@partition:
  0006a	ba 02 00 00 00	 mov	 edx, 2
  0006f	e8 00 00 00 00	 call	 lua_pushvalue
  00074	ba fe ff ff ff	 mov	 edx, -2
  00079	48 8b cb	 mov	 rcx, rbx
  0007c	e8 00 00 00 00	 call	 lua_pushvalue
  00081	ba fc ff ff ff	 mov	 edx, -4
  00086	48 8b cb	 mov	 rcx, rbx
  00089	e8 00 00 00 00	 call	 lua_pushvalue
  0008e	45 33 c9	 xor	 r9d, r9d
  00091	48 8b cb	 mov	 rcx, rbx
  00094	41 8d 51 02	 lea	 edx, QWORD PTR [r9+2]
  00098	45 8d 41 01	 lea	 r8d, QWORD PTR [r9+1]
  0009c	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  000a1	e8 00 00 00 00	 call	 lua_callk
  000a6	83 ca ff	 or	 edx, -1
  000a9	48 8b cb	 mov	 rcx, rbx
  000ac	e8 00 00 00 00	 call	 lua_toboolean
  000b1	ba fe ff ff ff	 mov	 edx, -2
  000b6	48 8b cb	 mov	 rcx, rbx
  000b9	8b e8		 mov	 ebp, eax
  000bb	e8 00 00 00 00	 call	 lua_settop
$LN12@partition:
  000c0	85 ed		 test	 ebp, ebp
  000c2	74 2c		 je	 SHORT $LL4@partition
; Line 314
  000c4	41 3b fe	 cmp	 edi, r14d
  000c7	75 0f		 jne	 SHORT $LN5@partition
; Line 315
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@OFHMGIPD@invalid?5order?5function?5for?5sorti@
  000d0	48 8b cb	 mov	 rcx, rbx
  000d3	e8 00 00 00 00	 call	 luaL_error
$LN5@partition:
; Line 316
  000d8	ba fe ff ff ff	 mov	 edx, -2
  000dd	48 8b cb	 mov	 rcx, rbx
  000e0	e8 00 00 00 00	 call	 lua_settop
; Line 317
  000e5	e9 46 ff ff ff	 jmp	 $LL7@partition
  000ea	66 0f 1f 44 00
	00		 npad	 6
$LL4@partition:
; Line 320
  000f0	ff ce		 dec	 esi
  000f2	ba 01 00 00 00	 mov	 edx, 1
  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	44 8b c6	 mov	 r8d, esi
  000fd	e8 00 00 00 00	 call	 lua_geti
  00102	ba 02 00 00 00	 mov	 edx, 2
  00107	48 8b cb	 mov	 rcx, rbx
  0010a	e8 00 00 00 00	 call	 lua_type
  0010f	48 8b cb	 mov	 rcx, rbx
  00112	85 c0		 test	 eax, eax
  00114	75 14		 jne	 SHORT $LN17@partition
  00116	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  0011a	8d 50 fd	 lea	 edx, QWORD PTR [rax-3]
  0011d	41 83 c8 ff	 or	 r8d, -1
  00121	e8 00 00 00 00	 call	 lua_compare
  00126	8b e8		 mov	 ebp, eax
  00128	eb 56		 jmp	 SHORT $LN16@partition
$LN17@partition:
  0012a	ba 02 00 00 00	 mov	 edx, 2
  0012f	e8 00 00 00 00	 call	 lua_pushvalue
  00134	ba fc ff ff ff	 mov	 edx, -4
  00139	48 8b cb	 mov	 rcx, rbx
  0013c	e8 00 00 00 00	 call	 lua_pushvalue
  00141	ba fd ff ff ff	 mov	 edx, -3
  00146	48 8b cb	 mov	 rcx, rbx
  00149	e8 00 00 00 00	 call	 lua_pushvalue
  0014e	45 33 c9	 xor	 r9d, r9d
  00151	48 8b cb	 mov	 rcx, rbx
  00154	41 8d 51 02	 lea	 edx, QWORD PTR [r9+2]
  00158	45 8d 41 01	 lea	 r8d, QWORD PTR [r9+1]
  0015c	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00161	e8 00 00 00 00	 call	 lua_callk
  00166	83 ca ff	 or	 edx, -1
  00169	48 8b cb	 mov	 rcx, rbx
  0016c	e8 00 00 00 00	 call	 lua_toboolean
  00171	ba fe ff ff ff	 mov	 edx, -2
  00176	48 8b cb	 mov	 rcx, rbx
  00179	8b e8		 mov	 ebp, eax
  0017b	e8 00 00 00 00	 call	 lua_settop
$LN16@partition:
  00180	85 ed		 test	 ebp, ebp
  00182	74 25		 je	 SHORT $LN3@partition
; Line 321
  00184	3b f7		 cmp	 esi, edi
  00186	73 0f		 jae	 SHORT $LN2@partition
; Line 322
  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@OFHMGIPD@invalid?5order?5function?5for?5sorti@
  0018f	48 8b cb	 mov	 rcx, rbx
  00192	e8 00 00 00 00	 call	 luaL_error
$LN2@partition:
; Line 323
  00197	ba fe ff ff ff	 mov	 edx, -2
  0019c	48 8b cb	 mov	 rcx, rbx
  0019f	e8 00 00 00 00	 call	 lua_settop
; Line 324
  001a4	e9 47 ff ff ff	 jmp	 $LL4@partition
$LN3@partition:
; Line 334
  001a9	48 8b cb	 mov	 rcx, rbx
  001ac	3b f7		 cmp	 esi, edi
  001ae	72 22		 jb	 SHORT $LN28@partition
  001b0	44 8b c7	 mov	 r8d, edi
  001b3	ba 01 00 00 00	 mov	 edx, 1
  001b8	e8 00 00 00 00	 call	 lua_seti
  001bd	44 8b c6	 mov	 r8d, esi
  001c0	ba 01 00 00 00	 mov	 edx, 1
  001c5	48 8b cb	 mov	 rcx, rbx
  001c8	e8 00 00 00 00	 call	 lua_seti
; Line 335
  001cd	e9 5e fe ff ff	 jmp	 $LL7@partition
$LN28@partition:
; Line 328
  001d2	ba fe ff ff ff	 mov	 edx, -2
  001d7	e8 00 00 00 00	 call	 lua_settop
; Line 330
  001dc	45 8b c6	 mov	 r8d, r14d
  001df	ba 01 00 00 00	 mov	 edx, 1
  001e4	48 8b cb	 mov	 rcx, rbx
  001e7	e8 00 00 00 00	 call	 lua_seti
  001ec	44 8b c7	 mov	 r8d, edi
  001ef	ba 01 00 00 00	 mov	 edx, 1
  001f4	48 8b cb	 mov	 rcx, rbx
  001f7	e8 00 00 00 00	 call	 lua_seti
; Line 336
  001fc	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00201	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00206	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0020b	8b c7		 mov	 eax, edi
  0020d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00211	41 5f		 pop	 r15
  00213	41 5e		 pop	 r14
  00215	5f		 pop	 rdi
  00216	c3		 ret	 0
partition ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT sort_comp
_TEXT	SEGMENT
L$ = 64
a$ = 72
b$ = 80
sort_comp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 283
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	8b f2		 mov	 esi, edx
; Line 284
  00011	ba 02 00 00 00	 mov	 edx, 2
  00016	41 8b d8	 mov	 ebx, r8d
  00019	48 8b f9	 mov	 rdi, rcx
  0001c	e8 00 00 00 00	 call	 lua_type
; Line 285
  00021	48 8b cf	 mov	 rcx, rdi
  00024	85 c0		 test	 eax, eax
  00026	75 1d		 jne	 SHORT $LN2@sort_comp
  00028	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  0002c	44 8b c3	 mov	 r8d, ebx
  0002f	8b d6		 mov	 edx, esi
; Line 296
  00031	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00036	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0003b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003f	5f		 pop	 rdi
; Line 285
  00040	e9 00 00 00 00	 jmp	 lua_compare
$LN2@sort_comp:
; Line 288
  00045	ba 02 00 00 00	 mov	 edx, 2
  0004a	e8 00 00 00 00	 call	 lua_pushvalue
; Line 289
  0004f	8d 56 ff	 lea	 edx, DWORD PTR [rsi-1]
  00052	48 8b cf	 mov	 rcx, rdi
  00055	e8 00 00 00 00	 call	 lua_pushvalue
; Line 290
  0005a	8d 53 fe	 lea	 edx, DWORD PTR [rbx-2]
  0005d	48 8b cf	 mov	 rcx, rdi
  00060	e8 00 00 00 00	 call	 lua_pushvalue
; Line 291
  00065	45 33 c9	 xor	 r9d, r9d
  00068	48 8b cf	 mov	 rcx, rdi
  0006b	41 8d 51 02	 lea	 edx, QWORD PTR [r9+2]
  0006f	45 8d 41 01	 lea	 r8d, QWORD PTR [r9+1]
  00073	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0007c	e8 00 00 00 00	 call	 lua_callk
; Line 292
  00081	83 ca ff	 or	 edx, -1
  00084	48 8b cf	 mov	 rcx, rdi
  00087	e8 00 00 00 00	 call	 lua_toboolean
; Line 293
  0008c	ba fe ff ff ff	 mov	 edx, -2
  00091	48 8b cf	 mov	 rcx, rdi
  00094	8b d8		 mov	 ebx, eax
  00096	e8 00 00 00 00	 call	 lua_settop
; Line 296
  0009b	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000a0	8b c3		 mov	 eax, ebx
  000a2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ab	5f		 pop	 rdi
  000ac	c3		 ret	 0
sort_comp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT set2
_TEXT	SEGMENT
L$ = 48
i$ = 56
j$ = 64
set2	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 273
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	41 8b d8	 mov	 ebx, r8d
; Line 274
  0000d	44 8b c2	 mov	 r8d, edx
  00010	ba 01 00 00 00	 mov	 edx, 1
  00015	48 8b f9	 mov	 rdi, rcx
  00018	e8 00 00 00 00	 call	 lua_seti
; Line 275
  0001d	44 8b c3	 mov	 r8d, ebx
  00020	ba 01 00 00 00	 mov	 edx, 1
  00025	48 8b cf	 mov	 rcx, rdi
; Line 276
  00028	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5f		 pop	 rdi
; Line 275
  00032	e9 00 00 00 00	 jmp	 lua_seti
set2	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT l_randomizePivot
_TEXT	SEGMENT
buff$ = 32
__$ArrayPad$ = 48
l_randomizePivot PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 254
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000d	48 33 c4	 xor	 rax, rsp
  00010	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 255
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clock
; Line 256
  0001b	33 c9		 xor	 ecx, ecx
  0001d	8b d8		 mov	 ebx, eax
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64
  00025	48 89 44 24 24	 mov	 QWORD PTR buff$[rsp+4], rax
; Line 262
  0002a	03 44 24 28	 add	 eax, DWORD PTR buff$[rsp+8]
  0002e	03 c3		 add	 eax, ebx
; Line 264
  00030	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00035	48 33 cc	 xor	 rcx, rsp
  00038	e8 00 00 00 00	 call	 __security_check_cookie
  0003d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00041	5b		 pop	 rbx
  00042	c3		 ret	 0
l_randomizePivot ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT time
_TEXT	SEGMENT
_Time$ = 8
time	PROC						; COMDAT
; File e:\microsoft visual studio 12.0\vc\include\time.inl
; Line 133
  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__time64
time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT unpack
_TEXT	SEGMENT
L$ = 48
unpack	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 207
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 209
  0000f	ba 02 00 00 00	 mov	 edx, 2
  00014	48 8b f1	 mov	 rsi, rcx
  00017	44 8d 42 ff	 lea	 r8d, QWORD PTR [rdx-1]
  0001b	e8 00 00 00 00	 call	 luaL_optinteger
; Line 210
  00020	ba 03 00 00 00	 mov	 edx, 3
  00025	48 8b ce	 mov	 rcx, rsi
  00028	48 8b d8	 mov	 rbx, rax
  0002b	e8 00 00 00 00	 call	 lua_type
  00030	48 8b ce	 mov	 rcx, rsi
  00033	85 c0		 test	 eax, eax
  00035	7f 0c		 jg	 SHORT $LN9@unpack
  00037	ba 01 00 00 00	 mov	 edx, 1
  0003c	e8 00 00 00 00	 call	 luaL_len
  00041	eb 0a		 jmp	 SHORT $LN16@unpack
$LN9@unpack:
  00043	ba 03 00 00 00	 mov	 edx, 3
  00048	e8 00 00 00 00	 call	 luaL_checkinteger
$LN16@unpack:
  0004d	48 8b f8	 mov	 rdi, rax
; Line 211
  00050	48 3b d8	 cmp	 rbx, rax
  00053	7e 12		 jle	 SHORT $LN6@unpack
  00055	33 c0		 xor	 eax, eax
; Line 220
  00057	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0005c	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
$LN6@unpack:
  00067	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
; Line 212
  0006c	48 8b ef	 mov	 rbp, rdi
  0006f	48 2b eb	 sub	 rbp, rbx
; Line 213
  00072	48 81 fd ff ff
	ff 7f		 cmp	 rbp, 2147483647		; 7fffffffH
  00079	73 42		 jae	 SHORT $LN4@unpack
  0007b	8d 55 01	 lea	 edx, DWORD PTR [rbp+1]
  0007e	48 8b ce	 mov	 rcx, rsi
  00081	e8 00 00 00 00	 call	 lua_checkstack
  00086	85 c0		 test	 eax, eax
  00088	74 33		 je	 SHORT $LN4@unpack
; Line 215
  0008a	48 3b df	 cmp	 rbx, rdi
  0008d	7d 19		 jge	 SHORT $LN1@unpack
  0008f	90		 npad	 1
$LL3@unpack:
; Line 216
  00090	4c 8b c3	 mov	 r8, rbx
  00093	ba 01 00 00 00	 mov	 edx, 1
  00098	48 8b ce	 mov	 rcx, rsi
  0009b	e8 00 00 00 00	 call	 lua_geti
  000a0	48 ff c3	 inc	 rbx
  000a3	48 3b df	 cmp	 rbx, rdi
  000a6	7c e8		 jl	 SHORT $LL3@unpack
$LN1@unpack:
; Line 218
  000a8	4c 8b c7	 mov	 r8, rdi
  000ab	ba 01 00 00 00	 mov	 edx, 1
  000b0	48 8b ce	 mov	 rcx, rsi
  000b3	e8 00 00 00 00	 call	 lua_geti
; Line 219
  000b8	8d 45 01	 lea	 eax, DWORD PTR [rbp+1]
  000bb	eb 0f		 jmp	 SHORT $LN15@unpack
$LN4@unpack:
; Line 214
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@EDBCOFHM@too?5many?5results?5to?5unpack?$AA@
  000c4	48 8b ce	 mov	 rcx, rsi
  000c7	e8 00 00 00 00	 call	 luaL_error
$LN15@unpack:
; Line 220
  000cc	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  000d1	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000d6	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000db	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000df	5f		 pop	 rdi
  000e0	c3		 ret	 0
unpack	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT pack
_TEXT	SEGMENT
L$ = 48
pack	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 194
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f1	 mov	 rsi, rcx
; Line 196
  0000d	e8 00 00 00 00	 call	 lua_gettop
; Line 197
  00012	41 b8 01 00 00
	00		 mov	 r8d, 1
  00018	48 63 e8	 movsxd	 rbp, eax
  0001b	48 8b ce	 mov	 rcx, rsi
  0001e	8b d5		 mov	 edx, ebp
  00020	e8 00 00 00 00	 call	 lua_createtable
; Line 198
  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	48 8b ce	 mov	 rcx, rsi
  0002d	44 8b c2	 mov	 r8d, edx
  00030	e8 00 00 00 00	 call	 lua_rotate
; Line 199
  00035	83 fd 01	 cmp	 ebp, 1
  00038	7c 38		 jl	 SHORT $LN1@pack
; Line 196
  0003a	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003f	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00044	8b fd		 mov	 edi, ebp
  00046	48 8b dd	 mov	 rbx, rbp
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@pack:
; Line 200
  00050	4c 8b c3	 mov	 r8, rbx
  00053	ba 01 00 00 00	 mov	 edx, 1
  00058	48 8b ce	 mov	 rcx, rsi
  0005b	e8 00 00 00 00	 call	 lua_seti
  00060	48 ff cb	 dec	 rbx
  00063	48 ff cf	 dec	 rdi
  00066	75 e8		 jne	 SHORT $LL3@pack
  00068	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN1@pack:
; Line 201
  00072	48 8b d5	 mov	 rdx, rbp
  00075	48 8b ce	 mov	 rcx, rsi
  00078	e8 00 00 00 00	 call	 lua_pushinteger
; Line 202
  0007d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  00084	ba 01 00 00 00	 mov	 edx, 1
  00089	48 8b ce	 mov	 rcx, rsi
  0008c	e8 00 00 00 00	 call	 lua_setfield
; Line 204
  00091	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009f	5e		 pop	 rsi
  000a0	c3		 ret	 0
pack	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT tconcat
_TEXT	SEGMENT
lsep$ = 32
b$ = 48
__$ArrayPad$ = 8272
L$ = 8304
tconcat	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 169
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	b8 60 20 00 00	 mov	 eax, 8288		; 00002060H
  00015	e8 00 00 00 00	 call	 __chkstk
  0001a	48 2b e0	 sub	 rsp, rax
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 50
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 171
  0002f	ba 01 00 00 00	 mov	 edx, 1
  00034	48 8b d9	 mov	 rbx, rcx
  00037	e8 00 00 00 00	 call	 lua_type
  0003c	83 f8 05	 cmp	 eax, 5
  0003f	74 74		 je	 SHORT $LN9@tconcat
  00041	ba 01 00 00 00	 mov	 edx, 1
  00046	48 8b cb	 mov	 rcx, rbx
  00049	e8 00 00 00 00	 call	 lua_getmetatable
  0004e	85 c0		 test	 eax, eax
  00050	74 4f		 je	 SHORT $LN13@tconcat
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NHABFFHN@__index?$AA@
  00059	48 8b cb	 mov	 rcx, rbx
  0005c	e8 00 00 00 00	 call	 lua_pushstring
  00061	ba fe ff ff ff	 mov	 edx, -2
  00066	48 8b cb	 mov	 rcx, rbx
  00069	e8 00 00 00 00	 call	 lua_rawget
  0006e	85 c0		 test	 eax, eax
  00070	74 2f		 je	 SHORT $LN13@tconcat
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MNDELLDN@__len?$AA@
  00079	48 8b cb	 mov	 rcx, rbx
  0007c	e8 00 00 00 00	 call	 lua_pushstring
  00081	ba fd ff ff ff	 mov	 edx, -3
  00086	48 8b cb	 mov	 rcx, rbx
  00089	e8 00 00 00 00	 call	 lua_rawget
  0008e	85 c0		 test	 eax, eax
  00090	74 0f		 je	 SHORT $LN13@tconcat
  00092	ba fc ff ff ff	 mov	 edx, -4
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	e8 00 00 00 00	 call	 lua_settop
  0009f	eb 14		 jmp	 SHORT $LN9@tconcat
$LN13@tconcat:
  000a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@DAKFMHIM@table?5expected?$AA@
  000a8	ba 01 00 00 00	 mov	 edx, 1
  000ad	48 8b cb	 mov	 rcx, rbx
  000b0	e8 00 00 00 00	 call	 luaL_argerror
$LN9@tconcat:
  000b5	ba 01 00 00 00	 mov	 edx, 1
  000ba	48 8b cb	 mov	 rcx, rbx
  000bd	e8 00 00 00 00	 call	 luaL_len
; Line 173
  000c2	4c 8d 4c 24 20	 lea	 r9, QWORD PTR lsep$[rsp]
  000c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000ce	ba 02 00 00 00	 mov	 edx, 2
  000d3	48 8b cb	 mov	 rcx, rbx
  000d6	48 8b f0	 mov	 rsi, rax
  000d9	e8 00 00 00 00	 call	 luaL_optlstring
; Line 174
  000de	ba 03 00 00 00	 mov	 edx, 3
  000e3	48 8b cb	 mov	 rcx, rbx
  000e6	44 8d 42 fe	 lea	 r8d, QWORD PTR [rdx-2]
  000ea	48 8b e8	 mov	 rbp, rax
  000ed	e8 00 00 00 00	 call	 luaL_optinteger
; Line 175
  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	48 8b f8	 mov	 rdi, rax
  000fd	e8 00 00 00 00	 call	 lua_type
  00102	85 c0		 test	 eax, eax
  00104	7e 10		 jle	 SHORT $LN8@tconcat
  00106	ba 04 00 00 00	 mov	 edx, 4
  0010b	48 8b cb	 mov	 rcx, rbx
  0010e	e8 00 00 00 00	 call	 luaL_checkinteger
  00113	48 8b f0	 mov	 rsi, rax
$LN8@tconcat:
; Line 176
  00116	48 8d 54 24 30	 lea	 rdx, QWORD PTR b$[rsp]
  0011b	48 8b cb	 mov	 rcx, rbx
  0011e	e8 00 00 00 00	 call	 luaL_buffinit
; Line 177
  00123	48 3b fe	 cmp	 rdi, rsi
  00126	7d 75		 jge	 SHORT $LN33@tconcat
  00128	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@tconcat:
; Line 178
  00130	4c 8b c7	 mov	 r8, rdi
  00133	ba 01 00 00 00	 mov	 edx, 1
  00138	48 8b cb	 mov	 rcx, rbx
  0013b	e8 00 00 00 00	 call	 lua_geti
  00140	83 ca ff	 or	 edx, -1
  00143	48 8b cb	 mov	 rcx, rbx
  00146	e8 00 00 00 00	 call	 lua_isstring
  0014b	85 c0		 test	 eax, eax
  0014d	75 2a		 jne	 SHORT $LN23@tconcat
  0014f	83 ca ff	 or	 edx, -1
  00152	48 8b cb	 mov	 rcx, rbx
  00155	e8 00 00 00 00	 call	 lua_type
  0015a	48 8b cb	 mov	 rcx, rbx
  0015d	8b d0		 mov	 edx, eax
  0015f	e8 00 00 00 00	 call	 lua_typename
  00164	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@OJJECDJJ@invalid?5value?5?$CI?$CFs?$CJ?5at?5index?5?$CFd?5i@
  0016b	4c 8b cf	 mov	 r9, rdi
  0016e	4c 8b c0	 mov	 r8, rax
  00171	48 8b cb	 mov	 rcx, rbx
  00174	e8 00 00 00 00	 call	 luaL_error
$LN23@tconcat:
  00179	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$[rsp]
  0017e	e8 00 00 00 00	 call	 luaL_addvalue
; Line 179
  00183	4c 8b 44 24 20	 mov	 r8, QWORD PTR lsep$[rsp]
  00188	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$[rsp]
  0018d	48 8b d5	 mov	 rdx, rbp
  00190	e8 00 00 00 00	 call	 luaL_addlstring
  00195	48 ff c7	 inc	 rdi
  00198	48 3b fe	 cmp	 rdi, rsi
  0019b	7c 93		 jl	 SHORT $LL4@tconcat
$LN33@tconcat:
; Line 181
  0019d	75 53		 jne	 SHORT $LN27@tconcat
; Line 182
  0019f	4c 8b c7	 mov	 r8, rdi
  001a2	ba 01 00 00 00	 mov	 edx, 1
  001a7	48 8b cb	 mov	 rcx, rbx
  001aa	e8 00 00 00 00	 call	 lua_geti
  001af	83 ca ff	 or	 edx, -1
  001b2	48 8b cb	 mov	 rcx, rbx
  001b5	e8 00 00 00 00	 call	 lua_isstring
  001ba	85 c0		 test	 eax, eax
  001bc	75 2a		 jne	 SHORT $LN26@tconcat
  001be	83 ca ff	 or	 edx, -1
  001c1	48 8b cb	 mov	 rcx, rbx
  001c4	e8 00 00 00 00	 call	 lua_type
  001c9	48 8b cb	 mov	 rcx, rbx
  001cc	8b d0		 mov	 edx, eax
  001ce	e8 00 00 00 00	 call	 lua_typename
  001d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@OJJECDJJ@invalid?5value?5?$CI?$CFs?$CJ?5at?5index?5?$CFd?5i@
  001da	4c 8b cf	 mov	 r9, rdi
  001dd	4c 8b c0	 mov	 r8, rax
  001e0	48 8b cb	 mov	 rcx, rbx
  001e3	e8 00 00 00 00	 call	 luaL_error
$LN26@tconcat:
  001e8	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$[rsp]
  001ed	e8 00 00 00 00	 call	 luaL_addvalue
$LN27@tconcat:
; Line 183
  001f2	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$[rsp]
  001f7	e8 00 00 00 00	 call	 luaL_pushresult
; Line 184
  001fc	b8 01 00 00 00	 mov	 eax, 1
; Line 185
  00201	48 8b 8c 24 50
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00209	48 33 cc	 xor	 rcx, rsp
  0020c	e8 00 00 00 00	 call	 __security_check_cookie
  00211	4c 8d 9c 24 60
	20 00 00	 lea	 r11, QWORD PTR [rsp+8288]
  00219	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  0021d	49 8b 6b 20	 mov	 rbp, QWORD PTR [r11+32]
  00221	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  00225	49 8b e3	 mov	 rsp, r11
  00228	5f		 pop	 rdi
  00229	c3		 ret	 0
tconcat	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT addfield
_TEXT	SEGMENT
L$ = 48
b$ = 56
i$ = 64
addfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 160
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx
; Line 161
  00012	ba 01 00 00 00	 mov	 edx, 1
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b d9	 mov	 rbx, rcx
  0001d	e8 00 00 00 00	 call	 lua_geti
; Line 162
  00022	83 ca ff	 or	 edx, -1
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 lua_isstring
  0002d	85 c0		 test	 eax, eax
  0002f	75 2a		 jne	 SHORT $LN1@addfield
; Line 164
  00031	83 ca ff	 or	 edx, -1
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 lua_type
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	8b d0		 mov	 edx, eax
  00041	e8 00 00 00 00	 call	 lua_typename
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@OJJECDJJ@invalid?5value?5?$CI?$CFs?$CJ?5at?5index?5?$CFd?5i@
  0004d	4c 8b ce	 mov	 r9, rsi
  00050	4c 8b c0	 mov	 r8, rax
  00053	48 8b cb	 mov	 rcx, rbx
  00056	e8 00 00 00 00	 call	 luaL_error
$LN1@addfield:
; Line 165
  0005b	48 8b cf	 mov	 rcx, rdi
; Line 166
  0005e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00063	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
; Line 165
  0006d	e9 00 00 00 00	 jmp	 luaL_addvalue
addfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT tmove
_TEXT	SEGMENT
L$ = 64
tmove	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 128
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 129
  00018	ba 02 00 00 00	 mov	 edx, 2
  0001d	48 8b d9	 mov	 rbx, rcx
  00020	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 130
  00025	ba 03 00 00 00	 mov	 edx, 3
  0002a	48 8b cb	 mov	 rcx, rbx
  0002d	48 8b f0	 mov	 rsi, rax
  00030	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 131
  00035	ba 04 00 00 00	 mov	 edx, 4
  0003a	48 8b cb	 mov	 rcx, rbx
  0003d	4c 8b f0	 mov	 r14, rax
  00040	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 132
  00045	bd 05 00 00 00	 mov	 ebp, 5
  0004a	48 8b cb	 mov	 rcx, rbx
  0004d	8b d5		 mov	 edx, ebp
  0004f	48 8b f8	 mov	 rdi, rax
  00052	e8 00 00 00 00	 call	 lua_type
; Line 133
  00057	8d 55 fc	 lea	 edx, QWORD PTR [rbp-4]
  0005a	41 bf 01 00 00
	00		 mov	 r15d, 1
  00060	85 c0		 test	 eax, eax
  00062	48 8b cb	 mov	 rcx, rbx
  00065	44 0f 4f fd	 cmovg	 r15d, ebp
  00069	e8 00 00 00 00	 call	 lua_type
  0006e	3b c5		 cmp	 eax, ebp
  00070	74 4e		 je	 SHORT $LN15@tmove
  00072	8d 55 fc	 lea	 edx, QWORD PTR [rbp-4]
  00075	48 8b cb	 mov	 rcx, rbx
  00078	e8 00 00 00 00	 call	 lua_getmetatable
  0007d	85 c0		 test	 eax, eax
  0007f	74 2b		 je	 SHORT $LN19@tmove
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NHABFFHN@__index?$AA@
  00088	48 8b cb	 mov	 rcx, rbx
  0008b	e8 00 00 00 00	 call	 lua_pushstring
  00090	8d 55 f9	 lea	 edx, QWORD PTR [rbp-7]
  00093	48 8b cb	 mov	 rcx, rbx
  00096	e8 00 00 00 00	 call	 lua_rawget
  0009b	85 c0		 test	 eax, eax
  0009d	74 0d		 je	 SHORT $LN19@tmove
  0009f	8d 55 f8	 lea	 edx, QWORD PTR [rbp-8]
  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	e8 00 00 00 00	 call	 lua_settop
  000aa	eb 14		 jmp	 SHORT $LN15@tmove
$LN19@tmove:
  000ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@DAKFMHIM@table?5expected?$AA@
  000b3	ba 01 00 00 00	 mov	 edx, 1
  000b8	48 8b cb	 mov	 rcx, rbx
  000bb	e8 00 00 00 00	 call	 luaL_argerror
$LN15@tmove:
; Line 134
  000c0	41 8b d7	 mov	 edx, r15d
  000c3	48 8b cb	 mov	 rcx, rbx
  000c6	e8 00 00 00 00	 call	 lua_type
  000cb	3b c5		 cmp	 eax, ebp
  000cd	74 50		 je	 SHORT $LN29@tmove
  000cf	41 8b d7	 mov	 edx, r15d
  000d2	48 8b cb	 mov	 rcx, rbx
  000d5	e8 00 00 00 00	 call	 lua_getmetatable
  000da	85 c0		 test	 eax, eax
  000dc	74 2f		 je	 SHORT $LN33@tmove
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@GADKNKH@__newindex?$AA@
  000e5	48 8b cb	 mov	 rcx, rbx
  000e8	e8 00 00 00 00	 call	 lua_pushstring
  000ed	ba fe ff ff ff	 mov	 edx, -2
  000f2	48 8b cb	 mov	 rcx, rbx
  000f5	e8 00 00 00 00	 call	 lua_rawget
  000fa	85 c0		 test	 eax, eax
  000fc	74 0f		 je	 SHORT $LN33@tmove
  000fe	ba fd ff ff ff	 mov	 edx, -3
  00103	48 8b cb	 mov	 rcx, rbx
  00106	e8 00 00 00 00	 call	 lua_settop
  0010b	eb 12		 jmp	 SHORT $LN29@tmove
$LN33@tmove:
  0010d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@DAKFMHIM@table?5expected?$AA@
  00114	41 8b d7	 mov	 edx, r15d
  00117	48 8b cb	 mov	 rcx, rbx
  0011a	e8 00 00 00 00	 call	 luaL_argerror
$LN29@tmove:
; Line 135
  0011f	4c 3b f6	 cmp	 r14, rsi
  00122	0f 8c df 00 00
	00		 jl	 $LN5@tmove
; Line 138
  00128	48 85 f6	 test	 rsi, rsi
  0012b	7f 26		 jg	 SHORT $LN13@tmove
  0012d	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00137	48 03 c6	 add	 rax, rsi
  0013a	4c 3b f0	 cmp	 r14, rax
  0013d	7c 14		 jl	 SHORT $LN13@tmove
  0013f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@ICIDIFLD@too?5many?5elements?5to?5move?$AA@
  00146	ba 03 00 00 00	 mov	 edx, 3
  0014b	48 8b cb	 mov	 rcx, rbx
  0014e	e8 00 00 00 00	 call	 luaL_argerror
$LN13@tmove:
; Line 139
  00153	49 8b ee	 mov	 rbp, r14
; Line 141
  00156	48 b8 00 00 00
	00 00 00 00 80	 mov	 rax, -9223372036854775808 ; 8000000000000000H
  00160	48 2b ee	 sub	 rbp, rsi
  00163	48 ff c5	 inc	 rbp
  00166	48 2b c5	 sub	 rax, rbp
  00169	48 3b f8	 cmp	 rdi, rax
  0016c	7e 14		 jle	 SHORT $LN14@tmove
  0016e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@GJMBFEK@destination?5wrap?5around?$AA@
  00175	ba 04 00 00 00	 mov	 edx, 4
  0017a	48 8b cb	 mov	 rcx, rbx
  0017d	e8 00 00 00 00	 call	 luaL_argerror
$LN14@tmove:
; Line 142
  00182	49 3b fe	 cmp	 rdi, r14
  00185	7f 46		 jg	 SHORT $LN8@tmove
  00187	48 3b fe	 cmp	 rdi, rsi
  0018a	7e 41		 jle	 SHORT $LN8@tmove
  0018c	41 83 ff 01	 cmp	 r15d, 1
  00190	75 3b		 jne	 SHORT $LN8@tmove
; Line 149
  00192	4c 8d 75 ff	 lea	 r14, QWORD PTR [rbp-1]
  00196	4d 85 f6	 test	 r14, r14
  00199	78 6c		 js	 SHORT $LN5@tmove
  0019b	49 8d 2c 3e	 lea	 rbp, QWORD PTR [r14+rdi]
  0019f	48 2b f7	 sub	 rsi, rdi
$LL3@tmove:
  001a2	4c 8d 04 2e	 lea	 r8, QWORD PTR [rsi+rbp]
; Line 150
  001a6	ba 01 00 00 00	 mov	 edx, 1
  001ab	48 8b cb	 mov	 rcx, rbx
  001ae	e8 00 00 00 00	 call	 lua_geti
; Line 151
  001b3	4c 8b c5	 mov	 r8, rbp
  001b6	ba 01 00 00 00	 mov	 edx, 1
  001bb	48 8b cb	 mov	 rcx, rbx
  001be	e8 00 00 00 00	 call	 lua_seti
  001c3	48 ff cd	 dec	 rbp
  001c6	49 ff ce	 dec	 r14
  001c9	79 d7		 jns	 SHORT $LL3@tmove
; Line 142
  001cb	eb 3a		 jmp	 SHORT $LN5@tmove
$LN8@tmove:
; Line 143
  001cd	48 85 ed	 test	 rbp, rbp
  001d0	7e 35		 jle	 SHORT $LN5@tmove
  001d2	48 2b f7	 sub	 rsi, rdi
  001d5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL7@tmove:
; Line 144
  001e0	4c 8d 04 37	 lea	 r8, QWORD PTR [rdi+rsi]
  001e4	ba 01 00 00 00	 mov	 edx, 1
  001e9	48 8b cb	 mov	 rcx, rbx
  001ec	e8 00 00 00 00	 call	 lua_geti
; Line 145
  001f1	4c 8b c7	 mov	 r8, rdi
  001f4	41 8b d7	 mov	 edx, r15d
  001f7	48 8b cb	 mov	 rcx, rbx
  001fa	e8 00 00 00 00	 call	 lua_seti
  001ff	48 ff c7	 inc	 rdi
  00202	48 ff cd	 dec	 rbp
  00205	75 d9		 jne	 SHORT $LL7@tmove
$LN5@tmove:
; Line 155
  00207	41 8b d7	 mov	 edx, r15d
  0020a	48 8b cb	 mov	 rcx, rbx
  0020d	e8 00 00 00 00	 call	 lua_pushvalue
; Line 157
  00212	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00217	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0021c	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00221	b8 01 00 00 00	 mov	 eax, 1
  00226	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0022a	41 5f		 pop	 r15
  0022c	41 5e		 pop	 r14
  0022e	5f		 pop	 rdi
  0022f	c3		 ret	 0
tmove	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT tremove
_TEXT	SEGMENT
L$ = 48
tremove	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 106
  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 107
  0000f	ba 01 00 00 00	 mov	 edx, 1
  00014	48 8b f9	 mov	 rdi, rcx
  00017	e8 00 00 00 00	 call	 lua_type
  0001c	83 f8 05	 cmp	 eax, 5
  0001f	0f 84 94 00 00
	00		 je	 $LN9@tremove
  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	48 8b cf	 mov	 rcx, rdi
  0002d	e8 00 00 00 00	 call	 lua_getmetatable
  00032	85 c0		 test	 eax, eax
  00034	74 6f		 je	 SHORT $LN13@tremove
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NHABFFHN@__index?$AA@
  0003d	48 8b cf	 mov	 rcx, rdi
  00040	e8 00 00 00 00	 call	 lua_pushstring
  00045	ba fe ff ff ff	 mov	 edx, -2
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	e8 00 00 00 00	 call	 lua_rawget
  00052	85 c0		 test	 eax, eax
  00054	74 4f		 je	 SHORT $LN13@tremove
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@GADKNKH@__newindex?$AA@
  0005d	48 8b cf	 mov	 rcx, rdi
  00060	e8 00 00 00 00	 call	 lua_pushstring
  00065	ba fd ff ff ff	 mov	 edx, -3
  0006a	48 8b cf	 mov	 rcx, rdi
  0006d	e8 00 00 00 00	 call	 lua_rawget
  00072	85 c0		 test	 eax, eax
  00074	74 2f		 je	 SHORT $LN13@tremove
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MNDELLDN@__len?$AA@
  0007d	48 8b cf	 mov	 rcx, rdi
  00080	e8 00 00 00 00	 call	 lua_pushstring
  00085	ba fc ff ff ff	 mov	 edx, -4
  0008a	48 8b cf	 mov	 rcx, rdi
  0008d	e8 00 00 00 00	 call	 lua_rawget
  00092	85 c0		 test	 eax, eax
  00094	74 0f		 je	 SHORT $LN13@tremove
  00096	ba fb ff ff ff	 mov	 edx, -5
  0009b	48 8b cf	 mov	 rcx, rdi
  0009e	e8 00 00 00 00	 call	 lua_settop
  000a3	eb 14		 jmp	 SHORT $LN9@tremove
$LN13@tremove:
  000a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@DAKFMHIM@table?5expected?$AA@
  000ac	ba 01 00 00 00	 mov	 edx, 1
  000b1	48 8b cf	 mov	 rcx, rdi
  000b4	e8 00 00 00 00	 call	 luaL_argerror
$LN9@tremove:
  000b9	ba 01 00 00 00	 mov	 edx, 1
  000be	48 8b cf	 mov	 rcx, rdi
  000c1	e8 00 00 00 00	 call	 luaL_len
; Line 108
  000c6	ba 02 00 00 00	 mov	 edx, 2
  000cb	48 8b cf	 mov	 rcx, rdi
  000ce	4c 8b c0	 mov	 r8, rax
  000d1	48 8b e8	 mov	 rbp, rax
  000d4	e8 00 00 00 00	 call	 luaL_optinteger
  000d9	48 8b f0	 mov	 rsi, rax
; Line 109
  000dc	48 3b c5	 cmp	 rax, rbp
  000df	74 23		 je	 SHORT $LN8@tremove
; Line 110
  000e1	48 83 f8 01	 cmp	 rax, 1
  000e5	7c 09		 jl	 SHORT $LN7@tremove
  000e7	48 8d 4d 01	 lea	 rcx, QWORD PTR [rbp+1]
  000eb	48 3b c1	 cmp	 rax, rcx
  000ee	7e 14		 jle	 SHORT $LN8@tremove
$LN7@tremove:
  000f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@FFAABLEA@position?5out?5of?5bounds?$AA@
  000f7	ba 01 00 00 00	 mov	 edx, 1
  000fc	48 8b cf	 mov	 rcx, rdi
  000ff	e8 00 00 00 00	 call	 luaL_argerror
$LN8@tremove:
; Line 111
  00104	4c 8b c6	 mov	 r8, rsi
  00107	ba 01 00 00 00	 mov	 edx, 1
  0010c	48 8b cf	 mov	 rcx, rdi
  0010f	e8 00 00 00 00	 call	 lua_geti
; Line 112
  00114	48 3b f5	 cmp	 rsi, rbp
  00117	7d 38		 jge	 SHORT $LN1@tremove
  00119	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0011e	66 90		 npad	 2
$LL3@tremove:
; Line 113
  00120	48 8d 5e 01	 lea	 rbx, QWORD PTR [rsi+1]
  00124	ba 01 00 00 00	 mov	 edx, 1
  00129	48 8b cf	 mov	 rcx, rdi
  0012c	4c 8b c3	 mov	 r8, rbx
  0012f	e8 00 00 00 00	 call	 lua_geti
; Line 114
  00134	4c 8b c6	 mov	 r8, rsi
  00137	ba 01 00 00 00	 mov	 edx, 1
  0013c	48 8b cf	 mov	 rcx, rdi
  0013f	e8 00 00 00 00	 call	 lua_seti
  00144	48 8b f3	 mov	 rsi, rbx
  00147	48 3b dd	 cmp	 rbx, rbp
  0014a	7c d4		 jl	 SHORT $LL3@tremove
  0014c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN1@tremove:
; Line 116
  00151	48 8b cf	 mov	 rcx, rdi
  00154	e8 00 00 00 00	 call	 lua_pushnil
; Line 117
  00159	4c 8b c6	 mov	 r8, rsi
  0015c	ba 01 00 00 00	 mov	 edx, 1
  00161	48 8b cf	 mov	 rcx, rdi
  00164	e8 00 00 00 00	 call	 lua_seti
; Line 119
  00169	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0016e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00173	b8 01 00 00 00	 mov	 eax, 1
  00178	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0017c	5f		 pop	 rdi
  0017d	c3		 ret	 0
tremove	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT tinsert
_TEXT	SEGMENT
L$ = 48
tinsert	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 79
  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 80
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 lua_type
  00017	83 f8 05	 cmp	 eax, 5
  0001a	0f 84 94 00 00
	00		 je	 $LN13@tinsert
  00020	ba 01 00 00 00	 mov	 edx, 1
  00025	48 8b cf	 mov	 rcx, rdi
  00028	e8 00 00 00 00	 call	 lua_getmetatable
  0002d	85 c0		 test	 eax, eax
  0002f	74 6f		 je	 SHORT $LN17@tinsert
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NHABFFHN@__index?$AA@
  00038	48 8b cf	 mov	 rcx, rdi
  0003b	e8 00 00 00 00	 call	 lua_pushstring
  00040	ba fe ff ff ff	 mov	 edx, -2
  00045	48 8b cf	 mov	 rcx, rdi
  00048	e8 00 00 00 00	 call	 lua_rawget
  0004d	85 c0		 test	 eax, eax
  0004f	74 4f		 je	 SHORT $LN17@tinsert
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@GADKNKH@__newindex?$AA@
  00058	48 8b cf	 mov	 rcx, rdi
  0005b	e8 00 00 00 00	 call	 lua_pushstring
  00060	ba fd ff ff ff	 mov	 edx, -3
  00065	48 8b cf	 mov	 rcx, rdi
  00068	e8 00 00 00 00	 call	 lua_rawget
  0006d	85 c0		 test	 eax, eax
  0006f	74 2f		 je	 SHORT $LN17@tinsert
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MNDELLDN@__len?$AA@
  00078	48 8b cf	 mov	 rcx, rdi
  0007b	e8 00 00 00 00	 call	 lua_pushstring
  00080	ba fc ff ff ff	 mov	 edx, -4
  00085	48 8b cf	 mov	 rcx, rdi
  00088	e8 00 00 00 00	 call	 lua_rawget
  0008d	85 c0		 test	 eax, eax
  0008f	74 0f		 je	 SHORT $LN17@tinsert
  00091	ba fb ff ff ff	 mov	 edx, -5
  00096	48 8b cf	 mov	 rcx, rdi
  00099	e8 00 00 00 00	 call	 lua_settop
  0009e	eb 14		 jmp	 SHORT $LN13@tinsert
$LN17@tinsert:
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@DAKFMHIM@table?5expected?$AA@
  000a7	ba 01 00 00 00	 mov	 edx, 1
  000ac	48 8b cf	 mov	 rcx, rdi
  000af	e8 00 00 00 00	 call	 luaL_argerror
$LN13@tinsert:
  000b4	ba 01 00 00 00	 mov	 edx, 1
  000b9	48 8b cf	 mov	 rcx, rdi
  000bc	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp
  000c1	e8 00 00 00 00	 call	 luaL_len
; Line 82
  000c6	48 8b cf	 mov	 rcx, rdi
  000c9	48 8d 70 01	 lea	 rsi, QWORD PTR [rax+1]
  000cd	e8 00 00 00 00	 call	 lua_gettop
  000d2	83 e8 02	 sub	 eax, 2
  000d5	0f 84 98 00 00
	00		 je	 $LN6@tinsert
; Line 98
  000db	48 8b cf	 mov	 rcx, rdi
  000de	ff c8		 dec	 eax
  000e0	74 1b		 je	 SHORT $LN5@tinsert
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@LPGHMHCC@wrong?5number?5of?5arguments?5to?5?8in@
  000e9	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
; Line 103
  000ee	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000f3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f7	5f		 pop	 rdi
; Line 98
  000f8	e9 00 00 00 00	 jmp	 luaL_error
$LN5@tinsert:
; Line 89
  000fd	ba 02 00 00 00	 mov	 edx, 2
  00102	e8 00 00 00 00	 call	 luaL_checkinteger
  00107	48 8b e8	 mov	 rbp, rax
; Line 90
  0010a	48 83 f8 01	 cmp	 rax, 1
  0010e	7c 05		 jl	 SHORT $LN11@tinsert
  00110	48 3b c6	 cmp	 rax, rsi
  00113	7e 14		 jle	 SHORT $LN12@tinsert
$LN11@tinsert:
  00115	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@FFAABLEA@position?5out?5of?5bounds?$AA@
  0011c	ba 02 00 00 00	 mov	 edx, 2
  00121	48 8b cf	 mov	 rcx, rdi
  00124	e8 00 00 00 00	 call	 luaL_argerror
$LN12@tinsert:
; Line 91
  00129	48 3b f5	 cmp	 rsi, rbp
  0012c	7e 48		 jle	 SHORT $LN7@tinsert
  0012e	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00133	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL4@tinsert:
; Line 92
  00140	48 8d 5e ff	 lea	 rbx, QWORD PTR [rsi-1]
  00144	ba 01 00 00 00	 mov	 edx, 1
  00149	48 8b cf	 mov	 rcx, rdi
  0014c	4c 8b c3	 mov	 r8, rbx
  0014f	e8 00 00 00 00	 call	 lua_geti
; Line 93
  00154	4c 8b c6	 mov	 r8, rsi
  00157	ba 01 00 00 00	 mov	 edx, 1
  0015c	48 8b cf	 mov	 rcx, rdi
  0015f	e8 00 00 00 00	 call	 lua_seti
  00164	48 8b f3	 mov	 rsi, rbx
  00167	48 3b dd	 cmp	 rbx, rbp
  0016a	7f d4		 jg	 SHORT $LL4@tinsert
  0016c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
; Line 95
  00171	eb 03		 jmp	 SHORT $LN7@tinsert
$LN6@tinsert:
; Line 84
  00173	48 8b ee	 mov	 rbp, rsi
$LN7@tinsert:
; Line 101
  00176	4c 8b c5	 mov	 r8, rbp
  00179	ba 01 00 00 00	 mov	 edx, 1
  0017e	48 8b cf	 mov	 rcx, rdi
  00181	e8 00 00 00 00	 call	 lua_seti
  00186	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
; Line 103
  0018b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00190	33 c0		 xor	 eax, eax
  00192	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00196	5f		 pop	 rdi
  00197	c3		 ret	 0
tinsert	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT maxn
_TEXT	SEGMENT
L$ = 64
maxn	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 62
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 64
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  00010	48 8b d9	 mov	 rbx, rcx
  00013	44 8d 42 04	 lea	 r8d, QWORD PTR [rdx+4]
  00017	0f 57 f6	 xorps	 xmm6, xmm6
  0001a	e8 00 00 00 00	 call	 luaL_checktype
; Line 65
  0001f	48 8b cb	 mov	 rcx, rbx
  00022	e8 00 00 00 00	 call	 lua_pushnil
; Line 66
  00027	ba 01 00 00 00	 mov	 edx, 1
  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	e8 00 00 00 00	 call	 lua_next
  00034	85 c0		 test	 eax, eax
  00036	74 4d		 je	 SHORT $LN3@maxn
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@maxn:
; Line 67
  00040	ba fe ff ff ff	 mov	 edx, -2
  00045	48 8b cb	 mov	 rcx, rbx
  00048	e8 00 00 00 00	 call	 lua_settop
; Line 68
  0004d	83 ca ff	 or	 edx, -1
  00050	48 8b cb	 mov	 rcx, rbx
  00053	e8 00 00 00 00	 call	 lua_type
  00058	83 f8 03	 cmp	 eax, 3
  0005b	75 17		 jne	 SHORT $LN1@maxn
; Line 69
  0005d	45 33 c0	 xor	 r8d, r8d
  00060	83 ca ff	 or	 edx, -1
  00063	48 8b cb	 mov	 rcx, rbx
  00066	e8 00 00 00 00	 call	 lua_tonumberx
; Line 70
  0006b	66 0f 2f c6	 comisd	 xmm0, xmm6
  0006f	76 03		 jbe	 SHORT $LN1@maxn
  00071	0f 28 f0	 movaps	 xmm6, xmm0
$LN1@maxn:
; Line 66
  00074	ba 01 00 00 00	 mov	 edx, 1
  00079	48 8b cb	 mov	 rcx, rbx
  0007c	e8 00 00 00 00	 call	 lua_next
  00081	85 c0		 test	 eax, eax
  00083	75 bb		 jne	 SHORT $LL4@maxn
$LN3@maxn:
; Line 73
  00085	0f 28 ce	 movaps	 xmm1, xmm6
  00088	48 8b cb	 mov	 rcx, rbx
  0008b	e8 00 00 00 00	 call	 lua_pushnumber
; Line 75
  00090	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  00095	b8 01 00 00 00	 mov	 eax, 1
  0009a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009e	5b		 pop	 rbx
  0009f	c3		 ret	 0
maxn	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT checktab
_TEXT	SEGMENT
L$ = 48
arg$ = 56
what$ = 64
checktab PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 46
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f0	 mov	 esi, r8d
  00012	8b ea		 mov	 ebp, edx
  00014	48 8b d9	 mov	 rbx, rcx
; Line 47
  00017	e8 00 00 00 00	 call	 lua_type
  0001c	83 f8 05	 cmp	 eax, 5
  0001f	0f 84 b7 00 00
	00		 je	 $LN1@checktab
; Line 52
  00025	8b d5		 mov	 edx, ebp
  00027	48 8b cb	 mov	 rcx, rbx
  0002a	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0002f	bf 01 00 00 00	 mov	 edi, 1
  00034	e8 00 00 00 00	 call	 lua_getmetatable
  00039	85 c0		 test	 eax, eax
  0003b	0f 84 85 00 00
	00		 je	 $LN5@checktab
  00041	40 84 f7	 test	 sil, dil
  00044	74 23		 je	 SHORT $LN4@checktab
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NHABFFHN@__index?$AA@
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	bf 02 00 00 00	 mov	 edi, 2
  00055	e8 00 00 00 00	 call	 lua_pushstring
  0005a	8d 57 fc	 lea	 edx, QWORD PTR [rdi-4]
  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 lua_rawget
  00065	85 c0		 test	 eax, eax
  00067	74 5d		 je	 SHORT $LN5@checktab
$LN4@checktab:
  00069	40 f6 c6 02	 test	 sil, 2
  0006d	74 21		 je	 SHORT $LN3@checktab
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@GADKNKH@__newindex?$AA@
  00076	48 8b cb	 mov	 rcx, rbx
  00079	ff c7		 inc	 edi
  0007b	e8 00 00 00 00	 call	 lua_pushstring
  00080	8b d7		 mov	 edx, edi
  00082	48 8b cb	 mov	 rcx, rbx
  00085	f7 da		 neg	 edx
  00087	e8 00 00 00 00	 call	 lua_rawget
  0008c	85 c0		 test	 eax, eax
  0008e	74 36		 je	 SHORT $LN5@checktab
$LN3@checktab:
  00090	40 f6 c6 04	 test	 sil, 4
  00094	74 21		 je	 SHORT $LN2@checktab
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MNDELLDN@__len?$AA@
  0009d	48 8b cb	 mov	 rcx, rbx
  000a0	ff c7		 inc	 edi
  000a2	e8 00 00 00 00	 call	 lua_pushstring
  000a7	8b d7		 mov	 edx, edi
  000a9	48 8b cb	 mov	 rcx, rbx
  000ac	f7 da		 neg	 edx
  000ae	e8 00 00 00 00	 call	 lua_rawget
  000b3	85 c0		 test	 eax, eax
  000b5	74 0f		 je	 SHORT $LN5@checktab
$LN2@checktab:
; Line 53
  000b7	83 ca ff	 or	 edx, -1
  000ba	48 8b cb	 mov	 rcx, rbx
  000bd	2b d7		 sub	 edx, edi
  000bf	e8 00 00 00 00	 call	 lua_settop
; Line 55
  000c4	eb 11		 jmp	 SHORT $LN15@checktab
$LN5@checktab:
; Line 56
  000c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@DAKFMHIM@table?5expected?$AA@
  000cd	8b d5		 mov	 edx, ebp
  000cf	48 8b cb	 mov	 rcx, rbx
  000d2	e8 00 00 00 00	 call	 luaL_argerror
$LN15@checktab:
  000d7	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN1@checktab:
; Line 58
  000dc	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000e1	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000e6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ea	5e		 pop	 rsi
  000eb	c3		 ret	 0
checktab ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT checkfield
_TEXT	SEGMENT
L$ = 48
key$ = 56
n$ = 64
checkfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 36
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	41 8b f8	 mov	 edi, r8d
  0000d	48 8b d9	 mov	 rbx, rcx
; Line 37
  00010	e8 00 00 00 00	 call	 lua_pushstring
; Line 38
  00015	f7 df		 neg	 edi
  00017	48 8b cb	 mov	 rcx, rbx
  0001a	8b d7		 mov	 edx, edi
  0001c	e8 00 00 00 00	 call	 lua_rawget
; Line 39
  00021	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00026	33 c9		 xor	 ecx, ecx
  00028	85 c0		 test	 eax, eax
  0002a	0f 95 c1	 setne	 cl
  0002d	8b c1		 mov	 eax, ecx
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
checkfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaopen_table
_TEXT	SEGMENT
L$ = 48
luaopen_table PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltablib.c
; Line 440
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 441
  00006	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@405bc00000000000
  0000e	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00014	48 8b d9	 mov	 rbx, rcx
  00017	e8 00 00 00 00	 call	 luaL_checkversion_
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	44 8d 42 08	 lea	 r8d, QWORD PTR [rdx+8]
  00025	e8 00 00 00 00	 call	 lua_createtable
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tab_funcs
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 luaL_setfuncs
; Line 444
  0003c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06FIONAGJL@unpack?$AA@
  00043	83 ca ff	 or	 edx, -1
  00046	48 8b cb	 mov	 rcx, rbx
  00049	e8 00 00 00 00	 call	 lua_getfield
; Line 445
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06FIONAGJL@unpack?$AA@
  00055	48 8b cb	 mov	 rcx, rbx
  00058	e8 00 00 00 00	 call	 lua_setglobal
; Line 447
  0005d	b8 01 00 00 00	 mov	 eax, 1
; Line 448
  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5b		 pop	 rbx
  00067	c3		 ret	 0
luaopen_table ENDP
_TEXT	ENDS
END
