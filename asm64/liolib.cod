; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_03KCHOJKKI@set?$AA@			; `string'
PUBLIC	??_C@_03LIBLMJMB@cur?$AA@			; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_02KAJCLHKP@no?$AA@			; `string'
PUBLIC	??_C@_04PLMLMMEO@full?$AA@			; `string'
PUBLIC	??_C@_04HJPCFDOP@line?$AA@			; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_05DFJCHPDH@input?$AA@			; `string'
PUBLIC	??_C@_05DENOCHIP@lines?$AA@			; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_06DKIGHACF@output?$AA@			; `string'
PUBLIC	??_C@_05IACAFMHP@popen?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_07FKJPAINK@tmpfile?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_04EDECCOGL@seek?$AA@			; `string'
PUBLIC	??_C@_07HHBPNGAN@setvbuf?$AA@			; `string'
PUBLIC	??_C@_04BDLIKKMN@__gc?$AA@			; `string'
PUBLIC	??_C@_0L@HDFPAPPH@__tostring?$AA@		; `string'
;	COMDAT ??_C@_0L@HDFPAPPH@__tostring?$AA@
CONST	SEGMENT
??_C@_0L@HDFPAPPH@__tostring?$AA@ DB '__tostring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BDLIKKMN@__gc?$AA@
CONST	SEGMENT
??_C@_04BDLIKKMN@__gc?$AA@ DB '__gc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HHBPNGAN@setvbuf?$AA@
CONST	SEGMENT
??_C@_07HHBPNGAN@setvbuf?$AA@ DB 'setvbuf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDECCOGL@seek?$AA@
CONST	SEGMENT
??_C@_04EDECCOGL@seek?$AA@ DB 'seek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FKJPAINK@tmpfile?$AA@
CONST	SEGMENT
??_C@_07FKJPAINK@tmpfile?$AA@ DB 'tmpfile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IACAFMHP@popen?$AA@
CONST	SEGMENT
??_C@_05IACAFMHP@popen?$AA@ DB 'popen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKIGHACF@output?$AA@
CONST	SEGMENT
??_C@_06DKIGHACF@output?$AA@ DB 'output', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DENOCHIP@lines?$AA@
CONST	SEGMENT
??_C@_05DENOCHIP@lines?$AA@ DB 'lines', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFJCHPDH@input?$AA@
CONST	SEGMENT
??_C@_05DFJCHPDH@input?$AA@ DB 'input', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HJPCFDOP@line?$AA@
CONST	SEGMENT
??_C@_04HJPCFDOP@line?$AA@ DB 'line', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PLMLMMEO@full?$AA@
CONST	SEGMENT
??_C@_04PLMLMMEO@full?$AA@ DB 'full', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KAJCLHKP@no?$AA@
CONST	SEGMENT
??_C@_02KAJCLHKP@no?$AA@ DB 'no', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LIBLMJMB@cur?$AA@
CONST	SEGMENT
??_C@_03LIBLMJMB@cur?$AA@ DB 'cur', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCHOJKKI@set?$AA@
CONST	SEGMENT
??_C@_03KCHOJKKI@set?$AA@ DB 'set', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
?mode@?1??f_seek@@9@9 DD 00H				; `f_seek'::`2'::mode
	DD	01H
	DD	02H
	ORG $+4
?modenames@?1??f_seek@@9@9 DQ FLAT:??_C@_03KCHOJKKI@set?$AA@ ; `f_seek'::`2'::modenames
	DQ	FLAT:??_C@_03LIBLMJMB@cur?$AA@
	DQ	FLAT:??_C@_03JBJLGPFL@end?$AA@
	DQ	0000000000000000H
?mode@?1??f_setvbuf@@9@9 DD 04H				; `f_setvbuf'::`2'::mode
	DD	00H
	DD	040H
	ORG $+4
?modenames@?1??f_setvbuf@@9@9 DQ FLAT:??_C@_02KAJCLHKP@no?$AA@ ; `f_setvbuf'::`2'::modenames
	DQ	FLAT:??_C@_04PLMLMMEO@full?$AA@
	DQ	FLAT:??_C@_04HJPCFDOP@line?$AA@
	DQ	0000000000000000H
iolib	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:io_close
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:io_flush
	DQ	FLAT:??_C@_05DFJCHPDH@input?$AA@
	DQ	FLAT:io_input
	DQ	FLAT:??_C@_05DENOCHIP@lines?$AA@
	DQ	FLAT:io_lines
	DQ	FLAT:??_C@_04PMOCAHAA@open?$AA@
	DQ	FLAT:io_open
	DQ	FLAT:??_C@_06DKIGHACF@output?$AA@
	DQ	FLAT:io_output
	DQ	FLAT:??_C@_05IACAFMHP@popen?$AA@
	DQ	FLAT:io_popen
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:io_read
	DQ	FLAT:??_C@_07FKJPAINK@tmpfile?$AA@
	DQ	FLAT:io_tmpfile
	DQ	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DQ	FLAT:io_type
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:io_write
	DQ	0000000000000000H
	DQ	0000000000000000H
flib	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:io_close
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:f_flush
	DQ	FLAT:??_C@_05DENOCHIP@lines?$AA@
	DQ	FLAT:f_lines
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:f_read
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:f_seek
	DQ	FLAT:??_C@_07HHBPNGAN@setvbuf?$AA@
	DQ	FLAT:f_setvbuf
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:f_write
	DQ	FLAT:??_C@_04BDLIKKMN@__gc?$AA@
	DQ	FLAT:f_gc
	DQ	FLAT:??_C@_0L@HDFPAPPH@__tostring?$AA@
	DQ	FLAT:f_tostring
	DQ	0000000000000000H
	DQ	0000000000000000H
CONST	ENDS
PUBLIC	luaopen_io
PUBLIC	??_C@_05KCHOJJD@FILE?$CK?$AA@			; `string'
PUBLIC	??_C@_0M@IBKPHHKH@closed?5file?$AA@		; `string'
PUBLIC	??_C@_04DAMGJPCA@file?$AA@			; `string'
PUBLIC	??_C@_0O@PLFAPHPG@file?5?$CIclosed?$CJ?$AA@	; `string'
PUBLIC	??_C@_09BPMAMLLD@file?5?$CI?$CFp?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@ ; `string'
PUBLIC	??_C@_0L@MIKJDGID@_IO_output?$AA@		; `string'
PUBLIC	??_C@_0BL@JABDLMOO@cannot?5open?5file?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_03DCNFGMMH@rwa?$AA@			; `string'
PUBLIC	??_C@_01OJONOECF@b?$AA@				; `string'
PUBLIC	??_C@_0N@MICJCNHE@invalid?5mode?$AA@		; `string'
PUBLIC	??_C@_0BL@JMNLNGCA@standard?5?$CFs?5file?5is?5closed?$AA@ ; `string'
PUBLIC	??_C@_09HINEJHGE@_IO_input?$AA@			; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@	; `string'
PUBLIC	??_C@_02OOPEBDOJ@pP?$AA@			; `string'
PUBLIC	??_C@_02MDKMJEGG@eE?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0P@CENJCLHM@invalid?5format?$AA@		; `string'
PUBLIC	??_C@_0BH@PBGIDLEF@file?5is?5already?5closed?$AA@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_04BFAHMMK@?$CFlld?$AA@			; `string'
PUBLIC	??_C@_05CGOEHEFE@?$CF?414g?$AA@			; `string'
PUBLIC	??_C@_07NHABFFHN@__index?$AA@			; `string'
PUBLIC	??_C@_0BL@PEFGCPAG@cannot?5close?5standard?5file?$AA@ ; `string'
PUBLIC	??_C@_05MHOFLBOO@stdin?$AA@			; `string'
PUBLIC	??_C@_06DJDOIFHB@stdout?$AA@			; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	__real@405bc00000000000
EXTRN	__imp_isdigit:PROC
EXTRN	__imp_isxdigit:PROC
EXTRN	__imp_isspace:PROC
EXTRN	__imp__errno:PROC
EXTRN	__imp_localeconv:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	__imp_clearerr:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_ferror:PROC
EXTRN	__imp_fflush:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp__fseeki64:PROC
EXTRN	__imp__ftelli64:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	__imp_getc:PROC
EXTRN	__imp__pclose:PROC
EXTRN	__imp__popen:PROC
EXTRN	__imp_setvbuf:PROC
EXTRN	__imp_tmpfile:PROC
EXTRN	__imp_ungetc:PROC
EXTRN	__imp_strchr:PROC
EXTRN	__imp_strerror:PROC
EXTRN	__imp_strspn:PROC
EXTRN	lua_gettop:PROC
EXTRN	lua_settop:PROC
EXTRN	lua_pushvalue:PROC
EXTRN	lua_rotate:PROC
EXTRN	lua_copy:PROC
EXTRN	lua_isinteger:PROC
EXTRN	lua_type:PROC
EXTRN	lua_tonumberx:PROC
EXTRN	lua_tointegerx:PROC
EXTRN	lua_toboolean:PROC
EXTRN	lua_tolstring:PROC
EXTRN	lua_rawlen:PROC
EXTRN	lua_touserdata:PROC
EXTRN	lua_pushnil:PROC
EXTRN	lua_pushinteger:PROC
EXTRN	lua_pushstring:PROC
EXTRN	lua_pushfstring:PROC
EXTRN	lua_pushcclosure:PROC
EXTRN	lua_pushboolean:PROC
EXTRN	lua_getfield:PROC
EXTRN	lua_createtable:PROC
EXTRN	lua_newuserdata:PROC
EXTRN	lua_setfield:PROC
EXTRN	lua_stringtonumber:PROC
EXTRN	luaL_checkversion_:PROC
EXTRN	luaL_argerror:PROC
EXTRN	luaL_checklstring:PROC
EXTRN	luaL_optlstring:PROC
EXTRN	luaL_checkinteger:PROC
EXTRN	luaL_optinteger:PROC
EXTRN	luaL_checkstack:PROC
EXTRN	luaL_checkany:PROC
EXTRN	luaL_newmetatable:PROC
EXTRN	luaL_setmetatable:PROC
EXTRN	luaL_testudata:PROC
EXTRN	luaL_checkudata:PROC
EXTRN	luaL_error:PROC
EXTRN	luaL_checkoption:PROC
EXTRN	luaL_fileresult:PROC
EXTRN	luaL_execresult:PROC
EXTRN	luaL_setfuncs:PROC
EXTRN	luaL_buffinit:PROC
EXTRN	luaL_prepbuffsize:PROC
EXTRN	luaL_pushresult:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaopen_io DD imagerel $LN21
	DD	imagerel $LN21+475
	DD	imagerel $unwind$luaopen_io
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_type DD imagerel io_type
	DD	imagerel io_type+100
	DD	imagerel $unwind$io_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$f_tostring DD imagerel f_tostring
	DD	imagerel f_tostring+85
	DD	imagerel $unwind$f_tostring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tofile DD imagerel tofile
	DD	imagerel tofile+83
	DD	imagerel $unwind$tofile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newprefile DD imagerel newprefile
	DD	imagerel newprefile+63
	DD	imagerel $unwind$newprefile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$aux_close DD imagerel aux_close
	DD	imagerel aux_close+59
	DD	imagerel $unwind$aux_close
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_close DD imagerel io_close
	DD	imagerel io_close+139
	DD	imagerel $unwind$io_close
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$f_gc DD	imagerel f_gc
	DD	imagerel f_gc+94
	DD	imagerel $unwind$f_gc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_fclose DD imagerel io_fclose
	DD	imagerel io_fclose+58
	DD	imagerel $unwind$io_fclose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newfile DD imagerel newfile
	DD	imagerel newfile+81
	DD	imagerel $unwind$newfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$opencheck DD imagerel opencheck
	DD	imagerel opencheck+159
	DD	imagerel $unwind$opencheck
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_open DD imagerel io_open
	DD	imagerel io_open+282
	DD	imagerel $unwind$io_open
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_pclose DD imagerel io_pclose
	DD	imagerel io_pclose+50
	DD	imagerel $unwind$io_pclose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_popen DD imagerel io_popen
	DD	imagerel io_popen+174
	DD	imagerel $unwind$io_popen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_tmpfile DD imagerel io_tmpfile
	DD	imagerel io_tmpfile+120
	DD	imagerel $unwind$io_tmpfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getiofile DD imagerel getiofile
	DD	imagerel getiofile+112
	DD	imagerel $unwind$getiofile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$g_iofile DD imagerel g_iofile
	DD	imagerel g_iofile+145
	DD	imagerel $unwind$g_iofile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_input DD imagerel io_input
	DD	imagerel io_input+132
	DD	imagerel $unwind$io_input
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_output DD imagerel io_output
	DD	imagerel io_output+132
	DD	imagerel $unwind$io_output
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_readline DD imagerel io_readline
	DD	imagerel io_readline+325
	DD	imagerel $unwind$io_readline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$aux_lines DD imagerel aux_lines
	DD	imagerel aux_lines+127
	DD	imagerel $unwind$aux_lines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$f_lines DD imagerel f_lines
	DD	imagerel f_lines+69
	DD	imagerel $unwind$f_lines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_lines DD imagerel io_lines
	DD	imagerel io_lines+246
	DD	imagerel $unwind$io_lines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$nextc DD	imagerel nextc
	DD	imagerel nextc+69
	DD	imagerel $unwind$nextc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$test2 DD	imagerel test2
	DD	imagerel test2+91
	DD	imagerel $unwind$test2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$readdigits DD imagerel readdigits
	DD	imagerel readdigits+110
	DD	imagerel $unwind$readdigits
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_number DD imagerel read_number
	DD	imagerel read_number+825
	DD	imagerel $unwind$read_number
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$test_eof DD imagerel test_eof
	DD	imagerel test_eof+82
	DD	imagerel $unwind$test_eof
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_line DD imagerel read_line
	DD	imagerel read_line+300
	DD	imagerel $unwind$read_line
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_all DD imagerel read_all
	DD	imagerel read_all+134
	DD	imagerel $unwind$read_all
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_chars DD imagerel read_chars
	DD	imagerel read_chars+145
	DD	imagerel $unwind$read_chars
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$g_read DD imagerel g_read
	DD	imagerel g_read+426
	DD	imagerel $unwind$g_read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_read DD imagerel io_read
	DD	imagerel io_read+100
	DD	imagerel $unwind$io_read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$f_read DD imagerel f_read
	DD	imagerel f_read+82
	DD	imagerel $unwind$f_read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$g_write DD imagerel g_write
	DD	imagerel g_write+251
	DD	imagerel $unwind$g_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_write DD imagerel io_write
	DD	imagerel io_write+100
	DD	imagerel $unwind$io_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$f_write DD imagerel f_write
	DD	imagerel f_write+98
	DD	imagerel $unwind$f_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$f_seek DD imagerel f_seek
	DD	imagerel f_seek+204
	DD	imagerel $unwind$f_seek
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$f_setvbuf DD imagerel f_setvbuf
	DD	imagerel f_setvbuf+165
	DD	imagerel $unwind$f_setvbuf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_flush DD imagerel io_flush
	DD	imagerel io_flush+110
	DD	imagerel $unwind$io_flush
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$f_flush DD imagerel f_flush
	DD	imagerel f_flush+92
	DD	imagerel $unwind$f_flush
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$createmeta DD imagerel createmeta
	DD	imagerel createmeta+88
	DD	imagerel $unwind$createmeta
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$io_noclose DD imagerel io_noclose
	DD	imagerel io_noclose+71
	DD	imagerel $unwind$io_noclose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$createstdfile DD imagerel createstdfile
	DD	imagerel createstdfile+162
	DD	imagerel $unwind$createstdfile
pdata	ENDS
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJDOIFHB@stdout?$AA@
CONST	SEGMENT
??_C@_06DJDOIFHB@stdout?$AA@ DB 'stdout', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHOFLBOO@stdin?$AA@
CONST	SEGMENT
??_C@_05MHOFLBOO@stdin?$AA@ DB 'stdin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PEFGCPAG@cannot?5close?5standard?5file?$AA@
CONST	SEGMENT
??_C@_0BL@PEFGCPAG@cannot?5close?5standard?5file?$AA@ DB 'cannot close st'
	DB	'andard file', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07NHABFFHN@__index?$AA@
CONST	SEGMENT
??_C@_07NHABFFHN@__index?$AA@ DB '__index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CGOEHEFE@?$CF?414g?$AA@
CONST	SEGMENT
??_C@_05CGOEHEFE@?$CF?414g?$AA@ DB '%.14g', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFAHMMK@?$CFlld?$AA@
CONST	SEGMENT
??_C@_04BFAHMMK@?$CFlld?$AA@ DB '%lld', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PBGIDLEF@file?5is?5already?5closed?$AA@
CONST	SEGMENT
??_C@_0BH@PBGIDLEF@file?5is?5already?5closed?$AA@ DB 'file is already clo'
	DB	'sed', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CENJCLHM@invalid?5format?$AA@
CONST	SEGMENT
??_C@_0P@CENJCLHM@invalid?5format?$AA@ DB 'invalid format', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDKMJEGG@eE?$AA@
CONST	SEGMENT
??_C@_02MDKMJEGG@eE?$AA@ DB 'eE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OOPEBDOJ@pP?$AA@
CONST	SEGMENT
??_C@_02OOPEBDOJ@pP?$AA@ DB 'pP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@
CONST	SEGMENT
??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@ DB 'too many arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HINEJHGE@_IO_input?$AA@
CONST	SEGMENT
??_C@_09HINEJHGE@_IO_input?$AA@ DB '_IO_input', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JMNLNGCA@standard?5?$CFs?5file?5is?5closed?$AA@
CONST	SEGMENT
??_C@_0BL@JMNLNGCA@standard?5?$CFs?5file?5is?5closed?$AA@ DB 'standard %s'
	DB	' file is closed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MICJCNHE@invalid?5mode?$AA@
CONST	SEGMENT
??_C@_0N@MICJCNHE@invalid?5mode?$AA@ DB 'invalid mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01OJONOECF@b?$AA@
CONST	SEGMENT
??_C@_01OJONOECF@b?$AA@ DB 'b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DCNFGMMH@rwa?$AA@
CONST	SEGMENT
??_C@_03DCNFGMMH@rwa?$AA@ DB 'rwa', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JABDLMOO@cannot?5open?5file?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BL@JABDLMOO@cannot?5open?5file?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@ DB 'c'
	DB	'annot open file ''%s'' (%s)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIKJDGID@_IO_output?$AA@
CONST	SEGMENT
??_C@_0L@MIKJDGID@_IO_output?$AA@ DB '_IO_output', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@ DB 'attempt to '
	DB	'use a closed file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09BPMAMLLD@file?5?$CI?$CFp?$CJ?$AA@
CONST	SEGMENT
??_C@_09BPMAMLLD@file?5?$CI?$CFp?$CJ?$AA@ DB 'file (%p)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PLFAPHPG@file?5?$CIclosed?$CJ?$AA@
CONST	SEGMENT
??_C@_0O@PLFAPHPG@file?5?$CIclosed?$CJ?$AA@ DB 'file (closed)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DAMGJPCA@file?$AA@
CONST	SEGMENT
??_C@_04DAMGJPCA@file?$AA@ DB 'file', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IBKPHHKH@closed?5file?$AA@
CONST	SEGMENT
??_C@_0M@IBKPHHKH@closed?5file?$AA@ DB 'closed file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KCHOJJD@FILE?$CK?$AA@
CONST	SEGMENT
??_C@_05KCHOJJD@FILE?$CK?$AA@ DB 'FILE*', 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$createstdfile DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_noclose DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$createmeta DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$f_flush DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_flush DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$f_setvbuf DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$f_seek DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$f_write DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_write DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$g_write DD 081201H
	DD	095412H
	DD	083412H
	DD	0e00e3212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$f_read DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_read DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$g_read DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0d016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_chars DD 052519H
	DD	040f3413H
	DD	040a0113H
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	02040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_all DD 032119H
	DD	040a010fH
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	02040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_line DD 0b3119H
	DD	0413541fH
	DD	0412341fH
	DD	040a011fH
	DD	0e010f012H
	DD	0700cc00eH
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	02040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_eof DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_number DD 0b2a19H
	DD	02c341cH
	DD	022011cH
	DD	0e00ef010H
	DD	0c00ad00cH
	DD	060077008H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0100H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$readdigits DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test2 DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$nextc DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_lines DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$f_lines DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$aux_lines DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_readline DD 085901H
	DD	0a7459H
	DD	08544fH
	DD	0e0053209H
	DD	030026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_output DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_input DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$g_iofile DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getiofile DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_tmpfile DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_popen DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_pclose DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_open DD 0a1a01H
	DD	09e41aH
	DD	08741aH
	DD	07641aH
	DD	06341aH
	DD	0f016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$opencheck DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newfile DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_fclose DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$f_gc DD	020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_close DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$aux_close DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newprefile DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tofile DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$f_tostring DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_type DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaopen_io DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT createstdfile
_TEXT	SEGMENT
L$ = 48
f$ = 56
k$ = 64
fname$ = 72
createstdfile PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 744
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	48 8b fa	 mov	 rdi, rdx
; Line 745
  0001d	ba 10 00 00 00	 mov	 edx, 16
  00022	4d 8b f1	 mov	 r14, r9
  00025	49 8b e8	 mov	 rbp, r8
  00028	48 8b f1	 mov	 rsi, rcx
  0002b	e8 00 00 00 00	 call	 lua_newuserdata
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00037	48 8b ce	 mov	 rcx, rsi
  0003a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00042	48 8b d8	 mov	 rbx, rax
  00045	e8 00 00 00 00	 call	 luaL_setmetatable
; Line 747
  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:io_noclose
  00051	48 89 3b	 mov	 QWORD PTR [rbx], rdi
  00054	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
; Line 748
  00058	48 85 ed	 test	 rbp, rbp
  0005b	74 1b		 je	 SHORT $LN1@createstdf
; Line 749
  0005d	83 ca ff	 or	 edx, -1
  00060	48 8b ce	 mov	 rcx, rsi
  00063	e8 00 00 00 00	 call	 lua_pushvalue
; Line 750
  00068	4c 8b c5	 mov	 r8, rbp
  0006b	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00070	48 8b ce	 mov	 rcx, rsi
  00073	e8 00 00 00 00	 call	 lua_setfield
$LN1@createstdf:
; Line 752
  00078	4d 8b c6	 mov	 r8, r14
  0007b	ba fe ff ff ff	 mov	 edx, -2
  00080	48 8b ce	 mov	 rcx, rsi
; Line 753
  00083	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00088	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0008d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00092	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00097	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009b	41 5e		 pop	 r14
; Line 752
  0009d	e9 00 00 00 00	 jmp	 lua_setfield
createstdfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_noclose
_TEXT	SEGMENT
L$ = 48
io_noclose PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 734
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 735
  00006	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0000d	ba 01 00 00 00	 mov	 edx, 1
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 luaL_checkudata
; Line 736
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:io_noclose
  00021	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
; Line 737
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 lua_pushnil
; Line 738
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@PEFGCPAG@cannot?5close?5standard?5file?$AA@
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 lua_pushstring
; Line 739
  0003c	b8 02 00 00 00	 mov	 eax, 2
; Line 740
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5b		 pop	 rbx
  00046	c3		 ret	 0
io_noclose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT createmeta
_TEXT	SEGMENT
L$ = 48
createmeta PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 722
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 723
  00006	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	e8 00 00 00 00	 call	 luaL_newmetatable
; Line 724
  00015	83 ca ff	 or	 edx, -1
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	e8 00 00 00 00	 call	 lua_pushvalue
; Line 725
  00020	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07NHABFFHN@__index?$AA@
  00027	ba fe ff ff ff	 mov	 edx, -2
  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	e8 00 00 00 00	 call	 lua_setfield
; Line 726
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:flib
  0003b	45 33 c0	 xor	 r8d, r8d
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	e8 00 00 00 00	 call	 luaL_setfuncs
; Line 727
  00046	ba fe ff ff ff	 mov	 edx, -2
  0004b	48 8b cb	 mov	 rcx, rbx
; Line 728
  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5b		 pop	 rbx
; Line 727
  00053	e9 00 00 00 00	 jmp	 lua_settop
createmeta ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT f_flush
_TEXT	SEGMENT
L$ = 48
f_flush	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 681
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 682
  0000a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00011	ba 01 00 00 00	 mov	 edx, 1
  00016	48 8b d9	 mov	 rbx, rcx
  00019	e8 00 00 00 00	 call	 luaL_checkudata
  0001e	48 8b f8	 mov	 rdi, rax
  00021	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00026	75 0f		 jne	 SHORT $LN3@f_flush
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@
  0002f	48 8b cb	 mov	 rcx, rbx
  00032	e8 00 00 00 00	 call	 luaL_error
$LN3@f_flush:
  00037	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
  00040	33 d2		 xor	 edx, edx
  00042	48 8b cb	 mov	 rcx, rbx
  00045	85 c0		 test	 eax, eax
  00047	0f 94 c2	 sete	 dl
  0004a	45 33 c0	 xor	 r8d, r8d
; Line 683
  0004d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5f		 pop	 rdi
; Line 682
  00057	e9 00 00 00 00	 jmp	 luaL_fileresult
f_flush	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_flush
_TEXT	SEGMENT
L$ = 48
io_flush PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 676
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 677
  0000a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MIKJDGID@_IO_output?$AA@
  00011	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00016	48 8b d9	 mov	 rbx, rcx
  00019	e8 00 00 00 00	 call	 lua_getfield
  0001e	83 ca ff	 or	 edx, -1
  00021	48 8b cb	 mov	 rcx, rbx
  00024	e8 00 00 00 00	 call	 lua_touserdata
  00029	48 8b f8	 mov	 rdi, rax
  0002c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00031	75 16		 jne	 SHORT $LN3@io_flush
  00033	4c 8d 05 04 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MIKJDGID@_IO_output?$AA@+4
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JMNLNGCA@standard?5?$CFs?5file?5is?5closed?$AA@
  00041	48 8b cb	 mov	 rcx, rbx
  00044	e8 00 00 00 00	 call	 luaL_error
$LN3@io_flush:
  00049	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
  00052	33 d2		 xor	 edx, edx
  00054	48 8b cb	 mov	 rcx, rbx
  00057	85 c0		 test	 eax, eax
  00059	0f 94 c2	 sete	 dl
  0005c	45 33 c0	 xor	 r8d, r8d
; Line 678
  0005f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00064	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00068	5f		 pop	 rdi
; Line 677
  00069	e9 00 00 00 00	 jmp	 luaL_fileresult
io_flush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT f_setvbuf
_TEXT	SEGMENT
L$ = 48
f_setvbuf PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 664
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 667
  0000f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00016	ba 01 00 00 00	 mov	 edx, 1
  0001b	48 8b f1	 mov	 rsi, rcx
  0001e	e8 00 00 00 00	 call	 luaL_checkudata
  00023	48 8b f8	 mov	 rdi, rax
  00026	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002b	75 0f		 jne	 SHORT $LN3@f_setvbuf
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@
  00034	48 8b ce	 mov	 rcx, rsi
  00037	e8 00 00 00 00	 call	 luaL_error
$LN3@f_setvbuf:
  0003c	48 8b 3f	 mov	 rdi, QWORD PTR [rdi]
; Line 668
  0003f	45 33 c0	 xor	 r8d, r8d
  00042	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?modenames@?1??f_setvbuf@@9@9
  00049	41 8d 50 02	 lea	 edx, QWORD PTR [r8+2]
  0004d	48 8b ce	 mov	 rcx, rsi
  00050	e8 00 00 00 00	 call	 luaL_checkoption
; Line 669
  00055	ba 03 00 00 00	 mov	 edx, 3
  0005a	41 b8 00 20 00
	00		 mov	 r8d, 8192		; 00002000H
  00060	48 8b ce	 mov	 rcx, rsi
  00063	48 63 d8	 movsxd	 rbx, eax
  00066	e8 00 00 00 00	 call	 luaL_optinteger
; Line 670
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mode@?1??f_setvbuf@@9@9
  00072	33 d2		 xor	 edx, edx
  00074	44 8b 04 99	 mov	 r8d, DWORD PTR [rcx+rbx*4]
  00078	4c 8b c8	 mov	 r9, rax
  0007b	48 8b cf	 mov	 rcx, rdi
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setvbuf
; Line 671
  00084	33 d2		 xor	 edx, edx
  00086	48 8b ce	 mov	 rcx, rsi
  00089	85 c0		 test	 eax, eax
  0008b	0f 94 c2	 sete	 dl
  0008e	45 33 c0	 xor	 r8d, r8d
; Line 672
  00091	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00096	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0009b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009f	5f		 pop	 rdi
; Line 671
  000a0	e9 00 00 00 00	 jmp	 luaL_fileresult
f_setvbuf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT f_seek
_TEXT	SEGMENT
L$ = 48
f_seek	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 645
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 648
  0000f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00016	ba 01 00 00 00	 mov	 edx, 1
  0001b	48 8b f9	 mov	 rdi, rcx
  0001e	e8 00 00 00 00	 call	 luaL_checkudata
  00023	48 8b d8	 mov	 rbx, rax
  00026	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002b	75 0f		 jne	 SHORT $LN6@f_seek
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@
  00034	48 8b cf	 mov	 rcx, rdi
  00037	e8 00 00 00 00	 call	 luaL_error
$LN6@f_seek:
  0003c	48 8b 33	 mov	 rsi, QWORD PTR [rbx]
; Line 649
  0003f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?modenames@?1??f_seek@@9@9
  00046	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03LIBLMJMB@cur?$AA@
  0004d	ba 02 00 00 00	 mov	 edx, 2
  00052	48 8b cf	 mov	 rcx, rdi
  00055	e8 00 00 00 00	 call	 luaL_checkoption
; Line 650
  0005a	45 33 c0	 xor	 r8d, r8d
  0005d	48 8b cf	 mov	 rcx, rdi
  00060	41 8d 50 03	 lea	 edx, QWORD PTR [r8+3]
  00064	48 63 d8	 movsxd	 rbx, eax
  00067	e8 00 00 00 00	 call	 luaL_optinteger
; Line 654
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mode@?1??f_seek@@9@9
  00073	44 8b 04 99	 mov	 r8d, DWORD PTR [rcx+rbx*4]
  00077	48 8b d0	 mov	 rdx, rax
  0007a	48 8b ce	 mov	 rcx, rsi
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fseeki64
; Line 655
  00083	85 c0		 test	 eax, eax
  00085	74 1c		 je	 SHORT $LN2@f_seek
; Line 656
  00087	45 33 c0	 xor	 r8d, r8d
  0008a	33 d2		 xor	 edx, edx
  0008c	48 8b cf	 mov	 rcx, rdi
; Line 661
  0008f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00094	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00099	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009d	5f		 pop	 rdi
; Line 656
  0009e	e9 00 00 00 00	 jmp	 luaL_fileresult
$LN2@f_seek:
; Line 658
  000a3	48 8b ce	 mov	 rcx, rsi
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ftelli64
  000ac	48 8b cf	 mov	 rcx, rdi
  000af	48 8b d0	 mov	 rdx, rax
  000b2	e8 00 00 00 00	 call	 lua_pushinteger
; Line 661
  000b7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000bc	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c1	b8 01 00 00 00	 mov	 eax, 1
  000c6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ca	5f		 pop	 rdi
  000cb	c3		 ret	 0
f_seek	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT f_write
_TEXT	SEGMENT
L$ = 48
f_write	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 638
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 639
  0000a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00011	ba 01 00 00 00	 mov	 edx, 1
  00016	48 8b f9	 mov	 rdi, rcx
  00019	e8 00 00 00 00	 call	 luaL_checkudata
  0001e	48 8b d8	 mov	 rbx, rax
  00021	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00026	75 0f		 jne	 SHORT $LN3@f_write
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@
  0002f	48 8b cf	 mov	 rcx, rdi
  00032	e8 00 00 00 00	 call	 luaL_error
$LN3@f_write:
  00037	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
; Line 640
  0003a	ba 01 00 00 00	 mov	 edx, 1
  0003f	48 8b cf	 mov	 rcx, rdi
  00042	e8 00 00 00 00	 call	 lua_pushvalue
; Line 641
  00047	41 b8 02 00 00
	00		 mov	 r8d, 2
  0004d	48 8b d3	 mov	 rdx, rbx
  00050	48 8b cf	 mov	 rcx, rdi
; Line 642
  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
; Line 641
  0005d	e9 00 00 00 00	 jmp	 g_write
f_write	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_write
_TEXT	SEGMENT
L$ = 48
io_write PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 633
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 634
  0000a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MIKJDGID@_IO_output?$AA@
  00011	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00016	48 8b d9	 mov	 rbx, rcx
  00019	e8 00 00 00 00	 call	 lua_getfield
  0001e	83 ca ff	 or	 edx, -1
  00021	48 8b cb	 mov	 rcx, rbx
  00024	e8 00 00 00 00	 call	 lua_touserdata
  00029	48 8b f8	 mov	 rdi, rax
  0002c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00031	75 16		 jne	 SHORT $LN3@io_write
  00033	4c 8d 05 04 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MIKJDGID@_IO_output?$AA@+4
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JMNLNGCA@standard?5?$CFs?5file?5is?5closed?$AA@
  00041	48 8b cb	 mov	 rcx, rbx
  00044	e8 00 00 00 00	 call	 luaL_error
$LN3@io_write:
  00049	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  0004c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00052	48 8b cb	 mov	 rcx, rbx
; Line 635
  00055	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5f		 pop	 rdi
; Line 634
  0005f	e9 00 00 00 00	 jmp	 g_write
io_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT g_write
_TEXT	SEGMENT
L$ = 64
f$ = 72
arg$ = 80
l$1 = 88
g_write	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 611
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 56		 push	 r14
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	41 8b f8	 mov	 edi, r8d
  00015	4c 8b f2	 mov	 r14, rdx
  00018	48 8b f1	 mov	 rsi, rcx
; Line 612
  0001b	e8 00 00 00 00	 call	 lua_gettop
; Line 613
  00020	bb 01 00 00 00	 mov	 ebx, 1
  00025	8b e8		 mov	 ebp, eax
  00027	2b ef		 sub	 ebp, edi
; Line 614
  00029	0f 84 b4 00 00
	00		 je	 $LN21@g_write
  0002f	90		 npad	 1
$LL7@g_write:
; Line 615
  00030	8b d7		 mov	 edx, edi
  00032	48 8b ce	 mov	 rcx, rsi
  00035	ff cd		 dec	 ebp
  00037	e8 00 00 00 00	 call	 lua_type
; Line 619
  0003c	8b d7		 mov	 edx, edi
  0003e	48 8b ce	 mov	 rcx, rsi
  00041	83 f8 03	 cmp	 eax, 3
  00044	75 6b		 jne	 SHORT $LN4@g_write
  00046	e8 00 00 00 00	 call	 lua_isinteger
  0004b	45 33 c0	 xor	 r8d, r8d
  0004e	8b d7		 mov	 edx, edi
  00050	48 8b ce	 mov	 rcx, rsi
  00053	85 c0		 test	 eax, eax
  00055	74 1a		 je	 SHORT $LN10@g_write
  00057	e8 00 00 00 00	 call	 lua_tointegerx
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BFAHMMK@?$CFlld?$AA@
  00063	49 8b ce	 mov	 rcx, r14
  00066	4c 8b c0	 mov	 r8, rax
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  0006f	eb 1d		 jmp	 SHORT $LN11@g_write
$LN10@g_write:
  00071	e8 00 00 00 00	 call	 lua_tonumberx
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CGOEHEFE@?$CF?414g?$AA@
  0007d	49 8b ce	 mov	 rcx, r14
  00080	0f 28 d0	 movaps	 xmm2, xmm0
  00083	66 49 0f 7e d0	 movd	 r8, xmm2
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
$LN11@g_write:
; Line 620
  0008e	85 db		 test	 ebx, ebx
  00090	74 04		 je	 SHORT $LN14@g_write
  00092	85 c0		 test	 eax, eax
  00094	7f 46		 jg	 SHORT $LN22@g_write
$LN14@g_write:
; Line 625
  00096	33 db		 xor	 ebx, ebx
$LN6@g_write:
; Line 614
  00098	ff c7		 inc	 edi
  0009a	85 ed		 test	 ebp, ebp
  0009c	75 92		 jne	 SHORT $LL7@g_write
; Line 628
  0009e	85 db		 test	 ebx, ebx
  000a0	75 41		 jne	 SHORT $LN21@g_write
; Line 629
  000a2	45 33 c0	 xor	 r8d, r8d
  000a5	33 d2		 xor	 edx, edx
  000a7	48 8b ce	 mov	 rcx, rsi
  000aa	e8 00 00 00 00	 call	 luaL_fileresult
  000af	eb 37		 jmp	 SHORT $LN1@g_write
$LN4@g_write:
; Line 624
  000b1	4c 8d 44 24 58	 lea	 r8, QWORD PTR l$1[rsp]
  000b6	e8 00 00 00 00	 call	 luaL_checklstring
; Line 625
  000bb	85 db		 test	 ebx, ebx
  000bd	74 d7		 je	 SHORT $LN14@g_write
  000bf	4c 8b 44 24 58	 mov	 r8, QWORD PTR l$1[rsp]
  000c4	4d 8b ce	 mov	 r9, r14
  000c7	ba 01 00 00 00	 mov	 edx, 1
  000cc	48 8b c8	 mov	 rcx, rax
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite
  000d5	48 3b 44 24 58	 cmp	 rax, QWORD PTR l$1[rsp]
  000da	75 ba		 jne	 SHORT $LN14@g_write
$LN22@g_write:
  000dc	bb 01 00 00 00	 mov	 ebx, 1
  000e1	eb b5		 jmp	 SHORT $LN6@g_write
$LN21@g_write:
; Line 628
  000e3	b8 01 00 00 00	 mov	 eax, 1
$LN1@g_write:
; Line 630
  000e8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ed	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000f2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f6	41 5e		 pop	 r14
  000f8	5f		 pop	 rdi
  000f9	5e		 pop	 rsi
  000fa	c3		 ret	 0
g_write	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT f_read
_TEXT	SEGMENT
L$ = 48
f_read	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 575
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 576
  0000a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00011	ba 01 00 00 00	 mov	 edx, 1
  00016	48 8b d9	 mov	 rbx, rcx
  00019	e8 00 00 00 00	 call	 luaL_checkudata
  0001e	48 8b f8	 mov	 rdi, rax
  00021	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00026	75 0f		 jne	 SHORT $LN3@f_read
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@
  0002f	48 8b cb	 mov	 rcx, rbx
  00032	e8 00 00 00 00	 call	 luaL_error
$LN3@f_read:
  00037	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  0003a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00040	48 8b cb	 mov	 rcx, rbx
; Line 577
  00043	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
; Line 576
  0004d	e9 00 00 00 00	 jmp	 g_read
f_read	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_read
_TEXT	SEGMENT
L$ = 48
io_read	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 570
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 571
  0000a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09HINEJHGE@_IO_input?$AA@
  00011	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00016	48 8b d9	 mov	 rbx, rcx
  00019	e8 00 00 00 00	 call	 lua_getfield
  0001e	83 ca ff	 or	 edx, -1
  00021	48 8b cb	 mov	 rcx, rbx
  00024	e8 00 00 00 00	 call	 lua_touserdata
  00029	48 8b f8	 mov	 rdi, rax
  0002c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00031	75 16		 jne	 SHORT $LN3@io_read
  00033	4c 8d 05 04 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09HINEJHGE@_IO_input?$AA@+4
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JMNLNGCA@standard?5?$CFs?5file?5is?5closed?$AA@
  00041	48 8b cb	 mov	 rcx, rbx
  00044	e8 00 00 00 00	 call	 luaL_error
$LN3@io_read:
  00049	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  0004c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00052	48 8b cb	 mov	 rcx, rbx
; Line 572
  00055	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5f		 pop	 rdi
; Line 571
  0005f	e9 00 00 00 00	 jmp	 g_read
io_read	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT g_read
_TEXT	SEGMENT
L$ = 64
f$ = 72
first$ = 80
g_read	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 520
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 55		 push	 r13
  00016	41 56		 push	 r14
  00018	41 57		 push	 r15
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	45 8b e8	 mov	 r13d, r8d
  00021	4c 8b f2	 mov	 r14, rdx
  00024	48 8b f9	 mov	 rdi, rcx
; Line 521
  00027	e8 00 00 00 00	 call	 lua_gettop
; Line 524
  0002c	49 8b ce	 mov	 rcx, r14
  0002f	44 8b f8	 mov	 r15d, eax
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clearerr
; Line 526
  00038	48 8b cf	 mov	 rcx, rdi
  0003b	41 ff cf	 dec	 r15d
  0003e	75 35		 jne	 SHORT $LN17@g_read
  00040	45 8d 47 01	 lea	 r8d, QWORD PTR [r15+1]
  00044	49 8b d6	 mov	 rdx, r14
  00047	e8 00 00 00 00	 call	 read_line
; Line 527
  0004c	41 8d 6d 01	 lea	 ebp, DWORD PTR [r13+1]
  00050	8b f0		 mov	 esi, eax
$LN30@g_read:
; Line 560
  00052	49 8b ce	 mov	 rcx, r14
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ferror
  0005b	85 c0		 test	 eax, eax
  0005d	0f 84 0c 01 00
	00		 je	 $LN2@g_read
; Line 561
  00063	45 33 c0	 xor	 r8d, r8d
  00066	33 d2		 xor	 edx, edx
  00068	48 8b cf	 mov	 rcx, rdi
  0006b	e8 00 00 00 00	 call	 luaL_fileresult
  00070	e9 16 01 00 00	 jmp	 $LN18@g_read
$LN17@g_read:
; Line 530
  00075	41 8d 57 14	 lea	 edx, DWORD PTR [r15+20]
  00079	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@
  00080	e8 00 00 00 00	 call	 luaL_checkstack
; Line 531
  00085	be 01 00 00 00	 mov	 esi, 1
; Line 532
  0008a	41 8b ed	 mov	 ebp, r13d
  0008d	0f 1f 00	 npad	 3
$LL15@g_read:
  00090	41 ff cf	 dec	 r15d
  00093	85 f6		 test	 esi, esi
  00095	74 bb		 je	 SHORT $LN30@g_read
; Line 533
  00097	8b d5		 mov	 edx, ebp
  00099	48 8b cf	 mov	 rcx, rdi
  0009c	e8 00 00 00 00	 call	 lua_type
; Line 534
  000a1	8b d5		 mov	 edx, ebp
  000a3	48 8b cf	 mov	 rcx, rdi
  000a6	83 f8 03	 cmp	 eax, 3
  000a9	75 4a		 jne	 SHORT $LN12@g_read
  000ab	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 535
  000b0	48 85 c0	 test	 rax, rax
  000b3	75 30		 jne	 SHORT $LN20@g_read
  000b5	49 8b ce	 mov	 rcx, r14
  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  000be	49 8b d6	 mov	 rdx, r14
  000c1	8b c8		 mov	 ecx, eax
  000c3	8b d8		 mov	 ebx, eax
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ungetc
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000d2	48 8b cf	 mov	 rcx, rdi
  000d5	e8 00 00 00 00	 call	 lua_pushstring
  000da	33 f6		 xor	 esi, esi
  000dc	83 fb ff	 cmp	 ebx, -1
  000df	40 0f 95 c6	 setne	 sil
  000e3	eb 6a		 jmp	 SHORT $LN14@g_read
$LN20@g_read:
  000e5	4c 8b c0	 mov	 r8, rax
  000e8	49 8b d6	 mov	 rdx, r14
  000eb	48 8b cf	 mov	 rcx, rdi
  000ee	e8 00 00 00 00	 call	 read_chars
; Line 537
  000f3	eb 58		 jmp	 SHORT $LN31@g_read
$LN12@g_read:
; Line 538
  000f5	45 33 c0	 xor	 r8d, r8d
  000f8	e8 00 00 00 00	 call	 luaL_checklstring
; Line 539
  000fd	80 38 2a	 cmp	 BYTE PTR [rax], 42	; 0000002aH
  00100	75 03		 jne	 SHORT $LN10@g_read
  00102	48 ff c0	 inc	 rax
$LN10@g_read:
; Line 540
  00105	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00108	3c 4c		 cmp	 al, 76			; 0000004cH
  0010a	74 33		 je	 SHORT $LN5@g_read
  0010c	3c 61		 cmp	 al, 97			; 00000061H
  0010e	74 1d		 je	 SHORT $LN4@g_read
  00110	3c 6c		 cmp	 al, 108			; 0000006cH
  00112	74 11		 je	 SHORT $LN6@g_read
; Line 542
  00114	48 8b cf	 mov	 rcx, rdi
  00117	3c 6e		 cmp	 al, 110			; 0000006eH
  00119	75 44		 jne	 SHORT $LN25@g_read
  0011b	49 8b d6	 mov	 rdx, r14
  0011e	e8 00 00 00 00	 call	 read_number
; Line 543
  00123	eb 28		 jmp	 SHORT $LN31@g_read
$LN6@g_read:
; Line 545
  00125	41 b8 01 00 00
	00		 mov	 r8d, 1
; Line 546
  0012b	eb 15		 jmp	 SHORT $LN32@g_read
$LN4@g_read:
; Line 551
  0012d	49 8b d6	 mov	 rdx, r14
  00130	48 8b cf	 mov	 rcx, rdi
  00133	e8 00 00 00 00	 call	 read_all
; Line 552
  00138	be 01 00 00 00	 mov	 esi, 1
; Line 553
  0013d	eb 10		 jmp	 SHORT $LN14@g_read
$LN5@g_read:
; Line 548
  0013f	45 33 c0	 xor	 r8d, r8d
$LN32@g_read:
  00142	49 8b d6	 mov	 rdx, r14
  00145	48 8b cf	 mov	 rcx, rdi
  00148	e8 00 00 00 00	 call	 read_line
$LN31@g_read:
  0014d	8b f0		 mov	 esi, eax
$LN14@g_read:
; Line 532
  0014f	ff c5		 inc	 ebp
  00151	45 85 ff	 test	 r15d, r15d
  00154	0f 85 36 ff ff
	ff		 jne	 $LL15@g_read
  0015a	e9 f3 fe ff ff	 jmp	 $LN30@g_read
$LN25@g_read:
; Line 555
  0015f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@CENJCLHM@invalid?5format?$AA@
  00166	8b d5		 mov	 edx, ebp
  00168	e8 00 00 00 00	 call	 luaL_argerror
  0016d	eb 1c		 jmp	 SHORT $LN18@g_read
$LN2@g_read:
; Line 562
  0016f	85 f6		 test	 esi, esi
  00171	75 13		 jne	 SHORT $LN1@g_read
; Line 563
  00173	8d 56 fe	 lea	 edx, QWORD PTR [rsi-2]
  00176	48 8b cf	 mov	 rcx, rdi
  00179	e8 00 00 00 00	 call	 lua_settop
; Line 564
  0017e	48 8b cf	 mov	 rcx, rdi
  00181	e8 00 00 00 00	 call	 lua_pushnil
$LN1@g_read:
; Line 566
  00186	41 2b ed	 sub	 ebp, r13d
  00189	8b c5		 mov	 eax, ebp
$LN18@g_read:
; Line 567
  0018b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00190	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00195	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0019a	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0019f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001a3	41 5f		 pop	 r15
  001a5	41 5e		 pop	 r14
  001a7	41 5d		 pop	 r13
  001a9	c3		 ret	 0
g_read	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT read_chars
_TEXT	SEGMENT
b$ = 32
__$ArrayPad$ = 8256
L$ = 8288
f$ = 8296
n$ = 8304
read_chars PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 507
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	57		 push	 rdi
  00006	b8 50 20 00 00	 mov	 eax, 8272		; 00002050H
  0000b	e8 00 00 00 00	 call	 __chkstk
  00010	48 2b e0	 sub	 rsp, rax
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 40
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00025	48 8b da	 mov	 rbx, rdx
; Line 511
  00028	48 8d 54 24 20	 lea	 rdx, QWORD PTR b$[rsp]
  0002d	49 8b f8	 mov	 rdi, r8
  00030	e8 00 00 00 00	 call	 luaL_buffinit
; Line 512
  00035	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$[rsp]
  0003a	48 8b d7	 mov	 rdx, rdi
  0003d	e8 00 00 00 00	 call	 luaL_prepbuffsize
; Line 513
  00042	4c 8b cb	 mov	 r9, rbx
  00045	4c 8b c7	 mov	 r8, rdi
  00048	48 8b c8	 mov	 rcx, rax
  0004b	ba 01 00 00 00	 mov	 edx, 1
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
; Line 515
  00056	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$[rsp]
  0005b	48 01 44 24 30	 add	 QWORD PTR b$[rsp+16], rax
  00060	48 8b d8	 mov	 rbx, rax
  00063	e8 00 00 00 00	 call	 luaL_pushresult
; Line 516
  00068	33 c0		 xor	 eax, eax
  0006a	48 85 db	 test	 rbx, rbx
  0006d	0f 95 c0	 setne	 al
; Line 517
  00070	48 8b 8c 24 40
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00078	48 33 cc	 xor	 rcx, rsp
  0007b	e8 00 00 00 00	 call	 __security_check_cookie
  00080	48 8b 9c 24 78
	20 00 00	 mov	 rbx, QWORD PTR [rsp+8312]
  00088	48 81 c4 50 20
	00 00		 add	 rsp, 8272		; 00002050H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
read_chars ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT read_all
_TEXT	SEGMENT
b$ = 32
__$ArrayPad$ = 8256
L$ = 8288
f$ = 8296
read_all PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 494
  00000	40 53		 push	 rbx
  00002	b8 50 20 00 00	 mov	 eax, 8272		; 00002050H
  00007	e8 00 00 00 00	 call	 __chkstk
  0000c	48 2b e0	 sub	 rsp, rax
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 84 24 40
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00021	48 8b da	 mov	 rbx, rdx
; Line 497
  00024	48 8d 54 24 20	 lea	 rdx, QWORD PTR b$[rsp]
  00029	e8 00 00 00 00	 call	 luaL_buffinit
  0002e	66 90		 npad	 2
$LL3@read_all:
; Line 499
  00030	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$[rsp]
  00035	ba 00 20 00 00	 mov	 edx, 8192		; 00002000H
  0003a	e8 00 00 00 00	 call	 luaL_prepbuffsize
; Line 500
  0003f	4c 8b cb	 mov	 r9, rbx
  00042	ba 01 00 00 00	 mov	 edx, 1
  00047	48 8b c8	 mov	 rcx, rax
  0004a	41 b8 00 20 00
	00		 mov	 r8d, 8192		; 00002000H
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
; Line 501
  00056	48 01 44 24 30	 add	 QWORD PTR b$[rsp+16], rax
; Line 502
  0005b	48 3d 00 20 00
	00		 cmp	 rax, 8192		; 00002000H
  00061	74 cd		 je	 SHORT $LL3@read_all
; Line 503
  00063	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$[rsp]
  00068	e8 00 00 00 00	 call	 luaL_pushresult
; Line 504
  0006d	48 8b 8c 24 40
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00075	48 33 cc	 xor	 rcx, rsp
  00078	e8 00 00 00 00	 call	 __security_check_cookie
  0007d	48 81 c4 50 20
	00 00		 add	 rsp, 8272		; 00002050H
  00084	5b		 pop	 rbx
  00085	c3		 ret	 0
read_all ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT read_line
_TEXT	SEGMENT
b$ = 32
__$ArrayPad$ = 8256
L$ = 8320
f$ = 8328
chop$ = 8336
read_line PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 473
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	b8 50 20 00 00	 mov	 eax, 8272		; 00002050H
  00017	e8 00 00 00 00	 call	 __chkstk
  0001c	48 2b e0	 sub	 rsp, rax
  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00026	48 33 c4	 xor	 rax, rsp
  00029	48 89 84 24 40
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00031	4c 8b f2	 mov	 r14, rdx
; Line 476
  00034	48 8d 54 24 20	 lea	 rdx, QWORD PTR b$[rsp]
  00039	45 8b f8	 mov	 r15d, r8d
  0003c	4c 8b e1	 mov	 r12, rcx
  0003f	33 db		 xor	 ebx, ebx
  00041	e8 00 00 00 00	 call	 luaL_buffinit
  00046	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp+16]
  0004b	0f 1f 44 00 00	 npad	 5
$LL5@read_line:
; Line 477
  00050	83 fb 0a	 cmp	 ebx, 10
  00053	74 56		 je	 SHORT $LN4@read_line
; Line 478
  00055	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$[rsp]
  0005a	ba 00 20 00 00	 mov	 edx, 8192		; 00002000H
  0005f	e8 00 00 00 00	 call	 luaL_prepbuffsize
; Line 479
  00064	33 f6		 xor	 esi, esi
  00066	33 ff		 xor	 edi, edi
  00068	48 8b e8	 mov	 rbp, rax
  0006b	0f 1f 44 00 00	 npad	 5
$LL3@read_line:
; Line 481
  00070	49 8b ce	 mov	 rcx, r14
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  00079	8b d8		 mov	 ebx, eax
  0007b	83 f8 ff	 cmp	 eax, -1
  0007e	74 16		 je	 SHORT $LN2@read_line
  00080	83 f8 0a	 cmp	 eax, 10
  00083	74 11		 je	 SHORT $LN2@read_line
; Line 482
  00085	88 04 2f	 mov	 BYTE PTR [rdi+rbp], al
  00088	48 ff c7	 inc	 rdi
  0008b	ff c6		 inc	 esi
  0008d	48 81 ff 00 20
	00 00		 cmp	 rdi, 8192		; 00002000H
  00094	7c da		 jl	 SHORT $LL3@read_line
$LN2@read_line:
; Line 484
  00096	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp+16]
  0009b	48 63 c6	 movsxd	 rax, esi
  0009e	48 03 c8	 add	 rcx, rax
  000a1	48 89 4c 24 30	 mov	 QWORD PTR b$[rsp+16], rcx
  000a6	83 fb ff	 cmp	 ebx, -1
  000a9	75 a5		 jne	 SHORT $LL5@read_line
$LN4@read_line:
; Line 486
  000ab	45 85 ff	 test	 r15d, r15d
  000ae	75 2c		 jne	 SHORT $LN1@read_line
  000b0	83 fb 0a	 cmp	 ebx, 10
  000b3	75 27		 jne	 SHORT $LN1@read_line
; Line 487
  000b5	48 3b 4c 24 28	 cmp	 rcx, QWORD PTR b$[rsp+8]
  000ba	72 12		 jb	 SHORT $LN8@read_line
  000bc	8d 53 f7	 lea	 edx, QWORD PTR [rbx-9]
  000bf	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$[rsp]
  000c4	e8 00 00 00 00	 call	 luaL_prepbuffsize
  000c9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp+16]
$LN8@read_line:
  000ce	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
  000d3	c6 04 08 0a	 mov	 BYTE PTR [rax+rcx], 10
  000d7	48 ff 44 24 30	 inc	 QWORD PTR b$[rsp+16]
$LN1@read_line:
; Line 488
  000dc	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$[rsp]
  000e1	e8 00 00 00 00	 call	 luaL_pushresult
; Line 490
  000e6	83 fb 0a	 cmp	 ebx, 10
  000e9	74 10		 je	 SHORT $LN9@read_line
  000eb	83 ca ff	 or	 edx, -1
  000ee	49 8b cc	 mov	 rcx, r12
  000f1	e8 00 00 00 00	 call	 lua_rawlen
  000f6	48 85 c0	 test	 rax, rax
  000f9	74 05		 je	 SHORT $LN10@read_line
$LN9@read_line:
  000fb	b8 01 00 00 00	 mov	 eax, 1
$LN10@read_line:
; Line 491
  00100	48 8b 8c 24 40
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00108	48 33 cc	 xor	 rcx, rsp
  0010b	e8 00 00 00 00	 call	 __security_check_cookie
  00110	4c 8d 9c 24 50
	20 00 00	 lea	 r11, QWORD PTR [rsp+8272]
  00118	49 8b 5b 40	 mov	 rbx, QWORD PTR [r11+64]
  0011c	49 8b 6b 48	 mov	 rbp, QWORD PTR [r11+72]
  00120	49 8b e3	 mov	 rsp, r11
  00123	41 5f		 pop	 r15
  00125	41 5e		 pop	 r14
  00127	41 5c		 pop	 r12
  00129	5f		 pop	 rdi
  0012a	5e		 pop	 rsi
  0012b	c3		 ret	 0
read_line ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT test_eof
_TEXT	SEGMENT
L$ = 48
f$ = 56
test_eof PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 465
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx
; Line 466
  00012	48 8b ca	 mov	 rcx, rdx
  00015	48 8b da	 mov	 rbx, rdx
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
; Line 467
  0001e	48 8b d3	 mov	 rdx, rbx
  00021	8b c8		 mov	 ecx, eax
  00023	8b f8		 mov	 edi, eax
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ungetc
; Line 468
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00032	48 8b ce	 mov	 rcx, rsi
  00035	e8 00 00 00 00	 call	 lua_pushstring
; Line 470
  0003a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00044	33 c0		 xor	 eax, eax
  00046	83 ff ff	 cmp	 edi, -1
  00049	0f 95 c0	 setne	 al
  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5f		 pop	 rdi
  00051	c3		 ret	 0
test_eof ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT read_number
_TEXT	SEGMENT
rn$ = 32
__$ArrayPad$ = 256
L$ = 336
f$ = 344
read_number PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 431
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	41 57		 push	 r15
  00010	48 8d 6c 24 f0	 lea	 rbp, QWORD PTR [rsp-16]
  00015	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 45 00	 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax
; Line 433
  0002a	33 f6		 xor	 esi, esi
  0002c	4c 8b e9	 mov	 r13, rcx
; Line 436
  0002f	48 89 54 24 20	 mov	 QWORD PTR rn$[rsp], rdx
  00034	44 8b f6	 mov	 r14d, esi
  00037	44 8b e6	 mov	 r12d, esi
  0003a	89 74 24 2c	 mov	 DWORD PTR rn$[rsp+12], esi
; Line 437
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_localeconv
  00044	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00047	44 0f b6 39	 movzx	 r15d, BYTE PTR [rcx]
  0004b	0f 1f 44 00 00	 npad	 5
$LL10@read_numbe:
; Line 440
  00050	48 8b 4c 24 20	 mov	 rcx, QWORD PTR rn$[rsp]
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  0005b	8b c8		 mov	 ecx, eax
  0005d	89 44 24 28	 mov	 DWORD PTR rn$[rsp+8], eax
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isspace
  00067	85 c0		 test	 eax, eax
  00069	75 e5		 jne	 SHORT $LL10@read_numbe
  0006b	8b 4c 24 28	 mov	 ecx, DWORD PTR rn$[rsp+8]
  0006f	8d 41 d5	 lea	 eax, DWORD PTR [rcx-43]
  00072	a9 fd ff ff ff	 test	 eax, -3			; fffffffdH
  00077	75 34		 jne	 SHORT $LN130@read_numbe
; Line 441
  00079	48 63 44 24 2c	 movsxd	 rax, DWORD PTR rn$[rsp+12]
  0007e	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00083	7c 07		 jl	 SHORT $LN21@read_numbe
  00085	40 88 74 24 30	 mov	 BYTE PTR rn$[rsp+16], sil
  0008a	eb 25		 jmp	 SHORT $LN20@read_numbe
$LN21@read_numbe:
  0008c	48 8b c8	 mov	 rcx, rax
  0008f	0f b6 44 24 28	 movzx	 eax, BYTE PTR rn$[rsp+8]
  00094	88 44 0c 30	 mov	 BYTE PTR rn$[rsp+rcx+16], al
  00098	48 8b 4c 24 20	 mov	 rcx, QWORD PTR rn$[rsp]
  0009d	ff 44 24 2c	 inc	 DWORD PTR rn$[rsp+12]
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  000a7	8b c8		 mov	 ecx, eax
  000a9	89 44 24 28	 mov	 DWORD PTR rn$[rsp+8], eax
$LN130@read_numbe:
  000ad	8b 44 24 2c	 mov	 eax, DWORD PTR rn$[rsp+12]
$LN20@read_numbe:
; Line 442
  000b1	83 f9 30	 cmp	 ecx, 48			; 00000030H
  000b4	75 4b		 jne	 SHORT $LN5@read_numbe
  000b6	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  000bb	7c 07		 jl	 SHORT $LN30@read_numbe
  000bd	40 88 74 24 30	 mov	 BYTE PTR rn$[rsp+16], sil
  000c2	eb 3d		 jmp	 SHORT $LN5@read_numbe
$LN30@read_numbe:
  000c4	48 98		 cdqe
  000c6	c6 44 04 30 30	 mov	 BYTE PTR rn$[rsp+rax+16], 48 ; 00000030H
  000cb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR rn$[rsp]
  000d0	ff 44 24 2c	 inc	 DWORD PTR rn$[rsp+12]
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  000da	8b c8		 mov	 ecx, eax
  000dc	89 44 24 28	 mov	 DWORD PTR rn$[rsp+8], eax
  000e0	83 c0 a8	 add	 eax, -88		; ffffffa8H
  000e3	a9 df ff ff ff	 test	 eax, -33		; ffffffdfH
  000e8	75 11		 jne	 SHORT $LN6@read_numbe
; Line 443
  000ea	48 63 44 24 2c	 movsxd	 rax, DWORD PTR rn$[rsp+12]
  000ef	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  000f4	7c 1a		 jl	 SHORT $LN39@read_numbe
  000f6	40 88 74 24 30	 mov	 BYTE PTR rn$[rsp+16], sil
$LN6@read_numbe:
; Line 444
  000fb	41 be 01 00 00
	00		 mov	 r14d, 1
$LN5@read_numbe:
; Line 446
  00101	8b fe		 mov	 edi, esi
$LL43@read_numbe:
  00103	45 85 e4	 test	 r12d, r12d
  00106	74 31		 je	 SHORT $LN46@read_numbe
  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isxdigit
  0010e	eb 2f		 jmp	 SHORT $LN47@read_numbe
; Line 443
$LN39@read_numbe:
  00110	48 8b c8	 mov	 rcx, rax
  00113	0f b6 44 24 28	 movzx	 eax, BYTE PTR rn$[rsp+8]
  00118	88 44 0c 30	 mov	 BYTE PTR rn$[rsp+rcx+16], al
  0011c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR rn$[rsp]
  00121	ff 44 24 2c	 inc	 DWORD PTR rn$[rsp+12]
  00125	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  0012b	41 bc 01 00 00
	00		 mov	 r12d, 1
  00131	8b c8		 mov	 ecx, eax
  00133	89 44 24 28	 mov	 DWORD PTR rn$[rsp+8], eax
  00137	eb c8		 jmp	 SHORT $LN5@read_numbe
; Line 446
$LN46@read_numbe:
  00139	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
$LN47@read_numbe:
  0013f	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR rn$[rsp+12]
  00144	85 c0		 test	 eax, eax
  00146	74 2f		 je	 SHORT $LN42@read_numbe
  00148	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  0014e	7d 22		 jge	 SHORT $LN116@read_numbe
  00150	0f b6 44 24 28	 movzx	 eax, BYTE PTR rn$[rsp+8]
  00155	88 44 0c 30	 mov	 BYTE PTR rn$[rsp+rcx+16], al
  00159	48 8b 4c 24 20	 mov	 rcx, QWORD PTR rn$[rsp]
  0015e	ff 44 24 2c	 inc	 DWORD PTR rn$[rsp+12]
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  00168	ff c7		 inc	 edi
  0016a	8b c8		 mov	 ecx, eax
  0016c	89 44 24 28	 mov	 DWORD PTR rn$[rsp+8], eax
  00170	eb 91		 jmp	 SHORT $LL43@read_numbe
$LN116@read_numbe:
  00172	40 88 74 24 30	 mov	 BYTE PTR rn$[rsp+16], sil
$LN42@read_numbe:
; Line 447
  00177	44 8b 44 24 28	 mov	 r8d, DWORD PTR rn$[rsp+8]
  0017c	41 0f be c7	 movsx	 eax, r15b
  00180	44 03 f7	 add	 r14d, edi
  00183	44 3b c0	 cmp	 r8d, eax
  00186	75 7a		 jne	 SHORT $LN4@read_numbe
  00188	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  0018e	7c 07		 jl	 SHORT $LN58@read_numbe
  00190	40 88 74 24 30	 mov	 BYTE PTR rn$[rsp+16], sil
  00195	eb 6b		 jmp	 SHORT $LN4@read_numbe
$LN58@read_numbe:
  00197	0f b6 44 24 28	 movzx	 eax, BYTE PTR rn$[rsp+8]
  0019c	88 44 0c 30	 mov	 BYTE PTR rn$[rsp+rcx+16], al
  001a0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR rn$[rsp]
  001a5	ff 44 24 2c	 inc	 DWORD PTR rn$[rsp+12]
  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
$LN134@read_numbe:
  001af	89 44 24 28	 mov	 DWORD PTR rn$[rsp+8], eax
; Line 448
  001b3	8b c8		 mov	 ecx, eax
  001b5	45 85 e4	 test	 r12d, r12d
  001b8	74 08		 je	 SHORT $LN65@read_numbe
  001ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isxdigit
  001c0	eb 06		 jmp	 SHORT $LN66@read_numbe
$LN65@read_numbe:
  001c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
$LN66@read_numbe:
  001c8	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR rn$[rsp+12]
  001cd	85 c0		 test	 eax, eax
  001cf	74 29		 je	 SHORT $LN61@read_numbe
  001d1	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  001d7	7d 1c		 jge	 SHORT $LN117@read_numbe
  001d9	0f b6 44 24 28	 movzx	 eax, BYTE PTR rn$[rsp+8]
  001de	88 44 0c 30	 mov	 BYTE PTR rn$[rsp+rcx+16], al
  001e2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR rn$[rsp]
  001e7	ff 44 24 2c	 inc	 DWORD PTR rn$[rsp+12]
  001eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  001f1	ff c6		 inc	 esi
  001f3	eb ba		 jmp	 SHORT $LN134@read_numbe
$LN117@read_numbe:
  001f5	c6 44 24 30 00	 mov	 BYTE PTR rn$[rsp+16], 0
$LN61@read_numbe:
  001fa	44 8b 44 24 28	 mov	 r8d, DWORD PTR rn$[rsp+8]
  001ff	44 03 f6	 add	 r14d, esi
$LN4@read_numbe:
; Line 449
  00202	45 85 f6	 test	 r14d, r14d
  00205	0f 8e cc 00 00
	00		 jle	 $LN89@read_numbe
  0020b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02OOPEBDOJ@pP?$AA@
  00212	45 85 e4	 test	 r12d, r12d
  00215	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MDKMJEGG@eE?$AA@
  0021c	48 0f 45 d0	 cmovne	 rdx, rax
  00220	0f be 02	 movsx	 eax, BYTE PTR [rdx]
  00223	44 3b c0	 cmp	 r8d, eax
  00226	74 16		 je	 SHORT $LN72@read_numbe
  00228	0f be 42 01	 movsx	 eax, BYTE PTR [rdx+1]
  0022c	44 3b c0	 cmp	 r8d, eax
  0022f	0f 85 a2 00 00
	00		 jne	 $LN89@read_numbe
  00235	45 85 c0	 test	 r8d, r8d
  00238	0f 84 99 00 00
	00		 je	 $LN89@read_numbe
$LN72@read_numbe:
  0023e	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  00244	7c 0a		 jl	 SHORT $LN77@read_numbe
  00246	c6 44 24 30 00	 mov	 BYTE PTR rn$[rsp+16], 0
  0024b	e9 87 00 00 00	 jmp	 $LN89@read_numbe
$LN77@read_numbe:
  00250	0f b6 44 24 28	 movzx	 eax, BYTE PTR rn$[rsp+8]
  00255	48 63 c9	 movsxd	 rcx, ecx
  00258	88 44 0c 30	 mov	 BYTE PTR rn$[rsp+rcx+16], al
  0025c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR rn$[rsp]
  00261	ff 44 24 2c	 inc	 DWORD PTR rn$[rsp+12]
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  0026b	89 44 24 28	 mov	 DWORD PTR rn$[rsp+8], eax
  0026f	8d 48 d5	 lea	 ecx, DWORD PTR [rax-43]
  00272	f7 c1 fd ff ff
	ff		 test	 ecx, -3			; fffffffdH
  00278	75 36		 jne	 SHORT $LL90@read_numbe
; Line 450
  0027a	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR rn$[rsp+12]
  0027f	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  00285	7c 07		 jl	 SHORT $LN86@read_numbe
  00287	c6 44 24 30 00	 mov	 BYTE PTR rn$[rsp+16], 0
  0028c	eb 22		 jmp	 SHORT $LL90@read_numbe
$LN86@read_numbe:
  0028e	0f b6 44 24 28	 movzx	 eax, BYTE PTR rn$[rsp+8]
  00293	88 44 0c 30	 mov	 BYTE PTR rn$[rsp+rcx+16], al
  00297	48 8b 4c 24 20	 mov	 rcx, QWORD PTR rn$[rsp]
  0029c	ff 44 24 2c	 inc	 DWORD PTR rn$[rsp+12]
  002a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  002a6	89 44 24 28	 mov	 DWORD PTR rn$[rsp+8], eax
  002aa	66 0f 1f 44 00
	00		 npad	 6
; Line 451
$LL90@read_numbe:
  002b0	8b c8		 mov	 ecx, eax
  002b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  002b8	85 c0		 test	 eax, eax
  002ba	74 16		 je	 SHORT $LN131@read_numbe
  002bc	48 63 44 24 2c	 movsxd	 rax, DWORD PTR rn$[rsp+12]
  002c1	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  002c6	7d 05		 jge	 SHORT $LN118@read_numbe
  002c8	48 8b c8	 mov	 rcx, rax
  002cb	eb c1		 jmp	 SHORT $LN86@read_numbe
$LN118@read_numbe:
  002cd	c6 44 24 30 00	 mov	 BYTE PTR rn$[rsp+16], 0
$LN131@read_numbe:
  002d2	44 8b 44 24 28	 mov	 r8d, DWORD PTR rn$[rsp+8]
$LN89@read_numbe:
; Line 453
  002d7	48 8b 54 24 20	 mov	 rdx, QWORD PTR rn$[rsp]
  002dc	41 8b c8	 mov	 ecx, r8d
  002df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ungetc
; Line 455
  002e5	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR rn$[rsp+12]
; Line 456
  002ea	48 8d 54 24 30	 lea	 rdx, QWORD PTR rn$[rsp+16]
  002ef	c6 44 0c 30 00	 mov	 BYTE PTR rn$[rsp+rcx+16], 0
  002f4	49 8b cd	 mov	 rcx, r13
  002f7	e8 00 00 00 00	 call	 lua_stringtonumber
  002fc	48 85 c0	 test	 rax, rax
  002ff	74 07		 je	 SHORT $LN2@read_numbe
; Line 457
  00301	b8 01 00 00 00	 mov	 eax, 1
  00306	eb 0a		 jmp	 SHORT $LN1@read_numbe
$LN2@read_numbe:
; Line 459
  00308	49 8b cd	 mov	 rcx, r13
  0030b	e8 00 00 00 00	 call	 lua_pushnil
; Line 460
  00310	33 c0		 xor	 eax, eax
$LN1@read_numbe:
; Line 462
  00312	48 8b 4d 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  00316	48 33 cc	 xor	 rcx, rsp
  00319	e8 00 00 00 00	 call	 __security_check_cookie
  0031e	48 8b 9c 24 60
	01 00 00	 mov	 rbx, QWORD PTR [rsp+352]
  00326	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  0032d	41 5f		 pop	 r15
  0032f	41 5e		 pop	 r14
  00331	41 5d		 pop	 r13
  00333	41 5c		 pop	 r12
  00335	5f		 pop	 rdi
  00336	5e		 pop	 rsi
  00337	5d		 pop	 rbp
  00338	c3		 ret	 0
read_number ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT readdigits
_TEXT	SEGMENT
rn$ = 48
hex$ = 56
readdigits PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 418
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b f2		 mov	 esi, edx
  00011	48 8b d9	 mov	 rbx, rcx
; Line 419
  00014	33 ff		 xor	 edi, edi
$LL2@readdigits:
; Line 420
  00016	8b 4b 08	 mov	 ecx, DWORD PTR [rbx+8]
  00019	85 f6		 test	 esi, esi
  0001b	74 08		 je	 SHORT $LN5@readdigits
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isxdigit
  00023	eb 06		 jmp	 SHORT $LN6@readdigits
$LN5@readdigits:
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
$LN6@readdigits:
  0002b	85 c0		 test	 eax, eax
  0002d	74 2d		 je	 SHORT $LN16@readdigits
  0002f	48 63 43 0c	 movsxd	 rax, DWORD PTR [rbx+12]
  00033	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00038	7d 1e		 jge	 SHORT $LN15@readdigits
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	0f b6 43 08	 movzx	 eax, BYTE PTR [rbx+8]
  00041	88 44 19 10	 mov	 BYTE PTR [rcx+rbx+16], al
  00045	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00048	ff 43 0c	 inc	 DWORD PTR [rbx+12]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
; Line 421
  00051	ff c7		 inc	 edi
  00053	89 43 08	 mov	 DWORD PTR [rbx+8], eax
  00056	eb be		 jmp	 SHORT $LL2@readdigits
$LN15@readdigits:
; Line 420
  00058	c6 43 10 00	 mov	 BYTE PTR [rbx+16], 0
$LN16@readdigits:
; Line 423
  0005c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00061	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00066	8b c7		 mov	 eax, edi
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
readdigits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT test2
_TEXT	SEGMENT
rn$ = 48
set$ = 56
test2	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 408
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 409
  00006	0f be 02	 movsx	 eax, BYTE PTR [rdx]
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0000f	3b c8		 cmp	 ecx, eax
  00011	74 0c		 je	 SHORT $LN2@test2
  00013	0f be 42 01	 movsx	 eax, BYTE PTR [rdx+1]
  00017	3b c8		 cmp	 ecx, eax
  00019	75 13		 jne	 SHORT $LN3@test2
  0001b	85 c9		 test	 ecx, ecx
  0001d	74 0f		 je	 SHORT $LN3@test2
$LN2@test2:
; Line 410
  0001f	48 63 43 0c	 movsxd	 rax, DWORD PTR [rbx+12]
  00023	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00028	7c 0c		 jl	 SHORT $LN7@test2
  0002a	c6 43 10 00	 mov	 BYTE PTR [rbx+16], 0
$LN3@test2:
  0002e	33 c0		 xor	 eax, eax
; Line 412
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5b		 pop	 rbx
  00035	c3		 ret	 0
; Line 410
$LN7@test2:
  00036	48 8b c8	 mov	 rcx, rax
  00039	0f b6 43 08	 movzx	 eax, BYTE PTR [rbx+8]
  0003d	88 44 19 10	 mov	 BYTE PTR [rcx+rbx+16], al
  00041	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00044	ff 43 0c	 inc	 DWORD PTR [rbx+12]
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  0004d	89 43 08	 mov	 DWORD PTR [rbx+8], eax
  00050	b8 01 00 00 00	 mov	 eax, 1
; Line 412
  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5b		 pop	 rbx
  0005a	c3		 ret	 0
test2	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT nextc
_TEXT	SEGMENT
rn$ = 48
nextc	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 392
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 393
  00006	48 63 41 0c	 movsxd	 rax, DWORD PTR [rcx+12]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00012	7c 0c		 jl	 SHORT $LN2@nextc
; Line 394
  00014	c6 41 10 00	 mov	 BYTE PTR [rcx+16], 0
; Line 395
  00018	33 c0		 xor	 eax, eax
; Line 402
  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5b		 pop	 rbx
  0001f	c3		 ret	 0
$LN2@nextc:
; Line 398
  00020	48 8b c8	 mov	 rcx, rax
  00023	0f b6 43 08	 movzx	 eax, BYTE PTR [rbx+8]
  00027	88 44 19 10	 mov	 BYTE PTR [rcx+rbx+16], al
; Line 399
  0002b	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0002e	ff 43 0c	 inc	 DWORD PTR [rbx+12]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  00037	89 43 08	 mov	 DWORD PTR [rbx+8], eax
; Line 400
  0003a	b8 01 00 00 00	 mov	 eax, 1
; Line 402
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5b		 pop	 rbx
  00044	c3		 ret	 0
nextc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_lines
_TEXT	SEGMENT
L$ = 48
io_lines PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 350
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 352
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_type
  00013	83 f8 ff	 cmp	 eax, -1
  00016	75 08		 jne	 SHORT $LN3@io_lines
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	e8 00 00 00 00	 call	 lua_pushnil
$LN3@io_lines:
; Line 353
  00020	ba 01 00 00 00	 mov	 edx, 1
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 lua_type
; Line 354
  0002d	48 8b cb	 mov	 rcx, rbx
  00030	85 c0		 test	 eax, eax
  00032	75 6e		 jne	 SHORT $LN2@io_lines
  00034	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09HINEJHGE@_IO_input?$AA@
  0003b	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00040	e8 00 00 00 00	 call	 lua_getfield
; Line 355
  00045	41 b8 01 00 00
	00		 mov	 r8d, 1
  0004b	83 ca ff	 or	 edx, -1
  0004e	48 8b cb	 mov	 rcx, rbx
  00051	e8 00 00 00 00	 call	 lua_copy
  00056	ba fe ff ff ff	 mov	 edx, -2
  0005b	48 8b cb	 mov	 rcx, rbx
  0005e	e8 00 00 00 00	 call	 lua_settop
; Line 356
  00063	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0006a	ba 01 00 00 00	 mov	 edx, 1
  0006f	48 8b cb	 mov	 rcx, rbx
  00072	e8 00 00 00 00	 call	 luaL_checkudata
  00077	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0007c	75 0f		 jne	 SHORT $LN6@io_lines
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@
  00085	48 8b cb	 mov	 rcx, rbx
  00088	e8 00 00 00 00	 call	 luaL_error
$LN6@io_lines:
; Line 357
  0008d	33 d2		 xor	 edx, edx
; Line 365
  0008f	48 8b cb	 mov	 rcx, rbx
  00092	e8 00 00 00 00	 call	 aux_lines
; Line 366
  00097	b8 01 00 00 00	 mov	 eax, 1
; Line 367
  0009c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a0	5b		 pop	 rbx
  000a1	c3		 ret	 0
$LN2@io_lines:
; Line 360
  000a2	45 33 c0	 xor	 r8d, r8d
  000a5	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  000a9	e8 00 00 00 00	 call	 luaL_checklstring
; Line 361
  000ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  000b5	48 8b cb	 mov	 rcx, rbx
  000b8	48 8b d0	 mov	 rdx, rax
  000bb	e8 00 00 00 00	 call	 opencheck
; Line 362
  000c0	41 b8 01 00 00
	00		 mov	 r8d, 1
  000c6	83 ca ff	 or	 edx, -1
  000c9	48 8b cb	 mov	 rcx, rbx
  000cc	e8 00 00 00 00	 call	 lua_copy
  000d1	ba fe ff ff ff	 mov	 edx, -2
  000d6	48 8b cb	 mov	 rcx, rbx
  000d9	e8 00 00 00 00	 call	 lua_settop
; Line 363
  000de	ba 01 00 00 00	 mov	 edx, 1
; Line 365
  000e3	48 8b cb	 mov	 rcx, rbx
  000e6	e8 00 00 00 00	 call	 aux_lines
; Line 366
  000eb	b8 01 00 00 00	 mov	 eax, 1
; Line 367
  000f0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f4	5b		 pop	 rbx
  000f5	c3		 ret	 0
io_lines ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT f_lines
_TEXT	SEGMENT
L$ = 48
f_lines	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 343
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 344
  00006	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0000d	ba 01 00 00 00	 mov	 edx, 1
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 luaL_checkudata
  0001a	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0001f	75 0f		 jne	 SHORT $LN3@f_lines
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@
  00028	48 8b cb	 mov	 rcx, rbx
  0002b	e8 00 00 00 00	 call	 luaL_error
$LN3@f_lines:
; Line 345
  00030	33 d2		 xor	 edx, edx
  00032	48 8b cb	 mov	 rcx, rbx
  00035	e8 00 00 00 00	 call	 aux_lines
; Line 346
  0003a	b8 01 00 00 00	 mov	 eax, 1
; Line 347
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5b		 pop	 rbx
  00044	c3		 ret	 0
f_lines	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT aux_lines
_TEXT	SEGMENT
L$ = 48
toclose$ = 56
aux_lines PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 333
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b f2		 mov	 esi, edx
  00011	48 8b d9	 mov	 rbx, rcx
; Line 334
  00014	e8 00 00 00 00	 call	 lua_gettop
  00019	8d 78 ff	 lea	 edi, DWORD PTR [rax-1]
; Line 335
  0001c	81 ff fa 00 00
	00		 cmp	 edi, 250		; 000000faH
  00022	7e 14		 jle	 SHORT $LN3@aux_lines
  00024	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@
  0002b	ba fc 00 00 00	 mov	 edx, 252		; 000000fcH
  00030	48 8b cb	 mov	 rcx, rbx
  00033	e8 00 00 00 00	 call	 luaL_argerror
$LN3@aux_lines:
; Line 336
  00038	48 63 d7	 movsxd	 rdx, edi
  0003b	48 8b cb	 mov	 rcx, rbx
  0003e	e8 00 00 00 00	 call	 lua_pushinteger
; Line 337
  00043	8b d6		 mov	 edx, esi
  00045	48 8b cb	 mov	 rcx, rbx
  00048	e8 00 00 00 00	 call	 lua_pushboolean
; Line 338
  0004d	ba 02 00 00 00	 mov	 edx, 2
  00052	48 8b cb	 mov	 rcx, rbx
  00055	44 8b c2	 mov	 r8d, edx
  00058	e8 00 00 00 00	 call	 lua_rotate
; Line 339
  0005d	44 8d 47 03	 lea	 r8d, DWORD PTR [rdi+3]
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:io_readline
  00068	48 8b cb	 mov	 rcx, rbx
; Line 340
  0006b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00070	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5f		 pop	 rdi
; Line 339
  0007a	e9 00 00 00 00	 jmp	 lua_pushcclosure
aux_lines ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_readline
_TEXT	SEGMENT
L$ = 64
cf$1 = 72
io_readline PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 580
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	41 56		 push	 r14
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 581
  00009	ba d7 b9 f0 ff	 mov	 edx, -1001001		; fffffffffff0b9d7H
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	e8 00 00 00 00	 call	 lua_touserdata
; Line 583
  00016	45 33 c0	 xor	 r8d, r8d
  00019	ba d6 b9 f0 ff	 mov	 edx, -1001002		; fffffffffff0b9d6H
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	4c 8b f0	 mov	 r14, rax
  00024	e8 00 00 00 00	 call	 lua_tointegerx
; Line 584
  00029	49 83 7e 08 00	 cmp	 QWORD PTR [r14+8], 0
; Line 585
  0002e	48 8b cb	 mov	 rcx, rbx
  00031	48 8b f0	 mov	 rsi, rax
  00034	75 14		 jne	 SHORT $LN8@io_readlin
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PBGIDLEF@file?5is?5already?5closed?$AA@
; Line 606
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	41 5e		 pop	 r14
  00043	5e		 pop	 rsi
  00044	5b		 pop	 rbx
; Line 585
  00045	e9 00 00 00 00	 jmp	 luaL_error
$LN8@io_readlin:
  0004a	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
; Line 586
  0004f	bd 01 00 00 00	 mov	 ebp, 1
  00054	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00059	8b d5		 mov	 edx, ebp
  0005b	e8 00 00 00 00	 call	 lua_settop
; Line 587
  00060	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@IOJAAODF@too?5many?5arguments?$AA@
  00067	8b d6		 mov	 edx, esi
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 luaL_checkstack
; Line 588
  00071	3b f5		 cmp	 esi, ebp
  00073	7c 1c		 jl	 SHORT $LN5@io_readlin
; Line 586
  00075	bf d4 b9 f0 ff	 mov	 edi, -1001004		; fffffffffff0b9d4H
  0007a	8b f6		 mov	 esi, esi
  0007c	0f 1f 40 00	 npad	 4
$LL7@io_readlin:
; Line 589
  00080	8b d7		 mov	 edx, edi
  00082	48 8b cb	 mov	 rcx, rbx
  00085	e8 00 00 00 00	 call	 lua_pushvalue
  0008a	ff cf		 dec	 edi
  0008c	48 ff ce	 dec	 rsi
  0008f	75 ef		 jne	 SHORT $LL7@io_readlin
$LN5@io_readlin:
; Line 590
  00091	49 8b 16	 mov	 rdx, QWORD PTR [r14]
  00094	41 b8 02 00 00
	00		 mov	 r8d, 2
  0009a	48 8b cb	 mov	 rcx, rbx
  0009d	e8 00 00 00 00	 call	 g_read
; Line 592
  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	8b d0		 mov	 edx, eax
  000a7	8b f8		 mov	 edi, eax
  000a9	f7 da		 neg	 edx
  000ab	e8 00 00 00 00	 call	 lua_toboolean
  000b0	85 c0		 test	 eax, eax
  000b2	74 04		 je	 SHORT $LN4@io_readlin
; Line 593
  000b4	8b c7		 mov	 eax, edi
  000b6	eb 7a		 jmp	 SHORT $LN18@io_readlin
$LN4@io_readlin:
; Line 597
  000b8	48 8b cb	 mov	 rcx, rbx
  000bb	3b fd		 cmp	 edi, ebp
  000bd	7e 20		 jle	 SHORT $LN2@io_readlin
  000bf	2b ef		 sub	 ebp, edi
  000c1	45 33 c0	 xor	 r8d, r8d
  000c4	8b d5		 mov	 edx, ebp
  000c6	e8 00 00 00 00	 call	 lua_tolstring
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
  000d2	48 8b cb	 mov	 rcx, rbx
  000d5	4c 8b c0	 mov	 r8, rax
  000d8	e8 00 00 00 00	 call	 luaL_error
  000dd	eb 53		 jmp	 SHORT $LN18@io_readlin
$LN2@io_readlin:
; Line 599
  000df	ba d5 b9 f0 ff	 mov	 edx, -1001003		; fffffffffff0b9d5H
  000e4	e8 00 00 00 00	 call	 lua_toboolean
  000e9	85 c0		 test	 eax, eax
  000eb	74 43		 je	 SHORT $LN11@io_readlin
; Line 600
  000ed	33 d2		 xor	 edx, edx
  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	e8 00 00 00 00	 call	 lua_settop
; Line 601
  000f7	ba d7 b9 f0 ff	 mov	 edx, -1001001		; fffffffffff0b9d7H
  000fc	48 8b cb	 mov	 rcx, rbx
  000ff	e8 00 00 00 00	 call	 lua_pushvalue
; Line 602
  00104	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0010b	8b d5		 mov	 edx, ebp
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	e8 00 00 00 00	 call	 luaL_checkudata
  00115	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00119	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00121	48 89 4c 24 48	 mov	 QWORD PTR cf$1[rsp], rcx
  00126	48 8b cb	 mov	 rcx, rbx
  00129	48 8b 44 24 48	 mov	 rax, QWORD PTR cf$1[rsp]
  0012e	ff d0		 call	 rax
$LN11@io_readlin:
; Line 604
  00130	33 c0		 xor	 eax, eax
$LN18@io_readlin:
  00132	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00137	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
; Line 606
  0013c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00140	41 5e		 pop	 r14
  00142	5e		 pop	 rsi
  00143	5b		 pop	 rbx
  00144	c3		 ret	 0
io_readline ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_output
_TEXT	SEGMENT
L$ = 48
io_output PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 319
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 320
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_type
  00013	85 c0		 test	 eax, eax
  00015	7e 4e		 jle	 SHORT $LN5@io_output
  00017	45 33 c0	 xor	 r8d, r8d
  0001a	48 8b cb	 mov	 rcx, rbx
  0001d	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00021	e8 00 00 00 00	 call	 lua_tolstring
  00026	48 8b cb	 mov	 rcx, rbx
  00029	48 85 c0	 test	 rax, rax
  0002c	74 11		 je	 SHORT $LN4@io_output
  0002e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NOFIACDB@w?$AA@
  00035	48 8b d0	 mov	 rdx, rax
  00038	e8 00 00 00 00	 call	 opencheck
  0003d	eb 12		 jmp	 SHORT $LN3@io_output
$LN4@io_output:
  0003f	e8 00 00 00 00	 call	 tofile
  00044	ba 01 00 00 00	 mov	 edx, 1
  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 lua_pushvalue
$LN3@io_output:
  00051	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MIKJDGID@_IO_output?$AA@
  00058	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 lua_setfield
$LN5@io_output:
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MIKJDGID@_IO_output?$AA@
  0006c	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00071	48 8b cb	 mov	 rcx, rbx
  00074	e8 00 00 00 00	 call	 lua_getfield
  00079	b8 01 00 00 00	 mov	 eax, 1
; Line 321
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	5b		 pop	 rbx
  00083	c3		 ret	 0
io_output ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_input
_TEXT	SEGMENT
L$ = 48
io_input PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 314
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 315
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_type
  00013	85 c0		 test	 eax, eax
  00015	7e 4e		 jle	 SHORT $LN5@io_input
  00017	45 33 c0	 xor	 r8d, r8d
  0001a	48 8b cb	 mov	 rcx, rbx
  0001d	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00021	e8 00 00 00 00	 call	 lua_tolstring
  00026	48 8b cb	 mov	 rcx, rbx
  00029	48 85 c0	 test	 rax, rax
  0002c	74 11		 je	 SHORT $LN4@io_input
  0002e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  00035	48 8b d0	 mov	 rdx, rax
  00038	e8 00 00 00 00	 call	 opencheck
  0003d	eb 12		 jmp	 SHORT $LN3@io_input
$LN4@io_input:
  0003f	e8 00 00 00 00	 call	 tofile
  00044	ba 01 00 00 00	 mov	 edx, 1
  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 lua_pushvalue
$LN3@io_input:
  00051	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09HINEJHGE@_IO_input?$AA@
  00058	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 lua_setfield
$LN5@io_input:
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09HINEJHGE@_IO_input?$AA@
  0006c	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00071	48 8b cb	 mov	 rcx, rbx
  00074	e8 00 00 00 00	 call	 lua_getfield
  00079	b8 01 00 00 00	 mov	 eax, 1
; Line 316
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	5b		 pop	 rbx
  00083	c3		 ret	 0
io_input ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT g_iofile
_TEXT	SEGMENT
L$ = 48
f$ = 56
mode$ = 64
g_iofile PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 297
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx
; Line 298
  00012	ba 01 00 00 00	 mov	 edx, 1
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b d9	 mov	 rbx, rcx
  0001d	e8 00 00 00 00	 call	 lua_type
  00022	85 c0		 test	 eax, eax
  00024	7e 46		 jle	 SHORT $LN3@g_iofile
; Line 299
  00026	45 33 c0	 xor	 r8d, r8d
  00029	48 8b cb	 mov	 rcx, rbx
  0002c	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00030	e8 00 00 00 00	 call	 lua_tolstring
; Line 301
  00035	48 8b cb	 mov	 rcx, rbx
  00038	48 85 c0	 test	 rax, rax
  0003b	74 0d		 je	 SHORT $LN2@g_iofile
  0003d	4c 8b c6	 mov	 r8, rsi
  00040	48 8b d0	 mov	 rdx, rax
  00043	e8 00 00 00 00	 call	 opencheck
; Line 302
  00048	eb 12		 jmp	 SHORT $LN1@g_iofile
$LN2@g_iofile:
; Line 303
  0004a	e8 00 00 00 00	 call	 tofile
; Line 304
  0004f	ba 01 00 00 00	 mov	 edx, 1
  00054	48 8b cb	 mov	 rcx, rbx
  00057	e8 00 00 00 00	 call	 lua_pushvalue
$LN1@g_iofile:
; Line 306
  0005c	4c 8b c7	 mov	 r8, rdi
  0005f	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00064	48 8b cb	 mov	 rcx, rbx
  00067	e8 00 00 00 00	 call	 lua_setfield
$LN3@g_iofile:
; Line 309
  0006c	4c 8b c7	 mov	 r8, rdi
  0006f	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00074	48 8b cb	 mov	 rcx, rbx
  00077	e8 00 00 00 00	 call	 lua_getfield
; Line 311
  0007c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00081	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
g_iofile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getiofile
_TEXT	SEGMENT
L$ = 48
findex$ = 56
getiofile PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 287
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f2	 mov	 rsi, rdx
; Line 289
  00012	4c 8b c2	 mov	 r8, rdx
  00015	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  0001a	48 8b f9	 mov	 rdi, rcx
  0001d	e8 00 00 00 00	 call	 lua_getfield
; Line 290
  00022	83 ca ff	 or	 edx, -1
  00025	48 8b cf	 mov	 rcx, rdi
  00028	e8 00 00 00 00	 call	 lua_touserdata
  0002d	48 8b d8	 mov	 rbx, rax
; Line 291
  00030	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00035	75 26		 jne	 SHORT $LN4@getiofile
; Line 292
  00037	4c 8d 46 04	 lea	 r8, QWORD PTR [rsi+4]
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JMNLNGCA@standard?5?$CFs?5file?5is?5closed?$AA@
  00042	48 8b cf	 mov	 rcx, rdi
  00045	e8 00 00 00 00	 call	 luaL_error
; Line 293
  0004a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
; Line 294
  0004d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00052	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
$LN4@getiofile:
; Line 293
  0005d	48 8b 00	 mov	 rax, QWORD PTR [rax]
; Line 294
  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
getiofile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_tmpfile
_TEXT	SEGMENT
L$ = 48
io_tmpfile PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 280
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 281
  0000a	ba 10 00 00 00	 mov	 edx, 16
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 lua_newuserdata
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0001e	48 8b cf	 mov	 rcx, rdi
  00021	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00029	48 8b d8	 mov	 rbx, rax
  0002c	e8 00 00 00 00	 call	 luaL_setmetatable
  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:io_fclose
  00038	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0
  0003f	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
; Line 282
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tmpfile
  00049	48 89 03	 mov	 QWORD PTR [rbx], rax
; Line 283
  0004c	48 85 c0	 test	 rax, rax
  0004f	75 17		 jne	 SHORT $LN3@io_tmpfile
  00051	45 33 c0	 xor	 r8d, r8d
  00054	33 d2		 xor	 edx, edx
  00056	48 8b cf	 mov	 rcx, rdi
; Line 284
  00059	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00062	5f		 pop	 rdi
; Line 283
  00063	e9 00 00 00 00	 jmp	 luaL_fileresult
$LN3@io_tmpfile:
  00068	b8 01 00 00 00	 mov	 eax, 1
; Line 284
  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00072	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
io_tmpfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_popen
_TEXT	SEGMENT
L$ = 48
io_popen PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 270
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 271
  00014	45 33 c0	 xor	 r8d, r8d
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  0001e	e8 00 00 00 00	 call	 luaL_checklstring
; Line 272
  00023	45 33 c9	 xor	 r9d, r9d
  00026	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  0002d	41 8d 51 02	 lea	 edx, QWORD PTR [r9+2]
  00031	48 8b ce	 mov	 rcx, rsi
  00034	48 8b e8	 mov	 rbp, rax
  00037	e8 00 00 00 00	 call	 luaL_optlstring
; Line 273
  0003c	ba 10 00 00 00	 mov	 edx, 16
  00041	48 8b ce	 mov	 rcx, rsi
  00044	48 8b d8	 mov	 rbx, rax
  00047	e8 00 00 00 00	 call	 lua_newuserdata
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00053	48 8b ce	 mov	 rcx, rsi
  00056	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  0005e	48 8b f8	 mov	 rdi, rax
  00061	e8 00 00 00 00	 call	 luaL_setmetatable
; Line 274
  00066	48 8b d3	 mov	 rdx, rbx
  00069	48 8b cd	 mov	 rcx, rbp
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__popen
; Line 275
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:io_pclose
  00079	48 89 07	 mov	 QWORD PTR [rdi], rax
  0007c	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
; Line 276
  00080	48 85 c0	 test	 rax, rax
  00083	75 0f		 jne	 SHORT $LN3@io_popen
  00085	4c 8b c5	 mov	 r8, rbp
  00088	33 d2		 xor	 edx, edx
  0008a	48 8b ce	 mov	 rcx, rsi
  0008d	e8 00 00 00 00	 call	 luaL_fileresult
  00092	eb 05		 jmp	 SHORT $LN4@io_popen
$LN3@io_popen:
  00094	b8 01 00 00 00	 mov	 eax, 1
$LN4@io_popen:
; Line 277
  00099	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009e	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000a3	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000a8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
io_popen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_pclose
_TEXT	SEGMENT
L$ = 48
io_pclose PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 264
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 265
  00006	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0000d	ba 01 00 00 00	 mov	 edx, 1
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 luaL_checkudata
; Line 266
  0001a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__pclose
  00023	48 8b cb	 mov	 rcx, rbx
  00026	8b d0		 mov	 edx, eax
; Line 267
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
; Line 266
  0002d	e9 00 00 00 00	 jmp	 luaL_execresult
io_pclose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_open
_TEXT	SEGMENT
L$ = 48
io_open	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 250
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00014	41 57		 push	 r15
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 251
  0001a	45 33 c0	 xor	 r8d, r8d
  0001d	48 8b f9	 mov	 rdi, rcx
  00020	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00024	e8 00 00 00 00	 call	 luaL_checklstring
; Line 252
  00029	45 33 c9	 xor	 r9d, r9d
  0002c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  00033	41 8d 51 02	 lea	 edx, QWORD PTR [r9+2]
  00037	48 8b cf	 mov	 rcx, rdi
  0003a	48 8b f0	 mov	 rsi, rax
  0003d	e8 00 00 00 00	 call	 luaL_optlstring
; Line 253
  00042	ba 10 00 00 00	 mov	 edx, 16
  00047	48 8b cf	 mov	 rcx, rdi
  0004a	4c 8b f0	 mov	 r14, rax
  0004d	e8 00 00 00 00	 call	 lua_newuserdata
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00059	33 db		 xor	 ebx, ebx
  0005b	48 8b cf	 mov	 rcx, rdi
  0005e	4c 8b f8	 mov	 r15, rax
  00061	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00065	e8 00 00 00 00	 call	 luaL_setmetatable
  0006a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:io_fclose
  00071	49 89 47 08	 mov	 QWORD PTR [r15+8], rax
  00075	49 89 1f	 mov	 QWORD PTR [r15], rbx
; Line 255
  00078	41 0f b6 0e	 movzx	 ecx, BYTE PTR [r14]
  0007c	84 c9		 test	 cl, cl
  0007e	74 43		 je	 SHORT $LN3@io_open
  00080	0f be d1	 movsx	 edx, cl
  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03DCNFGMMH@rwa?$AA@
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00090	49 8d 5e 01	 lea	 rbx, QWORD PTR [r14+1]
  00094	48 85 c0	 test	 rax, rax
  00097	74 2a		 je	 SHORT $LN3@io_open
  00099	80 3b 2b	 cmp	 BYTE PTR [rbx], 43	; 0000002bH
  0009c	75 03		 jne	 SHORT $LN4@io_open
  0009e	48 ff c3	 inc	 rbx
$LN4@io_open:
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01OJONOECF@b?$AA@
  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strspn
  000b1	48 83 c9 ff	 or	 rcx, -1
$LL12@io_open:
  000b5	48 ff c1	 inc	 rcx
  000b8	80 3c 0b 00	 cmp	 BYTE PTR [rbx+rcx], 0
  000bc	75 f7		 jne	 SHORT $LL12@io_open
  000be	48 3b c1	 cmp	 rax, rcx
  000c1	74 14		 je	 SHORT $LN5@io_open
$LN3@io_open:
  000c3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@MICJCNHE@invalid?5mode?$AA@
  000ca	ba 02 00 00 00	 mov	 edx, 2
  000cf	48 8b cf	 mov	 rcx, rdi
  000d2	e8 00 00 00 00	 call	 luaL_argerror
$LN5@io_open:
; Line 256
  000d7	49 8b d6	 mov	 rdx, r14
  000da	48 8b ce	 mov	 rcx, rsi
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  000e3	49 89 07	 mov	 QWORD PTR [r15], rax
; Line 257
  000e6	48 85 c0	 test	 rax, rax
  000e9	75 0f		 jne	 SHORT $LN6@io_open
  000eb	4c 8b c6	 mov	 r8, rsi
  000ee	33 d2		 xor	 edx, edx
  000f0	48 8b cf	 mov	 rcx, rdi
  000f3	e8 00 00 00 00	 call	 luaL_fileresult
  000f8	eb 05		 jmp	 SHORT $LN7@io_open
$LN6@io_open:
  000fa	b8 01 00 00 00	 mov	 eax, 1
$LN7@io_open:
; Line 258
  000ff	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00104	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00109	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  0010e	4c 8b 74 24 48	 mov	 r14, QWORD PTR [rsp+72]
  00113	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00117	41 5f		 pop	 r15
  00119	c3		 ret	 0
io_open	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT opencheck
_TEXT	SEGMENT
L$ = 48
fname$ = 56
mode$ = 64
opencheck PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 242
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b ea	 mov	 rbp, rdx
; Line 243
  00017	ba 10 00 00 00	 mov	 edx, 16
  0001c	49 8b f8	 mov	 rdi, r8
  0001f	48 8b f1	 mov	 rsi, rcx
  00022	e8 00 00 00 00	 call	 lua_newuserdata
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0002e	48 8b ce	 mov	 rcx, rsi
  00031	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00039	48 8b d8	 mov	 rbx, rax
  0003c	e8 00 00 00 00	 call	 luaL_setmetatable
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:io_fclose
; Line 244
  00048	48 8b d7	 mov	 rdx, rdi
  0004b	48 8b cd	 mov	 rcx, rbp
  0004e	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0
  00055	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  0005f	48 89 03	 mov	 QWORD PTR [rbx], rax
; Line 245
  00062	48 85 c0	 test	 rax, rax
  00065	75 23		 jne	 SHORT $LN1@opencheck
; Line 246
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0006d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strerror
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JABDLMOO@cannot?5open?5file?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@
  0007c	4c 8b c5	 mov	 r8, rbp
  0007f	4c 8b c8	 mov	 r9, rax
  00082	48 8b ce	 mov	 rcx, rsi
  00085	e8 00 00 00 00	 call	 luaL_error
$LN1@opencheck:
; Line 247
  0008a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008f	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00094	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00099	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
opencheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT newfile
_TEXT	SEGMENT
L$ = 48
newfile	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 234
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 235
  0000a	ba 10 00 00 00	 mov	 edx, 16
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	e8 00 00 00 00	 call	 lua_newuserdata
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00029	48 8b f8	 mov	 rdi, rax
  0002c	e8 00 00 00 00	 call	 luaL_setmetatable
; Line 239
  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:io_fclose
  0003d	48 c7 07 00 00
	00 00		 mov	 QWORD PTR [rdi], 0
  00044	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax
  00048	48 8b c7	 mov	 rax, rdi
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
newfile	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_fclose
_TEXT	SEGMENT
L$ = 48
io_fclose PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 227
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 228
  00006	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0000d	ba 01 00 00 00	 mov	 edx, 1
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 luaL_checkudata
; Line 229
  0001a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
; Line 230
  00023	33 d2		 xor	 edx, edx
  00025	48 8b cb	 mov	 rcx, rbx
  00028	85 c0		 test	 eax, eax
  0002a	0f 94 c2	 sete	 dl
  0002d	45 33 c0	 xor	 r8d, r8d
; Line 231
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5b		 pop	 rbx
; Line 230
  00035	e9 00 00 00 00	 jmp	 luaL_fileresult
io_fclose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT f_gc
_TEXT	SEGMENT
L$ = 48
cf$1 = 56
f_gc	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 216
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 217
  00006	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0000d	ba 01 00 00 00	 mov	 edx, 1
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 luaL_checkudata
; Line 218
  0001a	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0001f	74 35		 je	 SHORT $LN6@f_gc
  00021	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00025	74 2f		 je	 SHORT $LN6@f_gc
; Line 219
  00027	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0002e	ba 01 00 00 00	 mov	 edx, 1
  00033	48 8b cb	 mov	 rcx, rbx
  00036	e8 00 00 00 00	 call	 luaL_checkudata
  0003b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0003f	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00047	48 89 4c 24 38	 mov	 QWORD PTR cf$1[rsp], rcx
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	48 8b 44 24 38	 mov	 rax, QWORD PTR cf$1[rsp]
  00054	ff d0		 call	 rax
$LN6@f_gc:
; Line 220
  00056	33 c0		 xor	 eax, eax
; Line 221
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5b		 pop	 rbx
  0005d	c3		 ret	 0
f_gc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_close
_TEXT	SEGMENT
L$ = 48
cf$1 = 56
io_close PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 208
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 209
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_type
  00013	83 f8 ff	 cmp	 eax, -1
  00016	75 14		 jne	 SHORT $LN1@io_close
; Line 210
  00018	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MIKJDGID@_IO_output?$AA@
  0001f	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00024	48 8b cb	 mov	 rcx, rbx
  00027	e8 00 00 00 00	 call	 lua_getfield
$LN1@io_close:
; Line 211
  0002c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00033	ba 01 00 00 00	 mov	 edx, 1
  00038	48 8b cb	 mov	 rcx, rbx
  0003b	e8 00 00 00 00	 call	 luaL_checkudata
  00040	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00045	75 0f		 jne	 SHORT $LN4@io_close
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@
  0004e	48 8b cb	 mov	 rcx, rbx
  00051	e8 00 00 00 00	 call	 luaL_error
$LN4@io_close:
; Line 212
  00056	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0005d	ba 01 00 00 00	 mov	 edx, 1
  00062	48 8b cb	 mov	 rcx, rbx
  00065	e8 00 00 00 00	 call	 luaL_checkudata
  0006a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0006e	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00076	48 89 4c 24 38	 mov	 QWORD PTR cf$1[rsp], rcx
  0007b	48 8b cb	 mov	 rcx, rbx
  0007e	48 8b 44 24 38	 mov	 rax, QWORD PTR cf$1[rsp]
; Line 213
  00083	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00087	5b		 pop	 rbx
; Line 212
  00088	48 ff e0	 rex_jmp rax
io_close ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT aux_close
_TEXT	SEGMENT
L$ = 48
cf$ = 56
aux_close PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 200
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 201
  00006	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0000d	ba 01 00 00 00	 mov	 edx, 1
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 luaL_checkudata
; Line 204
  0001a	48 8b cb	 mov	 rcx, rbx
  0001d	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00021	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00029	48 89 54 24 38	 mov	 QWORD PTR cf$[rsp], rdx
  0002e	48 8b 44 24 38	 mov	 rax, QWORD PTR cf$[rsp]
; Line 205
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
; Line 204
  00038	48 ff e0	 rex_jmp rax
aux_close ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT newprefile
_TEXT	SEGMENT
L$ = 48
newprefile PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 187
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 188
  0000a	ba 10 00 00 00	 mov	 edx, 16
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 lua_newuserdata
; Line 190
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0001e	48 8b cf	 mov	 rcx, rdi
  00021	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00029	48 8b d8	 mov	 rbx, rax
  0002c	e8 00 00 00 00	 call	 luaL_setmetatable
; Line 191
  00031	48 8b c3	 mov	 rax, rbx
; Line 192
  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
newprefile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT tofile
_TEXT	SEGMENT
L$ = 48
tofile	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 173
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 174
  0000a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00011	ba 01 00 00 00	 mov	 edx, 1
  00016	48 8b f9	 mov	 rdi, rcx
  00019	e8 00 00 00 00	 call	 luaL_checkudata
  0001e	48 8b d8	 mov	 rbx, rax
; Line 175
  00021	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00026	75 1d		 jne	 SHORT $LN4@tofile
; Line 176
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LPOOHAOM@attempt?5to?5use?5a?5closed?5file?$AA@
  0002f	48 8b cf	 mov	 rcx, rdi
  00032	e8 00 00 00 00	 call	 luaL_error
; Line 178
  00037	48 8b 03	 mov	 rax, QWORD PTR [rbx]
; Line 179
  0003a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN4@tofile:
; Line 178
  00045	48 8b 00	 mov	 rax, QWORD PTR [rax]
; Line 179
  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
tofile	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT f_tostring
_TEXT	SEGMENT
L$ = 48
f_tostring PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 163
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 164
  00006	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0000d	ba 01 00 00 00	 mov	 edx, 1
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 luaL_checkudata
; Line 166
  0001a	48 8b cb	 mov	 rcx, rbx
  0001d	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00022	75 17		 jne	 SHORT $LN2@f_tostring
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@PLFAPHPG@file?5?$CIclosed?$CJ?$AA@
  0002b	e8 00 00 00 00	 call	 lua_pushstring
; Line 169
  00030	b8 01 00 00 00	 mov	 eax, 1
; Line 170
  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5b		 pop	 rbx
  0003a	c3		 ret	 0
$LN2@f_tostring:
; Line 168
  0003b	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09BPMAMLLD@file?5?$CI?$CFp?$CJ?$AA@
  00045	e8 00 00 00 00	 call	 lua_pushfstring
; Line 169
  0004a	b8 01 00 00 00	 mov	 eax, 1
; Line 170
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5b		 pop	 rbx
  00054	c3		 ret	 0
f_tostring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT io_type
_TEXT	SEGMENT
L$ = 48
io_type	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 149
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 151
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checkany
; Line 152
  00013	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  0001a	ba 01 00 00 00	 mov	 edx, 1
  0001f	48 8b cb	 mov	 rcx, rbx
  00022	e8 00 00 00 00	 call	 luaL_testudata
; Line 154
  00027	48 8b cb	 mov	 rcx, rbx
  0002a	48 85 c0	 test	 rax, rax
  0002d	75 10		 jne	 SHORT $LN4@io_type
  0002f	e8 00 00 00 00	 call	 lua_pushnil
; Line 159
  00034	b8 01 00 00 00	 mov	 eax, 1
; Line 160
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5b		 pop	 rbx
  0003e	c3		 ret	 0
$LN4@io_type:
; Line 155
  0003f	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
; Line 156
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IBKPHHKH@closed?5file?$AA@
  0004b	74 07		 je	 SHORT $LN8@io_type
; Line 158
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DAMGJPCA@file?$AA@
$LN8@io_type:
  00054	e8 00 00 00 00	 call	 lua_pushstring
; Line 159
  00059	b8 01 00 00 00	 mov	 eax, 1
; Line 160
  0005e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
io_type	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaopen_io
_TEXT	SEGMENT
L$ = 48
luaopen_io PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\liolib.c
; Line 756
$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 757
  00015	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@405bc00000000000
  0001d	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00023	48 8b f1	 mov	 rsi, rcx
  00026	e8 00 00 00 00	 call	 luaL_checkversion_
  0002b	33 d2		 xor	 edx, edx
  0002d	48 8b ce	 mov	 rcx, rsi
  00030	44 8d 42 0b	 lea	 r8d, QWORD PTR [rdx+11]
  00034	e8 00 00 00 00	 call	 lua_createtable
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:iolib
  00040	45 33 c0	 xor	 r8d, r8d
  00043	48 8b ce	 mov	 rcx, rsi
  00046	e8 00 00 00 00	 call	 luaL_setfuncs
; Line 758
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00052	48 8b ce	 mov	 rcx, rsi
  00055	e8 00 00 00 00	 call	 luaL_newmetatable
  0005a	83 ca ff	 or	 edx, -1
  0005d	48 8b ce	 mov	 rcx, rsi
  00060	e8 00 00 00 00	 call	 lua_pushvalue
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07NHABFFHN@__index?$AA@
  0006c	ba fe ff ff ff	 mov	 edx, -2
  00071	48 8b ce	 mov	 rcx, rsi
  00074	e8 00 00 00 00	 call	 lua_setfield
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:flib
  00080	45 33 c0	 xor	 r8d, r8d
  00083	48 8b ce	 mov	 rcx, rsi
  00086	e8 00 00 00 00	 call	 luaL_setfuncs
  0008b	ba fe ff ff ff	 mov	 edx, -2
  00090	48 8b ce	 mov	 rcx, rsi
  00093	e8 00 00 00 00	 call	 lua_settop
; Line 760
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0009e	ba 10 00 00 00	 mov	 edx, 16
  000a3	48 8b ce	 mov	 rcx, rsi
  000a6	48 8b f8	 mov	 rdi, rax
  000a9	e8 00 00 00 00	 call	 lua_newuserdata
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  000b5	48 8b ce	 mov	 rcx, rsi
  000b8	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  000c0	48 8b d8	 mov	 rbx, rax
  000c3	e8 00 00 00 00	 call	 luaL_setmetatable
  000c8	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:io_noclose
  000cf	83 ca ff	 or	 edx, -1
  000d2	48 8b ce	 mov	 rcx, rsi
  000d5	4c 89 73 08	 mov	 QWORD PTR [rbx+8], r14
  000d9	48 89 3b	 mov	 QWORD PTR [rbx], rdi
  000dc	e8 00 00 00 00	 call	 lua_pushvalue
  000e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09HINEJHGE@_IO_input?$AA@
  000e8	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  000ed	48 8b ce	 mov	 rcx, rsi
  000f0	e8 00 00 00 00	 call	 lua_setfield
  000f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MHOFLBOO@stdin?$AA@
  000fc	ba fe ff ff ff	 mov	 edx, -2
  00101	48 8b ce	 mov	 rcx, rsi
  00104	e8 00 00 00 00	 call	 lua_setfield
; Line 761
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0010f	ba 10 00 00 00	 mov	 edx, 16
  00114	48 8b ce	 mov	 rcx, rsi
  00117	48 8d 78 30	 lea	 rdi, QWORD PTR [rax+48]
  0011b	e8 00 00 00 00	 call	 lua_newuserdata
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00127	48 8b ce	 mov	 rcx, rsi
  0012a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00132	48 8b d8	 mov	 rbx, rax
  00135	e8 00 00 00 00	 call	 luaL_setmetatable
  0013a	83 ca ff	 or	 edx, -1
  0013d	48 8b ce	 mov	 rcx, rsi
  00140	48 89 3b	 mov	 QWORD PTR [rbx], rdi
  00143	4c 89 73 08	 mov	 QWORD PTR [rbx+8], r14
  00147	e8 00 00 00 00	 call	 lua_pushvalue
  0014c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MIKJDGID@_IO_output?$AA@
  00153	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00158	48 8b ce	 mov	 rcx, rsi
  0015b	e8 00 00 00 00	 call	 lua_setfield
  00160	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  00167	ba fe ff ff ff	 mov	 edx, -2
  0016c	48 8b ce	 mov	 rcx, rsi
  0016f	e8 00 00 00 00	 call	 lua_setfield
; Line 762
  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0017a	ba 10 00 00 00	 mov	 edx, 16
  0017f	48 8b ce	 mov	 rcx, rsi
  00182	48 8d 78 60	 lea	 rdi, QWORD PTR [rax+96]
  00186	e8 00 00 00 00	 call	 lua_newuserdata
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KCHOJJD@FILE?$CK?$AA@
  00192	48 8b ce	 mov	 rcx, rsi
  00195	48 8b d8	 mov	 rbx, rax
  00198	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  001a0	e8 00 00 00 00	 call	 luaL_setmetatable
  001a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  001ac	ba fe ff ff ff	 mov	 edx, -2
  001b1	48 8b ce	 mov	 rcx, rsi
  001b4	48 89 3b	 mov	 QWORD PTR [rbx], rdi
  001b7	4c 89 73 08	 mov	 QWORD PTR [rbx+8], r14
  001bb	e8 00 00 00 00	 call	 lua_setfield
; Line 764
  001c0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001c5	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001ca	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  001cf	b8 01 00 00 00	 mov	 eax, 1
  001d4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001d8	41 5e		 pop	 r14
  001da	c3		 ret	 0
luaopen_io ENDP
_TEXT	ENDS
END
