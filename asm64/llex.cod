; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_03BOPJPIAM@and?$AA@			; `string'
PUBLIC	??_C@_05ELPHFHOI@break?$AA@			; `string'
PUBLIC	??_C@_02KNAFDCHJ@do?$AA@			; `string'
PUBLIC	??_C@_04FHMCPBIP@else?$AA@			; `string'
PUBLIC	??_C@_06CAACNEC@elseif?$AA@			; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_03JOHEBPFF@for?$AA@			; `string'
PUBLIC	??_C@_08HFFPPCHF@function?$AA@			; `string'
PUBLIC	??_C@_04MABHPDAO@goto?$AA@			; `string'
PUBLIC	??_C@_02HEBPBKGD@if?$AA@			; `string'
PUBLIC	??_C@_02LMMGJAGL@in?$AA@			; `string'
PUBLIC	??_C@_05IDKHKMLA@local?$AA@			; `string'
PUBLIC	??_C@_03ILAMHENH@nil?$AA@			; `string'
PUBLIC	??_C@_03NJKJADM@not?$AA@			; `string'
PUBLIC	??_C@_02FODMLBIE@or?$AA@			; `string'
PUBLIC	??_C@_06LGDBIFHB@repeat?$AA@			; `string'
PUBLIC	??_C@_06LNOFJDNM@return?$AA@			; `string'
PUBLIC	??_C@_04HOHPNOOD@then?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_05FJMDOIMN@until?$AA@			; `string'
PUBLIC	??_C@_05OODBEKIG@while?$AA@			; `string'
PUBLIC	??_C@_02CBLDBPFN@?1?1?$AA@			; `string'
PUBLIC	??_C@_02DJGKEECL@?4?4?$AA@			; `string'
PUBLIC	??_C@_03KHICJKCI@?4?4?4?$AA@			; `string'
PUBLIC	??_C@_02EGOFBIJA@?$DN?$DN?$AA@			; `string'
PUBLIC	??_C@_02EEKDKGMJ@?$DO?$DN?$AA@			; `string'
PUBLIC	??_C@_02EHCHHCKH@?$DM?$DN?$AA@			; `string'
PUBLIC	??_C@_02DEDJCLAJ@?$HO?$DN?$AA@			; `string'
PUBLIC	??_C@_02FODMEDOG@?$DM?$DM?$AA@			; `string'
PUBLIC	??_C@_02GPIOPFAK@?$DO?$DO?$AA@			; `string'
PUBLIC	??_C@_02MOLJINC@?3?3?$AA@			; `string'
PUBLIC	??_C@_05CINCKAN@?$DMeof?$DO?$AA@		; `string'
PUBLIC	??_C@_08OHBCANEJ@?$DMnumber?$DO?$AA@		; `string'
PUBLIC	??_C@_09CKFPBBLH@?$DMinteger?$DO?$AA@		; `string'
PUBLIC	??_C@_06FNGJOCBI@?$DMname?$DO?$AA@		; `string'
PUBLIC	??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@		; `string'
;	COMDAT ??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
CONST	SEGMENT
??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@ DB '<string>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNGJOCBI@?$DMname?$DO?$AA@
CONST	SEGMENT
??_C@_06FNGJOCBI@?$DMname?$DO?$AA@ DB '<name>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CKFPBBLH@?$DMinteger?$DO?$AA@
CONST	SEGMENT
??_C@_09CKFPBBLH@?$DMinteger?$DO?$AA@ DB '<integer>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OHBCANEJ@?$DMnumber?$DO?$AA@
CONST	SEGMENT
??_C@_08OHBCANEJ@?$DMnumber?$DO?$AA@ DB '<number>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CINCKAN@?$DMeof?$DO?$AA@
CONST	SEGMENT
??_C@_05CINCKAN@?$DMeof?$DO?$AA@ DB '<eof>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MOLJINC@?3?3?$AA@
CONST	SEGMENT
??_C@_02MOLJINC@?3?3?$AA@ DB '::', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GPIOPFAK@?$DO?$DO?$AA@
CONST	SEGMENT
??_C@_02GPIOPFAK@?$DO?$DO?$AA@ DB '>>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FODMEDOG@?$DM?$DM?$AA@
CONST	SEGMENT
??_C@_02FODMEDOG@?$DM?$DM?$AA@ DB '<<', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DEDJCLAJ@?$HO?$DN?$AA@
CONST	SEGMENT
??_C@_02DEDJCLAJ@?$HO?$DN?$AA@ DB '~=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EHCHHCKH@?$DM?$DN?$AA@
CONST	SEGMENT
??_C@_02EHCHHCKH@?$DM?$DN?$AA@ DB '<=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EEKDKGMJ@?$DO?$DN?$AA@
CONST	SEGMENT
??_C@_02EEKDKGMJ@?$DO?$DN?$AA@ DB '>=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGOFBIJA@?$DN?$DN?$AA@
CONST	SEGMENT
??_C@_02EGOFBIJA@?$DN?$DN?$AA@ DB '==', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHICJKCI@?4?4?4?$AA@
CONST	SEGMENT
??_C@_03KHICJKCI@?4?4?4?$AA@ DB '...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DJGKEECL@?4?4?$AA@
CONST	SEGMENT
??_C@_02DJGKEECL@?4?4?$AA@ DB '..', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CBLDBPFN@?1?1?$AA@
CONST	SEGMENT
??_C@_02CBLDBPFN@?1?1?$AA@ DB '//', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OODBEKIG@while?$AA@
CONST	SEGMENT
??_C@_05OODBEKIG@while?$AA@ DB 'while', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FJMDOIMN@until?$AA@
CONST	SEGMENT
??_C@_05FJMDOIMN@until?$AA@ DB 'until', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HOHPNOOD@then?$AA@
CONST	SEGMENT
??_C@_04HOHPNOOD@then?$AA@ DB 'then', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNOFJDNM@return?$AA@
CONST	SEGMENT
??_C@_06LNOFJDNM@return?$AA@ DB 'return', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGDBIFHB@repeat?$AA@
CONST	SEGMENT
??_C@_06LGDBIFHB@repeat?$AA@ DB 'repeat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FODMLBIE@or?$AA@
CONST	SEGMENT
??_C@_02FODMLBIE@or?$AA@ DB 'or', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJKJADM@not?$AA@
CONST	SEGMENT
??_C@_03NJKJADM@not?$AA@ DB 'not', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ILAMHENH@nil?$AA@
CONST	SEGMENT
??_C@_03ILAMHENH@nil?$AA@ DB 'nil', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDKHKMLA@local?$AA@
CONST	SEGMENT
??_C@_05IDKHKMLA@local?$AA@ DB 'local', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGJAGL@in?$AA@
CONST	SEGMENT
??_C@_02LMMGJAGL@in?$AA@ DB 'in', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEBPBKGD@if?$AA@
CONST	SEGMENT
??_C@_02HEBPBKGD@if?$AA@ DB 'if', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MABHPDAO@goto?$AA@
CONST	SEGMENT
??_C@_04MABHPDAO@goto?$AA@ DB 'goto', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFFPPCHF@function?$AA@
CONST	SEGMENT
??_C@_08HFFPPCHF@function?$AA@ DB 'function', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JOHEBPFF@for?$AA@
CONST	SEGMENT
??_C@_03JOHEBPFF@for?$AA@ DB 'for', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CAACNEC@elseif?$AA@
CONST	SEGMENT
??_C@_06CAACNEC@elseif?$AA@ DB 'elseif', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FHMCPBIP@else?$AA@
CONST	SEGMENT
??_C@_04FHMCPBIP@else?$AA@ DB 'else', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNAFDCHJ@do?$AA@
CONST	SEGMENT
??_C@_02KNAFDCHJ@do?$AA@ DB 'do', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ELPHFHOI@break?$AA@
CONST	SEGMENT
??_C@_05ELPHFHOI@break?$AA@ DB 'break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BOPJPIAM@and?$AA@
CONST	SEGMENT
??_C@_03BOPJPIAM@and?$AA@ DB 'and', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
luaX_tokens DQ	FLAT:??_C@_03BOPJPIAM@and?$AA@
	DQ	FLAT:??_C@_05ELPHFHOI@break?$AA@
	DQ	FLAT:??_C@_02KNAFDCHJ@do?$AA@
	DQ	FLAT:??_C@_04FHMCPBIP@else?$AA@
	DQ	FLAT:??_C@_06CAACNEC@elseif?$AA@
	DQ	FLAT:??_C@_03JBJLGPFL@end?$AA@
	DQ	FLAT:??_C@_05LAPONLG@false?$AA@
	DQ	FLAT:??_C@_03JOHEBPFF@for?$AA@
	DQ	FLAT:??_C@_08HFFPPCHF@function?$AA@
	DQ	FLAT:??_C@_04MABHPDAO@goto?$AA@
	DQ	FLAT:??_C@_02HEBPBKGD@if?$AA@
	DQ	FLAT:??_C@_02LMMGJAGL@in?$AA@
	DQ	FLAT:??_C@_05IDKHKMLA@local?$AA@
	DQ	FLAT:??_C@_03ILAMHENH@nil?$AA@
	DQ	FLAT:??_C@_03NJKJADM@not?$AA@
	DQ	FLAT:??_C@_02FODMLBIE@or?$AA@
	DQ	FLAT:??_C@_06LGDBIFHB@repeat?$AA@
	DQ	FLAT:??_C@_06LNOFJDNM@return?$AA@
	DQ	FLAT:??_C@_04HOHPNOOD@then?$AA@
	DQ	FLAT:??_C@_04LOAJBDKD@true?$AA@
	DQ	FLAT:??_C@_05FJMDOIMN@until?$AA@
	DQ	FLAT:??_C@_05OODBEKIG@while?$AA@
	DQ	FLAT:??_C@_02CBLDBPFN@?1?1?$AA@
	DQ	FLAT:??_C@_02DJGKEECL@?4?4?$AA@
	DQ	FLAT:??_C@_03KHICJKCI@?4?4?4?$AA@
	DQ	FLAT:??_C@_02EGOFBIJA@?$DN?$DN?$AA@
	DQ	FLAT:??_C@_02EEKDKGMJ@?$DO?$DN?$AA@
	DQ	FLAT:??_C@_02EHCHHCKH@?$DM?$DN?$AA@
	DQ	FLAT:??_C@_02DEDJCLAJ@?$HO?$DN?$AA@
	DQ	FLAT:??_C@_02FODMEDOG@?$DM?$DM?$AA@
	DQ	FLAT:??_C@_02GPIOPFAK@?$DO?$DO?$AA@
	DQ	FLAT:??_C@_02MOLJINC@?3?3?$AA@
	DQ	FLAT:??_C@_05CINCKAN@?$DMeof?$DO?$AA@
	DQ	FLAT:??_C@_08OHBCANEJ@?$DMnumber?$DO?$AA@
	DQ	FLAT:??_C@_09CKFPBBLH@?$DMinteger?$DO?$AA@
	DQ	FLAT:??_C@_06FNGJOCBI@?$DMname?$DO?$AA@
	DQ	FLAT:??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
CONST	ENDS
PUBLIC	luaX_init
PUBLIC	luaX_setinput
PUBLIC	luaX_newstring
PUBLIC	luaX_next
PUBLIC	luaX_lookahead
PUBLIC	luaX_syntaxerror
PUBLIC	luaX_token2str
PUBLIC	??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_04LJLBKCOP@_ENV?$AA@			; `string'
PUBLIC	??_C@_04ENIEGDOG@?8?$CFc?8?$AA@			; `string'
PUBLIC	??_C@_04FBKCMAJG@?8?$CFs?8?$AA@			; `string'
PUBLIC	??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BJ@LAKGPFF@chunk?5has?5too?5many?5lines?$AA@ ; `string'
PUBLIC	??_C@_0BB@CFMNENCE@malformed?5number?$AA@	; `string'
PUBLIC	??_C@_02GOGFPGCE@Ee?$AA@			; `string'
PUBLIC	??_C@_02EDDNHBKL@Pp?$AA@			; `string'
PUBLIC	??_C@_06ICGJLFIM@string?$AA@			; `string'
PUBLIC	??_C@_07GJGNEJFD@comment?$AA@			; `string'
PUBLIC	??_C@_0CJ@CPAHLMBA@unfinished?5long?5?$CFs?5?$CIstarting?5at?5@ ; `string'
PUBLIC	??_C@_0BL@HIOFDBBP@hexadecimal?5digit?5expected?$AA@ ; `string'
PUBLIC	??_C@_0M@LCIHADNN@missing?5?8?$HL?8?$AA@	; `string'
PUBLIC	??_C@_0BG@INJLHCPD@UTF?98?5value?5too?5large?$AA@ ; `string'
PUBLIC	??_C@_0M@LGAKHPGP@missing?5?8?$HN?8?$AA@	; `string'
PUBLIC	??_C@_0BJ@FGOMBPHF@decimal?5escape?5too?5large?$AA@ ; `string'
PUBLIC	??_C@_0BC@IBAFBKML@unfinished?5string?$AA@	; `string'
PUBLIC	??_C@_0BI@HGMIJEDD@invalid?5escape?5sequence?$AA@ ; `string'
PUBLIC	??_C@_0BO@DBNLNIBP@invalid?5long?5string?5delimiter?$AA@ ; `string'
EXTRN	__imp_localeconv:PROC
EXTRN	luaO_utf8esc:PROC
EXTRN	luaO_str2num:PROC
EXTRN	luaO_hexavalue:PROC
EXTRN	luaO_pushfstring:PROC
EXTRN	luaM_realloc_:PROC
EXTRN	luaZ_fill:PROC
EXTRN	luaG_addinfo:PROC
EXTRN	luaD_throw:PROC
EXTRN	luaC_fix:PROC
EXTRN	luaC_step:PROC
EXTRN	luaS_newlstr:PROC
EXTRN	luaS_new:PROC
EXTRN	luaH_set:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	luai_ctype_:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaX_init DD imagerel $LN11
	DD	imagerel $LN11+127
	DD	imagerel $unwind$luaX_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaX_setinput DD imagerel $LN4
	DD	imagerel $LN4+132
	DD	imagerel $unwind$luaX_setinput
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaX_newstring DD imagerel $LN9
	DD	imagerel $LN9+147
	DD	imagerel $unwind$luaX_newstring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaX_next DD imagerel $LN6
	DD	imagerel $LN6+63
	DD	imagerel $unwind$luaX_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaX_lookahead DD imagerel $LN4
	DD	imagerel $LN4+27
	DD	imagerel $unwind$luaX_lookahead
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaX_syntaxerror DD imagerel $LN4
	DD	imagerel $LN4+14
	DD	imagerel $unwind$luaX_syntaxerror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lexerror DD imagerel lexerror
	DD	imagerel lexerror+92
	DD	imagerel $unwind$lexerror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$save DD	imagerel save
	DD	imagerel save+62
	DD	imagerel $unwind$save
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$save DD imagerel save+62
	DD	imagerel save+91
	DD	imagerel $chain$0$save
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$save DD imagerel save+91
	DD	imagerel save+161
	DD	imagerel $chain$1$save
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$txtToken DD imagerel txtToken
	DD	imagerel txtToken+124
	DD	imagerel $unwind$txtToken
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$inclinenumber DD imagerel inclinenumber
	DD	imagerel inclinenumber+193
	DD	imagerel $unwind$inclinenumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_next1 DD imagerel check_next1
	DD	imagerel check_next1+96
	DD	imagerel $unwind$check_next1
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_next2 DD imagerel check_next2
	DD	imagerel check_next2+115
	DD	imagerel $unwind$check_next2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$trydecpoint DD imagerel trydecpoint
	DD	imagerel trydecpoint+262
	DD	imagerel $unwind$trydecpoint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_numeral DD imagerel read_numeral
	DD	imagerel read_numeral+561
	DD	imagerel $unwind$read_numeral
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$skip_sep DD imagerel skip_sep
	DD	imagerel skip_sep+324
	DD	imagerel $unwind$skip_sep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_long_string DD imagerel read_long_string
	DD	imagerel read_long_string+506
	DD	imagerel $unwind$read_long_string
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$esccheck DD imagerel esccheck
	DD	imagerel esccheck+175
	DD	imagerel $unwind$esccheck
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gethexa DD imagerel gethexa
	DD	imagerel gethexa+113
	DD	imagerel $unwind$gethexa
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$readhexaesc DD imagerel readhexaesc
	DD	imagerel readhexaesc+53
	DD	imagerel $unwind$readhexaesc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$readutf8esc DD imagerel readutf8esc
	DD	imagerel readutf8esc+518
	DD	imagerel $unwind$readutf8esc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf8esc DD imagerel utf8esc
	DD	imagerel utf8esc+52
	DD	imagerel $unwind$utf8esc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utf8esc DD imagerel utf8esc+52
	DD	imagerel utf8esc+93
	DD	imagerel $chain$0$utf8esc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$utf8esc DD imagerel utf8esc+93
	DD	imagerel utf8esc+117
	DD	imagerel $chain$1$utf8esc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$readdecesc DD imagerel readdecesc
	DD	imagerel readdecesc+319
	DD	imagerel $unwind$readdecesc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_string DD imagerel read_string
	DD	imagerel read_string+1172
	DD	imagerel $unwind$read_string
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$llex DD	imagerel llex
	DD	imagerel llex+2068
	DD	imagerel $unwind$llex
pdata	ENDS
;	COMDAT ??_C@_0BO@DBNLNIBP@invalid?5long?5string?5delimiter?$AA@
CONST	SEGMENT
??_C@_0BO@DBNLNIBP@invalid?5long?5string?5delimiter?$AA@ DB 'invalid long'
	DB	' string delimiter', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HGMIJEDD@invalid?5escape?5sequence?$AA@
CONST	SEGMENT
??_C@_0BI@HGMIJEDD@invalid?5escape?5sequence?$AA@ DB 'invalid escape sequ'
	DB	'ence', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IBAFBKML@unfinished?5string?$AA@
CONST	SEGMENT
??_C@_0BC@IBAFBKML@unfinished?5string?$AA@ DB 'unfinished string', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FGOMBPHF@decimal?5escape?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BJ@FGOMBPHF@decimal?5escape?5too?5large?$AA@ DB 'decimal escape to'
	DB	'o large', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LGAKHPGP@missing?5?8?$HN?8?$AA@
CONST	SEGMENT
??_C@_0M@LGAKHPGP@missing?5?8?$HN?8?$AA@ DB 'missing ''}''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@INJLHCPD@UTF?98?5value?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BG@INJLHCPD@UTF?98?5value?5too?5large?$AA@ DB 'UTF-8 value too lar'
	DB	'ge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LCIHADNN@missing?5?8?$HL?8?$AA@
CONST	SEGMENT
??_C@_0M@LCIHADNN@missing?5?8?$HL?8?$AA@ DB 'missing ''{''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HIOFDBBP@hexadecimal?5digit?5expected?$AA@
CONST	SEGMENT
??_C@_0BL@HIOFDBBP@hexadecimal?5digit?5expected?$AA@ DB 'hexadecimal digi'
	DB	't expected', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CPAHLMBA@unfinished?5long?5?$CFs?5?$CIstarting?5at?5@
CONST	SEGMENT
??_C@_0CJ@CPAHLMBA@unfinished?5long?5?$CFs?5?$CIstarting?5at?5@ DB 'unfin'
	DB	'ished long %s (starting at line %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GJGNEJFD@comment?$AA@
CONST	SEGMENT
??_C@_07GJGNEJFD@comment?$AA@ DB 'comment', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICGJLFIM@string?$AA@
CONST	SEGMENT
??_C@_06ICGJLFIM@string?$AA@ DB 'string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EDDNHBKL@Pp?$AA@
CONST	SEGMENT
??_C@_02EDDNHBKL@Pp?$AA@ DB 'Pp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GOGFPGCE@Ee?$AA@
CONST	SEGMENT
??_C@_02GOGFPGCE@Ee?$AA@ DB 'Ee', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CFMNENCE@malformed?5number?$AA@
CONST	SEGMENT
??_C@_0BB@CFMNENCE@malformed?5number?$AA@ DB 'malformed number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LAKGPFF@chunk?5has?5too?5many?5lines?$AA@
CONST	SEGMENT
??_C@_0BJ@LAKGPFF@chunk?5has?5too?5many?5lines?$AA@ DB 'chunk has too man'
	DB	'y lines', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@ DB '%s near %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_04FBKCMAJG@?8?$CFs?8?$AA@ DB '''%s''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENIEGDOG@?8?$CFc?8?$AA@
CONST	SEGMENT
??_C@_04ENIEGDOG@?8?$CFc?8?$AA@ DB '''%c''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LJLBKCOP@_ENV?$AA@
CONST	SEGMENT
??_C@_04LJLBKCOP@_ENV?$AA@ DB '_ENV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@ DB 'lexical element t'
	DB	'oo long', 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$llex DD	0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_string DD 0a5801H
	DD	0af458H
	DD	097451H
	DD	08644cH
	DD	0e0053209H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$readdecesc DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$utf8esc DD 021H
	DD	imagerel utf8esc
	DD	imagerel utf8esc+52
	DD	imagerel $unwind$utf8esc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utf8esc DD 020521H
	DD	093405H
	DD	imagerel utf8esc
	DD	imagerel utf8esc+52
	DD	imagerel $unwind$utf8esc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf8esc DD 041919H
	DD	0a640aH
	DD	07006520aH
	DD	imagerel __GSHandlerCheck
	DD	028H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$readutf8esc DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$readhexaesc DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gethexa DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$esccheck DD 040e01H
	DD	06340eH
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_long_string DD 0a7101H
	DD	06e471H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$skip_sep DD 0c5c01H
	DD	0be45cH
	DD	0ac457H
	DD	097452H
	DD	08644dH
	DD	0f0053209H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_numeral DD 081501H
	DD	0a7415H
	DD	096415H
	DD	083415H
	DD	0e0115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$trydecpoint DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_next2 DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_next1 DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$inclinenumber DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$txtToken DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$save DD 021H
	DD	imagerel save
	DD	imagerel save+62
	DD	imagerel $unwind$save
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$save DD 020521H
	DD	063405H
	DD	imagerel save
	DD	imagerel save+62
	DD	imagerel $unwind$save
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$save DD	060f01H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lexerror DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaX_syntaxerror DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaX_lookahead DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaX_next DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaX_newstring DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaX_setinput DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaX_init DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT llex
_TEXT	SEGMENT
ls$ = 64
seminfo$ = 72
llex	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 460
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 461
  00018	48 8b 41 48	 mov	 rax, QWORD PTR [rcx+72]
  0001c	33 f6		 xor	 esi, esi
  0001e	4c 8b f2	 mov	 r14, rdx
  00021	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi
; Line 463
  00025	8b 01		 mov	 eax, DWORD PTR [rcx]
  00027	48 8b d9	 mov	 rbx, rcx
  0002a	ff c0		 inc	 eax
  0002c	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:__ImageBase
  00033	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00036	0f 87 73 02 00
	00		 ja	 $LN8@llex
  0003c	0f 1f 40 00	 npad	 4
$LL56@llex:
  00040	48 98		 cdqe
  00042	41 0f b6 84 07
	00 00 00 00	 movzx	 eax, BYTE PTR $LN173@llex[r15+rax]
  0004b	41 8b 8c 87 00
	00 00 00	 mov	 ecx, DWORD PTR $LN174@llex[r15+rax*4]
  00053	49 03 cf	 add	 rcx, r15
  00056	ff e1		 jmp	 rcx
$LN52@llex:
; Line 465
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 inclinenumber
; Line 466
  00060	e9 3d 02 00 00	 jmp	 $LN181@llex
$LN51@llex:
; Line 469
  00065	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00069	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0006c	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00070	48 89 01	 mov	 QWORD PTR [rcx], rax
  00073	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00077	48 85 d2	 test	 rdx, rdx
  0007a	74 16		 je	 SHORT $LN59@llex
  0007c	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00080	48 ff c0	 inc	 rax
  00083	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00087	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0008b	89 13		 mov	 DWORD PTR [rbx], edx
; Line 470
  0008d	e9 10 02 00 00	 jmp	 $LN181@llex
$LN59@llex:
; Line 469
  00092	e8 00 00 00 00	 call	 luaZ_fill
  00097	8b d0		 mov	 edx, eax
  00099	89 03		 mov	 DWORD PTR [rbx], eax
; Line 470
  0009b	e9 02 02 00 00	 jmp	 $LN181@llex
$LN50@llex:
; Line 473
  000a0	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000a4	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000a7	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  000ab	48 89 01	 mov	 QWORD PTR [rcx], rax
  000ae	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000b2	48 85 d2	 test	 rdx, rdx
  000b5	74 11		 je	 SHORT $LN61@llex
  000b7	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000bb	48 ff c0	 inc	 rax
  000be	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  000c2	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000c6	eb 07		 jmp	 SHORT $LN62@llex
$LN61@llex:
  000c8	e8 00 00 00 00	 call	 luaZ_fill
  000cd	8b d0		 mov	 edx, eax
$LN62@llex:
  000cf	89 13		 mov	 DWORD PTR [rbx], edx
; Line 474
  000d1	83 fa 2d	 cmp	 edx, 45			; 0000002dH
  000d4	0f 85 20 02 00
	00		 jne	 $LN147@llex
; Line 476
  000da	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000de	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000e1	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  000e5	48 89 01	 mov	 QWORD PTR [rcx], rax
  000e8	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000ec	48 85 d2	 test	 rdx, rdx
  000ef	74 11		 je	 SHORT $LN63@llex
  000f1	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000f5	48 ff c0	 inc	 rax
  000f8	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  000fc	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00100	eb 07		 jmp	 SHORT $LN64@llex
$LN63@llex:
  00102	e8 00 00 00 00	 call	 luaZ_fill
  00107	8b d0		 mov	 edx, eax
$LN64@llex:
  00109	89 13		 mov	 DWORD PTR [rbx], edx
; Line 477
  0010b	83 fa 5b	 cmp	 edx, 91			; 0000005bH
  0010e	0f 85 43 01 00
	00		 jne	 $LN144@llex
; Line 478
  00114	48 8b cb	 mov	 rcx, rbx
  00117	e8 00 00 00 00	 call	 skip_sep
  0011c	8b f8		 mov	 edi, eax
; Line 479
  0011e	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  00122	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi
; Line 480
  00126	85 ff		 test	 edi, edi
  00128	0f 88 29 01 00
	00		 js	 $LN144@llex
; Line 481
  0012e	8b 13		 mov	 edx, DWORD PTR [rbx]
  00130	8b 6b 04	 mov	 ebp, DWORD PTR [rbx+4]
  00133	48 8b cb	 mov	 rcx, rbx
  00136	e8 00 00 00 00	 call	 save
  0013b	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0013f	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00142	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00146	48 89 01	 mov	 QWORD PTR [rcx], rax
  00149	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0014d	48 85 d2	 test	 rdx, rdx
  00150	74 11		 je	 SHORT $LN102@llex
  00152	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00156	48 ff c0	 inc	 rax
  00159	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  0015d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00161	eb 07		 jmp	 SHORT $LN103@llex
$LN102@llex:
  00163	e8 00 00 00 00	 call	 luaZ_fill
  00168	8b d0		 mov	 edx, eax
$LN103@llex:
  0016a	89 13		 mov	 DWORD PTR [rbx], edx
  0016c	83 fa 0a	 cmp	 edx, 10
  0016f	74 05		 je	 SHORT $LN98@llex
  00171	83 fa 0d	 cmp	 edx, 13
  00174	75 0a		 jne	 SHORT $LL97@llex
$LN98@llex:
  00176	48 8b cb	 mov	 rcx, rbx
  00179	e8 00 00 00 00	 call	 inclinenumber
  0017e	66 90		 npad	 2
$LL97@llex:
  00180	8b 03		 mov	 eax, DWORD PTR [rbx]
  00182	83 f8 ff	 cmp	 eax, -1
  00185	0f 84 14 05 00
	00		 je	 $LN187@llex
  0018b	83 f8 0a	 cmp	 eax, 10
  0018e	0f 84 8e 00 00
	00		 je	 $LN90@llex
  00194	83 f8 0d	 cmp	 eax, 13
  00197	0f 84 85 00 00
	00		 je	 $LN90@llex
  0019d	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  001a0	74 35		 je	 SHORT $LN92@llex
  001a2	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  001a6	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  001a9	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  001ad	48 89 01	 mov	 QWORD PTR [rcx], rax
  001b0	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  001b4	48 85 d2	 test	 rdx, rdx
  001b7	74 13		 je	 SHORT $LN108@llex
  001b9	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  001bd	48 ff c0	 inc	 rax
  001c0	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  001c4	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  001c8	89 13		 mov	 DWORD PTR [rbx], edx
  001ca	eb b4		 jmp	 SHORT $LL97@llex
$LN108@llex:
  001cc	e8 00 00 00 00	 call	 luaZ_fill
  001d1	8b d0		 mov	 edx, eax
  001d3	89 03		 mov	 DWORD PTR [rbx], eax
  001d5	eb a9		 jmp	 SHORT $LL97@llex
$LN92@llex:
  001d7	48 8b cb	 mov	 rcx, rbx
  001da	e8 00 00 00 00	 call	 skip_sep
  001df	3b c7		 cmp	 eax, edi
  001e1	75 9d		 jne	 SHORT $LL97@llex
  001e3	8b 13		 mov	 edx, DWORD PTR [rbx]
  001e5	48 8b cb	 mov	 rcx, rbx
  001e8	e8 00 00 00 00	 call	 save
  001ed	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  001f1	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  001f4	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  001f8	48 89 01	 mov	 QWORD PTR [rcx], rax
  001fb	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  001ff	48 85 d2	 test	 rdx, rdx
  00202	74 40		 je	 SHORT $LN104@llex
  00204	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
$endloop$189:
  00208	48 ff c0	 inc	 rax
  0020b	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  0020f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
; Line 482
  00213	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  00217	89 13		 mov	 DWORD PTR [rbx], edx
  00219	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi
; Line 483
  0021d	e9 80 00 00 00	 jmp	 $LN181@llex
; Line 481
$LN90@llex:
  00222	ba 0a 00 00 00	 mov	 edx, 10
  00227	48 8b cb	 mov	 rcx, rbx
  0022a	e8 00 00 00 00	 call	 save
  0022f	48 8b cb	 mov	 rcx, rbx
  00232	e8 00 00 00 00	 call	 inclinenumber
  00237	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  0023b	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi
  0023f	e9 3c ff ff ff	 jmp	 $LL97@llex
$LN104@llex:
  00244	e8 00 00 00 00	 call	 luaZ_fill
$endloop_1$190:
  00249	89 03		 mov	 DWORD PTR [rbx], eax
  0024b	8b d0		 mov	 edx, eax
; Line 482
  0024d	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  00251	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi
; Line 483
  00255	eb 4b		 jmp	 SHORT $LN181@llex
$LN144@llex:
; Line 487
  00257	83 3b 0a	 cmp	 DWORD PTR [rbx], 10
  0025a	74 46		 je	 SHORT $LN181@llex
  0025c	0f 1f 40 00	 npad	 4
$LL46@llex:
  00260	8b 03		 mov	 eax, DWORD PTR [rbx]
  00262	83 f8 0d	 cmp	 eax, 13
  00265	74 3b		 je	 SHORT $LN181@llex
  00267	83 f8 ff	 cmp	 eax, -1
  0026a	74 36		 je	 SHORT $LN181@llex
; Line 488
  0026c	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00270	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00273	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00277	48 89 01	 mov	 QWORD PTR [rcx], rax
  0027a	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0027e	48 85 d2	 test	 rdx, rdx
  00281	74 11		 je	 SHORT $LN65@llex
  00283	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00287	48 ff c0	 inc	 rax
  0028a	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  0028e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00292	eb 07		 jmp	 SHORT $LN66@llex
$LN65@llex:
  00294	e8 00 00 00 00	 call	 luaZ_fill
  00299	8b d0		 mov	 edx, eax
$LN66@llex:
  0029b	89 13		 mov	 DWORD PTR [rbx], edx
  0029d	83 fa 0a	 cmp	 edx, 10
  002a0	75 be		 jne	 SHORT $LL46@llex
$LN181@llex:
; Line 463
  002a2	8b 03		 mov	 eax, DWORD PTR [rbx]
  002a4	ff c0		 inc	 eax
  002a6	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  002a9	0f 86 91 fd ff
	ff		 jbe	 $LL56@llex
$LN8@llex:
; Line 555
  002af	48 63 3b	 movsxd	 rdi, DWORD PTR [rbx]
  002b2	42 f6 84 3f 01
	00 00 00 01	 test	 BYTE PTR luai_ctype_[rdi+r15+1], 1
  002bb	0f 84 92 03 00
	00		 je	 $LN7@llex
$LL6@llex:
; Line 558
  002c1	8b 13		 mov	 edx, DWORD PTR [rbx]
  002c3	48 8b cb	 mov	 rcx, rbx
  002c6	e8 00 00 00 00	 call	 save
  002cb	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  002cf	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  002d2	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  002d6	48 89 01	 mov	 QWORD PTR [rcx], rax
  002d9	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  002dd	48 85 d2	 test	 rdx, rdx
  002e0	0f 84 1d 03 00
	00		 je	 $LN81@llex
  002e6	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  002ea	48 ff c0	 inc	 rax
  002ed	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  002f1	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  002f5	e9 10 03 00 00	 jmp	 $LN82@llex
$LN147@llex:
; Line 474
  002fa	b8 2d 00 00 00	 mov	 eax, 45			; 0000002dH
  002ff	e9 82 03 00 00	 jmp	 $LN55@llex
$LN44@llex:
; Line 492
  00304	48 8b cb	 mov	 rcx, rbx
  00307	e8 00 00 00 00	 call	 skip_sep
; Line 493
  0030c	85 c0		 test	 eax, eax
  0030e	78 18		 js	 SHORT $LN43@llex
; Line 494
  00310	44 8b c0	 mov	 r8d, eax
  00313	49 8b d6	 mov	 rdx, r14
  00316	48 8b cb	 mov	 rcx, rbx
  00319	e8 00 00 00 00	 call	 read_long_string
; Line 495
  0031e	b8 25 01 00 00	 mov	 eax, 293		; 00000125H
  00323	e9 5e 03 00 00	 jmp	 $LN55@llex
$LN43@llex:
; Line 497
  00328	83 f8 ff	 cmp	 eax, -1
  0032b	0f 85 c5 03 00
	00		 jne	 $LN188@llex
; Line 499
  00331	b8 5b 00 00 00	 mov	 eax, 91			; 0000005bH
  00336	e9 4b 03 00 00	 jmp	 $LN55@llex
$LN40@llex:
; Line 502
  0033b	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0033f	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00342	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00346	48 89 01	 mov	 QWORD PTR [rcx], rax
  00349	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0034d	48 85 d2	 test	 rdx, rdx
  00350	74 11		 je	 SHORT $LN67@llex
  00352	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00356	48 ff c0	 inc	 rax
  00359	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  0035d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00361	eb 07		 jmp	 SHORT $LN68@llex
$LN67@llex:
  00363	e8 00 00 00 00	 call	 luaZ_fill
  00368	8b d0		 mov	 edx, eax
$LN68@llex:
  0036a	89 13		 mov	 DWORD PTR [rbx], edx
; Line 503
  0036c	bf 3d 00 00 00	 mov	 edi, 61			; 0000003dH
  00371	48 8b cb	 mov	 rcx, rbx
  00374	8b d7		 mov	 edx, edi
  00376	e8 00 00 00 00	 call	 check_next1
  0037b	b9 1a 01 00 00	 mov	 ecx, 282		; 0000011aH
  00380	85 c0		 test	 eax, eax
  00382	0f 45 f9	 cmovne	 edi, ecx
; Line 504
  00385	e9 fa 02 00 00	 jmp	 $LN186@llex
$LN38@llex:
; Line 507
  0038a	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0038e	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00391	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00395	48 89 01	 mov	 QWORD PTR [rcx], rax
  00398	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0039c	48 85 d2	 test	 rdx, rdx
  0039f	74 11		 je	 SHORT $LN69@llex
  003a1	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  003a5	48 ff c0	 inc	 rax
  003a8	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  003ac	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  003b0	eb 07		 jmp	 SHORT $LN70@llex
$LN69@llex:
  003b2	e8 00 00 00 00	 call	 luaZ_fill
  003b7	8b d0		 mov	 edx, eax
$LN70@llex:
  003b9	89 13		 mov	 DWORD PTR [rbx], edx
; Line 508
  003bb	48 8b cb	 mov	 rcx, rbx
  003be	ba 3d 00 00 00	 mov	 edx, 61			; 0000003dH
  003c3	e8 00 00 00 00	 call	 check_next1
  003c8	85 c0		 test	 eax, eax
  003ca	74 0a		 je	 SHORT $LN36@llex
  003cc	b8 1c 01 00 00	 mov	 eax, 284		; 0000011cH
  003d1	e9 b0 02 00 00	 jmp	 $LN55@llex
$LN36@llex:
; Line 509
  003d6	bf 3c 00 00 00	 mov	 edi, 60			; 0000003cH
  003db	48 8b cb	 mov	 rcx, rbx
  003de	8b d7		 mov	 edx, edi
  003e0	e8 00 00 00 00	 call	 check_next1
  003e5	b9 1e 01 00 00	 mov	 ecx, 286		; 0000011eH
  003ea	85 c0		 test	 eax, eax
  003ec	0f 45 f9	 cmovne	 edi, ecx
; Line 510
  003ef	e9 90 02 00 00	 jmp	 $LN186@llex
$LN33@llex:
; Line 513
  003f4	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  003f8	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  003fb	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  003ff	48 89 01	 mov	 QWORD PTR [rcx], rax
  00402	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00406	48 85 d2	 test	 rdx, rdx
  00409	74 11		 je	 SHORT $LN71@llex
  0040b	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0040f	48 ff c0	 inc	 rax
  00412	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00416	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0041a	eb 07		 jmp	 SHORT $LN72@llex
$LN71@llex:
  0041c	e8 00 00 00 00	 call	 luaZ_fill
  00421	8b d0		 mov	 edx, eax
$LN72@llex:
  00423	89 13		 mov	 DWORD PTR [rbx], edx
; Line 514
  00425	48 8b cb	 mov	 rcx, rbx
  00428	ba 3d 00 00 00	 mov	 edx, 61			; 0000003dH
  0042d	e8 00 00 00 00	 call	 check_next1
  00432	85 c0		 test	 eax, eax
  00434	74 0a		 je	 SHORT $LN31@llex
  00436	b8 1b 01 00 00	 mov	 eax, 283		; 0000011bH
  0043b	e9 46 02 00 00	 jmp	 $LN55@llex
$LN31@llex:
; Line 515
  00440	bf 3e 00 00 00	 mov	 edi, 62			; 0000003eH
  00445	48 8b cb	 mov	 rcx, rbx
  00448	8b d7		 mov	 edx, edi
  0044a	e8 00 00 00 00	 call	 check_next1
  0044f	b9 1f 01 00 00	 mov	 ecx, 287		; 0000011fH
  00454	85 c0		 test	 eax, eax
  00456	0f 45 f9	 cmovne	 edi, ecx
; Line 516
  00459	e9 26 02 00 00	 jmp	 $LN186@llex
$LN28@llex:
; Line 519
  0045e	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00462	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00465	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00469	48 89 01	 mov	 QWORD PTR [rcx], rax
  0046c	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00470	48 85 d2	 test	 rdx, rdx
  00473	74 11		 je	 SHORT $LN73@llex
  00475	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00479	48 ff c0	 inc	 rax
  0047c	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00480	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00484	eb 07		 jmp	 SHORT $LN74@llex
$LN73@llex:
  00486	e8 00 00 00 00	 call	 luaZ_fill
  0048b	8b d0		 mov	 edx, eax
$LN74@llex:
  0048d	89 13		 mov	 DWORD PTR [rbx], edx
; Line 520
  0048f	bf 2f 00 00 00	 mov	 edi, 47			; 0000002fH
  00494	48 8b cb	 mov	 rcx, rbx
  00497	8b d7		 mov	 edx, edi
  00499	e8 00 00 00 00	 call	 check_next1
  0049e	b9 17 01 00 00	 mov	 ecx, 279		; 00000117H
  004a3	85 c0		 test	 eax, eax
  004a5	0f 45 f9	 cmovne	 edi, ecx
; Line 521
  004a8	e9 d7 01 00 00	 jmp	 $LN186@llex
$LN25@llex:
; Line 524
  004ad	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  004b1	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  004b4	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  004b8	48 89 01	 mov	 QWORD PTR [rcx], rax
  004bb	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  004bf	48 85 d2	 test	 rdx, rdx
  004c2	74 11		 je	 SHORT $LN75@llex
  004c4	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  004c8	48 ff c0	 inc	 rax
  004cb	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  004cf	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  004d3	eb 07		 jmp	 SHORT $LN76@llex
$LN75@llex:
  004d5	e8 00 00 00 00	 call	 luaZ_fill
  004da	8b d0		 mov	 edx, eax
$LN76@llex:
  004dc	89 13		 mov	 DWORD PTR [rbx], edx
; Line 525
  004de	48 8b cb	 mov	 rcx, rbx
  004e1	ba 3d 00 00 00	 mov	 edx, 61			; 0000003dH
  004e6	e8 00 00 00 00	 call	 check_next1
  004eb	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  004f0	ba 1d 01 00 00	 mov	 edx, 285		; 0000011dH
  004f5	85 c0		 test	 eax, eax
  004f7	0f 45 ca	 cmovne	 ecx, edx
  004fa	8b c1		 mov	 eax, ecx
; Line 526
  004fc	e9 85 01 00 00	 jmp	 $LN55@llex
$LN22@llex:
; Line 529
  00501	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00505	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00508	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  0050c	48 89 01	 mov	 QWORD PTR [rcx], rax
  0050f	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00513	48 85 d2	 test	 rdx, rdx
  00516	74 11		 je	 SHORT $LN77@llex
  00518	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0051c	48 ff c0	 inc	 rax
  0051f	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00523	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00527	eb 07		 jmp	 SHORT $LN78@llex
$LN77@llex:
  00529	e8 00 00 00 00	 call	 luaZ_fill
  0052e	8b d0		 mov	 edx, eax
$LN78@llex:
  00530	89 13		 mov	 DWORD PTR [rbx], edx
; Line 530
  00532	bf 3a 00 00 00	 mov	 edi, 58			; 0000003aH
  00537	48 8b cb	 mov	 rcx, rbx
  0053a	8b d7		 mov	 edx, edi
  0053c	e8 00 00 00 00	 call	 check_next1
  00541	b9 20 01 00 00	 mov	 ecx, 288		; 00000120H
  00546	85 c0		 test	 eax, eax
  00548	0f 45 f9	 cmovne	 edi, ecx
; Line 531
  0054b	e9 34 01 00 00	 jmp	 $LN186@llex
$LN19@llex:
; Line 534
  00550	8b 13		 mov	 edx, DWORD PTR [rbx]
  00552	4d 8b c6	 mov	 r8, r14
  00555	48 8b cb	 mov	 rcx, rbx
  00558	e8 00 00 00 00	 call	 read_string
; Line 535
  0055d	b8 25 01 00 00	 mov	 eax, 293		; 00000125H
  00562	e9 1f 01 00 00	 jmp	 $LN55@llex
$LN17@llex:
; Line 538
  00567	8b 13		 mov	 edx, DWORD PTR [rbx]
  00569	48 8b cb	 mov	 rcx, rbx
  0056c	e8 00 00 00 00	 call	 save
  00571	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00575	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00578	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  0057c	48 89 01	 mov	 QWORD PTR [rcx], rax
  0057f	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00583	48 85 d2	 test	 rdx, rdx
  00586	74 11		 je	 SHORT $LN79@llex
  00588	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0058c	48 ff c0	 inc	 rax
  0058f	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00593	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00597	eb 07		 jmp	 SHORT $LN80@llex
$LN79@llex:
  00599	e8 00 00 00 00	 call	 luaZ_fill
  0059e	8b d0		 mov	 edx, eax
$LN80@llex:
  005a0	89 13		 mov	 DWORD PTR [rbx], edx
; Line 539
  005a2	48 8b cb	 mov	 rcx, rbx
  005a5	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  005aa	e8 00 00 00 00	 call	 check_next1
  005af	85 c0		 test	 eax, eax
  005b1	74 1e		 je	 SHORT $LN16@llex
; Line 540
  005b3	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  005b8	48 8b cb	 mov	 rcx, rbx
  005bb	e8 00 00 00 00	 call	 check_next1
  005c0	85 c0		 test	 eax, eax
  005c2	40 0f 95 c6	 setne	 sil
  005c6	8d 86 18 01 00
	00		 lea	 eax, DWORD PTR [rsi+280]
; Line 542
  005cc	e9 b5 00 00 00	 jmp	 $LN55@llex
$LN16@llex:
; Line 544
  005d1	48 63 03	 movsxd	 rax, DWORD PTR [rbx]
  005d4	42 f6 84 38 01
	00 00 00 02	 test	 BYTE PTR luai_ctype_[rax+r15+1], 2
  005dd	75 0a		 jne	 SHORT $LN12@llex
  005df	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  005e4	e9 9d 00 00 00	 jmp	 $LN55@llex
$LN12@llex:
; Line 545
  005e9	49 8b d6	 mov	 rdx, r14
  005ec	48 8b cb	 mov	 rcx, rbx
  005ef	e8 00 00 00 00	 call	 read_numeral
  005f4	e9 8d 00 00 00	 jmp	 $LN55@llex
$LN9@llex:
; Line 552
  005f9	b8 21 01 00 00	 mov	 eax, 289		; 00000121H
  005fe	e9 83 00 00 00	 jmp	 $LN55@llex
$LN81@llex:
; Line 558
  00603	e8 00 00 00 00	 call	 luaZ_fill
  00608	8b d0		 mov	 edx, eax
$LN82@llex:
; Line 559
  0060a	48 63 c2	 movsxd	 rax, edx
  0060d	89 13		 mov	 DWORD PTR [rbx], edx
  0060f	42 f6 84 38 01
	00 00 00 03	 test	 BYTE PTR luai_ctype_[rax+r15+1], 3
  00618	0f 85 a3 fc ff
	ff		 jne	 $LL6@llex
; Line 561
  0061e	48 8b 53 48	 mov	 rdx, QWORD PTR [rbx+72]
  00622	48 8b cb	 mov	 rcx, rbx
  00625	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00629	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0062c	e8 00 00 00 00	 call	 luaX_newstring
; Line 562
  00631	49 89 06	 mov	 QWORD PTR [r14], rax
; Line 563
  00634	80 78 08 04	 cmp	 BYTE PTR [rax+8], 4
  00638	75 12		 jne	 SHORT $LN3@llex
  0063a	0f b6 48 0a	 movzx	 ecx, BYTE PTR [rax+10]
  0063e	84 c9		 test	 cl, cl
  00640	74 0a		 je	 SHORT $LN3@llex
; Line 564
  00642	0f b6 c1	 movzx	 eax, cl
  00645	05 00 01 00 00	 add	 eax, 256		; 00000100H
  0064a	eb 3a		 jmp	 SHORT $LN55@llex
$LN3@llex:
; Line 566
  0064c	b8 24 01 00 00	 mov	 eax, 292		; 00000124H
  00651	eb 33		 jmp	 SHORT $LN55@llex
$LN7@llex:
; Line 571
  00653	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00657	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0065a	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  0065e	48 89 01	 mov	 QWORD PTR [rcx], rax
  00661	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00665	48 85 d2	 test	 rdx, rdx
  00668	74 11		 je	 SHORT $LN83@llex
  0066a	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0066e	48 ff c0	 inc	 rax
  00671	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00675	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00679	eb 07		 jmp	 SHORT $LN84@llex
$LN83@llex:
  0067b	e8 00 00 00 00	 call	 luaZ_fill
  00680	8b d0		 mov	 edx, eax
$LN84@llex:
  00682	89 13		 mov	 DWORD PTR [rbx], edx
$LN186@llex:
; Line 572
  00684	8b c7		 mov	 eax, edi
$LN55@llex:
; Line 577
  00686	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0068b	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00690	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00695	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00699	41 5f		 pop	 r15
  0069b	41 5e		 pop	 r14
  0069d	5f		 pop	 rdi
  0069e	c3		 ret	 0
$LN187@llex:
; Line 481
  0069f	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  006a3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07GJGNEJFD@comment?$AA@
  006aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@CPAHLMBA@unfinished?5long?5?$CFs?5?$CIstarting?5at?5@
  006b1	44 8b cd	 mov	 r9d, ebp
  006b4	e8 00 00 00 00	 call	 luaO_pushfstring
  006b9	44 8b 4b 04	 mov	 r9d, DWORD PTR [rbx+4]
  006bd	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  006c1	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  006c5	48 8b d0	 mov	 rdx, rax
  006c8	e8 00 00 00 00	 call	 luaG_addinfo
  006cd	4c 8b 0d 00 01
	00 00		 mov	 r9, QWORD PTR luaX_tokens+256
  006d4	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  006d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
  006df	4c 8b c0	 mov	 r8, rax
  006e2	e8 00 00 00 00	 call	 luaO_pushfstring
  006e7	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  006eb	ba 03 00 00 00	 mov	 edx, 3
  006f0	e8 00 00 00 00	 call	 luaD_throw
  006f5	cc		 int	 3
$LN188@llex:
; Line 498
  006f6	44 8b 4b 04	 mov	 r9d, DWORD PTR [rbx+4]
  006fa	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  006fe	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00702	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DBNLNIBP@invalid?5long?5string?5delimiter?$AA@
  00709	e8 00 00 00 00	 call	 luaG_addinfo
  0070e	33 d2		 xor	 edx, edx
  00710	48 8b cb	 mov	 rcx, rbx
  00713	48 8b f8	 mov	 rdi, rax
  00716	e8 00 00 00 00	 call	 save
  0071b	4c 8b 43 48	 mov	 r8, QWORD PTR [rbx+72]
  0071f	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00723	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  00726	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
  0072d	e8 00 00 00 00	 call	 luaO_pushfstring
  00732	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00736	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
  0073d	4c 8b c8	 mov	 r9, rax
  00740	4c 8b c7	 mov	 r8, rdi
  00743	e8 00 00 00 00	 call	 luaO_pushfstring
  00748	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0074c	ba 03 00 00 00	 mov	 edx, 3
  00751	e8 00 00 00 00	 call	 luaD_throw
  00756	cc		 int	 3
$LN185@llex:
  00757	90		 npad	 1
$LN174@llex:
; Line 577
  00758	00 00 00 00	 DD	 $LN9@llex
  0075c	00 00 00 00	 DD	 $LN51@llex
  00760	00 00 00 00	 DD	 $LN52@llex
  00764	00 00 00 00	 DD	 $LN19@llex
  00768	00 00 00 00	 DD	 $LN50@llex
  0076c	00 00 00 00	 DD	 $LN17@llex
  00770	00 00 00 00	 DD	 $LN28@llex
  00774	00 00 00 00	 DD	 $LN12@llex
  00778	00 00 00 00	 DD	 $LN22@llex
  0077c	00 00 00 00	 DD	 $LN38@llex
  00780	00 00 00 00	 DD	 $LN40@llex
  00784	00 00 00 00	 DD	 $LN33@llex
  00788	00 00 00 00	 DD	 $LN44@llex
  0078c	00 00 00 00	 DD	 $LN25@llex
  00790	00 00 00 00	 DD	 $LN8@llex
$LN173@llex:
  00794	00		 DB	 0
  00795	0e		 DB	 14
  00796	0e		 DB	 14
  00797	0e		 DB	 14
  00798	0e		 DB	 14
  00799	0e		 DB	 14
  0079a	0e		 DB	 14
  0079b	0e		 DB	 14
  0079c	0e		 DB	 14
  0079d	0e		 DB	 14
  0079e	01		 DB	 1
  0079f	02		 DB	 2
  007a0	01		 DB	 1
  007a1	01		 DB	 1
  007a2	02		 DB	 2
  007a3	0e		 DB	 14
  007a4	0e		 DB	 14
  007a5	0e		 DB	 14
  007a6	0e		 DB	 14
  007a7	0e		 DB	 14
  007a8	0e		 DB	 14
  007a9	0e		 DB	 14
  007aa	0e		 DB	 14
  007ab	0e		 DB	 14
  007ac	0e		 DB	 14
  007ad	0e		 DB	 14
  007ae	0e		 DB	 14
  007af	0e		 DB	 14
  007b0	0e		 DB	 14
  007b1	0e		 DB	 14
  007b2	0e		 DB	 14
  007b3	0e		 DB	 14
  007b4	0e		 DB	 14
  007b5	01		 DB	 1
  007b6	0e		 DB	 14
  007b7	03		 DB	 3
  007b8	0e		 DB	 14
  007b9	0e		 DB	 14
  007ba	0e		 DB	 14
  007bb	0e		 DB	 14
  007bc	03		 DB	 3
  007bd	0e		 DB	 14
  007be	0e		 DB	 14
  007bf	0e		 DB	 14
  007c0	0e		 DB	 14
  007c1	0e		 DB	 14
  007c2	04		 DB	 4
  007c3	05		 DB	 5
  007c4	06		 DB	 6
  007c5	07		 DB	 7
  007c6	07		 DB	 7
  007c7	07		 DB	 7
  007c8	07		 DB	 7
  007c9	07		 DB	 7
  007ca	07		 DB	 7
  007cb	07		 DB	 7
  007cc	07		 DB	 7
  007cd	07		 DB	 7
  007ce	07		 DB	 7
  007cf	08		 DB	 8
  007d0	0e		 DB	 14
  007d1	09		 DB	 9
  007d2	0a		 DB	 10
  007d3	0b		 DB	 11
  007d4	0e		 DB	 14
  007d5	0e		 DB	 14
  007d6	0e		 DB	 14
  007d7	0e		 DB	 14
  007d8	0e		 DB	 14
  007d9	0e		 DB	 14
  007da	0e		 DB	 14
  007db	0e		 DB	 14
  007dc	0e		 DB	 14
  007dd	0e		 DB	 14
  007de	0e		 DB	 14
  007df	0e		 DB	 14
  007e0	0e		 DB	 14
  007e1	0e		 DB	 14
  007e2	0e		 DB	 14
  007e3	0e		 DB	 14
  007e4	0e		 DB	 14
  007e5	0e		 DB	 14
  007e6	0e		 DB	 14
  007e7	0e		 DB	 14
  007e8	0e		 DB	 14
  007e9	0e		 DB	 14
  007ea	0e		 DB	 14
  007eb	0e		 DB	 14
  007ec	0e		 DB	 14
  007ed	0e		 DB	 14
  007ee	0e		 DB	 14
  007ef	0e		 DB	 14
  007f0	0c		 DB	 12
  007f1	0e		 DB	 14
  007f2	0e		 DB	 14
  007f3	0e		 DB	 14
  007f4	0e		 DB	 14
  007f5	0e		 DB	 14
  007f6	0e		 DB	 14
  007f7	0e		 DB	 14
  007f8	0e		 DB	 14
  007f9	0e		 DB	 14
  007fa	0e		 DB	 14
  007fb	0e		 DB	 14
  007fc	0e		 DB	 14
  007fd	0e		 DB	 14
  007fe	0e		 DB	 14
  007ff	0e		 DB	 14
  00800	0e		 DB	 14
  00801	0e		 DB	 14
  00802	0e		 DB	 14
  00803	0e		 DB	 14
  00804	0e		 DB	 14
  00805	0e		 DB	 14
  00806	0e		 DB	 14
  00807	0e		 DB	 14
  00808	0e		 DB	 14
  00809	0e		 DB	 14
  0080a	0e		 DB	 14
  0080b	0e		 DB	 14
  0080c	0e		 DB	 14
  0080d	0e		 DB	 14
  0080e	0e		 DB	 14
  0080f	0e		 DB	 14
  00810	0e		 DB	 14
  00811	0e		 DB	 14
  00812	0e		 DB	 14
  00813	0d		 DB	 13
llex	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT read_string
_TEXT	SEGMENT
ls$ = 64
del$ = 72
seminfo$ = 80
read_string PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 397
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 56		 push	 r14
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00009	8b ea		 mov	 ebp, edx
; Line 398
  0000b	8b 11		 mov	 edx, DWORD PTR [rcx]
  0000d	4d 8b f0	 mov	 r14, r8
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 save
  00018	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0001c	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0001f	49 8d 41 ff	 lea	 rax, QWORD PTR [r9-1]
  00023	48 89 01	 mov	 QWORD PTR [rcx], rax
  00026	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0002a	4d 85 c9	 test	 r9, r9
  0002d	74 11		 je	 SHORT $LN32@read_strin
  0002f	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00033	48 ff c0	 inc	 rax
  00036	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  0003a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0003e	eb 07		 jmp	 SHORT $LN33@read_strin
$LN32@read_strin:
  00040	e8 00 00 00 00	 call	 luaZ_fill
  00045	8b d0		 mov	 edx, eax
$LN33@read_strin:
  00047	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0004c	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00051	89 13		 mov	 DWORD PTR [rbx], edx
  00053	4c 89 7c 24 50	 mov	 QWORD PTR [rsp+80], r15
; Line 399
  00058	3b d5		 cmp	 edx, ebp
  0005a	0f 84 6b 02 00
	00		 je	 $LN28@read_strin
  00060	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:__ImageBase
  00067	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL29@read_strin:
; Line 400
  00070	8b 13		 mov	 edx, DWORD PTR [rbx]
  00072	83 fa ff	 cmp	 edx, -1
  00075	0f 84 21 03 00
	00		 je	 $LN25@read_strin
  0007b	83 fa 0a	 cmp	 edx, 10
  0007e	0f 84 b7 02 00
	00		 je	 $LN88@read_strin
  00084	83 fa 0d	 cmp	 edx, 13
  00087	0f 84 ae 02 00
	00		 je	 $LN88@read_strin
; Line 451
  0008d	48 8b cb	 mov	 rcx, rbx
  00090	83 fa 5c	 cmp	 edx, 92			; 0000005cH
  00093	74 40		 je	 SHORT $LN23@read_strin
  00095	e8 00 00 00 00	 call	 save
  0009a	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0009e	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000a1	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  000a5	48 89 01	 mov	 QWORD PTR [rcx], rax
  000a8	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000ac	48 85 d2	 test	 rdx, rdx
  000af	74 16		 je	 SHORT $LN42@read_strin
  000b1	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000b5	48 ff c0	 inc	 rax
  000b8	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  000bc	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000c0	89 13		 mov	 DWORD PTR [rbx], edx
  000c2	e9 fc 01 00 00	 jmp	 $no_save$89
$LN42@read_strin:
  000c7	e8 00 00 00 00	 call	 luaZ_fill
  000cc	8b d0		 mov	 edx, eax
  000ce	89 03		 mov	 DWORD PTR [rbx], eax
  000d0	e9 ee 01 00 00	 jmp	 $no_save$89
$LN23@read_strin:
; Line 410
  000d5	e8 00 00 00 00	 call	 save
  000da	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000de	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000e1	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  000e5	48 89 01	 mov	 QWORD PTR [rcx], rax
  000e8	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000ec	48 85 d2	 test	 rdx, rdx
  000ef	74 11		 je	 SHORT $LN34@read_strin
  000f1	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000f5	48 ff c0	 inc	 rax
  000f8	0f b6 70 ff	 movzx	 esi, BYTE PTR [rax-1]
  000fc	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00100	eb 07		 jmp	 SHORT $LN35@read_strin
$LN34@read_strin:
  00102	e8 00 00 00 00	 call	 luaZ_fill
  00107	8b f0		 mov	 esi, eax
$LN35@read_strin:
; Line 411
  00109	8d 46 01	 lea	 eax, DWORD PTR [rsi+1]
  0010c	89 33		 mov	 DWORD PTR [rbx], esi
  0010e	83 f8 7b	 cmp	 eax, 123		; 0000007bH
  00111	0f 87 72 01 00
	00		 ja	 $LN2@read_strin
  00117	48 98		 cdqe
  00119	41 0f b6 84 07
	00 00 00 00	 movzx	 eax, BYTE PTR $LN85@read_strin[r15+rax]
  00122	41 8b 8c 87 00
	00 00 00	 mov	 ecx, DWORD PTR $LN86@read_strin[r15+rax*4]
  0012a	49 03 cf	 add	 rcx, r15
  0012d	ff e1		 jmp	 rcx
$LN20@read_strin:
; Line 412
  0012f	be 07 00 00 00	 mov	 esi, 7
$read_save$90:
; Line 442
  00134	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00138	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0013b	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  0013f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00142	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00146	48 85 d2	 test	 rdx, rdx
  00149	0f 84 81 00 00
	00		 je	 $LN40@read_strin
  0014f	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00153	48 ff c0	 inc	 rax
  00156	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  0015a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0015e	89 13		 mov	 DWORD PTR [rbx], edx
  00160	e9 4c 01 00 00	 jmp	 $only_save$91
$LN19@read_strin:
; Line 413
  00165	be 08 00 00 00	 mov	 esi, 8
  0016a	eb c8		 jmp	 SHORT $read_save$90
$LN18@read_strin:
; Line 414
  0016c	be 0c 00 00 00	 mov	 esi, 12
  00171	eb c1		 jmp	 SHORT $read_save$90
$LN17@read_strin:
; Line 415
  00173	be 0a 00 00 00	 mov	 esi, 10
  00178	eb ba		 jmp	 SHORT $read_save$90
$LN16@read_strin:
; Line 416
  0017a	be 0d 00 00 00	 mov	 esi, 13
  0017f	eb b3		 jmp	 SHORT $read_save$90
$LN15@read_strin:
; Line 417
  00181	be 09 00 00 00	 mov	 esi, 9
  00186	eb ac		 jmp	 SHORT $read_save$90
$LN14@read_strin:
; Line 418
  00188	be 0b 00 00 00	 mov	 esi, 11
  0018d	eb a5		 jmp	 SHORT $read_save$90
$LN13@read_strin:
; Line 419
  0018f	48 8b cb	 mov	 rcx, rbx
  00192	e8 00 00 00 00	 call	 gethexa
  00197	48 8b cb	 mov	 rcx, rbx
  0019a	8b f0		 mov	 esi, eax
  0019c	e8 00 00 00 00	 call	 gethexa
  001a1	c1 e6 04	 shl	 esi, 4
  001a4	03 f0		 add	 esi, eax
  001a6	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  001aa	48 83 40 08 fe	 add	 QWORD PTR [rax+8], -2
  001af	eb 83		 jmp	 SHORT $read_save$90
$LN12@read_strin:
; Line 420
  001b1	48 8b cb	 mov	 rcx, rbx
  001b4	e8 00 00 00 00	 call	 utf8esc
  001b9	e9 05 01 00 00	 jmp	 $no_save$89
$LN11@read_strin:
; Line 422
  001be	48 8b cb	 mov	 rcx, rbx
  001c1	e8 00 00 00 00	 call	 inclinenumber
  001c6	be 0a 00 00 00	 mov	 esi, 10
  001cb	e9 e1 00 00 00	 jmp	 $only_save$91
$LN40@read_strin:
; Line 442
  001d0	e8 00 00 00 00	 call	 luaZ_fill
  001d5	8b d0		 mov	 edx, eax
  001d7	89 03		 mov	 DWORD PTR [rbx], eax
  001d9	e9 d3 00 00 00	 jmp	 $only_save$91
$LN8@read_strin:
; Line 427
  001de	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  001e2	48 ff 48 08	 dec	 QWORD PTR [rax+8]
; Line 428
  001e6	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  001ea	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  001ed	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  001f1	48 89 01	 mov	 QWORD PTR [rcx], rax
  001f4	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  001f8	48 85 d2	 test	 rdx, rdx
  001fb	74 11		 je	 SHORT $LN36@read_strin
  001fd	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00201	48 ff c0	 inc	 rax
  00204	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00208	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0020c	eb 07		 jmp	 SHORT $LN37@read_strin
$LN36@read_strin:
  0020e	e8 00 00 00 00	 call	 luaZ_fill
  00213	8b d0		 mov	 edx, eax
$LN37@read_strin:
; Line 429
  00215	48 63 c2	 movsxd	 rax, edx
  00218	89 13		 mov	 DWORD PTR [rbx], edx
  0021a	42 f6 84 38 01
	00 00 00 08	 test	 BYTE PTR luai_ctype_[rax+r15+1], 8
  00223	0f 84 9a 00 00
	00		 je	 $no_save$89
  00229	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@read_strin:
; Line 430
  00230	8b 03		 mov	 eax, DWORD PTR [rbx]
  00232	83 f8 0a	 cmp	 eax, 10
  00235	74 3a		 je	 SHORT $LN4@read_strin
  00237	83 f8 0d	 cmp	 eax, 13
  0023a	74 35		 je	 SHORT $LN4@read_strin
; Line 431
  0023c	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00240	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00243	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00247	48 89 01	 mov	 QWORD PTR [rcx], rax
  0024a	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0024e	48 85 d2	 test	 rdx, rdx
  00251	74 13		 je	 SHORT $LN38@read_strin
  00253	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00257	48 ff c0	 inc	 rax
  0025a	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  0025e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00262	89 13		 mov	 DWORD PTR [rbx], edx
  00264	eb 13		 jmp	 SHORT $LN3@read_strin
$LN38@read_strin:
  00266	e8 00 00 00 00	 call	 luaZ_fill
  0026b	8b d0		 mov	 edx, eax
  0026d	89 03		 mov	 DWORD PTR [rbx], eax
  0026f	eb 08		 jmp	 SHORT $LN3@read_strin
$LN4@read_strin:
; Line 430
  00271	48 8b cb	 mov	 rcx, rbx
  00274	e8 00 00 00 00	 call	 inclinenumber
$LN3@read_strin:
; Line 429
  00279	48 63 03	 movsxd	 rax, DWORD PTR [rbx]
  0027c	42 f6 84 38 01
	00 00 00 08	 test	 BYTE PTR luai_ctype_[rax+r15+1], 8
  00285	75 a9		 jne	 SHORT $LL7@read_strin
; Line 433
  00287	eb 3a		 jmp	 SHORT $no_save$89
$LN2@read_strin:
; Line 436
  00289	48 63 c6	 movsxd	 rax, esi
  0028c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@HGMIJEDD@invalid?5escape?5sequence?$AA@
  00293	48 8b cb	 mov	 rcx, rbx
  00296	42 0f b6 94 38
	01 00 00 00	 movzx	 edx, BYTE PTR luai_ctype_[rax+r15+1]
  0029f	83 e2 02	 and	 edx, 2
  002a2	e8 00 00 00 00	 call	 esccheck
; Line 437
  002a7	48 8b cb	 mov	 rcx, rbx
  002aa	e8 00 00 00 00	 call	 readdecesc
  002af	8b f0		 mov	 esi, eax
$only_save$91:
; Line 445
  002b1	48 8b 4b 48	 mov	 rcx, QWORD PTR [rbx+72]
; Line 446
  002b5	8b d6		 mov	 edx, esi
  002b7	48 ff 49 08	 dec	 QWORD PTR [rcx+8]
  002bb	48 8b cb	 mov	 rcx, rbx
  002be	e8 00 00 00 00	 call	 save
$no_save$89:
; Line 399
  002c3	39 2b		 cmp	 DWORD PTR [rbx], ebp
  002c5	0f 85 a5 fd ff
	ff		 jne	 $LL29@read_strin
$LN28@read_strin:
; Line 454
  002cb	8b 13		 mov	 edx, DWORD PTR [rbx]
  002cd	48 8b cb	 mov	 rcx, rbx
  002d0	e8 00 00 00 00	 call	 save
  002d5	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  002d9	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  002dc	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  002e0	48 89 01	 mov	 QWORD PTR [rcx], rax
  002e3	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  002e7	48 85 d2	 test	 rdx, rdx
  002ea	74 11		 je	 SHORT $LN44@read_strin
  002ec	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  002f0	48 ff c0	 inc	 rax
  002f3	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  002f7	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  002fb	eb 07		 jmp	 SHORT $LN45@read_strin
$LN44@read_strin:
  002fd	e8 00 00 00 00	 call	 luaZ_fill
  00302	8b d0		 mov	 edx, eax
$LN45@read_strin:
; Line 456
  00304	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  00308	89 13		 mov	 DWORD PTR [rbx], edx
  0030a	48 8b cb	 mov	 rcx, rbx
  0030d	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00311	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00314	49 83 e8 02	 sub	 r8, 2
  00318	48 ff c2	 inc	 rdx
  0031b	e8 00 00 00 00	 call	 luaX_newstring
  00320	4c 8b 7c 24 50	 mov	 r15, QWORD PTR [rsp+80]
  00325	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0032a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0032f	49 89 06	 mov	 QWORD PTR [r14], rax
; Line 457
  00332	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00336	41 5e		 pop	 r14
  00338	5d		 pop	 rbp
  00339	5b		 pop	 rbx
  0033a	c3		 ret	 0
$LN88@read_strin:
; Line 406
  0033b	44 8b 4b 04	 mov	 r9d, DWORD PTR [rbx+4]
  0033f	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  00343	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00347	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@IBAFBKML@unfinished?5string?$AA@
  0034e	e8 00 00 00 00	 call	 luaG_addinfo
  00353	33 d2		 xor	 edx, edx
  00355	48 8b cb	 mov	 rcx, rbx
  00358	48 8b f8	 mov	 rdi, rax
  0035b	e8 00 00 00 00	 call	 save
  00360	4c 8b 43 48	 mov	 r8, QWORD PTR [rbx+72]
  00364	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00368	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  0036b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
  00372	e8 00 00 00 00	 call	 luaO_pushfstring
  00377	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0037b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
  00382	4c 8b c8	 mov	 r9, rax
  00385	4c 8b c7	 mov	 r8, rdi
  00388	e8 00 00 00 00	 call	 luaO_pushfstring
  0038d	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00391	ba 03 00 00 00	 mov	 edx, 3
  00396	e8 00 00 00 00	 call	 luaD_throw
  0039b	cc		 int	 3
$LN25@read_strin:
; Line 402
  0039c	44 8b 4b 04	 mov	 r9d, DWORD PTR [rbx+4]
  003a0	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  003a4	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  003a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@IBAFBKML@unfinished?5string?$AA@
  003af	e8 00 00 00 00	 call	 luaG_addinfo
  003b4	4c 8b 0d 00 01
	00 00		 mov	 r9, QWORD PTR luaX_tokens+256
  003bb	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  003bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
  003c6	4c 8b c0	 mov	 r8, rax
  003c9	e8 00 00 00 00	 call	 luaO_pushfstring
  003ce	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  003d2	ba 03 00 00 00	 mov	 edx, 3
  003d7	e8 00 00 00 00	 call	 luaD_throw
  003dc	cc		 int	 3
$LN87@read_strin:
  003dd	0f 1f 00	 npad	 3
$LN86@read_strin:
; Line 457
  003e0	00 00 00 00	 DD	 $no_save$89
  003e4	00 00 00 00	 DD	 $LN11@read_strin
  003e8	00 00 00 00	 DD	 $read_save$90
  003ec	00 00 00 00	 DD	 $LN20@read_strin
  003f0	00 00 00 00	 DD	 $LN19@read_strin
  003f4	00 00 00 00	 DD	 $LN18@read_strin
  003f8	00 00 00 00	 DD	 $LN17@read_strin
  003fc	00 00 00 00	 DD	 $LN16@read_strin
  00400	00 00 00 00	 DD	 $LN15@read_strin
  00404	00 00 00 00	 DD	 $LN12@read_strin
  00408	00 00 00 00	 DD	 $LN14@read_strin
  0040c	00 00 00 00	 DD	 $LN13@read_strin
  00410	00 00 00 00	 DD	 $LN8@read_strin
  00414	00 00 00 00	 DD	 $LN2@read_strin
$LN85@read_strin:
  00418	00		 DB	 0
  00419	0d		 DB	 13
  0041a	0d		 DB	 13
  0041b	0d		 DB	 13
  0041c	0d		 DB	 13
  0041d	0d		 DB	 13
  0041e	0d		 DB	 13
  0041f	0d		 DB	 13
  00420	0d		 DB	 13
  00421	0d		 DB	 13
  00422	0d		 DB	 13
  00423	01		 DB	 1
  00424	0d		 DB	 13
  00425	0d		 DB	 13
  00426	01		 DB	 1
  00427	0d		 DB	 13
  00428	0d		 DB	 13
  00429	0d		 DB	 13
  0042a	0d		 DB	 13
  0042b	0d		 DB	 13
  0042c	0d		 DB	 13
  0042d	0d		 DB	 13
  0042e	0d		 DB	 13
  0042f	0d		 DB	 13
  00430	0d		 DB	 13
  00431	0d		 DB	 13
  00432	0d		 DB	 13
  00433	0d		 DB	 13
  00434	0d		 DB	 13
  00435	0d		 DB	 13
  00436	0d		 DB	 13
  00437	0d		 DB	 13
  00438	0d		 DB	 13
  00439	0d		 DB	 13
  0043a	0d		 DB	 13
  0043b	02		 DB	 2
  0043c	0d		 DB	 13
  0043d	0d		 DB	 13
  0043e	0d		 DB	 13
  0043f	0d		 DB	 13
  00440	02		 DB	 2
  00441	0d		 DB	 13
  00442	0d		 DB	 13
  00443	0d		 DB	 13
  00444	0d		 DB	 13
  00445	0d		 DB	 13
  00446	0d		 DB	 13
  00447	0d		 DB	 13
  00448	0d		 DB	 13
  00449	0d		 DB	 13
  0044a	0d		 DB	 13
  0044b	0d		 DB	 13
  0044c	0d		 DB	 13
  0044d	0d		 DB	 13
  0044e	0d		 DB	 13
  0044f	0d		 DB	 13
  00450	0d		 DB	 13
  00451	0d		 DB	 13
  00452	0d		 DB	 13
  00453	0d		 DB	 13
  00454	0d		 DB	 13
  00455	0d		 DB	 13
  00456	0d		 DB	 13
  00457	0d		 DB	 13
  00458	0d		 DB	 13
  00459	0d		 DB	 13
  0045a	0d		 DB	 13
  0045b	0d		 DB	 13
  0045c	0d		 DB	 13
  0045d	0d		 DB	 13
  0045e	0d		 DB	 13
  0045f	0d		 DB	 13
  00460	0d		 DB	 13
  00461	0d		 DB	 13
  00462	0d		 DB	 13
  00463	0d		 DB	 13
  00464	0d		 DB	 13
  00465	0d		 DB	 13
  00466	0d		 DB	 13
  00467	0d		 DB	 13
  00468	0d		 DB	 13
  00469	0d		 DB	 13
  0046a	0d		 DB	 13
  0046b	0d		 DB	 13
  0046c	0d		 DB	 13
  0046d	0d		 DB	 13
  0046e	0d		 DB	 13
  0046f	0d		 DB	 13
  00470	0d		 DB	 13
  00471	0d		 DB	 13
  00472	0d		 DB	 13
  00473	0d		 DB	 13
  00474	0d		 DB	 13
  00475	02		 DB	 2
  00476	0d		 DB	 13
  00477	0d		 DB	 13
  00478	0d		 DB	 13
  00479	0d		 DB	 13
  0047a	03		 DB	 3
  0047b	04		 DB	 4
  0047c	0d		 DB	 13
  0047d	0d		 DB	 13
  0047e	0d		 DB	 13
  0047f	05		 DB	 5
  00480	0d		 DB	 13
  00481	0d		 DB	 13
  00482	0d		 DB	 13
  00483	0d		 DB	 13
  00484	0d		 DB	 13
  00485	0d		 DB	 13
  00486	0d		 DB	 13
  00487	06		 DB	 6
  00488	0d		 DB	 13
  00489	0d		 DB	 13
  0048a	0d		 DB	 13
  0048b	07		 DB	 7
  0048c	0d		 DB	 13
  0048d	08		 DB	 8
  0048e	09		 DB	 9
  0048f	0a		 DB	 10
  00490	0d		 DB	 13
  00491	0b		 DB	 11
  00492	0d		 DB	 13
  00493	0c		 DB	 12
read_string ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT readdecesc
_TEXT	SEGMENT
ls$ = 48
readdecesc PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 384
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 386
  00014	33 f6		 xor	 esi, esi
  00016	48 8b d9	 mov	 rbx, rcx
; Line 387
  00019	48 8d 2d 01 00
	00 00		 lea	 rbp, OFFSET FLAT:luai_ctype_+1
  00020	8b fe		 mov	 edi, esi
$LL3@readdecesc:
  00022	48 63 13	 movsxd	 rdx, DWORD PTR [rbx]
  00025	f6 04 2a 02	 test	 BYTE PTR [rdx+rbp], 2
  00029	74 49		 je	 SHORT $LN1@readdecesc
; Line 388
  0002b	8d 46 fa	 lea	 eax, DWORD PTR [rsi-6]
; Line 389
  0002e	48 8b cb	 mov	 rcx, rbx
  00031	8d 04 86	 lea	 eax, DWORD PTR [rsi+rax*4]
  00034	8d 34 42	 lea	 esi, DWORD PTR [rdx+rax*2]
  00037	e8 00 00 00 00	 call	 save
  0003c	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00040	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00043	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00047	48 89 01	 mov	 QWORD PTR [rcx], rax
  0004a	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0004e	48 85 d2	 test	 rdx, rdx
  00051	74 11		 je	 SHORT $LN6@readdecesc
  00053	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00057	48 ff c0	 inc	 rax
  0005a	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  0005e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00062	eb 07		 jmp	 SHORT $LN7@readdecesc
$LN6@readdecesc:
  00064	e8 00 00 00 00	 call	 luaZ_fill
  00069	8b d0		 mov	 edx, eax
$LN7@readdecesc:
  0006b	ff c7		 inc	 edi
  0006d	89 13		 mov	 DWORD PTR [rbx], edx
  0006f	83 ff 03	 cmp	 edi, 3
  00072	7c ae		 jl	 SHORT $LL3@readdecesc
$LN1@readdecesc:
; Line 391
  00074	81 fe ff 00 00
	00		 cmp	 esi, 255		; 000000ffH
  0007a	7e 37		 jle	 SHORT $LN9@readdecesc
  0007c	8b 13		 mov	 edx, DWORD PTR [rbx]
  0007e	83 fa ff	 cmp	 edx, -1
  00081	74 5b		 je	 SHORT $LN8@readdecesc
  00083	48 8b cb	 mov	 rcx, rbx
  00086	e8 00 00 00 00	 call	 save
  0008b	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0008f	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00092	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00096	48 89 01	 mov	 QWORD PTR [rcx], rax
  00099	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0009d	48 85 d2	 test	 rdx, rdx
  000a0	74 33		 je	 SHORT $LN36@readdecesc
  000a2	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000a6	48 ff c0	 inc	 rax
  000a9	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  000ad	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000b1	eb 29		 jmp	 SHORT $LN13@readdecesc
$LN9@readdecesc:
; Line 392
  000b3	48 8b 53 48	 mov	 rdx, QWORD PTR [rbx+72]
; Line 394
  000b7	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000bc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c1	48 63 cf	 movsxd	 rcx, edi
  000c4	8b c6		 mov	 eax, esi
  000c6	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000cb	48 29 4a 08	 sub	 QWORD PTR [rdx+8], rcx
  000cf	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d3	5f		 pop	 rdi
  000d4	c3		 ret	 0
$LN36@readdecesc:
; Line 391
  000d5	e8 00 00 00 00	 call	 luaZ_fill
  000da	8b d0		 mov	 edx, eax
$LN13@readdecesc:
  000dc	89 13		 mov	 DWORD PTR [rbx], edx
$LN8@readdecesc:
  000de	44 8b 4b 04	 mov	 r9d, DWORD PTR [rbx+4]
  000e2	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  000e6	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@FGOMBPHF@decimal?5escape?5too?5large?$AA@
  000f1	e8 00 00 00 00	 call	 luaG_addinfo
  000f6	33 d2		 xor	 edx, edx
  000f8	48 8b cb	 mov	 rcx, rbx
  000fb	48 8b f8	 mov	 rdi, rax
  000fe	e8 00 00 00 00	 call	 save
  00103	4c 8b 43 48	 mov	 r8, QWORD PTR [rbx+72]
  00107	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0010b	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
  00115	e8 00 00 00 00	 call	 luaO_pushfstring
  0011a	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0011e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
  00125	4c 8b c8	 mov	 r9, rax
  00128	4c 8b c7	 mov	 r8, rdi
  0012b	e8 00 00 00 00	 call	 luaO_pushfstring
  00130	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00134	ba 03 00 00 00	 mov	 edx, 3
  00139	e8 00 00 00 00	 call	 luaD_throw
  0013e	cc		 int	 3
$LN35@readdecesc:
readdecesc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT utf8esc
_TEXT	SEGMENT
buff$ = 32
__$ArrayPad$ = 40
ls$ = 64
utf8esc	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 376
  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 44 24 28	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00019	48 8b f1	 mov	 rsi, rcx
; Line 378
  0001c	e8 00 00 00 00	 call	 readutf8esc
  00021	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buff$[rsp]
  00026	8b d0		 mov	 edx, eax
  00028	e8 00 00 00 00	 call	 luaO_utf8esc
; Line 379
  0002d	48 63 f8	 movsxd	 rdi, eax
  00030	85 c0		 test	 eax, eax
  00032	7e 29		 jle	 SHORT $LN1@utf8esc
  00034	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00039	48 8d 5c 24 28	 lea	 rbx, QWORD PTR buff$[rsp+8]
  0003e	48 2b df	 sub	 rbx, rdi
$LL3@utf8esc:
; Line 380
  00041	0f be 13	 movsx	 edx, BYTE PTR [rbx]
  00044	48 8b ce	 mov	 rcx, rsi
  00047	e8 00 00 00 00	 call	 save
  0004c	48 ff cf	 dec	 rdi
  0004f	48 8d 5b 01	 lea	 rbx, QWORD PTR [rbx+1]
  00053	48 85 ff	 test	 rdi, rdi
  00056	7f e9		 jg	 SHORT $LL3@utf8esc
  00058	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
$LN1@utf8esc:
; Line 381
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00062	48 33 cc	 xor	 rcx, rsp
  00065	e8 00 00 00 00	 call	 __security_check_cookie
  0006a	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0006f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
utf8esc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT readutf8esc
_TEXT	SEGMENT
ls$ = 48
readutf8esc PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 358
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 361
  0001a	8b 11		 mov	 edx, DWORD PTR [rcx]
  0001c	48 8b d9	 mov	 rbx, rcx
  0001f	be 04 00 00 00	 mov	 esi, 4
  00024	e8 00 00 00 00	 call	 save
  00029	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0002d	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00030	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00034	48 89 01	 mov	 QWORD PTR [rcx], rax
  00037	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0003b	48 85 d2	 test	 rdx, rdx
  0003e	74 12		 je	 SHORT $LN5@readutf8es
  00040	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00044	48 ff c0	 inc	 rax
  00047	44 0f b6 40 ff	 movzx	 r8d, BYTE PTR [rax-1]
  0004c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00050	eb 08		 jmp	 SHORT $LN6@readutf8es
$LN5@readutf8es:
  00052	e8 00 00 00 00	 call	 luaZ_fill
  00057	44 8b c0	 mov	 r8d, eax
$LN6@readutf8es:
; Line 362
  0005a	33 ed		 xor	 ebp, ebp
  0005c	41 83 f8 7b	 cmp	 r8d, 123		; 0000007bH
  00060	44 89 03	 mov	 DWORD PTR [rbx], r8d
  00063	8b d5		 mov	 edx, ebp
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@LCIHADNN@missing?5?8?$HL?8?$AA@
  0006c	48 8b cb	 mov	 rcx, rbx
  0006f	0f 94 c2	 sete	 dl
  00072	e8 00 00 00 00	 call	 esccheck
; Line 363
  00077	48 8b cb	 mov	 rcx, rbx
  0007a	e8 00 00 00 00	 call	 gethexa
  0007f	4c 8d 35 01 00
	00 00		 lea	 r14, OFFSET FLAT:luai_ctype_+1
  00086	8b f8		 mov	 edi, eax
  00088	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@readutf8es:
; Line 364
  00090	8b 13		 mov	 edx, DWORD PTR [rbx]
  00092	48 8b cb	 mov	 rcx, rbx
  00095	e8 00 00 00 00	 call	 save
  0009a	48 8b 53 40	 mov	 rdx, QWORD PTR [rbx+64]
  0009e	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  000a1	49 8d 48 ff	 lea	 rcx, QWORD PTR [r8-1]
  000a5	48 89 0a	 mov	 QWORD PTR [rdx], rcx
  000a8	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000ac	4d 85 c0	 test	 r8, r8
  000af	74 11		 je	 SHORT $LN7@readutf8es
  000b1	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000b5	48 ff c0	 inc	 rax
  000b8	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  000bc	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000c0	eb 07		 jmp	 SHORT $LN8@readutf8es
$LN7@readutf8es:
  000c2	e8 00 00 00 00	 call	 luaZ_fill
  000c7	8b d0		 mov	 edx, eax
$LN8@readutf8es:
  000c9	48 63 ca	 movsxd	 rcx, edx
  000cc	89 13		 mov	 DWORD PTR [rbx], edx
  000ce	42 f6 04 31 10	 test	 BYTE PTR [rcx+r14], 16
  000d3	74 56		 je	 SHORT $LN1@readutf8es
; Line 366
  000d5	8b ca		 mov	 ecx, edx
  000d7	ff c6		 inc	 esi
  000d9	e8 00 00 00 00	 call	 luaO_hexavalue
  000de	c1 e7 04	 shl	 edi, 4
  000e1	03 c7		 add	 eax, edi
  000e3	8b f8		 mov	 edi, eax
; Line 367
  000e5	3d ff ff 10 00	 cmp	 eax, 1114111		; 0010ffffH
  000ea	76 a4		 jbe	 SHORT $LL2@readutf8es
  000ec	8b 13		 mov	 edx, DWORD PTR [rbx]
  000ee	83 fa ff	 cmp	 edx, -1
  000f1	0f 84 ae 00 00
	00		 je	 $LN11@readutf8es
  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	e8 00 00 00 00	 call	 save
  000ff	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00103	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00106	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  0010a	48 89 01	 mov	 QWORD PTR [rcx], rax
  0010d	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00111	48 85 d2	 test	 rdx, rdx
  00114	0f 84 82 00 00
	00		 je	 $LN39@readutf8es
  0011a	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0011e	48 ff c0	 inc	 rax
  00121	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00125	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00129	eb 78		 jmp	 SHORT $LN16@readutf8es
$LN1@readutf8es:
; Line 369
  0012b	83 fa 7d	 cmp	 edx, 125		; 0000007dH
  0012e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@LGAKHPGP@missing?5?8?$HN?8?$AA@
  00135	48 8b cb	 mov	 rcx, rbx
  00138	40 0f 94 c5	 sete	 bpl
  0013c	8b d5		 mov	 edx, ebp
  0013e	e8 00 00 00 00	 call	 esccheck
; Line 370
  00143	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00147	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0014a	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  0014e	48 89 01	 mov	 QWORD PTR [rcx], rax
  00151	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00155	48 85 d2	 test	 rdx, rdx
  00158	74 11		 je	 SHORT $LN9@readutf8es
  0015a	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0015e	48 ff c0	 inc	 rax
  00161	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00165	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00169	eb 07		 jmp	 SHORT $LN10@readutf8es
$LN9@readutf8es:
  0016b	e8 00 00 00 00	 call	 luaZ_fill
  00170	8b d0		 mov	 edx, eax
$LN10@readutf8es:
; Line 371
  00172	48 8b 4b 48	 mov	 rcx, QWORD PTR [rbx+72]
; Line 373
  00176	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0017b	48 63 c6	 movsxd	 rax, esi
  0017e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00183	89 13		 mov	 DWORD PTR [rbx], edx
  00185	48 29 41 08	 sub	 QWORD PTR [rcx+8], rax
  00189	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0018e	8b c7		 mov	 eax, edi
  00190	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00195	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00199	41 5e		 pop	 r14
  0019b	c3		 ret	 0
$LN39@readutf8es:
; Line 367
  0019c	e8 00 00 00 00	 call	 luaZ_fill
  001a1	8b d0		 mov	 edx, eax
$LN16@readutf8es:
  001a3	89 13		 mov	 DWORD PTR [rbx], edx
$LN11@readutf8es:
  001a5	44 8b 4b 04	 mov	 r9d, DWORD PTR [rbx+4]
  001a9	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  001ad	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@INJLHCPD@UTF?98?5value?5too?5large?$AA@
  001b8	e8 00 00 00 00	 call	 luaG_addinfo
  001bd	33 d2		 xor	 edx, edx
  001bf	48 8b cb	 mov	 rcx, rbx
  001c2	48 8b f8	 mov	 rdi, rax
  001c5	e8 00 00 00 00	 call	 save
  001ca	4c 8b 43 48	 mov	 r8, QWORD PTR [rbx+72]
  001ce	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001d2	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
  001dc	e8 00 00 00 00	 call	 luaO_pushfstring
  001e1	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
  001ec	4c 8b c8	 mov	 r9, rax
  001ef	4c 8b c7	 mov	 r8, rdi
  001f2	e8 00 00 00 00	 call	 luaO_pushfstring
  001f7	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001fb	ba 03 00 00 00	 mov	 edx, 3
  00200	e8 00 00 00 00	 call	 luaD_throw
  00205	cc		 int	 3
$LN38@readutf8es:
readutf8esc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT readhexaesc
_TEXT	SEGMENT
ls$ = 48
readhexaesc PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 350
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx
; Line 351
  0000d	e8 00 00 00 00	 call	 gethexa
; Line 352
  00012	48 8b cf	 mov	 rcx, rdi
  00015	8b d8		 mov	 ebx, eax
  00017	e8 00 00 00 00	 call	 gethexa
; Line 353
  0001c	48 8b 4f 48	 mov	 rcx, QWORD PTR [rdi+72]
  00020	c1 e3 04	 shl	 ebx, 4
  00023	03 c3		 add	 eax, ebx
  00025	48 83 41 08 fe	 add	 QWORD PTR [rcx+8], -2
; Line 355
  0002a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
readhexaesc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gethexa
_TEXT	SEGMENT
ls$ = 48
gethexa	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 343
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 344
  00006	8b 11		 mov	 edx, DWORD PTR [rcx]
  00008	48 8b d9	 mov	 rbx, rcx
  0000b	e8 00 00 00 00	 call	 save
  00010	48 8b 53 40	 mov	 rdx, QWORD PTR [rbx+64]
  00014	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00017	49 8d 40 ff	 lea	 rax, QWORD PTR [r8-1]
  0001b	48 89 02	 mov	 QWORD PTR [rdx], rax
  0001e	4d 85 c0	 test	 r8, r8
  00021	74 15		 je	 SHORT $LN3@gethexa
  00023	48 8b 53 40	 mov	 rdx, QWORD PTR [rbx+64]
  00027	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0002b	48 ff c0	 inc	 rax
  0002e	0f b6 48 ff	 movzx	 ecx, BYTE PTR [rax-1]
  00032	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax
  00036	eb 0b		 jmp	 SHORT $LN4@gethexa
$LN3@gethexa:
  00038	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0003c	e8 00 00 00 00	 call	 luaZ_fill
  00041	8b c8		 mov	 ecx, eax
$LN4@gethexa:
  00043	89 0b		 mov	 DWORD PTR [rbx], ecx
; Line 345
  00045	48 63 c1	 movsxd	 rax, ecx
  00048	48 8d 0d 01 00
	00 00		 lea	 rcx, OFFSET FLAT:luai_ctype_+1
  0004f	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00053	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BL@HIOFDBBP@hexadecimal?5digit?5expected?$AA@
  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	83 e2 10	 and	 edx, 16
  00060	e8 00 00 00 00	 call	 esccheck
; Line 346
  00065	8b 0b		 mov	 ecx, DWORD PTR [rbx]
; Line 347
  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5b		 pop	 rbx
; Line 346
  0006c	e9 00 00 00 00	 jmp	 luaO_hexavalue
gethexa	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT esccheck
_TEXT	SEGMENT
ls$ = 48
c$ = 56
msg$ = 64
esccheck PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 335
  00000	85 d2		 test	 edx, edx
  00002	75 44		 jne	 SHORT $LN24@esccheck
  00004	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 336
  0000e	8b 11		 mov	 edx, DWORD PTR [rcx]
  00010	49 8b d8	 mov	 rbx, r8
  00013	48 8b f9	 mov	 rdi, rcx
  00016	83 fa ff	 cmp	 edx, -1
  00019	74 37		 je	 SHORT $LN1@esccheck
; Line 337
  0001b	e8 00 00 00 00	 call	 save
  00020	48 8b 57 40	 mov	 rdx, QWORD PTR [rdi+64]
  00024	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00027	49 8d 40 ff	 lea	 rax, QWORD PTR [r8-1]
  0002b	48 89 02	 mov	 QWORD PTR [rdx], rax
  0002e	48 8b 4f 40	 mov	 rcx, QWORD PTR [rdi+64]
  00032	4d 85 c0	 test	 r8, r8
  00035	74 12		 je	 SHORT $LN25@esccheck
  00037	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0003b	48 ff c0	 inc	 rax
  0003e	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00042	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00046	eb 08		 jmp	 SHORT $LN6@esccheck
$LN24@esccheck:
; Line 340
  00048	c3		 ret	 0
$LN25@esccheck:
; Line 337
  00049	e8 00 00 00 00	 call	 luaZ_fill
  0004e	8b d0		 mov	 edx, eax
$LN6@esccheck:
  00050	89 17		 mov	 DWORD PTR [rdi], edx
$LN1@esccheck:
; Line 338
  00052	44 8b 4f 04	 mov	 r9d, DWORD PTR [rdi+4]
  00056	4c 8b 47 60	 mov	 r8, QWORD PTR [rdi+96]
  0005a	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  0005e	48 8b d3	 mov	 rdx, rbx
  00061	e8 00 00 00 00	 call	 luaG_addinfo
  00066	33 d2		 xor	 edx, edx
  00068	48 8b cf	 mov	 rcx, rdi
  0006b	48 8b d8	 mov	 rbx, rax
  0006e	e8 00 00 00 00	 call	 save
  00073	4c 8b 47 48	 mov	 r8, QWORD PTR [rdi+72]
  00077	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  0007b	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
  00085	e8 00 00 00 00	 call	 luaO_pushfstring
  0008a	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
  00095	4c 8b c8	 mov	 r9, rax
  00098	4c 8b c3	 mov	 r8, rbx
  0009b	e8 00 00 00 00	 call	 luaO_pushfstring
  000a0	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  000a4	ba 03 00 00 00	 mov	 edx, 3
  000a9	e8 00 00 00 00	 call	 luaD_throw
  000ae	cc		 int	 3
$LN23@esccheck:
esccheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT read_long_string
_TEXT	SEGMENT
ls$ = 48
seminfo$ = 56
sep$ = 64
read_long_string PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 295
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 296
  00014	8b 69 04	 mov	 ebp, DWORD PTR [rcx+4]
  00017	48 8b fa	 mov	 rdi, rdx
; Line 297
  0001a	8b 11		 mov	 edx, DWORD PTR [rcx]
  0001c	41 8b f0	 mov	 esi, r8d
  0001f	48 8b d9	 mov	 rbx, rcx
  00022	e8 00 00 00 00	 call	 save
  00027	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0002b	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0002e	49 8d 41 ff	 lea	 rax, QWORD PTR [r9-1]
  00032	48 89 01	 mov	 QWORD PTR [rcx], rax
  00035	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00039	4d 85 c9	 test	 r9, r9
  0003c	74 11		 je	 SHORT $LN18@read_long_
  0003e	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00042	48 ff c0	 inc	 rax
  00045	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00049	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0004d	eb 07		 jmp	 SHORT $LN19@read_long_
$LN18@read_long_:
  0004f	e8 00 00 00 00	 call	 luaZ_fill
  00054	8b d0		 mov	 edx, eax
$LN19@read_long_:
  00056	89 13		 mov	 DWORD PTR [rbx], edx
; Line 298
  00058	83 fa 0a	 cmp	 edx, 10
  0005b	74 05		 je	 SHORT $LN14@read_long_
  0005d	83 fa 0d	 cmp	 edx, 13
  00060	75 08		 jne	 SHORT $LN42@read_long_
$LN14@read_long_:
; Line 299
  00062	48 8b cb	 mov	 rcx, rbx
  00065	e8 00 00 00 00	 call	 inclinenumber
$LN42@read_long_:
; Line 301
  0006a	8b 03		 mov	 eax, DWORD PTR [rbx]
  0006c	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  00071	83 f8 ff	 cmp	 eax, -1
  00074	0f 84 1b 01 00
	00		 je	 $LN48@read_long_
  0007a	45 33 f6	 xor	 r14d, r14d
  0007d	0f 1f 00	 npad	 3
$LL13@read_long_:
  00080	83 f8 0a	 cmp	 eax, 10
  00083	0f 84 90 00 00
	00		 je	 $LN6@read_long_
  00089	83 f8 0d	 cmp	 eax, 13
  0008c	0f 84 87 00 00
	00		 je	 $LN6@read_long_
  00092	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  00095	74 44		 je	 SHORT $LN8@read_long_
; Line 323
  00097	48 85 ff	 test	 rdi, rdi
  0009a	74 0a		 je	 SHORT $LN3@read_long_
  0009c	8b 13		 mov	 edx, DWORD PTR [rbx]
  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	e8 00 00 00 00	 call	 save
$LN3@read_long_:
  000a6	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000aa	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000ad	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  000b1	48 89 01	 mov	 QWORD PTR [rcx], rax
  000b4	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000b8	48 85 d2	 test	 rdx, rdx
  000bb	74 13		 je	 SHORT $LN24@read_long_
  000bd	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000c1	48 ff c0	 inc	 rax
  000c4	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  000c8	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
; Line 324
  000cc	89 13		 mov	 DWORD PTR [rbx], edx
  000ce	eb 6b		 jmp	 SHORT $LN5@read_long_
$LN24@read_long_:
  000d0	e8 00 00 00 00	 call	 luaZ_fill
  000d5	8b d0		 mov	 edx, eax
  000d7	89 03		 mov	 DWORD PTR [rbx], eax
  000d9	eb 60		 jmp	 SHORT $LN5@read_long_
$LN8@read_long_:
; Line 310
  000db	48 8b cb	 mov	 rcx, rbx
  000de	e8 00 00 00 00	 call	 skip_sep
  000e3	3b c6		 cmp	 eax, esi
  000e5	75 54		 jne	 SHORT $LN5@read_long_
; Line 311
  000e7	8b 13		 mov	 edx, DWORD PTR [rbx]
  000e9	48 8b cb	 mov	 rcx, rbx
  000ec	e8 00 00 00 00	 call	 save
  000f1	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000f5	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000f8	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  000fc	48 89 01	 mov	 QWORD PTR [rcx], rax
  000ff	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00103	48 85 d2	 test	 rdx, rdx
  00106	74 40		 je	 SHORT $LN20@read_long_
  00108	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0010c	48 ff c0	 inc	 rax
  0010f	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00113	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00117	eb 36		 jmp	 SHORT $LN21@read_long_
$LN6@read_long_:
; Line 317
  00119	ba 0a 00 00 00	 mov	 edx, 10
  0011e	48 8b cb	 mov	 rcx, rbx
  00121	e8 00 00 00 00	 call	 save
; Line 318
  00126	48 8b cb	 mov	 rcx, rbx
  00129	e8 00 00 00 00	 call	 inclinenumber
; Line 319
  0012e	48 85 ff	 test	 rdi, rdi
  00131	75 08		 jne	 SHORT $LN5@read_long_
  00133	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  00137	4c 89 70 08	 mov	 QWORD PTR [rax+8], r14
$LN5@read_long_:
; Line 301
  0013b	8b 03		 mov	 eax, DWORD PTR [rbx]
  0013d	83 f8 ff	 cmp	 eax, -1
  00140	0f 85 3a ff ff
	ff		 jne	 $LL13@read_long_
  00146	eb 4d		 jmp	 SHORT $LN48@read_long_
$LN20@read_long_:
; Line 311
  00148	e8 00 00 00 00	 call	 luaZ_fill
  0014d	8b d0		 mov	 edx, eax
$LN21@read_long_:
  0014f	89 13		 mov	 DWORD PTR [rbx], edx
$endloop$50:
; Line 328
  00151	48 85 ff	 test	 rdi, rdi
  00154	74 25		 je	 SHORT $LN1@read_long_
; Line 330
  00156	4c 8b 4b 48	 mov	 r9, QWORD PTR [rbx+72]
  0015a	8d 56 02	 lea	 edx, DWORD PTR [rsi+2]
  0015d	4d 8b 41 08	 mov	 r8, QWORD PTR [r9+8]
  00161	8d 04 12	 lea	 eax, DWORD PTR [rdx+rdx]
  00164	48 63 d2	 movsxd	 rdx, edx
  00167	49 03 11	 add	 rdx, QWORD PTR [r9]
  0016a	48 63 c8	 movsxd	 rcx, eax
  0016d	4c 2b c1	 sub	 r8, rcx
  00170	48 8b cb	 mov	 rcx, rbx
  00173	e8 00 00 00 00	 call	 luaX_newstring
  00178	48 89 07	 mov	 QWORD PTR [rdi], rax
$LN1@read_long_:
; Line 331
  0017b	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]
  00180	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00185	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0018a	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0018f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00193	5f		 pop	 rdi
  00194	c3		 ret	 0
$LN48@read_long_:
; Line 305
  00195	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00199	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06ICGJLFIM@string?$AA@
  001a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07GJGNEJFD@comment?$AA@
  001a7	48 85 ff	 test	 rdi, rdi
  001aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@CPAHLMBA@unfinished?5long?5?$CFs?5?$CIstarting?5at?5@
  001b1	44 8b cd	 mov	 r9d, ebp
  001b4	4c 0f 45 c0	 cmovne	 r8, rax
  001b8	e8 00 00 00 00	 call	 luaO_pushfstring
; Line 306
  001bd	44 8b 4b 04	 mov	 r9d, DWORD PTR [rbx+4]
  001c1	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  001c5	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001c9	48 8b d0	 mov	 rdx, rax
  001cc	e8 00 00 00 00	 call	 luaG_addinfo
  001d1	4c 8b 0d 00 01
	00 00		 mov	 r9, QWORD PTR luaX_tokens+256
  001d8	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
  001e3	4c 8b c0	 mov	 r8, rax
  001e6	e8 00 00 00 00	 call	 luaO_pushfstring
  001eb	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001ef	ba 03 00 00 00	 mov	 edx, 3
  001f4	e8 00 00 00 00	 call	 luaD_throw
  001f9	cc		 int	 3
$LN47@read_long_:
read_long_string ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT skip_sep
_TEXT	SEGMENT
ls$ = 64
skip_sep PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 282
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 57		 push	 r15
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 284
  00009	44 8b 39	 mov	 r15d, DWORD PTR [rcx]
  0000c	48 8b d9	 mov	 rbx, rcx
  0000f	33 ed		 xor	 ebp, ebp
; Line 286
  00011	41 8b d7	 mov	 edx, r15d
  00014	e8 00 00 00 00	 call	 save
  00019	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0001d	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00020	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00024	48 89 01	 mov	 QWORD PTR [rcx], rax
  00027	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0002b	48 85 d2	 test	 rdx, rdx
  0002e	74 11		 je	 SHORT $LN5@skip_sep
  00030	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00034	48 ff c0	 inc	 rax
  00037	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  0003b	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0003f	eb 07		 jmp	 SHORT $LN6@skip_sep
$LN5@skip_sep:
  00041	e8 00 00 00 00	 call	 luaZ_fill
  00046	8b d0		 mov	 edx, eax
$LN6@skip_sep:
  00048	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0004d	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00052	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  00057	4c 89 74 24 58	 mov	 QWORD PTR [rsp+88], r14
  0005c	89 13		 mov	 DWORD PTR [rbx], edx
; Line 287
  0005e	83 fa 3d	 cmp	 edx, 61			; 0000003dH
  00061	0f 85 8f 00 00
	00		 jne	 $LN37@skip_sep
  00067	49 bc ff ff ff
	ff ff ff ff 3f	 mov	 r12, 4611686018427387903 ; 3fffffffffffffffH
$LL2@skip_sep:
; Line 288
  00071	48 8b 73 48	 mov	 rsi, QWORD PTR [rbx+72]
  00075	44 8b 33	 mov	 r14d, DWORD PTR [rbx]
  00078	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  0007c	4c 8b 46 10	 mov	 r8, QWORD PTR [rsi+16]
  00080	48 ff c0	 inc	 rax
  00083	49 3b c0	 cmp	 rax, r8
  00086	76 23		 jbe	 SHORT $LN12@skip_sep
  00088	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0008c	4d 3b c4	 cmp	 r8, r12
  0008f	0f 83 8c 00 00
	00		 jae	 $LN39@skip_sep
  00095	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00098	4b 8d 3c 00	 lea	 rdi, QWORD PTR [r8+r8]
  0009c	4c 8b cf	 mov	 r9, rdi
  0009f	e8 00 00 00 00	 call	 luaM_realloc_
  000a4	48 89 7e 10	 mov	 QWORD PTR [rsi+16], rdi
  000a8	48 89 06	 mov	 QWORD PTR [rsi], rax
$LN12@skip_sep:
  000ab	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  000af	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  000b2	44 88 34 01	 mov	 BYTE PTR [rcx+rax], r14b
  000b6	48 ff 46 08	 inc	 QWORD PTR [rsi+8]
  000ba	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000be	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000c1	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  000c5	48 89 01	 mov	 QWORD PTR [rcx], rax
  000c8	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000cc	48 85 d2	 test	 rdx, rdx
  000cf	74 11		 je	 SHORT $LN7@skip_sep
  000d1	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000d5	48 ff c0	 inc	 rax
  000d8	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  000dc	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000e0	eb 07		 jmp	 SHORT $LN8@skip_sep
$LN7@skip_sep:
  000e2	e8 00 00 00 00	 call	 luaZ_fill
  000e7	8b d0		 mov	 edx, eax
$LN8@skip_sep:
; Line 289
  000e9	ff c5		 inc	 ebp
  000eb	89 13		 mov	 DWORD PTR [rbx], edx
  000ed	83 fa 3d	 cmp	 edx, 61			; 0000003dH
  000f0	0f 84 7b ff ff
	ff		 je	 $LL2@skip_sep
$LN37@skip_sep:
; Line 291
  000f6	44 39 3b	 cmp	 DWORD PTR [rbx], r15d
  000f9	74 07		 je	 SHORT $LN10@skip_sep
  000fb	83 c8 ff	 or	 eax, -1
  000fe	2b c5		 sub	 eax, ebp
  00100	8b e8		 mov	 ebp, eax
$LN10@skip_sep:
  00102	4c 8b 74 24 58	 mov	 r14, QWORD PTR [rsp+88]
  00107	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
  0010c	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00111	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00116	8b c5		 mov	 eax, ebp
; Line 292
  00118	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0011c	41 5f		 pop	 r15
  0011e	5d		 pop	 rbp
  0011f	5b		 pop	 rbx
  00120	c3		 ret	 0
$LN39@skip_sep:
; Line 288
  00121	44 8b 4b 04	 mov	 r9d, DWORD PTR [rbx+4]
  00125	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  00129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
  00130	e8 00 00 00 00	 call	 luaG_addinfo
  00135	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00139	ba 03 00 00 00	 mov	 edx, 3
  0013e	e8 00 00 00 00	 call	 luaD_throw
  00143	cc		 int	 3
$LN38@skip_sep:
skip_sep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT read_numeral
_TEXT	SEGMENT
obj$ = 32
ls$ = 64
seminfo$ = 72
read_numeral PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 244
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 247
  00015	8b 39		 mov	 edi, DWORD PTR [rcx]
  00017	4c 8b f2	 mov	 r14, rdx
  0001a	48 8b d9	 mov	 rbx, rcx
; Line 249
  0001d	8b d7		 mov	 edx, edi
  0001f	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:??_C@_02GOGFPGCE@Ee?$AA@
  00026	e8 00 00 00 00	 call	 save
  0002b	4c 8b 43 40	 mov	 r8, QWORD PTR [rbx+64]
  0002f	4d 8b 08	 mov	 r9, QWORD PTR [r8]
  00032	49 8d 41 ff	 lea	 rax, QWORD PTR [r9-1]
  00036	49 89 00	 mov	 QWORD PTR [r8], rax
  00039	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0003d	4d 85 c9	 test	 r9, r9
  00040	74 11		 je	 SHORT $LN14@read_numer
  00042	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00046	48 ff c0	 inc	 rax
  00049	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  0004d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00051	eb 07		 jmp	 SHORT $LN15@read_numer
$LN14@read_numer:
  00053	e8 00 00 00 00	 call	 luaZ_fill
  00058	8b d0		 mov	 edx, eax
$LN15@read_numer:
  0005a	89 13		 mov	 DWORD PTR [rbx], edx
; Line 250
  0005c	83 ff 30	 cmp	 edi, 48			; 00000030H
  0005f	75 4b		 jne	 SHORT $LN72@read_numer
  00061	8d 4a a8	 lea	 ecx, DWORD PTR [rdx-88]
  00064	f7 c1 df ff ff
	ff		 test	 ecx, -33		; ffffffdfH
  0006a	75 40		 jne	 SHORT $LN72@read_numer
  0006c	48 8b cb	 mov	 rcx, rbx
  0006f	e8 00 00 00 00	 call	 save
  00074	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00078	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0007b	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  0007f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00082	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00086	48 85 d2	 test	 rdx, rdx
  00089	74 11		 je	 SHORT $LN25@read_numer
  0008b	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0008f	48 ff c0	 inc	 rax
  00092	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00096	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0009a	eb 07		 jmp	 SHORT $LN26@read_numer
$LN25@read_numer:
  0009c	e8 00 00 00 00	 call	 luaZ_fill
  000a1	8b d0		 mov	 edx, eax
$LN26@read_numer:
  000a3	89 13		 mov	 DWORD PTR [rbx], edx
; Line 251
  000a5	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:??_C@_02EDDNHBKL@Pp?$AA@
$LN72@read_numer:
  000ac	48 8d 3d 01 00
	00 00		 lea	 rdi, OFFSET FLAT:luai_ctype_+1
$LL10@read_numer:
; Line 253
  000b3	8b 13		 mov	 edx, DWORD PTR [rbx]
  000b5	0f be 06	 movsx	 eax, BYTE PTR [rsi]
  000b8	3b d0		 cmp	 edx, eax
  000ba	74 08		 je	 SHORT $LN28@read_numer
  000bc	0f be 46 01	 movsx	 eax, BYTE PTR [rsi+1]
  000c0	3b d0		 cmp	 edx, eax
  000c2	75 7d		 jne	 SHORT $LN34@read_numer
$LN28@read_numer:
  000c4	48 8b cb	 mov	 rcx, rbx
  000c7	e8 00 00 00 00	 call	 save
  000cc	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000d0	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000d3	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  000d7	48 89 01	 mov	 QWORD PTR [rcx], rax
  000da	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000de	48 85 d2	 test	 rdx, rdx
  000e1	74 11		 je	 SHORT $LN32@read_numer
  000e3	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000e7	48 ff c0	 inc	 rax
  000ea	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  000ee	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000f2	eb 07		 jmp	 SHORT $LN33@read_numer
$LN32@read_numer:
  000f4	e8 00 00 00 00	 call	 luaZ_fill
  000f9	8b d0		 mov	 edx, eax
$LN33@read_numer:
  000fb	8d 4a d5	 lea	 ecx, DWORD PTR [rdx-43]
  000fe	89 13		 mov	 DWORD PTR [rbx], edx
  00100	f7 c1 fd ff ff
	ff		 test	 ecx, -3			; fffffffdH
  00106	75 39		 jne	 SHORT $LN34@read_numer
; Line 254
  00108	48 8b cb	 mov	 rcx, rbx
  0010b	e8 00 00 00 00	 call	 save
  00110	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00114	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00117	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  0011b	48 89 01	 mov	 QWORD PTR [rcx], rax
  0011e	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00122	48 85 d2	 test	 rdx, rdx
  00125	74 11		 je	 SHORT $LN39@read_numer
  00127	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0012b	48 ff c0	 inc	 rax
  0012e	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00132	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00136	eb 07		 jmp	 SHORT $LN40@read_numer
$LN39@read_numer:
  00138	e8 00 00 00 00	 call	 luaZ_fill
  0013d	8b d0		 mov	 edx, eax
$LN40@read_numer:
  0013f	89 13		 mov	 DWORD PTR [rbx], edx
$LN34@read_numer:
; Line 255
  00141	48 63 0b	 movsxd	 rcx, DWORD PTR [rbx]
  00144	f6 04 39 10	 test	 BYTE PTR [rcx+rdi], 16
  00148	74 07		 je	 SHORT $LN7@read_numer
; Line 256
  0014a	8b d1		 mov	 edx, ecx
  0014c	48 8b cb	 mov	 rcx, rbx
  0014f	eb 0d		 jmp	 SHORT $LN74@read_numer
$LN7@read_numer:
; Line 257
  00151	83 f9 2e	 cmp	 ecx, 46			; 0000002eH
; Line 258
  00154	48 8b cb	 mov	 rcx, rbx
  00157	75 45		 jne	 SHORT $LN5@read_numer
  00159	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
$LN74@read_numer:
  0015e	e8 00 00 00 00	 call	 save
  00163	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00167	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0016a	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  0016e	48 89 01	 mov	 QWORD PTR [rcx], rax
  00171	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00175	48 85 d2	 test	 rdx, rdx
  00178	74 16		 je	 SHORT $LN18@read_numer
  0017a	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0017e	48 ff c0	 inc	 rax
  00181	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00185	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00189	89 13		 mov	 DWORD PTR [rbx], edx
; Line 260
  0018b	e9 23 ff ff ff	 jmp	 $LL10@read_numer
$LN18@read_numer:
; Line 258
  00190	e8 00 00 00 00	 call	 luaZ_fill
  00195	8b d0		 mov	 edx, eax
  00197	89 03		 mov	 DWORD PTR [rbx], eax
; Line 260
  00199	e9 15 ff ff ff	 jmp	 $LL10@read_numer
$LN5@read_numer:
; Line 261
  0019e	33 d2		 xor	 edx, edx
  001a0	e8 00 00 00 00	 call	 save
; Line 262
  001a5	44 0f b6 43 70	 movzx	 r8d, BYTE PTR [rbx+112]
  001aa	41 80 f8 2e	 cmp	 r8b, 46			; 0000002eH
  001ae	74 22		 je	 SHORT $LN49@read_numer
  001b0	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  001b4	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  001b8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001bb	48 85 c9	 test	 rcx, rcx
  001be	74 12		 je	 SHORT $LN49@read_numer
$LL43@read_numer:
  001c0	48 ff c9	 dec	 rcx
  001c3	80 3c 0a 2e	 cmp	 BYTE PTR [rdx+rcx], 46	; 0000002eH
  001c7	75 04		 jne	 SHORT $LN41@read_numer
  001c9	44 88 04 0a	 mov	 BYTE PTR [rdx+rcx], r8b
$LN41@read_numer:
  001cd	48 85 c9	 test	 rcx, rcx
  001d0	75 ee		 jne	 SHORT $LL43@read_numer
$LN49@read_numer:
; Line 263
  001d2	48 8b 4b 48	 mov	 rcx, QWORD PTR [rbx+72]
  001d6	48 8d 54 24 20	 lea	 rdx, QWORD PTR obj$[rsp]
  001db	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001de	e8 00 00 00 00	 call	 luaO_str2num
  001e3	48 85 c0	 test	 rax, rax
  001e6	75 0d		 jne	 SHORT $LN3@read_numer
; Line 264
  001e8	48 8d 54 24 20	 lea	 rdx, QWORD PTR obj$[rsp]
  001ed	48 8b cb	 mov	 rcx, rbx
  001f0	e8 00 00 00 00	 call	 trydecpoint
$LN3@read_numer:
; Line 265
  001f5	83 7c 24 28 13	 cmp	 DWORD PTR obj$[rsp+8], 19
  001fa	75 0f		 jne	 SHORT $LN2@read_numer
; Line 266
  001fc	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
  00201	49 89 06	 mov	 QWORD PTR [r14], rax
; Line 267
  00204	b8 23 01 00 00	 mov	 eax, 291		; 00000123H
  00209	eb 10		 jmp	 SHORT $LN1@read_numer
$LN2@read_numer:
; Line 271
  0020b	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR obj$[rsp]
; Line 272
  00211	b8 22 01 00 00	 mov	 eax, 290		; 00000122H
  00216	f2 41 0f 11 06	 movsdx	 QWORD PTR [r14], xmm0
$LN1@read_numer:
; Line 274
  0021b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00220	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00225	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  0022a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0022e	41 5e		 pop	 r14
  00230	c3		 ret	 0
read_numeral ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT trydecpoint
_TEXT	SEGMENT
ls$ = 48
o$ = 56
trydecpoint PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 227
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 228
  0000f	0f b6 59 70	 movzx	 ebx, BYTE PTR [rcx+112]
  00013	48 8b f2	 mov	 rsi, rdx
  00016	48 8b f9	 mov	 rdi, rcx
; Line 229
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_localeconv
  0001f	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00022	41 0f b6 08	 movzx	 ecx, BYTE PTR [r8]
  00026	88 4f 70	 mov	 BYTE PTR [rdi+112], cl
; Line 230
  00029	3a d9		 cmp	 bl, cl
  0002b	74 25		 je	 SHORT $LN38@trydecpoin
  0002d	48 8b 47 48	 mov	 rax, QWORD PTR [rdi+72]
  00031	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00035	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00038	48 85 d2	 test	 rdx, rdx
  0003b	74 15		 je	 SHORT $LN38@trydecpoin
  0003d	0f 1f 00	 npad	 3
$LL6@trydecpoin:
  00040	48 ff ca	 dec	 rdx
  00043	41 38 1c 10	 cmp	 BYTE PTR [r8+rdx], bl
  00047	75 04		 jne	 SHORT $LN4@trydecpoin
  00049	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
$LN4@trydecpoin:
  0004d	48 85 d2	 test	 rdx, rdx
  00050	75 ee		 jne	 SHORT $LL6@trydecpoin
$LN38@trydecpoin:
; Line 231
  00052	48 8b 4f 48	 mov	 rcx, QWORD PTR [rdi+72]
  00056	48 8b d6	 mov	 rdx, rsi
  00059	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005c	e8 00 00 00 00	 call	 luaO_str2num
  00061	48 85 c0	 test	 rax, rax
  00064	75 2f		 jne	 SHORT $LN1@trydecpoin
; Line 233
  00066	0f b6 57 70	 movzx	 edx, BYTE PTR [rdi+112]
  0006a	80 fa 2e	 cmp	 dl, 46			; 0000002eH
  0006d	74 36		 je	 SHORT $LN45@trydecpoin
  0006f	48 8b 4f 48	 mov	 rcx, QWORD PTR [rdi+72]
  00073	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00077	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  0007a	48 85 c0	 test	 rax, rax
  0007d	74 26		 je	 SHORT $LN45@trydecpoin
  0007f	90		 npad	 1
$LL12@trydecpoin:
  00080	48 ff c8	 dec	 rax
  00083	41 38 14 00	 cmp	 BYTE PTR [r8+rax], dl
  00087	75 05		 jne	 SHORT $LN10@trydecpoin
  00089	41 c6 04 00 2e	 mov	 BYTE PTR [r8+rax], 46	; 0000002eH
$LN10@trydecpoin:
  0008e	48 85 c0	 test	 rax, rax
  00091	75 ed		 jne	 SHORT $LL12@trydecpoin
  00093	eb 10		 jmp	 SHORT $LN45@trydecpoin
$LN1@trydecpoin:
; Line 236
  00095	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
$LN45@trydecpoin:
; Line 234
  000a5	44 8b 4f 04	 mov	 r9d, DWORD PTR [rdi+4]
  000a9	4c 8b 47 60	 mov	 r8, QWORD PTR [rdi+96]
  000ad	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@CFMNENCE@malformed?5number?$AA@
  000b8	e8 00 00 00 00	 call	 luaG_addinfo
  000bd	33 d2		 xor	 edx, edx
  000bf	48 8b cf	 mov	 rcx, rdi
  000c2	48 8b d8	 mov	 rbx, rax
  000c5	e8 00 00 00 00	 call	 save
  000ca	4c 8b 47 48	 mov	 r8, QWORD PTR [rdi+72]
  000ce	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  000d2	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
  000dc	e8 00 00 00 00	 call	 luaO_pushfstring
  000e1	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
  000ec	4c 8b c8	 mov	 r9, rax
  000ef	4c 8b c3	 mov	 r8, rbx
  000f2	e8 00 00 00 00	 call	 luaO_pushfstring
  000f7	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  000fb	ba 03 00 00 00	 mov	 edx, 3
  00100	e8 00 00 00 00	 call	 luaD_throw
  00105	cc		 int	 3
$LN44@trydecpoin:
trydecpoint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT buffreplace
_TEXT	SEGMENT
ls$ = 8
from$ = 16
to$ = 24
buffreplace PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 214
  00000	41 3a d0	 cmp	 dl, r8b
  00003	74 22		 je	 SHORT $LN8@buffreplac
; Line 215
  00005	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00009	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
; Line 216
  0000d	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
; Line 217
  00010	48 85 c0	 test	 rax, rax
  00013	74 12		 je	 SHORT $LN8@buffreplac
$LL3@buffreplac:
  00015	48 ff c8	 dec	 rax
; Line 218
  00018	41 38 14 01	 cmp	 BYTE PTR [r9+rax], dl
  0001c	75 04		 jne	 SHORT $LN1@buffreplac
  0001e	45 88 04 01	 mov	 BYTE PTR [r9+rax], r8b
$LN1@buffreplac:
; Line 217
  00022	48 85 c0	 test	 rax, rax
  00025	75 ee		 jne	 SHORT $LL3@buffreplac
$LN8@buffreplac:
; Line 220
  00027	c3		 ret	 0
buffreplace ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT check_next2
_TEXT	SEGMENT
ls$ = 48
set$ = 56
check_next2 PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 200
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	4c 8b c2	 mov	 r8, rdx
; Line 202
  00009	8b 11		 mov	 edx, DWORD PTR [rcx]
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	41 0f be 00	 movsx	 eax, BYTE PTR [r8]
  00012	3b d0		 cmp	 edx, eax
  00014	74 11		 je	 SHORT $LN2@check_next
  00016	41 0f be 40 01	 movsx	 eax, BYTE PTR [r8+1]
  0001b	3b d0		 cmp	 edx, eax
  0001d	74 08		 je	 SHORT $LN2@check_next
; Line 206
  0001f	33 c0		 xor	 eax, eax
; Line 207
  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
$LN2@check_next:
; Line 203
  00027	e8 00 00 00 00	 call	 save
  0002c	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00030	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00033	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00037	48 89 01	 mov	 QWORD PTR [rcx], rax
  0003a	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0003e	48 85 d2	 test	 rdx, rdx
  00041	74 1c		 je	 SHORT $LN6@check_next
  00043	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00047	48 ff c0	 inc	 rax
  0004a	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  0004e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
; Line 204
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	89 13		 mov	 DWORD PTR [rbx], edx
; Line 207
  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5b		 pop	 rbx
  0005e	c3		 ret	 0
$LN6@check_next:
; Line 203
  0005f	e8 00 00 00 00	 call	 luaZ_fill
  00064	8b d0		 mov	 edx, eax
  00066	89 03		 mov	 DWORD PTR [rbx], eax
; Line 204
  00068	b8 01 00 00 00	 mov	 eax, 1
; Line 207
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5b		 pop	 rbx
  00072	c3		 ret	 0
check_next2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT check_next1
_TEXT	SEGMENT
ls$ = 48
c$ = 56
check_next1 PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 187
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 188
  00009	39 11		 cmp	 DWORD PTR [rcx], edx
  0000b	75 4b		 jne	 SHORT $LN2@check_next
; Line 189
  0000d	48 8b 51 40	 mov	 rdx, QWORD PTR [rcx+64]
  00011	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00014	49 8d 40 ff	 lea	 rax, QWORD PTR [r8-1]
  00018	48 89 02	 mov	 QWORD PTR [rdx], rax
  0001b	4d 85 c0	 test	 r8, r8
  0001e	74 20		 je	 SHORT $LN5@check_next
  00020	48 8b 51 40	 mov	 rdx, QWORD PTR [rcx+64]
  00024	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  00028	48 ff c0	 inc	 rax
  0002b	0f b6 48 ff	 movzx	 ecx, BYTE PTR [rax-1]
  0002f	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax
; Line 190
  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	89 0b		 mov	 DWORD PTR [rbx], ecx
; Line 193
  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5b		 pop	 rbx
  0003f	c3		 ret	 0
$LN5@check_next:
; Line 189
  00040	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00044	e8 00 00 00 00	 call	 luaZ_fill
  00049	8b c8		 mov	 ecx, eax
  0004b	89 03		 mov	 DWORD PTR [rbx], eax
; Line 190
  0004d	b8 01 00 00 00	 mov	 eax, 1
; Line 193
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5b		 pop	 rbx
  00057	c3		 ret	 0
$LN2@check_next:
; Line 192
  00058	33 c0		 xor	 eax, eax
; Line 193
  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5b		 pop	 rbx
  0005f	c3		 ret	 0
check_next1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT inclinenumber
_TEXT	SEGMENT
ls$ = 48
inclinenumber PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 151
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 154
  0000a	48 8b 51 40	 mov	 rdx, QWORD PTR [rcx+64]
  0000e	8b 39		 mov	 edi, DWORD PTR [rcx]
  00010	48 8b d9	 mov	 rbx, rcx
  00013	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00016	49 8d 40 ff	 lea	 rax, QWORD PTR [r8-1]
  0001a	48 89 02	 mov	 QWORD PTR [rdx], rax
  0001d	4d 85 c0	 test	 r8, r8
  00020	74 15		 je	 SHORT $LN6@inclinenum
  00022	48 8b 51 40	 mov	 rdx, QWORD PTR [rcx+64]
  00026	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0002a	48 ff c0	 inc	 rax
  0002d	0f b6 48 ff	 movzx	 ecx, BYTE PTR [rax-1]
  00031	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax
  00035	eb 0b		 jmp	 SHORT $LN7@inclinenum
$LN6@inclinenum:
  00037	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  0003b	e8 00 00 00 00	 call	 luaZ_fill
  00040	8b c8		 mov	 ecx, eax
$LN7@inclinenum:
  00042	89 0b		 mov	 DWORD PTR [rbx], ecx
; Line 155
  00044	83 f9 0a	 cmp	 ecx, 10
  00047	74 05		 je	 SHORT $LN2@inclinenum
  00049	83 f9 0d	 cmp	 ecx, 13
  0004c	75 35		 jne	 SHORT $LN3@inclinenum
$LN2@inclinenum:
  0004e	3b cf		 cmp	 ecx, edi
  00050	74 31		 je	 SHORT $LN3@inclinenum
; Line 156
  00052	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00056	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00059	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  0005d	48 89 01	 mov	 QWORD PTR [rcx], rax
  00060	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00064	48 85 d2	 test	 rdx, rdx
  00067	74 11		 je	 SHORT $LN8@inclinenum
  00069	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0006d	48 ff c0	 inc	 rax
  00070	0f b6 50 ff	 movzx	 edx, BYTE PTR [rax-1]
  00074	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00078	eb 07		 jmp	 SHORT $LN9@inclinenum
$LN8@inclinenum:
  0007a	e8 00 00 00 00	 call	 luaZ_fill
  0007f	8b d0		 mov	 edx, eax
$LN9@inclinenum:
  00081	89 13		 mov	 DWORD PTR [rbx], edx
$LN3@inclinenum:
; Line 157
  00083	ff 43 04	 inc	 DWORD PTR [rbx+4]
  00086	44 8b 4b 04	 mov	 r9d, DWORD PTR [rbx+4]
  0008a	41 81 f9 ff ff
	ff 7f		 cmp	 r9d, 2147483647		; 7fffffffH
  00091	7d 0b		 jge	 SHORT $LN31@inclinenum
; Line 159
  00093	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00098	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
$LN31@inclinenum:
; Line 158
  0009e	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  000a2	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@LAKGPFF@chunk?5has?5too?5many?5lines?$AA@
  000ad	e8 00 00 00 00	 call	 luaG_addinfo
  000b2	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000b6	ba 03 00 00 00	 mov	 edx, 3
  000bb	e8 00 00 00 00	 call	 luaD_throw
  000c0	cc		 int	 3
$LN30@inclinenum:
inclinenumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT txtToken
_TEXT	SEGMENT
ls$ = 48
token$ = 56
txtToken PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 97
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 98
  00006	8d 82 de fe ff
	ff		 lea	 eax, DWORD PTR [rdx-290]
  0000c	48 8b d9	 mov	 rbx, rcx
  0000f	83 f8 03	 cmp	 eax, 3
  00012	77 10		 ja	 SHORT $LN1@txtToken
; Line 101
  00014	33 d2		 xor	 edx, edx
  00016	e8 00 00 00 00	 call	 save
; Line 102
  0001b	4c 8b 43 48	 mov	 r8, QWORD PTR [rbx+72]
  0001f	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  00022	eb 3d		 jmp	 SHORT $LN20@txtToken
$LN1@txtToken:
; Line 104
  00024	81 fa 01 01 00
	00		 cmp	 edx, 257		; 00000101H
  0002a	7d 18		 jge	 SHORT $LN17@txtToken
  0002c	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00030	44 8b c2	 mov	 r8d, edx
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04ENIEGDOG@?8?$CFc?8?$AA@
; Line 106
  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5b		 pop	 rbx
; Line 104
  0003f	e9 00 00 00 00	 jmp	 luaO_pushfstring
$LN17@txtToken:
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:luaX_tokens
  0004b	48 63 c2	 movsxd	 rax, edx
  0004e	48 8b 84 c1 f8
	f7 ff ff	 mov	 rax, QWORD PTR [rcx+rax*8-2056]
  00056	81 fa 21 01 00
	00		 cmp	 edx, 289		; 00000121H
  0005c	7d 18		 jge	 SHORT $LN15@txtToken
  0005e	4c 8b c0	 mov	 r8, rax
$LN20@txtToken:
  00061	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
; Line 106
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5b		 pop	 rbx
; Line 104
  00071	e9 00 00 00 00	 jmp	 luaO_pushfstring
$LN15@txtToken:
; Line 106
  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	5b		 pop	 rbx
  0007b	c3		 ret	 0
txtToken ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT save
_TEXT	SEGMENT
ls$ = 48
c$ = 56
save	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 57
  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 58
  0000f	48 8b 79 48	 mov	 rdi, QWORD PTR [rcx+72]
  00013	8b ea		 mov	 ebp, edx
  00015	48 8b f1	 mov	 rsi, rcx
; Line 59
  00018	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  0001c	4c 8b 47 10	 mov	 r8, QWORD PTR [rdi+16]
  00020	48 ff c0	 inc	 rax
  00023	49 3b c0	 cmp	 rax, r8
  00026	76 33		 jbe	 SHORT $LN2@save
; Line 61
  00028	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH
  00032	4c 3b c0	 cmp	 r8, rax
  00035	73 43		 jae	 SHORT $LN22@save
; Line 64
  00037	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  0003a	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0003e	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00043	4b 8d 1c 00	 lea	 rbx, QWORD PTR [r8+r8]
  00047	4c 8b cb	 mov	 r9, rbx
  0004a	e8 00 00 00 00	 call	 luaM_realloc_
  0004f	48 89 5f 10	 mov	 QWORD PTR [rdi+16], rbx
  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 89 07	 mov	 QWORD PTR [rdi], rax
$LN2@save:
; Line 66
  0005b	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  0005f	48 8b 07	 mov	 rax, QWORD PTR [rdi]
; Line 67
  00062	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00067	40 88 2c 01	 mov	 BYTE PTR [rcx+rax], bpl
  0006b	48 ff 47 08	 inc	 QWORD PTR [rdi+8]
  0006f	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00074	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00078	5f		 pop	 rdi
  00079	c3		 ret	 0
$LN22@save:
; Line 62
  0007a	44 8b 49 04	 mov	 r9d, DWORD PTR [rcx+4]
  0007e	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00082	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JNKOFINI@lexical?5element?5too?5long?$AA@
  0008d	e8 00 00 00 00	 call	 luaG_addinfo
  00092	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  00096	ba 03 00 00 00	 mov	 edx, 3
  0009b	e8 00 00 00 00	 call	 luaD_throw
  000a0	cc		 int	 3
$LN21@save:
save	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lexerror
_TEXT	SEGMENT
ls$ = 48
msg$ = 56
token$ = 64
lexerror PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 109
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 110
  0000f	44 8b 49 04	 mov	 r9d, DWORD PTR [rcx+4]
  00013	41 8b f8	 mov	 edi, r8d
  00016	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  0001a	48 8b d9	 mov	 rbx, rcx
  0001d	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00021	e8 00 00 00 00	 call	 luaG_addinfo
  00026	48 8b f0	 mov	 rsi, rax
; Line 111
  00029	85 ff		 test	 edi, edi
  0002b	74 20		 je	 SHORT $LN1@lexerror
; Line 112
  0002d	8b d7		 mov	 edx, edi
  0002f	48 8b cb	 mov	 rcx, rbx
  00032	e8 00 00 00 00	 call	 txtToken
  00037	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DKMPGOCF@?$CFs?5near?5?$CFs?$AA@
  00042	4c 8b c8	 mov	 r9, rax
  00045	4c 8b c6	 mov	 r8, rsi
  00048	e8 00 00 00 00	 call	 luaO_pushfstring
$LN1@lexerror:
; Line 113
  0004d	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00051	ba 03 00 00 00	 mov	 edx, 3
  00056	e8 00 00 00 00	 call	 luaD_throw
  0005b	cc		 int	 3
$LN4@lexerror:
lexerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaX_token2str
_TEXT	SEGMENT
ls$ = 8
token$ = 16
luaX_token2str PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 83
  00000	81 fa 01 01 00
	00		 cmp	 edx, 257		; 00000101H
  00006	7d 13		 jge	 SHORT $LN4@luaX_token
; Line 85
  00008	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0000c	44 8b c2	 mov	 r8d, edx
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04ENIEGDOG@?8?$CFc?8?$AA@
  00016	e9 00 00 00 00	 jmp	 luaO_pushfstring
$LN4@luaX_token:
; Line 88
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:luaX_tokens
  00022	48 63 c2	 movsxd	 rax, edx
  00025	49 8b 84 c0 f8
	f7 ff ff	 mov	 rax, QWORD PTR [r8+rax*8-2056]
; Line 89
  0002d	81 fa 21 01 00
	00		 cmp	 edx, 289		; 00000121H
  00033	7d 13		 jge	 SHORT $LN2@luaX_token
; Line 90
  00035	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
  00040	4c 8b c0	 mov	 r8, rax
  00043	e9 00 00 00 00	 jmp	 luaO_pushfstring
$LN2@luaX_token:
; Line 94
  00048	c3		 ret	 0
luaX_token2str ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaX_syntaxerror
_TEXT	SEGMENT
ls$ = 48
msg$ = 56
luaX_syntaxerror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 117
$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 118
  00004	44 8b 41 10	 mov	 r8d, DWORD PTR [rcx+16]
  00008	e8 00 00 00 00	 call	 lexerror
  0000d	cc		 int	 3
$LN3@luaX_synta:
luaX_syntaxerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaX_lookahead
_TEXT	SEGMENT
ls$ = 48
luaX_lookahead PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 591
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 593
  00006	48 8d 51 28	 lea	 rdx, QWORD PTR [rcx+40]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	e8 00 00 00 00	 call	 llex
  00012	89 43 20	 mov	 DWORD PTR [rbx+32], eax
; Line 595
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5b		 pop	 rbx
  0001a	c3		 ret	 0
luaX_lookahead ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaX_next
_TEXT	SEGMENT
ls$ = 48
luaX_next PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 580
$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 582
  00006	81 79 20 21 01
	00 00		 cmp	 DWORD PTR [rcx+32], 289	; 00000121H
  0000d	8b 41 04	 mov	 eax, DWORD PTR [rcx+4]
  00010	48 8b d9	 mov	 rbx, rcx
  00013	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00016	74 15		 je	 SHORT $LN2@luaX_next
; Line 583
  00018	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [rcx+32]
; Line 584
  0001c	c7 41 20 21 01
	00 00		 mov	 DWORD PTR [rcx+32], 289	; 00000121H
  00023	0f 11 41 10	 movups	 XMMWORD PTR [rcx+16], xmm0
; Line 588
  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
$LN2@luaX_next:
; Line 587
  0002d	48 8d 51 18	 lea	 rdx, QWORD PTR [rcx+24]
  00031	e8 00 00 00 00	 call	 llex
  00036	89 43 10	 mov	 DWORD PTR [rbx+16], eax
; Line 588
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5b		 pop	 rbx
  0003e	c3		 ret	 0
luaX_next ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaX_newstring
_TEXT	SEGMENT
ls$ = 48
str$ = 56
l$ = 64
luaX_newstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 127
$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 128
  0000f	48 8b 79 38	 mov	 rdi, QWORD PTR [rcx+56]
  00013	48 8b d9	 mov	 rbx, rcx
; Line 130
  00016	48 8b cf	 mov	 rcx, rdi
  00019	e8 00 00 00 00	 call	 luaS_newlstr
; Line 131
  0001e	4c 8b 47 10	 mov	 r8, QWORD PTR [rdi+16]
; Line 132
  00022	48 8b cf	 mov	 rcx, rdi
  00025	49 8d 50 10	 lea	 rdx, QWORD PTR [r8+16]
  00029	48 8b f0	 mov	 rsi, rax
  0002c	48 89 57 10	 mov	 QWORD PTR [rdi+16], rdx
  00030	49 89 00	 mov	 QWORD PTR [r8], rax
  00033	0f b6 50 08	 movzx	 edx, BYTE PTR [rax+8]
  00037	83 ca 40	 or	 edx, 64			; 00000040H
  0003a	41 89 50 08	 mov	 DWORD PTR [r8+8], edx
  0003e	4c 8b 47 10	 mov	 r8, QWORD PTR [rdi+16]
  00042	48 8b 53 50	 mov	 rdx, QWORD PTR [rbx+80]
  00046	49 83 e8 10	 sub	 r8, 16
  0004a	e8 00 00 00 00	 call	 luaH_set
; Line 133
  0004f	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00053	75 25		 jne	 SHORT $LN3@luaX_newst
; Line 136
  00055	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1
  0005b	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1
; Line 137
  00062	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  00066	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0006b	7e 08		 jle	 SHORT $LN6@luaX_newst
  0006d	48 8b cf	 mov	 rcx, rdi
  00070	e8 00 00 00 00	 call	 luaC_step
$LN6@luaX_newst:
; Line 143
  00075	48 8b c6	 mov	 rax, rsi
; Line 139
  00078	eb 04		 jmp	 SHORT $LN7@luaX_newst
$LN3@luaX_newst:
; Line 140
  0007a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
$LN7@luaX_newst:
; Line 142
  0007e	48 83 47 10 f0	 add	 QWORD PTR [rdi+16], -16
; Line 144
  00083	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00088	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
luaX_newstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaX_setinput
_TEXT	SEGMENT
L$ = 48
ls$ = 56
z$ = 64
source$ = 72
firstchar$ = 80
luaX_setinput PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 163
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 167
  00006	8b 44 24 50	 mov	 eax, DWORD PTR firstchar$[rsp]
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	33 d2		 xor	 edx, edx
; Line 169
  0000f	4c 89 43 40	 mov	 QWORD PTR [rbx+64], r8
; Line 174
  00013	44 8d 42 04	 lea	 r8d, QWORD PTR [rdx+4]
  00017	89 53 10	 mov	 DWORD PTR [rbx+16], edx
  0001a	48 89 53 30	 mov	 QWORD PTR [rbx+48], rdx
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LJLBKCOP@_ENV?$AA@
  00025	c6 43 70 2e	 mov	 BYTE PTR [rbx+112], 46	; 0000002eH
  00029	48 89 4b 38	 mov	 QWORD PTR [rbx+56], rcx
  0002d	89 03		 mov	 DWORD PTR [rbx], eax
  0002f	c7 43 20 21 01
	00 00		 mov	 DWORD PTR [rbx+32], 289	; 00000121H
  00036	c7 43 04 01 00
	00 00		 mov	 DWORD PTR [rbx+4], 1
  0003d	c7 43 08 01 00
	00 00		 mov	 DWORD PTR [rbx+8], 1
  00044	4c 89 4b 60	 mov	 QWORD PTR [rbx+96], r9
  00048	e8 00 00 00 00	 call	 luaS_newlstr
; Line 175
  0004d	48 8b 53 48	 mov	 rdx, QWORD PTR [rbx+72]
  00051	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00055	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
  00059	4c 8b 42 10	 mov	 r8, QWORD PTR [rdx+16]
  0005d	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00060	41 b9 20 00 00
	00		 mov	 r9d, 32			; 00000020H
  00066	e8 00 00 00 00	 call	 luaM_realloc_
  0006b	48 8b 4b 48	 mov	 rcx, QWORD PTR [rbx+72]
  0006f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00072	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  00076	48 c7 40 10 20
	00 00 00	 mov	 QWORD PTR [rax+16], 32	; 00000020H
; Line 176
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	5b		 pop	 rbx
  00083	c3		 ret	 0
luaX_setinput ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaX_init
_TEXT	SEGMENT
L$ = 48
luaX_init PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\llex.c
; Line 70
$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 72
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LJLBKCOP@_ENV?$AA@
  0001b	41 b8 04 00 00
	00		 mov	 r8d, 4
  00021	48 8b e9	 mov	 rbp, rcx
  00024	e8 00 00 00 00	 call	 luaS_newlstr
; Line 73
  00029	48 8b cd	 mov	 rcx, rbp
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	e8 00 00 00 00	 call	 luaC_fix
; Line 74
  00034	33 db		 xor	 ebx, ebx
  00036	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:luaX_tokens
  0003d	0f 1f 00	 npad	 3
$LL3@luaX_init:
; Line 75
  00040	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00043	48 8b cd	 mov	 rcx, rbp
  00046	e8 00 00 00 00	 call	 luaS_new
; Line 76
  0004b	48 8b cd	 mov	 rcx, rbp
  0004e	48 8b d0	 mov	 rdx, rax
  00051	48 8b f8	 mov	 rdi, rax
  00054	e8 00 00 00 00	 call	 luaC_fix
; Line 77
  00059	8d 4b 01	 lea	 ecx, DWORD PTR [rbx+1]
  0005c	ff c3		 inc	 ebx
  0005e	48 8d 76 08	 lea	 rsi, QWORD PTR [rsi+8]
  00062	88 4f 0a	 mov	 BYTE PTR [rdi+10], cl
  00065	83 fb 16	 cmp	 ebx, 22
  00068	7c d6		 jl	 SHORT $LL3@luaX_init
; Line 79
  0006a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006f	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00074	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5f		 pop	 rdi
  0007e	c3		 ret	 0
luaX_init ENDP
_TEXT	ENDS
END
