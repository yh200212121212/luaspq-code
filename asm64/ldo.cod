; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	lua_yieldk
PUBLIC	lua_resume
PUBLIC	lua_isyieldable
PUBLIC	luaD_protectedparser
PUBLIC	luaD_hook
PUBLIC	luaD_precall
PUBLIC	luaD_call
PUBLIC	luaD_callnoyield
PUBLIC	luaD_pcall
PUBLIC	luaD_poscall
PUBLIC	luaD_reallocstack
PUBLIC	luaD_growstack
PUBLIC	luaD_shrinkstack
PUBLIC	luaD_inctop
PUBLIC	luaD_throw
PUBLIC	luaD_rawrunprotected
PUBLIC	??_C@_0BI@KGOCJOGJ@error?5in?5error?5handling?$AA@ ; `string'
PUBLIC	??_C@_0P@EODJGPIM@stack?5overflow?$AA@		; `string'
PUBLIC	??_C@_04OMFAIDPG@call?$AA@			; `string'
PUBLIC	??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@	; `string'
PUBLIC	??_C@_0CG@NAAHDPPN@cannot?5resume?5non?9suspended?5coro@ ; `string'
PUBLIC	??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@ ; `string'
PUBLIC	??_C@_0CK@PNAEIJLG@attempt?5to?5yield?5across?5a?5C?9call@ ; `string'
PUBLIC	??_C@_0CK@CHKMHBBM@attempt?5to?5yield?5from?5outside?5a?5@ ; `string'
PUBLIC	??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@ ; `string'
PUBLIC	??_C@_06FNFBAEBE@binary?$AA@			; `string'
PUBLIC	??_C@_04CIMGMMMG@text?$AA@			; `string'
EXTRN	__imp_longjmp:PROC
EXTRN	__imp_abort:PROC
EXTRN	__imp_strchr:PROC
EXTRN	luaO_pushfstring:PROC
EXTRN	luaT_gettmbyobj:PROC
EXTRN	luaM_realloc_:PROC
EXTRN	luaZ_fill:PROC
EXTRN	luaE_extendCI:PROC
EXTRN	luaE_freeCI:PROC
EXTRN	luaE_shrinkCI:PROC
EXTRN	luaG_typeerror:PROC
EXTRN	luaG_runerror:PROC
EXTRN	luaF_initupvals:PROC
EXTRN	luaF_close:PROC
EXTRN	luaC_step:PROC
EXTRN	luaY_parser:PROC
EXTRN	luaS_newlstr:PROC
EXTRN	luaS_new:PROC
EXTRN	luaU_undump:PROC
EXTRN	luaV_finishOp:PROC
EXTRN	luaV_execute:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	_setjmp:PROC
EXTRN	luaO_nilobject_:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$lua_yieldk DD imagerel $LN14
	DD	imagerel $LN14+140
	DD	imagerel $unwind$lua_yieldk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lua_resume DD imagerel $LN16
	DD	imagerel $LN16+217
	DD	imagerel $unwind$lua_resume
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_protectedparser DD imagerel $LN7
	DD	imagerel $LN7+369
	DD	imagerel $unwind$luaD_protectedparser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_hook DD imagerel $LN7
	DD	imagerel $LN7+66
	DD	imagerel $unwind$luaD_hook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$luaD_hook DD imagerel $LN7+66
	DD	imagerel $LN7+229
	DD	imagerel $chain$2$luaD_hook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$luaD_hook DD imagerel $LN7+229
	DD	imagerel $LN7+255
	DD	imagerel $chain$3$luaD_hook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_precall DD imagerel $LN42
	DD	imagerel $LN42+137
	DD	imagerel $unwind$luaD_precall
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$luaD_precall DD imagerel $LN42+137
	DD	imagerel $LN42+288
	DD	imagerel $chain$2$luaD_precall
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$luaD_precall DD imagerel $LN42+288
	DD	imagerel $LN42+486
	DD	imagerel $chain$3$luaD_precall
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$luaD_precall DD imagerel $LN42+486
	DD	imagerel $LN42+589
	DD	imagerel $chain$4$luaD_precall
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$luaD_precall DD imagerel $LN42+589
	DD	imagerel $LN42+667
	DD	imagerel $chain$5$luaD_precall
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_call DD imagerel $LN15
	DD	imagerel $LN15+113
	DD	imagerel $unwind$luaD_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_callnoyield DD imagerel $LN4
	DD	imagerel $LN4+39
	DD	imagerel $unwind$luaD_callnoyield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_pcall DD imagerel $LN6
	DD	imagerel $LN6+181
	DD	imagerel $unwind$luaD_pcall
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_poscall DD imagerel $LN6
	DD	imagerel $LN6+148
	DD	imagerel $unwind$luaD_poscall
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_reallocstack DD imagerel $LN28
	DD	imagerel $LN28+321
	DD	imagerel $unwind$luaD_reallocstack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_growstack DD imagerel $LN13
	DD	imagerel $LN13+116
	DD	imagerel $unwind$luaD_growstack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_shrinkstack DD imagerel $LN19
	DD	imagerel $LN19+165
	DD	imagerel $unwind$luaD_shrinkstack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_inctop DD imagerel $LN7
	DD	imagerel $LN7+59
	DD	imagerel $unwind$luaD_inctop
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_throw DD imagerel $LN16
	DD	imagerel $LN16+176
	DD	imagerel $unwind$luaD_throw
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaD_rawrunprotected DD imagerel $LN5
	DD	imagerel $LN5+170
	DD	imagerel $unwind$luaD_rawrunprotected
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$seterrorobj DD imagerel seterrorobj
	DD	imagerel seterrorobj+151
	DD	imagerel $unwind$seterrorobj
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$callhook DD imagerel callhook
	DD	imagerel callhook+73
	DD	imagerel $unwind$callhook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$adjust_varargs DD imagerel adjust_varargs
	DD	imagerel adjust_varargs+169
	DD	imagerel $unwind$adjust_varargs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tryfuncTM DD imagerel tryfuncTM
	DD	imagerel tryfuncTM+125
	DD	imagerel $unwind$tryfuncTM
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$moveresults DD imagerel moveresults
	DD	imagerel moveresults+297
	DD	imagerel $unwind$moveresults
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stackerror DD imagerel stackerror
	DD	imagerel stackerror+60
	DD	imagerel $unwind$stackerror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$finishCcall DD imagerel finishCcall
	DD	imagerel finishCcall+114
	DD	imagerel $unwind$finishCcall
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unroll DD imagerel unroll
	DD	imagerel unroll+37
	DD	imagerel $unwind$unroll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$unroll DD imagerel unroll+37
	DD	imagerel unroll+295
	DD	imagerel $chain$3$unroll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$unroll DD imagerel unroll+295
	DD	imagerel unroll+303
	DD	imagerel $chain$4$unroll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$recover DD imagerel recover
	DD	imagerel recover+169
	DD	imagerel $unwind$recover
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$resume_error DD imagerel resume_error
	DD	imagerel resume_error+55
	DD	imagerel $unwind$resume_error
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$resume DD imagerel resume
	DD	imagerel resume+369
	DD	imagerel $unwind$resume
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$checkmode DD imagerel checkmode
	DD	imagerel checkmode+98
	DD	imagerel $unwind$checkmode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$f_parser DD imagerel f_parser
	DD	imagerel f_parser+287
	DD	imagerel $unwind$f_parser
pdata	ENDS
;	COMDAT ??_C@_04CIMGMMMG@text?$AA@
CONST	SEGMENT
??_C@_04CIMGMMMG@text?$AA@ DB 'text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNFBAEBE@binary?$AA@
CONST	SEGMENT
??_C@_06FNFBAEBE@binary?$AA@ DB 'binary', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@
CONST	SEGMENT
??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@ DB 'atte'
	DB	'mpt to load a %s chunk (mode is ''%s'')', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CHKMHBBM@attempt?5to?5yield?5from?5outside?5a?5@
CONST	SEGMENT
??_C@_0CK@CHKMHBBM@attempt?5to?5yield?5from?5outside?5a?5@ DB 'attempt to'
	DB	' yield from outside a coroutine', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PNAEIJLG@attempt?5to?5yield?5across?5a?5C?9call@
CONST	SEGMENT
??_C@_0CK@PNAEIJLG@attempt?5to?5yield?5across?5a?5C?9call@ DB 'attempt to'
	DB	' yield across a C-call boundary', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@
CONST	SEGMENT
??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@ DB 'cannot resume'
	DB	' dead coroutine', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NAAHDPPN@cannot?5resume?5non?9suspended?5coro@
CONST	SEGMENT
??_C@_0CG@NAAHDPPN@cannot?5resume?5non?9suspended?5coro@ DB 'cannot resum'
	DB	'e non-suspended coroutine', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@
CONST	SEGMENT
??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@ DB 'C stack overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OMFAIDPG@call?$AA@
CONST	SEGMENT
??_C@_04OMFAIDPG@call?$AA@ DB 'call', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EODJGPIM@stack?5overflow?$AA@
CONST	SEGMENT
??_C@_0P@EODJGPIM@stack?5overflow?$AA@ DB 'stack overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KGOCJOGJ@error?5in?5error?5handling?$AA@
CONST	SEGMENT
??_C@_0BI@KGOCJOGJ@error?5in?5error?5handling?$AA@ DB 'error in error han'
	DB	'dling', 00H					; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$f_parser DD 084a01H
	DD	08644aH
	DD	0a540fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checkmode DD 061401H
	DD	076414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$resume DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$resume_error DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$recover DD 084601H
	DD	067446H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$unroll DD 021H
	DD	imagerel unroll
	DD	imagerel unroll+37
	DD	imagerel $unwind$unroll
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$unroll DD 081421H
	DD	06f414H
	DD	0c740fH
	DD	0b640aH
	DD	0a5405H
	DD	imagerel unroll
	DD	imagerel unroll+37
	DD	imagerel $unwind$unroll
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unroll DD 030801H
	DD	0e0046208H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$finishCcall DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stackerror DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$moveresults DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tryfuncTM DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$adjust_varargs DD 081401H
	DD	047414H
	DD	03640fH
	DD	02540aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$callhook DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$seterrorobj DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_rawrunprotected DD 031b19H
	DD	02e0109H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	0160H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_throw DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_inctop DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_shrinkstack DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_growstack DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_reallocstack DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_poscall DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_pcall DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_callnoyield DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_call DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$luaD_precall DD 020021H
	DD	0be400H
	DD	imagerel $LN42
	DD	imagerel $LN42+137
	DD	imagerel $unwind$luaD_precall
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$luaD_precall DD 060021H
	DD	0cf400H
	DD	0be400H
	DD	0ac400H
	DD	imagerel $LN42
	DD	imagerel $LN42+137
	DD	imagerel $unwind$luaD_precall
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$luaD_precall DD 021H
	DD	imagerel $LN42
	DD	imagerel $LN42+137
	DD	imagerel $unwind$luaD_precall
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$luaD_precall DD 062b21H
	DD	0cf42bH
	DD	0be419H
	DD	0ac405H
	DD	imagerel $LN42
	DD	imagerel $LN42+137
	DD	imagerel $unwind$luaD_precall
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_precall DD 060b01H
	DD	0d007320bH
	DD	060047005H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$luaD_hook DD 021H
	DD	imagerel $LN7
	DD	imagerel $LN7+66
	DD	imagerel $unwind$luaD_hook
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$luaD_hook DD 061c21H
	DD	016f41cH
	DD	017e410H
	DD	0187404H
	DD	imagerel $LN7
	DD	imagerel $LN7+66
	DD	imagerel $unwind$luaD_hook
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_hook DD 041e19H
	DD	019010cH
	DD	030046005H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaD_protectedparser DD 0c1f01H
	DD	018641fH
	DD	017541fH
	DD	016341fH
	DD	0f018f21fH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lua_resume DD 040f01H
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lua_yieldk DD 010401H
	DD	04204H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT f_parser
_TEXT	SEGMENT
L$ = 64
ud$ = 72
f_parser PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 759
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 762
  0000f	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00012	48 8b da	 mov	 rbx, rdx
  00015	48 8b f9	 mov	 rdi, rcx
  00018	4d 8b 08	 mov	 r9, QWORD PTR [r8]
  0001b	49 8d 41 ff	 lea	 rax, QWORD PTR [r9-1]
  0001f	49 89 00	 mov	 QWORD PTR [r8], rax
  00022	4d 85 c9	 test	 r9, r9
  00025	74 14		 je	 SHORT $LN5@f_parser
  00027	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  0002a	49 8b 40 08	 mov	 rax, QWORD PTR [r8+8]
  0002e	48 ff c0	 inc	 rax
  00031	0f b6 68 ff	 movzx	 ebp, BYTE PTR [rax-1]
  00035	49 89 40 08	 mov	 QWORD PTR [r8+8], rax
  00039	eb 0a		 jmp	 SHORT $LN6@f_parser
$LN5@f_parser:
  0003b	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0003e	e8 00 00 00 00	 call	 luaZ_fill
  00043	8b e8		 mov	 ebp, eax
$LN6@f_parser:
; Line 764
  00045	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0004a	48 8b 73 50	 mov	 rsi, QWORD PTR [rbx+80]
  0004e	83 fd 1b	 cmp	 ebp, 27
  00051	75 27		 jne	 SHORT $LN2@f_parser
  00053	48 85 f6	 test	 rsi, rsi
  00056	74 11		 je	 SHORT $LN7@f_parser
  00058	8d 55 47	 lea	 edx, QWORD PTR [rbp+71]
  0005b	48 8b ce	 mov	 rcx, rsi
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00064	48 85 c0	 test	 rax, rax
  00067	74 68		 je	 SHORT $LN15@f_parser
$LN7@f_parser:
; Line 765
  00069	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  0006d	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00070	48 8b cf	 mov	 rcx, rdi
  00073	e8 00 00 00 00	 call	 luaU_undump
; Line 767
  00078	eb 38		 jmp	 SHORT $LN1@f_parser
$LN2@f_parser:
; Line 768
  0007a	48 85 f6	 test	 rsi, rsi
  0007d	74 13		 je	 SHORT $LN11@f_parser
  0007f	ba 74 00 00 00	 mov	 edx, 116		; 00000074H
  00084	48 8b ce	 mov	 rcx, rsi
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0008d	48 85 c0	 test	 rax, rax
  00090	74 66		 je	 SHORT $LN17@f_parser
$LN11@f_parser:
; Line 769
  00092	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00096	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00099	4c 8d 4b 20	 lea	 r9, QWORD PTR [rbx+32]
  0009d	4c 8d 43 08	 lea	 r8, QWORD PTR [rbx+8]
  000a1	48 8b cf	 mov	 rcx, rdi
  000a4	89 6c 24 28	 mov	 DWORD PTR [rsp+40], ebp
  000a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ad	e8 00 00 00 00	 call	 luaY_parser
$LN1@f_parser:
; Line 772
  000b2	48 8b d0	 mov	 rdx, rax
  000b5	48 8b cf	 mov	 rcx, rdi
  000b8	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
; Line 773
  000bd	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000c2	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000c7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cb	5f		 pop	 rdi
; Line 772
  000cc	e9 00 00 00 00	 jmp	 luaF_initupvals
$LN15@f_parser:
; Line 764
  000d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06FNFBAEBE@binary?$AA@
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@
  000df	4c 8b ce	 mov	 r9, rsi
  000e2	48 8b cf	 mov	 rcx, rdi
  000e5	e8 00 00 00 00	 call	 luaO_pushfstring
  000ea	ba 03 00 00 00	 mov	 edx, 3
  000ef	48 8b cf	 mov	 rcx, rdi
  000f2	e8 00 00 00 00	 call	 luaD_throw
  000f7	cc		 int	 3
$LN17@f_parser:
; Line 768
  000f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04CIMGMMMG@text?$AA@
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@
  00106	4c 8b ce	 mov	 r9, rsi
  00109	48 8b cf	 mov	 rcx, rdi
  0010c	e8 00 00 00 00	 call	 luaO_pushfstring
  00111	ba 03 00 00 00	 mov	 edx, 3
  00116	48 8b cf	 mov	 rcx, rdi
  00119	e8 00 00 00 00	 call	 luaD_throw
  0011e	cc		 int	 3
$LN14@f_parser:
f_parser ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT checkmode
_TEXT	SEGMENT
L$ = 48
mode$ = 56
x$ = 64
checkmode PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 751
  00000	48 85 d2	 test	 rdx, rdx
  00003	74 39		 je	 SHORT $LN5@checkmode
  00005	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  0000a	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 750
  00014	48 8b da	 mov	 rbx, rdx
; Line 751
  00017	41 0f be 10	 movsx	 edx, BYTE PTR [r8]
  0001b	48 8b f1	 mov	 rsi, rcx
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	49 8b f8	 mov	 rdi, r8
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0002a	48 85 c0	 test	 rax, rax
  0002d	74 10		 je	 SHORT $LN6@checkmode
; Line 756
  0002f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00034	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
$LN5@checkmode:
  0003e	c3		 ret	 0
$LN6@checkmode:
; Line 753
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@CHOBLPGK@attempt?5to?5load?5a?5?$CFs?5chunk?5?$CImode@
  00046	4c 8b cb	 mov	 r9, rbx
  00049	4c 8b c7	 mov	 r8, rdi
  0004c	48 8b ce	 mov	 rcx, rsi
  0004f	e8 00 00 00 00	 call	 luaO_pushfstring
; Line 754
  00054	ba 03 00 00 00	 mov	 edx, 3
  00059	48 8b ce	 mov	 rcx, rsi
  0005c	e8 00 00 00 00	 call	 luaD_throw
  00061	cc		 int	 3
$LN4@checkmode:
checkmode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT resume
_TEXT	SEGMENT
L$ = 48
ud$ = 56
resume	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 612
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 614
  0000f	4c 63 0a	 movsxd	 r9, DWORD PTR [rdx]
; Line 615
  00012	48 8b 79 10	 mov	 rdi, QWORD PTR [rcx+16]
; Line 616
  00016	48 8b 71 20	 mov	 rsi, QWORD PTR [rcx+32]
  0001a	49 8b c1	 mov	 rax, r9
  0001d	48 8b d9	 mov	 rbx, rcx
  00020	48 c1 e0 04	 shl	 rax, 4
  00024	48 2b f8	 sub	 rdi, rax
; Line 617
  00027	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  0002c	66 39 81 c6 00
	00 00		 cmp	 WORD PTR [rcx+198], ax
  00033	0f 83 ae 00 00
	00		 jae	 $LN21@resume
; Line 619
  00039	0f b6 41 0c	 movzx	 eax, BYTE PTR [rcx+12]
  0003d	84 c0		 test	 al, al
  0003f	75 35		 jne	 SHORT $LN9@resume
; Line 620
  00041	48 8d 41 60	 lea	 rax, QWORD PTR [rcx+96]
  00045	48 3b f0	 cmp	 rsi, rax
  00048	0f 85 c7 00 00
	00		 jne	 $LN23@resume
; Line 623
  0004e	48 8d 57 f0	 lea	 rdx, QWORD PTR [rdi-16]
  00052	41 83 c8 ff	 or	 r8d, -1
  00056	e8 00 00 00 00	 call	 luaD_precall
  0005b	85 c0		 test	 eax, eax
  0005d	75 78		 jne	 SHORT $LN4@resume
; Line 624
  0005f	48 8b cb	 mov	 rcx, rbx
; Line 646
  00062	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00067	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi
; Line 624
  00071	e9 00 00 00 00	 jmp	 luaV_execute
$LN9@resume:
; Line 626
  00076	3c 01		 cmp	 al, 1
  00078	0f 85 c5 00 00
	00		 jne	 $LN24@resume
; Line 629
  0007e	c6 41 0c 00	 mov	 BYTE PTR [rcx+12], 0
; Line 630
  00082	48 8b 46 38	 mov	 rax, QWORD PTR [rsi+56]
  00086	48 03 41 38	 add	 rax, QWORD PTR [rcx+56]
; Line 631
  0008a	f6 46 42 02	 test	 BYTE PTR [rsi+66], 2
  0008e	48 89 06	 mov	 QWORD PTR [rsi], rax
  00091	74 07		 je	 SHORT $LN3@resume
; Line 632
  00093	e8 00 00 00 00	 call	 luaV_execute
; Line 633
  00098	eb 33		 jmp	 SHORT $LN2@resume
$LN3@resume:
; Line 634
  0009a	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0009e	48 85 c0	 test	 rax, rax
  000a1	74 1c		 je	 SHORT $LN1@resume
; Line 636
  000a3	4c 8b 46 30	 mov	 r8, QWORD PTR [rsi+48]
  000a7	ba 01 00 00 00	 mov	 edx, 1
  000ac	ff d0		 call	 rax
; Line 639
  000ae	48 8b 7b 10	 mov	 rdi, QWORD PTR [rbx+16]
  000b2	4c 63 c8	 movsxd	 r9, eax
  000b5	49 8b c9	 mov	 rcx, r9
  000b8	48 c1 e1 04	 shl	 rcx, 4
  000bc	48 2b f9	 sub	 rdi, rcx
$LN1@resume:
; Line 641
  000bf	4c 8b c7	 mov	 r8, rdi
  000c2	48 8b d6	 mov	 rdx, rsi
  000c5	48 8b cb	 mov	 rcx, rbx
  000c8	e8 00 00 00 00	 call	 luaD_poscall
$LN2@resume:
; Line 643
  000cd	33 d2		 xor	 edx, edx
  000cf	48 8b cb	 mov	 rcx, rbx
  000d2	e8 00 00 00 00	 call	 unroll
$LN4@resume:
; Line 646
  000d7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000dc	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000e1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e5	5f		 pop	 rdi
  000e6	c3		 ret	 0
$LN21@resume:
; Line 618
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@
  000ee	48 89 79 10	 mov	 QWORD PTR [rcx+16], rdi
  000f2	e8 00 00 00 00	 call	 luaS_new
  000f7	83 ca ff	 or	 edx, -1
  000fa	48 89 07	 mov	 QWORD PTR [rdi], rax
  000fd	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  00101	83 c9 40	 or	 ecx, 64			; 00000040H
  00104	89 4f 08	 mov	 DWORD PTR [rdi+8], ecx
  00107	48 83 43 10 10	 add	 QWORD PTR [rbx+16], 16
  0010c	48 8b cb	 mov	 rcx, rbx
  0010f	e8 00 00 00 00	 call	 luaD_throw
  00114	cc		 int	 3
$LN23@resume:
; Line 621
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@NAAHDPPN@cannot?5resume?5non?9suspended?5coro@
  0011c	48 89 79 10	 mov	 QWORD PTR [rcx+16], rdi
  00120	e8 00 00 00 00	 call	 luaS_new
  00125	83 ca ff	 or	 edx, -1
  00128	48 89 07	 mov	 QWORD PTR [rdi], rax
  0012b	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  0012f	83 c9 40	 or	 ecx, 64			; 00000040H
  00132	89 4f 08	 mov	 DWORD PTR [rdi+8], ecx
  00135	48 83 43 10 10	 add	 QWORD PTR [rbx+16], 16
  0013a	48 8b cb	 mov	 rcx, rbx
  0013d	e8 00 00 00 00	 call	 luaD_throw
  00142	cc		 int	 3
$LN24@resume:
; Line 627
  00143	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@JJDDBCCB@cannot?5resume?5dead?5coroutine?$AA@
  0014a	48 89 79 10	 mov	 QWORD PTR [rcx+16], rdi
  0014e	e8 00 00 00 00	 call	 luaS_new
  00153	83 ca ff	 or	 edx, -1
  00156	48 89 07	 mov	 QWORD PTR [rdi], rax
  00159	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  0015d	83 c9 40	 or	 ecx, 64			; 00000040H
  00160	89 4f 08	 mov	 DWORD PTR [rdi+8], ecx
  00163	48 83 43 10 10	 add	 QWORD PTR [rbx+16], 16
  00168	48 8b cb	 mov	 rcx, rbx
  0016b	e8 00 00 00 00	 call	 luaD_throw
  00170	cc		 int	 3
$LN20@resume:
resume	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT resume_error
_TEXT	SEGMENT
L$ = 48
msg$ = 56
firstArg$ = 64
resume_error PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 597
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b d8	 mov	 rbx, r8
  0000d	48 8b f9	 mov	 rdi, rcx
; Line 598
  00010	48 89 59 10	 mov	 QWORD PTR [rcx+16], rbx
; Line 599
  00014	e8 00 00 00 00	 call	 luaS_new
; Line 601
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	48 89 03	 mov	 QWORD PTR [rbx], rax
  0001f	0f b6 50 08	 movzx	 edx, BYTE PTR [rax+8]
  00023	83 ca 40	 or	 edx, 64			; 00000040H
  00026	89 53 08	 mov	 DWORD PTR [rbx+8], edx
  00029	48 83 47 10 10	 add	 QWORD PTR [rdi+16], 16
  0002e	83 ca ff	 or	 edx, -1
  00031	e8 00 00 00 00	 call	 luaD_throw
  00036	cc		 int	 3
$LN3@resume_err:
resume_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT recover
_TEXT	SEGMENT
L$ = 48
status$ = 56
recover	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 575
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 577
  0000f	48 8b 59 20	 mov	 rbx, QWORD PTR [rcx+32]
  00013	8b ea		 mov	 ebp, edx
  00015	48 8b f1	 mov	 rsi, rcx
  00018	48 85 db	 test	 rbx, rbx
  0001b	74 12		 je	 SHORT $LN15@recover
  0001d	0f 1f 00	 npad	 3
$LL7@recover:
  00020	f6 43 42 10	 test	 BYTE PTR [rbx+66], 16
  00024	75 1b		 jne	 SHORT $LN1@recover
  00026	48 8b 5b 10	 mov	 rbx, QWORD PTR [rbx+16]
  0002a	48 85 db	 test	 rbx, rbx
  0002d	75 f1		 jne	 SHORT $LL7@recover
$LN15@recover:
; Line 578
  0002f	33 c0		 xor	 eax, eax
; Line 589
  00031	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00036	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5e		 pop	 rsi
  00040	c3		 ret	 0
$LN1@recover:
  00041	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
; Line 580
  00046	48 8b 7b 38	 mov	 rdi, QWORD PTR [rbx+56]
  0004a	48 03 79 38	 add	 rdi, QWORD PTR [rcx+56]
; Line 581
  0004e	48 8b d7	 mov	 rdx, rdi
  00051	e8 00 00 00 00	 call	 luaF_close
; Line 582
  00056	4c 8b c7	 mov	 r8, rdi
  00059	8b d5		 mov	 edx, ebp
  0005b	48 8b ce	 mov	 rcx, rsi
  0005e	e8 00 00 00 00	 call	 seterrorobj
; Line 583
  00063	48 89 5e 20	 mov	 QWORD PTR [rsi+32], rbx
; Line 584
  00067	0f b6 43 42	 movzx	 eax, BYTE PTR [rbx+66]
  0006b	24 01		 and	 al, 1
; Line 586
  0006d	48 8b ce	 mov	 rcx, rsi
  00070	88 86 c9 00 00
	00		 mov	 BYTE PTR [rsi+201], al
  00076	33 c0		 xor	 eax, eax
  00078	66 89 86 c4 00
	00 00		 mov	 WORD PTR [rsi+196], ax
  0007f	e8 00 00 00 00	 call	 luaD_shrinkstack
; Line 587
  00084	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00088	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
; Line 589
  0008d	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00092	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00097	48 89 86 b0 00
	00 00		 mov	 QWORD PTR [rsi+176], rax
  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a7	5e		 pop	 rsi
  000a8	c3		 ret	 0
recover	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT findpcall
_TEXT	SEGMENT
L$ = 8
findpcall PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 562
  00000	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00004	48 85 c0	 test	 rax, rax
  00007	74 16		 je	 SHORT $LN2@findpcall
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@findpcall:
; Line 563
  00010	f6 40 42 10	 test	 BYTE PTR [rax+66], 16
  00014	75 0b		 jne	 SHORT $LN5@findpcall
; Line 562
  00016	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001a	48 85 c0	 test	 rax, rax
  0001d	75 f1		 jne	 SHORT $LL4@findpcall
$LN2@findpcall:
; Line 566
  0001f	33 c0		 xor	 eax, eax
$LN5@findpcall:
; Line 567
  00021	c3		 ret	 0
findpcall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT unroll
_TEXT	SEGMENT
L$ = 80
ud$ = 88
unroll	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 542
  00000	40 53		 push	 rbx
  00002	41 56		 push	 r14
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00008	48 8b d9	 mov	 rbx, rcx
; Line 543
  0000b	48 85 d2	 test	 rdx, rdx
  0000e	74 07		 je	 SHORT $LN16@unroll
; Line 544
  00010	8b 12		 mov	 edx, DWORD PTR [rdx]
  00012	e8 00 00 00 00	 call	 finishCcall
$LN16@unroll:
; Line 545
  00017	4c 8d 73 60	 lea	 r14, QWORD PTR [rbx+96]
  0001b	4c 39 73 20	 cmp	 QWORD PTR [rbx+32], r14
  0001f	0f 84 02 01 00
	00		 je	 $LN3@unroll
  00025	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0002a	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  0002f	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00034	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@unroll:
; Line 546
  00040	48 8b 7b 20	 mov	 rdi, QWORD PTR [rbx+32]
  00044	f6 47 42 02	 test	 BYTE PTR [rdi+66], 2
  00048	0f 85 ab 00 00
	00		 jne	 $LN2@unroll
; Line 547
  0004e	0f b6 47 42	 movzx	 eax, BYTE PTR [rdi+66]
  00052	a8 10		 test	 al, 16
  00054	74 10		 je	 SHORT $LN9@unroll
  00056	24 ef		 and	 al, 239			; 000000efH
  00058	88 47 42	 mov	 BYTE PTR [rdi+66], al
  0005b	48 8b 47 28	 mov	 rax, QWORD PTR [rdi+40]
  0005f	48 89 83 b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rax
$LN9@unroll:
  00066	66 83 7f 40 ff	 cmp	 WORD PTR [rdi+64], -1
  0006b	75 12		 jne	 SHORT $LN8@unroll
  0006d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00071	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00075	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00079	73 04		 jae	 SHORT $LN8@unroll
  0007b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
$LN8@unroll:
  0007f	4c 8b 47 30	 mov	 r8, QWORD PTR [rdi+48]
  00083	ba 01 00 00 00	 mov	 edx, 1
  00088	48 8b cb	 mov	 rcx, rbx
  0008b	ff 57 20	 call	 QWORD PTR [rdi+32]
  0008e	48 8b 73 10	 mov	 rsi, QWORD PTR [rbx+16]
  00092	44 0f bf 7f 40	 movsx	 r15d, WORD PTR [rdi+64]
  00097	48 63 e8	 movsxd	 rbp, eax
  0009a	48 8b cd	 mov	 rcx, rbp
  0009d	48 c1 e1 04	 shl	 rcx, 4
  000a1	48 2b f1	 sub	 rsi, rcx
  000a4	0f b6 8b c8 00
	00 00		 movzx	 ecx, BYTE PTR [rbx+200]
  000ab	f6 c1 06	 test	 cl, 6
  000ae	74 29		 je	 SHORT $LN13@unroll
  000b0	f6 c1 02	 test	 cl, 2
  000b3	74 18		 je	 SHORT $LN12@unroll
  000b5	48 2b 73 38	 sub	 rsi, QWORD PTR [rbx+56]
  000b9	41 83 c8 ff	 or	 r8d, -1
  000bd	48 8b cb	 mov	 rcx, rbx
  000c0	41 8d 50 02	 lea	 edx, QWORD PTR [r8+2]
  000c4	e8 00 00 00 00	 call	 luaD_hook
  000c9	48 03 73 38	 add	 rsi, QWORD PTR [rbx+56]
$LN12@unroll:
  000cd	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  000d1	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  000d5	48 89 4b 28	 mov	 QWORD PTR [rbx+40], rcx
$LN13@unroll:
  000d9	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  000dd	4c 8b 07	 mov	 r8, QWORD PTR [rdi]
  000e0	44 8b cd	 mov	 r9d, ebp
  000e3	48 8b d6	 mov	 rdx, rsi
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  000ee	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
  000f2	e8 00 00 00 00	 call	 moveresults
; Line 548
  000f7	eb 10		 jmp	 SHORT $LN1@unroll
$LN2@unroll:
; Line 549
  000f9	48 8b cb	 mov	 rcx, rbx
  000fc	e8 00 00 00 00	 call	 luaV_finishOp
; Line 550
  00101	48 8b cb	 mov	 rcx, rbx
  00104	e8 00 00 00 00	 call	 luaV_execute
$LN1@unroll:
; Line 545
  00109	4c 39 73 20	 cmp	 QWORD PTR [rbx+32], r14
  0010d	0f 85 2d ff ff
	ff		 jne	 $LL4@unroll
  00113	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]
  00118	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  0011d	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00122	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
$LN3@unroll:
; Line 553
  00127	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0012b	41 5e		 pop	 r14
  0012d	5b		 pop	 rbx
  0012e	c3		 ret	 0
unroll	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT finishCcall
_TEXT	SEGMENT
L$ = 48
status$ = 56
finishCcall PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 510
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 511
  0000a	48 8b 59 20	 mov	 rbx, QWORD PTR [rcx+32]
  0000e	48 8b f9	 mov	 rdi, rcx
; Line 517
  00011	0f b6 43 42	 movzx	 eax, BYTE PTR [rbx+66]
  00015	a8 10		 test	 al, 16
  00017	74 10		 je	 SHORT $LN2@finishCcal
; Line 518
  00019	24 ef		 and	 al, 239			; 000000efH
  0001b	88 43 42	 mov	 BYTE PTR [rbx+66], al
; Line 519
  0001e	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00022	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax
$LN2@finishCcal:
; Line 523
  00029	66 83 7b 40 ff	 cmp	 WORD PTR [rbx+64], -1
  0002e	75 12		 jne	 SHORT $LN1@finishCcal
  00030	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00034	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00038	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0003c	73 04		 jae	 SHORT $LN1@finishCcal
  0003e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
$LN1@finishCcal:
; Line 526
  00042	4c 8b 43 30	 mov	 r8, QWORD PTR [rbx+48]
  00046	48 8b cf	 mov	 rcx, rdi
  00049	ff 53 20	 call	 QWORD PTR [rbx+32]
; Line 530
  0004c	4c 8b 47 10	 mov	 r8, QWORD PTR [rdi+16]
  00050	48 8b d3	 mov	 rdx, rbx
  00053	48 63 c8	 movsxd	 rcx, eax
  00056	44 8b c8	 mov	 r9d, eax
  00059	48 c1 e1 04	 shl	 rcx, 4
  0005d	4c 2b c1	 sub	 r8, rcx
  00060	48 8b cf	 mov	 rcx, rdi
; Line 531
  00063	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
; Line 530
  0006d	e9 00 00 00 00	 jmp	 luaD_poscall
finishCcall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stackerror
_TEXT	SEGMENT
L$ = 48
stackerror PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 473
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 474
  00004	0f b7 81 c6 00
	00 00		 movzx	 eax, WORD PTR [rcx+198]
  0000b	ba c8 00 00 00	 mov	 edx, 200		; 000000c8H
  00010	66 3b c2	 cmp	 ax, dx
  00013	74 0f		 je	 SHORT $LN7@stackerror
; Line 476
  00015	ba e1 00 00 00	 mov	 edx, 225		; 000000e1H
  0001a	66 3b c2	 cmp	 ax, dx
  0001d	73 12		 jae	 SHORT $LN9@stackerror
; Line 478
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
$LN7@stackerror:
; Line 475
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@
  0002b	e8 00 00 00 00	 call	 luaG_runerror
  00030	cc		 int	 3
$LN9@stackerror:
; Line 477
  00031	ba 06 00 00 00	 mov	 edx, 6
  00036	e8 00 00 00 00	 call	 luaD_throw
  0003b	cc		 int	 3
$LN6@stackerror:
stackerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT moveresults
_TEXT	SEGMENT
L$ = 8
firstResult$ = 16
res$ = 24
nres$ = 32
wanted$ = 40
moveresults PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 407
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi
; Line 408
  0000a	48 63 5c 24 28	 movsxd	 rbx, DWORD PTR wanted$[rsp]
  0000f	4d 8b d8	 mov	 r11, r8
  00012	48 8b f9	 mov	 rdi, rcx
; Line 430
  00015	4d 63 d1	 movsxd	 r10, r9d
  00018	83 fb ff	 cmp	 ebx, -1
  0001b	0f 84 d0 00 00
	00		 je	 $LN16@moveresult
; Line 408
  00021	85 db		 test	 ebx, ebx
  00023	0f 84 aa 00 00
	00		 je	 $LN19@moveresult
  00029	83 fb 01	 cmp	 ebx, 1
  0002c	0f 84 8c 00 00
	00		 je	 $LN18@moveresult
; Line 426
  00032	4c 8b c3	 mov	 r8, rbx
  00035	41 3b d9	 cmp	 ebx, r9d
  00038	7f 29		 jg	 SHORT $LN11@moveresult
  0003a	85 db		 test	 ebx, ebx
  0003c	0f 8e 91 00 00
	00		 jle	 $LN19@moveresult
  00042	49 8b c3	 mov	 rax, r11
  00045	49 2b d3	 sub	 rdx, r11
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL10@moveresult:
; Line 427
  00050	0f 10 04 02	 movups	 xmm0, XMMWORD PTR [rdx+rax]
  00054	48 8d 40 10	 lea	 rax, QWORD PTR [rax+16]
  00058	0f 11 40 f0	 movups	 XMMWORD PTR [rax-16], xmm0
  0005c	49 ff c8	 dec	 r8
  0005f	75 ef		 jne	 SHORT $LL10@moveresult
; Line 429
  00061	eb 70		 jmp	 SHORT $LN19@moveresult
$LN11@moveresult:
; Line 430
  00063	45 33 c9	 xor	 r9d, r9d
  00066	41 8b c9	 mov	 ecx, r9d
  00069	4d 85 d2	 test	 r10, r10
  0006c	7e 23		 jle	 SHORT $LN4@moveresult
  0006e	49 8b c3	 mov	 rax, r11
  00071	49 2b d3	 sub	 rdx, r11
  00074	41 8b ca	 mov	 ecx, r10d
  00077	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL6@moveresult:
; Line 431
  00080	0f 10 04 10	 movups	 xmm0, XMMWORD PTR [rax+rdx]
  00084	48 8d 40 10	 lea	 rax, QWORD PTR [rax+16]
  00088	0f 11 40 f0	 movups	 XMMWORD PTR [rax-16], xmm0
  0008c	49 ff ca	 dec	 r10
  0008f	75 ef		 jne	 SHORT $LL6@moveresult
$LN4@moveresult:
  00091	48 63 d1	 movsxd	 rdx, ecx
; Line 432
  00094	48 3b d3	 cmp	 rdx, rbx
  00097	7d 3a		 jge	 SHORT $LN19@moveresult
  00099	48 8b c2	 mov	 rax, rdx
  0009c	49 8d 4b 08	 lea	 rcx, QWORD PTR [r11+8]
  000a0	48 c1 e0 04	 shl	 rax, 4
  000a4	48 03 c8	 add	 rcx, rax
  000a7	4c 2b c2	 sub	 r8, rdx
  000aa	66 0f 1f 44 00
	00		 npad	 6
$LL3@moveresult:
; Line 433
  000b0	44 89 09	 mov	 DWORD PTR [rcx], r9d
  000b3	48 8d 49 10	 lea	 rcx, QWORD PTR [rcx+16]
  000b7	49 ff c8	 dec	 r8
  000ba	75 f4		 jne	 SHORT $LL3@moveresult
; Line 435
  000bc	eb 15		 jmp	 SHORT $LN19@moveresult
$LN18@moveresult:
; Line 411
  000be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:luaO_nilobject_
  000c5	45 85 c9	 test	 r9d, r9d
  000c8	48 0f 45 c2	 cmovne	 rax, rdx
; Line 413
  000cc	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000cf	41 0f 11 00	 movups	 XMMWORD PTR [r8], xmm0
$LN19@moveresult:
; Line 438
  000d3	48 8b c3	 mov	 rax, rbx
  000d6	48 c1 e0 04	 shl	 rax, 4
  000da	49 03 c3	 add	 rax, r11
  000dd	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax
; Line 439
  000e1	b8 01 00 00 00	 mov	 eax, 1
; Line 440
  000e6	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  000eb	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  000f0	c3		 ret	 0
$LN16@moveresult:
; Line 418
  000f1	45 85 c9	 test	 r9d, r9d
  000f4	7e 1b		 jle	 SHORT $LN13@moveresult
  000f6	49 8b c0	 mov	 rax, r8
  000f9	49 2b d0	 sub	 rdx, r8
  000fc	49 8b ca	 mov	 rcx, r10
  000ff	90		 npad	 1
$LL15@moveresult:
; Line 419
  00100	0f 10 04 10	 movups	 xmm0, XMMWORD PTR [rax+rdx]
  00104	48 8d 40 10	 lea	 rax, QWORD PTR [rax+16]
  00108	0f 11 40 f0	 movups	 XMMWORD PTR [rax-16], xmm0
  0010c	48 ff c9	 dec	 rcx
  0010f	75 ef		 jne	 SHORT $LL15@moveresult
$LN13@moveresult:
; Line 440
  00111	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00116	49 c1 e2 04	 shl	 r10, 4
  0011a	33 c0		 xor	 eax, eax
  0011c	4d 03 d0	 add	 r10, r8
  0011f	4c 89 57 10	 mov	 QWORD PTR [rdi+16], r10
  00123	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  00128	c3		 ret	 0
moveresults ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT tryfuncTM
_TEXT	SEGMENT
L$ = 48
func$ = 56
tryfuncTM PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 307
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 308
  0000a	41 b8 17 00 00
	00		 mov	 r8d, 23
  00010	48 8b da	 mov	 rbx, rdx
  00013	48 8b f9	 mov	 rdi, rcx
  00016	e8 00 00 00 00	 call	 luaT_gettmbyobj
  0001b	48 8b d0	 mov	 rdx, rax
; Line 310
  0001e	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00022	41 83 e0 0f	 and	 r8d, 15
  00026	41 80 f8 06	 cmp	 r8b, 6
  0002a	75 3e		 jne	 SHORT $LN12@tryfuncTM
; Line 313
  0002c	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00030	48 3b c3	 cmp	 rax, rbx
  00033	76 1f		 jbe	 SHORT $LN1@tryfuncTM
  00035	48 8d 48 f0	 lea	 rcx, QWORD PTR [rax-16]
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@tryfuncTM:
; Line 314
  00040	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  00043	48 83 e8 10	 sub	 rax, 16
  00047	48 8d 49 f0	 lea	 rcx, QWORD PTR [rcx-16]
  0004b	0f 11 40 10	 movups	 XMMWORD PTR [rax+16], xmm0
  0004f	48 3b c3	 cmp	 rax, rbx
  00052	77 ec		 ja	 SHORT $LL3@tryfuncTM
$LN1@tryfuncTM:
; Line 315
  00054	48 83 47 10 10	 add	 QWORD PTR [rdi+16], 16
; Line 316
  00059	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]
  0005c	0f 11 03	 movups	 XMMWORD PTR [rbx], xmm0
; Line 317
  0005f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00064	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00068	5f		 pop	 rdi
  00069	c3		 ret	 0
$LN12@tryfuncTM:
; Line 311
  0006a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04OMFAIDPG@call?$AA@
  00071	48 8b d3	 mov	 rdx, rbx
  00074	48 8b cf	 mov	 rcx, rdi
  00077	e8 00 00 00 00	 call	 luaG_typeerror
  0007c	cc		 int	 3
$LN11@tryfuncTM:
tryfuncTM ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT adjust_varargs
_TEXT	SEGMENT
L$ = 8
p$ = 16
actual$ = 24
adjust_varargs PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 285
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
; Line 290
  00014	48 8b 79 10	 mov	 rdi, QWORD PTR [rcx+16]
  00018	44 0f b6 5a 0a	 movzx	 r11d, BYTE PTR [rdx+10]
; Line 292
  0001d	33 ed		 xor	 ebp, ebp
  0001f	49 63 d8	 movsxd	 rbx, r8d
  00022	4c 8b cf	 mov	 r9, rdi
  00025	44 8b d5	 mov	 r10d, ebp
  00028	48 8b c3	 mov	 rax, rbx
  0002b	44 8b c5	 mov	 r8d, ebp
  0002e	48 c1 e0 04	 shl	 rax, 4
  00032	4c 2b c8	 sub	 r9, rax
  00035	45 85 db	 test	 r11d, r11d
  00038	7e 32		 jle	 SHORT $LN18@adjust_var
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL6@adjust_var:
  00040	4c 3b c3	 cmp	 r8, rbx
  00043	7d 27		 jge	 SHORT $LN18@adjust_var
; Line 293
  00045	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  00049	49 ff c0	 inc	 r8
  0004c	49 83 c1 10	 add	 r9, 16
  00050	48 8d 42 10	 lea	 rax, QWORD PTR [rdx+16]
  00054	41 ff c2	 inc	 r10d
  00057	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  0005b	41 0f 10 41 f0	 movups	 xmm0, XMMWORD PTR [r9-16]
  00060	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
; Line 294
  00063	41 89 69 f8	 mov	 DWORD PTR [r9-8], ebp
  00067	4d 3b c3	 cmp	 r8, r11
  0006a	7c d4		 jl	 SHORT $LL6@adjust_var
$LN18@adjust_var:
; Line 296
  0006c	45 3b d3	 cmp	 r10d, r11d
  0006f	7d 20		 jge	 SHORT $LN17@adjust_var
  00071	45 2b da	 sub	 r11d, r10d
  00074	45 8b c3	 mov	 r8d, r11d
  00077	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL3@adjust_var:
; Line 297
  00080	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  00084	89 6a 08	 mov	 DWORD PTR [rdx+8], ebp
  00087	48 83 41 10 10	 add	 QWORD PTR [rcx+16], 16
  0008c	49 ff c8	 dec	 r8
  0008f	75 ef		 jne	 SHORT $LL3@adjust_var
$LN17@adjust_var:
; Line 299
  00091	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00096	48 8b 6c 24 10	 mov	 rbp, QWORD PTR [rsp+16]
  0009b	48 8b 74 24 18	 mov	 rsi, QWORD PTR [rsp+24]
  000a0	48 8b c7	 mov	 rax, rdi
  000a3	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]
  000a8	c3		 ret	 0
adjust_varargs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT callhook
_TEXT	SEGMENT
L$ = 48
ci$ = 56
callhook PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 272
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx
; Line 273
  00009	33 d2		 xor	 edx, edx
; Line 276
  0000b	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0000f	48 83 43 28 04	 add	 QWORD PTR [rbx+40], 4
  00014	f6 40 42 02	 test	 BYTE PTR [rax+66], 2
  00018	74 1b		 je	 SHORT $LN1@callhook
  0001a	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0001e	44 8b 40 fc	 mov	 r8d, DWORD PTR [rax-4]
  00022	41 83 e0 3f	 and	 r8d, 63			; 0000003fH
  00026	41 80 f8 25	 cmp	 r8b, 37			; 00000025H
  0002a	75 09		 jne	 SHORT $LN1@callhook
; Line 277
  0002c	80 4b 42 20	 or	 BYTE PTR [rbx+66], 32	; 00000020H
; Line 278
  00030	ba 04 00 00 00	 mov	 edx, 4
$LN1@callhook:
; Line 280
  00035	41 83 c8 ff	 or	 r8d, -1
  00039	e8 00 00 00 00	 call	 luaD_hook
; Line 281
  0003e	48 83 43 28 fc	 add	 QWORD PTR [rbx+40], -4
; Line 282
  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5b		 pop	 rbx
  00048	c3		 ret	 0
callhook ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stackinuse
_TEXT	SEGMENT
L$ = 8
stackinuse PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 213
  00000	4c 8b 41 20	 mov	 r8, QWORD PTR [rcx+32]
  00004	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00008	4d 85 c0	 test	 r8, r8
  0000b	74 15		 je	 SHORT $LN2@stackinuse
  0000d	0f 1f 00	 npad	 3
$LL4@stackinuse:
; Line 215
  00010	49 3b 40 08	 cmp	 rax, QWORD PTR [r8+8]
  00014	49 0f 42 40 08	 cmovb	 rax, QWORD PTR [r8+8]
  00019	4d 8b 40 10	 mov	 r8, QWORD PTR [r8+16]
  0001d	4d 85 c0	 test	 r8, r8
  00020	75 ee		 jne	 SHORT $LL4@stackinuse
$LN2@stackinuse:
; Line 217
  00022	48 2b 41 38	 sub	 rax, QWORD PTR [rcx+56]
  00026	48 c1 f8 04	 sar	 rax, 4
  0002a	ff c0		 inc	 eax
; Line 218
  0002c	c3		 ret	 0
stackinuse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT correctstack
_TEXT	SEGMENT
L$ = 8
oldstack$ = 16
correctstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 161
  00000	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
; Line 162
  00004	4c 8b 41 40	 mov	 r8, QWORD PTR [rcx+64]
  00008	4c 8b c9	 mov	 r9, rcx
  0000b	48 2b c2	 sub	 rax, rdx
  0000e	48 83 e0 f0	 and	 rax, -16
  00012	48 03 41 38	 add	 rax, QWORD PTR [rcx+56]
  00016	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  0001a	4d 85 c0	 test	 r8, r8
  0001d	74 1b		 je	 SHORT $LN5@correctsta
  0001f	90		 npad	 1
$LL7@correctsta:
; Line 163
  00020	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00023	48 2b c2	 sub	 rax, rdx
  00026	48 83 e0 f0	 and	 rax, -16
  0002a	48 03 41 38	 add	 rax, QWORD PTR [rcx+56]
  0002e	49 89 00	 mov	 QWORD PTR [r8], rax
  00031	4d 8b 40 10	 mov	 r8, QWORD PTR [r8+16]
  00035	4d 85 c0	 test	 r8, r8
  00038	75 e6		 jne	 SHORT $LL7@correctsta
$LN5@correctsta:
; Line 164
  0003a	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  0003e	48 85 c0	 test	 rax, rax
  00041	74 53		 je	 SHORT $LN2@correctsta
  00043	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL4@correctsta:
; Line 165
  00050	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00054	48 2b ca	 sub	 rcx, rdx
  00057	48 83 e1 f0	 and	 rcx, -16
  0005b	49 03 49 38	 add	 rcx, QWORD PTR [r9+56]
  0005f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
; Line 166
  00063	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00066	48 2b ca	 sub	 rcx, rdx
  00069	48 83 e1 f0	 and	 rcx, -16
  0006d	49 03 49 38	 add	 rcx, QWORD PTR [r9+56]
; Line 167
  00071	f6 40 42 02	 test	 BYTE PTR [rax+66], 2
  00075	48 89 08	 mov	 QWORD PTR [rax], rcx
  00078	74 13		 je	 SHORT $LN3@correctsta
; Line 168
  0007a	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0007e	48 2b ca	 sub	 rcx, rdx
  00081	48 83 e1 f0	 and	 rcx, -16
  00085	49 03 49 38	 add	 rcx, QWORD PTR [r9+56]
  00089	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
$LN3@correctsta:
; Line 164
  0008d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00091	48 85 c0	 test	 rax, rax
  00094	75 ba		 jne	 SHORT $LL4@correctsta
$LN2@correctsta:
; Line 170
  00096	c3		 ret	 0
correctstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT seterrorobj
_TEXT	SEGMENT
L$ = 48
errcode$ = 56
oldtop$ = 64
seterrorobj PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 91
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b d8	 mov	 rbx, r8
  0000d	48 8b f9	 mov	 rdi, rcx
; Line 92
  00010	83 fa 04	 cmp	 edx, 4
  00013	74 56		 je	 SHORT $LN3@seterrorob
  00015	83 fa 06	 cmp	 edx, 6
  00018	74 1f		 je	 SHORT $LN2@seterrorob
; Line 102
  0001a	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
; Line 106
  0001e	48 83 c3 10	 add	 rbx, 16
  00022	0f 10 40 f0	 movups	 xmm0, XMMWORD PTR [rax-16]
  00026	41 0f 11 00	 movups	 XMMWORD PTR [r8], xmm0
  0002a	48 89 59 10	 mov	 QWORD PTR [rcx+16], rbx
; Line 107
  0002e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
$LN2@seterrorob:
; Line 98
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KGOCJOGJ@error?5in?5error?5handling?$AA@
  00040	41 b8 17 00 00
	00		 mov	 r8d, 23
  00046	e8 00 00 00 00	 call	 luaS_newlstr
  0004b	48 89 03	 mov	 QWORD PTR [rbx], rax
  0004e	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  00052	83 c9 40	 or	 ecx, 64			; 00000040H
; Line 106
  00055	48 83 c3 10	 add	 rbx, 16
  00059	89 4b f8	 mov	 DWORD PTR [rbx-8], ecx
  0005c	48 89 5f 10	 mov	 QWORD PTR [rdi+16], rbx
; Line 107
  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN3@seterrorob:
; Line 94
  0006b	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  0006f	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  00076	49 89 08	 mov	 QWORD PTR [r8], rcx
  00079	0f b6 41 08	 movzx	 eax, BYTE PTR [rcx+8]
  0007d	83 c8 40	 or	 eax, 64			; 00000040H
; Line 106
  00080	48 83 c3 10	 add	 rbx, 16
  00084	41 89 40 08	 mov	 DWORD PTR [r8+8], eax
  00088	48 89 5f 10	 mov	 QWORD PTR [rdi+16], rbx
; Line 107
  0008c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00091	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00095	5f		 pop	 rdi
  00096	c3		 ret	 0
seterrorobj ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_rawrunprotected
_TEXT	SEGMENT
oldnCcalls$ = 32
ud$GSCopy$ = 40
f$GSCopy$ = 48
L$GSCopy$ = 56
lj$ = 64
__$ArrayPad$ = 352
L$ = 384
f$ = 392
ud$ = 400
luaD_rawrunprotected PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 136
$LN5:
  00000	40 53		 push	 rbx
  00002	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 137
  0001b	0f b7 81 c6 00
	00 00		 movzx	 eax, WORD PTR [rcx+198]
  00022	48 89 4c 24 38	 mov	 QWORD PTR L$GSCopy$[rsp], rcx
  00027	48 89 54 24 30	 mov	 QWORD PTR f$GSCopy$[rsp], rdx
  0002c	66 89 44 24 20	 mov	 WORD PTR oldnCcalls$[rsp], ax
  00031	4c 89 44 24 28	 mov	 QWORD PTR ud$GSCopy$[rsp], r8
; Line 139
  00036	c7 84 24 50 01
	00 00 00 00 00
	00		 mov	 DWORD PTR lj$[rsp+272], 0
; Line 140
  00041	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
; Line 144
  00045	48 8b d4	 mov	 rdx, rsp
  00048	48 89 44 24 40	 mov	 QWORD PTR lj$[rsp], rax
  0004d	48 8d 44 24 40	 lea	 rax, QWORD PTR lj$[rsp]
  00052	48 89 41 58	 mov	 QWORD PTR [rcx+88], rax
  00056	48 8d 4c 24 50	 lea	 rcx, QWORD PTR lj$[rsp+16]
  0005b	e8 00 00 00 00	 call	 _setjmp
  00060	48 8b 5c 24 38	 mov	 rbx, QWORD PTR L$GSCopy$[rsp]
  00065	85 c0		 test	 eax, eax
  00067	75 0c		 jne	 SHORT $LN1@luaD_rawru
  00069	48 8b 54 24 28	 mov	 rdx, QWORD PTR ud$GSCopy$[rsp]
  0006e	48 8b cb	 mov	 rcx, rbx
  00071	ff 54 24 30	 call	 QWORD PTR f$GSCopy$[rsp]
$LN1@luaD_rawru:
; Line 145
  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR lj$[rsp]
  0007a	48 89 43 58	 mov	 QWORD PTR [rbx+88], rax
; Line 146
  0007e	0f b7 44 24 20	 movzx	 eax, WORD PTR oldnCcalls$[rsp]
  00083	66 89 83 c6 00
	00 00		 mov	 WORD PTR [rbx+198], ax
; Line 147
  0008a	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR lj$[rsp+272]
; Line 148
  00091	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00099	48 33 cc	 xor	 rcx, rsp
  0009c	e8 00 00 00 00	 call	 __security_check_cookie
  000a1	48 81 c4 70 01
	00 00		 add	 rsp, 368		; 00000170H
  000a8	5b		 pop	 rbx
  000a9	c3		 ret	 0
luaD_rawrunprotected ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_throw
_TEXT	SEGMENT
L$ = 48
errcode$ = 56
luaD_throw PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 110
$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 111
  0000a	48 83 79 58 00	 cmp	 QWORD PTR [rcx+88], 0
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	75 46		 jne	 SHORT $LN11@luaD_throw
  00014	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL9@luaD_throw:
; Line 116
  00020	48 8b 7b 18	 mov	 rdi, QWORD PTR [rbx+24]
; Line 117
  00024	88 53 0c	 mov	 BYTE PTR [rbx+12], dl
; Line 118
  00027	4c 8b 87 c8 00
	00 00		 mov	 r8, QWORD PTR [rdi+200]
  0002e	49 83 78 58 00	 cmp	 QWORD PTR [r8+88], 0
  00033	74 43		 je	 SHORT $LN4@luaD_throw
; Line 119
  00035	49 8b 48 10	 mov	 rcx, QWORD PTR [r8+16]
  00039	48 8d 41 10	 lea	 rax, QWORD PTR [rcx+16]
  0003d	49 89 40 10	 mov	 QWORD PTR [r8+16], rax
  00041	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00045	0f 10 40 f0	 movups	 xmm0, XMMWORD PTR [rax-16]
  00049	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
; Line 120
  0004c	48 8b 9f c8 00
	00 00		 mov	 rbx, QWORD PTR [rdi+200]
  00053	48 83 7b 58 00	 cmp	 QWORD PTR [rbx+88], 0
  00058	74 c6		 je	 SHORT $LL9@luaD_throw
$LN11@luaD_throw:
; Line 112
  0005a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005e	89 90 10 01 00
	00		 mov	 DWORD PTR [rax+272], edx
; Line 113
  00064	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  00068	ba 01 00 00 00	 mov	 edx, 1
  0006d	48 83 c1 10	 add	 rcx, 16
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_longjmp
  00077	cc		 int	 3
$LN4@luaD_throw:
; Line 123
  00078	48 83 bf c0 00
	00 00 00	 cmp	 QWORD PTR [rdi+192], 0
  00080	74 27		 je	 SHORT $LN2@luaD_throw
; Line 124
  00082	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  00086	48 8b cb	 mov	 rcx, rbx
  00089	e8 00 00 00 00	 call	 seterrorobj
; Line 125
  0008e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00092	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00096	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0009a	73 04		 jae	 SHORT $LN1@luaD_throw
; Line 126
  0009c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
$LN1@luaD_throw:
; Line 128
  000a0	48 8b cb	 mov	 rcx, rbx
  000a3	ff 97 c0 00 00
	00		 call	 QWORD PTR [rdi+192]
$LN2@luaD_throw:
; Line 130
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_abort
  000af	cc		 int	 3
$LN15@luaD_throw:
luaD_throw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_inctop
_TEXT	SEGMENT
L$ = 48
luaD_inctop PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 237
$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 238
  00006	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 2b 41 10	 sub	 rax, QWORD PTR [rcx+16]
  00011	48 83 e0 f0	 and	 rax, -16
  00015	48 83 f8 10	 cmp	 rax, 16
  00019	7f 15		 jg	 SHORT $LN5@luaD_incto
  0001b	ba 01 00 00 00	 mov	 edx, 1
  00020	e8 00 00 00 00	 call	 luaD_growstack
; Line 239
  00025	48 83 43 10 10	 add	 QWORD PTR [rbx+16], 16
; Line 240
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5b		 pop	 rbx
  0002f	c3		 ret	 0
$LN5@luaD_incto:
; Line 239
  00030	48 83 41 10 10	 add	 QWORD PTR [rcx+16], 16
; Line 240
  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5b		 pop	 rbx
  0003a	c3		 ret	 0
luaD_inctop ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_shrinkstack
_TEXT	SEGMENT
L$ = 48
luaD_shrinkstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 221
$LN19:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 222
  00014	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  00018	48 8b 59 10	 mov	 rbx, QWORD PTR [rcx+16]
  0001c	48 8b f9	 mov	 rdi, rcx
  0001f	48 85 d2	 test	 rdx, rdx
  00022	74 1e		 je	 SHORT $LN9@luaD_shrin
  00024	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL11@luaD_shrin:
  00030	48 3b 5a 08	 cmp	 rbx, QWORD PTR [rdx+8]
  00034	48 0f 42 5a 08	 cmovb	 rbx, QWORD PTR [rdx+8]
  00039	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0003d	48 85 d2	 test	 rdx, rdx
  00040	75 ee		 jne	 SHORT $LL11@luaD_shrin
$LN9@luaD_shrin:
  00042	48 2b 59 38	 sub	 rbx, QWORD PTR [rcx+56]
; Line 224
  00046	bd 40 42 0f 00	 mov	 ebp, 1000000		; 000f4240H
  0004b	48 c1 fb 04	 sar	 rbx, 4
  0004f	ff c3		 inc	 ebx
  00051	8b c3		 mov	 eax, ebx
  00053	99		 cdq
  00054	8d 73 0a	 lea	 esi, DWORD PTR [rbx+10]
  00057	83 e2 07	 and	 edx, 7
  0005a	03 c2		 add	 eax, edx
  0005c	c1 f8 03	 sar	 eax, 3
  0005f	03 f0		 add	 esi, eax
  00061	3b f5		 cmp	 esi, ebp
  00063	0f 4f f5	 cmovg	 esi, ebp
; Line 225
  00066	39 a9 b8 00 00
	00		 cmp	 DWORD PTR [rcx+184], ebp
  0006c	7e 07		 jle	 SHORT $LN4@luaD_shrin
; Line 226
  0006e	e8 00 00 00 00	 call	 luaE_freeCI
; Line 227
  00073	eb 05		 jmp	 SHORT $LN3@luaD_shrin
$LN4@luaD_shrin:
; Line 228
  00075	e8 00 00 00 00	 call	 luaE_shrinkCI
$LN3@luaD_shrin:
; Line 230
  0007a	3b dd		 cmp	 ebx, ebp
  0007c	7f 12		 jg	 SHORT $LN2@luaD_shrin
  0007e	3b b7 b8 00 00
	00		 cmp	 esi, DWORD PTR [rdi+184]
  00084	7d 0a		 jge	 SHORT $LN2@luaD_shrin
; Line 231
  00086	8b d6		 mov	 edx, esi
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 luaD_reallocstack
$LN2@luaD_shrin:
; Line 234
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
luaD_shrinkstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_growstack
_TEXT	SEGMENT
L$ = 48
n$ = 56
luaD_growstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 191
$LN13:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	44 8b c2	 mov	 r8d, edx
; Line 192
  00009	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [rcx+184]
; Line 193
  0000f	41 b9 40 42 0f
	00		 mov	 r9d, 1000000		; 000f4240H
  00015	48 8b d9	 mov	 rbx, rcx
  00018	41 3b d1	 cmp	 edx, r9d
  0001b	7f 32		 jg	 SHORT $LN10@luaD_grows
; Line 196
  0001d	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
; Line 197
  00021	03 d2		 add	 edx, edx
  00023	48 2b 41 38	 sub	 rax, QWORD PTR [rcx+56]
  00027	41 8d 48 05	 lea	 ecx, DWORD PTR [r8+5]
  0002b	48 c1 f8 04	 sar	 rax, 4
  0002f	03 c8		 add	 ecx, eax
; Line 198
  00031	41 3b d1	 cmp	 edx, r9d
  00034	41 0f 4f d1	 cmovg	 edx, r9d
; Line 199
  00038	3b d1		 cmp	 edx, ecx
  0003a	0f 4c d1	 cmovl	 edx, ecx
; Line 201
  0003d	48 8b cb	 mov	 rcx, rbx
  00040	41 3b d1	 cmp	 edx, r9d
  00043	7f 15		 jg	 SHORT $LN12@luaD_grows
; Line 207
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5b		 pop	 rbx
; Line 205
  0004a	e9 00 00 00 00	 jmp	 luaD_reallocstack
$LN10@luaD_grows:
; Line 194
  0004f	ba 06 00 00 00	 mov	 edx, 6
  00054	e8 00 00 00 00	 call	 luaD_throw
  00059	cc		 int	 3
$LN12@luaD_grows:
; Line 201
  0005a	ba 08 43 0f 00	 mov	 edx, 1000200		; 000f4308H
  0005f	e8 00 00 00 00	 call	 luaD_reallocstack
; Line 202
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  0006b	48 8b cb	 mov	 rcx, rbx
  0006e	e8 00 00 00 00	 call	 luaG_runerror
  00073	cc		 int	 3
$LN9@luaD_grows:
luaD_growstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_reallocstack
_TEXT	SEGMENT
L$ = 48
newsize$ = 56
luaD_reallocstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 177
$LN28:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 182
  0001a	48 63 b1 b8 00
	00 00		 movsxd	 rsi, DWORD PTR [rcx+184]
  00021	48 8b 79 38	 mov	 rdi, QWORD PTR [rcx+56]
  00025	4c 63 f2	 movsxd	 r14, edx
  00028	4d 8b ce	 mov	 r9, r14
  0002b	4c 8b c6	 mov	 r8, rsi
  0002e	48 8b d7	 mov	 rdx, rdi
  00031	49 c1 e0 04	 shl	 r8, 4
  00035	49 c1 e1 04	 shl	 r9, 4
  00039	48 8b d9	 mov	 rbx, rcx
  0003c	e8 00 00 00 00	 call	 luaM_realloc_
  00041	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
; Line 183
  00045	49 3b f6	 cmp	 rsi, r14
  00048	7d 28		 jge	 SHORT $LN1@luaD_reall
; Line 178
  0004a	48 8b ce	 mov	 rcx, rsi
  0004d	49 8b d6	 mov	 rdx, r14
  00050	48 c1 e1 04	 shl	 rcx, 4
  00054	48 2b d6	 sub	 rdx, rsi
  00057	45 33 c0	 xor	 r8d, r8d
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL3@luaD_reall:
; Line 184
  00060	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00064	48 8d 49 10	 lea	 rcx, QWORD PTR [rcx+16]
  00068	44 89 44 01 f8	 mov	 DWORD PTR [rcx+rax-8], r8d
  0006d	48 ff ca	 dec	 rdx
  00070	75 ee		 jne	 SHORT $LL3@luaD_reall
$LN1@luaD_reall:
; Line 187
  00072	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00076	49 8d 46 fb	 lea	 rax, QWORD PTR [r14-5]
  0007a	44 89 b3 b8 00
	00 00		 mov	 DWORD PTR [rbx+184], r14d
  00081	48 c1 e0 04	 shl	 rax, 4
  00085	48 03 43 38	 add	 rax, QWORD PTR [rbx+56]
  00089	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  0008d	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00091	48 2b c7	 sub	 rax, rdi
  00094	48 83 e0 f0	 and	 rax, -16
  00098	48 03 43 38	 add	 rax, QWORD PTR [rbx+56]
  0009c	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  000a0	48 85 c9	 test	 rcx, rcx
  000a3	74 25		 je	 SHORT $LN10@luaD_reall
  000a5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL12@luaD_reall:
  000b0	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000b3	48 2b c7	 sub	 rax, rdi
  000b6	48 83 e0 f0	 and	 rax, -16
  000ba	48 03 43 38	 add	 rax, QWORD PTR [rbx+56]
  000be	48 89 01	 mov	 QWORD PTR [rcx], rax
  000c1	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000c5	48 85 c9	 test	 rcx, rcx
  000c8	75 e6		 jne	 SHORT $LL12@luaD_reall
$LN10@luaD_reall:
  000ca	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ce	48 85 c0	 test	 rax, rax
  000d1	74 53		 je	 SHORT $LN7@luaD_reall
  000d3	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL9@luaD_reall:
  000e0	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000e4	48 2b cf	 sub	 rcx, rdi
  000e7	48 83 e1 f0	 and	 rcx, -16
  000eb	48 03 4b 38	 add	 rcx, QWORD PTR [rbx+56]
  000ef	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000f3	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000f6	48 2b cf	 sub	 rcx, rdi
  000f9	48 83 e1 f0	 and	 rcx, -16
  000fd	48 03 4b 38	 add	 rcx, QWORD PTR [rbx+56]
  00101	f6 40 42 02	 test	 BYTE PTR [rax+66], 2
  00105	48 89 08	 mov	 QWORD PTR [rax], rcx
  00108	74 13		 je	 SHORT $LN8@luaD_reall
  0010a	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0010e	48 2b cf	 sub	 rcx, rdi
  00111	48 83 e1 f0	 and	 rcx, -16
  00115	48 03 4b 38	 add	 rcx, QWORD PTR [rbx+56]
  00119	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
$LN8@luaD_reall:
  0011d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00121	48 85 c0	 test	 rax, rax
  00124	75 ba		 jne	 SHORT $LL9@luaD_reall
$LN7@luaD_reall:
; Line 188
  00126	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0012b	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00130	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00135	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0013a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013e	41 5e		 pop	 r14
  00140	c3		 ret	 0
luaD_reallocstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_poscall
_TEXT	SEGMENT
L$ = 64
ci$ = 72
firstResult$ = 80
nres$ = 88
luaD_poscall PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 448
$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 451
  0001a	0f b6 81 c8 00
	00 00		 movzx	 eax, BYTE PTR [rcx+200]
  00021	44 0f bf 72 40	 movsx	 r14d, WORD PTR [rdx+64]
  00026	41 8b e9	 mov	 ebp, r9d
  00029	49 8b f0	 mov	 rsi, r8
  0002c	48 8b fa	 mov	 rdi, rdx
  0002f	48 8b d9	 mov	 rbx, rcx
  00032	a8 06		 test	 al, 6
  00034	74 25		 je	 SHORT $LN2@luaD_posca
; Line 452
  00036	a8 02		 test	 al, 2
  00038	74 15		 je	 SHORT $LN1@luaD_posca
; Line 453
  0003a	48 2b 71 38	 sub	 rsi, QWORD PTR [rcx+56]
; Line 454
  0003e	41 83 c8 ff	 or	 r8d, -1
  00042	41 8d 50 02	 lea	 edx, QWORD PTR [r8+2]
  00046	e8 00 00 00 00	 call	 luaD_hook
; Line 455
  0004b	48 03 73 38	 add	 rsi, QWORD PTR [rbx+56]
$LN1@luaD_posca:
; Line 457
  0004f	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00053	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00057	48 89 4b 28	 mov	 QWORD PTR [rbx+40], rcx
$LN2@luaD_posca:
; Line 460
  0005b	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  0005f	4c 8b 07	 mov	 r8, QWORD PTR [rdi]
; Line 462
  00062	44 8b cd	 mov	 r9d, ebp
  00065	48 8b d6	 mov	 rdx, rsi
  00068	48 8b cb	 mov	 rcx, rbx
  0006b	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  00070	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
  00074	e8 00 00 00 00	 call	 moveresults
; Line 463
  00079	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0007e	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00083	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00088	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0008d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00091	41 5e		 pop	 r14
  00093	c3		 ret	 0
luaD_poscall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_pcall
_TEXT	SEGMENT
L$ = 64
func$ = 72
u$ = 80
old_top$ = 88
ef$ = 96
luaD_pcall PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 715
$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 56		 push	 r14
  00018	41 57		 push	 r15
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 721
  0001e	48 8b 44 24 60	 mov	 rax, QWORD PTR ef$[rsp]
  00023	48 8b a9 b0 00
	00 00		 mov	 rbp, QWORD PTR [rcx+176]
  0002a	4c 8b 71 20	 mov	 r14, QWORD PTR [rcx+32]
  0002e	44 0f b6 b9 c9
	00 00 00	 movzx	 r15d, BYTE PTR [rcx+201]
  00036	44 0f b7 a1 c4
	00 00 00	 movzx	 r12d, WORD PTR [rcx+196]
  0003e	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax
  00045	49 8b d9	 mov	 rbx, r9
  00048	48 8b f9	 mov	 rdi, rcx
; Line 722
  0004b	e8 00 00 00 00	 call	 luaD_rawrunprotected
  00050	8b f0		 mov	 esi, eax
; Line 723
  00052	85 c0		 test	 eax, eax
  00054	74 39		 je	 SHORT $LN4@luaD_pcall
; Line 724
  00056	48 03 5f 38	 add	 rbx, QWORD PTR [rdi+56]
; Line 725
  0005a	48 8b cf	 mov	 rcx, rdi
  0005d	48 8b d3	 mov	 rdx, rbx
  00060	e8 00 00 00 00	 call	 luaF_close
; Line 726
  00065	4c 8b c3	 mov	 r8, rbx
  00068	8b d6		 mov	 edx, esi
  0006a	48 8b cf	 mov	 rcx, rdi
  0006d	e8 00 00 00 00	 call	 seterrorobj
; Line 730
  00072	48 8b cf	 mov	 rcx, rdi
  00075	4c 89 77 20	 mov	 QWORD PTR [rdi+32], r14
  00079	44 88 bf c9 00
	00 00		 mov	 BYTE PTR [rdi+201], r15b
  00080	66 44 89 a7 c4
	00 00 00	 mov	 WORD PTR [rdi+196], r12w
  00088	e8 00 00 00 00	 call	 luaD_shrinkstack
; Line 733
  0008d	8b c6		 mov	 eax, esi
$LN4@luaD_pcall:
; Line 734
  0008f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00094	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00099	48 89 af b0 00
	00 00		 mov	 QWORD PTR [rdi+176], rbp
  000a0	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000a5	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  000aa	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ae	41 5f		 pop	 r15
  000b0	41 5e		 pop	 r14
  000b2	41 5c		 pop	 r12
  000b4	c3		 ret	 0
luaD_pcall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_callnoyield
_TEXT	SEGMENT
L$ = 48
func$ = 56
nResults$ = 64
luaD_callnoyield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 499
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 500
  00006	66 ff 81 c4 00
	00 00		 inc	 WORD PTR [rcx+196]
  0000d	48 8b d9	 mov	 rbx, rcx
; Line 501
  00010	e8 00 00 00 00	 call	 luaD_call
; Line 502
  00015	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0001a	66 01 83 c4 00
	00 00		 add	 WORD PTR [rbx+196], ax
; Line 503
  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
luaD_callnoyield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_call
_TEXT	SEGMENT
L$ = 48
func$ = 56
nResults$ = 64
luaD_call PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 487
$LN15:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 488
  00006	66 ff 81 c6 00
	00 00		 inc	 WORD PTR [rcx+198]
  0000d	0f b7 81 c6 00
	00 00		 movzx	 eax, WORD PTR [rcx+198]
  00014	48 8b d9	 mov	 rbx, rcx
  00017	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  0001c	66 3b c1	 cmp	 ax, cx
  0001f	72 0c		 jb	 SHORT $LN5@luaD_call
; Line 489
  00021	74 30		 je	 SHORT $LN12@luaD_call
  00023	b9 e1 00 00 00	 mov	 ecx, 225		; 000000e1H
  00028	66 3b c1	 cmp	 ax, cx
  0002b	73 36		 jae	 SHORT $LN14@luaD_call
$LN5@luaD_call:
; Line 490
  0002d	48 8b cb	 mov	 rcx, rbx
  00030	e8 00 00 00 00	 call	 luaD_precall
  00035	85 c0		 test	 eax, eax
  00037	75 08		 jne	 SHORT $LN1@luaD_call
; Line 491
  00039	48 8b cb	 mov	 rcx, rbx
  0003c	e8 00 00 00 00	 call	 luaV_execute
$LN1@luaD_call:
; Line 492
  00041	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00046	66 01 83 c6 00
	00 00		 add	 WORD PTR [rbx+198], ax
; Line 493
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5b		 pop	 rbx
  00052	c3		 ret	 0
$LN12@luaD_call:
; Line 489
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@EJOGNINL@C?5stack?5overflow?$AA@
  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	e8 00 00 00 00	 call	 luaG_runerror
  00062	cc		 int	 3
$LN14@luaD_call:
  00063	ba 06 00 00 00	 mov	 edx, 6
  00068	48 8b cb	 mov	 rcx, rbx
  0006b	e8 00 00 00 00	 call	 luaD_throw
  00070	cc		 int	 3
$LN11@luaD_call:
luaD_call ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_precall
_TEXT	SEGMENT
L$ = 80
func$ = 88
nresults$ = 96
luaD_precall PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 339
$LN42:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 55		 push	 r13
  00007	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 342
  0000b	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  0000e	45 8b e8	 mov	 r13d, r8d
  00011	48 8b fa	 mov	 rdi, rdx
  00014	83 e0 3f	 and	 eax, 63			; 0000003fH
  00017	48 8b d9	 mov	 rbx, rcx
  0001a	83 f8 06	 cmp	 eax, 6
  0001d	74 63		 je	 SHORT $LN14@luaD_preca
  0001f	90		 npad	 1
$LL32@luaD_preca:
  00020	83 f8 16	 cmp	 eax, 22
  00023	0f 84 00 01 00
	00		 je	 $LN19@luaD_preca
  00029	83 f8 26	 cmp	 eax, 38			; 00000026H
  0002c	0f 84 ee 00 00
	00		 je	 $LN20@luaD_preca
; Line 392
  00032	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00036	48 2b 43 10	 sub	 rax, QWORD PTR [rbx+16]
  0003a	48 83 e0 f0	 and	 rax, -16
  0003e	48 83 f8 10	 cmp	 rax, 16
  00042	7f 28		 jg	 SHORT $LN3@luaD_preca
  00044	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00048	48 2b 7b 38	 sub	 rdi, QWORD PTR [rbx+56]
  0004c	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00051	7e 08		 jle	 SHORT $LN2@luaD_preca
  00053	48 8b cb	 mov	 rcx, rbx
  00056	e8 00 00 00 00	 call	 luaC_step
$LN2@luaD_preca:
  0005b	ba 01 00 00 00	 mov	 edx, 1
  00060	48 8b cb	 mov	 rcx, rbx
  00063	e8 00 00 00 00	 call	 luaD_growstack
  00068	48 03 7b 38	 add	 rdi, QWORD PTR [rbx+56]
$LN3@luaD_preca:
; Line 393
  0006c	48 8b d7	 mov	 rdx, rdi
  0006f	48 8b cb	 mov	 rcx, rbx
  00072	e8 00 00 00 00	 call	 tryfuncTM
  00077	8b 47 08	 mov	 eax, DWORD PTR [rdi+8]
  0007a	83 e0 3f	 and	 eax, 63			; 0000003fH
  0007d	83 f8 06	 cmp	 eax, 6
  00080	75 9e		 jne	 SHORT $LL32@luaD_preca
$LN14@luaD_preca:
; Line 368
  00082	48 8b 07	 mov	 rax, QWORD PTR [rdi]
; Line 369
  00085	48 8b 73 10	 mov	 rsi, QWORD PTR [rbx+16]
  00089	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  0008e	48 8b 68 18	 mov	 rbp, QWORD PTR [rax+24]
; Line 371
  00092	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00096	48 2b f7	 sub	 rsi, rdi
  00099	48 2b 43 10	 sub	 rax, QWORD PTR [rbx+16]
  0009d	4c 89 74 24 58	 mov	 QWORD PTR [rsp+88], r14
  000a2	44 0f b6 75 0c	 movzx	 r14d, BYTE PTR [rbp+12]
  000a7	48 c1 fe 04	 sar	 rsi, 4
  000ab	48 c1 f8 04	 sar	 rax, 4
  000af	4c 89 7c 24 60	 mov	 QWORD PTR [rsp+96], r15
  000b4	ff ce		 dec	 esi
  000b6	45 8b e6	 mov	 r12d, r14d
  000b9	49 3b c6	 cmp	 rax, r14
  000bc	7f 26		 jg	 SHORT $LN13@luaD_preca
  000be	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000c2	48 2b 7b 38	 sub	 rdi, QWORD PTR [rbx+56]
  000c6	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  000cb	7e 08		 jle	 SHORT $LN12@luaD_preca
  000cd	48 8b cb	 mov	 rcx, rbx
  000d0	e8 00 00 00 00	 call	 luaC_step
$LN12@luaD_preca:
  000d5	41 8b d6	 mov	 edx, r14d
  000d8	48 8b cb	 mov	 rcx, rbx
  000db	e8 00 00 00 00	 call	 luaD_growstack
  000e0	48 03 7b 38	 add	 rdi, QWORD PTR [rbx+56]
$LN13@luaD_preca:
; Line 372
  000e4	45 33 f6	 xor	 r14d, r14d
  000e7	80 7d 0b 01	 cmp	 BYTE PTR [rbp+11], 1
  000eb	0f 84 f5 00 00
	00		 je	 $LN10@luaD_preca
; Line 373
  000f1	0f b6 45 0a	 movzx	 eax, BYTE PTR [rbp+10]
  000f5	3b f0		 cmp	 esi, eax
  000f7	7d 1e		 jge	 SHORT $LN7@luaD_preca
  000f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@luaD_preca:
; Line 374
  00100	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00104	ff c6		 inc	 esi
  00106	44 89 70 08	 mov	 DWORD PTR [rax+8], r14d
  0010a	48 83 43 10 10	 add	 QWORD PTR [rbx+16], 16
  0010f	0f b6 45 0a	 movzx	 eax, BYTE PTR [rbp+10]
  00113	3b f0		 cmp	 esi, eax
  00115	7c e9		 jl	 SHORT $LL9@luaD_preca
$LN7@luaD_preca:
; Line 375
  00117	4c 8d 7f 10	 lea	 r15, QWORD PTR [rdi+16]
; Line 377
  0011b	e9 d7 00 00 00	 jmp	 $LN6@luaD_preca
$LN20@luaD_preca:
; Line 344
  00120	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00123	48 8b 68 18	 mov	 rbp, QWORD PTR [rax+24]
; Line 345
  00127	eb 03		 jmp	 SHORT $Cfunc$43
$LN19@luaD_preca:
; Line 347
  00129	48 8b 2f	 mov	 rbp, QWORD PTR [rdi]
$Cfunc$43:
; Line 350
  0012c	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00130	48 2b 43 10	 sub	 rax, QWORD PTR [rbx+16]
  00134	48 83 e0 f0	 and	 rax, -16
  00138	48 3d 40 01 00
	00		 cmp	 rax, 320		; 00000140H
  0013e	7f 28		 jg	 SHORT $LN18@luaD_preca
  00140	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00144	48 2b 7b 38	 sub	 rdi, QWORD PTR [rbx+56]
  00148	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0014d	7e 08		 jle	 SHORT $LN17@luaD_preca
  0014f	48 8b cb	 mov	 rcx, rbx
  00152	e8 00 00 00 00	 call	 luaC_step
$LN17@luaD_preca:
  00157	ba 14 00 00 00	 mov	 edx, 20
  0015c	48 8b cb	 mov	 rcx, rbx
  0015f	e8 00 00 00 00	 call	 luaD_growstack
  00164	48 03 7b 38	 add	 rdi, QWORD PTR [rbx+56]
$LN18@luaD_preca:
; Line 351
  00168	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0016c	48 8b 70 18	 mov	 rsi, QWORD PTR [rax+24]
  00170	48 85 f6	 test	 rsi, rsi
  00173	75 0b		 jne	 SHORT $LN26@luaD_preca
  00175	48 8b cb	 mov	 rcx, rbx
  00178	e8 00 00 00 00	 call	 luaE_extendCI
  0017d	48 8b f0	 mov	 rsi, rax
$LN26@luaD_preca:
  00180	48 89 73 20	 mov	 QWORD PTR [rbx+32], rsi
; Line 352
  00184	66 44 89 6e 40	 mov	 WORD PTR [rsi+64], r13w
; Line 353
  00189	48 89 3e	 mov	 QWORD PTR [rsi], rdi
; Line 354
  0018c	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
; Line 356
  00190	c6 46 42 00	 mov	 BYTE PTR [rsi+66], 0
  00194	48 05 40 01 00
	00		 add	 rax, 320		; 00000140H
  0019a	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
; Line 357
  0019e	f6 83 c8 00 00
	00 01		 test	 BYTE PTR [rbx+200], 1
  001a5	74 0e		 je	 SHORT $LN15@luaD_preca
; Line 358
  001a7	41 83 c8 ff	 or	 r8d, -1
  001ab	33 d2		 xor	 edx, edx
  001ad	48 8b cb	 mov	 rcx, rbx
  001b0	e8 00 00 00 00	 call	 luaD_hook
$LN15@luaD_preca:
; Line 360
  001b5	48 8b cb	 mov	 rcx, rbx
  001b8	ff d5		 call	 rbp
; Line 363
  001ba	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  001be	48 8b d6	 mov	 rdx, rsi
  001c1	48 63 c8	 movsxd	 rcx, eax
  001c4	44 8b c8	 mov	 r9d, eax
  001c7	48 c1 e1 04	 shl	 rcx, 4
  001cb	4c 2b c1	 sub	 r8, rcx
  001ce	48 8b cb	 mov	 rcx, rbx
  001d1	e8 00 00 00 00	 call	 luaD_poscall
; Line 364
  001d6	b8 01 00 00 00	 mov	 eax, 1
; Line 397
  001db	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001df	41 5d		 pop	 r13
  001e1	5f		 pop	 rdi
  001e2	5e		 pop	 rsi
  001e3	5d		 pop	 rbp
  001e4	5b		 pop	 rbx
  001e5	c3		 ret	 0
$LN10@luaD_preca:
; Line 378
  001e6	44 8b c6	 mov	 r8d, esi
  001e9	48 8b d5	 mov	 rdx, rbp
  001ec	48 8b cb	 mov	 rcx, rbx
  001ef	e8 00 00 00 00	 call	 adjust_varargs
  001f4	4c 8b f8	 mov	 r15, rax
$LN6@luaD_preca:
; Line 379
  001f7	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  001fb	48 8b 71 18	 mov	 rsi, QWORD PTR [rcx+24]
  001ff	48 85 f6	 test	 rsi, rsi
  00202	75 0b		 jne	 SHORT $LN28@luaD_preca
  00204	48 8b cb	 mov	 rcx, rbx
  00207	e8 00 00 00 00	 call	 luaE_extendCI
  0020c	48 8b f0	 mov	 rsi, rax
$LN28@luaD_preca:
  0020f	48 89 73 20	 mov	 QWORD PTR [rbx+32], rsi
; Line 382
  00213	4c 89 7e 20	 mov	 QWORD PTR [rsi+32], r15
; Line 383
  00217	4d 03 e4	 add	 r12, r12
  0021a	4b 8d 0c e7	 lea	 rcx, QWORD PTR [r15+r12*8]
  0021e	4c 8b 7c 24 60	 mov	 r15, QWORD PTR [rsp+96]
  00223	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
  00228	48 89 4e 08	 mov	 QWORD PTR [rsi+8], rcx
  0022c	66 44 89 6e 40	 mov	 WORD PTR [rsi+64], r13w
  00231	48 89 3e	 mov	 QWORD PTR [rsi], rdi
  00234	48 89 4b 10	 mov	 QWORD PTR [rbx+16], rcx
; Line 385
  00238	48 8b 4d 38	 mov	 rcx, QWORD PTR [rbp+56]
; Line 386
  0023c	c6 46 42 02	 mov	 BYTE PTR [rsi+66], 2
  00240	48 89 4e 28	 mov	 QWORD PTR [rsi+40], rcx
; Line 387
  00244	f6 83 c8 00 00
	00 01		 test	 BYTE PTR [rbx+200], 1
  0024b	74 3c		 je	 SHORT $LN30@luaD_preca
; Line 388
  0024d	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00251	48 83 46 28 04	 add	 QWORD PTR [rsi+40], 4
  00256	f6 40 42 02	 test	 BYTE PTR [rax+66], 2
  0025a	74 19		 je	 SHORT $LN29@luaD_preca
  0025c	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00260	8b 48 fc	 mov	 ecx, DWORD PTR [rax-4]
  00263	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00266	80 f9 25	 cmp	 cl, 37			; 00000025H
  00269	75 0a		 jne	 SHORT $LN29@luaD_preca
  0026b	c6 46 42 22	 mov	 BYTE PTR [rsi+66], 34	; 00000022H
  0026f	41 be 04 00 00
	00		 mov	 r14d, 4
$LN29@luaD_preca:
  00275	41 83 c8 ff	 or	 r8d, -1
  00279	41 8b d6	 mov	 edx, r14d
  0027c	48 8b cb	 mov	 rcx, rbx
  0027f	e8 00 00 00 00	 call	 luaD_hook
  00284	48 83 46 28 fc	 add	 QWORD PTR [rsi+40], -4
$LN30@luaD_preca:
; Line 389
  00289	33 c0		 xor	 eax, eax
  0028b	4c 8b 74 24 58	 mov	 r14, QWORD PTR [rsp+88]
; Line 397
  00290	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00294	41 5d		 pop	 r13
  00296	5f		 pop	 rdi
  00297	5e		 pop	 rsi
  00298	5d		 pop	 rbp
  00299	5b		 pop	 rbx
  0029a	c3		 ret	 0
luaD_precall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_hook
_TEXT	SEGMENT
ar$1 = 32
__$ArrayPad$ = 160
L$ = 224
event$ = 232
line$ = 240
luaD_hook PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 245
$LN7:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	56		 push	 rsi
  00005	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 246
  0001e	48 8b b1 a8 00
	00 00		 mov	 rsi, QWORD PTR [rcx+168]
  00025	48 8b d9	 mov	 rbx, rcx
; Line 247
  00028	48 85 f6	 test	 rsi, rsi
  0002b	0f 84 b4 00 00
	00		 je	 $LN3@luaD_hook
  00031	80 b9 c9 00 00
	00 00		 cmp	 BYTE PTR [rcx+201], 0
  00038	0f 84 a7 00 00
	00		 je	 $LN3@luaD_hook
; Line 255
  0003e	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
  00042	49 89 7b e8	 mov	 QWORD PTR [r11-24], rdi
  00046	48 8b 79 20	 mov	 rdi, QWORD PTR [rcx+32]
  0004a	48 2b 41 10	 sub	 rax, QWORD PTR [rcx+16]
  0004e	4d 89 73 e0	 mov	 QWORD PTR [r11-32], r14
  00052	4c 8b 71 10	 mov	 r14, QWORD PTR [rcx+16]
  00056	4c 2b 71 38	 sub	 r14, QWORD PTR [rcx+56]
  0005a	4d 89 7b d8	 mov	 QWORD PTR [r11-40], r15
  0005e	4c 8b 7f 08	 mov	 r15, QWORD PTR [rdi+8]
  00062	4c 2b 79 38	 sub	 r15, QWORD PTR [rcx+56]
  00066	48 83 e0 f0	 and	 rax, -16
  0006a	89 54 24 20	 mov	 DWORD PTR ar$1[rsp], edx
  0006e	44 89 44 24 48	 mov	 DWORD PTR ar$1[rsp+40], r8d
  00073	49 89 7b c0	 mov	 QWORD PTR [r11-64], rdi
  00077	48 3d 40 01 00
	00		 cmp	 rax, 320		; 00000140H
  0007d	7f 0a		 jg	 SHORT $LN2@luaD_hook
  0007f	ba 14 00 00 00	 mov	 edx, 20
  00084	e8 00 00 00 00	 call	 luaD_growstack
$LN2@luaD_hook:
; Line 256
  00089	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
; Line 261
  0008d	48 8d 54 24 20	 lea	 rdx, QWORD PTR ar$1[rsp]
  00092	48 8b cb	 mov	 rcx, rbx
  00095	48 05 40 01 00
	00		 add	 rax, 320		; 00000140H
  0009b	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax
  0009f	c6 83 c9 00 00
	00 00		 mov	 BYTE PTR [rbx+201], 0
  000a6	80 4f 42 04	 or	 BYTE PTR [rdi+66], 4
  000aa	ff d6		 call	 rsi
; Line 265
  000ac	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000b0	c6 83 c9 00 00
	00 01		 mov	 BYTE PTR [rbx+201], 1
  000b7	49 03 cf	 add	 rcx, r15
  000ba	4c 8b bc 24 b0
	00 00 00	 mov	 r15, QWORD PTR [rsp+176]
  000c2	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
; Line 266
  000c6	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000ca	49 03 ce	 add	 rcx, r14
  000cd	4c 8b b4 24 b8
	00 00 00	 mov	 r14, QWORD PTR [rsp+184]
  000d5	48 89 4b 10	 mov	 QWORD PTR [rbx+16], rcx
; Line 267
  000d9	80 67 42 fb	 and	 BYTE PTR [rdi+66], 251	; 000000fbH
  000dd	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+192]
$LN3@luaD_hook:
; Line 269
  000e5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ed	48 33 cc	 xor	 rcx, rsp
  000f0	e8 00 00 00 00	 call	 __security_check_cookie
  000f5	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000fc	5e		 pop	 rsi
  000fd	5b		 pop	 rbx
  000fe	c3		 ret	 0
luaD_hook ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaD_protectedparser
_TEXT	SEGMENT
p$ = 32
L$ = 176
z$ = 184
name$ = 192
mode$ = 200
luaD_protectedparser PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 777
$LN7:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
; Line 786
  0001f	48 8b 59 10	 mov	 rbx, QWORD PTR [rcx+16]
  00023	66 ff 81 c4 00
	00 00		 inc	 WORD PTR [rcx+196]
  0002a	48 8b 69 20	 mov	 rbp, QWORD PTR [rcx+32]
  0002e	48 2b 59 38	 sub	 rbx, QWORD PTR [rcx+56]
  00032	44 0f b7 b9 c4
	00 00 00	 movzx	 r15d, WORD PTR [rcx+196]
  0003a	44 0f b6 b1 c9
	00 00 00	 movzx	 r14d, BYTE PTR [rcx+201]
  00042	4c 8b a1 b0 00
	00 00		 mov	 r12, QWORD PTR [rcx+176]
  00049	48 89 54 24 20	 mov	 QWORD PTR p$[rsp], rdx
  0004e	45 33 ed	 xor	 r13d, r13d
  00051	4c 89 40 d0	 mov	 QWORD PTR [rax-48], r8
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:f_parser
  0005c	4c 8d 44 24 20	 lea	 r8, QWORD PTR p$[rsp]
  00061	48 8b f9	 mov	 rdi, rcx
  00064	4c 89 48 c8	 mov	 QWORD PTR [rax-56], r9
  00068	4c 89 68 98	 mov	 QWORD PTR [rax-104], r13
  0006c	44 89 68 a4	 mov	 DWORD PTR [rax-92], r13d
  00070	4c 89 68 a8	 mov	 QWORD PTR [rax-88], r13
  00074	44 89 68 b4	 mov	 DWORD PTR [rax-76], r13d
  00078	4c 89 68 b8	 mov	 QWORD PTR [rax-72], r13
  0007c	44 89 68 c4	 mov	 DWORD PTR [rax-60], r13d
  00080	4c 89 68 80	 mov	 QWORD PTR [rax-128], r13
  00084	4c 89 68 90	 mov	 QWORD PTR [rax-112], r13
  00088	e8 00 00 00 00	 call	 luaD_rawrunprotected
  0008d	8b f0		 mov	 esi, eax
  0008f	85 c0		 test	 eax, eax
  00091	74 37		 je	 SHORT $LN3@luaD_prote
  00093	48 03 5f 38	 add	 rbx, QWORD PTR [rdi+56]
  00097	48 8b cf	 mov	 rcx, rdi
  0009a	48 8b d3	 mov	 rdx, rbx
  0009d	e8 00 00 00 00	 call	 luaF_close
  000a2	4c 8b c3	 mov	 r8, rbx
  000a5	8b d6		 mov	 edx, esi
  000a7	48 8b cf	 mov	 rcx, rdi
  000aa	e8 00 00 00 00	 call	 seterrorobj
  000af	48 8b cf	 mov	 rcx, rdi
  000b2	48 89 6f 20	 mov	 QWORD PTR [rdi+32], rbp
  000b6	44 88 b7 c9 00
	00 00		 mov	 BYTE PTR [rdi+201], r14b
  000bd	66 44 89 bf c4
	00 00 00	 mov	 WORD PTR [rdi+196], r15w
  000c5	e8 00 00 00 00	 call	 luaD_shrinkstack
$LN3@luaD_prote:
; Line 787
  000ca	4c 8b 44 24 38	 mov	 r8, QWORD PTR p$[rsp+24]
  000cf	48 8b 54 24 28	 mov	 rdx, QWORD PTR p$[rsp+8]
  000d4	45 33 c9	 xor	 r9d, r9d
  000d7	48 8b cf	 mov	 rcx, rdi
  000da	4c 89 a7 b0 00
	00 00		 mov	 QWORD PTR [rdi+176], r12
  000e1	e8 00 00 00 00	 call	 luaM_realloc_
; Line 788
  000e6	4c 63 44 24 4c	 movsxd	 r8, DWORD PTR p$[rsp+44]
  000eb	48 8b 54 24 40	 mov	 rdx, QWORD PTR p$[rsp+32]
  000f0	4d 03 c0	 add	 r8, r8
  000f3	45 33 c9	 xor	 r9d, r9d
  000f6	48 8b cf	 mov	 rcx, rdi
  000f9	48 89 44 24 28	 mov	 QWORD PTR p$[rsp+8], rax
  000fe	4c 89 6c 24 38	 mov	 QWORD PTR p$[rsp+24], r13
  00103	e8 00 00 00 00	 call	 luaM_realloc_
; Line 789
  00108	48 63 44 24 5c	 movsxd	 rax, DWORD PTR p$[rsp+60]
  0010d	48 8b 54 24 50	 mov	 rdx, QWORD PTR p$[rsp+48]
  00112	45 33 c9	 xor	 r9d, r9d
  00115	4c 8d 04 40	 lea	 r8, QWORD PTR [rax+rax*2]
  00119	48 8b cf	 mov	 rcx, rdi
  0011c	49 c1 e0 03	 shl	 r8, 3
  00120	e8 00 00 00 00	 call	 luaM_realloc_
; Line 790
  00125	48 63 44 24 6c	 movsxd	 rax, DWORD PTR p$[rsp+76]
  0012a	48 8b 54 24 60	 mov	 rdx, QWORD PTR p$[rsp+64]
  0012f	4c 8d 04 40	 lea	 r8, QWORD PTR [rax+rax*2]
  00133	45 33 c9	 xor	 r9d, r9d
  00136	48 8b cf	 mov	 rcx, rdi
  00139	49 c1 e0 03	 shl	 r8, 3
  0013d	e8 00 00 00 00	 call	 luaM_realloc_
; Line 793
  00142	4c 8d 9c 24 80
	00 00 00	 lea	 r11, QWORD PTR [rsp+128]
  0014a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0014f	66 01 87 c4 00
	00 00		 add	 WORD PTR [rdi+196], ax
  00156	49 8b 5b 30	 mov	 rbx, QWORD PTR [r11+48]
  0015a	49 8b 6b 38	 mov	 rbp, QWORD PTR [r11+56]
  0015e	8b c6		 mov	 eax, esi
  00160	49 8b 73 40	 mov	 rsi, QWORD PTR [r11+64]
  00164	49 8b e3	 mov	 rsp, r11
  00167	41 5f		 pop	 r15
  00169	41 5e		 pop	 r14
  0016b	41 5d		 pop	 r13
  0016d	41 5c		 pop	 r12
  0016f	5f		 pop	 rdi
  00170	c3		 ret	 0
luaD_protectedparser ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lua_isyieldable
_TEXT	SEGMENT
L$ = 8
lua_isyieldable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 681
  00000	33 c0		 xor	 eax, eax
  00002	66 39 81 c4 00
	00 00		 cmp	 WORD PTR [rcx+196], ax
  00009	0f 94 c0	 sete	 al
; Line 682
  0000c	c3		 ret	 0
lua_isyieldable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lua_resume
_TEXT	SEGMENT
status$ = 48
L$ = 48
from$ = 56
nargs$ = 64
lua_resume PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 649
$LN16:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 651
  0000f	0f b7 b9 c4 00
	00 00		 movzx	 edi, WORD PTR [rcx+196]
  00016	48 8b d9	 mov	 rbx, rcx
; Line 654
  00019	48 85 d2	 test	 rdx, rdx
  0001c	74 0b		 je	 SHORT $LN9@lua_resume
  0001e	0f b7 82 c6 00
	00 00		 movzx	 eax, WORD PTR [rdx+198]
  00025	ff c0		 inc	 eax
  00027	eb 05		 jmp	 SHORT $LN10@lua_resume
$LN9@lua_resume:
  00029	b8 01 00 00 00	 mov	 eax, 1
$LN10@lua_resume:
  0002e	66 89 81 c6 00
	00 00		 mov	 WORD PTR [rcx+198], ax
; Line 655
  00035	33 c0		 xor	 eax, eax
; Line 657
  00037	4c 8d 44 24 40	 lea	 r8, QWORD PTR nargs$[rsp]
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:resume
  00043	66 89 81 c4 00
	00 00		 mov	 WORD PTR [rcx+196], ax
  0004a	e8 00 00 00 00	 call	 luaD_rawrunprotected
  0004f	89 44 24 30	 mov	 DWORD PTR status$[rsp], eax
; Line 658
  00053	83 f8 ff	 cmp	 eax, -1
  00056	75 07		 jne	 SHORT $LN11@lua_resume
; Line 659
  00058	b8 02 00 00 00	 mov	 eax, 2
; Line 660
  0005d	eb 5c		 jmp	 SHORT $LN2@lua_resume
$LN11@lua_resume:
; Line 661
  0005f	83 f8 01	 cmp	 eax, 1
  00062	7e 57		 jle	 SHORT $LN2@lua_resume
$LL4@lua_resume:
  00064	8b d0		 mov	 edx, eax
  00066	48 8b cb	 mov	 rcx, rbx
  00069	e8 00 00 00 00	 call	 recover
  0006e	85 c0		 test	 eax, eax
  00070	74 1f		 je	 SHORT $LN3@lua_resume
; Line 663
  00072	4c 8d 44 24 30	 lea	 r8, QWORD PTR status$[rsp]
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unroll
  0007e	48 8b cb	 mov	 rcx, rbx
  00081	e8 00 00 00 00	 call	 luaD_rawrunprotected
  00086	89 44 24 30	 mov	 DWORD PTR status$[rsp], eax
  0008a	83 f8 01	 cmp	 eax, 1
  0008d	7f d5		 jg	 SHORT $LL4@lua_resume
; Line 665
  0008f	eb 2a		 jmp	 SHORT $LN2@lua_resume
$LN3@lua_resume:
  00091	8b 44 24 30	 mov	 eax, DWORD PTR status$[rsp]
  00095	83 f8 01	 cmp	 eax, 1
  00098	7e 21		 jle	 SHORT $LN2@lua_resume
; Line 667
  0009a	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  0009e	8b d0		 mov	 edx, eax
  000a0	48 8b cb	 mov	 rcx, rbx
  000a3	88 43 0c	 mov	 BYTE PTR [rbx+12], al
  000a6	e8 00 00 00 00	 call	 seterrorobj
; Line 668
  000ab	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000af	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000b3	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000b7	8b 44 24 30	 mov	 eax, DWORD PTR status$[rsp]
$LN2@lua_resume:
; Line 673
  000bb	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000c0	66 89 bb c4 00
	00 00		 mov	 WORD PTR [rbx+196], di
  000c7	66 01 8b c6 00
	00 00		 add	 WORD PTR [rbx+198], cx
; Line 677
  000ce	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000d3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d7	5f		 pop	 rdi
  000d8	c3		 ret	 0
lua_resume ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lua_yieldk
_TEXT	SEGMENT
L$ = 48
nresults$ = 56
ctx$ = 64
k$ = 72
lua_yieldk PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldo.c
; Line 686
$LN14:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 691
  00004	66 83 b9 c4 00
	00 00 00	 cmp	 WORD PTR [rcx+196], 0
  0000c	4c 8b 59 20	 mov	 r11, QWORD PTR [rcx+32]
  00010	4c 8b d1	 mov	 r10, rcx
  00013	76 0f		 jbe	 SHORT $LN4@lua_yieldk
; Line 692
  00015	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00019	48 3b 88 c8 00
	00 00		 cmp	 rcx, QWORD PTR [rax+200]
  00020	75 2a		 jne	 SHORT $LN10@lua_yieldk
  00022	eb 35		 jmp	 SHORT $LN12@lua_yieldk
$LN4@lua_yieldk:
; Line 697
  00024	c6 41 0c 01	 mov	 BYTE PTR [rcx+12], 1
; Line 698
  00028	49 8b 03	 mov	 rax, QWORD PTR [r11]
  0002b	48 2b 41 38	 sub	 rax, QWORD PTR [rcx+56]
; Line 699
  0002f	41 f6 43 42 02	 test	 BYTE PTR [r11+66], 2
  00034	49 89 43 38	 mov	 QWORD PTR [r11+56], rax
  00038	74 07		 je	 SHORT $LN3@lua_yieldk
; Line 710
  0003a	33 c0		 xor	 eax, eax
; Line 711
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
$LN3@lua_yieldk:
; Line 703
  00041	4d 89 4b 20	 mov	 QWORD PTR [r11+32], r9
  00045	4d 85 c9	 test	 r9, r9
  00048	74 20		 je	 SHORT $LN1@lua_yieldk
  0004a	eb 1a		 jmp	 SHORT $LN13@lua_yieldk
$LN10@lua_yieldk:
; Line 693
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@PNAEIJLG@attempt?5to?5yield?5across?5a?5C?9call@
  00053	e8 00 00 00 00	 call	 luaG_runerror
  00058	cc		 int	 3
$LN12@lua_yieldk:
; Line 695
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@CHKMHBBM@attempt?5to?5yield?5from?5outside?5a?5@
  00060	e8 00 00 00 00	 call	 luaG_runerror
  00065	cc		 int	 3
$LN13@lua_yieldk:
; Line 704
  00066	4d 89 43 30	 mov	 QWORD PTR [r11+48], r8
$LN1@lua_yieldk:
; Line 705
  0006a	49 8b 42 10	 mov	 rax, QWORD PTR [r10+16]
  0006e	48 63 ca	 movsxd	 rcx, edx
; Line 706
  00071	ba 01 00 00 00	 mov	 edx, 1
  00076	48 ff c1	 inc	 rcx
  00079	48 c1 e1 04	 shl	 rcx, 4
  0007d	48 2b c1	 sub	 rax, rcx
  00080	49 8b ca	 mov	 rcx, r10
  00083	49 89 03	 mov	 QWORD PTR [r11], rax
  00086	e8 00 00 00 00	 call	 luaD_throw
  0008b	cc		 int	 3
$LN9@lua_yieldk:
lua_yieldk ENDP
_TEXT	ENDS
END
