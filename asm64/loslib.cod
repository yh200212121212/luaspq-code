; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CG@FKHONFPM@aAbBcCdDeFgGhHIjmMnprRStTuUVwWxX@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	??_C@_06KGEDDHLK@cCxXyY?$AA@			; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_0O@NHEIKIJK@deHImMSuUVwWy?$AA@		; `string'
PUBLIC	??_C@_03NFKEKGGK@all?$AA@			; `string'
PUBLIC	??_C@_07FCFLCBKH@collate?$AA@			; `string'
PUBLIC	??_C@_05JGEDHNAD@ctype?$AA@			; `string'
PUBLIC	??_C@_08BIOBDOAM@monetary?$AA@			; `string'
PUBLIC	??_C@_07MMLECJPG@numeric?$AA@			; `string'
PUBLIC	??_C@_04CLCEDBPF@time?$AA@			; `string'
PUBLIC	??_C@_05DDECJJKE@clock?$AA@			; `string'
PUBLIC	??_C@_04JNIHBGGH@date?$AA@			; `string'
PUBLIC	??_C@_08PDOPCMOG@difftime?$AA@			; `string'
PUBLIC	??_C@_07EMGJIMLB@execute?$AA@			; `string'
PUBLIC	??_C@_04MKNBDEPB@exit?$AA@			; `string'
PUBLIC	??_C@_06EPDNLFGH@getenv?$AA@			; `string'
PUBLIC	??_C@_06LEMKAMD@remove?$AA@			; `string'
PUBLIC	??_C@_06LMEAOBLB@rename?$AA@			; `string'
PUBLIC	??_C@_09IOBOFJNA@setlocale?$AA@			; `string'
PUBLIC	??_C@_07KOJJABMD@tmpname?$AA@			; `string'
;	COMDAT ??_C@_07KOJJABMD@tmpname?$AA@
CONST	SEGMENT
??_C@_07KOJJABMD@tmpname?$AA@ DB 'tmpname', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOBOFJNA@setlocale?$AA@
CONST	SEGMENT
??_C@_09IOBOFJNA@setlocale?$AA@ DB 'setlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMEAOBLB@rename?$AA@
CONST	SEGMENT
??_C@_06LMEAOBLB@rename?$AA@ DB 'rename', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEMKAMD@remove?$AA@
CONST	SEGMENT
??_C@_06LEMKAMD@remove?$AA@ DB 'remove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPDNLFGH@getenv?$AA@
CONST	SEGMENT
??_C@_06EPDNLFGH@getenv?$AA@ DB 'getenv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKNBDEPB@exit?$AA@
CONST	SEGMENT
??_C@_04MKNBDEPB@exit?$AA@ DB 'exit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EMGJIMLB@execute?$AA@
CONST	SEGMENT
??_C@_07EMGJIMLB@execute?$AA@ DB 'execute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PDOPCMOG@difftime?$AA@
CONST	SEGMENT
??_C@_08PDOPCMOG@difftime?$AA@ DB 'difftime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JNIHBGGH@date?$AA@
CONST	SEGMENT
??_C@_04JNIHBGGH@date?$AA@ DB 'date', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DDECJJKE@clock?$AA@
CONST	SEGMENT
??_C@_05DDECJJKE@clock?$AA@ DB 'clock', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLCEDBPF@time?$AA@
CONST	SEGMENT
??_C@_04CLCEDBPF@time?$AA@ DB 'time', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MMLECJPG@numeric?$AA@
CONST	SEGMENT
??_C@_07MMLECJPG@numeric?$AA@ DB 'numeric', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BIOBDOAM@monetary?$AA@
CONST	SEGMENT
??_C@_08BIOBDOAM@monetary?$AA@ DB 'monetary', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JGEDHNAD@ctype?$AA@
CONST	SEGMENT
??_C@_05JGEDHNAD@ctype?$AA@ DB 'ctype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FCFLCBKH@collate?$AA@
CONST	SEGMENT
??_C@_07FCFLCBKH@collate?$AA@ DB 'collate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NFKEKGGK@all?$AA@
CONST	SEGMENT
??_C@_03NFKEKGGK@all?$AA@ DB 'all', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NHEIKIJK@deHImMSuUVwWy?$AA@
CONST	SEGMENT
??_C@_0O@NHEIKIJK@deHImMSuUVwWy?$AA@ DB 'deHImMSuUVwWy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06KGEDDHLK@cCxXyY?$AA@
CONST	SEGMENT
??_C@_06KGEDDHLK@cCxXyY?$AA@ DB 'cCxXyY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FKHONFPM@aAbBcCdDeFgGhHIjmMnprRStTuUVwWxX@
CONST	SEGMENT
??_C@_0CG@FKHONFPM@aAbBcCdDeFgGhHIjmMnprRStTuUVwWxX@ DB 'aAbBcCdDeFgGhHIj'
	DB	'mMnprRStTuUVwWxXyYzZ%', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
?options@?1??checkoption@@9@9 DQ FLAT:??_C@_0CG@FKHONFPM@aAbBcCdDeFgGhHIjmMnprRStTuUVwWxX@ ; `checkoption'::`2'::options
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_01DDCIFGEA@E?$AA@
	DQ	FLAT:??_C@_06KGEDDHLK@cCxXyY?$AA@
	DQ	FLAT:??_C@_01MJMHLOMK@O?$AA@
	DQ	FLAT:??_C@_0O@NHEIKIJK@deHImMSuUVwWy?$AA@
?cat@?1??os_setlocale@@9@9 DD 00H			; `os_setlocale'::`2'::cat
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
?catnames@?1??os_setlocale@@9@9 DQ FLAT:??_C@_03NFKEKGGK@all?$AA@ ; `os_setlocale'::`2'::catnames
	DQ	FLAT:??_C@_07FCFLCBKH@collate?$AA@
	DQ	FLAT:??_C@_05JGEDHNAD@ctype?$AA@
	DQ	FLAT:??_C@_08BIOBDOAM@monetary?$AA@
	DQ	FLAT:??_C@_07MMLECJPG@numeric?$AA@
	DQ	FLAT:??_C@_04CLCEDBPF@time?$AA@
	DQ	0000000000000000H
syslib	DQ	FLAT:??_C@_05DDECJJKE@clock?$AA@
	DQ	FLAT:os_clock
	DQ	FLAT:??_C@_04JNIHBGGH@date?$AA@
	DQ	FLAT:os_date
	DQ	FLAT:??_C@_08PDOPCMOG@difftime?$AA@
	DQ	FLAT:os_difftime
	DQ	FLAT:??_C@_07EMGJIMLB@execute?$AA@
	DQ	FLAT:os_execute
	DQ	FLAT:??_C@_04MKNBDEPB@exit?$AA@
	DQ	FLAT:os_exit
	DQ	FLAT:??_C@_06EPDNLFGH@getenv?$AA@
	DQ	FLAT:os_getenv
	DQ	FLAT:??_C@_06LEMKAMD@remove?$AA@
	DQ	FLAT:os_remove
	DQ	FLAT:??_C@_06LMEAOBLB@rename?$AA@
	DQ	FLAT:os_rename
	DQ	FLAT:??_C@_09IOBOFJNA@setlocale?$AA@
	DQ	FLAT:os_setlocale
	DQ	FLAT:??_C@_04CLCEDBPF@time?$AA@
	DQ	FLAT:os_time
	DQ	FLAT:??_C@_07KOJJABMD@tmpname?$AA@
	DQ	FLAT:os_tmpname
	DQ	0000000000000000H
	DQ	0000000000000000H
CONST	ENDS
PUBLIC	luaopen_os
PUBLIC	??_C@_0CF@CFMGMNIN@unable?5to?5generate?5a?5unique?5file@ ; `string'
PUBLIC	??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@ ; `string'
PUBLIC	??_C@_0CB@DJMEIEGF@field?5?8?$CFs?8?5missing?5in?5date?5table@ ; `string'
PUBLIC	??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@ ; `string'
PUBLIC	??_C@_0CE@MFIJMOHJ@invalid?5conversion?5specifier?5?8?$CF?$CF@ ; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc?$AA@			; `string'
PUBLIC	??_C@_0DH@HAACGOCO@time?5result?5cannot?5be?5represente@ ; `string'
PUBLIC	??_C@_02HODHFJCJ@?$CKt?$AA@			; `string'
PUBLIC	??_C@_03KHPNBODO@sec?$AA@			; `string'
PUBLIC	??_C@_03KLIPLJLL@min?$AA@			; `string'
PUBLIC	??_C@_04LMOJGCPE@hour?$AA@			; `string'
PUBLIC	??_C@_03NNBHCDBP@day?$AA@			; `string'
PUBLIC	??_C@_05MEBAADFH@month?$AA@			; `string'
PUBLIC	??_C@_04JFPLDHAO@year?$AA@			; `string'
PUBLIC	??_C@_04HBIDDHMB@wday?$AA@			; `string'
PUBLIC	??_C@_04MOLDIJKA@yday?$AA@			; `string'
PUBLIC	??_C@_05HGBEJAHO@isdst?$AA@			; `string'
PUBLIC	__real@405bc00000000000
PUBLIC	__real@408f400000000000
EXTRN	__imp_setlocale:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp_getenv:PROC
EXTRN	__imp_system:PROC
EXTRN	__imp_strchr:PROC
EXTRN	__imp_clock:PROC
EXTRN	__imp_strftime:PROC
EXTRN	__imp__difftime64:PROC
EXTRN	__imp__gmtime64:PROC
EXTRN	__imp__localtime64:PROC
EXTRN	__imp__mktime64:PROC
EXTRN	__imp__time64:PROC
EXTRN	__imp_remove:PROC
EXTRN	__imp_rename:PROC
EXTRN	__imp_tmpnam:PROC
EXTRN	lua_close:PROC
EXTRN	lua_settop:PROC
EXTRN	lua_type:PROC
EXTRN	lua_tointegerx:PROC
EXTRN	lua_toboolean:PROC
EXTRN	lua_pushnumber:PROC
EXTRN	lua_pushinteger:PROC
EXTRN	lua_pushstring:PROC
EXTRN	lua_pushfstring:PROC
EXTRN	lua_pushboolean:PROC
EXTRN	lua_getfield:PROC
EXTRN	lua_createtable:PROC
EXTRN	lua_setfield:PROC
EXTRN	luaL_checkversion_:PROC
EXTRN	luaL_argerror:PROC
EXTRN	luaL_checklstring:PROC
EXTRN	luaL_optlstring:PROC
EXTRN	luaL_checkinteger:PROC
EXTRN	luaL_optinteger:PROC
EXTRN	luaL_checktype:PROC
EXTRN	luaL_error:PROC
EXTRN	luaL_checkoption:PROC
EXTRN	luaL_fileresult:PROC
EXTRN	luaL_execresult:PROC
EXTRN	luaL_setfuncs:PROC
EXTRN	luaL_buffinit:PROC
EXTRN	luaL_prepbuffsize:PROC
EXTRN	luaL_pushresult:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaopen_os DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$luaopen_os
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$os_execute DD imagerel os_execute
	DD	imagerel os_execute+86
	DD	imagerel $unwind$os_execute
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$os_remove DD imagerel os_remove
	DD	imagerel os_remove+65
	DD	imagerel $unwind$os_remove
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$os_rename DD imagerel os_rename
	DD	imagerel os_rename+83
	DD	imagerel $unwind$os_rename
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$os_tmpname DD imagerel os_tmpname
	DD	imagerel os_tmpname+108
	DD	imagerel $unwind$os_tmpname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$os_getenv DD imagerel os_getenv
	DD	imagerel os_getenv+52
	DD	imagerel $unwind$os_getenv
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$os_clock DD imagerel os_clock
	DD	imagerel os_clock+50
	DD	imagerel $unwind$os_clock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setfield DD imagerel setfield
	DD	imagerel setfield+50
	DD	imagerel $unwind$setfield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setboolfield DD imagerel setboolfield
	DD	imagerel setboolfield+56
	DD	imagerel $unwind$setboolfield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getboolfield DD imagerel getboolfield
	DD	imagerel getboolfield+68
	DD	imagerel $unwind$getboolfield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getfield DD imagerel getfield
	DD	imagerel getfield+200
	DD	imagerel $unwind$getfield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$checkoption DD imagerel checkoption
	DD	imagerel checkoption+212
	DD	imagerel $unwind$checkoption
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$os_date DD imagerel os_date
	DD	imagerel os_date+576
	DD	imagerel $unwind$os_date
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$os_date DD imagerel os_date+576
	DD	imagerel os_date+731
	DD	imagerel $chain$0$os_date
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$os_date DD imagerel os_date+731
	DD	imagerel os_date+783
	DD	imagerel $chain$1$os_date
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$os_time DD imagerel os_time
	DD	imagerel os_time+63
	DD	imagerel $unwind$os_time
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$os_time DD imagerel os_time+63
	DD	imagerel os_time+911
	DD	imagerel $chain$1$os_time
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$os_time DD imagerel os_time+911
	DD	imagerel os_time+1018
	DD	imagerel $chain$2$os_time
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$os_difftime DD imagerel os_difftime
	DD	imagerel os_difftime+78
	DD	imagerel $unwind$os_difftime
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$os_setlocale DD imagerel os_setlocale
	DD	imagerel os_setlocale+108
	DD	imagerel $unwind$os_setlocale
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$os_exit DD imagerel os_exit
	DD	imagerel os_exit+11
	DD	imagerel $unwind$os_exit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$os_exit DD imagerel os_exit+11
	DD	imagerel os_exit+97
	DD	imagerel $chain$0$os_exit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$os_exit DD imagerel os_exit+97
	DD	imagerel os_exit+114
	DD	imagerel $chain$1$os_exit
pdata	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_05HGBEJAHO@isdst?$AA@
CONST	SEGMENT
??_C@_05HGBEJAHO@isdst?$AA@ DB 'isdst', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MOLDIJKA@yday?$AA@
CONST	SEGMENT
??_C@_04MOLDIJKA@yday?$AA@ DB 'yday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HBIDDHMB@wday?$AA@
CONST	SEGMENT
??_C@_04HBIDDHMB@wday?$AA@ DB 'wday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFPLDHAO@year?$AA@
CONST	SEGMENT
??_C@_04JFPLDHAO@year?$AA@ DB 'year', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEBAADFH@month?$AA@
CONST	SEGMENT
??_C@_05MEBAADFH@month?$AA@ DB 'month', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NNBHCDBP@day?$AA@
CONST	SEGMENT
??_C@_03NNBHCDBP@day?$AA@ DB 'day', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMOJGCPE@hour?$AA@
CONST	SEGMENT
??_C@_04LMOJGCPE@hour?$AA@ DB 'hour', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KLIPLJLL@min?$AA@
CONST	SEGMENT
??_C@_03KLIPLJLL@min?$AA@ DB 'min', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHPNBODO@sec?$AA@
CONST	SEGMENT
??_C@_03KHPNBODO@sec?$AA@ DB 'sec', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HODHFJCJ@?$CKt?$AA@
CONST	SEGMENT
??_C@_02HODHFJCJ@?$CKt?$AA@ DB '*t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HAACGOCO@time?5result?5cannot?5be?5represente@
CONST	SEGMENT
??_C@_0DH@HAACGOCO@time?5result?5cannot?5be?5represente@ DB 'time result '
	DB	'cannot be represented in this installation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc?$AA@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc?$AA@ DB '%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MFIJMOHJ@invalid?5conversion?5specifier?5?8?$CF?$CF@
CONST	SEGMENT
??_C@_0CE@MFIJMOHJ@invalid?5conversion?5specifier?5?8?$CF?$CF@ DB 'invali'
	DB	'd conversion specifier ''%%%s''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@
CONST	SEGMENT
??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@ DB 'field ''%s'''
	DB	' out-of-bounds', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DJMEIEGF@field?5?8?$CFs?8?5missing?5in?5date?5table@
CONST	SEGMENT
??_C@_0CB@DJMEIEGF@field?5?8?$CFs?8?5missing?5in?5date?5table@ DB 'field '
	DB	'''%s'' missing in date table', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@
CONST	SEGMENT
??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@ DB 'field ''%s'
	DB	''' not an integer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CFMGMNIN@unable?5to?5generate?5a?5unique?5file@
CONST	SEGMENT
??_C@_0CF@CFMGMNIN@unable?5to?5generate?5a?5unique?5file@ DB 'unable to g'
	DB	'enerate a unique filename', 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$os_exit DD 021H
	DD	imagerel os_exit
	DD	imagerel os_exit+11
	DD	imagerel $unwind$os_exit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$os_exit DD 020521H
	DD	063405H
	DD	imagerel os_exit
	DD	imagerel os_exit+11
	DD	imagerel $unwind$os_exit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$os_exit DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$os_setlocale DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$os_difftime DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$os_time DD 021H
	DD	imagerel os_time
	DD	imagerel os_time+63
	DD	imagerel $unwind$os_time
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$os_time DD 041121H
	DD	0106411H
	DD	0f5405H
	DD	imagerel os_time
	DD	imagerel os_time+63
	DD	imagerel $unwind$os_time
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$os_time DD 041919H
	DD	011340aH
	DD	07006b20aH
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$os_date DD 021H
	DD	imagerel os_date
	DD	imagerel os_date+576
	DD	imagerel $unwind$os_date
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$os_date DD 020821H
	DD	040f7408H
	DD	imagerel os_date
	DD	imagerel os_date+576
	DD	imagerel $unwind$os_date
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$os_date DD 072a19H
	DD	04115418H
	DD	04103418H
	DD	040c0118H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	02050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checkoption DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getfield DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0f0145218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getboolfield DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setboolfield DD 040f01H
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setfield DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$os_clock DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$os_getenv DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$os_tmpname DD 021519H
	DD	030027206H
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$os_rename DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$os_remove DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$os_execute DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaopen_os DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT os_exit
_TEXT	SEGMENT
L$ = 48
os_exit	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 352
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 354
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 lua_type
; Line 355
  00018	ba 01 00 00 00	 mov	 edx, 1
  0001d	48 8b cb	 mov	 rcx, rbx
  00020	3b c2		 cmp	 eax, edx
  00022	75 0f		 jne	 SHORT $LN4@os_exit
  00024	e8 00 00 00 00	 call	 lua_toboolean
  00029	33 ff		 xor	 edi, edi
  0002b	85 c0		 test	 eax, eax
  0002d	40 0f 94 c7	 sete	 dil
; Line 356
  00031	eb 0b		 jmp	 SHORT $LN3@os_exit
$LN4@os_exit:
; Line 357
  00033	45 33 c0	 xor	 r8d, r8d
  00036	e8 00 00 00 00	 call	 luaL_optinteger
  0003b	48 8b f8	 mov	 rdi, rax
$LN3@os_exit:
; Line 358
  0003e	ba 02 00 00 00	 mov	 edx, 2
  00043	48 8b cb	 mov	 rcx, rbx
  00046	e8 00 00 00 00	 call	 lua_toboolean
  0004b	85 c0		 test	 eax, eax
  0004d	74 08		 je	 SHORT $LN2@os_exit
; Line 359
  0004f	48 8b cb	 mov	 rcx, rbx
  00052	e8 00 00 00 00	 call	 lua_close
$LN2@os_exit:
; Line 360
  00057	48 85 db	 test	 rbx, rbx
  0005a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005f	74 09		 je	 SHORT $LN1@os_exit
  00061	8b cf		 mov	 ecx, edi
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00069	cc		 int	 3
$LN1@os_exit:
; Line 361
  0006a	33 c0		 xor	 eax, eax
; Line 362
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
$LN8@os_exit:
os_exit	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT os_setlocale
_TEXT	SEGMENT
L$ = 48
os_setlocale PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 340
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 345
  0000a	45 33 c9	 xor	 r9d, r9d
  0000d	45 33 c0	 xor	 r8d, r8d
  00010	48 8b f9	 mov	 rdi, rcx
  00013	41 8d 51 01	 lea	 edx, QWORD PTR [r9+1]
  00017	e8 00 00 00 00	 call	 luaL_optlstring
; Line 346
  0001c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?catnames@?1??os_setlocale@@9@9
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03NFKEKGGK@all?$AA@
  0002a	ba 02 00 00 00	 mov	 edx, 2
  0002f	48 8b cf	 mov	 rcx, rdi
  00032	48 8b d8	 mov	 rbx, rax
  00035	e8 00 00 00 00	 call	 luaL_checkoption
; Line 347
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?cat@?1??os_setlocale@@9@9
  00041	48 8b d3	 mov	 rdx, rbx
  00044	48 63 c8	 movsxd	 rcx, eax
  00047	41 8b 0c 88	 mov	 ecx, DWORD PTR [r8+rcx*4]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setlocale
  00051	48 8b cf	 mov	 rcx, rdi
  00054	48 8b d0	 mov	 rdx, rax
  00057	e8 00 00 00 00	 call	 lua_pushstring
; Line 349
  0005c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
  0006b	c3		 ret	 0
os_setlocale ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT os_difftime
_TEXT	SEGMENT
L$ = 48
os_difftime PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 330
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 331
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 332
  00017	ba 02 00 00 00	 mov	 edx, 2
  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	48 8b d8	 mov	 rbx, rax
  00022	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 333
  00027	48 8b cb	 mov	 rcx, rbx
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__difftime64
  00033	48 8b cf	 mov	 rcx, rdi
  00036	0f 28 c8	 movaps	 xmm1, xmm0
  00039	e8 00 00 00 00	 call	 lua_pushnumber
; Line 335
  0003e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
os_difftime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT os_time
_TEXT	SEGMENT
isnum$1 = 32
isnum$2 = 32
isnum$3 = 32
isnum$4 = 32
isnum$5 = 32
isnum$6 = 32
ts$7 = 40
__$ArrayPad$ = 80
L$ = 112
os_time	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 306
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 308
  00019	ba 01 00 00 00	 mov	 edx, 1
  0001e	48 8b d9	 mov	 rbx, rcx
  00021	e8 00 00 00 00	 call	 lua_type
  00026	85 c0		 test	 eax, eax
  00028	7f 0d		 jg	 SHORT $LN4@os_time
; Line 309
  0002a	33 c9		 xor	 ecx, ecx
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64
; Line 310
  00032	e9 80 03 00 00	 jmp	 $LN69@os_time
$LN4@os_time:
; Line 312
  00037	ba 01 00 00 00	 mov	 edx, 1
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	48 89 6c 24 78	 mov	 QWORD PTR [rsp+120], rbp
  00044	44 8d 42 04	 lea	 r8d, QWORD PTR [rdx+4]
  00048	48 89 b4 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rsi
  00050	e8 00 00 00 00	 call	 luaL_checktype
; Line 313
  00055	ba 01 00 00 00	 mov	 edx, 1
  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	e8 00 00 00 00	 call	 lua_settop
; Line 314
  00062	83 cf ff	 or	 edi, -1
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03KHPNBODO@sec?$AA@
  0006c	8b d7		 mov	 edx, edi
  0006e	48 8b cb	 mov	 rcx, rbx
  00071	e8 00 00 00 00	 call	 lua_getfield
  00076	4c 8d 44 24 20	 lea	 r8, QWORD PTR isnum$6[rsp]
  0007b	8b d7		 mov	 edx, edi
  0007d	48 8b cb	 mov	 rcx, rbx
  00080	8b e8		 mov	 ebp, eax
  00082	e8 00 00 00 00	 call	 lua_tointegerx
  00087	83 7c 24 20 00	 cmp	 DWORD PTR isnum$6[rsp], 0
  0008c	48 8b f0	 mov	 rsi, rax
  0008f	75 1c		 jne	 SHORT $LN15@os_time
  00091	85 ed		 test	 ebp, ebp
  00093	74 09		 je	 SHORT $LN14@os_time
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@
  0009c	eb 33		 jmp	 SHORT $LN70@os_time
$LN14@os_time:
  0009e	33 f6		 xor	 esi, esi
  000a0	48 8b cb	 mov	 rcx, rbx
  000a3	8d 56 fe	 lea	 edx, QWORD PTR [rsi-2]
  000a6	e8 00 00 00 00	 call	 lua_settop
  000ab	eb 35		 jmp	 SHORT $LN16@os_time
$LN15@os_time:
  000ad	48 05 ff ff ff
	3f		 add	 rax, 1073741823		; 3fffffffH
  000b3	48 3d fe ff ff
	7f		 cmp	 rax, 2147483646		; 7ffffffeH
  000b9	77 0f		 ja	 SHORT $LN9@os_time
  000bb	ba fe ff ff ff	 mov	 edx, -2
  000c0	48 8b cb	 mov	 rcx, rbx
  000c3	e8 00 00 00 00	 call	 lua_settop
  000c8	eb 18		 jmp	 SHORT $LN16@os_time
$LN9@os_time:
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@
$LN70@os_time:
  000d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03KHPNBODO@sec?$AA@
  000d8	48 8b cb	 mov	 rcx, rbx
  000db	e8 00 00 00 00	 call	 luaL_error
  000e0	8b f0		 mov	 esi, eax
$LN16@os_time:
; Line 315
  000e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03KLIPLJLL@min?$AA@
  000e9	8b d7		 mov	 edx, edi
  000eb	48 8b cb	 mov	 rcx, rbx
  000ee	89 74 24 28	 mov	 DWORD PTR ts$7[rsp], esi
  000f2	e8 00 00 00 00	 call	 lua_getfield
  000f7	4c 8d 44 24 20	 lea	 r8, QWORD PTR isnum$5[rsp]
  000fc	8b d7		 mov	 edx, edi
  000fe	48 8b cb	 mov	 rcx, rbx
  00101	8b e8		 mov	 ebp, eax
  00103	e8 00 00 00 00	 call	 lua_tointegerx
  00108	83 7c 24 20 00	 cmp	 DWORD PTR isnum$5[rsp], 0
  0010d	48 8b f0	 mov	 rsi, rax
  00110	75 1c		 jne	 SHORT $LN24@os_time
  00112	85 ed		 test	 ebp, ebp
  00114	74 09		 je	 SHORT $LN23@os_time
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@
  0011d	eb 33		 jmp	 SHORT $LN71@os_time
$LN23@os_time:
  0011f	33 f6		 xor	 esi, esi
  00121	48 8b cb	 mov	 rcx, rbx
  00124	8d 56 fe	 lea	 edx, QWORD PTR [rsi-2]
  00127	e8 00 00 00 00	 call	 lua_settop
  0012c	eb 35		 jmp	 SHORT $LN25@os_time
$LN24@os_time:
  0012e	48 05 ff ff ff
	3f		 add	 rax, 1073741823		; 3fffffffH
  00134	48 3d fe ff ff
	7f		 cmp	 rax, 2147483646		; 7ffffffeH
  0013a	77 0f		 ja	 SHORT $LN18@os_time
  0013c	ba fe ff ff ff	 mov	 edx, -2
  00141	48 8b cb	 mov	 rcx, rbx
  00144	e8 00 00 00 00	 call	 lua_settop
  00149	eb 18		 jmp	 SHORT $LN25@os_time
$LN18@os_time:
  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@
$LN71@os_time:
  00152	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03KLIPLJLL@min?$AA@
  00159	48 8b cb	 mov	 rcx, rbx
  0015c	e8 00 00 00 00	 call	 luaL_error
  00161	8b f0		 mov	 esi, eax
$LN25@os_time:
; Line 316
  00163	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04LMOJGCPE@hour?$AA@
  0016a	8b d7		 mov	 edx, edi
  0016c	48 8b cb	 mov	 rcx, rbx
  0016f	89 74 24 2c	 mov	 DWORD PTR ts$7[rsp+4], esi
  00173	e8 00 00 00 00	 call	 lua_getfield
  00178	4c 8d 44 24 20	 lea	 r8, QWORD PTR isnum$4[rsp]
  0017d	8b d7		 mov	 edx, edi
  0017f	48 8b cb	 mov	 rcx, rbx
  00182	8b e8		 mov	 ebp, eax
  00184	e8 00 00 00 00	 call	 lua_tointegerx
  00189	83 7c 24 20 00	 cmp	 DWORD PTR isnum$4[rsp], 0
  0018e	48 8b f0	 mov	 rsi, rax
  00191	75 1f		 jne	 SHORT $LN33@os_time
  00193	85 ed		 test	 ebp, ebp
  00195	74 09		 je	 SHORT $LN32@os_time
  00197	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@
  0019e	eb 36		 jmp	 SHORT $LN72@os_time
$LN32@os_time:
  001a0	be 0c 00 00 00	 mov	 esi, 12
  001a5	48 8b cb	 mov	 rcx, rbx
  001a8	8d 56 f2	 lea	 edx, QWORD PTR [rsi-14]
  001ab	e8 00 00 00 00	 call	 lua_settop
  001b0	eb 35		 jmp	 SHORT $LN34@os_time
$LN33@os_time:
  001b2	48 05 ff ff ff
	3f		 add	 rax, 1073741823		; 3fffffffH
  001b8	48 3d fe ff ff
	7f		 cmp	 rax, 2147483646		; 7ffffffeH
  001be	77 0f		 ja	 SHORT $LN27@os_time
  001c0	ba fe ff ff ff	 mov	 edx, -2
  001c5	48 8b cb	 mov	 rcx, rbx
  001c8	e8 00 00 00 00	 call	 lua_settop
  001cd	eb 18		 jmp	 SHORT $LN34@os_time
$LN27@os_time:
  001cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@
$LN72@os_time:
  001d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04LMOJGCPE@hour?$AA@
  001dd	48 8b cb	 mov	 rcx, rbx
  001e0	e8 00 00 00 00	 call	 luaL_error
  001e5	8b f0		 mov	 esi, eax
$LN34@os_time:
; Line 317
  001e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03NNBHCDBP@day?$AA@
  001ee	8b d7		 mov	 edx, edi
  001f0	48 8b cb	 mov	 rcx, rbx
  001f3	89 74 24 30	 mov	 DWORD PTR ts$7[rsp+8], esi
  001f7	e8 00 00 00 00	 call	 lua_getfield
  001fc	4c 8d 44 24 20	 lea	 r8, QWORD PTR isnum$3[rsp]
  00201	8b d7		 mov	 edx, edi
  00203	48 8b cb	 mov	 rcx, rbx
  00206	8b e8		 mov	 ebp, eax
  00208	e8 00 00 00 00	 call	 lua_tointegerx
  0020d	83 7c 24 20 00	 cmp	 DWORD PTR isnum$3[rsp], 0
  00212	48 8b cb	 mov	 rcx, rbx
  00215	48 8b f0	 mov	 rsi, rax
  00218	75 1d		 jne	 SHORT $LN42@os_time
  0021a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03NNBHCDBP@day?$AA@
  00221	85 ed		 test	 ebp, ebp
  00223	74 09		 je	 SHORT $LN41@os_time
  00225	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@
  0022c	eb 31		 jmp	 SHORT $LN73@os_time
$LN41@os_time:
  0022e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@DJMEIEGF@field?5?8?$CFs?8?5missing?5in?5date?5table@
  00235	eb 28		 jmp	 SHORT $LN73@os_time
$LN42@os_time:
  00237	48 05 ff ff ff
	3f		 add	 rax, 1073741823		; 3fffffffH
  0023d	48 3d fe ff ff
	7f		 cmp	 rax, 2147483646		; 7ffffffeH
  00243	77 0c		 ja	 SHORT $LN36@os_time
  00245	ba fe ff ff ff	 mov	 edx, -2
  0024a	e8 00 00 00 00	 call	 lua_settop
  0024f	eb 15		 jmp	 SHORT $LN43@os_time
$LN36@os_time:
  00251	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03NNBHCDBP@day?$AA@
  00258	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@
$LN73@os_time:
  0025f	e8 00 00 00 00	 call	 luaL_error
  00264	8b f0		 mov	 esi, eax
$LN43@os_time:
; Line 318
  00266	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MEBAADFH@month?$AA@
  0026d	8b d7		 mov	 edx, edi
  0026f	48 8b cb	 mov	 rcx, rbx
  00272	89 74 24 34	 mov	 DWORD PTR ts$7[rsp+12], esi
  00276	e8 00 00 00 00	 call	 lua_getfield
  0027b	4c 8d 44 24 20	 lea	 r8, QWORD PTR isnum$2[rsp]
  00280	8b d7		 mov	 edx, edi
  00282	48 8b cb	 mov	 rcx, rbx
  00285	8b e8		 mov	 ebp, eax
  00287	e8 00 00 00 00	 call	 lua_tointegerx
  0028c	83 7c 24 20 00	 cmp	 DWORD PTR isnum$2[rsp], 0
  00291	48 8b cb	 mov	 rcx, rbx
  00294	48 8b f0	 mov	 rsi, rax
  00297	75 1d		 jne	 SHORT $LN51@os_time
  00299	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MEBAADFH@month?$AA@
  002a0	85 ed		 test	 ebp, ebp
  002a2	74 09		 je	 SHORT $LN50@os_time
  002a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@
  002ab	eb 34		 jmp	 SHORT $LN74@os_time
$LN50@os_time:
  002ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@DJMEIEGF@field?5?8?$CFs?8?5missing?5in?5date?5table@
  002b4	eb 2b		 jmp	 SHORT $LN74@os_time
$LN51@os_time:
  002b6	48 05 ff ff ff
	3f		 add	 rax, 1073741823		; 3fffffffH
  002bc	48 3d fe ff ff
	7f		 cmp	 rax, 2147483646		; 7ffffffeH
  002c2	77 0f		 ja	 SHORT $LN45@os_time
  002c4	ba fe ff ff ff	 mov	 edx, -2
  002c9	e8 00 00 00 00	 call	 lua_settop
  002ce	8d 46 ff	 lea	 eax, DWORD PTR [rsi-1]
  002d1	eb 13		 jmp	 SHORT $LN52@os_time
$LN45@os_time:
  002d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MEBAADFH@month?$AA@
  002da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@
$LN74@os_time:
  002e1	e8 00 00 00 00	 call	 luaL_error
$LN52@os_time:
; Line 319
  002e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04JFPLDHAO@year?$AA@
  002ed	8b d7		 mov	 edx, edi
  002ef	48 8b cb	 mov	 rcx, rbx
  002f2	89 44 24 38	 mov	 DWORD PTR ts$7[rsp+16], eax
  002f6	e8 00 00 00 00	 call	 lua_getfield
  002fb	4c 8d 44 24 20	 lea	 r8, QWORD PTR isnum$1[rsp]
  00300	8b d7		 mov	 edx, edi
  00302	48 8b cb	 mov	 rcx, rbx
  00305	8b e8		 mov	 ebp, eax
  00307	e8 00 00 00 00	 call	 lua_tointegerx
  0030c	83 7c 24 20 00	 cmp	 DWORD PTR isnum$1[rsp], 0
  00311	48 8b cb	 mov	 rcx, rbx
  00314	48 8b f0	 mov	 rsi, rax
  00317	75 1d		 jne	 SHORT $LN60@os_time
  00319	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04JFPLDHAO@year?$AA@
  00320	85 ed		 test	 ebp, ebp
  00322	74 09		 je	 SHORT $LN59@os_time
  00324	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@
  0032b	eb 37		 jmp	 SHORT $LN75@os_time
$LN59@os_time:
  0032d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@DJMEIEGF@field?5?8?$CFs?8?5missing?5in?5date?5table@
  00334	eb 2e		 jmp	 SHORT $LN75@os_time
$LN60@os_time:
  00336	48 05 ff ff ff
	3f		 add	 rax, 1073741823		; 3fffffffH
  0033c	48 3d fe ff ff
	7f		 cmp	 rax, 2147483646		; 7ffffffeH
  00342	77 12		 ja	 SHORT $LN54@os_time
  00344	ba fe ff ff ff	 mov	 edx, -2
  00349	e8 00 00 00 00	 call	 lua_settop
  0034e	8d 86 94 f8 ff
	ff		 lea	 eax, DWORD PTR [rsi-1900]
  00354	eb 13		 jmp	 SHORT $LN61@os_time
$LN54@os_time:
  00356	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04JFPLDHAO@year?$AA@
  0035d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@
$LN75@os_time:
  00364	e8 00 00 00 00	 call	 luaL_error
$LN61@os_time:
; Line 320
  00369	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05HGBEJAHO@isdst?$AA@
  00370	8b d7		 mov	 edx, edi
  00372	48 8b cb	 mov	 rcx, rbx
  00375	89 44 24 3c	 mov	 DWORD PTR ts$7[rsp+20], eax
  00379	e8 00 00 00 00	 call	 lua_getfield
  0037e	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR [rsp+128]
  00386	48 8b 6c 24 78	 mov	 rbp, QWORD PTR [rsp+120]
  0038b	85 c0		 test	 eax, eax
  0038d	74 0c		 je	 SHORT $LN66@os_time
  0038f	8b d7		 mov	 edx, edi
  00391	48 8b cb	 mov	 rcx, rbx
  00394	e8 00 00 00 00	 call	 lua_toboolean
  00399	8b f8		 mov	 edi, eax
$LN66@os_time:
  0039b	ba fe ff ff ff	 mov	 edx, -2
  003a0	48 8b cb	 mov	 rcx, rbx
  003a3	e8 00 00 00 00	 call	 lua_settop
; Line 321
  003a8	48 8d 4c 24 28	 lea	 rcx, QWORD PTR ts$7[rsp]
  003ad	89 7c 24 48	 mov	 DWORD PTR ts$7[rsp+32], edi
  003b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mktime64
$LN69@os_time:
  003b7	48 8b f8	 mov	 rdi, rax
; Line 323
  003ba	48 83 f8 ff	 cmp	 rax, -1
  003be	75 0f		 jne	 SHORT $LN2@os_time
; Line 324
  003c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@HAACGOCO@time?5result?5cannot?5be?5represente@
  003c7	48 8b cb	 mov	 rcx, rbx
  003ca	e8 00 00 00 00	 call	 luaL_error
$LN2@os_time:
; Line 325
  003cf	48 8b d7	 mov	 rdx, rdi
  003d2	48 8b cb	 mov	 rcx, rbx
  003d5	e8 00 00 00 00	 call	 lua_pushinteger
; Line 326
  003da	b8 01 00 00 00	 mov	 eax, 1
; Line 327
  003df	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003e4	48 33 cc	 xor	 rcx, rsp
  003e7	e8 00 00 00 00	 call	 __security_check_cookie
  003ec	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR [rsp+136]
  003f4	48 83 c4 60	 add	 rsp, 96			; 00000060H
  003f8	5f		 pop	 rdi
  003f9	c3		 ret	 0
os_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT os_date
_TEXT	SEGMENT
cc$1 = 32
t$ = 40
b$2 = 48
__$ArrayPad$ = 8272
L$ = 8304
os_date	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 260
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	56		 push	 rsi
  0000b	b8 60 20 00 00	 mov	 eax, 8288		; 00002060H
  00010	e8 00 00 00 00	 call	 __chkstk
  00015	48 2b e0	 sub	 rsp, rax
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 50
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 261
  0002a	45 33 c9	 xor	 r9d, r9d
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HAOIJKIC@?$CFc?$AA@
  00034	48 8b f1	 mov	 rsi, rcx
  00037	41 8d 51 01	 lea	 edx, QWORD PTR [r9+1]
  0003b	e8 00 00 00 00	 call	 luaL_optlstring
; Line 262
  00040	ba 02 00 00 00	 mov	 edx, 2
  00045	48 8b ce	 mov	 rcx, rsi
  00048	48 8b d8	 mov	 rbx, rax
  0004b	e8 00 00 00 00	 call	 lua_type
  00050	85 c0		 test	 eax, eax
  00052	7f 0a		 jg	 SHORT $LN12@os_date
  00054	33 c9		 xor	 ecx, ecx
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64
  0005c	eb 0d		 jmp	 SHORT $LN47@os_date
$LN12@os_date:
  0005e	ba 02 00 00 00	 mov	 edx, 2
  00063	48 8b ce	 mov	 rcx, rsi
  00066	e8 00 00 00 00	 call	 luaL_checkinteger
$LN47@os_date:
  0006b	48 89 44 24 28	 mov	 QWORD PTR t$[rsp], rax
; Line 264
  00070	80 3b 21	 cmp	 BYTE PTR [rbx], 33	; 00000021H
; Line 265
  00073	48 8d 4c 24 28	 lea	 rcx, QWORD PTR t$[rsp]
  00078	75 0b		 jne	 SHORT $LN9@os_date
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__gmtime64
; Line 266
  00080	48 ff c3	 inc	 rbx
; Line 268
  00083	eb 06		 jmp	 SHORT $LN48@os_date
$LN9@os_date:
; Line 269
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__localtime64
$LN48@os_date:
  0008b	48 8b e8	 mov	 rbp, rax
; Line 270
  0008e	48 85 c0	 test	 rax, rax
  00091	75 0f		 jne	 SHORT $LN7@os_date
; Line 271
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@HAACGOCO@time?5result?5cannot?5be?5represente@
  0009a	48 8b ce	 mov	 rcx, rsi
  0009d	e8 00 00 00 00	 call	 luaL_error
$LN7@os_date:
; Line 272
  000a2	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  000a5	3a 05 00 00 00
	00		 cmp	 al, BYTE PTR ??_C@_02HODHFJCJ@?$CKt?$AA@
  000ab	0f 85 6d 01 00
	00		 jne	 $LN6@os_date
  000b1	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]
  000b5	3a 05 01 00 00
	00		 cmp	 al, BYTE PTR ??_C@_02HODHFJCJ@?$CKt?$AA@+1
  000bb	0f 85 5d 01 00
	00		 jne	 $LN6@os_date
  000c1	0f b6 43 02	 movzx	 eax, BYTE PTR [rbx+2]
  000c5	3a 05 02 00 00
	00		 cmp	 al, BYTE PTR ??_C@_02HODHFJCJ@?$CKt?$AA@+2
  000cb	0f 85 4d 01 00
	00		 jne	 $LN6@os_date
; Line 273
  000d1	33 d2		 xor	 edx, edx
  000d3	48 8b ce	 mov	 rcx, rsi
  000d6	44 8d 42 09	 lea	 r8d, QWORD PTR [rdx+9]
  000da	e8 00 00 00 00	 call	 lua_createtable
; Line 274
  000df	48 63 55 00	 movsxd	 rdx, DWORD PTR [rbp]
  000e3	48 8b ce	 mov	 rcx, rsi
  000e6	e8 00 00 00 00	 call	 lua_pushinteger
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03KHPNBODO@sec?$AA@
  000f2	ba fe ff ff ff	 mov	 edx, -2
  000f7	48 8b ce	 mov	 rcx, rsi
  000fa	e8 00 00 00 00	 call	 lua_setfield
; Line 275
  000ff	48 63 55 04	 movsxd	 rdx, DWORD PTR [rbp+4]
  00103	48 8b ce	 mov	 rcx, rsi
  00106	e8 00 00 00 00	 call	 lua_pushinteger
  0010b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03KLIPLJLL@min?$AA@
  00112	ba fe ff ff ff	 mov	 edx, -2
  00117	48 8b ce	 mov	 rcx, rsi
  0011a	e8 00 00 00 00	 call	 lua_setfield
; Line 276
  0011f	48 63 55 08	 movsxd	 rdx, DWORD PTR [rbp+8]
  00123	48 8b ce	 mov	 rcx, rsi
  00126	e8 00 00 00 00	 call	 lua_pushinteger
  0012b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04LMOJGCPE@hour?$AA@
  00132	ba fe ff ff ff	 mov	 edx, -2
  00137	48 8b ce	 mov	 rcx, rsi
  0013a	e8 00 00 00 00	 call	 lua_setfield
; Line 277
  0013f	48 63 55 0c	 movsxd	 rdx, DWORD PTR [rbp+12]
  00143	48 8b ce	 mov	 rcx, rsi
  00146	e8 00 00 00 00	 call	 lua_pushinteger
  0014b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03NNBHCDBP@day?$AA@
  00152	ba fe ff ff ff	 mov	 edx, -2
  00157	48 8b ce	 mov	 rcx, rsi
  0015a	e8 00 00 00 00	 call	 lua_setfield
; Line 278
  0015f	8b 45 10	 mov	 eax, DWORD PTR [rbp+16]
  00162	48 8b ce	 mov	 rcx, rsi
  00165	ff c0		 inc	 eax
  00167	48 63 d0	 movsxd	 rdx, eax
  0016a	e8 00 00 00 00	 call	 lua_pushinteger
  0016f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MEBAADFH@month?$AA@
  00176	ba fe ff ff ff	 mov	 edx, -2
  0017b	48 8b ce	 mov	 rcx, rsi
  0017e	e8 00 00 00 00	 call	 lua_setfield
; Line 279
  00183	8b 45 14	 mov	 eax, DWORD PTR [rbp+20]
  00186	48 8b ce	 mov	 rcx, rsi
  00189	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  0018e	48 63 d0	 movsxd	 rdx, eax
  00191	e8 00 00 00 00	 call	 lua_pushinteger
  00196	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04JFPLDHAO@year?$AA@
  0019d	ba fe ff ff ff	 mov	 edx, -2
  001a2	48 8b ce	 mov	 rcx, rsi
  001a5	e8 00 00 00 00	 call	 lua_setfield
; Line 280
  001aa	8b 45 18	 mov	 eax, DWORD PTR [rbp+24]
  001ad	48 8b ce	 mov	 rcx, rsi
  001b0	ff c0		 inc	 eax
  001b2	48 63 d0	 movsxd	 rdx, eax
  001b5	e8 00 00 00 00	 call	 lua_pushinteger
  001ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04HBIDDHMB@wday?$AA@
  001c1	ba fe ff ff ff	 mov	 edx, -2
  001c6	48 8b ce	 mov	 rcx, rsi
  001c9	e8 00 00 00 00	 call	 lua_setfield
; Line 281
  001ce	8b 45 1c	 mov	 eax, DWORD PTR [rbp+28]
  001d1	48 8b ce	 mov	 rcx, rsi
  001d4	ff c0		 inc	 eax
  001d6	48 63 d0	 movsxd	 rdx, eax
  001d9	e8 00 00 00 00	 call	 lua_pushinteger
  001de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04MOLDIJKA@yday?$AA@
  001e5	ba fe ff ff ff	 mov	 edx, -2
  001ea	48 8b ce	 mov	 rcx, rsi
  001ed	e8 00 00 00 00	 call	 lua_setfield
; Line 282
  001f2	8b 55 20	 mov	 edx, DWORD PTR [rbp+32]
  001f5	85 d2		 test	 edx, edx
  001f7	0f 88 e8 00 00
	00		 js	 $LN49@os_date
  001fd	48 8b ce	 mov	 rcx, rsi
  00200	e8 00 00 00 00	 call	 lua_pushboolean
  00205	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05HGBEJAHO@isdst?$AA@
  0020c	ba fe ff ff ff	 mov	 edx, -2
  00211	48 8b ce	 mov	 rcx, rsi
  00214	e8 00 00 00 00	 call	 lua_setfield
; Line 284
  00219	e9 c7 00 00 00	 jmp	 $LN49@os_date
$LN6@os_date:
; Line 288
  0021e	48 8d 54 24 30	 lea	 rdx, QWORD PTR b$2[rsp]
  00223	48 8b ce	 mov	 rcx, rsi
  00226	c6 44 24 20 25	 mov	 BYTE PTR cc$1[rsp], 37	; 00000025H
  0022b	e8 00 00 00 00	 call	 luaL_buffinit
; Line 289
  00230	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  00233	84 c0		 test	 al, al
  00235	0f 84 a0 00 00
	00		 je	 $LN3@os_date
  0023b	48 8b 54 24 40	 mov	 rdx, QWORD PTR b$2[rsp+16]
  00240	48 89 bc 24 78
	20 00 00	 mov	 QWORD PTR [rsp+8312], rdi
$LL4@os_date:
; Line 290
  00248	3c 25		 cmp	 al, 37			; 00000025H
  0024a	74 33		 je	 SHORT $LN2@os_date
; Line 291
  0024c	48 3b 54 24 38	 cmp	 rdx, QWORD PTR b$2[rsp+8]
  00251	72 14		 jb	 SHORT $LN14@os_date
  00253	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$2[rsp]
  00258	ba 01 00 00 00	 mov	 edx, 1
  0025d	e8 00 00 00 00	 call	 luaL_prepbuffsize
  00262	48 8b 54 24 40	 mov	 rdx, QWORD PTR b$2[rsp+16]
$LN14@os_date:
  00267	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]
  0026a	48 8b 44 24 30	 mov	 rax, QWORD PTR b$2[rsp]
  0026f	88 0c 10	 mov	 BYTE PTR [rax+rdx], cl
  00272	48 8b 54 24 40	 mov	 rdx, QWORD PTR b$2[rsp+16]
  00277	48 ff c2	 inc	 rdx
  0027a	48 ff c3	 inc	 rbx
; Line 292
  0027d	eb 44		 jmp	 SHORT $LN50@os_date
$LN2@os_date:
; Line 294
  0027f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$2[rsp]
  00284	ba fa 00 00 00	 mov	 edx, 250		; 000000faH
  00289	e8 00 00 00 00	 call	 luaL_prepbuffsize
; Line 295
  0028e	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  00292	4c 8d 44 24 20	 lea	 r8, QWORD PTR cc$1[rsp]
  00297	48 8b ce	 mov	 rcx, rsi
  0029a	48 8b f8	 mov	 rdi, rax
  0029d	e8 00 00 00 00	 call	 checkoption
; Line 296
  002a2	4c 8d 44 24 20	 lea	 r8, QWORD PTR cc$1[rsp]
  002a7	4c 8b cd	 mov	 r9, rbp
  002aa	ba fa 00 00 00	 mov	 edx, 250		; 000000faH
  002af	48 8b cf	 mov	 rcx, rdi
  002b2	48 8b d8	 mov	 rbx, rax
  002b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strftime
; Line 297
  002bb	48 8b 54 24 40	 mov	 rdx, QWORD PTR b$2[rsp+16]
  002c0	48 03 d0	 add	 rdx, rax
$LN50@os_date:
  002c3	48 89 54 24 40	 mov	 QWORD PTR b$2[rsp+16], rdx
  002c8	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  002cb	84 c0		 test	 al, al
  002cd	0f 85 75 ff ff
	ff		 jne	 $LL4@os_date
  002d3	48 8b bc 24 78
	20 00 00	 mov	 rdi, QWORD PTR [rsp+8312]
$LN3@os_date:
; Line 300
  002db	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$2[rsp]
  002e0	e8 00 00 00 00	 call	 luaL_pushresult
$LN49@os_date:
; Line 302
  002e5	b8 01 00 00 00	 mov	 eax, 1
; Line 303
  002ea	48 8b 8c 24 50
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002f2	48 33 cc	 xor	 rcx, rsp
  002f5	e8 00 00 00 00	 call	 __security_check_cookie
  002fa	4c 8d 9c 24 60
	20 00 00	 lea	 r11, QWORD PTR [rsp+8288]
  00302	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  00306	49 8b 6b 28	 mov	 rbp, QWORD PTR [r11+40]
  0030a	49 8b e3	 mov	 rsp, r11
  0030d	5e		 pop	 rsi
  0030e	c3		 ret	 0
os_date	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT checkoption
_TEXT	SEGMENT
L$ = 48
conv$ = 56
buff$ = 64
checkoption PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 232
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	49 8b f0	 mov	 rsi, r8
  0001d	48 8b fa	 mov	 rdi, rdx
  00020	48 8b e9	 mov	 rbp, rcx
; Line 235
  00023	33 db		 xor	 ebx, ebx
  00025	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:?options@?1??checkoption@@9@9
  0002c	0f 1f 40 00	 npad	 4
$LL7@checkoptio:
; Line 236
  00030	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  00033	84 c0		 test	 al, al
  00035	74 3a		 je	 SHORT $LN6@checkoptio
  00037	49 8b 0c de	 mov	 rcx, QWORD PTR [r14+rbx*8]
  0003b	0f be d0	 movsx	 edx, al
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00044	48 85 c0	 test	 rax, rax
  00047	74 28		 je	 SHORT $LN6@checkoptio
; Line 237
  00049	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  0004c	88 46 01	 mov	 BYTE PTR [rsi+1], al
; Line 238
  0004f	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  00052	49 8b 0c c6	 mov	 rcx, QWORD PTR [r14+rax*8]
  00056	80 39 00	 cmp	 BYTE PTR [rcx], 0
  00059	74 6f		 je	 SHORT $LN11@checkoptio
; Line 243
  0005b	0f b6 47 01	 movzx	 eax, BYTE PTR [rdi+1]
  0005f	84 c0		 test	 al, al
  00061	74 0e		 je	 SHORT $LN6@checkoptio
  00063	0f be d0	 movsx	 edx, al
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0006c	48 85 c0	 test	 rax, rax
  0006f	75 48		 jne	 SHORT $LN12@checkoptio
$LN6@checkoptio:
; Line 235
  00071	83 c3 02	 add	 ebx, 2
  00074	83 fb 06	 cmp	 ebx, 6
  00077	72 b7		 jb	 SHORT $LL7@checkoptio
; Line 251
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@MFIJMOHJ@invalid?5conversion?5specifier?5?8?$CF?$CF@
  00080	4c 8b c7	 mov	 r8, rdi
  00083	48 8b cd	 mov	 rcx, rbp
  00086	e8 00 00 00 00	 call	 lua_pushfstring
  0008b	ba 01 00 00 00	 mov	 edx, 1
  00090	48 8b cd	 mov	 rcx, rbp
  00093	4c 8b c0	 mov	 r8, rax
  00096	e8 00 00 00 00	 call	 luaL_argerror
; Line 252
  0009b	48 8b c7	 mov	 rax, rdi
$LN8@checkoptio:
; Line 253
  0009e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a3	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000a8	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ad	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000b2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b6	41 5e		 pop	 r14
  000b8	c3		 ret	 0
$LN12@checkoptio:
; Line 244
  000b9	0f b6 47 01	 movzx	 eax, BYTE PTR [rdi+1]
; Line 245
  000bd	c6 46 03 00	 mov	 BYTE PTR [rsi+3], 0
  000c1	88 46 02	 mov	 BYTE PTR [rsi+2], al
; Line 246
  000c4	48 8d 47 02	 lea	 rax, QWORD PTR [rdi+2]
  000c8	eb d4		 jmp	 SHORT $LN8@checkoptio
$LN11@checkoptio:
; Line 239
  000ca	c6 46 02 00	 mov	 BYTE PTR [rsi+2], 0
; Line 240
  000ce	48 8d 47 01	 lea	 rax, QWORD PTR [rdi+1]
  000d2	eb ca		 jmp	 SHORT $LN8@checkoptio
checkoption ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getfield
_TEXT	SEGMENT
isnum$ = 32
L$ = 80
key$ = 88
d$ = 96
delta$ = 104
getfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 211
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00018	49 63 e8	 movsxd	 rbp, r8d
  0001b	48 8b f2	 mov	 rsi, rdx
; Line 213
  0001e	4c 8b c2	 mov	 r8, rdx
  00021	83 ca ff	 or	 edx, -1
  00024	4d 63 f9	 movsxd	 r15, r9d
  00027	48 8b f9	 mov	 rdi, rcx
  0002a	e8 00 00 00 00	 call	 lua_getfield
; Line 214
  0002f	4c 8d 44 24 20	 lea	 r8, QWORD PTR isnum$[rsp]
  00034	83 ca ff	 or	 edx, -1
  00037	48 8b cf	 mov	 rcx, rdi
  0003a	44 8b f0	 mov	 r14d, eax
  0003d	e8 00 00 00 00	 call	 lua_tointegerx
; Line 215
  00042	83 7c 24 20 00	 cmp	 DWORD PTR isnum$[rsp], 0
  00047	48 8b d8	 mov	 rbx, rax
  0004a	75 2f		 jne	 SHORT $LN7@getfield
; Line 216
  0004c	45 85 f6	 test	 r14d, r14d
  0004f	74 09		 je	 SHORT $LN6@getfield
; Line 217
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CKBJFBCI@field?5?8?$CFs?8?5not?5an?5integer?$AA@
  00058	eb 4a		 jmp	 SHORT $LN10@getfield
$LN6@getfield:
; Line 218
  0005a	85 ed		 test	 ebp, ebp
  0005c	79 09		 jns	 SHORT $LN4@getfield
; Line 219
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@DJMEIEGF@field?5?8?$CFs?8?5missing?5in?5date?5table@
  00065	eb 3d		 jmp	 SHORT $LN10@getfield
$LN4@getfield:
; Line 227
  00067	ba fe ff ff ff	 mov	 edx, -2
  0006c	48 8b cf	 mov	 rcx, rdi
  0006f	48 8b dd	 mov	 rbx, rbp
  00072	e8 00 00 00 00	 call	 lua_settop
; Line 228
  00077	8b c3		 mov	 eax, ebx
  00079	eb 34		 jmp	 SHORT $LN8@getfield
$LN7@getfield:
; Line 223
  0007b	48 05 ff ff ff
	3f		 add	 rax, 1073741823		; 3fffffffH
  00081	48 3d fe ff ff
	7f		 cmp	 rax, 2147483646		; 7ffffffeH
  00087	77 14		 ja	 SHORT $LN1@getfield
; Line 227
  00089	ba fe ff ff ff	 mov	 edx, -2
  0008e	48 8b cf	 mov	 rcx, rdi
  00091	49 2b df	 sub	 rbx, r15
  00094	e8 00 00 00 00	 call	 lua_settop
; Line 228
  00099	8b c3		 mov	 eax, ebx
  0009b	eb 12		 jmp	 SHORT $LN8@getfield
$LN1@getfield:
; Line 224
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@BDECGFHM@field?5?8?$CFs?8?5out?9of?9bounds?$AA@
$LN10@getfield:
  000a4	4c 8b c6	 mov	 r8, rsi
  000a7	48 8b cf	 mov	 rcx, rdi
  000aa	e8 00 00 00 00	 call	 luaL_error
$LN8@getfield:
; Line 229
  000af	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000b4	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000b9	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000be	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c2	41 5f		 pop	 r15
  000c4	41 5e		 pop	 r14
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0
getfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getboolfield
_TEXT	SEGMENT
L$ = 48
key$ = 56
getboolfield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 198
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 200
  0000a	4c 8b c2	 mov	 r8, rdx
  0000d	83 cb ff	 or	 ebx, -1
  00010	48 8b f9	 mov	 rdi, rcx
  00013	8b d3		 mov	 edx, ebx
  00015	e8 00 00 00 00	 call	 lua_getfield
  0001a	85 c0		 test	 eax, eax
  0001c	74 0c		 je	 SHORT $LN4@getboolfie
  0001e	8b d3		 mov	 edx, ebx
  00020	48 8b cf	 mov	 rcx, rdi
  00023	e8 00 00 00 00	 call	 lua_toboolean
  00028	8b d8		 mov	 ebx, eax
$LN4@getboolfie:
; Line 201
  0002a	ba fe ff ff ff	 mov	 edx, -2
  0002f	48 8b cf	 mov	 rcx, rdi
  00032	e8 00 00 00 00	 call	 lua_settop
; Line 202
  00037	8b c3		 mov	 eax, ebx
; Line 203
  00039	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
getboolfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT setboolfield
_TEXT	SEGMENT
L$ = 48
key$ = 56
value$ = 64
setboolfield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 192
  00000	45 85 c0	 test	 r8d, r8d
  00003	78 32		 js	 SHORT $LN4@setboolfie
  00005	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 191
  0000f	48 8b fa	 mov	 rdi, rdx
; Line 194
  00012	41 8b d0	 mov	 edx, r8d
  00015	48 8b d9	 mov	 rbx, rcx
  00018	e8 00 00 00 00	 call	 lua_pushboolean
; Line 195
  0001d	4c 8b c7	 mov	 r8, rdi
  00020	ba fe ff ff ff	 mov	 edx, -2
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 lua_setfield
; Line 196
  0002d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
$LN4@setboolfie:
  00037	c3		 ret	 0
setboolfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT setfield
_TEXT	SEGMENT
L$ = 48
key$ = 56
value$ = 64
setfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 186
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
; Line 187
  0000d	49 63 d0	 movsxd	 rdx, r8d
  00010	48 8b f9	 mov	 rdi, rcx
  00013	e8 00 00 00 00	 call	 lua_pushinteger
; Line 188
  00018	4c 8b c3	 mov	 r8, rbx
  0001b	ba fe ff ff ff	 mov	 edx, -2
  00020	48 8b cf	 mov	 rcx, rdi
; Line 189
  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
; Line 188
  0002d	e9 00 00 00 00	 jmp	 lua_setfield
setfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT os_clock
_TEXT	SEGMENT
L$ = 48
os_clock PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 172
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 173
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clock
  0000f	48 8b cb	 mov	 rcx, rbx
  00012	66 0f 6e c8	 movd	 xmm1, eax
  00016	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0001a	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@408f400000000000
  00022	e8 00 00 00 00	 call	 lua_pushnumber
; Line 174
  00027	b8 01 00 00 00	 mov	 eax, 1
; Line 175
  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
os_clock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT os_getenv
_TEXT	SEGMENT
L$ = 48
os_getenv PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 166
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 167
  00006	45 33 c0	 xor	 r8d, r8d
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00010	e8 00 00 00 00	 call	 luaL_checklstring
  00015	48 8b c8	 mov	 rcx, rax
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	48 8b d0	 mov	 rdx, rax
  00024	e8 00 00 00 00	 call	 lua_pushstring
; Line 168
  00029	b8 01 00 00 00	 mov	 eax, 1
; Line 169
  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
os_getenv ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT os_tmpname
_TEXT	SEGMENT
buff$ = 32
__$ArrayPad$ = 48
L$ = 80
os_tmpname PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 155
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000d	48 33 c4	 xor	 rax, rsp
  00010	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00015	48 8b d9	 mov	 rbx, rcx
; Line 158
  00018	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buff$[rsp]
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tmpnam
; Line 160
  00023	48 8b cb	 mov	 rcx, rbx
  00026	48 85 c0	 test	 rax, rax
  00029	75 1f		 jne	 SHORT $LN1@os_tmpname
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@CFMGMNIN@unable?5to?5generate?5a?5unique?5file@
  00032	e8 00 00 00 00	 call	 luaL_error
; Line 163
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0003c	48 33 cc	 xor	 rcx, rsp
  0003f	e8 00 00 00 00	 call	 __security_check_cookie
  00044	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
$LN1@os_tmpname:
; Line 161
  0004a	48 8d 54 24 20	 lea	 rdx, QWORD PTR buff$[rsp]
  0004f	e8 00 00 00 00	 call	 lua_pushstring
; Line 162
  00054	b8 01 00 00 00	 mov	 eax, 1
; Line 163
  00059	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0005e	48 33 cc	 xor	 rcx, rsp
  00061	e8 00 00 00 00	 call	 __security_check_cookie
  00066	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0006a	5b		 pop	 rbx
  0006b	c3		 ret	 0
os_tmpname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT os_rename
_TEXT	SEGMENT
L$ = 48
os_rename PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 148
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 149
  0000a	45 33 c0	 xor	 r8d, r8d
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00014	e8 00 00 00 00	 call	 luaL_checklstring
; Line 150
  00019	45 33 c0	 xor	 r8d, r8d
  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	41 8d 50 02	 lea	 edx, QWORD PTR [r8+2]
  00023	48 8b d8	 mov	 rbx, rax
  00026	e8 00 00 00 00	 call	 luaL_checklstring
; Line 151
  0002b	48 8b cb	 mov	 rcx, rbx
  0002e	48 8b d0	 mov	 rdx, rax
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rename
  00037	33 d2		 xor	 edx, edx
  00039	48 8b cf	 mov	 rcx, rdi
  0003c	85 c0		 test	 eax, eax
  0003e	0f 94 c2	 sete	 dl
  00041	45 33 c0	 xor	 r8d, r8d
; Line 152
  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
; Line 151
  0004e	e9 00 00 00 00	 jmp	 luaL_fileresult
os_rename ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT os_remove
_TEXT	SEGMENT
L$ = 48
os_remove PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 142
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 143
  0000a	45 33 c0	 xor	 r8d, r8d
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00014	e8 00 00 00 00	 call	 luaL_checklstring
; Line 144
  00019	48 8b c8	 mov	 rcx, rax
  0001c	48 8b d8	 mov	 rbx, rax
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_remove
  00025	33 d2		 xor	 edx, edx
  00027	4c 8b c3	 mov	 r8, rbx
  0002a	85 c0		 test	 eax, eax
  0002c	48 8b cf	 mov	 rcx, rdi
  0002f	0f 94 c2	 sete	 dl
; Line 145
  00032	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
; Line 144
  0003c	e9 00 00 00 00	 jmp	 luaL_fileresult
os_remove ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT os_execute
_TEXT	SEGMENT
L$ = 48
os_execute PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 130
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 131
  0000a	45 33 c9	 xor	 r9d, r9d
  0000d	45 33 c0	 xor	 r8d, r8d
  00010	48 8b f9	 mov	 rdi, rcx
  00013	41 8d 51 01	 lea	 edx, QWORD PTR [r9+1]
  00017	e8 00 00 00 00	 call	 luaL_optlstring
; Line 132
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	48 8b d8	 mov	 rbx, rax
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_system
; Line 134
  00028	48 8b cf	 mov	 rcx, rdi
  0002b	8b d0		 mov	 edx, eax
  0002d	48 85 db	 test	 rbx, rbx
  00030	74 0f		 je	 SHORT $LN2@os_execute
; Line 139
  00032	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
; Line 134
  0003c	e9 00 00 00 00	 jmp	 luaL_execresult
$LN2@os_execute:
; Line 136
  00041	e8 00 00 00 00	 call	 lua_pushboolean
; Line 139
  00046	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
os_execute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT l_checktime
_TEXT	SEGMENT
L$ = 8
arg$ = 16
l_checktime PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 59
  00000	e9 00 00 00 00	 jmp	 luaL_checkinteger
l_checktime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaopen_os
_TEXT	SEGMENT
L$ = 48
luaopen_os PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\loslib.c
; Line 384
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 385
  00006	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@405bc00000000000
  0000e	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00014	48 8b d9	 mov	 rbx, rcx
  00017	e8 00 00 00 00	 call	 luaL_checkversion_
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	44 8d 42 0b	 lea	 r8d, QWORD PTR [rdx+11]
  00025	e8 00 00 00 00	 call	 lua_createtable
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:syslib
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 luaL_setfuncs
; Line 386
  0003c	b8 01 00 00 00	 mov	 eax, 1
; Line 387
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5b		 pop	 rbx
  00046	c3		 ret	 0
luaopen_os ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT time
_TEXT	SEGMENT
_Time$ = 8
time	PROC						; COMDAT
; File e:\microsoft visual studio 12.0\vc\include\time.inl
; Line 133
  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__time64
time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT mktime
_TEXT	SEGMENT
_Tm$ = 8
mktime	PROC						; COMDAT
; File e:\microsoft visual studio 12.0\vc\include\time.inl
; Line 125
  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__mktime64
mktime	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT localtime
_TEXT	SEGMENT
_Time$ = 8
localtime PROC						; COMDAT
; File e:\microsoft visual studio 12.0\vc\include\time.inl
; Line 116
  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__localtime64
localtime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gmtime
_TEXT	SEGMENT
_Time$ = 8
gmtime	PROC						; COMDAT
; File e:\microsoft visual studio 12.0\vc\include\time.inl
; Line 103
  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__gmtime64
gmtime	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT difftime
_TEXT	SEGMENT
_Time1$ = 8
_Time2$ = 16
difftime PROC						; COMDAT
; File e:\microsoft visual studio 12.0\vc\include\time.inl
; Line 84
  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__difftime64
difftime ENDP
_TEXT	ENDS
END
