; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_03BCGAIFPO@abs?$AA@			; `string'
PUBLIC	??_C@_04PDIFKINK@acos?$AA@			; `string'
PUBLIC	??_C@_04FIHNOPOL@asin?$AA@			; `string'
PUBLIC	??_C@_04MLLJIGOK@atan?$AA@			; `string'
PUBLIC	??_C@_04GFPJNGEK@ceil?$AA@			; `string'
PUBLIC	??_C@_03LALBNOCG@cos?$AA@			; `string'
PUBLIC	??_C@_03OFPLEBM@deg?$AA@			; `string'
PUBLIC	??_C@_03KHJOGHMM@exp?$AA@			; `string'
PUBLIC	??_C@_09EAKFBKNJ@tointeger?$AA@			; `string'
PUBLIC	??_C@_05PBJFFIGL@floor?$AA@			; `string'
PUBLIC	??_C@_04KEPJIHGP@fmod?$AA@			; `string'
PUBLIC	??_C@_03IIMEPOPL@ult?$AA@			; `string'
PUBLIC	??_C@_03MGHMBJCF@log?$AA@			; `string'
PUBLIC	??_C@_03LJAEFNNE@max?$AA@			; `string'
PUBLIC	??_C@_03KLIPLJLL@min?$AA@			; `string'
PUBLIC	??_C@_04EHEDPDJG@modf?$AA@			; `string'
PUBLIC	??_C@_03FHAJEHEA@rad?$AA@			; `string'
PUBLIC	??_C@_06NLFCANPD@random?$AA@			; `string'
PUBLIC	??_C@_0L@PIIACENG@randomseed?$AA@		; `string'
PUBLIC	??_C@_03BLEJJJBH@sin?$AA@			; `string'
PUBLIC	??_C@_04EIAKFFMI@sqrt?$AA@			; `string'
PUBLIC	??_C@_03IIINPABG@tan?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_05KNGEOGJB@atan2?$AA@			; `string'
PUBLIC	??_C@_04HPJJNFIM@cosh?$AA@			; `string'
PUBLIC	??_C@_04COOMCNPB@sinh?$AA@			; `string'
PUBLIC	??_C@_04FJHINJAO@tanh?$AA@			; `string'
PUBLIC	??_C@_03JGHBODFD@pow?$AA@			; `string'
PUBLIC	??_C@_05GKKHEGJL@frexp?$AA@			; `string'
PUBLIC	??_C@_05CEJMAHNP@ldexp?$AA@			; `string'
PUBLIC	??_C@_05HGHHAHAP@log10?$AA@			; `string'
PUBLIC	??_C@_02OAHAJOFD@pi?$AA@			; `string'
PUBLIC	??_C@_04JJGMCGIH@huge?$AA@			; `string'
PUBLIC	??_C@_0L@FKMOHNGI@maxinteger?$AA@		; `string'
PUBLIC	??_C@_0L@JGMDAGGH@mininteger?$AA@		; `string'
;	COMDAT ??_C@_0L@JGMDAGGH@mininteger?$AA@
CONST	SEGMENT
??_C@_0L@JGMDAGGH@mininteger?$AA@ DB 'mininteger', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FKMOHNGI@maxinteger?$AA@
CONST	SEGMENT
??_C@_0L@FKMOHNGI@maxinteger?$AA@ DB 'maxinteger', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JJGMCGIH@huge?$AA@
CONST	SEGMENT
??_C@_04JJGMCGIH@huge?$AA@ DB 'huge', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02OAHAJOFD@pi?$AA@
CONST	SEGMENT
??_C@_02OAHAJOFD@pi?$AA@ DB 'pi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGHHAHAP@log10?$AA@
CONST	SEGMENT
??_C@_05HGHHAHAP@log10?$AA@ DB 'log10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CEJMAHNP@ldexp?$AA@
CONST	SEGMENT
??_C@_05CEJMAHNP@ldexp?$AA@ DB 'ldexp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GKKHEGJL@frexp?$AA@
CONST	SEGMENT
??_C@_05GKKHEGJL@frexp?$AA@ DB 'frexp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JGHBODFD@pow?$AA@
CONST	SEGMENT
??_C@_03JGHBODFD@pow?$AA@ DB 'pow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJHINJAO@tanh?$AA@
CONST	SEGMENT
??_C@_04FJHINJAO@tanh?$AA@ DB 'tanh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04COOMCNPB@sinh?$AA@
CONST	SEGMENT
??_C@_04COOMCNPB@sinh?$AA@ DB 'sinh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPJJNFIM@cosh?$AA@
CONST	SEGMENT
??_C@_04HPJJNFIM@cosh?$AA@ DB 'cosh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KNGEOGJB@atan2?$AA@
CONST	SEGMENT
??_C@_05KNGEOGJB@atan2?$AA@ DB 'atan2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IIINPABG@tan?$AA@
CONST	SEGMENT
??_C@_03IIINPABG@tan?$AA@ DB 'tan', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIAKFFMI@sqrt?$AA@
CONST	SEGMENT
??_C@_04EIAKFFMI@sqrt?$AA@ DB 'sqrt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BLEJJJBH@sin?$AA@
CONST	SEGMENT
??_C@_03BLEJJJBH@sin?$AA@ DB 'sin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PIIACENG@randomseed?$AA@
CONST	SEGMENT
??_C@_0L@PIIACENG@randomseed?$AA@ DB 'randomseed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NLFCANPD@random?$AA@
CONST	SEGMENT
??_C@_06NLFCANPD@random?$AA@ DB 'random', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FHAJEHEA@rad?$AA@
CONST	SEGMENT
??_C@_03FHAJEHEA@rad?$AA@ DB 'rad', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHEDPDJG@modf?$AA@
CONST	SEGMENT
??_C@_04EHEDPDJG@modf?$AA@ DB 'modf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KLIPLJLL@min?$AA@
CONST	SEGMENT
??_C@_03KLIPLJLL@min?$AA@ DB 'min', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LJAEFNNE@max?$AA@
CONST	SEGMENT
??_C@_03LJAEFNNE@max?$AA@ DB 'max', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGHMBJCF@log?$AA@
CONST	SEGMENT
??_C@_03MGHMBJCF@log?$AA@ DB 'log', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IIMEPOPL@ult?$AA@
CONST	SEGMENT
??_C@_03IIMEPOPL@ult?$AA@ DB 'ult', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KEPJIHGP@fmod?$AA@
CONST	SEGMENT
??_C@_04KEPJIHGP@fmod?$AA@ DB 'fmod', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PBJFFIGL@floor?$AA@
CONST	SEGMENT
??_C@_05PBJFFIGL@floor?$AA@ DB 'floor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EAKFBKNJ@tointeger?$AA@
CONST	SEGMENT
??_C@_09EAKFBKNJ@tointeger?$AA@ DB 'tointeger', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHJOGHMM@exp?$AA@
CONST	SEGMENT
??_C@_03KHJOGHMM@exp?$AA@ DB 'exp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFPLEBM@deg?$AA@
CONST	SEGMENT
??_C@_03OFPLEBM@deg?$AA@ DB 'deg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LALBNOCG@cos?$AA@
CONST	SEGMENT
??_C@_03LALBNOCG@cos?$AA@ DB 'cos', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GFPJNGEK@ceil?$AA@
CONST	SEGMENT
??_C@_04GFPJNGEK@ceil?$AA@ DB 'ceil', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLJIGOK@atan?$AA@
CONST	SEGMENT
??_C@_04MLLJIGOK@atan?$AA@ DB 'atan', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FIHNOPOL@asin?$AA@
CONST	SEGMENT
??_C@_04FIHNOPOL@asin?$AA@ DB 'asin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PDIFKINK@acos?$AA@
CONST	SEGMENT
??_C@_04PDIFKINK@acos?$AA@ DB 'acos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BCGAIFPO@abs?$AA@
CONST	SEGMENT
??_C@_03BCGAIFPO@abs?$AA@ DB 'abs', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
mathlib	DQ	FLAT:??_C@_03BCGAIFPO@abs?$AA@
	DQ	FLAT:math_abs
	DQ	FLAT:??_C@_04PDIFKINK@acos?$AA@
	DQ	FLAT:math_acos
	DQ	FLAT:??_C@_04FIHNOPOL@asin?$AA@
	DQ	FLAT:math_asin
	DQ	FLAT:??_C@_04MLLJIGOK@atan?$AA@
	DQ	FLAT:math_atan
	DQ	FLAT:??_C@_04GFPJNGEK@ceil?$AA@
	DQ	FLAT:math_ceil
	DQ	FLAT:??_C@_03LALBNOCG@cos?$AA@
	DQ	FLAT:math_cos
	DQ	FLAT:??_C@_03OFPLEBM@deg?$AA@
	DQ	FLAT:math_deg
	DQ	FLAT:??_C@_03KHJOGHMM@exp?$AA@
	DQ	FLAT:math_exp
	DQ	FLAT:??_C@_09EAKFBKNJ@tointeger?$AA@
	DQ	FLAT:math_toint
	DQ	FLAT:??_C@_05PBJFFIGL@floor?$AA@
	DQ	FLAT:math_floor
	DQ	FLAT:??_C@_04KEPJIHGP@fmod?$AA@
	DQ	FLAT:math_fmod
	DQ	FLAT:??_C@_03IIMEPOPL@ult?$AA@
	DQ	FLAT:math_ult
	DQ	FLAT:??_C@_03MGHMBJCF@log?$AA@
	DQ	FLAT:math_log
	DQ	FLAT:??_C@_03LJAEFNNE@max?$AA@
	DQ	FLAT:math_max
	DQ	FLAT:??_C@_03KLIPLJLL@min?$AA@
	DQ	FLAT:math_min
	DQ	FLAT:??_C@_04EHEDPDJG@modf?$AA@
	DQ	FLAT:math_modf
	DQ	FLAT:??_C@_03FHAJEHEA@rad?$AA@
	DQ	FLAT:math_rad
	DQ	FLAT:??_C@_06NLFCANPD@random?$AA@
	DQ	FLAT:math_random
	DQ	FLAT:??_C@_0L@PIIACENG@randomseed?$AA@
	DQ	FLAT:math_randomseed
	DQ	FLAT:??_C@_03BLEJJJBH@sin?$AA@
	DQ	FLAT:math_sin
	DQ	FLAT:??_C@_04EIAKFFMI@sqrt?$AA@
	DQ	FLAT:math_sqrt
	DQ	FLAT:??_C@_03IIINPABG@tan?$AA@
	DQ	FLAT:math_tan
	DQ	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DQ	FLAT:math_type
	DQ	FLAT:??_C@_05KNGEOGJB@atan2?$AA@
	DQ	FLAT:math_atan
	DQ	FLAT:??_C@_04HPJJNFIM@cosh?$AA@
	DQ	FLAT:math_cosh
	DQ	FLAT:??_C@_04COOMCNPB@sinh?$AA@
	DQ	FLAT:math_sinh
	DQ	FLAT:??_C@_04FJHINJAO@tanh?$AA@
	DQ	FLAT:math_tanh
	DQ	FLAT:??_C@_03JGHBODFD@pow?$AA@
	DQ	FLAT:math_pow
	DQ	FLAT:??_C@_05GKKHEGJL@frexp?$AA@
	DQ	FLAT:math_frexp
	DQ	FLAT:??_C@_05CEJMAHNP@ldexp?$AA@
	DQ	FLAT:math_ldexp
	DQ	FLAT:??_C@_05HGHHAHAP@log10?$AA@
	DQ	FLAT:math_log10
	DQ	FLAT:??_C@_02OAHAJOFD@pi?$AA@
	DQ	0000000000000000H
	DQ	FLAT:??_C@_04JJGMCGIH@huge?$AA@
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0L@FKMOHNGI@maxinteger?$AA@
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0L@JGMDAGGH@mininteger?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
CONST	ENDS
PUBLIC	luaopen_math
PUBLIC	??_C@_04DDFHDMOL@zero?$AA@			; `string'
PUBLIC	??_C@_0P@PDHEKNMA@value?5expected?$AA@		; `string'
PUBLIC	??_C@_0BK@KNAOOCNO@wrong?5number?5of?5arguments?$AA@ ; `string'
PUBLIC	??_C@_0BC@JKHEKPDC@interval?5is?5empty?$AA@	; `string'
PUBLIC	??_C@_0BD@LOCDHFO@interval?5too?5large?$AA@	; `string'
PUBLIC	??_C@_07LKHFMGFB@integer?$AA@			; `string'
PUBLIC	??_C@_05KNFBNCOH@float?$AA@			; `string'
PUBLIC	__real@3f00000000000000
PUBLIC	__real@3f91df46a2529d39
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@4024000000000000
PUBLIC	__real@404ca5dc1a63c1f8
PUBLIC	__real@405bc00000000000
PUBLIC	__real@43e0000000000000
PUBLIC	__real@7ff0000000000000
PUBLIC	__real@c3e0000000000000
EXTRN	_sin:PROC
EXTRN	_cos:PROC
EXTRN	_tan:PROC
EXTRN	sqrt_1:PROC
EXTRN	__pow:PROC
EXTRN	_floor:PROC
EXTRN	_ceil:PROC
EXTRN	_exp:PROC
EXTRN	_log10:PROC
EXTRN	_log:PROC
EXTRN	_log2:PROC
EXTRN	__rand:PROC
EXTRN	srand_1:PROC
EXTRN	__asin:PROC
EXTRN	__acos:PROC
EXTRN	__sinh:PROC
EXTRN	__cosh:PROC
EXTRN	__tanh:PROC
EXTRN	__fmod:PROC
EXTRN	__fabs:PROC
EXTRN	____atan2:PROC
EXTRN	__ldexp:PROC
EXTRN	__frexp:PROC
EXTRN	lua_gettop:PROC
EXTRN	lua_settop:PROC
EXTRN	lua_pushvalue:PROC
EXTRN	lua_isinteger:PROC
EXTRN	lua_type:PROC
EXTRN	lua_tointegerx:PROC
EXTRN	lua_compare:PROC
EXTRN	lua_pushnil:PROC
EXTRN	lua_pushnumber:PROC
EXTRN	lua_pushinteger:PROC
EXTRN	lua_pushstring:PROC
EXTRN	lua_pushboolean:PROC
EXTRN	lua_createtable:PROC
EXTRN	lua_setfield:PROC
EXTRN	luaL_checkversion_:PROC
EXTRN	luaL_argerror:PROC
EXTRN	luaL_checknumber:PROC
EXTRN	luaL_optnumber:PROC
EXTRN	luaL_checkinteger:PROC
EXTRN	luaL_checkany:PROC
EXTRN	luaL_error:PROC
EXTRN	luaL_setfuncs:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaopen_math DD imagerel $LN4
	DD	imagerel $LN4+219
	DD	imagerel $unwind$luaopen_math
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_abs DD imagerel math_abs
	DD	imagerel math_abs+101
	DD	imagerel $unwind$math_abs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_sin DD imagerel math_sin
	DD	imagerel math_sin+46
	DD	imagerel $unwind$math_sin
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_cos DD imagerel math_cos
	DD	imagerel math_cos+46
	DD	imagerel $unwind$math_cos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_tan DD imagerel math_tan
	DD	imagerel math_tan+46
	DD	imagerel $unwind$math_tan
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_asin DD imagerel math_asin
	DD	imagerel math_asin+46
	DD	imagerel $unwind$math_asin
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_acos DD imagerel math_acos
	DD	imagerel math_acos+46
	DD	imagerel $unwind$math_acos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_atan DD imagerel math_atan
	DD	imagerel math_atan+92
	DD	imagerel $unwind$math_atan
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_toint DD imagerel math_toint
	DD	imagerel math_toint+82
	DD	imagerel $unwind$math_toint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_floor DD imagerel math_floor
	DD	imagerel math_floor+132
	DD	imagerel $unwind$math_floor
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_ceil DD imagerel math_ceil
	DD	imagerel math_ceil+127
	DD	imagerel $unwind$math_ceil
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_fmod DD imagerel math_fmod
	DD	imagerel math_fmod+46
	DD	imagerel $unwind$math_fmod
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$math_fmod DD imagerel math_fmod+46
	DD	imagerel math_fmod+121
	DD	imagerel $chain$0$math_fmod
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$math_fmod DD imagerel math_fmod+121
	DD	imagerel math_fmod+143
	DD	imagerel $chain$2$math_fmod
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$math_fmod DD imagerel math_fmod+143
	DD	imagerel math_fmod+212
	DD	imagerel $chain$4$math_fmod
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_modf DD imagerel math_modf
	DD	imagerel math_modf+221
	DD	imagerel $unwind$math_modf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_sqrt DD imagerel math_sqrt
	DD	imagerel math_sqrt+46
	DD	imagerel $unwind$math_sqrt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_ult DD imagerel math_ult
	DD	imagerel math_ult+71
	DD	imagerel $unwind$math_ult
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_log DD imagerel math_log
	DD	imagerel math_log+65
	DD	imagerel $unwind$math_log
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$math_log DD imagerel math_log+65
	DD	imagerel math_log+156
	DD	imagerel $chain$0$math_log
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$math_log DD imagerel math_log+156
	DD	imagerel math_log+183
	DD	imagerel $chain$1$math_log
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_exp DD imagerel math_exp
	DD	imagerel math_exp+46
	DD	imagerel $unwind$math_exp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_deg DD imagerel math_deg
	DD	imagerel math_deg+49
	DD	imagerel $unwind$math_deg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_rad DD imagerel math_rad
	DD	imagerel math_rad+49
	DD	imagerel $unwind$math_rad
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_min DD imagerel math_min
	DD	imagerel math_min+131
	DD	imagerel $unwind$math_min
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_max DD imagerel math_max
	DD	imagerel math_max+131
	DD	imagerel $unwind$math_max
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_random DD imagerel math_random
	DD	imagerel math_random+51
	DD	imagerel $unwind$math_random
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$math_random DD imagerel math_random+51
	DD	imagerel math_random+105
	DD	imagerel $chain$1$math_random
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$math_random DD imagerel math_random+105
	DD	imagerel math_random+260
	DD	imagerel $chain$3$math_random
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$math_random DD imagerel math_random+260
	DD	imagerel math_random+287
	DD	imagerel $chain$4$math_random
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_randomseed DD imagerel math_randomseed
	DD	imagerel math_randomseed+36
	DD	imagerel $unwind$math_randomseed
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_type DD imagerel math_type
	DD	imagerel math_type+114
	DD	imagerel $unwind$math_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_cosh DD imagerel math_cosh
	DD	imagerel math_cosh+46
	DD	imagerel $unwind$math_cosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_sinh DD imagerel math_sinh
	DD	imagerel math_sinh+46
	DD	imagerel $unwind$math_sinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_tanh DD imagerel math_tanh
	DD	imagerel math_tanh+46
	DD	imagerel $unwind$math_tanh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_pow DD imagerel math_pow
	DD	imagerel math_pow+79
	DD	imagerel $unwind$math_pow
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_frexp DD imagerel math_frexp
	DD	imagerel math_frexp+64
	DD	imagerel $unwind$math_frexp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_ldexp DD imagerel math_ldexp
	DD	imagerel math_ldexp+77
	DD	imagerel $unwind$math_ldexp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_log10 DD imagerel math_log10
	DD	imagerel math_log10+46
	DD	imagerel $unwind$math_log10
pdata	ENDS
;	COMDAT __real@c3e0000000000000
CONST	SEGMENT
__real@c3e0000000000000 DQ 0c3e0000000000000r	; -9.22337e+018
CONST	ENDS
;	COMDAT __real@7ff0000000000000
CONST	SEGMENT
__real@7ff0000000000000 DQ 07ff0000000000000r	; 1.#INF
CONST	ENDS
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+018
CONST	ENDS
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT __real@404ca5dc1a63c1f8
CONST	SEGMENT
__real@404ca5dc1a63c1f8 DQ 0404ca5dc1a63c1f8r	; 57.2958
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f91df46a2529d39
CONST	SEGMENT
__real@3f91df46a2529d39 DQ 03f91df46a2529d39r	; 0.0174533
CONST	ENDS
;	COMDAT __real@3f00000000000000
CONST	SEGMENT
__real@3f00000000000000 DQ 03f00000000000000r	; 3.05176e-005
CONST	ENDS
;	COMDAT ??_C@_05KNFBNCOH@float?$AA@
CONST	SEGMENT
??_C@_05KNFBNCOH@float?$AA@ DB 'float', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LKHFMGFB@integer?$AA@
CONST	SEGMENT
??_C@_07LKHFMGFB@integer?$AA@ DB 'integer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LOCDHFO@interval?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BD@LOCDHFO@interval?5too?5large?$AA@ DB 'interval too large', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JKHEKPDC@interval?5is?5empty?$AA@
CONST	SEGMENT
??_C@_0BC@JKHEKPDC@interval?5is?5empty?$AA@ DB 'interval is empty', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KNAOOCNO@wrong?5number?5of?5arguments?$AA@
CONST	SEGMENT
??_C@_0BK@KNAOOCNO@wrong?5number?5of?5arguments?$AA@ DB 'wrong number of '
	DB	'arguments', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PDHEKNMA@value?5expected?$AA@
CONST	SEGMENT
??_C@_0P@PDHEKNMA@value?5expected?$AA@ DB 'value expected', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDFHDMOL@zero?$AA@
CONST	SEGMENT
??_C@_04DDFHDMOL@zero?$AA@ DB 'zero', 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_log10 DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_ldexp DD 041001H
	DD	026810H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_frexp DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_pow DD 041001H
	DD	026810H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_tanh DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_sinh DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_cosh DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_type DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_randomseed DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$math_random DD 021H
	DD	imagerel math_random
	DD	imagerel math_random+51
	DD	imagerel $unwind$math_random
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$math_random DD 040021H
	DD	097400H
	DD	086400H
	DD	imagerel math_random
	DD	imagerel math_random+51
	DD	imagerel $unwind$math_random
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$math_random DD 040a21H
	DD	09740aH
	DD	086405H
	DD	imagerel math_random
	DD	imagerel math_random+51
	DD	imagerel $unwind$math_random
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_random DD 040b01H
	DD	02680bH
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_max DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_min DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_rad DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_deg DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_exp DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$math_log DD 021H
	DD	imagerel math_log
	DD	imagerel math_log+65
	DD	imagerel $unwind$math_log
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$math_log DD 020521H
	DD	027805H
	DD	imagerel math_log
	DD	imagerel math_log+65
	DD	imagerel $unwind$math_log
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_log DD 041001H
	DD	036810H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_ult DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_sqrt DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_modf DD 084a01H
	DD	02884aH
	DD	037844H
	DD	04683fH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$math_fmod DD 020d21H
	DD	02680dH
	DD	imagerel math_fmod
	DD	imagerel math_fmod+46
	DD	imagerel $unwind$math_fmod
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$math_fmod DD 020021H
	DD	087400H
	DD	imagerel math_fmod
	DD	imagerel math_fmod+46
	DD	imagerel $unwind$math_fmod
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$math_fmod DD 020521H
	DD	087405H
	DD	imagerel math_fmod
	DD	imagerel math_fmod+46
	DD	imagerel $unwind$math_fmod
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_fmod DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_ceil DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_floor DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_toint DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_atan DD 041001H
	DD	026810H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_acos DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_asin DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_tan DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_cos DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_sin DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_abs DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaopen_math DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_log10
_TEXT	SEGMENT
L$ = 48
math_log10 PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 340
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 341
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	e8 00 00 00 00	 call	 _log10
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	0f 28 c8	 movaps	 xmm1, xmm0
  0001e	e8 00 00 00 00	 call	 lua_pushnumber
; Line 342
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 343
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
math_log10 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_ldexp
_TEXT	SEGMENT
L$ = 64
math_ldexp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 333
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 334
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 luaL_checknumber
; Line 335
  00018	ba 02 00 00 00	 mov	 edx, 2
  0001d	48 8b cb	 mov	 rcx, rbx
  00020	0f 28 f0	 movaps	 xmm6, xmm0
  00023	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 336
  00028	8b d0		 mov	 edx, eax
  0002a	0f 28 c6	 movaps	 xmm0, xmm6
  0002d	e8 00 00 00 00	 call	 __ldexp
  00032	48 8b cb	 mov	 rcx, rbx
  00035	0f 28 c8	 movaps	 xmm1, xmm0
  00038	e8 00 00 00 00	 call	 lua_pushnumber
; Line 338
  0003d	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004b	5b		 pop	 rbx
  0004c	c3		 ret	 0
math_ldexp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_frexp
_TEXT	SEGMENT
L$ = 48
e$ = 56
math_frexp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 326
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 328
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	48 8d 54 24 38	 lea	 rdx, QWORD PTR e$[rsp]
  00018	e8 00 00 00 00	 call	 __frexp
  0001d	48 8b cb	 mov	 rcx, rbx
  00020	0f 28 c8	 movaps	 xmm1, xmm0
  00023	e8 00 00 00 00	 call	 lua_pushnumber
; Line 329
  00028	48 63 54 24 38	 movsxd	 rdx, DWORD PTR e$[rsp]
  0002d	48 8b cb	 mov	 rcx, rbx
  00030	e8 00 00 00 00	 call	 lua_pushinteger
; Line 330
  00035	b8 02 00 00 00	 mov	 eax, 2
; Line 331
  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5b		 pop	 rbx
  0003f	c3		 ret	 0
math_frexp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_pow
_TEXT	SEGMENT
L$ = 64
math_pow PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 319
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 320
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 luaL_checknumber
; Line 321
  00018	ba 02 00 00 00	 mov	 edx, 2
  0001d	48 8b cb	 mov	 rcx, rbx
  00020	0f 28 f0	 movaps	 xmm6, xmm0
  00023	e8 00 00 00 00	 call	 luaL_checknumber
; Line 322
  00028	f2 0f 2c d0	 cvttsd2si edx, xmm0
  0002c	0f 28 c6	 movaps	 xmm0, xmm6
  0002f	e8 00 00 00 00	 call	 __pow
  00034	48 8b cb	 mov	 rcx, rbx
  00037	0f 28 c8	 movaps	 xmm1, xmm0
  0003a	e8 00 00 00 00	 call	 lua_pushnumber
; Line 324
  0003f	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  00044	b8 01 00 00 00	 mov	 eax, 1
  00049	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004d	5b		 pop	 rbx
  0004e	c3		 ret	 0
math_pow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_tanh
_TEXT	SEGMENT
L$ = 48
math_tanh PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 314
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 315
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	e8 00 00 00 00	 call	 __tanh
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	0f 28 c8	 movaps	 xmm1, xmm0
  0001e	e8 00 00 00 00	 call	 lua_pushnumber
; Line 316
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 317
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
math_tanh ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_sinh
_TEXT	SEGMENT
L$ = 48
math_sinh PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 309
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 310
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	e8 00 00 00 00	 call	 __sinh
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	0f 28 c8	 movaps	 xmm1, xmm0
  0001e	e8 00 00 00 00	 call	 lua_pushnumber
; Line 311
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 312
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
math_sinh ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_cosh
_TEXT	SEGMENT
L$ = 48
math_cosh PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 304
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 305
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	e8 00 00 00 00	 call	 __cosh
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	0f 28 c8	 movaps	 xmm1, xmm0
  0001e	e8 00 00 00 00	 call	 lua_pushnumber
; Line 306
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 307
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
math_cosh ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_type
_TEXT	SEGMENT
L$ = 48
math_type PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 282
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 283
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_type
; Line 284
  00013	ba 01 00 00 00	 mov	 edx, 1
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	83 f8 03	 cmp	 eax, 3
  0001e	75 3a		 jne	 SHORT $LN4@math_type
  00020	e8 00 00 00 00	 call	 lua_isinteger
; Line 285
  00025	48 8b cb	 mov	 rcx, rbx
  00028	85 c0		 test	 eax, eax
  0002a	74 17		 je	 SHORT $LN3@math_type
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07LKHFMGFB@integer?$AA@
  00033	e8 00 00 00 00	 call	 lua_pushstring
; Line 293
  00038	b8 01 00 00 00	 mov	 eax, 1
; Line 294
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	c3		 ret	 0
$LN3@math_type:
; Line 287
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KNFBNCOH@float?$AA@
  0004a	e8 00 00 00 00	 call	 lua_pushstring
; Line 293
  0004f	b8 01 00 00 00	 mov	 eax, 1
; Line 294
  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5b		 pop	 rbx
  00059	c3		 ret	 0
$LN4@math_type:
; Line 290
  0005a	e8 00 00 00 00	 call	 luaL_checkany
; Line 291
  0005f	48 8b cb	 mov	 rcx, rbx
  00062	e8 00 00 00 00	 call	 lua_pushnil
; Line 293
  00067	b8 01 00 00 00	 mov	 eax, 1
; Line 294
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5b		 pop	 rbx
  00071	c3		 ret	 0
math_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_randomseed
_TEXT	SEGMENT
L$ = 48
math_randomseed PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 275
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 276
  00004	ba 01 00 00 00	 mov	 edx, 1
  00009	e8 00 00 00 00	 call	 luaL_checknumber
  0000e	f2 48 0f 2c c8	 cvttsd2si rcx, xmm0
  00013	e8 00 00 00 00	 call	 srand_1
; Line 277
  00018	e8 00 00 00 00	 call	 __rand
; Line 278
  0001d	33 c0		 xor	 eax, eax
; Line 279
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
math_randomseed ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_random
_TEXT	SEGMENT
L$ = 64
math_random PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 245
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  0000b	48 8b d9	 mov	 rbx, rcx
; Line 247
  0000e	e8 00 00 00 00	 call	 __rand
; Line 248
  00013	48 8b cb	 mov	 rcx, rbx
  00016	66 0f 6e f0	 movd	 xmm6, eax
  0001a	f3 0f e6 f6	 cvtdq2pd xmm6, xmm6
  0001e	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@3f00000000000000
  00026	e8 00 00 00 00	 call	 lua_gettop
  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 d1 00 00
	00		 je	 $LN4@math_rando
  00033	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00038	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0003d	ff c8		 dec	 eax
  0003f	74 3c		 je	 SHORT $LN3@math_rando
; Line 263
  00041	48 8b cb	 mov	 rcx, rbx
  00044	ff c8		 dec	 eax
  00046	74 21		 je	 SHORT $LN2@math_rando
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@KNAOOCNO@wrong?5number?5of?5arguments?$AA@
  0004f	e8 00 00 00 00	 call	 luaL_error
$LN12@math_rando:
  00054	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00059	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
; Line 272
  0005e	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  00063	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00067	5b		 pop	 rbx
  00068	c3		 ret	 0
$LN2@math_rando:
; Line 259
  00069	ba 01 00 00 00	 mov	 edx, 1
  0006e	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 260
  00073	ba 02 00 00 00	 mov	 edx, 2
  00078	48 8b f8	 mov	 rdi, rax
; Line 261
  0007b	eb 07		 jmp	 SHORT $LN13@math_rando
$LN3@math_rando:
; Line 254
  0007d	bf 01 00 00 00	 mov	 edi, 1
; Line 255
  00082	8b d7		 mov	 edx, edi
$LN13@math_rando:
  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 luaL_checkinteger
  0008c	48 8b f0	 mov	 rsi, rax
; Line 266
  0008f	48 3b f8	 cmp	 rdi, rax
  00092	7e 14		 jle	 SHORT $LN9@math_rando
  00094	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@JKHEKPDC@interval?5is?5empty?$AA@
  0009b	ba 01 00 00 00	 mov	 edx, 1
  000a0	48 8b cb	 mov	 rcx, rbx
  000a3	e8 00 00 00 00	 call	 luaL_argerror
$LN9@math_rando:
; Line 268
  000a8	48 85 ff	 test	 rdi, rdi
  000ab	79 26		 jns	 SHORT $LN10@math_rando
  000ad	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  000b7	48 03 c7	 add	 rax, rdi
  000ba	48 3b f0	 cmp	 rsi, rax
  000bd	7e 14		 jle	 SHORT $LN10@math_rando
  000bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@LOCDHFO@interval?5too?5large?$AA@
  000c6	ba 01 00 00 00	 mov	 edx, 1
  000cb	48 8b cb	 mov	 rcx, rbx
  000ce	e8 00 00 00 00	 call	 luaL_argerror
$LN10@math_rando:
; Line 269
  000d3	0f 57 c0	 xorps	 xmm0, xmm0
  000d6	48 2b f7	 sub	 rsi, rdi
; Line 270
  000d9	48 8b cb	 mov	 rcx, rbx
  000dc	f2 48 0f 2a c6	 cvtsi2sd xmm0, rsi
  000e1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000e9	f2 0f 59 c6	 mulsd	 xmm0, xmm6
  000ed	f2 48 0f 2c d0	 cvttsd2si rdx, xmm0
  000f2	48 03 d7	 add	 rdx, rdi
  000f5	e8 00 00 00 00	 call	 lua_pushinteger
; Line 271
  000fa	b8 01 00 00 00	 mov	 eax, 1
  000ff	e9 50 ff ff ff	 jmp	 $LN12@math_rando
$LN4@math_rando:
; Line 250
  00104	0f 28 ce	 movaps	 xmm1, xmm6
  00107	48 8b cb	 mov	 rcx, rbx
  0010a	e8 00 00 00 00	 call	 lua_pushnumber
; Line 272
  0010f	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  00114	b8 01 00 00 00	 mov	 eax, 1
  00119	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0011d	5b		 pop	 rbx
  0011e	c3		 ret	 0
math_random ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_max
_TEXT	SEGMENT
L$ = 48
math_max PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 227
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f1	 mov	 rsi, rcx
; Line 228
  00017	e8 00 00 00 00	 call	 lua_gettop
; Line 229
  0001c	bb 01 00 00 00	 mov	 ebx, 1
  00021	8b e8		 mov	 ebp, eax
; Line 231
  00023	3b c3		 cmp	 eax, ebx
  00025	7d 11		 jge	 SHORT $LN7@math_max
  00027	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@PDHEKNMA@value?5expected?$AA@
  0002e	8b d3		 mov	 edx, ebx
  00030	48 8b ce	 mov	 rcx, rsi
  00033	e8 00 00 00 00	 call	 luaL_argerror
$LN7@math_max:
; Line 232
  00038	bf 02 00 00 00	 mov	 edi, 2
  0003d	3b ef		 cmp	 ebp, edi
  0003f	7c 1e		 jl	 SHORT $LN2@math_max
$LL4@math_max:
; Line 233
  00041	41 b9 01 00 00
	00		 mov	 r9d, 1
  00047	44 8b c7	 mov	 r8d, edi
  0004a	8b d3		 mov	 edx, ebx
  0004c	48 8b ce	 mov	 rcx, rsi
  0004f	e8 00 00 00 00	 call	 lua_compare
  00054	85 c0		 test	 eax, eax
  00056	0f 45 df	 cmovne	 ebx, edi
  00059	ff c7		 inc	 edi
  0005b	3b fd		 cmp	 edi, ebp
  0005d	7e e2		 jle	 SHORT $LL4@math_max
$LN2@math_max:
; Line 236
  0005f	8b d3		 mov	 edx, ebx
  00061	48 8b ce	 mov	 rcx, rsi
  00064	e8 00 00 00 00	 call	 lua_pushvalue
; Line 238
  00069	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006e	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00073	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00081	5f		 pop	 rdi
  00082	c3		 ret	 0
math_max ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_min
_TEXT	SEGMENT
L$ = 48
math_min PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 213
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f1	 mov	 rsi, rcx
; Line 214
  00017	e8 00 00 00 00	 call	 lua_gettop
; Line 215
  0001c	bb 01 00 00 00	 mov	 ebx, 1
  00021	8b e8		 mov	 ebp, eax
; Line 217
  00023	3b c3		 cmp	 eax, ebx
  00025	7d 11		 jge	 SHORT $LN7@math_min
  00027	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@PDHEKNMA@value?5expected?$AA@
  0002e	8b d3		 mov	 edx, ebx
  00030	48 8b ce	 mov	 rcx, rsi
  00033	e8 00 00 00 00	 call	 luaL_argerror
$LN7@math_min:
; Line 218
  00038	bf 02 00 00 00	 mov	 edi, 2
  0003d	3b ef		 cmp	 ebp, edi
  0003f	7c 1e		 jl	 SHORT $LN2@math_min
$LL4@math_min:
; Line 219
  00041	41 b9 01 00 00
	00		 mov	 r9d, 1
  00047	44 8b c3	 mov	 r8d, ebx
  0004a	8b d7		 mov	 edx, edi
  0004c	48 8b ce	 mov	 rcx, rsi
  0004f	e8 00 00 00 00	 call	 lua_compare
  00054	85 c0		 test	 eax, eax
  00056	0f 45 df	 cmovne	 ebx, edi
  00059	ff c7		 inc	 edi
  0005b	3b fd		 cmp	 edi, ebp
  0005d	7e e2		 jle	 SHORT $LL4@math_min
$LN2@math_min:
; Line 222
  0005f	8b d3		 mov	 edx, ebx
  00061	48 8b ce	 mov	 rcx, rsi
  00064	e8 00 00 00 00	 call	 lua_pushvalue
; Line 224
  00069	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006e	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00073	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00081	5f		 pop	 rdi
  00082	c3		 ret	 0
math_min ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_rad
_TEXT	SEGMENT
L$ = 48
math_rad PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 207
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 208
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	48 8b cb	 mov	 rcx, rbx
  00016	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a2529d39
  0001e	0f 28 c8	 movaps	 xmm1, xmm0
  00021	e8 00 00 00 00	 call	 lua_pushnumber
; Line 209
  00026	b8 01 00 00 00	 mov	 eax, 1
; Line 210
  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
math_rad ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_deg
_TEXT	SEGMENT
L$ = 48
math_deg PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 202
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 203
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	48 8b cb	 mov	 rcx, rbx
  00016	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@404ca5dc1a63c1f8
  0001e	0f 28 c8	 movaps	 xmm1, xmm0
  00021	e8 00 00 00 00	 call	 lua_pushnumber
; Line 204
  00026	b8 01 00 00 00	 mov	 eax, 1
; Line 205
  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
math_deg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_exp
_TEXT	SEGMENT
L$ = 48
math_exp PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 197
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 198
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	e8 00 00 00 00	 call	 _exp
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	0f 28 c8	 movaps	 xmm1, xmm0
  0001e	e8 00 00 00 00	 call	 lua_pushnumber
; Line 199
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 200
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
math_exp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_log
_TEXT	SEGMENT
L$ = 80
math_log PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 180
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; Line 181
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 luaL_checknumber
; Line 183
  00018	ba 02 00 00 00	 mov	 edx, 2
  0001d	48 8b cb	 mov	 rcx, rbx
  00020	0f 28 f0	 movaps	 xmm6, xmm0
  00023	e8 00 00 00 00	 call	 lua_type
  00028	85 c0		 test	 eax, eax
  0002a	7f 0d		 jg	 SHORT $LN6@math_log
; Line 184
  0002c	0f 28 c6	 movaps	 xmm0, xmm6
  0002f	e8 00 00 00 00	 call	 _log
  00034	0f 28 f0	 movaps	 xmm6, xmm0
; Line 185
  00037	eb 63		 jmp	 SHORT $LN1@math_log
$LN6@math_log:
; Line 186
  00039	ba 02 00 00 00	 mov	 edx, 2
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00046	e8 00 00 00 00	 call	 luaL_checknumber
; Line 188
  0004b	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@4000000000000000
  00053	0f 28 f8	 movaps	 xmm7, xmm0
  00056	7a 0f		 jp	 SHORT $LN4@math_log
  00058	75 0d		 jne	 SHORT $LN4@math_log
  0005a	0f 28 c6	 movaps	 xmm0, xmm6
  0005d	e8 00 00 00 00	 call	 _log2
  00062	0f 28 f0	 movaps	 xmm6, xmm0
  00065	eb 30		 jmp	 SHORT $LN9@math_log
$LN4@math_log:
; Line 190
  00067	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@4024000000000000
  0006f	7a 0f		 jp	 SHORT $LN2@math_log
  00071	75 0d		 jne	 SHORT $LN2@math_log
  00073	0f 28 c6	 movaps	 xmm0, xmm6
  00076	e8 00 00 00 00	 call	 _log10
  0007b	0f 28 f0	 movaps	 xmm6, xmm0
  0007e	eb 17		 jmp	 SHORT $LN9@math_log
$LN2@math_log:
; Line 191
  00080	0f 28 c6	 movaps	 xmm0, xmm6
  00083	e8 00 00 00 00	 call	 _log
  00088	0f 28 f0	 movaps	 xmm6, xmm0
  0008b	0f 28 c7	 movaps	 xmm0, xmm7
  0008e	e8 00 00 00 00	 call	 _log
  00093	f2 0f 5e f0	 divsd	 xmm6, xmm0
$LN9@math_log:
  00097	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
$LN1@math_log:
; Line 193
  0009c	0f 28 ce	 movaps	 xmm1, xmm6
  0009f	48 8b cb	 mov	 rcx, rbx
  000a2	e8 00 00 00 00	 call	 lua_pushnumber
; Line 195
  000a7	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b5	5b		 pop	 rbx
  000b6	c3		 ret	 0
math_log ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_ult
_TEXT	SEGMENT
L$ = 48
math_ult PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 173
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 174
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 175
  00017	ba 02 00 00 00	 mov	 edx, 2
  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	48 8b d8	 mov	 rbx, rax
  00022	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 176
  00027	33 d2		 xor	 edx, edx
  00029	48 3b d8	 cmp	 rbx, rax
  0002c	48 8b cf	 mov	 rcx, rdi
  0002f	0f 92 c2	 setb	 dl
  00032	e8 00 00 00 00	 call	 lua_pushboolean
; Line 178
  00037	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
math_ult ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_sqrt
_TEXT	SEGMENT
L$ = 48
math_sqrt PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 167
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 168
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	e8 00 00 00 00	 call	 sqrt_1
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	0f 28 c8	 movaps	 xmm1, xmm0
  0001e	e8 00 00 00 00	 call	 lua_pushnumber
; Line 169
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 170
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
math_sqrt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_modf
_TEXT	SEGMENT
L$ = 96
math_modf PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 150
  00000	40 53		 push	 rbx
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H
; Line 151
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_isinteger
; Line 152
  00013	ba 01 00 00 00	 mov	 edx, 1
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	85 c0		 test	 eax, eax
  0001d	74 1b		 je	 SHORT $LN2@math_modf
  0001f	e8 00 00 00 00	 call	 lua_settop
  00024	0f 57 c9	 xorps	 xmm1, xmm1
; Line 153
  00027	48 8b cb	 mov	 rcx, rbx
  0002a	e8 00 00 00 00	 call	 lua_pushnumber
; Line 163
  0002f	b8 02 00 00 00	 mov	 eax, 2
; Line 164
  00034	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00038	5b		 pop	 rbx
  00039	c3		 ret	 0
$LN2@math_modf:
  0003a	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  0003f	0f 29 7c 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm7
  00044	44 0f 29 44 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm8
; Line 156
  0004a	e8 00 00 00 00	 call	 luaL_checknumber
  0004f	45 0f 57 c0	 xorps	 xmm8, xmm8
; Line 158
  00053	66 44 0f 2f c0	 comisd	 xmm8, xmm0
  00058	0f 28 f8	 movaps	 xmm7, xmm0
  0005b	76 0a		 jbe	 SHORT $LN5@math_modf
  0005d	e8 00 00 00 00	 call	 _ceil
  00062	0f 28 f0	 movaps	 xmm6, xmm0
  00065	eb 0d		 jmp	 SHORT $LN6@math_modf
$LN5@math_modf:
  00067	e8 00 00 00 00	 call	 _floor
  0006c	66 0f 6e f0	 movd	 xmm6, eax
  00070	f3 0f e6 f6	 cvtdq2pd xmm6, xmm6
$LN6@math_modf:
; Line 159
  00074	66 0f 2f 35 00
	00 00 00	 comisd	 xmm6, QWORD PTR __real@c3e0000000000000
  0007c	72 1d		 jb	 SHORT $LN10@math_modf
  0007e	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@43e0000000000000
  00086	66 0f 2f c6	 comisd	 xmm0, xmm6
  0008a	76 0f		 jbe	 SHORT $LN10@math_modf
  0008c	f2 48 0f 2c d6	 cvttsd2si rdx, xmm6
  00091	48 8b cb	 mov	 rcx, rbx
  00094	e8 00 00 00 00	 call	 lua_pushinteger
  00099	eb 0b		 jmp	 SHORT $LN9@math_modf
$LN10@math_modf:
  0009b	0f 28 ce	 movaps	 xmm1, xmm6
  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	e8 00 00 00 00	 call	 lua_pushnumber
$LN9@math_modf:
; Line 161
  000a6	66 0f 2e fe	 ucomisd xmm7, xmm6
  000aa	7a 02		 jp	 SHORT $LN7@math_modf
  000ac	74 08		 je	 SHORT $LN8@math_modf
$LN7@math_modf:
  000ae	f2 0f 5c fe	 subsd	 xmm7, xmm6
  000b2	44 0f 28 c7	 movaps	 xmm8, xmm7
$LN8@math_modf:
  000b6	41 0f 28 c8	 movaps	 xmm1, xmm8
  000ba	48 8b cb	 mov	 rcx, rbx
  000bd	e8 00 00 00 00	 call	 lua_pushnumber
  000c2	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]
  000c8	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
; Line 163
  000cd	b8 02 00 00 00	 mov	 eax, 2
  000d2	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
; Line 164
  000d7	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000db	5b		 pop	 rbx
  000dc	c3		 ret	 0
math_modf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_fmod
_TEXT	SEGMENT
L$ = 64
math_fmod PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 128
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 129
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_isinteger
  00013	85 c0		 test	 eax, eax
  00015	74 78		 je	 SHORT $LN4@math_fmod
  00017	ba 02 00 00 00	 mov	 edx, 2
  0001c	48 8b cb	 mov	 rcx, rbx
  0001f	e8 00 00 00 00	 call	 lua_isinteger
  00024	85 c0		 test	 eax, eax
  00026	74 67		 je	 SHORT $LN4@math_fmod
; Line 130
  00028	45 33 c0	 xor	 r8d, r8d
  0002b	48 8b cb	 mov	 rcx, rbx
  0002e	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00033	41 8d 50 02	 lea	 edx, QWORD PTR [r8+2]
  00037	e8 00 00 00 00	 call	 lua_tointegerx
  0003c	48 8b f8	 mov	 rdi, rax
; Line 131
  0003f	48 ff c0	 inc	 rax
  00042	48 83 f8 01	 cmp	 rax, 1
  00046	77 31		 ja	 SHORT $LN3@math_fmod
; Line 132
  00048	48 85 ff	 test	 rdi, rdi
  0004b	75 12		 jne	 SHORT $LN7@math_fmod
  0004d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04DDFHDMOL@zero?$AA@
  00054	8d 57 02	 lea	 edx, QWORD PTR [rdi+2]
  00057	48 8b cb	 mov	 rcx, rbx
  0005a	e8 00 00 00 00	 call	 luaL_argerror
$LN7@math_fmod:
; Line 133
  0005f	33 d2		 xor	 edx, edx
$LN9@math_fmod:
  00061	48 8b cb	 mov	 rcx, rbx
  00064	e8 00 00 00 00	 call	 lua_pushinteger
  00069	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
; Line 141
  0006e	b8 01 00 00 00	 mov	 eax, 1
; Line 142
  00073	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00077	5b		 pop	 rbx
  00078	c3		 ret	 0
$LN3@math_fmod:
; Line 136
  00079	45 33 c0	 xor	 r8d, r8d
  0007c	48 8b cb	 mov	 rcx, rbx
  0007f	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00083	e8 00 00 00 00	 call	 lua_tointegerx
  00088	48 99		 cdq
  0008a	48 f7 ff	 idiv	 rdi
; Line 138
  0008d	eb d2		 jmp	 SHORT $LN9@math_fmod
$LN4@math_fmod:
; Line 140
  0008f	ba 02 00 00 00	 mov	 edx, 2
  00094	48 8b cb	 mov	 rcx, rbx
  00097	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  0009c	e8 00 00 00 00	 call	 luaL_checknumber
  000a1	ba 01 00 00 00	 mov	 edx, 1
  000a6	48 8b cb	 mov	 rcx, rbx
  000a9	0f 28 f0	 movaps	 xmm6, xmm0
  000ac	e8 00 00 00 00	 call	 luaL_checknumber
  000b1	0f 28 ce	 movaps	 xmm1, xmm6
  000b4	e8 00 00 00 00	 call	 __fmod
  000b9	48 8b cb	 mov	 rcx, rbx
  000bc	0f 28 c8	 movaps	 xmm1, xmm0
  000bf	e8 00 00 00 00	 call	 lua_pushnumber
  000c4	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
; Line 141
  000c9	b8 01 00 00 00	 mov	 eax, 1
; Line 142
  000ce	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d2	5b		 pop	 rbx
  000d3	c3		 ret	 0
math_fmod ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_ceil
_TEXT	SEGMENT
L$ = 48
math_ceil PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 117
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 118
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_isinteger
; Line 119
  00013	ba 01 00 00 00	 mov	 edx, 1
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	85 c0		 test	 eax, eax
  0001d	74 10		 je	 SHORT $LN2@math_ceil
  0001f	e8 00 00 00 00	 call	 lua_settop
; Line 124
  00024	b8 01 00 00 00	 mov	 eax, 1
; Line 125
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
$LN2@math_ceil:
; Line 121
  0002f	e8 00 00 00 00	 call	 luaL_checknumber
  00034	e8 00 00 00 00	 call	 _ceil
; Line 122
  00039	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@c3e0000000000000
  00041	72 26		 jb	 SHORT $LN6@math_ceil
  00043	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@43e0000000000000
  0004b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004f	76 18		 jbe	 SHORT $LN6@math_ceil
  00051	f2 48 0f 2c d0	 cvttsd2si rdx, xmm0
  00056	48 8b cb	 mov	 rcx, rbx
  00059	e8 00 00 00 00	 call	 lua_pushinteger
; Line 124
  0005e	b8 01 00 00 00	 mov	 eax, 1
; Line 125
  00063	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00067	5b		 pop	 rbx
  00068	c3		 ret	 0
; Line 122
$LN6@math_ceil:
  00069	0f 28 c8	 movaps	 xmm1, xmm0
  0006c	48 8b cb	 mov	 rcx, rbx
  0006f	e8 00 00 00 00	 call	 lua_pushnumber
; Line 124
  00074	b8 01 00 00 00	 mov	 eax, 1
; Line 125
  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5b		 pop	 rbx
  0007e	c3		 ret	 0
math_ceil ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_floor
_TEXT	SEGMENT
L$ = 48
math_floor PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 106
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 107
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_isinteger
; Line 108
  00013	ba 01 00 00 00	 mov	 edx, 1
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	85 c0		 test	 eax, eax
  0001d	74 10		 je	 SHORT $LN2@math_floor
  0001f	e8 00 00 00 00	 call	 lua_settop
; Line 113
  00024	b8 01 00 00 00	 mov	 eax, 1
; Line 114
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
$LN2@math_floor:
; Line 110
  0002f	e8 00 00 00 00	 call	 luaL_checknumber
  00034	e8 00 00 00 00	 call	 _floor
  00039	66 0f 6e c8	 movd	 xmm1, eax
  0003d	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
; Line 111
  00041	66 0f 2f 0d 00
	00 00 00	 comisd	 xmm1, QWORD PTR __real@c3e0000000000000
  00049	72 26		 jb	 SHORT $LN6@math_floor
  0004b	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@43e0000000000000
  00053	66 0f 2f c1	 comisd	 xmm0, xmm1
  00057	76 18		 jbe	 SHORT $LN6@math_floor
  00059	f2 48 0f 2c d1	 cvttsd2si rdx, xmm1
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	e8 00 00 00 00	 call	 lua_pushinteger
; Line 113
  00066	b8 01 00 00 00	 mov	 eax, 1
; Line 114
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5b		 pop	 rbx
  00070	c3		 ret	 0
; Line 111
$LN6@math_floor:
  00071	48 8b cb	 mov	 rcx, rbx
  00074	e8 00 00 00 00	 call	 lua_pushnumber
; Line 113
  00079	b8 01 00 00 00	 mov	 eax, 1
; Line 114
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	5b		 pop	 rbx
  00083	c3		 ret	 0
math_floor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT pushnumint
_TEXT	SEGMENT
L$ = 8
d$ = 16
pushnumint PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 99
  00000	66 0f 2f 0d 00
	00 00 00	 comisd	 xmm1, QWORD PTR __real@c3e0000000000000
  00008	72 18		 jb	 SHORT $LN2@pushnumint
  0000a	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@43e0000000000000
  00012	66 0f 2f c1	 comisd	 xmm0, xmm1
  00016	76 0a		 jbe	 SHORT $LN2@pushnumint
  00018	f2 48 0f 2c d1	 cvttsd2si rdx, xmm1
; Line 100
  0001d	e9 00 00 00 00	 jmp	 lua_pushinteger
$LN2@pushnumint:
; Line 102
  00022	e9 00 00 00 00	 jmp	 lua_pushnumber
pushnumint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_toint
_TEXT	SEGMENT
L$ = 48
valid$ = 56
math_toint PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 84
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 86
  00006	4c 8d 44 24 38	 lea	 r8, QWORD PTR valid$[rsp]
  0000b	ba 01 00 00 00	 mov	 edx, 1
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 lua_tointegerx
; Line 87
  00018	83 7c 24 38 00	 cmp	 DWORD PTR valid$[rsp], 0
; Line 88
  0001d	48 8b cb	 mov	 rcx, rbx
  00020	74 13		 je	 SHORT $LN2@math_toint
  00022	48 8b d0	 mov	 rdx, rax
  00025	e8 00 00 00 00	 call	 lua_pushinteger
; Line 93
  0002a	b8 01 00 00 00	 mov	 eax, 1
; Line 94
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5b		 pop	 rbx
  00034	c3		 ret	 0
$LN2@math_toint:
; Line 90
  00035	ba 01 00 00 00	 mov	 edx, 1
  0003a	e8 00 00 00 00	 call	 luaL_checkany
; Line 91
  0003f	48 8b cb	 mov	 rcx, rbx
  00042	e8 00 00 00 00	 call	 lua_pushnil
; Line 93
  00047	b8 01 00 00 00	 mov	 eax, 1
; Line 94
  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
math_toint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_atan
_TEXT	SEGMENT
L$ = 64
math_atan PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 76
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 77
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 luaL_checknumber
; Line 78
  00018	ba 02 00 00 00	 mov	 edx, 2
  0001d	48 8b cb	 mov	 rcx, rbx
  00020	f2 0f 10 15 00
	00 00 00	 movsdx	 xmm2, QWORD PTR __real@3ff0000000000000
  00028	0f 28 f0	 movaps	 xmm6, xmm0
  0002b	e8 00 00 00 00	 call	 luaL_optnumber
; Line 79
  00030	41 b8 64 00 00
	00		 mov	 r8d, 100		; 00000064H
  00036	0f 28 c8	 movaps	 xmm1, xmm0
  00039	0f 28 c6	 movaps	 xmm0, xmm6
  0003c	e8 00 00 00 00	 call	 ____atan2
  00041	48 8b cb	 mov	 rcx, rbx
  00044	0f 28 c8	 movaps	 xmm1, xmm0
  00047	e8 00 00 00 00	 call	 lua_pushnumber
; Line 81
  0004c	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5b		 pop	 rbx
  0005b	c3		 ret	 0
math_atan ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_acos
_TEXT	SEGMENT
L$ = 48
math_acos PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 71
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 72
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	e8 00 00 00 00	 call	 __acos
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	0f 28 c8	 movaps	 xmm1, xmm0
  0001e	e8 00 00 00 00	 call	 lua_pushnumber
; Line 73
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 74
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
math_acos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_asin
_TEXT	SEGMENT
L$ = 48
math_asin PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 66
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 67
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	e8 00 00 00 00	 call	 __asin
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	0f 28 c8	 movaps	 xmm1, xmm0
  0001e	e8 00 00 00 00	 call	 lua_pushnumber
; Line 68
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 69
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
math_asin ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_tan
_TEXT	SEGMENT
L$ = 48
math_tan PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 61
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 62
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	e8 00 00 00 00	 call	 _tan
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	0f 28 c8	 movaps	 xmm1, xmm0
  0001e	e8 00 00 00 00	 call	 lua_pushnumber
; Line 63
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 64
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
math_tan ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_cos
_TEXT	SEGMENT
L$ = 48
math_cos PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 56
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 57
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	e8 00 00 00 00	 call	 _cos
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	0f 28 c8	 movaps	 xmm1, xmm0
  0001e	e8 00 00 00 00	 call	 lua_pushnumber
; Line 58
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 59
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
math_cos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_sin
_TEXT	SEGMENT
L$ = 48
math_sin PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 51
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 52
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checknumber
  00013	e8 00 00 00 00	 call	 _sin
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	0f 28 c8	 movaps	 xmm1, xmm0
  0001e	e8 00 00 00 00	 call	 lua_pushnumber
; Line 53
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 54
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
math_sin ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT math_abs
_TEXT	SEGMENT
L$ = 48
math_abs PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 40
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 41
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_isinteger
; Line 42
  00013	ba 01 00 00 00	 mov	 edx, 1
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	85 c0		 test	 eax, eax
  0001d	74 26		 je	 SHORT $LN3@math_abs
  0001f	45 33 c0	 xor	 r8d, r8d
  00022	e8 00 00 00 00	 call	 lua_tointegerx
; Line 43
  00027	48 85 c0	 test	 rax, rax
  0002a	79 03		 jns	 SHORT $LN2@math_abs
  0002c	48 f7 d8	 neg	 rax
$LN2@math_abs:
; Line 44
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b cb	 mov	 rcx, rbx
  00035	e8 00 00 00 00	 call	 lua_pushinteger
; Line 48
  0003a	b8 01 00 00 00	 mov	 eax, 1
; Line 49
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5b		 pop	 rbx
  00044	c3		 ret	 0
$LN3@math_abs:
; Line 47
  00045	e8 00 00 00 00	 call	 luaL_checknumber
  0004a	e8 00 00 00 00	 call	 __fabs
  0004f	48 8b cb	 mov	 rcx, rbx
  00052	0f 28 c8	 movaps	 xmm1, xmm0
  00055	e8 00 00 00 00	 call	 lua_pushnumber
; Line 48
  0005a	b8 01 00 00 00	 mov	 eax, 1
; Line 49
  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5b		 pop	 rbx
  00064	c3		 ret	 0
math_abs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaopen_math
_TEXT	SEGMENT
L$ = 48
luaopen_math PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lmathlib.c
; Line 395
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 396
  00006	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@405bc00000000000
  0000e	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00014	48 8b d9	 mov	 rbx, rcx
  00017	e8 00 00 00 00	 call	 luaL_checkversion_
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	44 8d 42 23	 lea	 r8d, QWORD PTR [rdx+35]
  00025	e8 00 00 00 00	 call	 lua_createtable
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:mathlib
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 luaL_setfuncs
; Line 397
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@400921fb54442d18
  00047	e8 00 00 00 00	 call	 lua_pushnumber
; Line 398
  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02OAHAJOFD@pi?$AA@
  00053	ba fe ff ff ff	 mov	 edx, -2
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 lua_setfield
; Line 399
  00060	48 8b cb	 mov	 rcx, rbx
  00063	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@7ff0000000000000
  0006b	e8 00 00 00 00	 call	 lua_pushnumber
; Line 400
  00070	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04JJGMCGIH@huge?$AA@
  00077	ba fe ff ff ff	 mov	 edx, -2
  0007c	48 8b cb	 mov	 rcx, rbx
  0007f	e8 00 00 00 00	 call	 lua_setfield
; Line 401
  00084	48 ba ff ff ff
	ff ff ff ff 7f	 mov	 rdx, 9223372036854775807 ; 7fffffffffffffffH
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	e8 00 00 00 00	 call	 lua_pushinteger
; Line 402
  00096	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@FKMOHNGI@maxinteger?$AA@
  0009d	ba fe ff ff ff	 mov	 edx, -2
  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	e8 00 00 00 00	 call	 lua_setfield
; Line 403
  000aa	48 ba 00 00 00
	00 00 00 00 80	 mov	 rdx, -9223372036854775808 ; 8000000000000000H
  000b4	48 8b cb	 mov	 rcx, rbx
  000b7	e8 00 00 00 00	 call	 lua_pushinteger
; Line 404
  000bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@JGMDAGGH@mininteger?$AA@
  000c3	ba fe ff ff ff	 mov	 edx, -2
  000c8	48 8b cb	 mov	 rcx, rbx
  000cb	e8 00 00 00 00	 call	 lua_setfield
; Line 405
  000d0	b8 01 00 00 00	 mov	 eax, 1
; Line 406
  000d5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d9	5b		 pop	 rbx
  000da	c3		 ret	 0
luaopen_math ENDP
_TEXT	ENDS
END
