; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07JILILBLL@arshift?$AA@			; `string'
PUBLIC	??_C@_04BKGNPECA@band?$AA@			; `string'
PUBLIC	??_C@_04JAOJMBA@bnot?$AA@			; `string'
PUBLIC	??_C@_03BBBGIIAC@bor?$AA@			; `string'
PUBLIC	??_C@_04CKCGDDNF@bxor?$AA@			; `string'
PUBLIC	??_C@_05BGEPNLMI@btest?$AA@			; `string'
PUBLIC	??_C@_07EMKILFJA@extract?$AA@			; `string'
PUBLIC	??_C@_07FLHGGAOI@lrotate?$AA@			; `string'
PUBLIC	??_C@_06ELFGPGBK@lshift?$AA@			; `string'
PUBLIC	??_C@_07CLEHDIEJ@replace?$AA@			; `string'
PUBLIC	??_C@_07DCEHEDPB@rrotate?$AA@			; `string'
PUBLIC	??_C@_06HMLHBBIJ@rshift?$AA@			; `string'
;	COMDAT ??_C@_06HMLHBBIJ@rshift?$AA@
CONST	SEGMENT
??_C@_06HMLHBBIJ@rshift?$AA@ DB 'rshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCEHEDPB@rrotate?$AA@
CONST	SEGMENT
??_C@_07DCEHEDPB@rrotate?$AA@ DB 'rrotate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLEHDIEJ@replace?$AA@
CONST	SEGMENT
??_C@_07CLEHDIEJ@replace?$AA@ DB 'replace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELFGPGBK@lshift?$AA@
CONST	SEGMENT
??_C@_06ELFGPGBK@lshift?$AA@ DB 'lshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FLHGGAOI@lrotate?$AA@
CONST	SEGMENT
??_C@_07FLHGGAOI@lrotate?$AA@ DB 'lrotate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EMKILFJA@extract?$AA@
CONST	SEGMENT
??_C@_07EMKILFJA@extract?$AA@ DB 'extract', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BGEPNLMI@btest?$AA@
CONST	SEGMENT
??_C@_05BGEPNLMI@btest?$AA@ DB 'btest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CKCGDDNF@bxor?$AA@
CONST	SEGMENT
??_C@_04CKCGDDNF@bxor?$AA@ DB 'bxor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBBGIIAC@bor?$AA@
CONST	SEGMENT
??_C@_03BBBGIIAC@bor?$AA@ DB 'bor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JAOJMBA@bnot?$AA@
CONST	SEGMENT
??_C@_04JAOJMBA@bnot?$AA@ DB 'bnot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKGNPECA@band?$AA@
CONST	SEGMENT
??_C@_04BKGNPECA@band?$AA@ DB 'band', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JILILBLL@arshift?$AA@
CONST	SEGMENT
??_C@_07JILILBLL@arshift?$AA@ DB 'arshift', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
bitlib	DQ	FLAT:??_C@_07JILILBLL@arshift?$AA@
	DQ	FLAT:b_arshift
	DQ	FLAT:??_C@_04BKGNPECA@band?$AA@
	DQ	FLAT:b_and
	DQ	FLAT:??_C@_04JAOJMBA@bnot?$AA@
	DQ	FLAT:b_not
	DQ	FLAT:??_C@_03BBBGIIAC@bor?$AA@
	DQ	FLAT:b_or
	DQ	FLAT:??_C@_04CKCGDDNF@bxor?$AA@
	DQ	FLAT:b_xor
	DQ	FLAT:??_C@_05BGEPNLMI@btest?$AA@
	DQ	FLAT:b_test
	DQ	FLAT:??_C@_07EMKILFJA@extract?$AA@
	DQ	FLAT:b_extract
	DQ	FLAT:??_C@_07FLHGGAOI@lrotate?$AA@
	DQ	FLAT:b_lrot
	DQ	FLAT:??_C@_06ELFGPGBK@lshift?$AA@
	DQ	FLAT:b_lshift
	DQ	FLAT:??_C@_07CLEHDIEJ@replace?$AA@
	DQ	FLAT:b_replace
	DQ	FLAT:??_C@_07DCEHEDPB@rrotate?$AA@
	DQ	FLAT:b_rrot
	DQ	FLAT:??_C@_06HMLHBBIJ@rshift?$AA@
	DQ	FLAT:b_rshift
	DQ	0000000000000000H
	DQ	0000000000000000H
CONST	ENDS
PUBLIC	luaopen_bit32
PUBLIC	??_C@_0BJ@DJLBNAFE@field?5cannot?5be?5negative?$AA@ ; `string'
PUBLIC	??_C@_0BH@OOEDMGHP@width?5must?5be?5positive?$AA@ ; `string'
PUBLIC	??_C@_0CD@GMCNEKB@trying?5to?5access?5non?9existent?5bi@ ; `string'
PUBLIC	__real@405bc00000000000
EXTRN	lua_gettop:PROC
EXTRN	lua_pushinteger:PROC
EXTRN	lua_pushboolean:PROC
EXTRN	lua_createtable:PROC
EXTRN	luaL_checkversion_:PROC
EXTRN	luaL_argerror:PROC
EXTRN	luaL_checkinteger:PROC
EXTRN	luaL_optinteger:PROC
EXTRN	luaL_error:PROC
EXTRN	luaL_setfuncs:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaopen_bit32 DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$luaopen_bit32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$andaux DD imagerel andaux
	DD	imagerel andaux+90
	DD	imagerel $unwind$andaux
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_and DD	imagerel b_and
	DD	imagerel b_and+103
	DD	imagerel $unwind$b_and
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_test DD imagerel b_test
	DD	imagerel b_test+108
	DD	imagerel $unwind$b_test
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_or DD	imagerel b_or
	DD	imagerel b_or+103
	DD	imagerel $unwind$b_or
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_xor DD	imagerel b_xor
	DD	imagerel b_xor+103
	DD	imagerel $unwind$b_xor
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_not DD	imagerel b_not
	DD	imagerel b_not+43
	DD	imagerel $unwind$b_not
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_shift DD imagerel b_shift
	DD	imagerel b_shift+100
	DD	imagerel $unwind$b_shift
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_lshift DD imagerel b_lshift
	DD	imagerel b_lshift+112
	DD	imagerel $unwind$b_lshift
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_rshift DD imagerel b_rshift
	DD	imagerel b_rshift+112
	DD	imagerel $unwind$b_rshift
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_arshift DD imagerel b_arshift
	DD	imagerel b_arshift+157
	DD	imagerel $unwind$b_arshift
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_rot DD	imagerel b_rot
	DD	imagerel b_rot+88
	DD	imagerel $unwind$b_rot
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_lrot DD imagerel b_lrot
	DD	imagerel b_lrot+101
	DD	imagerel $unwind$b_lrot
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_rrot DD imagerel b_rrot
	DD	imagerel b_rrot+103
	DD	imagerel $unwind$b_rrot
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fieldargs DD imagerel fieldargs
	DD	imagerel fieldargs+160
	DD	imagerel $unwind$fieldargs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_extract DD imagerel b_extract
	DD	imagerel b_extract+207
	DD	imagerel $unwind$b_extract
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$b_replace DD imagerel b_replace
	DD	imagerel b_replace+250
	DD	imagerel $unwind$b_replace
pdata	ENDS
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_0CD@GMCNEKB@trying?5to?5access?5non?9existent?5bi@
CONST	SEGMENT
??_C@_0CD@GMCNEKB@trying?5to?5access?5non?9existent?5bi@ DB 'trying to ac'
	DB	'cess non-existent bits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OOEDMGHP@width?5must?5be?5positive?$AA@
CONST	SEGMENT
??_C@_0BH@OOEDMGHP@width?5must?5be?5positive?$AA@ DB 'width must be posit'
	DB	'ive', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DJLBNAFE@field?5cannot?5be?5negative?$AA@
CONST	SEGMENT
??_C@_0BJ@DJLBNAFE@field?5cannot?5be?5negative?$AA@ DB 'field cannot be n'
	DB	'egative', 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_replace DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_extract DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fieldargs DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_rrot DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_lrot DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_rot DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_arshift DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_rshift DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_lshift DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_shift DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_not DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_xor DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_or DD	081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_test DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$b_and DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$andaux DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaopen_bit32 DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_replace
_TEXT	SEGMENT
L$ = 48
b_replace PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 190
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 192
  0001a	ba 01 00 00 00	 mov	 edx, 1
  0001f	48 8b d9	 mov	 rbx, rcx
  00022	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 193
  00027	ba 02 00 00 00	 mov	 edx, 2
  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	8b e8		 mov	 ebp, eax
  00031	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 194
  00036	ba 03 00 00 00	 mov	 edx, 3
  0003b	48 8b cb	 mov	 rcx, rbx
  0003e	44 8b f0	 mov	 r14d, eax
  00041	e8 00 00 00 00	 call	 luaL_checkinteger
  00046	ba 04 00 00 00	 mov	 edx, 4
  0004b	48 8b cb	 mov	 rcx, rbx
  0004e	44 8d 42 fd	 lea	 r8d, QWORD PTR [rdx-3]
  00052	48 8b f0	 mov	 rsi, rax
  00055	e8 00 00 00 00	 call	 luaL_optinteger
  0005a	48 8b f8	 mov	 rdi, rax
  0005d	48 85 f6	 test	 rsi, rsi
  00060	79 14		 jns	 SHORT $LN6@b_replace
  00062	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@DJLBNAFE@field?5cannot?5be?5negative?$AA@
  00069	ba 03 00 00 00	 mov	 edx, 3
  0006e	48 8b cb	 mov	 rcx, rbx
  00071	e8 00 00 00 00	 call	 luaL_argerror
$LN6@b_replace:
  00076	48 85 ff	 test	 rdi, rdi
  00079	7f 14		 jg	 SHORT $LN7@b_replace
  0007b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@OOEDMGHP@width?5must?5be?5positive?$AA@
  00082	ba 04 00 00 00	 mov	 edx, 4
  00087	48 8b cb	 mov	 rcx, rbx
  0008a	e8 00 00 00 00	 call	 luaL_argerror
$LN7@b_replace:
  0008f	48 8d 04 37	 lea	 rax, QWORD PTR [rdi+rsi]
  00093	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  00097	7e 0f		 jle	 SHORT $LN3@b_replace
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@GMCNEKB@trying?5to?5access?5non?9existent?5bi@
  000a0	48 8b cb	 mov	 rcx, rbx
  000a3	e8 00 00 00 00	 call	 luaL_error
$LN3@b_replace:
; Line 195
  000a8	8d 4f ff	 lea	 ecx, DWORD PTR [rdi-1]
  000ab	49 b8 fe ff ff
	ff 01 00 00 00	 mov	 r8, 8589934590		; 00000001fffffffeH
  000b5	49 d3 e0	 shl	 r8, cl
; Line 196
  000b8	8b ce		 mov	 ecx, esi
  000ba	49 f7 d0	 not	 r8
  000bd	49 8b d0	 mov	 rdx, r8
  000c0	4d 23 c6	 and	 r8, r14
  000c3	48 d3 e2	 shl	 rdx, cl
  000c6	49 d3 e0	 shl	 r8, cl
; Line 197
  000c9	48 8b cb	 mov	 rcx, rbx
  000cc	48 f7 d2	 not	 rdx
  000cf	48 23 d5	 and	 rdx, rbp
  000d2	49 0b d0	 or	 rdx, r8
  000d5	e8 00 00 00 00	 call	 lua_pushinteger
; Line 199
  000da	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000df	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000e4	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000e9	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000ee	b8 01 00 00 00	 mov	 eax, 1
  000f3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f7	41 5e		 pop	 r14
  000f9	c3		 ret	 0
b_replace ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_extract
_TEXT	SEGMENT
L$ = 48
b_extract PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 180
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 182
  00014	ba 01 00 00 00	 mov	 edx, 1
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 183
  00021	ba 02 00 00 00	 mov	 edx, 2
  00026	48 8b cb	 mov	 rcx, rbx
  00029	8b e8		 mov	 ebp, eax
  0002b	e8 00 00 00 00	 call	 luaL_checkinteger
  00030	ba 03 00 00 00	 mov	 edx, 3
  00035	44 8d 42 fe	 lea	 r8d, QWORD PTR [rdx-2]
  00039	48 8b cb	 mov	 rcx, rbx
  0003c	48 8b f0	 mov	 rsi, rax
  0003f	e8 00 00 00 00	 call	 luaL_optinteger
  00044	48 8b f8	 mov	 rdi, rax
  00047	48 85 f6	 test	 rsi, rsi
  0004a	79 14		 jns	 SHORT $LN6@b_extract
  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@DJLBNAFE@field?5cannot?5be?5negative?$AA@
  00053	ba 02 00 00 00	 mov	 edx, 2
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 luaL_argerror
$LN6@b_extract:
  00060	48 85 ff	 test	 rdi, rdi
  00063	7f 14		 jg	 SHORT $LN7@b_extract
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@OOEDMGHP@width?5must?5be?5positive?$AA@
  0006c	ba 03 00 00 00	 mov	 edx, 3
  00071	48 8b cb	 mov	 rcx, rbx
  00074	e8 00 00 00 00	 call	 luaL_argerror
$LN7@b_extract:
  00079	48 8d 04 37	 lea	 rax, QWORD PTR [rdi+rsi]
  0007d	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  00081	7e 0f		 jle	 SHORT $LN3@b_extract
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@GMCNEKB@trying?5to?5access?5non?9existent?5bi@
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	e8 00 00 00 00	 call	 luaL_error
$LN3@b_extract:
; Line 184
  00092	8d 4f ff	 lea	 ecx, DWORD PTR [rdi-1]
  00095	48 ba fe ff ff
	ff 01 00 00 00	 mov	 rdx, 8589934590		; 00000001fffffffeH
  0009f	48 d3 e2	 shl	 rdx, cl
  000a2	8b ce		 mov	 ecx, esi
  000a4	48 d3 ed	 shr	 rbp, cl
  000a7	48 f7 d2	 not	 rdx
; Line 185
  000aa	48 8b cb	 mov	 rcx, rbx
  000ad	48 23 d5	 and	 rdx, rbp
  000b0	e8 00 00 00 00	 call	 lua_pushinteger
; Line 187
  000b5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ba	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000bf	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000c4	b8 01 00 00 00	 mov	 eax, 1
  000c9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cd	5f		 pop	 rdi
  000ce	c3		 ret	 0
b_extract ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT fieldargs
_TEXT	SEGMENT
L$ = 64
farg$ = 72
width$ = 80
fieldargs PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 168
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00018	4d 8b f0	 mov	 r14, r8
  0001b	8b ea		 mov	 ebp, edx
  0001d	48 8b f1	 mov	 rsi, rcx
; Line 169
  00020	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 170
  00025	8d 55 01	 lea	 edx, DWORD PTR [rbp+1]
  00028	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002e	48 8b ce	 mov	 rcx, rsi
  00031	48 8b f8	 mov	 rdi, rax
  00034	e8 00 00 00 00	 call	 luaL_optinteger
  00039	48 8b d8	 mov	 rbx, rax
; Line 171
  0003c	48 85 ff	 test	 rdi, rdi
  0003f	79 11		 jns	 SHORT $LN4@fieldargs
  00041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@DJLBNAFE@field?5cannot?5be?5negative?$AA@
  00048	8b d5		 mov	 edx, ebp
  0004a	48 8b ce	 mov	 rcx, rsi
  0004d	e8 00 00 00 00	 call	 luaL_argerror
$LN4@fieldargs:
; Line 172
  00052	48 85 db	 test	 rbx, rbx
  00055	7f 12		 jg	 SHORT $LN5@fieldargs
  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@OOEDMGHP@width?5must?5be?5positive?$AA@
  0005e	8d 55 01	 lea	 edx, DWORD PTR [rbp+1]
  00061	48 8b ce	 mov	 rcx, rsi
  00064	e8 00 00 00 00	 call	 luaL_argerror
$LN5@fieldargs:
; Line 173
  00069	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]
  0006d	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  00071	7e 0f		 jle	 SHORT $LN6@fieldargs
; Line 174
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@GMCNEKB@trying?5to?5access?5non?9existent?5bi@
  0007a	48 8b ce	 mov	 rcx, rsi
  0007d	e8 00 00 00 00	 call	 luaL_error
$LN6@fieldargs:
; Line 177
  00082	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00087	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0008c	41 89 1e	 mov	 DWORD PTR [r14], ebx
  0008f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00094	8b c7		 mov	 eax, edi
  00096	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009a	41 5f		 pop	 r15
  0009c	41 5e		 pop	 r14
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
fieldargs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_rrot
_TEXT	SEGMENT
L$ = 48
b_rrot	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 157
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 158
  0000a	ba 02 00 00 00	 mov	 edx, 2
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 luaL_checkinteger
  00017	ba 01 00 00 00	 mov	 edx, 1
  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	48 8b d8	 mov	 rbx, rax
  00022	f7 db		 neg	 ebx
  00024	e8 00 00 00 00	 call	 luaL_checkinteger
  00029	44 8b c8	 mov	 r9d, eax
  0002c	83 e3 1f	 and	 ebx, 31
  0002f	74 1b		 je	 SHORT $LN3@b_rrot
  00031	45 8b c1	 mov	 r8d, r9d
  00034	41 8b d1	 mov	 edx, r9d
  00037	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003c	2b cb		 sub	 ecx, ebx
  0003e	49 d3 e8	 shr	 r8, cl
  00041	8b cb		 mov	 ecx, ebx
  00043	48 d3 e2	 shl	 rdx, cl
  00046	4d 8b c8	 mov	 r9, r8
  00049	4c 0b ca	 or	 r9, rdx
$LN3@b_rrot:
  0004c	41 8b d1	 mov	 edx, r9d
  0004f	48 8b cf	 mov	 rcx, rdi
  00052	e8 00 00 00 00	 call	 lua_pushinteger
; Line 159
  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
b_rrot	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_lrot
_TEXT	SEGMENT
L$ = 48
b_lrot	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 152
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 153
  0000a	ba 02 00 00 00	 mov	 edx, 2
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 luaL_checkinteger
  00017	ba 01 00 00 00	 mov	 edx, 1
  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	48 8b d8	 mov	 rbx, rax
  00022	e8 00 00 00 00	 call	 luaL_checkinteger
  00027	44 8b c8	 mov	 r9d, eax
  0002a	83 e3 1f	 and	 ebx, 31
  0002d	74 1b		 je	 SHORT $LN3@b_lrot
  0002f	45 8b c1	 mov	 r8d, r9d
  00032	41 8b d1	 mov	 edx, r9d
  00035	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003a	2b cb		 sub	 ecx, ebx
  0003c	49 d3 e8	 shr	 r8, cl
  0003f	8b cb		 mov	 ecx, ebx
  00041	48 d3 e2	 shl	 rdx, cl
  00044	4d 8b c8	 mov	 r9, r8
  00047	4c 0b ca	 or	 r9, rdx
$LN3@b_lrot:
  0004a	41 8b d1	 mov	 edx, r9d
  0004d	48 8b cf	 mov	 rcx, rdi
  00050	e8 00 00 00 00	 call	 lua_pushinteger
; Line 154
  00055	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005a	b8 01 00 00 00	 mov	 eax, 1
  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
b_lrot	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_rot
_TEXT	SEGMENT
L$ = 48
d$ = 56
b_rot	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 141
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
; Line 142
  0000d	ba 01 00 00 00	 mov	 edx, 1
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 144
  0001a	44 8b c8	 mov	 r9d, eax
  0001d	83 e3 1f	 and	 ebx, 31
; Line 145
  00020	74 1b		 je	 SHORT $LN1@b_rot
; Line 146
  00022	45 8b c1	 mov	 r8d, r9d
  00025	41 8b d1	 mov	 edx, r9d
  00028	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0002d	2b cb		 sub	 ecx, ebx
  0002f	49 d3 e8	 shr	 r8, cl
  00032	8b cb		 mov	 ecx, ebx
  00034	48 d3 e2	 shl	 rdx, cl
  00037	4d 8b c8	 mov	 r9, r8
  0003a	4c 0b ca	 or	 r9, rdx
$LN1@b_rot:
; Line 147
  0003d	41 8b d1	 mov	 edx, r9d
  00040	48 8b cf	 mov	 rcx, rdi
  00043	e8 00 00 00 00	 call	 lua_pushinteger
; Line 149
  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
b_rot	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_arshift
_TEXT	SEGMENT
L$ = 48
b_arshift PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 126
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 127
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 128
  00017	ba 02 00 00 00	 mov	 edx, 2
  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	48 8b d8	 mov	 rbx, rax
  00022	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 129
  00027	48 85 c0	 test	 rax, rax
  0002a	78 28		 js	 SHORT $LN4@b_arshift
  0002c	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  00031	48 85 d9	 test	 rbx, rcx
  00034	74 1e		 je	 SHORT $LN4@b_arshift
; Line 132
  00036	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  0003b	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  0003f	7d 44		 jge	 SHORT $LN1@b_arshift
; Line 134
  00041	48 8b c8	 mov	 rcx, rax
  00044	48 d3 ea	 shr	 rdx, cl
  00047	48 d3 eb	 shr	 rbx, cl
  0004a	48 f7 d2	 not	 rdx
  0004d	48 0b d3	 or	 rdx, rbx
  00050	8b d2		 mov	 edx, edx
; Line 136
  00052	eb 31		 jmp	 SHORT $LN1@b_arshift
$LN4@b_arshift:
; Line 130
  00054	48 f7 d8	 neg	 rax
  00057	79 17		 jns	 SHORT $LN13@b_arshift
  00059	48 f7 d8	 neg	 rax
  0005c	8b db		 mov	 ebx, ebx
  0005e	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  00062	7c 04		 jl	 SHORT $LN12@b_arshift
  00064	33 db		 xor	 ebx, ebx
  00066	eb 1a		 jmp	 SHORT $LN10@b_arshift
$LN12@b_arshift:
  00068	48 8b c8	 mov	 rcx, rax
  0006b	48 d3 eb	 shr	 rbx, cl
  0006e	eb 12		 jmp	 SHORT $LN10@b_arshift
$LN13@b_arshift:
  00070	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  00074	7c 04		 jl	 SHORT $LN9@b_arshift
  00076	33 db		 xor	 ebx, ebx
  00078	eb 06		 jmp	 SHORT $LN8@b_arshift
$LN9@b_arshift:
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	48 d3 e3	 shl	 rbx, cl
$LN8@b_arshift:
  00080	8b db		 mov	 ebx, ebx
$LN10@b_arshift:
  00082	48 8b d3	 mov	 rdx, rbx
$LN1@b_arshift:
  00085	48 8b cf	 mov	 rcx, rdi
  00088	e8 00 00 00 00	 call	 lua_pushinteger
; Line 138
  0008d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00092	b8 01 00 00 00	 mov	 eax, 1
  00097	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009b	5f		 pop	 rdi
  0009c	c3		 ret	 0
b_arshift ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_rshift
_TEXT	SEGMENT
L$ = 48
b_rshift PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 121
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 122
  0000a	ba 02 00 00 00	 mov	 edx, 2
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 luaL_checkinteger
  00017	ba 01 00 00 00	 mov	 edx, 1
  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	48 8b d8	 mov	 rbx, rax
  00022	e8 00 00 00 00	 call	 luaL_checkinteger
  00027	48 f7 db	 neg	 rbx
  0002a	79 17		 jns	 SHORT $LN8@b_rshift
  0002c	48 f7 db	 neg	 rbx
  0002f	8b c0		 mov	 eax, eax
  00031	48 83 fb 20	 cmp	 rbx, 32			; 00000020H
  00035	7c 04		 jl	 SHORT $LN7@b_rshift
  00037	33 c0		 xor	 eax, eax
  00039	eb 1a		 jmp	 SHORT $LN5@b_rshift
$LN7@b_rshift:
  0003b	48 8b cb	 mov	 rcx, rbx
  0003e	48 d3 e8	 shr	 rax, cl
  00041	eb 12		 jmp	 SHORT $LN5@b_rshift
$LN8@b_rshift:
  00043	48 83 fb 20	 cmp	 rbx, 32			; 00000020H
  00047	7c 04		 jl	 SHORT $LN4@b_rshift
  00049	33 c0		 xor	 eax, eax
  0004b	eb 06		 jmp	 SHORT $LN3@b_rshift
$LN4@b_rshift:
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	48 d3 e0	 shl	 rax, cl
$LN3@b_rshift:
  00053	8b c0		 mov	 eax, eax
$LN5@b_rshift:
  00055	48 8b d0	 mov	 rdx, rax
  00058	48 8b cf	 mov	 rcx, rdi
  0005b	e8 00 00 00 00	 call	 lua_pushinteger
; Line 123
  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
b_rshift ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_lshift
_TEXT	SEGMENT
L$ = 48
b_lshift PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 116
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 117
  0000a	ba 02 00 00 00	 mov	 edx, 2
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 luaL_checkinteger
  00017	ba 01 00 00 00	 mov	 edx, 1
  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	48 8b d8	 mov	 rbx, rax
  00022	e8 00 00 00 00	 call	 luaL_checkinteger
  00027	48 85 db	 test	 rbx, rbx
  0002a	79 17		 jns	 SHORT $LN8@b_lshift
  0002c	48 f7 db	 neg	 rbx
  0002f	8b c0		 mov	 eax, eax
  00031	48 83 fb 20	 cmp	 rbx, 32			; 00000020H
  00035	7c 04		 jl	 SHORT $LN7@b_lshift
  00037	33 c0		 xor	 eax, eax
  00039	eb 1a		 jmp	 SHORT $LN5@b_lshift
$LN7@b_lshift:
  0003b	48 8b cb	 mov	 rcx, rbx
  0003e	48 d3 e8	 shr	 rax, cl
  00041	eb 12		 jmp	 SHORT $LN5@b_lshift
$LN8@b_lshift:
  00043	48 83 fb 20	 cmp	 rbx, 32			; 00000020H
  00047	7c 04		 jl	 SHORT $LN4@b_lshift
  00049	33 c0		 xor	 eax, eax
  0004b	eb 06		 jmp	 SHORT $LN3@b_lshift
$LN4@b_lshift:
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	48 d3 e0	 shl	 rax, cl
$LN3@b_lshift:
  00053	8b c0		 mov	 eax, eax
$LN5@b_lshift:
  00055	48 8b d0	 mov	 rdx, rax
  00058	48 8b cf	 mov	 rcx, rdi
  0005b	e8 00 00 00 00	 call	 lua_pushinteger
; Line 118
  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
b_lshift ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_shift
_TEXT	SEGMENT
L$ = 48
r$ = 56
i$ = 64
b_shift	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 99
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8b c1	 mov	 rax, rcx
; Line 100
  00007	4d 85 c0	 test	 r8, r8
  0000a	79 34		 jns	 SHORT $LN6@b_shift
; Line 101
  0000c	49 f7 d8	 neg	 r8
; Line 102
  0000f	8b d2		 mov	 edx, edx
; Line 103
  00011	49 83 f8 20	 cmp	 r8, 32			; 00000020H
  00015	7c 11		 jl	 SHORT $LN5@b_shift
  00017	33 d2		 xor	 edx, edx
; Line 111
  00019	e8 00 00 00 00	 call	 lua_pushinteger
; Line 112
  0001e	b8 01 00 00 00	 mov	 eax, 1
; Line 113
  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN5@b_shift:
; Line 104
  00028	49 8b c8	 mov	 rcx, r8
  0002b	48 d3 ea	 shr	 rdx, cl
; Line 111
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 lua_pushinteger
; Line 112
  00036	b8 01 00 00 00	 mov	 eax, 1
; Line 113
  0003b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003f	c3		 ret	 0
$LN6@b_shift:
; Line 107
  00040	49 83 f8 20	 cmp	 r8, 32			; 00000020H
  00044	7c 04		 jl	 SHORT $LN2@b_shift
  00046	33 d2		 xor	 edx, edx
  00048	eb 06		 jmp	 SHORT $LN1@b_shift
$LN2@b_shift:
; Line 108
  0004a	49 8b c8	 mov	 rcx, r8
  0004d	48 d3 e2	 shl	 rdx, cl
$LN1@b_shift:
; Line 109
  00050	8b d2		 mov	 edx, edx
; Line 111
  00052	48 8b c8	 mov	 rcx, rax
  00055	e8 00 00 00 00	 call	 lua_pushinteger
; Line 112
  0005a	b8 01 00 00 00	 mov	 eax, 1
; Line 113
  0005f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00063	c3		 ret	 0
b_shift	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_not
_TEXT	SEGMENT
L$ = 48
b_not	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 92
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 93
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 94
  00013	48 8b cb	 mov	 rcx, rbx
  00016	48 f7 d0	 not	 rax
  00019	8b d0		 mov	 edx, eax
  0001b	e8 00 00 00 00	 call	 lua_pushinteger
; Line 95
  00020	b8 01 00 00 00	 mov	 eax, 1
; Line 96
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5b		 pop	 rbx
  0002a	c3		 ret	 0
b_not	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_xor
_TEXT	SEGMENT
L$ = 48
b_xor	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 82
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f1	 mov	 rsi, rcx
; Line 83
  00017	e8 00 00 00 00	 call	 lua_gettop
; Line 85
  0001c	bb 01 00 00 00	 mov	 ebx, 1
  00021	33 ff		 xor	 edi, edi
  00023	8b e8		 mov	 ebp, eax
  00025	3b c3		 cmp	 eax, ebx
  00027	7c 1a		 jl	 SHORT $LN1@b_xor
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@b_xor:
; Line 86
  00030	8b d3		 mov	 edx, ebx
  00032	48 8b ce	 mov	 rcx, rsi
  00035	e8 00 00 00 00	 call	 luaL_checkinteger
  0003a	ff c3		 inc	 ebx
  0003c	48 33 f8	 xor	 rdi, rax
  0003f	3b dd		 cmp	 ebx, ebp
  00041	7e ed		 jle	 SHORT $LL3@b_xor
$LN1@b_xor:
; Line 87
  00043	8b d7		 mov	 edx, edi
  00045	48 8b ce	 mov	 rcx, rsi
  00048	e8 00 00 00 00	 call	 lua_pushinteger
; Line 89
  0004d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00052	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00057	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
b_xor	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_or
_TEXT	SEGMENT
L$ = 48
b_or	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 72
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f1	 mov	 rsi, rcx
; Line 73
  00017	e8 00 00 00 00	 call	 lua_gettop
; Line 75
  0001c	bb 01 00 00 00	 mov	 ebx, 1
  00021	33 ff		 xor	 edi, edi
  00023	8b e8		 mov	 ebp, eax
  00025	3b c3		 cmp	 eax, ebx
  00027	7c 1a		 jl	 SHORT $LN1@b_or
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@b_or:
; Line 76
  00030	8b d3		 mov	 edx, ebx
  00032	48 8b ce	 mov	 rcx, rsi
  00035	e8 00 00 00 00	 call	 luaL_checkinteger
  0003a	ff c3		 inc	 ebx
  0003c	48 0b f8	 or	 rdi, rax
  0003f	3b dd		 cmp	 ebx, ebp
  00041	7e ed		 jle	 SHORT $LL3@b_or
$LN1@b_or:
; Line 77
  00043	8b d7		 mov	 edx, edi
  00045	48 8b ce	 mov	 rcx, rsi
  00048	e8 00 00 00 00	 call	 lua_pushinteger
; Line 79
  0004d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00052	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00057	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
b_or	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_test
_TEXT	SEGMENT
L$ = 48
b_test	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 65
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f1	 mov	 rsi, rcx
; Line 66
  00017	e8 00 00 00 00	 call	 lua_gettop
  0001c	bb 01 00 00 00	 mov	 ebx, 1
  00021	48 83 cf ff	 or	 rdi, -1
  00025	8b e8		 mov	 ebp, eax
  00027	3b c3		 cmp	 eax, ebx
  00029	7c 18		 jl	 SHORT $LN3@b_test
  0002b	0f 1f 44 00 00	 npad	 5
$LL5@b_test:
  00030	8b d3		 mov	 edx, ebx
  00032	48 8b ce	 mov	 rcx, rsi
  00035	e8 00 00 00 00	 call	 luaL_checkinteger
  0003a	ff c3		 inc	 ebx
  0003c	48 23 f8	 and	 rdi, rax
  0003f	3b dd		 cmp	 ebx, ebp
  00041	7e ed		 jle	 SHORT $LL5@b_test
$LN3@b_test:
; Line 67
  00043	33 d2		 xor	 edx, edx
  00045	85 ff		 test	 edi, edi
  00047	48 8b ce	 mov	 rcx, rsi
  0004a	0f 95 c2	 setne	 dl
  0004d	e8 00 00 00 00	 call	 lua_pushboolean
; Line 69
  00052	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00057	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0005c	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
  0006b	c3		 ret	 0
b_test	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT b_and
_TEXT	SEGMENT
L$ = 48
b_and	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 58
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f1	 mov	 rsi, rcx
; Line 59
  00017	e8 00 00 00 00	 call	 lua_gettop
  0001c	bb 01 00 00 00	 mov	 ebx, 1
  00021	48 83 cf ff	 or	 rdi, -1
  00025	8b e8		 mov	 ebp, eax
  00027	3b c3		 cmp	 eax, ebx
  00029	7c 18		 jl	 SHORT $LN3@b_and
  0002b	0f 1f 44 00 00	 npad	 5
$LL5@b_and:
  00030	8b d3		 mov	 edx, ebx
  00032	48 8b ce	 mov	 rcx, rsi
  00035	e8 00 00 00 00	 call	 luaL_checkinteger
  0003a	ff c3		 inc	 ebx
  0003c	48 23 f8	 and	 rdi, rax
  0003f	3b dd		 cmp	 ebx, ebp
  00041	7e ed		 jle	 SHORT $LL5@b_and
$LN3@b_and:
  00043	8b d7		 mov	 edx, edi
; Line 60
  00045	48 8b ce	 mov	 rcx, rsi
  00048	e8 00 00 00 00	 call	 lua_pushinteger
; Line 62
  0004d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00052	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00057	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
b_and	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT andaux
_TEXT	SEGMENT
L$ = 48
andaux	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 49
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f1	 mov	 rsi, rcx
; Line 50
  00017	e8 00 00 00 00	 call	 lua_gettop
; Line 52
  0001c	bb 01 00 00 00	 mov	 ebx, 1
  00021	48 83 cf ff	 or	 rdi, -1
  00025	8b e8		 mov	 ebp, eax
  00027	3b c3		 cmp	 eax, ebx
  00029	7c 18		 jl	 SHORT $LN1@andaux
  0002b	0f 1f 44 00 00	 npad	 5
$LL3@andaux:
; Line 53
  00030	8b d3		 mov	 edx, ebx
  00032	48 8b ce	 mov	 rcx, rsi
  00035	e8 00 00 00 00	 call	 luaL_checkinteger
  0003a	ff c3		 inc	 ebx
  0003c	48 23 f8	 and	 rdi, rax
  0003f	3b dd		 cmp	 ebx, ebp
  00041	7e ed		 jle	 SHORT $LL3@andaux
$LN1@andaux:
; Line 55
  00043	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00048	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0004d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00052	8b c7		 mov	 eax, edi
  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
andaux	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaopen_bit32
_TEXT	SEGMENT
L$ = 48
luaopen_bit32 PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lbitlib.c
; Line 220
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 221
  00006	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@405bc00000000000
  0000e	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00014	48 8b d9	 mov	 rbx, rcx
  00017	e8 00 00 00 00	 call	 luaL_checkversion_
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	44 8d 42 0c	 lea	 r8d, QWORD PTR [rdx+12]
  00025	e8 00 00 00 00	 call	 lua_createtable
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:bitlib
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 luaL_setfuncs
; Line 222
  0003c	b8 01 00 00 00	 mov	 eax, 1
; Line 223
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5b		 pop	 rbx
  00046	c3		 ret	 0
luaopen_bit32 ENDP
_TEXT	ENDS
END
