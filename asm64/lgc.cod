; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	luaC_fix
PUBLIC	luaC_freeallobjects
PUBLIC	luaC_step
PUBLIC	luaC_runtilstate
PUBLIC	luaC_fullgc
PUBLIC	luaC_newobj
PUBLIC	luaC_barrier_
PUBLIC	luaC_barrierback_
PUBLIC	luaC_upvalbarrier_
PUBLIC	luaC_checkfinalizer
PUBLIC	luaC_upvdeccount
PUBLIC	??_C@_0L@EDOLMPAK@no?5message?$AA@		; `string'
PUBLIC	??_C@_0BO@HIAKJHOM@error?5in?5__gc?5metamethod?5?$CI?$CFs?$CJ?$AA@ ; `string'
EXTRN	__imp_strchr:PROC
EXTRN	luaO_pushfstring:PROC
EXTRN	luaT_gettm:PROC
EXTRN	luaT_gettmbyobj:PROC
EXTRN	luaM_realloc_:PROC
EXTRN	luaE_setdebt:PROC
EXTRN	luaE_freethread:PROC
EXTRN	luaD_callnoyield:PROC
EXTRN	luaD_pcall:PROC
EXTRN	luaD_shrinkstack:PROC
EXTRN	luaD_throw:PROC
EXTRN	luaF_freeproto:PROC
EXTRN	luaS_resize:PROC
EXTRN	luaS_clearcache:PROC
EXTRN	luaS_remove:PROC
EXTRN	luaH_free:PROC
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaC_freeallobjects DD imagerel $LN21
	DD	imagerel $LN21+176
	DD	imagerel $unwind$luaC_freeallobjects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaC_step DD imagerel $LN25
	DD	imagerel $LN25+252
	DD	imagerel $unwind$luaC_step
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaC_runtilstate DD imagerel $LN36
	DD	imagerel $LN36+32
	DD	imagerel $unwind$luaC_runtilstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$luaC_runtilstate DD imagerel $LN36+32
	DD	imagerel $LN36+529
	DD	imagerel $chain$3$luaC_runtilstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$luaC_runtilstate DD imagerel $LN36+529
	DD	imagerel $LN36+572
	DD	imagerel $chain$4$luaC_runtilstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaC_fullgc DD imagerel $LN12
	DD	imagerel $LN12+10
	DD	imagerel $unwind$luaC_fullgc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$luaC_fullgc DD imagerel $LN12+10
	DD	imagerel $LN12+32
	DD	imagerel $chain$0$luaC_fullgc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$luaC_fullgc DD imagerel $LN12+32
	DD	imagerel $LN12+76
	DD	imagerel $chain$1$luaC_fullgc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$luaC_fullgc DD imagerel $LN12+76
	DD	imagerel $LN12+197
	DD	imagerel $chain$2$luaC_fullgc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$luaC_fullgc DD imagerel $LN12+197
	DD	imagerel $LN12+230
	DD	imagerel $chain$3$luaC_fullgc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaC_newobj DD imagerel $LN4
	DD	imagerel $LN4+68
	DD	imagerel $unwind$luaC_newobj
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaC_checkfinalizer DD imagerel $LN21
	DD	imagerel $LN21+196
	DD	imagerel $unwind$luaC_checkfinalizer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$reallymarkobject DD imagerel reallymarkobject
	DD	imagerel reallymarkobject+36
	DD	imagerel $unwind$reallymarkobject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$reallymarkobject DD imagerel reallymarkobject+36
	DD	imagerel reallymarkobject+173
	DD	imagerel $chain$0$reallymarkobject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$reallymarkobject DD imagerel reallymarkobject+173
	DD	imagerel reallymarkobject+210
	DD	imagerel $chain$2$reallymarkobject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$reallymarkobject DD imagerel reallymarkobject+210
	DD	imagerel reallymarkobject+242
	DD	imagerel $chain$4$reallymarkobject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$reallymarkobject DD imagerel reallymarkobject+242
	DD	imagerel reallymarkobject+289
	DD	imagerel $chain$6$reallymarkobject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$reallymarkobject DD imagerel reallymarkobject+289
	DD	imagerel reallymarkobject+300
	DD	imagerel $chain$7$reallymarkobject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$reallymarkobject DD imagerel reallymarkobject+300
	DD	imagerel reallymarkobject+367
	DD	imagerel $chain$8$reallymarkobject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$iscleared DD imagerel iscleared
	DD	imagerel iscleared+53
	DD	imagerel $unwind$iscleared
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$markmt DD imagerel markmt
	DD	imagerel markmt+359
	DD	imagerel $unwind$markmt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$markbeingfnz DD imagerel markbeingfnz
	DD	imagerel markbeingfnz+359
	DD	imagerel $unwind$markbeingfnz
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$remarkupvals DD imagerel remarkupvals
	DD	imagerel remarkupvals+26
	DD	imagerel $unwind$remarkupvals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$remarkupvals DD imagerel remarkupvals+26
	DD	imagerel remarkupvals+390
	DD	imagerel $chain$1$remarkupvals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$remarkupvals DD imagerel remarkupvals+390
	DD	imagerel remarkupvals+396
	DD	imagerel $chain$2$remarkupvals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$remarkupvals DD imagerel remarkupvals+396
	DD	imagerel remarkupvals+463
	DD	imagerel $chain$3$remarkupvals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$restartcollection DD imagerel restartcollection
	DD	imagerel restartcollection+103
	DD	imagerel $unwind$restartcollection
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$traverseweakvalue DD imagerel traverseweakvalue
	DD	imagerel traverseweakvalue+248
	DD	imagerel $unwind$traverseweakvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$traverseephemeron DD imagerel traverseephemeron
	DD	imagerel traverseephemeron+390
	DD	imagerel $unwind$traverseephemeron
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$traversestrongtable DD imagerel traversestrongtable
	DD	imagerel traversestrongtable+198
	DD	imagerel $unwind$traversestrongtable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$traversetable DD imagerel traversetable
	DD	imagerel traversetable+276
	DD	imagerel $unwind$traversetable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$traverseproto DD imagerel traverseproto
	DD	imagerel traverseproto+336
	DD	imagerel $unwind$traverseproto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$traverseCclosure DD imagerel traverseCclosure
	DD	imagerel traverseCclosure+25
	DD	imagerel $unwind$traverseCclosure
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$traverseCclosure DD imagerel traverseCclosure+25
	DD	imagerel traverseCclosure+312
	DD	imagerel $chain$0$traverseCclosure
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$traverseCclosure DD imagerel traverseCclosure+312
	DD	imagerel traverseCclosure+332
	DD	imagerel $chain$1$traverseCclosure
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$traverseCclosure DD imagerel traverseCclosure+332
	DD	imagerel traverseCclosure+399
	DD	imagerel $chain$2$traverseCclosure
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$traverseLclosure DD imagerel traverseLclosure
	DD	imagerel traverseLclosure+143
	DD	imagerel $unwind$traverseLclosure
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$traversethread DD imagerel traversethread
	DD	imagerel traversethread+206
	DD	imagerel $unwind$traversethread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$propagatemark DD imagerel propagatemark
	DD	imagerel propagatemark+187
	DD	imagerel $unwind$propagatemark
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$propagateall DD imagerel propagateall
	DD	imagerel propagateall+209
	DD	imagerel $unwind$propagateall
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$convergeephemerons DD imagerel convergeephemerons
	DD	imagerel convergeephemerons+126
	DD	imagerel $unwind$convergeephemerons
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$clearkeys DD imagerel clearkeys
	DD	imagerel clearkeys+14
	DD	imagerel $unwind$clearkeys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$clearkeys DD imagerel clearkeys+14
	DD	imagerel clearkeys+170
	DD	imagerel $chain$0$clearkeys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$clearkeys DD imagerel clearkeys+170
	DD	imagerel clearkeys+171
	DD	imagerel $chain$1$clearkeys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$clearvalues DD imagerel clearvalues
	DD	imagerel clearvalues+14
	DD	imagerel $unwind$clearvalues
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$clearvalues DD imagerel clearvalues+14
	DD	imagerel clearvalues+254
	DD	imagerel $chain$0$clearvalues
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$clearvalues DD imagerel clearvalues+254
	DD	imagerel clearvalues+255
	DD	imagerel $chain$1$clearvalues
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$freeLclosure DD imagerel freeLclosure
	DD	imagerel freeLclosure+29
	DD	imagerel $unwind$freeLclosure
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$freeLclosure DD imagerel freeLclosure+29
	DD	imagerel freeLclosure+95
	DD	imagerel $chain$0$freeLclosure
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$freeLclosure DD imagerel freeLclosure+95
	DD	imagerel freeLclosure+138
	DD	imagerel $chain$1$freeLclosure
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$freeobj DD imagerel freeobj
	DD	imagerel freeobj+287
	DD	imagerel $unwind$freeobj
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sweeplist DD imagerel sweeplist
	DD	imagerel sweeplist+58
	DD	imagerel $unwind$sweeplist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$sweeplist DD imagerel sweeplist+58
	DD	imagerel sweeplist+369
	DD	imagerel $chain$1$sweeplist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$sweeplist DD imagerel sweeplist+369
	DD	imagerel sweeplist+404
	DD	imagerel $chain$2$sweeplist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$sweeplist DD imagerel sweeplist+404
	DD	imagerel sweeplist+475
	DD	imagerel $chain$3$sweeplist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sweeptolive DD imagerel sweeptolive
	DD	imagerel sweeptolive+200
	DD	imagerel $unwind$sweeptolive
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$checkSizes DD imagerel checkSizes
	DD	imagerel checkSizes+19
	DD	imagerel $unwind$checkSizes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$checkSizes DD imagerel checkSizes+19
	DD	imagerel checkSizes+76
	DD	imagerel $chain$0$checkSizes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$checkSizes DD imagerel checkSizes+76
	DD	imagerel checkSizes+82
	DD	imagerel $chain$1$checkSizes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GCTM DD	imagerel GCTM
	DD	imagerel GCTM+155
	DD	imagerel $unwind$GCTM
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$GCTM DD imagerel GCTM+155
	DD	imagerel GCTM+278
	DD	imagerel $chain$1$GCTM
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$GCTM DD imagerel GCTM+278
	DD	imagerel GCTM+367
	DD	imagerel $chain$2$GCTM
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$runafewfinalizers DD imagerel runafewfinalizers
	DD	imagerel runafewfinalizers+440
	DD	imagerel $unwind$runafewfinalizers
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$callallpendingfinalizers DD imagerel callallpendingfinalizers
	DD	imagerel callallpendingfinalizers+34
	DD	imagerel $unwind$callallpendingfinalizers
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$callallpendingfinalizers DD imagerel callallpendingfinalizers+34
	DD	imagerel callallpendingfinalizers+322
	DD	imagerel $chain$3$callallpendingfinalizers
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$callallpendingfinalizers DD imagerel callallpendingfinalizers+322
	DD	imagerel callallpendingfinalizers+332
	DD	imagerel $chain$4$callallpendingfinalizers
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$callallpendingfinalizers DD imagerel callallpendingfinalizers+332
	DD	imagerel callallpendingfinalizers+399
	DD	imagerel $chain$5$callallpendingfinalizers
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$entersweep DD imagerel entersweep
	DD	imagerel entersweep+50
	DD	imagerel $unwind$entersweep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$atomic DD imagerel atomic
	DD	imagerel atomic+420
	DD	imagerel $unwind$atomic
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sweepstep DD imagerel sweepstep
	DD	imagerel sweepstep+39
	DD	imagerel $unwind$sweepstep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$sweepstep DD imagerel sweepstep+39
	DD	imagerel sweepstep+78
	DD	imagerel $chain$0$sweepstep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$sweepstep DD imagerel sweepstep+78
	DD	imagerel sweepstep+125
	DD	imagerel $chain$1$sweepstep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$singlestep DD imagerel singlestep
	DD	imagerel singlestep+608
	DD	imagerel $unwind$singlestep
pdata	ENDS
;	COMDAT ??_C@_0BO@HIAKJHOM@error?5in?5__gc?5metamethod?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@HIAKJHOM@error?5in?5__gc?5metamethod?5?$CI?$CFs?$CJ?$AA@ DB 'er'
	DB	'ror in __gc metamethod (%s)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EDOLMPAK@no?5message?$AA@
CONST	SEGMENT
??_C@_0L@EDOLMPAK@no?5message?$AA@ DB 'no message', 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$singlestep DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$sweepstep DD 021H
	DD	imagerel sweepstep
	DD	imagerel sweepstep+39
	DD	imagerel $unwind$sweepstep
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$sweepstep DD 020521H
	DD	063405H
	DD	imagerel sweepstep
	DD	imagerel sweepstep+39
	DD	imagerel $unwind$sweepstep
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sweepstep DD 060f01H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$atomic DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$entersweep DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$callallpendingfinalizers DD 080021H
	DD	0fc400H
	DD	0e7400H
	DD	0d6400H
	DD	0c3400H
	DD	imagerel callallpendingfinalizers
	DD	imagerel callallpendingfinalizers+34
	DD	imagerel $unwind$callallpendingfinalizers
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$callallpendingfinalizers DD 021H
	DD	imagerel callallpendingfinalizers
	DD	imagerel callallpendingfinalizers+34
	DD	imagerel $unwind$callallpendingfinalizers
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$callallpendingfinalizers DD 081421H
	DD	0e7414H
	DD	0c340fH
	DD	0fc40aH
	DD	0d6405H
	DD	imagerel callallpendingfinalizers
	DD	imagerel callallpendingfinalizers+34
	DD	imagerel $unwind$callallpendingfinalizers
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$callallpendingfinalizers DD 040a01H
	DD	0f006720aH
	DD	05002e004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$runafewfinalizers DD 0c1e01H
	DD	0f741eH
	DD	0e641eH
	DD	0d541eH
	DD	0c341eH
	DD	0f01a721eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$GCTM DD 021H
	DD	imagerel GCTM
	DD	imagerel GCTM+155
	DD	imagerel $unwind$GCTM
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$GCTM DD 040e21H
	DD	0b740eH
	DD	0a3405H
	DD	imagerel GCTM
	DD	imagerel GCTM+155
	DD	imagerel $unwind$GCTM
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GCTM DD	061001H
	DD	0d6410H
	DD	0c5410H
	DD	0e00c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$checkSizes DD 021H
	DD	imagerel checkSizes
	DD	imagerel checkSizes+19
	DD	imagerel $unwind$checkSizes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$checkSizes DD 020521H
	DD	067405H
	DD	imagerel checkSizes
	DD	imagerel checkSizes+19
	DD	imagerel $unwind$checkSizes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checkSizes DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sweeptolive DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$sweeplist DD 040021H
	DD	09c400H
	DD	083400H
	DD	imagerel sweeplist
	DD	imagerel sweeplist+58
	DD	imagerel $unwind$sweeplist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$sweeplist DD 021H
	DD	imagerel sweeplist
	DD	imagerel sweeplist+58
	DD	imagerel $unwind$sweeplist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$sweeplist DD 041121H
	DD	083411H
	DD	09c405H
	DD	imagerel sweeplist
	DD	imagerel sweeplist+58
	DD	imagerel $unwind$sweeplist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sweeplist DD 081301H
	DD	0b6413H
	DD	0a5413H
	DD	0f00f3213H
	DD	0700be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$freeobj DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$freeLclosure DD 021H
	DD	imagerel freeLclosure
	DD	imagerel freeLclosure+29
	DD	imagerel $unwind$freeLclosure
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$freeLclosure DD 020521H
	DD	063405H
	DD	imagerel freeLclosure
	DD	imagerel freeLclosure+29
	DD	imagerel $unwind$freeLclosure
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$freeLclosure DD 060f01H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$clearvalues DD 021H
	DD	imagerel clearvalues
	DD	imagerel clearvalues+14
	DD	imagerel $unwind$clearvalues
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$clearvalues DD 020521H
	DD	067405H
	DD	imagerel clearvalues
	DD	imagerel clearvalues+14
	DD	imagerel $unwind$clearvalues
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clearvalues DD 020e01H
	DD	0300a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$clearkeys DD 021H
	DD	imagerel clearkeys
	DD	imagerel clearkeys+14
	DD	imagerel $unwind$clearkeys
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$clearkeys DD 020521H
	DD	067405H
	DD	imagerel clearkeys
	DD	imagerel clearkeys+14
	DD	imagerel $unwind$clearkeys
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clearkeys DD 020e01H
	DD	0300a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$convergeephemerons DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$propagateall DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$propagatemark DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$traversethread DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$traverseLclosure DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$traverseCclosure DD 020021H
	DD	067400H
	DD	imagerel traverseCclosure
	DD	imagerel traverseCclosure+25
	DD	imagerel $unwind$traverseCclosure
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$traverseCclosure DD 021H
	DD	imagerel traverseCclosure
	DD	imagerel traverseCclosure+25
	DD	imagerel $unwind$traverseCclosure
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$traverseCclosure DD 020521H
	DD	067405H
	DD	imagerel traverseCclosure
	DD	imagerel traverseCclosure+25
	DD	imagerel $unwind$traverseCclosure
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$traverseCclosure DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$traverseproto DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$traversetable DD 085c01H
	DD	06545cH
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$traversestrongtable DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$traverseephemeron DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$traverseweakvalue DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$restartcollection DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$remarkupvals DD 040021H
	DD	047400H
	DD	063400H
	DD	imagerel remarkupvals
	DD	imagerel remarkupvals+26
	DD	imagerel $unwind$remarkupvals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$remarkupvals DD 021H
	DD	imagerel remarkupvals
	DD	imagerel remarkupvals+26
	DD	imagerel $unwind$remarkupvals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$remarkupvals DD 040a21H
	DD	04740aH
	DD	063405H
	DD	imagerel remarkupvals
	DD	imagerel remarkupvals+26
	DD	imagerel $unwind$remarkupvals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$remarkupvals DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$markbeingfnz DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$markmt DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iscleared DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$reallymarkobject DD 020021H
	DD	066400H
	DD	imagerel reallymarkobject
	DD	imagerel reallymarkobject+36
	DD	imagerel $unwind$reallymarkobject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$reallymarkobject DD 021H
	DD	imagerel reallymarkobject
	DD	imagerel reallymarkobject+36
	DD	imagerel $unwind$reallymarkobject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$reallymarkobject DD 020021H
	DD	066400H
	DD	imagerel reallymarkobject
	DD	imagerel reallymarkobject+36
	DD	imagerel $unwind$reallymarkobject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$reallymarkobject DD 020021H
	DD	066400H
	DD	imagerel reallymarkobject
	DD	imagerel reallymarkobject+36
	DD	imagerel $unwind$reallymarkobject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$reallymarkobject DD 020021H
	DD	066400H
	DD	imagerel reallymarkobject
	DD	imagerel reallymarkobject+36
	DD	imagerel $unwind$reallymarkobject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$reallymarkobject DD 020521H
	DD	066405H
	DD	imagerel reallymarkobject
	DD	imagerel reallymarkobject+36
	DD	imagerel $unwind$reallymarkobject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reallymarkobject DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaC_checkfinalizer DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaC_newobj DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$luaC_fullgc DD 021H
	DD	imagerel $LN12
	DD	imagerel $LN12+10
	DD	imagerel $unwind$luaC_fullgc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$luaC_fullgc DD 021H
	DD	imagerel $LN12+10
	DD	imagerel $LN12+32
	DD	imagerel $chain$0$luaC_fullgc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$luaC_fullgc DD 020521H
	DD	063405H
	DD	imagerel $LN12+10
	DD	imagerel $LN12+32
	DD	imagerel $chain$0$luaC_fullgc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$luaC_fullgc DD 020521H
	DD	086405H
	DD	imagerel $LN12
	DD	imagerel $LN12+10
	DD	imagerel $unwind$luaC_fullgc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaC_fullgc DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$luaC_runtilstate DD 021H
	DD	imagerel $LN36
	DD	imagerel $LN36+32
	DD	imagerel $unwind$luaC_runtilstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$luaC_runtilstate DD 081b21H
	DD	0c741bH
	DD	04f40fH
	DD	05c40aH
	DD	0a3405H
	DD	imagerel $LN36
	DD	imagerel $LN36+32
	DD	imagerel $unwind$luaC_runtilstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaC_runtilstate DD 040901H
	DD	0e0055209H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaC_step DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaC_freeallobjects DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getdebt
_TEXT	SEGMENT
g$ = 8
getdebt	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 1120
  00000	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
; Line 1121
  00004	4c 63 89 b8 00
	00 00		 movsxd	 r9, DWORD PTR [rcx+184]
; Line 1122
  0000b	4d 85 c0	 test	 r8, r8
  0000e	7f 03		 jg	 SHORT $LN2@getdebt
  00010	33 c0		 xor	 eax, eax
; Line 1128
  00012	c3		 ret	 0
$LN2@getdebt:
; Line 1124
  00013	48 b8 0b d7 a3
	70 3d 0a d7 a3	 mov	 rax, -6640827866535438581 ; a3d70a3d70a3d70bH
  0001d	49 f7 e8	 imul	 r8
  00020	49 03 d0	 add	 rdx, r8
; Line 1125
  00023	4d 8b c1	 mov	 r8, r9
  00026	49 b9 ff ff ff
	ff ff ff ff 7f	 mov	 r9, 9223372036854775807	; 7fffffffffffffffH
  00030	48 c1 fa 07	 sar	 rdx, 7
  00034	49 8b c1	 mov	 rax, r9
  00037	48 8b ca	 mov	 rcx, rdx
  0003a	48 ff c2	 inc	 rdx
  0003d	48 c1 e9 3f	 shr	 rcx, 63			; 0000003fH
  00041	48 03 ca	 add	 rcx, rdx
  00044	48 99		 cdq
  00046	49 f7 f8	 idiv	 r8
  00049	48 3b c8	 cmp	 rcx, rax
  0004c	7d 08		 jge	 SHORT $LN5@getdebt
  0004e	49 0f af c8	 imul	 rcx, r8
; Line 1126
  00052	48 8b c1	 mov	 rax, rcx
; Line 1128
  00055	c3		 ret	 0
$LN5@getdebt:
; Line 1125
  00056	49 8b c9	 mov	 rcx, r9
; Line 1126
  00059	48 8b c1	 mov	 rax, rcx
; Line 1128
  0005c	c3		 ret	 0
getdebt	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT singlestep
_TEXT	SEGMENT
L$ = 48
singlestep PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 1048
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1049
  0000f	48 8b 79 18	 mov	 rdi, QWORD PTR [rcx+24]
  00013	48 8b f1	 mov	 rsi, rcx
; Line 1050
  00016	0f b6 47 55	 movzx	 eax, BYTE PTR [rdi+85]
  0001a	83 f8 07	 cmp	 eax, 7
  0001d	0f 87 08 02 00
	00		 ja	 $LN2@singlestep
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0002a	8b 94 81 00 00
	00 00		 mov	 edx, DWORD PTR $LN25@singlestep[rcx+rax*4]
  00031	48 03 d1	 add	 rdx, rcx
  00034	ff e2		 jmp	 rdx
$LN12@singlestep:
; Line 1052
  00036	48 63 47 3c	 movsxd	 rax, DWORD PTR [rdi+60]
; Line 1053
  0003a	48 8b 97 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdi+200]
  00041	48 c1 e0 03	 shl	 rax, 3
  00045	48 89 47 20	 mov	 QWORD PTR [rdi+32], rax
  00049	33 c0		 xor	 eax, eax
  0004b	48 89 47 78	 mov	 QWORD PTR [rdi+120], rax
  0004f	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax
  00053	48 89 87 88 00
	00 00		 mov	 QWORD PTR [rdi+136], rax
  0005a	48 89 87 90 00
	00 00		 mov	 QWORD PTR [rdi+144], rax
  00061	48 89 87 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rax
  00068	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  0006c	74 08		 je	 SHORT $LN18@singlestep
  0006e	48 8b cf	 mov	 rcx, rdi
  00071	e8 00 00 00 00	 call	 reallymarkobject
$LN18@singlestep:
  00076	f6 47 48 40	 test	 BYTE PTR [rdi+72], 64	; 00000040H
  0007a	74 12		 je	 SHORT $LN17@singlestep
  0007c	48 8b 57 40	 mov	 rdx, QWORD PTR [rdi+64]
  00080	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00084	74 08		 je	 SHORT $LN17@singlestep
  00086	48 8b cf	 mov	 rcx, rdi
  00089	e8 00 00 00 00	 call	 reallymarkobject
$LN17@singlestep:
  0008e	48 8b cf	 mov	 rcx, rdi
  00091	e8 00 00 00 00	 call	 markmt
  00096	48 8b cf	 mov	 rcx, rdi
  00099	e8 00 00 00 00	 call	 markbeingfnz
; Line 1055
  0009e	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000a2	c6 47 55 00	 mov	 BYTE PTR [rdi+85], 0
; Line 1101
  000a6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ab	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000b0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b4	5f		 pop	 rdi
  000b5	c3		 ret	 0
$LN11@singlestep:
; Line 1058
  000b6	33 c0		 xor	 eax, eax
; Line 1060
  000b8	48 8b cf	 mov	 rcx, rdi
  000bb	48 89 47 20	 mov	 QWORD PTR [rdi+32], rax
  000bf	e8 00 00 00 00	 call	 propagatemark
; Line 1061
  000c4	48 83 7f 70 00	 cmp	 QWORD PTR [rdi+112], 0
  000c9	75 04		 jne	 SHORT $LN10@singlestep
; Line 1062
  000cb	c6 47 55 01	 mov	 BYTE PTR [rdi+85], 1
$LN10@singlestep:
; Line 1063
  000cf	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
; Line 1101
  000d3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d8	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000dd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e1	5f		 pop	 rdi
  000e2	c3		 ret	 0
$LN9@singlestep:
; Line 1068
  000e3	48 8b cf	 mov	 rcx, rdi
  000e6	e8 00 00 00 00	 call	 propagateall
; Line 1069
  000eb	48 8b ce	 mov	 rcx, rsi
  000ee	e8 00 00 00 00	 call	 atomic
; Line 1070
  000f3	48 8b ce	 mov	 rcx, rsi
  000f6	48 8b d8	 mov	 rbx, rax
  000f9	e8 00 00 00 00	 call	 entersweep
; Line 1071
  000fe	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  00102	48 03 4f 10	 add	 rcx, QWORD PTR [rdi+16]
  00106	48 89 4f 28	 mov	 QWORD PTR [rdi+40], rcx
; Line 1072
  0010a	48 63 c8	 movsxd	 rcx, eax
  0010d	48 6b c1 07	 imul	 rax, rcx, 7
  00111	48 03 c3	 add	 rax, rbx
; Line 1101
  00114	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00119	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0011e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00122	5f		 pop	 rdi
  00123	c3		 ret	 0
$LN8@singlestep:
; Line 1075
  00124	4c 8d 4f 68	 lea	 r9, QWORD PTR [rdi+104]
  00128	41 b8 03 00 00
	00		 mov	 r8d, 3
  0012e	48 8b d7	 mov	 rdx, rdi
  00131	48 8b ce	 mov	 rcx, rsi
; Line 1101
  00134	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00139	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0013e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00142	5f		 pop	 rdi
; Line 1075
  00143	e9 00 00 00 00	 jmp	 sweepstep
$LN7@singlestep:
; Line 1078
  00148	4c 8d 8f 98 00
	00 00		 lea	 r9, QWORD PTR [rdi+152]
  0014f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00155	48 8b d7	 mov	 rdx, rdi
  00158	48 8b ce	 mov	 rcx, rsi
; Line 1101
  0015b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00160	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00165	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00169	5f		 pop	 rdi
; Line 1078
  0016a	e9 00 00 00 00	 jmp	 sweepstep
$LN6@singlestep:
; Line 1081
  0016f	45 33 c9	 xor	 r9d, r9d
  00172	48 8b d7	 mov	 rdx, rdi
  00175	48 8b ce	 mov	 rcx, rsi
  00178	45 8d 41 05	 lea	 r8d, QWORD PTR [r9+5]
; Line 1101
  0017c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00181	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00186	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0018a	5f		 pop	 rdi
; Line 1081
  0018b	e9 00 00 00 00	 jmp	 sweepstep
$LN5@singlestep:
; Line 1084
  00190	48 8b 97 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdi+200]
  00197	0f b6 4f 54	 movzx	 ecx, BYTE PTR [rdi+84]
  0019b	0f b6 42 09	 movzx	 eax, BYTE PTR [rdx+9]
  0019f	80 e1 03	 and	 cl, 3
  001a2	24 f8		 and	 al, 248			; 000000f8H
  001a4	0a c8		 or	 cl, al
  001a6	88 4a 09	 mov	 BYTE PTR [rdx+9], cl
; Line 1085
  001a9	80 7f 56 01	 cmp	 BYTE PTR [rdi+86], 1
  001ad	74 33		 je	 SHORT $LN22@singlestep
  001af	8b 4f 3c	 mov	 ecx, DWORD PTR [rdi+60]
  001b2	48 8b 5f 18	 mov	 rbx, QWORD PTR [rdi+24]
  001b6	8b c1		 mov	 eax, ecx
  001b8	99		 cdq
  001b9	83 e2 03	 and	 edx, 3
  001bc	03 c2		 add	 eax, edx
  001be	c1 f8 02	 sar	 eax, 2
  001c1	39 47 38	 cmp	 DWORD PTR [rdi+56], eax
  001c4	7d 11		 jge	 SHORT $LN21@singlestep
  001c6	8b c1		 mov	 eax, ecx
  001c8	48 8b ce	 mov	 rcx, rsi
  001cb	99		 cdq
  001cc	2b c2		 sub	 eax, edx
  001ce	d1 f8		 sar	 eax, 1
  001d0	8b d0		 mov	 edx, eax
  001d2	e8 00 00 00 00	 call	 luaS_resize
$LN21@singlestep:
  001d7	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  001db	48 2b c3	 sub	 rax, rbx
  001de	48 01 47 28	 add	 QWORD PTR [rdi+40], rax
$LN22@singlestep:
; Line 1086
  001e2	c6 47 55 06	 mov	 BYTE PTR [rdi+85], 6
; Line 1099
  001e6	33 c0		 xor	 eax, eax
; Line 1101
  001e8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001ed	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001f2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001f6	5f		 pop	 rdi
  001f7	c3		 ret	 0
$LN4@singlestep:
; Line 1090
  001f8	48 83 bf 98 00
	00 00 00	 cmp	 QWORD PTR [rdi+152], 0
  00200	74 25		 je	 SHORT $LN3@singlestep
  00202	80 7f 56 01	 cmp	 BYTE PTR [rdi+86], 1
  00206	74 1f		 je	 SHORT $LN3@singlestep
; Line 1091
  00208	48 8b ce	 mov	 rcx, rsi
  0020b	e8 00 00 00 00	 call	 runafewfinalizers
; Line 1092
  00210	48 63 c8	 movsxd	 rcx, eax
  00213	48 6b c1 07	 imul	 rax, rcx, 7
; Line 1101
  00217	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0021c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00221	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00225	5f		 pop	 rdi
  00226	c3		 ret	 0
$LN3@singlestep:
; Line 1095
  00227	c6 47 55 07	 mov	 BYTE PTR [rdi+85], 7
$LN2@singlestep:
; Line 1101
  0022b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00230	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00235	33 c0		 xor	 eax, eax
  00237	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0023b	5f		 pop	 rdi
  0023c	c3		 ret	 0
  0023d	0f 1f 00	 npad	 3
$LN25@singlestep:
  00240	00 00 00 00	 DD	 $LN11@singlestep
  00244	00 00 00 00	 DD	 $LN9@singlestep
  00248	00 00 00 00	 DD	 $LN8@singlestep
  0024c	00 00 00 00	 DD	 $LN7@singlestep
  00250	00 00 00 00	 DD	 $LN6@singlestep
  00254	00 00 00 00	 DD	 $LN5@singlestep
  00258	00 00 00 00	 DD	 $LN4@singlestep
  0025c	00 00 00 00	 DD	 $LN12@singlestep
singlestep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT sweepstep
_TEXT	SEGMENT
L$ = 48
g$ = 56
nextstate$ = 64
nextlist$ = 72
sweepstep PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 1033
  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx
; Line 1034
  00012	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00016	49 8b f1	 mov	 rsi, r9
  00019	41 8b e8	 mov	 ebp, r8d
  0001c	48 85 d2	 test	 rdx, rdx
  0001f	74 42		 je	 SHORT $LN1@sweepstep
; Line 1036
  00021	41 b8 55 00 00
	00		 mov	 r8d, 85			; 00000055H
  00027	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002c	48 8b 5f 18	 mov	 rbx, QWORD PTR [rdi+24]
  00030	e8 00 00 00 00	 call	 sweeplist
; Line 1037
  00035	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  00039	48 2b cb	 sub	 rcx, rbx
  0003c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00041	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
  00045	48 01 4f 28	 add	 QWORD PTR [rdi+40], rcx
; Line 1038
  00049	48 85 c0	 test	 rax, rax
  0004c	74 15		 je	 SHORT $LN1@sweepstep
; Line 1039
  0004e	b8 53 02 00 00	 mov	 eax, 595		; 00000253H
; Line 1045
  00053	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00058	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
$LN1@sweepstep:
; Line 1042
  00063	40 88 6f 55	 mov	 BYTE PTR [rdi+85], bpl
; Line 1045
  00067	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006c	48 89 77 60	 mov	 QWORD PTR [rdi+96], rsi
  00070	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00075	33 c0		 xor	 eax, eax
  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
sweepstep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT atomic
_TEXT	SEGMENT
L$ = 48
atomic	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 985
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 986
  00014	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
; Line 989
  00018	48 8b 7b 78	 mov	 rdi, QWORD PTR [rbx+120]
; Line 992
  0001c	c6 43 55 08	 mov	 BYTE PTR [rbx+85], 8
; Line 993
  00020	48 c7 43 20 00
	00 00 00	 mov	 QWORD PTR [rbx+32], 0
; Line 994
  00028	f6 41 09 03	 test	 BYTE PTR [rcx+9], 3
  0002c	74 0b		 je	 SHORT $LN2@atomic
  0002e	48 8b d1	 mov	 rdx, rcx
  00031	48 8b cb	 mov	 rcx, rbx
  00034	e8 00 00 00 00	 call	 reallymarkobject
$LN2@atomic:
; Line 996
  00039	f6 43 48 40	 test	 BYTE PTR [rbx+72], 64	; 00000040H
  0003d	74 12		 je	 SHORT $LN1@atomic
  0003f	48 8b 53 40	 mov	 rdx, QWORD PTR [rbx+64]
  00043	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00047	74 08		 je	 SHORT $LN1@atomic
  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 reallymarkobject
$LN1@atomic:
; Line 997
  00051	48 8b cb	 mov	 rcx, rbx
  00054	e8 00 00 00 00	 call	 markmt
; Line 999
  00059	48 8b cb	 mov	 rcx, rbx
  0005c	e8 00 00 00 00	 call	 remarkupvals
; Line 1000
  00061	48 8b cb	 mov	 rcx, rbx
  00064	e8 00 00 00 00	 call	 propagateall
; Line 1001
  00069	48 8b 73 20	 mov	 rsi, QWORD PTR [rbx+32]
; Line 1003
  0006d	48 8b cb	 mov	 rcx, rbx
  00070	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi
  00074	e8 00 00 00 00	 call	 propagateall
; Line 1005
  00079	48 8b cb	 mov	 rcx, rbx
  0007c	48 c7 43 20 00
	00 00 00	 mov	 QWORD PTR [rbx+32], 0
  00084	e8 00 00 00 00	 call	 convergeephemerons
; Line 1008
  00089	48 8b 93 80 00
	00 00		 mov	 rdx, QWORD PTR [rbx+128]
  00090	45 33 c0	 xor	 r8d, r8d
  00093	48 8b cb	 mov	 rcx, rbx
  00096	e8 00 00 00 00	 call	 clearvalues
; Line 1009
  0009b	48 8b 93 90 00
	00 00		 mov	 rdx, QWORD PTR [rbx+144]
  000a2	45 33 c0	 xor	 r8d, r8d
  000a5	48 8b cb	 mov	 rcx, rbx
  000a8	e8 00 00 00 00	 call	 clearvalues
; Line 1011
  000ad	48 03 73 20	 add	 rsi, QWORD PTR [rbx+32]
  000b1	48 8b bb 80 00
	00 00		 mov	 rdi, QWORD PTR [rbx+128]
  000b8	48 8b ab 90 00
	00 00		 mov	 rbp, QWORD PTR [rbx+144]
; Line 1012
  000bf	48 8d 93 98 00
	00 00		 lea	 rdx, QWORD PTR [rbx+152]
  000c6	4c 8d 43 68	 lea	 r8, QWORD PTR [rbx+104]
  000ca	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  000cd	48 85 c0	 test	 rax, rax
  000d0	74 0b		 je	 SHORT $LN11@atomic
$LL12@atomic:
  000d2	48 8b d0	 mov	 rdx, rax
  000d5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d8	48 85 c0	 test	 rax, rax
  000db	75 f5		 jne	 SHORT $LL12@atomic
$LN11@atomic:
  000dd	49 8b 00	 mov	 rax, QWORD PTR [r8]
  000e0	48 85 c0	 test	 rax, rax
  000e3	74 25		 je	 SHORT $LN7@atomic
$LL8@atomic:
  000e5	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  000e9	75 05		 jne	 SHORT $LN6@atomic
  000eb	4c 8b c0	 mov	 r8, rax
  000ee	eb 12		 jmp	 SHORT $LN5@atomic
$LN6@atomic:
  000f0	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000f3	49 89 08	 mov	 QWORD PTR [r8], rcx
  000f6	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  000f9	48 89 08	 mov	 QWORD PTR [rax], rcx
  000fc	48 89 02	 mov	 QWORD PTR [rdx], rax
  000ff	48 8b d0	 mov	 rdx, rax
$LN5@atomic:
  00102	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00105	48 85 c0	 test	 rax, rax
  00108	75 db		 jne	 SHORT $LL8@atomic
$LN7@atomic:
; Line 1014
  0010a	48 8b cb	 mov	 rcx, rbx
  0010d	c7 83 b0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+176], 1
  00117	e8 00 00 00 00	 call	 markbeingfnz
; Line 1015
  0011c	48 8b cb	 mov	 rcx, rbx
  0011f	e8 00 00 00 00	 call	 propagateall
; Line 1017
  00124	48 8b cb	 mov	 rcx, rbx
  00127	48 c7 43 20 00
	00 00 00	 mov	 QWORD PTR [rbx+32], 0
  0012f	e8 00 00 00 00	 call	 convergeephemerons
; Line 1020
  00134	48 8b 93 88 00
	00 00		 mov	 rdx, QWORD PTR [rbx+136]
  0013b	45 33 c0	 xor	 r8d, r8d
  0013e	48 8b cb	 mov	 rcx, rbx
  00141	e8 00 00 00 00	 call	 clearkeys
; Line 1021
  00146	48 8b 93 90 00
	00 00		 mov	 rdx, QWORD PTR [rbx+144]
  0014d	45 33 c0	 xor	 r8d, r8d
  00150	48 8b cb	 mov	 rcx, rbx
  00153	e8 00 00 00 00	 call	 clearkeys
; Line 1023
  00158	48 8b 93 80 00
	00 00		 mov	 rdx, QWORD PTR [rbx+128]
  0015f	4c 8b c7	 mov	 r8, rdi
  00162	48 8b cb	 mov	 rcx, rbx
  00165	e8 00 00 00 00	 call	 clearvalues
; Line 1024
  0016a	48 8b 93 90 00
	00 00		 mov	 rdx, QWORD PTR [rbx+144]
  00171	4c 8b c5	 mov	 r8, rbp
  00174	48 8b cb	 mov	 rcx, rbx
  00177	e8 00 00 00 00	 call	 clearvalues
; Line 1025
  0017c	48 8b cb	 mov	 rcx, rbx
  0017f	e8 00 00 00 00	 call	 luaS_clearcache
; Line 1027
  00184	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00188	80 73 54 03	 xor	 BYTE PTR [rbx+84], 3
; Line 1029
  0018c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00191	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00196	48 03 c6	 add	 rax, rsi
  00199	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0019e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001a2	5f		 pop	 rdi
  001a3	c3		 ret	 0
atomic	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT entersweep
_TEXT	SEGMENT
n$ = 48
L$ = 48
entersweep PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 960
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 961
  00006	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
; Line 965
  0000a	4c 8d 44 24 30	 lea	 r8, QWORD PTR n$[rsp]
  0000f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00017	48 8d 53 58	 lea	 rdx, QWORD PTR [rbx+88]
  0001b	c6 43 55 02	 mov	 BYTE PTR [rbx+85], 2
  0001f	e8 00 00 00 00	 call	 sweeptolive
  00024	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax
; Line 966
  00028	8b 44 24 30	 mov	 eax, DWORD PTR n$[rsp]
; Line 967
  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
entersweep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT setpause
_TEXT	SEGMENT
g$ = 8
setpause PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 942
  00000	4c 8b 41 28	 mov	 r8, QWORD PTR [rcx+40]
  00004	48 b8 15 ae 47
	e1 7a 14 ae 47	 mov	 rax, 5165088340638674453 ; 47ae147ae147ae15H
; Line 946
  0000e	49 ba ff ff ff
	ff ff ff ff 7f	 mov	 r10, 9223372036854775807 ; 7fffffffffffffffH
  00018	4c 8b c9	 mov	 r9, rcx
  0001b	48 63 89 b4 00
	00 00		 movsxd	 rcx, DWORD PTR [rcx+180]
  00022	49 f7 e0	 mul	 r8
  00025	4c 2b c2	 sub	 r8, rdx
  00028	49 8b c2	 mov	 rax, r10
  0002b	49 d1 e8	 shr	 r8, 1
  0002e	4c 03 c2	 add	 r8, rdx
  00031	48 99		 cdq
  00033	49 c1 e8 06	 shr	 r8, 6
  00037	49 f7 f8	 idiv	 r8
  0003a	48 3b c8	 cmp	 rcx, rax
  0003d	7d 06		 jge	 SHORT $LN3@setpause
  0003f	49 0f af c8	 imul	 rcx, r8
  00043	eb 03		 jmp	 SHORT $LN4@setpause
$LN3@setpause:
  00045	49 8b ca	 mov	 rcx, r10
$LN4@setpause:
; Line 948
  00048	49 8b 51 18	 mov	 rdx, QWORD PTR [r9+24]
  0004c	49 03 51 10	 add	 rdx, QWORD PTR [r9+16]
  00050	48 2b d1	 sub	 rdx, rcx
  00053	49 8b c9	 mov	 rcx, r9
  00056	e9 00 00 00 00	 jmp	 luaE_setdebt
setpause ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT separatetobefnz
_TEXT	SEGMENT
g$ = 8
all$ = 16
separatetobefnz PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 883
  00000	4c 8d 81 98 00
	00 00		 lea	 r8, QWORD PTR [rcx+152]
  00007	4c 8d 49 68	 lea	 r9, QWORD PTR [rcx+104]
  0000b	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0000e	48 85 c0	 test	 rax, rax
  00011	74 0b		 je	 SHORT $LN7@separateto
$LL8@separateto:
  00013	4c 8b c0	 mov	 r8, rax
  00016	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00019	48 85 c0	 test	 rax, rax
  0001c	75 f5		 jne	 SHORT $LL8@separateto
$LN7@separateto:
; Line 884
  0001e	49 8b 01	 mov	 rax, QWORD PTR [r9]
  00021	48 85 c0	 test	 rax, rax
  00024	74 29		 je	 SHORT $LN3@separateto
$LL4@separateto:
; Line 886
  00026	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  0002a	75 09		 jne	 SHORT $LN2@separateto
  0002c	85 d2		 test	 edx, edx
  0002e	75 05		 jne	 SHORT $LN2@separateto
; Line 887
  00030	4c 8b c8	 mov	 r9, rax
; Line 888
  00033	eb 12		 jmp	 SHORT $LN1@separateto
$LN2@separateto:
; Line 889
  00035	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00038	49 89 09	 mov	 QWORD PTR [r9], rcx
; Line 890
  0003b	49 8b 08	 mov	 rcx, QWORD PTR [r8]
  0003e	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 891
  00041	49 89 00	 mov	 QWORD PTR [r8], rax
; Line 892
  00044	4c 8b c0	 mov	 r8, rax
$LN1@separateto:
; Line 884
  00047	49 8b 01	 mov	 rax, QWORD PTR [r9]
  0004a	48 85 c0	 test	 rax, rax
  0004d	75 d7		 jne	 SHORT $LL4@separateto
$LN3@separateto:
; Line 895
  0004f	c3		 ret	 0
separatetobefnz ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT findlast
_TEXT	SEGMENT
p$ = 8
findlast PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 870
  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	48 85 c0	 test	 rax, rax
  00006	74 13		 je	 SHORT $LN9@findlast
  00008	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@findlast:
; Line 871
  00010	48 8b c8	 mov	 rcx, rax
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 85 c0	 test	 rax, rax
  00019	75 f5		 jne	 SHORT $LL2@findlast
$LN9@findlast:
; Line 872
  0001b	48 8b c1	 mov	 rax, rcx
; Line 873
  0001e	c3		 ret	 0
findlast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT callallpendingfinalizers
_TEXT	SEGMENT
v$1 = 48
L$ = 96
propagateerrors$ = 104
callallpendingfinalizers PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 859
  00000	40 55		 push	 rbp
  00002	41 56		 push	 r14
  00004	41 57		 push	 r15
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; Line 860
  0000a	4c 8b 71 18	 mov	 r14, QWORD PTR [rcx+24]
  0000e	44 8b fa	 mov	 r15d, edx
  00011	48 8b e9	 mov	 rbp, rcx
; Line 861
  00014	49 83 be 98 00
	00 00 00	 cmp	 QWORD PTR [r14+152], 0
  0001c	0f 84 20 01 00
	00		 je	 $LN21@callallpen
  00022	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  00027	4c 89 64 24 78	 mov	 QWORD PTR [rsp+120], r12
  0002c	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00031	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi
  00036	45 33 e4	 xor	 r12d, r12d
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@callallpen:
; Line 862
  00040	48 8b 75 18	 mov	 rsi, QWORD PTR [rbp+24]
  00044	48 8b 86 98 00
	00 00		 mov	 rax, QWORD PTR [rsi+152]
  0004b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004e	48 89 8e 98 00
	00 00		 mov	 QWORD PTR [rsi+152], rcx
  00055	48 8b 4e 58	 mov	 rcx, QWORD PTR [rsi+88]
  00059	48 89 08	 mov	 QWORD PTR [rax], rcx
  0005c	48 89 46 58	 mov	 QWORD PTR [rsi+88], rax
  00060	80 60 09 f7	 and	 BYTE PTR [rax+9], 247	; 000000f7H
  00064	0f b6 4e 55	 movzx	 ecx, BYTE PTR [rsi+85]
  00068	0f b6 50 09	 movzx	 edx, BYTE PTR [rax+9]
  0006c	80 e9 02	 sub	 cl, 2
  0006f	80 f9 03	 cmp	 cl, 3
  00072	77 0f		 ja	 SHORT $LN12@callallpen
  00074	0f b6 4e 54	 movzx	 ecx, BYTE PTR [rsi+84]
  00078	80 e2 f8	 and	 dl, 248			; 000000f8H
  0007b	80 e1 03	 and	 cl, 3
  0007e	0a ca		 or	 cl, dl
  00080	88 48 09	 mov	 BYTE PTR [rax+9], cl
$LN12@callallpen:
  00083	48 89 44 24 30	 mov	 QWORD PTR v$1[rsp], rax
  00088	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  0008c	48 8d 54 24 30	 lea	 rdx, QWORD PTR v$1[rsp]
  00091	83 c9 40	 or	 ecx, 64			; 00000040H
  00094	41 b8 02 00 00
	00		 mov	 r8d, 2
  0009a	89 4c 24 38	 mov	 DWORD PTR v$1[rsp+8], ecx
  0009e	48 8b cd	 mov	 rcx, rbp
  000a1	e8 00 00 00 00	 call	 luaT_gettmbyobj
  000a6	48 8b d0	 mov	 rdx, rax
  000a9	48 85 c0	 test	 rax, rax
  000ac	74 73		 je	 SHORT $LN6@callallpen
  000ae	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000b1	83 e1 0f	 and	 ecx, 15
  000b4	80 f9 06	 cmp	 cl, 6
  000b7	75 68		 jne	 SHORT $LN6@callallpen
  000b9	0f b6 5e 57	 movzx	 ebx, BYTE PTR [rsi+87]
  000bd	0f b6 bd c9 00
	00 00		 movzx	 edi, BYTE PTR [rbp+201]
  000c4	44 88 a5 c9 00
	00 00		 mov	 BYTE PTR [rbp+201], r12b
  000cb	44 88 66 57	 mov	 BYTE PTR [rsi+87], r12b
  000cf	48 8b 45 10	 mov	 rax, QWORD PTR [rbp+16]
  000d3	45 33 c0	 xor	 r8d, r8d
  000d6	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:dothecall
  000e0	48 8b cd	 mov	 rcx, rbp
  000e3	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  000e8	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
  000eb	0f 10 44 24 30	 movups	 xmm0, XMMWORD PTR v$1[rsp]
  000f0	48 8b 45 10	 mov	 rax, QWORD PTR [rbp+16]
  000f4	0f 11 40 10	 movups	 XMMWORD PTR [rax+16], xmm0
  000f8	48 83 45 10 20	 add	 QWORD PTR [rbp+16], 32	; 00000020H
  000fd	4c 8b 4d 10	 mov	 r9, QWORD PTR [rbp+16]
  00101	4c 2b 4d 38	 sub	 r9, QWORD PTR [rbp+56]
  00105	49 83 e9 20	 sub	 r9, 32			; 00000020H
  00109	e8 00 00 00 00	 call	 luaD_pcall
  0010e	40 88 bd c9 00
	00 00		 mov	 BYTE PTR [rbp+201], dil
  00115	88 5e 57	 mov	 BYTE PTR [rsi+87], bl
  00118	85 c0		 test	 eax, eax
  0011a	74 05		 je	 SHORT $LN6@callallpen
  0011c	45 85 ff	 test	 r15d, r15d
  0011f	75 2b		 jne	 SHORT $LN17@callallpen
$LN6@callallpen:
; Line 861
  00121	4d 39 a6 98 00
	00 00		 cmp	 QWORD PTR [r14+152], r12
  00128	0f 85 12 ff ff
	ff		 jne	 $LL2@callallpen
  0012e	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]
  00133	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00138	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0013d	4c 8b 64 24 78	 mov	 r12, QWORD PTR [rsp+120]
$LN21@callallpen:
; Line 863
  00142	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00146	41 5f		 pop	 r15
  00148	41 5e		 pop	 r14
  0014a	5d		 pop	 rbp
  0014b	c3		 ret	 0
$LN17@callallpen:
; Line 862
  0014c	83 f8 02	 cmp	 eax, 2
  0014f	75 33		 jne	 SHORT $LN5@callallpen
  00151	4c 8b 45 10	 mov	 r8, QWORD PTR [rbp+16]
  00155	41 8b 40 f8	 mov	 eax, DWORD PTR [r8-8]
  00159	24 0f		 and	 al, 15
  0015b	3c 04		 cmp	 al, 4
  0015d	75 0a		 jne	 SHORT $LN27@callallpen
  0015f	4d 8b 40 f0	 mov	 r8, QWORD PTR [r8-16]
  00163	49 83 c0 18	 add	 r8, 24
  00167	eb 07		 jmp	 SHORT $LN11@callallpen
$LN27@callallpen:
  00169	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@EDOLMPAK@no?5message?$AA@
$LN11@callallpen:
  00170	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@HIAKJHOM@error?5in?5__gc?5metamethod?5?$CI?$CFs?$CJ?$AA@
  00177	48 8b cd	 mov	 rcx, rbp
  0017a	e8 00 00 00 00	 call	 luaO_pushfstring
  0017f	b8 05 00 00 00	 mov	 eax, 5
$LN5@callallpen:
  00184	8b d0		 mov	 edx, eax
  00186	48 8b cd	 mov	 rcx, rbp
  00189	e8 00 00 00 00	 call	 luaD_throw
  0018e	cc		 int	 3
$LN26@callallpen:
callallpendingfinalizers ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT runafewfinalizers
_TEXT	SEGMENT
v$1 = 48
L$ = 96
runafewfinalizers PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 844
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 56		 push	 r14
  00018	41 57		 push	 r15
  0001a	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; Line 845
  0001e	4c 8b 79 18	 mov	 r15, QWORD PTR [rcx+24]
; Line 848
  00022	45 33 e4	 xor	 r12d, r12d
  00025	48 8b e9	 mov	 rbp, rcx
  00028	45 8b f4	 mov	 r14d, r12d
  0002b	4d 39 a7 98 00
	00 00		 cmp	 QWORD PTR [r15+152], r12
  00032	0f 84 14 01 00
	00		 je	 $LN7@runafewfin
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL3@runafewfin:
  00040	45 3b b7 b0 00
	00 00		 cmp	 r14d, DWORD PTR [r15+176]
  00047	0f 83 eb 00 00
	00		 jae	 $LN25@runafewfin
; Line 849
  0004d	48 8b 75 18	 mov	 rsi, QWORD PTR [rbp+24]
  00051	48 8b 86 98 00
	00 00		 mov	 rax, QWORD PTR [rsi+152]
  00058	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0005b	48 89 8e 98 00
	00 00		 mov	 QWORD PTR [rsi+152], rcx
  00062	48 8b 4e 58	 mov	 rcx, QWORD PTR [rsi+88]
  00066	48 89 08	 mov	 QWORD PTR [rax], rcx
  00069	48 89 46 58	 mov	 QWORD PTR [rsi+88], rax
  0006d	80 60 09 f7	 and	 BYTE PTR [rax+9], 247	; 000000f7H
  00071	0f b6 4e 55	 movzx	 ecx, BYTE PTR [rsi+85]
  00075	0f b6 50 09	 movzx	 edx, BYTE PTR [rax+9]
  00079	80 e9 02	 sub	 cl, 2
  0007c	80 f9 03	 cmp	 cl, 3
  0007f	77 0f		 ja	 SHORT $LN15@runafewfin
  00081	0f b6 4e 54	 movzx	 ecx, BYTE PTR [rsi+84]
  00085	80 e2 f8	 and	 dl, 248			; 000000f8H
  00088	80 e1 03	 and	 cl, 3
  0008b	0a ca		 or	 cl, dl
  0008d	88 48 09	 mov	 BYTE PTR [rax+9], cl
$LN15@runafewfin:
  00090	48 89 44 24 30	 mov	 QWORD PTR v$1[rsp], rax
  00095	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  00099	48 8d 54 24 30	 lea	 rdx, QWORD PTR v$1[rsp]
  0009e	83 c9 40	 or	 ecx, 64			; 00000040H
  000a1	41 b8 02 00 00
	00		 mov	 r8d, 2
  000a7	89 4c 24 38	 mov	 DWORD PTR v$1[rsp+8], ecx
  000ab	48 8b cd	 mov	 rcx, rbp
  000ae	e8 00 00 00 00	 call	 luaT_gettmbyobj
  000b3	48 8b c8	 mov	 rcx, rax
  000b6	48 85 c0	 test	 rax, rax
  000b9	74 6d		 je	 SHORT $LN2@runafewfin
  000bb	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000be	83 e0 0f	 and	 eax, 15
  000c1	3c 06		 cmp	 al, 6
  000c3	75 63		 jne	 SHORT $LN2@runafewfin
  000c5	0f b6 5e 57	 movzx	 ebx, BYTE PTR [rsi+87]
  000c9	0f b6 bd c9 00
	00 00		 movzx	 edi, BYTE PTR [rbp+201]
  000d0	44 88 a5 c9 00
	00 00		 mov	 BYTE PTR [rbp+201], r12b
  000d7	44 88 66 57	 mov	 BYTE PTR [rsi+87], r12b
  000db	48 8b 45 10	 mov	 rax, QWORD PTR [rbp+16]
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:dothecall
  000e6	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  000e9	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
  000ec	48 8b 45 10	 mov	 rax, QWORD PTR [rbp+16]
  000f0	0f 10 44 24 30	 movups	 xmm0, XMMWORD PTR v$1[rsp]
  000f5	45 33 c0	 xor	 r8d, r8d
  000f8	48 8b cd	 mov	 rcx, rbp
  000fb	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  00100	0f 11 40 10	 movups	 XMMWORD PTR [rax+16], xmm0
  00104	48 83 45 10 20	 add	 QWORD PTR [rbp+16], 32	; 00000020H
  00109	4c 8b 4d 10	 mov	 r9, QWORD PTR [rbp+16]
  0010d	4c 2b 4d 38	 sub	 r9, QWORD PTR [rbp+56]
  00111	49 83 e9 20	 sub	 r9, 32			; 00000020H
  00115	e8 00 00 00 00	 call	 luaD_pcall
  0011a	40 88 bd c9 00
	00 00		 mov	 BYTE PTR [rbp+201], dil
  00121	88 5e 57	 mov	 BYTE PTR [rsi+87], bl
  00124	85 c0		 test	 eax, eax
  00126	75 4d		 jne	 SHORT $LN20@runafewfin
$LN2@runafewfin:
; Line 848
  00128	41 ff c6	 inc	 r14d
  0012b	4d 39 a7 98 00
	00 00		 cmp	 QWORD PTR [r15+152], r12
  00132	0f 85 08 ff ff
	ff		 jne	 $LL3@runafewfin
$LN25@runafewfin:
; Line 851
  00138	4d 39 a7 98 00
	00 00		 cmp	 QWORD PTR [r15+152], r12
  0013f	74 0b		 je	 SHORT $LN7@runafewfin
  00141	41 8b 8f b0 00
	00 00		 mov	 ecx, DWORD PTR [r15+176]
  00148	44 8d 24 09	 lea	 r12d, DWORD PTR [rcx+rcx]
$LN7@runafewfin:
; Line 853
  0014c	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00151	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00156	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  0015b	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  00160	45 89 a7 b0 00
	00 00		 mov	 DWORD PTR [r15+176], r12d
  00167	41 8b c6	 mov	 eax, r14d
  0016a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0016e	41 5f		 pop	 r15
  00170	41 5e		 pop	 r14
  00172	41 5c		 pop	 r12
  00174	c3		 ret	 0
$LN20@runafewfin:
; Line 849
  00175	83 f8 02	 cmp	 eax, 2
  00178	75 33		 jne	 SHORT $LN8@runafewfin
  0017a	4c 8b 45 10	 mov	 r8, QWORD PTR [rbp+16]
  0017e	41 8b 40 f8	 mov	 eax, DWORD PTR [r8-8]
  00182	24 0f		 and	 al, 15
  00184	3c 04		 cmp	 al, 4
  00186	75 0a		 jne	 SHORT $LN28@runafewfin
  00188	4d 8b 40 f0	 mov	 r8, QWORD PTR [r8-16]
  0018c	49 83 c0 18	 add	 r8, 24
  00190	eb 07		 jmp	 SHORT $LN14@runafewfin
$LN28@runafewfin:
  00192	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@EDOLMPAK@no?5message?$AA@
$LN14@runafewfin:
  00199	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@HIAKJHOM@error?5in?5__gc?5metamethod?5?$CI?$CFs?$CJ?$AA@
  001a0	48 8b cd	 mov	 rcx, rbp
  001a3	e8 00 00 00 00	 call	 luaO_pushfstring
  001a8	b8 05 00 00 00	 mov	 eax, 5
$LN8@runafewfin:
  001ad	8b d0		 mov	 edx, eax
  001af	48 8b cd	 mov	 rcx, rbp
  001b2	e8 00 00 00 00	 call	 luaD_throw
  001b7	cc		 int	 3
$LN26@runafewfin:
runafewfinalizers ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT GCTM
_TEXT	SEGMENT
v$ = 48
L$ = 80
propagateerrors$ = 88
GCTM	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 809
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	41 56		 push	 r14
  0000c	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; Line 810
  00010	48 8b 69 18	 mov	 rbp, QWORD PTR [rcx+24]
  00014	48 8b f1	 mov	 rsi, rcx
  00017	44 8b f2	 mov	 r14d, edx
; Line 813
  0001a	48 8b 8d 98 00
	00 00		 mov	 rcx, QWORD PTR [rbp+152]
  00021	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00024	48 89 85 98 00
	00 00		 mov	 QWORD PTR [rbp+152], rax
  0002b	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  0002f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00032	48 89 4d 58	 mov	 QWORD PTR [rbp+88], rcx
  00036	44 0f b6 41 09	 movzx	 r8d, BYTE PTR [rcx+9]
  0003b	41 80 e0 f7	 and	 r8b, 247		; 000000f7H
  0003f	44 88 41 09	 mov	 BYTE PTR [rcx+9], r8b
  00043	0f b6 45 55	 movzx	 eax, BYTE PTR [rbp+85]
  00047	2c 02		 sub	 al, 2
  00049	3c 03		 cmp	 al, 3
  0004b	77 10		 ja	 SHORT $LN8@GCTM
  0004d	0f b6 45 54	 movzx	 eax, BYTE PTR [rbp+84]
  00051	41 80 e0 f8	 and	 r8b, 248		; 000000f8H
  00055	24 03		 and	 al, 3
  00057	41 0a c0	 or	 al, r8b
  0005a	88 41 09	 mov	 BYTE PTR [rcx+9], al
$LN8@GCTM:
  0005d	48 89 4c 24 30	 mov	 QWORD PTR v$[rsp], rcx
  00062	0f b6 41 08	 movzx	 eax, BYTE PTR [rcx+8]
; Line 814
  00066	48 8d 54 24 30	 lea	 rdx, QWORD PTR v$[rsp]
  0006b	83 c8 40	 or	 eax, 64			; 00000040H
  0006e	41 b8 02 00 00
	00		 mov	 r8d, 2
  00074	48 8b ce	 mov	 rcx, rsi
  00077	89 44 24 38	 mov	 DWORD PTR v$[rsp+8], eax
  0007b	e8 00 00 00 00	 call	 luaT_gettmbyobj
  00080	48 8b d0	 mov	 rdx, rax
; Line 815
  00083	48 85 c0	 test	 rax, rax
  00086	0f 84 ac 00 00
	00		 je	 $LN2@GCTM
  0008c	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0008f	83 e1 0f	 and	 ecx, 15
  00092	80 f9 06	 cmp	 cl, 6
  00095	0f 85 9d 00 00
	00		 jne	 $LN2@GCTM
; Line 818
  0009b	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  000a0	0f b6 5d 57	 movzx	 ebx, BYTE PTR [rbp+87]
  000a4	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  000a9	0f b6 be c9 00
	00 00		 movzx	 edi, BYTE PTR [rsi+201]
; Line 819
  000b0	c6 86 c9 00 00
	00 00		 mov	 BYTE PTR [rsi+201], 0
; Line 820
  000b7	c6 45 57 00	 mov	 BYTE PTR [rbp+87], 0
; Line 821
  000bb	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]
  000be	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
; Line 824
  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:dothecall
  000c9	45 33 c0	 xor	 r8d, r8d
  000cc	48 8b ce	 mov	 rcx, rsi
  000cf	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000d8	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
  000db	0f 10 44 24 30	 movups	 xmm0, XMMWORD PTR v$[rsp]
  000e0	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  000e4	0f 11 40 10	 movups	 XMMWORD PTR [rax+16], xmm0
  000e8	48 83 46 10 20	 add	 QWORD PTR [rsi+16], 32	; 00000020H
  000ed	4c 8b 4e 10	 mov	 r9, QWORD PTR [rsi+16]
  000f1	4c 2b 4e 38	 sub	 r9, QWORD PTR [rsi+56]
  000f5	49 83 e9 20	 sub	 r9, 32			; 00000020H
  000f9	e8 00 00 00 00	 call	 luaD_pcall
; Line 825
  000fe	40 88 be c9 00
	00 00		 mov	 BYTE PTR [rsi+201], dil
  00105	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
; Line 826
  0010a	88 5d 57	 mov	 BYTE PTR [rbp+87], bl
  0010d	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
; Line 827
  00112	85 c0		 test	 eax, eax
  00114	74 22		 je	 SHORT $LN2@GCTM
  00116	45 85 f6	 test	 r14d, r14d
  00119	74 1d		 je	 SHORT $LN2@GCTM
; Line 828
  0011b	83 f8 02	 cmp	 eax, 2
  0011e	75 44		 jne	 SHORT $LN1@GCTM
; Line 831
  00120	4c 8b 46 10	 mov	 r8, QWORD PTR [rsi+16]
  00124	41 8b 40 f8	 mov	 eax, DWORD PTR [r8-8]
  00128	24 0f		 and	 al, 15
  0012a	3c 04		 cmp	 al, 4
  0012c	75 1b		 jne	 SHORT $LN13@GCTM
  0012e	4d 8b 40 f0	 mov	 r8, QWORD PTR [r8-16]
  00132	49 83 c0 18	 add	 r8, 24
  00136	eb 18		 jmp	 SHORT $LN7@GCTM
$LN2@GCTM:
; Line 838
  00138	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  0013d	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  00142	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00146	41 5e		 pop	 r14
  00148	c3		 ret	 0
$LN13@GCTM:
; Line 831
  00149	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@EDOLMPAK@no?5message?$AA@
$LN7@GCTM:
; Line 832
  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@HIAKJHOM@error?5in?5__gc?5metamethod?5?$CI?$CFs?$CJ?$AA@
  00157	48 8b ce	 mov	 rcx, rsi
  0015a	e8 00 00 00 00	 call	 luaO_pushfstring
; Line 833
  0015f	b8 05 00 00 00	 mov	 eax, 5
$LN1@GCTM:
; Line 835
  00164	8b d0		 mov	 edx, eax
  00166	48 8b ce	 mov	 rcx, rsi
  00169	e8 00 00 00 00	 call	 luaD_throw
  0016e	cc		 int	 3
$LN12@GCTM:
GCTM	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT dothecall
_TEXT	SEGMENT
L$ = 8
ud$ = 16
dothecall PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 805
  00000	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  00004	45 33 c0	 xor	 r8d, r8d
  00007	48 83 ea 20	 sub	 rdx, 32			; 00000020H
  0000b	e9 00 00 00 00	 jmp	 luaD_callnoyield
dothecall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT udata2finalize
_TEXT	SEGMENT
g$ = 8
udata2finalize PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 791
  00000	4c 8b 81 98 00
	00 00		 mov	 r8, QWORD PTR [rcx+152]
; Line 793
  00007	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0000a	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax
; Line 794
  00011	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00015	49 89 00	 mov	 QWORD PTR [r8], rax
; Line 795
  00018	4c 89 41 58	 mov	 QWORD PTR [rcx+88], r8
; Line 796
  0001c	41 80 60 09 f7	 and	 BYTE PTR [r8+9], 247	; 000000f7H
  00021	0f b6 51 55	 movzx	 edx, BYTE PTR [rcx+85]
  00025	41 0f b6 40 09	 movzx	 eax, BYTE PTR [r8+9]
  0002a	80 ea 02	 sub	 dl, 2
  0002d	80 fa 03	 cmp	 dl, 3
  00030	77 0f		 ja	 SHORT $LN5@udata2fina
; Line 798
  00032	0f b6 49 54	 movzx	 ecx, BYTE PTR [rcx+84]
  00036	24 f8		 and	 al, 248			; 000000f8H
  00038	80 e1 03	 and	 cl, 3
  0003b	0a c8		 or	 cl, al
  0003d	41 88 48 09	 mov	 BYTE PTR [r8+9], cl
$LN5@udata2fina:
; Line 799
  00041	49 8b c0	 mov	 rax, r8
; Line 800
  00044	c3		 ret	 0
udata2finalize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT checkSizes
_TEXT	SEGMENT
L$ = 48
g$ = 56
checkSizes PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 780
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 781
  00006	80 7a 56 01	 cmp	 BYTE PTR [rdx+86], 1
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	74 3d		 je	 SHORT $LN2@checkSizes
; Line 783
  0000f	44 8b 42 3c	 mov	 r8d, DWORD PTR [rdx+60]
  00013	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00018	48 8b 7a 18	 mov	 rdi, QWORD PTR [rdx+24]
  0001c	41 8b c0	 mov	 eax, r8d
  0001f	99		 cdq
  00020	83 e2 03	 and	 edx, 3
  00023	03 c2		 add	 eax, edx
  00025	c1 f8 02	 sar	 eax, 2
  00028	39 43 38	 cmp	 DWORD PTR [rbx+56], eax
  0002b	7d 0f		 jge	 SHORT $LN1@checkSizes
; Line 784
  0002d	41 8b c0	 mov	 eax, r8d
  00030	99		 cdq
  00031	2b c2		 sub	 eax, edx
  00033	d1 f8		 sar	 eax, 1
  00035	8b d0		 mov	 edx, eax
  00037	e8 00 00 00 00	 call	 luaS_resize
$LN1@checkSizes:
; Line 785
  0003c	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00040	48 2b c7	 sub	 rax, rdi
  00043	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  00048	48 01 43 28	 add	 QWORD PTR [rbx+40], rax
$LN2@checkSizes:
; Line 787
  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
checkSizes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT sweeptolive
_TEXT	SEGMENT
L$ = 80
p$ = 88
n$ = 96
sweeptolive PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 757
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001c	4c 8b f1	 mov	 r14, rcx
; Line 759
  0001f	33 c9		 xor	 ecx, ecx
  00021	4d 8b e0	 mov	 r12, r8
  00024	44 8b f9	 mov	 r15d, ecx
  00027	4c 8b ea	 mov	 r13, rdx
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@sweeptoliv:
; Line 762
  00030	49 8b 46 18	 mov	 rax, QWORD PTR [r14+24]
  00034	41 ff c7	 inc	 r15d
  00037	bf 01 00 00 00	 mov	 edi, 1
  0003c	0f b6 70 54	 movzx	 esi, BYTE PTR [rax+84]
  00040	48 8b da	 mov	 rbx, rdx
  00043	8b ee		 mov	 ebp, esi
  00045	83 e6 03	 and	 esi, 3
  00048	83 f5 03	 xor	 ebp, 3
  0004b	48 83 3a 00	 cmp	 QWORD PTR [rdx], 0
  0004f	74 3e		 je	 SHORT $LN9@sweeptoliv
$LL10@sweeptoliv:
  00051	48 8b c7	 mov	 rax, rdi
  00054	48 ff cf	 dec	 rdi
  00057	48 85 c0	 test	 rax, rax
  0005a	74 31		 je	 SHORT $LN20@sweeptoliv
  0005c	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0005f	0f b6 42 09	 movzx	 eax, BYTE PTR [rdx+9]
  00063	8b c8		 mov	 ecx, eax
  00065	83 f1 03	 xor	 ecx, 3
  00068	85 cd		 test	 ecx, ebp
  0006a	75 10		 jne	 SHORT $LN8@sweeptoliv
  0006c	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0006f	49 8b ce	 mov	 rcx, r14
  00072	48 89 03	 mov	 QWORD PTR [rbx], rax
  00075	e8 00 00 00 00	 call	 freeobj
  0007a	eb 0b		 jmp	 SHORT $LN7@sweeptoliv
$LN8@sweeptoliv:
  0007c	24 f8		 and	 al, 248			; 000000f8H
  0007e	48 8b da	 mov	 rbx, rdx
  00081	40 0a c6	 or	 al, sil
  00084	88 42 09	 mov	 BYTE PTR [rdx+9], al
$LN7@sweeptoliv:
  00087	48 83 3b 00	 cmp	 QWORD PTR [rbx], 0
  0008b	75 c4		 jne	 SHORT $LL10@sweeptoliv
$LN20@sweeptoliv:
  0008d	33 c9		 xor	 ecx, ecx
$LN9@sweeptoliv:
  0008f	48 83 3b 00	 cmp	 QWORD PTR [rbx], 0
  00093	48 8b d3	 mov	 rdx, rbx
  00096	48 0f 44 d1	 cmove	 rdx, rcx
; Line 763
  0009a	49 3b d5	 cmp	 rdx, r13
  0009d	74 91		 je	 SHORT $LL4@sweeptoliv
; Line 765
  0009f	48 8b c2	 mov	 rax, rdx
  000a2	4d 85 e4	 test	 r12, r12
  000a5	74 04		 je	 SHORT $LN1@sweeptoliv
; Line 764
  000a7	45 01 3c 24	 add	 DWORD PTR [r12], r15d
$LN1@sweeptoliv:
; Line 766
  000ab	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000b0	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000b5	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000ba	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000be	41 5f		 pop	 r15
  000c0	41 5e		 pop	 r14
  000c2	41 5d		 pop	 r13
  000c4	41 5c		 pop	 r12
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0
sweeptolive ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT sweeplist
_TEXT	SEGMENT
L$ = 64
p$ = 72
count$ = 80
sweeplist PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 734
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	41 56		 push	 r14
  0000d	41 57		 push	 r15
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 735
  00013	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b fa	 mov	 rdi, rdx
; Line 736
  0001d	44 0f b6 70 54	 movzx	 r14d, BYTE PTR [rax+84]
  00022	48 8b e9	 mov	 rbp, rcx
  00025	45 8b fe	 mov	 r15d, r14d
; Line 737
  00028	41 83 e6 03	 and	 r14d, 3
  0002c	41 83 f7 03	 xor	 r15d, 3
; Line 738
  00030	48 83 3a 00	 cmp	 QWORD PTR [rdx], 0
  00034	0f 84 37 01 00
	00		 je	 $LN25@sweeplist
  0003a	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  0003f	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:__ImageBase
  00046	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0004b	0f 1f 44 00 00	 npad	 5
$LL4@sweeplist:
  00050	48 8b c6	 mov	 rax, rsi
  00053	48 ff ce	 dec	 rsi
  00056	48 85 c0	 test	 rax, rax
  00059	0f 84 08 01 00
	00		 je	 $LN27@sweeplist
; Line 739
  0005f	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
; Line 740
  00062	0f b6 4b 09	 movzx	 ecx, BYTE PTR [rbx+9]
; Line 741
  00066	8b c1		 mov	 eax, ecx
  00068	83 f0 03	 xor	 eax, 3
  0006b	41 85 c7	 test	 eax, r15d
  0006e	0f 85 dd 00 00
	00		 jne	 $LN2@sweeplist
; Line 742
  00074	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00077	48 89 07	 mov	 QWORD PTR [rdi], rax
; Line 743
  0007a	0f b6 43 08	 movzx	 eax, BYTE PTR [rbx+8]
  0007e	83 c0 fc	 add	 eax, -4
  00081	83 f8 22	 cmp	 eax, 34			; 00000022H
  00084	0f 87 d3 00 00
	00		 ja	 $LN1@sweeplist
  0008a	48 98		 cdqe
  0008c	41 0f b6 84 04
	00 00 00 00	 movzx	 eax, BYTE PTR $LN23@sweeplist[r12+rax]
  00095	41 8b 8c 84 00
	00 00 00	 mov	 ecx, DWORD PTR $LN24@sweeplist[r12+rax*4]
  0009d	49 03 cc	 add	 rcx, r12
  000a0	ff e1		 jmp	 rcx
$LN15@sweeplist:
  000a2	48 8b d3	 mov	 rdx, rbx
  000a5	48 8b cd	 mov	 rcx, rbp
  000a8	e8 00 00 00 00	 call	 luaF_freeproto
  000ad	e9 ab 00 00 00	 jmp	 $LN1@sweeplist
$LN14@sweeplist:
  000b2	48 8b d3	 mov	 rdx, rbx
  000b5	48 8b cd	 mov	 rcx, rbp
  000b8	e8 00 00 00 00	 call	 freeLclosure
  000bd	e9 9b 00 00 00	 jmp	 $LN1@sweeplist
$LN13@sweeplist:
  000c2	0f b6 43 0a	 movzx	 eax, BYTE PTR [rbx+10]
  000c6	45 33 c9	 xor	 r9d, r9d
  000c9	48 8b d3	 mov	 rdx, rbx
  000cc	83 c0 02	 add	 eax, 2
  000cf	48 8b cd	 mov	 rcx, rbp
  000d2	c1 e0 04	 shl	 eax, 4
  000d5	4c 63 c0	 movsxd	 r8, eax
  000d8	e8 00 00 00 00	 call	 luaM_realloc_
  000dd	eb 7e		 jmp	 SHORT $LN1@sweeplist
$LN12@sweeplist:
  000df	48 8b d3	 mov	 rdx, rbx
  000e2	48 8b cd	 mov	 rcx, rbp
  000e5	e8 00 00 00 00	 call	 luaH_free
  000ea	eb 71		 jmp	 SHORT $LN1@sweeplist
$LN11@sweeplist:
  000ec	48 8b d3	 mov	 rdx, rbx
  000ef	48 8b cd	 mov	 rcx, rbp
  000f2	e8 00 00 00 00	 call	 luaE_freethread
  000f7	eb 64		 jmp	 SHORT $LN1@sweeplist
$LN10@sweeplist:
  000f9	4c 8b 43 18	 mov	 r8, QWORD PTR [rbx+24]
  000fd	45 33 c9	 xor	 r9d, r9d
  00100	48 8b d3	 mov	 rdx, rbx
  00103	49 83 c0 28	 add	 r8, 40			; 00000028H
  00107	48 8b cd	 mov	 rcx, rbp
  0010a	e8 00 00 00 00	 call	 luaM_realloc_
  0010f	eb 4c		 jmp	 SHORT $LN1@sweeplist
$LN9@sweeplist:
  00111	48 8b d3	 mov	 rdx, rbx
  00114	48 8b cd	 mov	 rcx, rbp
  00117	e8 00 00 00 00	 call	 luaS_remove
  0011c	0f b6 43 0b	 movzx	 eax, BYTE PTR [rbx+11]
  00120	45 33 c9	 xor	 r9d, r9d
  00123	ff c0		 inc	 eax
  00125	48 8b d3	 mov	 rdx, rbx
  00128	48 8b cd	 mov	 rcx, rbp
  0012b	4c 63 c0	 movsxd	 r8, eax
  0012e	49 83 c0 18	 add	 r8, 24
  00132	e8 00 00 00 00	 call	 luaM_realloc_
  00137	eb 24		 jmp	 SHORT $LN1@sweeplist
$LN8@sweeplist:
  00139	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  0013d	45 33 c9	 xor	 r9d, r9d
  00140	48 8b d3	 mov	 rdx, rbx
  00143	49 83 c0 19	 add	 r8, 25
  00147	48 8b cd	 mov	 rcx, rbp
  0014a	e8 00 00 00 00	 call	 luaM_realloc_
; Line 745
  0014f	eb 0c		 jmp	 SHORT $LN1@sweeplist
$LN2@sweeplist:
; Line 746
  00151	80 e1 f8	 and	 cl, 248			; 000000f8H
; Line 747
  00154	48 8b fb	 mov	 rdi, rbx
  00157	41 0a ce	 or	 cl, r14b
  0015a	88 4b 09	 mov	 BYTE PTR [rbx+9], cl
$LN1@sweeplist:
; Line 738
  0015d	48 83 3f 00	 cmp	 QWORD PTR [rdi], 0
  00161	0f 85 e9 fe ff
	ff		 jne	 $LL4@sweeplist
$LN27@sweeplist:
  00167	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0016c	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
$LN25@sweeplist:
; Line 751
  00171	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00176	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0017b	33 c0		 xor	 eax, eax
  0017d	48 39 07	 cmp	 QWORD PTR [rdi], rax
  00180	48 0f 44 f8	 cmove	 rdi, rax
  00184	48 8b c7	 mov	 rax, rdi
  00187	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0018b	41 5f		 pop	 r15
  0018d	41 5e		 pop	 r14
  0018f	5f		 pop	 rdi
  00190	c3		 ret	 0
  00191	0f 1f 00	 npad	 3
$LN24@sweeplist:
  00194	00 00 00 00	 DD	 $LN9@sweeplist
  00198	00 00 00 00	 DD	 $LN12@sweeplist
  0019c	00 00 00 00	 DD	 $LN14@sweeplist
  001a0	00 00 00 00	 DD	 $LN10@sweeplist
  001a4	00 00 00 00	 DD	 $LN11@sweeplist
  001a8	00 00 00 00	 DD	 $LN15@sweeplist
  001ac	00 00 00 00	 DD	 $LN8@sweeplist
  001b0	00 00 00 00	 DD	 $LN13@sweeplist
  001b4	00 00 00 00	 DD	 $LN1@sweeplist
$LN23@sweeplist:
  001b8	00		 DB	 0
  001b9	01		 DB	 1
  001ba	02		 DB	 2
  001bb	03		 DB	 3
  001bc	04		 DB	 4
  001bd	05		 DB	 5
  001be	08		 DB	 8
  001bf	08		 DB	 8
  001c0	08		 DB	 8
  001c1	08		 DB	 8
  001c2	08		 DB	 8
  001c3	08		 DB	 8
  001c4	08		 DB	 8
  001c5	08		 DB	 8
  001c6	08		 DB	 8
  001c7	08		 DB	 8
  001c8	06		 DB	 6
  001c9	08		 DB	 8
  001ca	08		 DB	 8
  001cb	08		 DB	 8
  001cc	08		 DB	 8
  001cd	08		 DB	 8
  001ce	08		 DB	 8
  001cf	08		 DB	 8
  001d0	08		 DB	 8
  001d1	08		 DB	 8
  001d2	08		 DB	 8
  001d3	08		 DB	 8
  001d4	08		 DB	 8
  001d5	08		 DB	 8
  001d6	08		 DB	 8
  001d7	08		 DB	 8
  001d8	08		 DB	 8
  001d9	08		 DB	 8
  001da	07		 DB	 7
sweeplist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT freeobj
_TEXT	SEGMENT
L$ = 48
o$ = 56
freeobj	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 696
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 697
  0000a	0f b6 42 08	 movzx	 eax, BYTE PTR [rdx+8]
  0000e	48 8b da	 mov	 rbx, rdx
  00011	48 8b f9	 mov	 rdi, rcx
  00014	83 c0 fc	 add	 eax, -4
  00017	83 f8 22	 cmp	 eax, 34			; 00000022H
  0001a	0f 87 ad 00 00
	00		 ja	 $LN1@freeobj
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00027	48 98		 cdqe
  00029	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN14@freeobj[rcx+rax]
  00031	44 8b 84 81 00
	00 00 00	 mov	 r8d, DWORD PTR $LN15@freeobj[rcx+rax*4]
  00039	4c 03 c1	 add	 r8, rcx
  0003c	41 ff e0	 jmp	 r8
$LN9@freeobj:
; Line 698
  0003f	48 8b cf	 mov	 rcx, rdi
; Line 720
  00042	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
; Line 698
  0004c	e9 00 00 00 00	 jmp	 luaF_freeproto
$LN8@freeobj:
; Line 700
  00051	48 8b cf	 mov	 rcx, rdi
; Line 720
  00054	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
; Line 700
  0005e	e9 00 00 00 00	 jmp	 freeLclosure
$LN7@freeobj:
; Line 704
  00063	0f b6 42 0a	 movzx	 eax, BYTE PTR [rdx+10]
  00067	83 c0 02	 add	 eax, 2
  0006a	c1 e0 04	 shl	 eax, 4
  0006d	4c 63 c0	 movsxd	 r8, eax
; Line 705
  00070	eb 50		 jmp	 SHORT $LN16@freeobj
$LN6@freeobj:
; Line 707
  00072	48 8b cf	 mov	 rcx, rdi
; Line 720
  00075	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007e	5f		 pop	 rdi
; Line 707
  0007f	e9 00 00 00 00	 jmp	 luaH_free
$LN5@freeobj:
; Line 708
  00084	48 8b cf	 mov	 rcx, rdi
; Line 720
  00087	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00090	5f		 pop	 rdi
; Line 708
  00091	e9 00 00 00 00	 jmp	 luaE_freethread
$LN4@freeobj:
; Line 709
  00096	4c 8b 42 18	 mov	 r8, QWORD PTR [rdx+24]
  0009a	49 83 c0 28	 add	 r8, 40			; 00000028H
  0009e	eb 22		 jmp	 SHORT $LN16@freeobj
$LN3@freeobj:
; Line 711
  000a0	48 8b cf	 mov	 rcx, rdi
  000a3	e8 00 00 00 00	 call	 luaS_remove
; Line 712
  000a8	0f b6 43 0b	 movzx	 eax, BYTE PTR [rbx+11]
  000ac	48 8b d3	 mov	 rdx, rbx
  000af	ff c0		 inc	 eax
  000b1	4c 63 c0	 movsxd	 r8, eax
  000b4	49 83 c0 18	 add	 r8, 24
; Line 713
  000b8	eb 08		 jmp	 SHORT $LN16@freeobj
$LN2@freeobj:
; Line 715
  000ba	4c 8b 42 10	 mov	 r8, QWORD PTR [rdx+16]
  000be	49 83 c0 19	 add	 r8, 25
$LN16@freeobj:
  000c2	45 33 c9	 xor	 r9d, r9d
  000c5	48 8b cf	 mov	 rcx, rdi
  000c8	e8 00 00 00 00	 call	 luaM_realloc_
$LN1@freeobj:
; Line 720
  000cd	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d6	5f		 pop	 rdi
  000d7	c3		 ret	 0
$LN15@freeobj:
  000d8	00 00 00 00	 DD	 $LN3@freeobj
  000dc	00 00 00 00	 DD	 $LN6@freeobj
  000e0	00 00 00 00	 DD	 $LN8@freeobj
  000e4	00 00 00 00	 DD	 $LN4@freeobj
  000e8	00 00 00 00	 DD	 $LN5@freeobj
  000ec	00 00 00 00	 DD	 $LN9@freeobj
  000f0	00 00 00 00	 DD	 $LN2@freeobj
  000f4	00 00 00 00	 DD	 $LN7@freeobj
  000f8	00 00 00 00	 DD	 $LN1@freeobj
$LN14@freeobj:
  000fc	00		 DB	 0
  000fd	01		 DB	 1
  000fe	02		 DB	 2
  000ff	03		 DB	 3
  00100	04		 DB	 4
  00101	05		 DB	 5
  00102	08		 DB	 8
  00103	08		 DB	 8
  00104	08		 DB	 8
  00105	08		 DB	 8
  00106	08		 DB	 8
  00107	08		 DB	 8
  00108	08		 DB	 8
  00109	08		 DB	 8
  0010a	08		 DB	 8
  0010b	08		 DB	 8
  0010c	06		 DB	 6
  0010d	08		 DB	 8
  0010e	08		 DB	 8
  0010f	08		 DB	 8
  00110	08		 DB	 8
  00111	08		 DB	 8
  00112	08		 DB	 8
  00113	08		 DB	 8
  00114	08		 DB	 8
  00115	08		 DB	 8
  00116	08		 DB	 8
  00117	08		 DB	 8
  00118	08		 DB	 8
  00119	08		 DB	 8
  0011a	08		 DB	 8
  0011b	08		 DB	 8
  0011c	08		 DB	 8
  0011d	08		 DB	 8
  0011e	07		 DB	 7
freeobj	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT freeLclosure
_TEXT	SEGMENT
L$ = 48
cl$ = 56
freeLclosure PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 685
  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 687
  0000f	33 ff		 xor	 edi, edi
  00011	48 8b f2	 mov	 rsi, rdx
  00014	48 8b e9	 mov	 rbp, rcx
  00017	40 38 7a 0a	 cmp	 BYTE PTR [rdx+10], dil
  0001b	76 42		 jbe	 SHORT $LN2@freeLclosu
  0001d	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00022	48 8d 5a 20	 lea	 rbx, QWORD PTR [rdx+32]
$LL4@freeLclosu:
; Line 688
  00026	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
; Line 689
  00029	48 85 d2	 test	 rdx, rdx
  0002c	74 1e		 je	 SHORT $LN3@freeLclosu
; Line 690
  0002e	48 ff 4a 08	 dec	 QWORD PTR [rdx+8]
  00032	75 18		 jne	 SHORT $LN3@freeLclosu
  00034	48 8d 42 10	 lea	 rax, QWORD PTR [rdx+16]
  00038	48 39 02	 cmp	 QWORD PTR [rdx], rax
  0003b	75 0f		 jne	 SHORT $LN3@freeLclosu
  0003d	45 33 c9	 xor	 r9d, r9d
  00040	48 8b cd	 mov	 rcx, rbp
  00043	45 8d 41 20	 lea	 r8d, QWORD PTR [r9+32]
  00047	e8 00 00 00 00	 call	 luaM_realloc_
$LN3@freeLclosu:
; Line 687
  0004c	0f b6 46 0a	 movzx	 eax, BYTE PTR [rsi+10]
  00050	ff c7		 inc	 edi
  00052	48 83 c3 08	 add	 rbx, 8
  00056	3b f8		 cmp	 edi, eax
  00058	7c cc		 jl	 SHORT $LL4@freeLclosu
  0005a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN2@freeLclosu:
; Line 692
  0005f	0f b6 46 0a	 movzx	 eax, BYTE PTR [rsi+10]
  00063	45 33 c9	 xor	 r9d, r9d
  00066	48 8b d6	 mov	 rdx, rsi
  00069	8d 04 c5 20 00
	00 00		 lea	 eax, DWORD PTR [rax*8+32]
  00070	48 8b cd	 mov	 rcx, rbp
  00073	4c 63 c0	 movsxd	 r8, eax
; Line 693
  00076	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0007b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00080	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00084	5f		 pop	 rdi
; Line 692
  00085	e9 00 00 00 00	 jmp	 luaM_realloc_
freeLclosure ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT clearvalues
_TEXT	SEGMENT
g$ = 48
l$ = 56
f$ = 64
clearvalues PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 658
  00000	49 3b d0	 cmp	 rdx, r8
  00003	0f 84 f5 00 00
	00		 je	 $LN43@clearvalue
  00009	53		 push	 rbx
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
; Line 657
  00013	49 8b d8	 mov	 rbx, r8
  00016	4c 8b ca	 mov	 r9, rdx
; Line 658
  00019	33 ff		 xor	 edi, edi
  0001b	4c 8b d9	 mov	 r11, rcx
  0001e	66 90		 npad	 2
$LL11@clearvalue:
; Line 660
  00020	41 0f b6 49 0b	 movzx	 ecx, BYTE PTR [r9+11]
  00025	b8 01 00 00 00	 mov	 eax, 1
; Line 662
  0002a	44 8b c7	 mov	 r8d, edi
  0002d	d3 e0		 shl	 eax, cl
  0002f	4c 63 d0	 movsxd	 r10, eax
  00032	49 c1 e2 05	 shl	 r10, 5
  00036	4d 03 51 18	 add	 r10, QWORD PTR [r9+24]
  0003a	41 39 79 0c	 cmp	 DWORD PTR [r9+12], edi
  0003e	76 43		 jbe	 SHORT $LN6@clearvalue
$LL8@clearvalue:
; Line 663
  00040	41 8b d0	 mov	 edx, r8d
  00043	48 c1 e2 04	 shl	 rdx, 4
  00047	49 03 51 10	 add	 rdx, QWORD PTR [r9+16]
; Line 664
  0004b	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  0004e	a8 40		 test	 al, 64			; 00000040H
  00050	74 28		 je	 SHORT $LN7@clearvalue
  00052	24 0f		 and	 al, 15
  00054	3c 04		 cmp	 al, 4
  00056	75 13		 jne	 SHORT $LN16@clearvalue
  00058	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0005b	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  0005f	74 19		 je	 SHORT $LN7@clearvalue
  00061	49 8b cb	 mov	 rcx, r11
  00064	e8 00 00 00 00	 call	 reallymarkobject
  00069	eb 0f		 jmp	 SHORT $LN7@clearvalue
$LN16@clearvalue:
  0006b	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0006e	0f b6 48 09	 movzx	 ecx, BYTE PTR [rax+9]
  00072	83 e1 03	 and	 ecx, 3
  00075	74 03		 je	 SHORT $LN7@clearvalue
; Line 665
  00077	89 7a 08	 mov	 DWORD PTR [rdx+8], edi
$LN7@clearvalue:
; Line 662
  0007a	41 ff c0	 inc	 r8d
  0007d	45 3b 41 0c	 cmp	 r8d, DWORD PTR [r9+12]
  00081	72 bd		 jb	 SHORT $LL8@clearvalue
$LN6@clearvalue:
; Line 667
  00083	4d 8b 41 18	 mov	 r8, QWORD PTR [r9+24]
  00087	4d 3b c2	 cmp	 r8, r10
  0008a	73 5b		 jae	 SHORT $LN10@clearvalue
  0008c	0f 1f 40 00	 npad	 4
$LL4@clearvalue:
; Line 668
  00090	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00094	85 c0		 test	 eax, eax
  00096	74 46		 je	 SHORT $LN3@clearvalue
  00098	a8 40		 test	 al, 64			; 00000040H
  0009a	74 42		 je	 SHORT $LN3@clearvalue
  0009c	24 0f		 and	 al, 15
  0009e	3c 04		 cmp	 al, 4
  000a0	75 13		 jne	 SHORT $LN23@clearvalue
  000a2	49 8b 10	 mov	 rdx, QWORD PTR [r8]
  000a5	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  000a9	74 33		 je	 SHORT $LN3@clearvalue
  000ab	49 8b cb	 mov	 rcx, r11
  000ae	e8 00 00 00 00	 call	 reallymarkobject
  000b3	eb 29		 jmp	 SHORT $LN3@clearvalue
$LN23@clearvalue:
  000b5	49 8b 00	 mov	 rax, QWORD PTR [r8]
  000b8	0f b6 48 09	 movzx	 ecx, BYTE PTR [rax+9]
  000bc	83 e1 03	 and	 ecx, 3
  000bf	74 1d		 je	 SHORT $LN3@clearvalue
; Line 670
  000c1	41 f6 40 18 40	 test	 BYTE PTR [r8+24], 64	; 00000040H
  000c6	41 89 78 08	 mov	 DWORD PTR [r8+8], edi
  000ca	74 12		 je	 SHORT $LN3@clearvalue
  000cc	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  000d0	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  000d4	74 08		 je	 SHORT $LN3@clearvalue
  000d6	41 c7 40 18 0a
	00 00 00	 mov	 DWORD PTR [r8+24], 10
$LN3@clearvalue:
; Line 667
  000de	49 83 c0 20	 add	 r8, 32			; 00000020H
  000e2	4d 3b c2	 cmp	 r8, r10
  000e5	72 a9		 jb	 SHORT $LL4@clearvalue
$LN10@clearvalue:
; Line 658
  000e7	4d 8b 49 30	 mov	 r9, QWORD PTR [r9+48]
  000eb	4c 3b cb	 cmp	 r9, rbx
  000ee	0f 85 2c ff ff
	ff		 jne	 $LL11@clearvalue
  000f4	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
; Line 674
  000f9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000fd	5b		 pop	 rbx
$LN43@clearvalue:
  000fe	c3		 ret	 0
clearvalues ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT clearkeys
_TEXT	SEGMENT
g$ = 48
l$ = 56
f$ = 64
clearkeys PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 640
  00000	49 3b d0	 cmp	 rdx, r8
  00003	0f 84 a1 00 00
	00		 je	 $LN28@clearkeys
  00009	53		 push	 rbx
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
; Line 639
  00013	49 8b d8	 mov	 rbx, r8
  00016	4c 8b d2	 mov	 r10, rdx
; Line 640
  00019	33 ff		 xor	 edi, edi
  0001b	4c 8b d9	 mov	 r11, rcx
  0001e	66 90		 npad	 2
$LL7@clearkeys:
; Line 642
  00020	4d 8b 4a 18	 mov	 r9, QWORD PTR [r10+24]
  00024	41 0f b6 4a 0b	 movzx	 ecx, BYTE PTR [r10+11]
  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	d3 e0		 shl	 eax, cl
  00030	4c 63 c0	 movsxd	 r8, eax
  00033	49 c1 e0 05	 shl	 r8, 5
  00037	4d 03 c1	 add	 r8, r9
; Line 643
  0003a	4d 3b c8	 cmp	 r9, r8
  0003d	73 58		 jae	 SHORT $LN6@clearkeys
  0003f	90		 npad	 1
$LL4@clearkeys:
; Line 644
  00040	41 39 79 08	 cmp	 DWORD PTR [r9+8], edi
  00044	74 48		 je	 SHORT $LN3@clearkeys
  00046	41 8b 41 18	 mov	 eax, DWORD PTR [r9+24]
  0004a	a8 40		 test	 al, 64			; 00000040H
  0004c	74 40		 je	 SHORT $LN3@clearkeys
  0004e	24 0f		 and	 al, 15
  00050	3c 04		 cmp	 al, 4
  00052	75 14		 jne	 SHORT $LN12@clearkeys
  00054	49 8b 51 10	 mov	 rdx, QWORD PTR [r9+16]
  00058	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  0005c	74 30		 je	 SHORT $LN3@clearkeys
  0005e	49 8b cb	 mov	 rcx, r11
  00061	e8 00 00 00 00	 call	 reallymarkobject
  00066	eb 26		 jmp	 SHORT $LN3@clearkeys
$LN12@clearkeys:
  00068	49 8b 41 10	 mov	 rax, QWORD PTR [r9+16]
  0006c	0f b6 48 09	 movzx	 ecx, BYTE PTR [rax+9]
  00070	83 e1 03	 and	 ecx, 3
  00073	74 19		 je	 SHORT $LN3@clearkeys
; Line 646
  00075	41 f6 41 18 40	 test	 BYTE PTR [r9+24], 64	; 00000040H
  0007a	41 89 79 08	 mov	 DWORD PTR [r9+8], edi
  0007e	74 0e		 je	 SHORT $LN3@clearkeys
  00080	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  00084	74 08		 je	 SHORT $LN3@clearkeys
  00086	41 c7 41 18 0a
	00 00 00	 mov	 DWORD PTR [r9+24], 10
$LN3@clearkeys:
; Line 643
  0008e	49 83 c1 20	 add	 r9, 32			; 00000020H
  00092	4d 3b c8	 cmp	 r9, r8
  00095	72 a9		 jb	 SHORT $LL4@clearkeys
$LN6@clearkeys:
; Line 640
  00097	4d 8b 52 30	 mov	 r10, QWORD PTR [r10+48]
  0009b	4c 3b d3	 cmp	 r10, rbx
  0009e	75 80		 jne	 SHORT $LL7@clearkeys
  000a0	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
; Line 650
  000a5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a9	5b		 pop	 rbx
$LN28@clearkeys:
  000aa	c3		 ret	 0
clearkeys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT convergeephemerons
_TEXT	SEGMENT
g$ = 48
convergeephemerons PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 608
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f9	 mov	 rdi, rcx
  00017	33 ed		 xor	 ebp, ebp
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@convergeep:
; Line 612
  00020	48 8b 9f 88 00
	00 00		 mov	 rbx, QWORD PTR [rdi+136]
; Line 614
  00027	8b f5		 mov	 esi, ebp
  00029	48 89 af 88 00
	00 00		 mov	 QWORD PTR [rdi+136], rbp
; Line 615
  00030	48 8b d3	 mov	 rdx, rbx
  00033	48 85 db	 test	 rbx, rbx
  00036	74 31		 je	 SHORT $LN15@convergeep
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL3@convergeep:
; Line 616
  00040	48 8b 5b 30	 mov	 rbx, QWORD PTR [rbx+48]
; Line 617
  00044	48 8b cf	 mov	 rcx, rdi
  00047	e8 00 00 00 00	 call	 traverseephemeron
  0004c	85 c0		 test	 eax, eax
  0004e	74 0d		 je	 SHORT $LN1@convergeep
; Line 618
  00050	48 8b cf	 mov	 rcx, rdi
  00053	e8 00 00 00 00	 call	 propagateall
; Line 619
  00058	be 01 00 00 00	 mov	 esi, 1
$LN1@convergeep:
; Line 615
  0005d	48 8b d3	 mov	 rdx, rbx
  00060	48 85 db	 test	 rbx, rbx
  00063	75 db		 jne	 SHORT $LL3@convergeep
; Line 622
  00065	85 f6		 test	 esi, esi
  00067	75 b7		 jne	 SHORT $LL6@convergeep
$LN15@convergeep:
; Line 623
  00069	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006e	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00073	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
convergeephemerons ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT propagateall
_TEXT	SEGMENT
g$ = 48
propagateall PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 603
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 604
  00006	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	0f 84 b7 00 00
	00		 je	 $LN1@propagatea
  00014	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL2@propagatea:
  00020	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00024	0f b6 41 08	 movzx	 eax, BYTE PTR [rcx+8]
  00028	80 49 09 04	 or	 BYTE PTR [rcx+9], 4
  0002c	83 e8 05	 sub	 eax, 5
  0002f	74 78		 je	 SHORT $LN10@propagatea
  00031	ff c8		 dec	 eax
  00033	74 5f		 je	 SHORT $LN9@propagatea
  00035	83 e8 02	 sub	 eax, 2
  00038	74 35		 je	 SHORT $LN7@propagatea
  0003a	ff c8		 dec	 eax
  0003c	74 1a		 je	 SHORT $LN6@propagatea
  0003e	83 f8 1d	 cmp	 eax, 29
  00041	75 7d		 jne	 SHORT $LN13@propagatea
  00043	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00047	48 8b d1	 mov	 rdx, rcx
  0004a	48 8b cb	 mov	 rcx, rbx
  0004d	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
  00051	e8 00 00 00 00	 call	 traverseCclosure
  00056	eb 64		 jmp	 SHORT $LN11@propagatea
$LN6@propagatea:
  00058	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  0005c	48 8b d1	 mov	 rdx, rcx
  0005f	48 8b cb	 mov	 rcx, rbx
  00062	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
  00066	e8 00 00 00 00	 call	 traverseproto
  0006b	48 98		 cdqe
  0006d	eb 4d		 jmp	 SHORT $LN11@propagatea
$LN7@propagatea:
  0006f	48 8b 41 48	 mov	 rax, QWORD PTR [rcx+72]
  00073	48 8b d1	 mov	 rdx, rcx
  00076	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
  0007a	48 8b 43 78	 mov	 rax, QWORD PTR [rbx+120]
  0007e	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax
  00082	48 89 4b 78	 mov	 QWORD PTR [rbx+120], rcx
  00086	80 61 09 fb	 and	 BYTE PTR [rcx+9], 251	; 000000fbH
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	e8 00 00 00 00	 call	 traversethread
  00092	eb 28		 jmp	 SHORT $LN11@propagatea
$LN9@propagatea:
  00094	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00098	48 8b d1	 mov	 rdx, rcx
  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
  000a2	e8 00 00 00 00	 call	 traverseLclosure
  000a7	eb 13		 jmp	 SHORT $LN11@propagatea
$LN10@propagatea:
  000a9	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
  000ad	48 8b d1	 mov	 rdx, rcx
  000b0	48 8b cb	 mov	 rcx, rbx
  000b3	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
  000b7	e8 00 00 00 00	 call	 traversetable
$LN11@propagatea:
  000bc	48 01 43 20	 add	 QWORD PTR [rbx+32], rax
$LN13@propagatea:
  000c0	48 83 7b 70 00	 cmp	 QWORD PTR [rbx+112], 0
  000c5	0f 85 55 ff ff
	ff		 jne	 $LL2@propagatea
$LN1@propagatea:
; Line 605
  000cb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cf	5b		 pop	 rbx
  000d0	c3		 ret	 0
propagateall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT propagatemark
_TEXT	SEGMENT
g$ = 48
propagatemark PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 559
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 561
  00006	48 8b 51 70	 mov	 rdx, QWORD PTR [rcx+112]
  0000a	48 8b d9	 mov	 rbx, rcx
; Line 564
  0000d	44 0f b6 42 08	 movzx	 r8d, BYTE PTR [rdx+8]
  00012	80 4a 09 04	 or	 BYTE PTR [rdx+9], 4
  00016	41 83 e8 05	 sub	 r8d, 5
  0001a	0f 84 84 00 00
	00		 je	 $LN6@propagatem
  00020	41 ff c8	 dec	 r8d
  00023	74 68		 je	 SHORT $LN5@propagatem
  00025	41 83 e8 02	 sub	 r8d, 2
  00029	74 3b		 je	 SHORT $LN3@propagatem
  0002b	41 ff c8	 dec	 r8d
  0002e	74 1d		 je	 SHORT $LN2@propagatem
  00030	41 83 f8 1d	 cmp	 r8d, 29
  00034	75 7f		 jne	 SHORT $LN9@propagatem
; Line 579
  00036	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  0003a	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax
; Line 580
  0003e	e8 00 00 00 00	 call	 traverseCclosure
; Line 599
  00043	48 01 43 20	 add	 QWORD PTR [rbx+32], rax
; Line 600
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5b		 pop	 rbx
  0004c	c3		 ret	 0
$LN2@propagatem:
; Line 593
  0004d	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  00051	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax
; Line 594
  00055	e8 00 00 00 00	 call	 traverseproto
  0005a	48 98		 cdqe
; Line 599
  0005c	48 01 43 20	 add	 QWORD PTR [rbx+32], rax
; Line 600
  00060	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00064	5b		 pop	 rbx
  00065	c3		 ret	 0
$LN3@propagatem:
; Line 585
  00066	48 8b 42 48	 mov	 rax, QWORD PTR [rdx+72]
  0006a	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax
; Line 586
  0006e	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
  00072	48 89 42 48	 mov	 QWORD PTR [rdx+72], rax
  00076	48 89 51 78	 mov	 QWORD PTR [rcx+120], rdx
; Line 587
  0007a	80 62 09 fb	 and	 BYTE PTR [rdx+9], 251	; 000000fbH
; Line 588
  0007e	e8 00 00 00 00	 call	 traversethread
; Line 599
  00083	48 01 43 20	 add	 QWORD PTR [rbx+32], rax
; Line 600
  00087	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008b	5b		 pop	 rbx
  0008c	c3		 ret	 0
$LN5@propagatem:
; Line 573
  0008d	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  00091	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax
; Line 574
  00095	e8 00 00 00 00	 call	 traverseLclosure
; Line 599
  0009a	48 01 43 20	 add	 QWORD PTR [rbx+32], rax
; Line 600
  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5b		 pop	 rbx
  000a3	c3		 ret	 0
$LN6@propagatem:
; Line 567
  000a4	48 8b 42 30	 mov	 rax, QWORD PTR [rdx+48]
  000a8	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax
; Line 568
  000ac	e8 00 00 00 00	 call	 traversetable
; Line 599
  000b1	48 01 43 20	 add	 QWORD PTR [rbx+32], rax
$LN9@propagatem:
; Line 600
  000b5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b9	5b		 pop	 rbx
  000ba	c3		 ret	 0
propagatemark ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT traversethread
_TEXT	SEGMENT
g$ = 48
th$ = 56
traversethread PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 530
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 531
  00006	4c 8b 42 38	 mov	 r8, QWORD PTR [rdx+56]
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	4c 8b c9	 mov	 r9, rcx
; Line 532
  00010	4d 85 c0	 test	 r8, r8
  00013	75 0a		 jne	 SHORT $LN12@traverseth
; Line 533
  00015	41 8d 40 01	 lea	 eax, QWORD PTR [r8+1]
; Line 552
  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5b		 pop	 rbx
  0001e	c3		 ret	 0
$LN12@traverseth:
; Line 536
  0001f	4c 3b 42 10	 cmp	 r8, QWORD PTR [rdx+16]
  00023	73 22		 jae	 SHORT $LN9@traverseth
$LL11@traverseth:
; Line 537
  00025	41 f6 40 08 40	 test	 BYTE PTR [r8+8], 64	; 00000040H
  0002a	74 11		 je	 SHORT $LN10@traverseth
  0002c	49 8b 10	 mov	 rdx, QWORD PTR [r8]
  0002f	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00033	74 08		 je	 SHORT $LN10@traverseth
  00035	49 8b c9	 mov	 rcx, r9
  00038	e8 00 00 00 00	 call	 reallymarkobject
$LN10@traverseth:
; Line 536
  0003d	49 83 c0 10	 add	 r8, 16
  00041	4c 3b 43 10	 cmp	 r8, QWORD PTR [rbx+16]
  00045	72 de		 jb	 SHORT $LL11@traverseth
$LN9@traverseth:
; Line 538
  00047	41 80 79 55 08	 cmp	 BYTE PTR [r9+85], 8
  0004c	75 50		 jne	 SHORT $LN7@traverseth
; Line 539
  0004e	48 63 83 b8 00
	00 00		 movsxd	 rax, DWORD PTR [rbx+184]
  00055	48 c1 e0 04	 shl	 rax, 4
  00059	48 03 43 38	 add	 rax, QWORD PTR [rbx+56]
; Line 540
  0005d	4c 3b c0	 cmp	 r8, rax
  00060	73 1b		 jae	 SHORT $LN4@traverseth
  00062	33 c9		 xor	 ecx, ecx
  00064	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL6@traverseth:
; Line 541
  00070	41 89 48 08	 mov	 DWORD PTR [r8+8], ecx
  00074	49 83 c0 10	 add	 r8, 16
  00078	4c 3b c0	 cmp	 r8, rax
  0007b	72 f3		 jb	 SHORT $LL6@traverseth
$LN4@traverseth:
; Line 543
  0007d	48 39 5b 50	 cmp	 QWORD PTR [rbx+80], rbx
  00081	75 2a		 jne	 SHORT $LN1@traverseth
  00083	48 83 7b 40 00	 cmp	 QWORD PTR [rbx+64], 0
  00088	74 23		 je	 SHORT $LN1@traverseth
; Line 544
  0008a	49 8b 81 a8 00
	00 00		 mov	 rax, QWORD PTR [r9+168]
  00091	48 89 43 50	 mov	 QWORD PTR [rbx+80], rax
; Line 545
  00095	49 89 99 a8 00
	00 00		 mov	 QWORD PTR [r9+168], rbx
; Line 546
  0009c	eb 0f		 jmp	 SHORT $LN1@traverseth
$LN7@traverseth:
; Line 548
  0009e	41 80 79 56 01	 cmp	 BYTE PTR [r9+86], 1
  000a3	74 08		 je	 SHORT $LN1@traverseth
; Line 549
  000a5	48 8b cb	 mov	 rcx, rbx
  000a8	e8 00 00 00 00	 call	 luaD_shrinkstack
$LN1@traverseth:
; Line 551
  000ad	0f b7 43 0a	 movzx	 eax, WORD PTR [rbx+10]
  000b1	48 63 93 b8 00
	00 00		 movsxd	 rdx, DWORD PTR [rbx+184]
  000b8	48 83 c2 0d	 add	 rdx, 13
  000bc	48 8d 0c c0	 lea	 rcx, QWORD PTR [rax+rax*8]
  000c0	48 c1 e2 04	 shl	 rdx, 4
  000c4	48 8d 04 ca	 lea	 rax, QWORD PTR [rdx+rcx*8]
; Line 552
  000c8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cc	5b		 pop	 rbx
  000cd	c3		 ret	 0
traversethread ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT traverseLclosure
_TEXT	SEGMENT
g$ = 48
cl$ = 56
traverseLclosure PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 514
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b d2	 mov	 r10, rdx
; Line 516
  00007	48 8b 52 18	 mov	 rdx, QWORD PTR [rdx+24]
  0000b	4c 8b d9	 mov	 r11, rcx
  0000e	48 85 d2	 test	 rdx, rdx
  00011	74 0b		 je	 SHORT $LN8@traverseLc
  00013	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00017	74 05		 je	 SHORT $LN8@traverseLc
  00019	e8 00 00 00 00	 call	 reallymarkobject
$LN8@traverseLc:
; Line 517
  0001e	45 33 c9	 xor	 r9d, r9d
  00021	45 38 4a 0a	 cmp	 BYTE PTR [r10+10], r9b
  00025	76 55		 jbe	 SHORT $LN5@traverseLc
  00027	4d 8d 42 20	 lea	 r8, QWORD PTR [r10+32]
  0002b	0f 1f 44 00 00	 npad	 5
$LL7@traverseLc:
; Line 518
  00030	49 8b 08	 mov	 rcx, QWORD PTR [r8]
; Line 519
  00033	48 85 c9	 test	 rcx, rcx
  00036	74 33		 je	 SHORT $LN6@traverseLc
; Line 520
  00038	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0003b	48 8d 41 10	 lea	 rax, QWORD PTR [rcx+16]
  0003f	48 3b d0	 cmp	 rdx, rax
  00042	74 10		 je	 SHORT $LN3@traverseLc
  00044	41 80 7b 55 08	 cmp	 BYTE PTR [r11+85], 8
  00049	74 09		 je	 SHORT $LN3@traverseLc
; Line 521
  0004b	c7 41 18 01 00
	00 00		 mov	 DWORD PTR [rcx+24], 1
; Line 522
  00052	eb 17		 jmp	 SHORT $LN6@traverseLc
$LN3@traverseLc:
; Line 523
  00054	f6 42 08 40	 test	 BYTE PTR [rdx+8], 64	; 00000040H
  00058	74 11		 je	 SHORT $LN6@traverseLc
  0005a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0005d	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00061	74 08		 je	 SHORT $LN6@traverseLc
  00063	49 8b cb	 mov	 rcx, r11
  00066	e8 00 00 00 00	 call	 reallymarkobject
$LN6@traverseLc:
; Line 517
  0006b	41 0f b6 42 0a	 movzx	 eax, BYTE PTR [r10+10]
  00070	41 ff c1	 inc	 r9d
  00073	49 83 c0 08	 add	 r8, 8
  00077	44 3b c8	 cmp	 r9d, eax
  0007a	7c b4		 jl	 SHORT $LL7@traverseLc
$LN5@traverseLc:
; Line 526
  0007c	41 0f b6 42 0a	 movzx	 eax, BYTE PTR [r10+10]
  00081	8d 04 c5 20 00
	00 00		 lea	 eax, DWORD PTR [rax*8+32]
  00088	48 98		 cdqe
; Line 527
  0008a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008e	c3		 ret	 0
traverseLclosure ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT traverseCclosure
_TEXT	SEGMENT
g$ = 48
cl$ = 56
traverseCclosure PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 501
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 503
  00006	45 33 db	 xor	 r11d, r11d
  00009	48 8b da	 mov	 rbx, rdx
  0000c	4c 8b c9	 mov	 r9, rcx
  0000f	44 38 5a 0a	 cmp	 BYTE PTR [rdx+10], r11b
  00013	0f 86 1f 01 00
	00		 jbe	 $LN2@traverseCc
  00019	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0001e	4c 8d 52 20	 lea	 r10, QWORD PTR [rdx+32]
  00022	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:__ImageBase
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@traverseCc:
; Line 504
  00030	41 f6 42 08 40	 test	 BYTE PTR [r10+8], 64	; 00000040H
  00035	0f 84 e4 00 00
	00		 je	 $LN3@traverseCc
  0003b	4d 8b 02	 mov	 r8, QWORD PTR [r10]
  0003e	41 f6 40 09 03	 test	 BYTE PTR [r8+9], 3
  00043	0f 84 d6 00 00
	00		 je	 $LN3@traverseCc
  00049	41 0f b6 40 08	 movzx	 eax, BYTE PTR [r8+8]
  0004e	41 80 60 09 fc	 and	 BYTE PTR [r8+9], 252	; 000000fcH
  00053	83 e8 04	 sub	 eax, 4
  00056	83 f8 22	 cmp	 eax, 34			; 00000022H
  00059	0f 87 c0 00 00
	00		 ja	 $LN3@traverseCc
  0005f	90		 npad	 1
$reentry$35:
  00060	48 98		 cdqe
  00062	0f b6 84 07 00
	00 00 00	 movzx	 eax, BYTE PTR $LN31@traverseCc[rdi+rax]
  0006a	8b 8c 87 00 00
	00 00		 mov	 ecx, DWORD PTR $LN32@traverseCc[rdi+rax*4]
  00071	48 03 cf	 add	 rcx, rdi
  00074	ff e1		 jmp	 rcx
$LN16@traverseCc:
  00076	49 8b 50 10	 mov	 rdx, QWORD PTR [r8+16]
  0007a	48 85 d2	 test	 rdx, rdx
  0007d	74 0e		 je	 SHORT $LN14@traverseCc
  0007f	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00083	74 08		 je	 SHORT $LN14@traverseCc
  00085	49 8b c9	 mov	 rcx, r9
  00088	e8 00 00 00 00	 call	 reallymarkobject
$LN14@traverseCc:
  0008d	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  00092	49 8b 40 18	 mov	 rax, QWORD PTR [r8+24]
  00096	48 83 c0 28	 add	 rax, 40			; 00000028H
  0009a	49 01 41 20	 add	 QWORD PTR [r9+32], rax
  0009e	41 0f b6 40 0a	 movzx	 eax, BYTE PTR [r8+10]
  000a3	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  000a7	a8 40		 test	 al, 64			; 00000040H
  000a9	74 74		 je	 SHORT $LN3@traverseCc
  000ab	0f b6 41 09	 movzx	 eax, BYTE PTR [rcx+9]
  000af	a8 03		 test	 al, 3
  000b1	74 6c		 je	 SHORT $LN3@traverseCc
  000b3	24 fc		 and	 al, 252			; 000000fcH
  000b5	4c 8b c1	 mov	 r8, rcx
  000b8	88 41 09	 mov	 BYTE PTR [rcx+9], al
  000bb	0f b6 41 08	 movzx	 eax, BYTE PTR [rcx+8]
  000bf	83 e8 04	 sub	 eax, 4
  000c2	83 f8 22	 cmp	 eax, 34			; 00000022H
  000c5	76 99		 jbe	 SHORT $reentry$35
; Line 503
  000c7	eb 56		 jmp	 SHORT $LN3@traverseCc
; Line 504
$LN18@traverseCc:
  000c9	41 0f b6 40 0b	 movzx	 eax, BYTE PTR [r8+11]
  000ce	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  000d3	ff c0		 inc	 eax
  000d5	48 63 c8	 movsxd	 rcx, eax
  000d8	48 83 c1 18	 add	 rcx, 24
  000dc	49 01 49 20	 add	 QWORD PTR [r9+32], rcx
  000e0	eb 3d		 jmp	 SHORT $LN3@traverseCc
$LN17@traverseCc:
  000e2	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  000e6	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  000eb	48 83 c0 19	 add	 rax, 25
  000ef	49 01 41 20	 add	 QWORD PTR [r9+32], rax
  000f3	eb 2a		 jmp	 SHORT $LN3@traverseCc
$LN12@traverseCc:
  000f5	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  000f9	49 89 40 10	 mov	 QWORD PTR [r8+16], rax
  000fd	eb 1c		 jmp	 SHORT $LN33@traverseCc
$LN10@traverseCc:
  000ff	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  00103	49 89 40 30	 mov	 QWORD PTR [r8+48], rax
  00107	eb 12		 jmp	 SHORT $LN33@traverseCc
$LN9@traverseCc:
  00109	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  0010d	49 89 40 48	 mov	 QWORD PTR [r8+72], rax
  00111	eb 08		 jmp	 SHORT $LN33@traverseCc
$LN8@traverseCc:
  00113	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  00117	49 89 40 70	 mov	 QWORD PTR [r8+112], rax
$LN33@traverseCc:
  0011b	4d 89 41 70	 mov	 QWORD PTR [r9+112], r8
$LN3@traverseCc:
; Line 503
  0011f	0f b6 43 0a	 movzx	 eax, BYTE PTR [rbx+10]
  00123	41 ff c3	 inc	 r11d
  00126	49 83 c2 10	 add	 r10, 16
  0012a	44 3b d8	 cmp	 r11d, eax
  0012d	0f 8c fd fe ff
	ff		 jl	 $LL4@traverseCc
  00133	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN2@traverseCc:
; Line 505
  00138	0f b6 43 0a	 movzx	 eax, BYTE PTR [rbx+10]
  0013c	83 c0 02	 add	 eax, 2
  0013f	c1 e0 04	 shl	 eax, 4
  00142	48 98		 cdqe
; Line 506
  00144	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00148	5b		 pop	 rbx
  00149	c3		 ret	 0
  0014a	66 90		 npad	 2
$LN32@traverseCc:
  0014c	00 00 00 00	 DD	 $LN18@traverseCc
  00150	00 00 00 00	 DD	 $LN10@traverseCc
  00154	00 00 00 00	 DD	 $LN12@traverseCc
  00158	00 00 00 00	 DD	 $LN16@traverseCc
  0015c	00 00 00 00	 DD	 $LN9@traverseCc
  00160	00 00 00 00	 DD	 $LN8@traverseCc
  00164	00 00 00 00	 DD	 $LN17@traverseCc
  00168	00 00 00 00	 DD	 $LN3@traverseCc
$LN31@traverseCc:
  0016c	00		 DB	 0
  0016d	01		 DB	 1
  0016e	02		 DB	 2
  0016f	03		 DB	 3
  00170	04		 DB	 4
  00171	05		 DB	 5
  00172	07		 DB	 7
  00173	07		 DB	 7
  00174	07		 DB	 7
  00175	07		 DB	 7
  00176	07		 DB	 7
  00177	07		 DB	 7
  00178	07		 DB	 7
  00179	07		 DB	 7
  0017a	07		 DB	 7
  0017b	07		 DB	 7
  0017c	06		 DB	 6
  0017d	07		 DB	 7
  0017e	07		 DB	 7
  0017f	07		 DB	 7
  00180	07		 DB	 7
  00181	07		 DB	 7
  00182	07		 DB	 7
  00183	07		 DB	 7
  00184	07		 DB	 7
  00185	07		 DB	 7
  00186	07		 DB	 7
  00187	07		 DB	 7
  00188	07		 DB	 7
  00189	07		 DB	 7
  0018a	07		 DB	 7
  0018b	07		 DB	 7
  0018c	07		 DB	 7
  0018d	07		 DB	 7
  0018e	02		 DB	 2
traverseCclosure ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT traverseproto
_TEXT	SEGMENT
g$ = 48
f$ = 56
traverseproto PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 479
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 481
  00006	48 8b 42 60	 mov	 rax, QWORD PTR [rdx+96]
  0000a	45 33 c9	 xor	 r9d, r9d
  0000d	4c 8b c2	 mov	 r8, rdx
  00010	48 8b d9	 mov	 rbx, rcx
  00013	48 85 c0	 test	 rax, rax
  00016	74 0a		 je	 SHORT $LN22@traversepr
  00018	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  0001c	74 04		 je	 SHORT $LN22@traversepr
; Line 482
  0001e	4c 89 4a 60	 mov	 QWORD PTR [rdx+96], r9
$LN22@traversepr:
; Line 483
  00022	48 8b 52 68	 mov	 rdx, QWORD PTR [rdx+104]
  00026	48 85 d2	 test	 rdx, rdx
  00029	74 0b		 je	 SHORT $LN20@traversepr
  0002b	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  0002f	74 05		 je	 SHORT $LN20@traversepr
  00031	e8 00 00 00 00	 call	 reallymarkobject
$LN20@traversepr:
; Line 484
  00036	45 8b d1	 mov	 r10d, r9d
  00039	45 39 48 14	 cmp	 DWORD PTR [r8+20], r9d
  0003d	7e 2e		 jle	 SHORT $LN17@traversepr
  0003f	4d 8b d9	 mov	 r11, r9
$LL19@traversepr:
; Line 485
  00042	49 8b 40 30	 mov	 rax, QWORD PTR [r8+48]
  00046	41 f6 44 03 08
	40		 test	 BYTE PTR [r11+rax+8], 64 ; 00000040H
  0004c	74 12		 je	 SHORT $LN18@traversepr
  0004e	49 8b 14 03	 mov	 rdx, QWORD PTR [r11+rax]
  00052	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00056	74 08		 je	 SHORT $LN18@traversepr
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 reallymarkobject
$LN18@traversepr:
; Line 484
  00060	41 ff c2	 inc	 r10d
  00063	49 83 c3 10	 add	 r11, 16
  00067	45 3b 50 14	 cmp	 r10d, DWORD PTR [r8+20]
  0006b	7c d5		 jl	 SHORT $LL19@traversepr
$LN17@traversepr:
; Line 486
  0006d	45 8b d1	 mov	 r10d, r9d
  00070	45 39 48 10	 cmp	 DWORD PTR [r8+16], r9d
  00074	7e 32		 jle	 SHORT $LN13@traversepr
  00076	4d 8b d9	 mov	 r11, r9
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL15@traversepr:
; Line 487
  00080	49 8b 40 58	 mov	 rax, QWORD PTR [r8+88]
  00084	49 8b 14 03	 mov	 rdx, QWORD PTR [r11+rax]
  00088	48 85 d2	 test	 rdx, rdx
  0008b	74 0e		 je	 SHORT $LN14@traversepr
  0008d	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00091	74 08		 je	 SHORT $LN14@traversepr
  00093	48 8b cb	 mov	 rcx, rbx
  00096	e8 00 00 00 00	 call	 reallymarkobject
$LN14@traversepr:
; Line 486
  0009b	41 ff c2	 inc	 r10d
  0009e	49 83 c3 10	 add	 r11, 16
  000a2	45 3b 50 10	 cmp	 r10d, DWORD PTR [r8+16]
  000a6	7c d8		 jl	 SHORT $LL15@traversepr
$LN13@traversepr:
; Line 488
  000a8	45 8b d1	 mov	 r10d, r9d
  000ab	45 39 48 20	 cmp	 DWORD PTR [r8+32], r9d
  000af	7e 37		 jle	 SHORT $LN8@traversepr
  000b1	4d 8b d9	 mov	 r11, r9
  000b4	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL10@traversepr:
; Line 489
  000c0	49 8b 40 40	 mov	 rax, QWORD PTR [r8+64]
  000c4	49 8b 14 03	 mov	 rdx, QWORD PTR [r11+rax]
  000c8	48 85 d2	 test	 rdx, rdx
  000cb	74 0e		 je	 SHORT $LN9@traversepr
  000cd	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  000d1	74 08		 je	 SHORT $LN9@traversepr
  000d3	48 8b cb	 mov	 rcx, rbx
  000d6	e8 00 00 00 00	 call	 reallymarkobject
$LN9@traversepr:
; Line 488
  000db	41 ff c2	 inc	 r10d
  000de	49 83 c3 08	 add	 r11, 8
  000e2	45 3b 50 20	 cmp	 r10d, DWORD PTR [r8+32]
  000e6	7c d8		 jl	 SHORT $LL10@traversepr
$LN8@traversepr:
; Line 490
  000e8	45 39 48 24	 cmp	 DWORD PTR [r8+36], r9d
  000ec	7e 2b		 jle	 SHORT $LN3@traversepr
  000ee	4d 8b d1	 mov	 r10, r9
$LL5@traversepr:
; Line 491
  000f1	49 8b 40 50	 mov	 rax, QWORD PTR [r8+80]
  000f5	49 8b 14 02	 mov	 rdx, QWORD PTR [r10+rax]
  000f9	48 85 d2	 test	 rdx, rdx
  000fc	74 0e		 je	 SHORT $LN4@traversepr
  000fe	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00102	74 08		 je	 SHORT $LN4@traversepr
  00104	48 8b cb	 mov	 rcx, rbx
  00107	e8 00 00 00 00	 call	 reallymarkobject
$LN4@traversepr:
; Line 490
  0010c	41 ff c1	 inc	 r9d
  0010f	49 83 c2 10	 add	 r10, 16
  00113	45 3b 48 24	 cmp	 r9d, DWORD PTR [r8+36]
  00117	7c d8		 jl	 SHORT $LL5@traversepr
$LN3@traversepr:
; Line 497
  00119	41 8b 40 14	 mov	 eax, DWORD PTR [r8+20]
  0011d	41 8b 48 24	 mov	 ecx, DWORD PTR [r8+36]
  00121	48 03 c8	 add	 rcx, rax
  00124	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00128	48 03 c8	 add	 rcx, rax
  0012b	41 8b 40 20	 mov	 eax, DWORD PTR [r8+32]
  0012f	48 8d 0c 48	 lea	 rcx, QWORD PTR [rax+rcx*2]
  00133	41 8b 40 1c	 mov	 eax, DWORD PTR [r8+28]
  00137	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0013b	41 8b 48 18	 mov	 ecx, DWORD PTR [r8+24]
  0013f	48 83 c0 1e	 add	 rax, 30
  00143	48 03 c1	 add	 rax, rcx
  00146	48 c1 e0 02	 shl	 rax, 2
; Line 498
  0014a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0014e	5b		 pop	 rbx
  0014f	c3		 ret	 0
traverseproto ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT traversetable
_TEXT	SEGMENT
g$ = 48
h$ = 56
traversetable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 451
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx
; Line 453
  00012	48 8b 4a 28	 mov	 rcx, QWORD PTR [rdx+40]
  00016	48 8b da	 mov	 rbx, rdx
  00019	48 85 c9	 test	 rcx, rcx
  0001c	75 04		 jne	 SHORT $LN13@traverseta
  0001e	33 ff		 xor	 edi, edi
  00020	eb 1e		 jmp	 SHORT $LN12@traverseta
$LN13@traverseta:
  00022	f6 41 0a 08	 test	 BYTE PTR [rcx+10], 8
  00026	74 04		 je	 SHORT $LN11@traverseta
  00028	33 ff		 xor	 edi, edi
  0002a	eb 14		 jmp	 SHORT $LN12@traverseta
$LN11@traverseta:
  0002c	4c 8b 86 f8 00
	00 00		 mov	 r8, QWORD PTR [rsi+248]
  00033	ba 03 00 00 00	 mov	 edx, 3
  00038	e8 00 00 00 00	 call	 luaT_gettm
  0003d	48 8b f8	 mov	 rdi, rax
$LN12@traverseta:
; Line 454
  00040	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
  00044	48 85 d2	 test	 rdx, rdx
  00047	74 0e		 je	 SHORT $LN7@traverseta
  00049	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  0004d	74 08		 je	 SHORT $LN7@traverseta
  0004f	48 8b ce	 mov	 rcx, rsi
  00052	e8 00 00 00 00	 call	 reallymarkobject
$LN7@traverseta:
; Line 458
  00057	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0005c	48 85 ff	 test	 rdi, rdi
  0005f	74 76		 je	 SHORT $LN6@traverseta
  00061	8b 47 08	 mov	 eax, DWORD PTR [rdi+8]
  00064	24 0f		 and	 al, 15
  00066	3c 04		 cmp	 al, 4
  00068	75 6d		 jne	 SHORT $LN6@traverseta
  0006a	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0006d	ba 6b 00 00 00	 mov	 edx, 107		; 0000006bH
  00072	48 83 c1 18	 add	 rcx, 24
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0007c	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0007f	ba 76 00 00 00	 mov	 edx, 118		; 00000076H
  00084	48 83 c1 18	 add	 rcx, 24
  00088	48 8b e8	 mov	 rbp, rax
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00091	48 85 ed	 test	 rbp, rbp
  00094	75 05		 jne	 SHORT $LN15@traverseta
  00096	48 85 c0	 test	 rax, rax
  00099	74 3c		 je	 SHORT $LN6@traverseta
$LN15@traverseta:
; Line 459
  0009b	80 63 09 fb	 and	 BYTE PTR [rbx+9], 251	; 000000fbH
; Line 460
  0009f	48 85 ed	 test	 rbp, rbp
  000a2	75 0d		 jne	 SHORT $LN5@traverseta
; Line 461
  000a4	48 8b d3	 mov	 rdx, rbx
  000a7	48 8b ce	 mov	 rcx, rsi
  000aa	e8 00 00 00 00	 call	 traverseweakvalue
  000af	eb 31		 jmp	 SHORT $LN1@traverseta
$LN5@traverseta:
; Line 462
  000b1	48 85 c0	 test	 rax, rax
  000b4	75 0d		 jne	 SHORT $LN3@traverseta
; Line 463
  000b6	48 8b d3	 mov	 rdx, rbx
  000b9	48 8b ce	 mov	 rcx, rsi
  000bc	e8 00 00 00 00	 call	 traverseephemeron
; Line 464
  000c1	eb 1f		 jmp	 SHORT $LN1@traverseta
$LN3@traverseta:
; Line 465
  000c3	48 8b 86 90 00
	00 00		 mov	 rax, QWORD PTR [rsi+144]
  000ca	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  000ce	48 89 9e 90 00
	00 00		 mov	 QWORD PTR [rsi+144], rbx
; Line 467
  000d5	eb 0b		 jmp	 SHORT $LN1@traverseta
$LN6@traverseta:
; Line 468
  000d7	48 8b d3	 mov	 rdx, rbx
  000da	48 8b ce	 mov	 rcx, rsi
  000dd	e8 00 00 00 00	 call	 traversestrongtable
$LN1@traverseta:
; Line 470
  000e2	0f b6 4b 0b	 movzx	 ecx, BYTE PTR [rbx+11]
  000e6	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
; Line 471
  000eb	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000f0	b8 01 00 00 00	 mov	 eax, 1
  000f5	d3 e0		 shl	 eax, cl
  000f7	48 63 c8	 movsxd	 rcx, eax
  000fa	8b 43 0c	 mov	 eax, DWORD PTR [rbx+12]
  000fd	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00102	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00106	48 c1 e0 04	 shl	 rax, 4
  0010a	48 83 c0 38	 add	 rax, 56			; 00000038H
  0010e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00112	5f		 pop	 rdi
  00113	c3		 ret	 0
traversetable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT traversestrongtable
_TEXT	SEGMENT
g$ = 48
h$ = 56
traversestrongtable PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 433
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b d1	 mov	 r10, rcx
; Line 434
  00007	0f b6 4a 0b	 movzx	 ecx, BYTE PTR [rdx+11]
  0000b	b8 01 00 00 00	 mov	 eax, 1
  00010	d3 e0		 shl	 eax, cl
; Line 436
  00012	45 33 c0	 xor	 r8d, r8d
  00015	4c 8b ca	 mov	 r9, rdx
  00018	4c 63 d8	 movsxd	 r11, eax
  0001b	49 c1 e3 05	 shl	 r11, 5
  0001f	4c 03 5a 18	 add	 r11, QWORD PTR [rdx+24]
  00023	44 39 42 0c	 cmp	 DWORD PTR [rdx+12], r8d
  00027	76 33		 jbe	 SHORT $LN9@traversest
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@traversest:
; Line 437
  00030	49 8b 41 10	 mov	 rax, QWORD PTR [r9+16]
  00034	41 8b c8	 mov	 ecx, r8d
  00037	48 03 c9	 add	 rcx, rcx
  0003a	f6 44 c8 08 40	 test	 BYTE PTR [rax+rcx*8+8], 64 ; 00000040H
  0003f	74 12		 je	 SHORT $LN10@traversest
  00041	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00045	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00049	74 08		 je	 SHORT $LN10@traversest
  0004b	49 8b ca	 mov	 rcx, r10
  0004e	e8 00 00 00 00	 call	 reallymarkobject
$LN10@traversest:
; Line 436
  00053	41 ff c0	 inc	 r8d
  00056	45 3b 41 0c	 cmp	 r8d, DWORD PTR [r9+12]
  0005a	72 d4		 jb	 SHORT $LL11@traversest
$LN9@traversest:
; Line 438
  0005c	4d 8b 41 18	 mov	 r8, QWORD PTR [r9+24]
  00060	4d 3b c3	 cmp	 r8, r11
  00063	73 5c		 jae	 SHORT $LN5@traversest
$LL7@traversest:
; Line 440
  00065	41 83 78 08 00	 cmp	 DWORD PTR [r8+8], 0
  0006a	75 1b		 jne	 SHORT $LN4@traversest
; Line 441
  0006c	41 f6 40 18 40	 test	 BYTE PTR [r8+24], 64	; 00000040H
  00071	74 45		 je	 SHORT $LN6@traversest
  00073	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  00077	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  0007b	74 3b		 je	 SHORT $LN6@traversest
  0007d	41 c7 40 18 0a
	00 00 00	 mov	 DWORD PTR [r8+24], 10
; Line 442
  00085	eb 31		 jmp	 SHORT $LN6@traversest
$LN4@traversest:
; Line 444
  00087	41 f6 40 18 40	 test	 BYTE PTR [r8+24], 64	; 00000040H
  0008c	74 12		 je	 SHORT $LN2@traversest
  0008e	49 8b 50 10	 mov	 rdx, QWORD PTR [r8+16]
  00092	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00096	74 08		 je	 SHORT $LN2@traversest
  00098	49 8b ca	 mov	 rcx, r10
  0009b	e8 00 00 00 00	 call	 reallymarkobject
$LN2@traversest:
; Line 445
  000a0	41 f6 40 08 40	 test	 BYTE PTR [r8+8], 64	; 00000040H
  000a5	74 11		 je	 SHORT $LN6@traversest
  000a7	49 8b 10	 mov	 rdx, QWORD PTR [r8]
  000aa	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  000ae	74 08		 je	 SHORT $LN6@traversest
  000b0	49 8b ca	 mov	 rcx, r10
  000b3	e8 00 00 00 00	 call	 reallymarkobject
$LN6@traversest:
; Line 438
  000b8	49 83 c0 20	 add	 r8, 32			; 00000020H
  000bc	4d 3b c3	 cmp	 r8, r11
  000bf	72 a4		 jb	 SHORT $LL7@traversest
$LN5@traversest:
; Line 448
  000c1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c5	c3		 ret	 0
traversestrongtable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT traverseephemeron
_TEXT	SEGMENT
g$ = 48
h$ = 56
traverseephemeron PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 394
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 395
  0000f	45 33 db	 xor	 r11d, r11d
  00012	4c 8b c9	 mov	 r9, rcx
; Line 398
  00015	0f b6 4a 0b	 movzx	 ecx, BYTE PTR [rdx+11]
  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	4c 8b d2	 mov	 r10, rdx
  00021	41 8b f3	 mov	 esi, r11d
  00024	d3 e0		 shl	 eax, cl
  00026	41 8b fb	 mov	 edi, r11d
; Line 401
  00029	45 8b c3	 mov	 r8d, r11d
  0002c	48 63 d8	 movsxd	 rbx, eax
  0002f	48 c1 e3 05	 shl	 rbx, 5
  00033	48 03 5a 18	 add	 rbx, QWORD PTR [rdx+24]
  00037	44 39 5a 0c	 cmp	 DWORD PTR [rdx+12], r11d
  0003b	76 35		 jbe	 SHORT $LN16@traverseep
  0003d	0f 1f 00	 npad	 3
$LL18@traverseep:
; Line 402
  00040	49 8b 42 10	 mov	 rax, QWORD PTR [r10+16]
  00044	41 8b c8	 mov	 ecx, r8d
  00047	48 03 c9	 add	 rcx, rcx
  0004a	f6 44 c8 08 40	 test	 BYTE PTR [rax+rcx*8+8], 64 ; 00000040H
  0004f	74 18		 je	 SHORT $LN17@traverseep
  00051	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00055	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00059	74 0e		 je	 SHORT $LN17@traverseep
; Line 404
  0005b	49 8b c9	 mov	 rcx, r9
  0005e	41 bb 01 00 00
	00		 mov	 r11d, 1
  00064	e8 00 00 00 00	 call	 reallymarkobject
$LN17@traverseep:
; Line 401
  00069	41 ff c0	 inc	 r8d
  0006c	45 3b 42 0c	 cmp	 r8d, DWORD PTR [r10+12]
  00070	72 ce		 jb	 SHORT $LL18@traverseep
$LN16@traverseep:
; Line 408
  00072	4d 8b 42 18	 mov	 r8, QWORD PTR [r10+24]
  00076	4c 3b c3	 cmp	 r8, rbx
  00079	73 6f		 jae	 SHORT $LN12@traverseep
  0007b	0f 1f 44 00 00	 npad	 5
$LL14@traverseep:
; Line 410
  00080	41 8b 50 08	 mov	 edx, DWORD PTR [r8+8]
  00084	85 d2		 test	 edx, edx
  00086	75 1b		 jne	 SHORT $LN11@traverseep
; Line 411
  00088	41 f6 40 18 40	 test	 BYTE PTR [r8+24], 64	; 00000040H
  0008d	74 52		 je	 SHORT $LN13@traverseep
  0008f	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  00093	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  00097	74 48		 je	 SHORT $LN13@traverseep
  00099	41 c7 40 18 0a
	00 00 00	 mov	 DWORD PTR [r8+24], 10
  000a1	eb 3e		 jmp	 SHORT $LN13@traverseep
$LN11@traverseep:
; Line 412
  000a3	41 8b 40 18	 mov	 eax, DWORD PTR [r8+24]
  000a7	a8 40		 test	 al, 64			; 00000040H
  000a9	74 18		 je	 SHORT $LN9@traverseep
  000ab	24 0f		 and	 al, 15
  000ad	3c 04		 cmp	 al, 4
  000af	75 5f		 jne	 SHORT $LN26@traverseep
  000b1	49 8b 50 10	 mov	 rdx, QWORD PTR [r8+16]
  000b5	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  000b9	74 08		 je	 SHORT $LN9@traverseep
  000bb	49 8b c9	 mov	 rcx, r9
  000be	e8 00 00 00 00	 call	 reallymarkobject
$LN9@traverseep:
; Line 417
  000c3	41 f6 40 08 40	 test	 BYTE PTR [r8+8], 64	; 00000040H
  000c8	74 17		 je	 SHORT $LN13@traverseep
  000ca	49 8b 10	 mov	 rdx, QWORD PTR [r8]
  000cd	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  000d1	74 0e		 je	 SHORT $LN13@traverseep
; Line 419
  000d3	49 8b c9	 mov	 rcx, r9
  000d6	41 bb 01 00 00
	00		 mov	 r11d, 1
  000dc	e8 00 00 00 00	 call	 reallymarkobject
$LN13@traverseep:
; Line 408
  000e1	49 83 c0 20	 add	 r8, 32			; 00000020H
  000e5	4c 3b c3	 cmp	 r8, rbx
  000e8	72 96		 jb	 SHORT $LL14@traverseep
$LN12@traverseep:
; Line 423
  000ea	41 80 79 55 00	 cmp	 BYTE PTR [r9+85], 0
  000ef	75 43		 jne	 SHORT $LN5@traverseep
; Line 424
  000f1	49 8b 49 78	 mov	 rcx, QWORD PTR [r9+120]
; Line 429
  000f5	41 8b c3	 mov	 eax, r11d
  000f8	49 89 4a 30	 mov	 QWORD PTR [r10+48], rcx
  000fc	4d 89 51 78	 mov	 QWORD PTR [r9+120], r10
; Line 430
  00100	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00105	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0010a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0010e	5f		 pop	 rdi
  0010f	c3		 ret	 0
; Line 412
$LN26@traverseep:
  00110	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  00114	0f b6 48 09	 movzx	 ecx, BYTE PTR [rax+9]
  00118	83 e1 03	 and	 ecx, 3
  0011b	74 a6		 je	 SHORT $LN9@traverseep
; Line 413
  0011d	be 01 00 00 00	 mov	 esi, 1
; Line 414
  00122	f6 c2 40	 test	 dl, 64			; 00000040H
  00125	74 ba		 je	 SHORT $LN13@traverseep
  00127	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0012a	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  0012e	74 b1		 je	 SHORT $LN13@traverseep
; Line 415
  00130	8b fe		 mov	 edi, esi
; Line 417
  00132	eb ad		 jmp	 SHORT $LN13@traverseep
$LN5@traverseep:
; Line 425
  00134	85 ff		 test	 edi, edi
  00136	74 25		 je	 SHORT $LN3@traverseep
; Line 426
  00138	49 8b 81 88 00
	00 00		 mov	 rax, QWORD PTR [r9+136]
  0013f	49 89 42 30	 mov	 QWORD PTR [r10+48], rax
  00143	4d 89 91 88 00
	00 00		 mov	 QWORD PTR [r9+136], r10
; Line 429
  0014a	41 8b c3	 mov	 eax, r11d
; Line 430
  0014d	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00152	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00157	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0015b	5f		 pop	 rdi
  0015c	c3		 ret	 0
$LN3@traverseep:
; Line 427
  0015d	85 f6		 test	 esi, esi
  0015f	74 12		 je	 SHORT $LN39@traverseep
; Line 428
  00161	49 8b 81 90 00
	00 00		 mov	 rax, QWORD PTR [r9+144]
  00168	49 89 42 30	 mov	 QWORD PTR [r10+48], rax
  0016c	4d 89 91 90 00
	00 00		 mov	 QWORD PTR [r9+144], r10
$LN39@traverseep:
; Line 430
  00173	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00178	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0017d	41 8b c3	 mov	 eax, r11d
  00180	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00184	5f		 pop	 rdi
  00185	c3		 ret	 0
traverseephemeron ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT traverseweakvalue
_TEXT	SEGMENT
g$ = 48
h$ = 56
traverseweakvalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 361
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 362
  0000a	4c 8b 42 18	 mov	 r8, QWORD PTR [rdx+24]
; Line 365
  0000e	45 33 c9	 xor	 r9d, r9d
  00011	4c 8b d1	 mov	 r10, rcx
  00014	0f b6 4a 0b	 movzx	 ecx, BYTE PTR [rdx+11]
  00018	bf 01 00 00 00	 mov	 edi, 1
  0001d	48 8b da	 mov	 rbx, rdx
  00020	8b c7		 mov	 eax, edi
  00022	d3 e0		 shl	 eax, cl
  00024	4c 63 d8	 movsxd	 r11, eax
  00027	49 c1 e3 05	 shl	 r11, 5
  0002b	4d 03 d8	 add	 r11, r8
  0002e	44 39 4a 0c	 cmp	 DWORD PTR [rdx+12], r9d
  00032	41 0f 97 c1	 seta	 r9b
; Line 366
  00036	4d 3b c3	 cmp	 r8, r11
  00039	73 7d		 jae	 SHORT $LN8@traversewe
  0003b	0f 1f 44 00 00	 npad	 5
$LL10@traversewe:
; Line 368
  00040	41 83 78 08 00	 cmp	 DWORD PTR [r8+8], 0
  00045	75 1b		 jne	 SHORT $LN7@traversewe
; Line 369
  00047	41 f6 40 18 40	 test	 BYTE PTR [r8+24], 64	; 00000040H
  0004c	74 61		 je	 SHORT $LN9@traversewe
  0004e	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  00052	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  00056	74 57		 je	 SHORT $LN9@traversewe
  00058	41 c7 40 18 0a
	00 00 00	 mov	 DWORD PTR [r8+24], 10
; Line 370
  00060	eb 4d		 jmp	 SHORT $LN9@traversewe
$LN7@traversewe:
; Line 372
  00062	41 f6 40 18 40	 test	 BYTE PTR [r8+24], 64	; 00000040H
  00067	74 12		 je	 SHORT $LN5@traversewe
  00069	49 8b 50 10	 mov	 rdx, QWORD PTR [r8+16]
  0006d	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00071	74 08		 je	 SHORT $LN5@traversewe
  00073	49 8b ca	 mov	 rcx, r10
  00076	e8 00 00 00 00	 call	 reallymarkobject
$LN5@traversewe:
; Line 373
  0007b	45 85 c9	 test	 r9d, r9d
  0007e	75 2f		 jne	 SHORT $LN9@traversewe
  00080	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00084	a8 40		 test	 al, 64			; 00000040H
  00086	74 27		 je	 SHORT $LN9@traversewe
  00088	24 0f		 and	 al, 15
  0008a	3c 04		 cmp	 al, 4
  0008c	75 13		 jne	 SHORT $LN18@traversewe
  0008e	49 8b 10	 mov	 rdx, QWORD PTR [r8]
  00091	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00095	74 18		 je	 SHORT $LN9@traversewe
  00097	49 8b ca	 mov	 rcx, r10
  0009a	e8 00 00 00 00	 call	 reallymarkobject
  0009f	eb 0e		 jmp	 SHORT $LN9@traversewe
$LN18@traversewe:
  000a1	49 8b 00	 mov	 rax, QWORD PTR [r8]
  000a4	0f b6 48 09	 movzx	 ecx, BYTE PTR [rax+9]
  000a8	83 e1 03	 and	 ecx, 3
  000ab	44 0f 45 cf	 cmovne	 r9d, edi
$LN9@traversewe:
; Line 366
  000af	49 83 c0 20	 add	 r8, 32			; 00000020H
  000b3	4d 3b c3	 cmp	 r8, r11
  000b6	72 88		 jb	 SHORT $LL10@traversewe
$LN8@traversewe:
; Line 377
  000b8	41 80 7a 55 00	 cmp	 BYTE PTR [r10+85], 0
  000bd	75 17		 jne	 SHORT $LN3@traversewe
; Line 378
  000bf	49 8b 42 78	 mov	 rax, QWORD PTR [r10+120]
  000c3	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  000c7	49 89 5a 78	 mov	 QWORD PTR [r10+120], rbx
; Line 381
  000cb	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000d0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d4	5f		 pop	 rdi
  000d5	c3		 ret	 0
$LN3@traversewe:
; Line 379
  000d6	45 85 c9	 test	 r9d, r9d
  000d9	74 12		 je	 SHORT $LN1@traversewe
; Line 380
  000db	49 8b 82 80 00
	00 00		 mov	 rax, QWORD PTR [r10+128]
  000e2	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  000e6	49 89 9a 80 00
	00 00		 mov	 QWORD PTR [r10+128], rbx
$LN1@traversewe:
; Line 381
  000ed	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000f2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f6	5f		 pop	 rdi
  000f7	c3		 ret	 0
traverseweakvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT restartcollection
_TEXT	SEGMENT
g$ = 48
restartcollection PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 337
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 340
  00006	48 8b 91 c8 00
	00 00		 mov	 rdx, QWORD PTR [rcx+200]
  0000d	33 c0		 xor	 eax, eax
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax
  00016	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax
  0001a	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax
  00021	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
  00028	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax
  0002f	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00033	74 05		 je	 SHORT $LN2@restartcol
  00035	e8 00 00 00 00	 call	 reallymarkobject
$LN2@restartcol:
; Line 341
  0003a	f6 43 48 40	 test	 BYTE PTR [rbx+72], 64	; 00000040H
  0003e	74 12		 je	 SHORT $LN1@restartcol
  00040	48 8b 53 40	 mov	 rdx, QWORD PTR [rbx+64]
  00044	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00048	74 08		 je	 SHORT $LN1@restartcol
  0004a	48 8b cb	 mov	 rcx, rbx
  0004d	e8 00 00 00 00	 call	 reallymarkobject
$LN1@restartcol:
; Line 342
  00052	48 8b cb	 mov	 rcx, rbx
  00055	e8 00 00 00 00	 call	 markmt
; Line 343
  0005a	48 8b cb	 mov	 rcx, rbx
; Line 344
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5b		 pop	 rbx
; Line 343
  00062	e9 00 00 00 00	 jmp	 markbeingfnz
restartcollection ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT remarkupvals
_TEXT	SEGMENT
g$ = 48
remarkupvals PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 312
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 314
  00004	4c 8d 99 a8 00
	00 00		 lea	 r11, QWORD PTR [rcx+168]
  0000b	4c 8b d1	 mov	 r10, rcx
; Line 315
  0000e	49 8b 13	 mov	 rdx, QWORD PTR [r11]
  00011	48 85 d2	 test	 rdx, rdx
  00014	0f 84 6c 01 00
	00		 je	 $LN8@remarkupva
  0001a	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0001f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00024	33 ff		 xor	 edi, edi
  00026	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:__ImageBase
  0002d	0f 1f 00	 npad	 3
$LL9@remarkupva:
; Line 317
  00030	f6 42 09 07	 test	 BYTE PTR [rdx+9], 7
  00034	75 0f		 jne	 SHORT $LN7@remarkupva
  00036	48 39 7a 40	 cmp	 QWORD PTR [rdx+64], rdi
  0003a	74 09		 je	 SHORT $LN7@remarkupva
; Line 318
  0003c	4c 8d 5a 50	 lea	 r11, QWORD PTR [rdx+80]
; Line 319
  00040	e9 2b 01 00 00	 jmp	 $LN3@remarkupva
$LN7@remarkupva:
; Line 321
  00045	48 8b 42 50	 mov	 rax, QWORD PTR [rdx+80]
  00049	49 89 03	 mov	 QWORD PTR [r11], rax
; Line 323
  0004c	4c 8b 4a 40	 mov	 r9, QWORD PTR [rdx+64]
  00050	48 89 52 50	 mov	 QWORD PTR [rdx+80], rdx
  00054	4d 85 c9	 test	 r9, r9
  00057	0f 84 13 01 00
	00		 je	 $LN3@remarkupva
  0005d	0f 1f 00	 npad	 3
$LL5@remarkupva:
; Line 324
  00060	41 39 79 18	 cmp	 DWORD PTR [r9+24], edi
  00064	0f 84 f9 00 00
	00		 je	 $LN4@remarkupva
; Line 325
  0006a	4d 8b 01	 mov	 r8, QWORD PTR [r9]
  0006d	41 f6 40 08 40	 test	 BYTE PTR [r8+8], 64	; 00000040H
  00072	0f 84 e7 00 00
	00		 je	 $LN12@remarkupva
  00078	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  0007b	41 f6 40 09 03	 test	 BYTE PTR [r8+9], 3
  00080	0f 84 d9 00 00
	00		 je	 $LN12@remarkupva
  00086	41 0f b6 40 08	 movzx	 eax, BYTE PTR [r8+8]
  0008b	41 80 60 09 fc	 and	 BYTE PTR [r8+9], 252	; 000000fcH
  00090	83 e8 04	 sub	 eax, 4
  00093	83 f8 22	 cmp	 eax, 34			; 00000022H
  00096	0f 87 c3 00 00
	00		 ja	 $LN12@remarkupva
  0009c	0f 1f 40 00	 npad	 4
$reentry$43:
  000a0	48 98		 cdqe
  000a2	0f b6 84 03 00
	00 00 00	 movzx	 eax, BYTE PTR $LN39@remarkupva[rbx+rax]
  000aa	8b 8c 83 00 00
	00 00		 mov	 ecx, DWORD PTR $LN40@remarkupva[rbx+rax*4]
  000b1	48 03 cb	 add	 rcx, rbx
  000b4	ff e1		 jmp	 rcx
$LN21@remarkupva:
  000b6	49 8b 50 10	 mov	 rdx, QWORD PTR [r8+16]
  000ba	48 85 d2	 test	 rdx, rdx
  000bd	74 0e		 je	 SHORT $LN19@remarkupva
  000bf	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  000c3	74 08		 je	 SHORT $LN19@remarkupva
  000c5	49 8b ca	 mov	 rcx, r10
  000c8	e8 00 00 00 00	 call	 reallymarkobject
$LN19@remarkupva:
  000cd	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  000d2	49 8b 40 18	 mov	 rax, QWORD PTR [r8+24]
  000d6	48 83 c0 28	 add	 rax, 40			; 00000028H
  000da	49 01 42 20	 add	 QWORD PTR [r10+32], rax
  000de	41 0f b6 40 0a	 movzx	 eax, BYTE PTR [r8+10]
  000e3	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  000e7	a8 40		 test	 al, 64			; 00000040H
  000e9	74 74		 je	 SHORT $LN12@remarkupva
  000eb	0f b6 41 09	 movzx	 eax, BYTE PTR [rcx+9]
  000ef	a8 03		 test	 al, 3
  000f1	74 6c		 je	 SHORT $LN12@remarkupva
  000f3	24 fc		 and	 al, 252			; 000000fcH
  000f5	4c 8b c1	 mov	 r8, rcx
  000f8	88 41 09	 mov	 BYTE PTR [rcx+9], al
  000fb	0f b6 41 08	 movzx	 eax, BYTE PTR [rcx+8]
  000ff	83 e8 04	 sub	 eax, 4
  00102	83 f8 22	 cmp	 eax, 34			; 00000022H
  00105	76 99		 jbe	 SHORT $reentry$43
; Line 323
  00107	eb 56		 jmp	 SHORT $LN12@remarkupva
; Line 325
$LN23@remarkupva:
  00109	41 0f b6 40 0b	 movzx	 eax, BYTE PTR [r8+11]
  0010e	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  00113	ff c0		 inc	 eax
  00115	48 63 c8	 movsxd	 rcx, eax
  00118	48 83 c1 18	 add	 rcx, 24
  0011c	49 01 4a 20	 add	 QWORD PTR [r10+32], rcx
  00120	eb 3d		 jmp	 SHORT $LN12@remarkupva
$LN22@remarkupva:
  00122	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  00126	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  0012b	48 83 c0 19	 add	 rax, 25
  0012f	49 01 42 20	 add	 QWORD PTR [r10+32], rax
  00133	eb 2a		 jmp	 SHORT $LN12@remarkupva
$LN17@remarkupva:
  00135	49 8b 42 70	 mov	 rax, QWORD PTR [r10+112]
  00139	49 89 40 10	 mov	 QWORD PTR [r8+16], rax
  0013d	eb 1c		 jmp	 SHORT $LN41@remarkupva
$LN15@remarkupva:
  0013f	49 8b 42 70	 mov	 rax, QWORD PTR [r10+112]
  00143	49 89 40 30	 mov	 QWORD PTR [r8+48], rax
  00147	eb 12		 jmp	 SHORT $LN41@remarkupva
$LN14@remarkupva:
  00149	49 8b 42 70	 mov	 rax, QWORD PTR [r10+112]
  0014d	49 89 40 48	 mov	 QWORD PTR [r8+72], rax
  00151	eb 08		 jmp	 SHORT $LN41@remarkupva
$LN13@remarkupva:
  00153	49 8b 42 70	 mov	 rax, QWORD PTR [r10+112]
  00157	49 89 40 70	 mov	 QWORD PTR [r8+112], rax
$LN41@remarkupva:
  0015b	4d 89 42 70	 mov	 QWORD PTR [r10+112], r8
$LN12@remarkupva:
; Line 326
  0015f	41 89 79 18	 mov	 DWORD PTR [r9+24], edi
$LN4@remarkupva:
; Line 323
  00163	4d 8b 49 10	 mov	 r9, QWORD PTR [r9+16]
  00167	4d 85 c9	 test	 r9, r9
  0016a	0f 85 f0 fe ff
	ff		 jne	 $LL5@remarkupva
$LN3@remarkupva:
; Line 315
  00170	49 8b 13	 mov	 rdx, QWORD PTR [r11]
  00173	48 85 d2	 test	 rdx, rdx
  00176	0f 85 b4 fe ff
	ff		 jne	 $LL9@remarkupva
  0017c	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]
  00181	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN8@remarkupva:
; Line 331
  00186	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0018a	c3		 ret	 0
  0018b	90		 npad	 1
$LN40@remarkupva:
  0018c	00 00 00 00	 DD	 $LN23@remarkupva
  00190	00 00 00 00	 DD	 $LN15@remarkupva
  00194	00 00 00 00	 DD	 $LN17@remarkupva
  00198	00 00 00 00	 DD	 $LN21@remarkupva
  0019c	00 00 00 00	 DD	 $LN14@remarkupva
  001a0	00 00 00 00	 DD	 $LN13@remarkupva
  001a4	00 00 00 00	 DD	 $LN22@remarkupva
  001a8	00 00 00 00	 DD	 $LN12@remarkupva
$LN39@remarkupva:
  001ac	00		 DB	 0
  001ad	01		 DB	 1
  001ae	02		 DB	 2
  001af	03		 DB	 3
  001b0	04		 DB	 4
  001b1	05		 DB	 5
  001b2	07		 DB	 7
  001b3	07		 DB	 7
  001b4	07		 DB	 7
  001b5	07		 DB	 7
  001b6	07		 DB	 7
  001b7	07		 DB	 7
  001b8	07		 DB	 7
  001b9	07		 DB	 7
  001ba	07		 DB	 7
  001bb	07		 DB	 7
  001bc	06		 DB	 6
  001bd	07		 DB	 7
  001be	07		 DB	 7
  001bf	07		 DB	 7
  001c0	07		 DB	 7
  001c1	07		 DB	 7
  001c2	07		 DB	 7
  001c3	07		 DB	 7
  001c4	07		 DB	 7
  001c5	07		 DB	 7
  001c6	07		 DB	 7
  001c7	07		 DB	 7
  001c8	07		 DB	 7
  001c9	07		 DB	 7
  001ca	07		 DB	 7
  001cb	07		 DB	 7
  001cc	07		 DB	 7
  001cd	07		 DB	 7
  001ce	02		 DB	 2
remarkupvals ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT markbeingfnz
_TEXT	SEGMENT
g$ = 48
markbeingfnz PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 299
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 301
  00004	4c 8b 89 98 00
	00 00		 mov	 r9, QWORD PTR [rcx+152]
  0000b	4c 8b d1	 mov	 r10, rcx
  0000e	4d 85 c9	 test	 r9, r9
  00011	0f 84 06 01 00
	00		 je	 $LN2@markbeingf
  00017	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:__ImageBase
  0001e	66 90		 npad	 2
$LL4@markbeingf:
; Line 302
  00020	41 0f b6 41 09	 movzx	 eax, BYTE PTR [r9+9]
  00025	a8 03		 test	 al, 3
  00027	0f 84 e4 00 00
	00		 je	 $LN3@markbeingf
  0002d	24 fc		 and	 al, 252			; 000000fcH
  0002f	4d 8b c1	 mov	 r8, r9
  00032	41 88 41 09	 mov	 BYTE PTR [r9+9], al
  00036	41 0f b6 41 08	 movzx	 eax, BYTE PTR [r9+8]
  0003b	83 e8 04	 sub	 eax, 4
  0003e	83 f8 22	 cmp	 eax, 34			; 00000022H
  00041	0f 87 ca 00 00
	00		 ja	 $LN3@markbeingf
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$reentry$35:
  00050	48 98		 cdqe
  00052	41 0f b6 84 03
	00 00 00 00	 movzx	 eax, BYTE PTR $LN31@markbeingf[r11+rax]
  0005b	41 8b 8c 83 00
	00 00 00	 mov	 ecx, DWORD PTR $LN32@markbeingf[r11+rax*4]
  00063	49 03 cb	 add	 rcx, r11
  00066	ff e1		 jmp	 rcx
$LN16@markbeingf:
  00068	49 8b 50 10	 mov	 rdx, QWORD PTR [r8+16]
  0006c	48 85 d2	 test	 rdx, rdx
  0006f	74 0e		 je	 SHORT $LN14@markbeingf
  00071	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00075	74 08		 je	 SHORT $LN14@markbeingf
  00077	49 8b ca	 mov	 rcx, r10
  0007a	e8 00 00 00 00	 call	 reallymarkobject
$LN14@markbeingf:
  0007f	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  00084	49 8b 40 18	 mov	 rax, QWORD PTR [r8+24]
  00088	48 83 c0 28	 add	 rax, 40			; 00000028H
  0008c	49 01 42 20	 add	 QWORD PTR [r10+32], rax
  00090	41 0f b6 40 0a	 movzx	 eax, BYTE PTR [r8+10]
  00095	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00099	a8 40		 test	 al, 64			; 00000040H
  0009b	74 74		 je	 SHORT $LN3@markbeingf
  0009d	0f b6 41 09	 movzx	 eax, BYTE PTR [rcx+9]
  000a1	a8 03		 test	 al, 3
  000a3	74 6c		 je	 SHORT $LN3@markbeingf
  000a5	24 fc		 and	 al, 252			; 000000fcH
  000a7	4c 8b c1	 mov	 r8, rcx
  000aa	88 41 09	 mov	 BYTE PTR [rcx+9], al
  000ad	0f b6 41 08	 movzx	 eax, BYTE PTR [rcx+8]
  000b1	83 e8 04	 sub	 eax, 4
  000b4	83 f8 22	 cmp	 eax, 34			; 00000022H
  000b7	76 97		 jbe	 SHORT $reentry$35
; Line 301
  000b9	eb 56		 jmp	 SHORT $LN3@markbeingf
; Line 302
$LN18@markbeingf:
  000bb	41 0f b6 40 0b	 movzx	 eax, BYTE PTR [r8+11]
  000c0	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  000c5	ff c0		 inc	 eax
  000c7	48 63 c8	 movsxd	 rcx, eax
  000ca	48 83 c1 18	 add	 rcx, 24
  000ce	49 01 4a 20	 add	 QWORD PTR [r10+32], rcx
  000d2	eb 3d		 jmp	 SHORT $LN3@markbeingf
$LN17@markbeingf:
  000d4	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  000d8	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  000dd	48 83 c0 19	 add	 rax, 25
  000e1	49 01 42 20	 add	 QWORD PTR [r10+32], rax
  000e5	eb 2a		 jmp	 SHORT $LN3@markbeingf
$LN12@markbeingf:
  000e7	49 8b 42 70	 mov	 rax, QWORD PTR [r10+112]
  000eb	49 89 40 10	 mov	 QWORD PTR [r8+16], rax
  000ef	eb 1c		 jmp	 SHORT $LN33@markbeingf
$LN10@markbeingf:
  000f1	49 8b 42 70	 mov	 rax, QWORD PTR [r10+112]
  000f5	49 89 40 30	 mov	 QWORD PTR [r8+48], rax
  000f9	eb 12		 jmp	 SHORT $LN33@markbeingf
$LN9@markbeingf:
  000fb	49 8b 42 70	 mov	 rax, QWORD PTR [r10+112]
  000ff	49 89 40 48	 mov	 QWORD PTR [r8+72], rax
  00103	eb 08		 jmp	 SHORT $LN33@markbeingf
$LN8@markbeingf:
  00105	49 8b 42 70	 mov	 rax, QWORD PTR [r10+112]
  00109	49 89 40 70	 mov	 QWORD PTR [r8+112], rax
$LN33@markbeingf:
  0010d	4d 89 42 70	 mov	 QWORD PTR [r10+112], r8
$LN3@markbeingf:
; Line 301
  00111	4d 8b 09	 mov	 r9, QWORD PTR [r9]
  00114	4d 85 c9	 test	 r9, r9
  00117	0f 85 03 ff ff
	ff		 jne	 $LL4@markbeingf
$LN2@markbeingf:
; Line 303
  0011d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00121	c3		 ret	 0
  00122	66 90		 npad	 2
$LN32@markbeingf:
  00124	00 00 00 00	 DD	 $LN18@markbeingf
  00128	00 00 00 00	 DD	 $LN10@markbeingf
  0012c	00 00 00 00	 DD	 $LN12@markbeingf
  00130	00 00 00 00	 DD	 $LN16@markbeingf
  00134	00 00 00 00	 DD	 $LN9@markbeingf
  00138	00 00 00 00	 DD	 $LN8@markbeingf
  0013c	00 00 00 00	 DD	 $LN17@markbeingf
  00140	00 00 00 00	 DD	 $LN3@markbeingf
$LN31@markbeingf:
  00144	00		 DB	 0
  00145	01		 DB	 1
  00146	02		 DB	 2
  00147	03		 DB	 3
  00148	04		 DB	 4
  00149	05		 DB	 5
  0014a	07		 DB	 7
  0014b	07		 DB	 7
  0014c	07		 DB	 7
  0014d	07		 DB	 7
  0014e	07		 DB	 7
  0014f	07		 DB	 7
  00150	07		 DB	 7
  00151	07		 DB	 7
  00152	07		 DB	 7
  00153	07		 DB	 7
  00154	06		 DB	 6
  00155	07		 DB	 7
  00156	07		 DB	 7
  00157	07		 DB	 7
  00158	07		 DB	 7
  00159	07		 DB	 7
  0015a	07		 DB	 7
  0015b	07		 DB	 7
  0015c	07		 DB	 7
  0015d	07		 DB	 7
  0015e	07		 DB	 7
  0015f	07		 DB	 7
  00160	07		 DB	 7
  00161	07		 DB	 7
  00162	07		 DB	 7
  00163	07		 DB	 7
  00164	07		 DB	 7
  00165	07		 DB	 7
  00166	02		 DB	 2
markbeingfnz ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT markmt
_TEXT	SEGMENT
g$ = 48
markmt	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 289
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	4c 8b c9	 mov	 r9, rcx
; Line 291
  00009	4c 8d 91 a0 01
	00 00		 lea	 r10, QWORD PTR [rcx+416]
  00010	41 bb 09 00 00
	00		 mov	 r11d, 9
  00016	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:__ImageBase
  0001d	0f 1f 00	 npad	 3
$LL5@markmt:
; Line 292
  00020	4d 8b 02	 mov	 r8, QWORD PTR [r10]
  00023	4d 85 c0	 test	 r8, r8
  00026	0f 84 e3 00 00
	00		 je	 $LN4@markmt
  0002c	41 f6 40 09 03	 test	 BYTE PTR [r8+9], 3
  00031	0f 84 d8 00 00
	00		 je	 $LN4@markmt
  00037	41 0f b6 40 08	 movzx	 eax, BYTE PTR [r8+8]
  0003c	41 80 60 09 fc	 and	 BYTE PTR [r8+9], 252	; 000000fcH
  00041	83 e8 04	 sub	 eax, 4
  00044	83 f8 22	 cmp	 eax, 34			; 00000022H
  00047	0f 87 c2 00 00
	00		 ja	 $LN4@markmt
  0004d	0f 1f 00	 npad	 3
$reentry$36:
  00050	48 98		 cdqe
  00052	0f b6 84 03 00
	00 00 00	 movzx	 eax, BYTE PTR $LN32@markmt[rbx+rax]
  0005a	8b 8c 83 00 00
	00 00		 mov	 ecx, DWORD PTR $LN33@markmt[rbx+rax*4]
  00061	48 03 cb	 add	 rcx, rbx
  00064	ff e1		 jmp	 rcx
$LN17@markmt:
  00066	49 8b 50 10	 mov	 rdx, QWORD PTR [r8+16]
  0006a	48 85 d2	 test	 rdx, rdx
  0006d	74 0e		 je	 SHORT $LN15@markmt
  0006f	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00073	74 08		 je	 SHORT $LN15@markmt
  00075	49 8b c9	 mov	 rcx, r9
  00078	e8 00 00 00 00	 call	 reallymarkobject
$LN15@markmt:
  0007d	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  00082	49 8b 40 18	 mov	 rax, QWORD PTR [r8+24]
  00086	48 83 c0 28	 add	 rax, 40			; 00000028H
  0008a	49 01 41 20	 add	 QWORD PTR [r9+32], rax
  0008e	41 0f b6 40 0a	 movzx	 eax, BYTE PTR [r8+10]
  00093	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00097	a8 40		 test	 al, 64			; 00000040H
  00099	74 74		 je	 SHORT $LN4@markmt
  0009b	0f b6 41 09	 movzx	 eax, BYTE PTR [rcx+9]
  0009f	a8 03		 test	 al, 3
  000a1	74 6c		 je	 SHORT $LN4@markmt
  000a3	24 fc		 and	 al, 252			; 000000fcH
  000a5	4c 8b c1	 mov	 r8, rcx
  000a8	88 41 09	 mov	 BYTE PTR [rcx+9], al
  000ab	0f b6 41 08	 movzx	 eax, BYTE PTR [rcx+8]
  000af	83 e8 04	 sub	 eax, 4
  000b2	83 f8 22	 cmp	 eax, 34			; 00000022H
  000b5	76 99		 jbe	 SHORT $reentry$36
; Line 291
  000b7	eb 56		 jmp	 SHORT $LN4@markmt
; Line 292
$LN19@markmt:
  000b9	41 0f b6 40 0b	 movzx	 eax, BYTE PTR [r8+11]
  000be	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  000c3	ff c0		 inc	 eax
  000c5	48 63 c8	 movsxd	 rcx, eax
  000c8	48 83 c1 18	 add	 rcx, 24
  000cc	49 01 49 20	 add	 QWORD PTR [r9+32], rcx
  000d0	eb 3d		 jmp	 SHORT $LN4@markmt
$LN18@markmt:
  000d2	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  000d6	41 80 48 09 04	 or	 BYTE PTR [r8+9], 4
  000db	48 83 c0 19	 add	 rax, 25
  000df	49 01 41 20	 add	 QWORD PTR [r9+32], rax
  000e3	eb 2a		 jmp	 SHORT $LN4@markmt
$LN13@markmt:
  000e5	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  000e9	49 89 40 10	 mov	 QWORD PTR [r8+16], rax
  000ed	eb 1c		 jmp	 SHORT $LN34@markmt
$LN11@markmt:
  000ef	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  000f3	49 89 40 30	 mov	 QWORD PTR [r8+48], rax
  000f7	eb 12		 jmp	 SHORT $LN34@markmt
$LN10@markmt:
  000f9	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  000fd	49 89 40 48	 mov	 QWORD PTR [r8+72], rax
  00101	eb 08		 jmp	 SHORT $LN34@markmt
$LN9@markmt:
  00103	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  00107	49 89 40 70	 mov	 QWORD PTR [r8+112], rax
$LN34@markmt:
  0010b	4d 89 41 70	 mov	 QWORD PTR [r9+112], r8
$LN4@markmt:
; Line 291
  0010f	49 83 c2 08	 add	 r10, 8
  00113	49 ff cb	 dec	 r11
  00116	0f 85 04 ff ff
	ff		 jne	 $LL5@markmt
; Line 293
  0011c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00120	5b		 pop	 rbx
  00121	c3		 ret	 0
  00122	66 90		 npad	 2
$LN33@markmt:
  00124	00 00 00 00	 DD	 $LN19@markmt
  00128	00 00 00 00	 DD	 $LN11@markmt
  0012c	00 00 00 00	 DD	 $LN13@markmt
  00130	00 00 00 00	 DD	 $LN17@markmt
  00134	00 00 00 00	 DD	 $LN10@markmt
  00138	00 00 00 00	 DD	 $LN9@markmt
  0013c	00 00 00 00	 DD	 $LN18@markmt
  00140	00 00 00 00	 DD	 $LN4@markmt
$LN32@markmt:
  00144	00		 DB	 0
  00145	01		 DB	 1
  00146	02		 DB	 2
  00147	03		 DB	 3
  00148	04		 DB	 4
  00149	05		 DB	 5
  0014a	07		 DB	 7
  0014b	07		 DB	 7
  0014c	07		 DB	 7
  0014d	07		 DB	 7
  0014e	07		 DB	 7
  0014f	07		 DB	 7
  00150	07		 DB	 7
  00151	07		 DB	 7
  00152	07		 DB	 7
  00153	07		 DB	 7
  00154	06		 DB	 6
  00155	07		 DB	 7
  00156	07		 DB	 7
  00157	07		 DB	 7
  00158	07		 DB	 7
  00159	07		 DB	 7
  0015a	07		 DB	 7
  0015b	07		 DB	 7
  0015c	07		 DB	 7
  0015d	07		 DB	 7
  0015e	07		 DB	 7
  0015f	07		 DB	 7
  00160	07		 DB	 7
  00161	07		 DB	 7
  00162	07		 DB	 7
  00163	07		 DB	 7
  00164	07		 DB	 7
  00165	07		 DB	 7
  00166	02		 DB	 2
markmt	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT iscleared
_TEXT	SEGMENT
g$ = 48
o$ = 56
iscleared PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 139
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 140
  00004	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  00007	a8 40		 test	 al, 64			; 00000040H
  00009	74 14		 je	 SHORT $LN2@iscleared
; Line 141
  0000b	24 0f		 and	 al, 15
  0000d	3c 04		 cmp	 al, 4
  0000f	75 15		 jne	 SHORT $LN3@iscleared
; Line 142
  00011	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00014	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00018	74 05		 je	 SHORT $LN2@iscleared
  0001a	e8 00 00 00 00	 call	 reallymarkobject
$LN2@iscleared:
; Line 143
  0001f	33 c0		 xor	 eax, eax
; Line 146
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
$LN3@iscleared:
; Line 145
  00026	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00029	0f b6 40 09	 movzx	 eax, BYTE PTR [rax+9]
  0002d	83 e0 03	 and	 eax, 3
; Line 146
  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
iscleared ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT removeentry
_TEXT	SEGMENT
n$ = 8
removeentry PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 127
  00000	f6 41 18 40	 test	 BYTE PTR [rcx+24], 64	; 00000040H
  00004	74 11		 je	 SHORT $LN1@removeentr
  00006	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0000a	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  0000e	74 07		 je	 SHORT $LN1@removeentr
; Line 128
  00010	c7 41 18 0a 00
	00 00		 mov	 DWORD PTR [rcx+24], 10
$LN1@removeentr:
; Line 129
  00017	c3		 ret	 0
removeentry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT reallymarkobject
_TEXT	SEGMENT
g$ = 48
o$ = 56
reallymarkobject PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 235
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 238
  0000a	0f b6 42 08	 movzx	 eax, BYTE PTR [rdx+8]
  0000e	80 62 09 fc	 and	 BYTE PTR [rdx+9], 252	; 000000fcH
  00012	48 8b da	 mov	 rbx, rdx
  00015	83 e8 04	 sub	 eax, 4
  00018	48 8b f9	 mov	 rdi, rcx
  0001b	83 f8 22	 cmp	 eax, 34			; 00000022H
  0001e	0f 87 fd 00 00
	00		 ja	 $LN1@reallymark
  00024	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00029	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:__ImageBase
$reentry$26:
  00030	48 98		 cdqe
  00032	0f b6 84 06 00
	00 00 00	 movzx	 eax, BYTE PTR $LN21@reallymark[rsi+rax]
  0003a	8b 8c 86 00 00
	00 00		 mov	 ecx, DWORD PTR $LN22@reallymark[rsi+rax*4]
  00041	48 03 ce	 add	 rcx, rsi
  00044	ff e1		 jmp	 rcx
$LN10@reallymark:
; Line 251
  00046	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  0004a	48 85 d2	 test	 rdx, rdx
  0004d	74 0e		 je	 SHORT $LN8@reallymark
  0004f	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00053	74 08		 je	 SHORT $LN8@reallymark
  00055	48 8b cf	 mov	 rcx, rdi
  00058	e8 00 00 00 00	 call	 reallymarkobject
$LN8@reallymark:
; Line 252
  0005d	80 4b 09 04	 or	 BYTE PTR [rbx+9], 4
; Line 253
  00061	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00065	48 83 c0 28	 add	 rax, 40			; 00000028H
  00069	48 01 47 20	 add	 QWORD PTR [rdi+32], rax
; Line 254
  0006d	0f b6 43 0a	 movzx	 eax, BYTE PTR [rbx+10]
  00071	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
; Line 255
  00075	a8 40		 test	 al, 64			; 00000040H
  00077	0f 84 9f 00 00
	00		 je	 $LN23@reallymark
  0007d	0f b6 41 09	 movzx	 eax, BYTE PTR [rcx+9]
  00081	a8 03		 test	 al, 3
  00083	0f 84 93 00 00
	00		 je	 $LN23@reallymark
; Line 256
  00089	24 fc		 and	 al, 252			; 000000fcH
  0008b	48 8b d9	 mov	 rbx, rcx
  0008e	88 41 09	 mov	 BYTE PTR [rcx+9], al
  00091	0f b6 41 08	 movzx	 eax, BYTE PTR [rcx+8]
  00095	83 e8 04	 sub	 eax, 4
  00098	83 f8 22	 cmp	 eax, 34			; 00000022H
  0009b	76 93		 jbe	 SHORT $reentry$26
  0009d	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
; Line 283
  000a2	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000a7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ab	5f		 pop	 rdi
  000ac	c3		 ret	 0
$LN12@reallymark:
; Line 241
  000ad	0f b6 43 0b	 movzx	 eax, BYTE PTR [rbx+11]
  000b1	80 4b 09 04	 or	 BYTE PTR [rbx+9], 4
  000b5	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000ba	ff c0		 inc	 eax
  000bc	48 63 c8	 movsxd	 rcx, eax
  000bf	48 83 c1 18	 add	 rcx, 24
  000c3	48 01 4f 20	 add	 QWORD PTR [rdi+32], rcx
; Line 283
  000c7	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000cc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d0	5f		 pop	 rdi
  000d1	c3		 ret	 0
$LN11@reallymark:
; Line 246
  000d2	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000d6	80 4b 09 04	 or	 BYTE PTR [rbx+9], 4
  000da	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000df	48 83 c0 19	 add	 rax, 25
  000e3	48 01 47 20	 add	 QWORD PTR [rdi+32], rax
; Line 283
  000e7	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000ec	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f0	5f		 pop	 rdi
  000f1	c3		 ret	 0
$LN6@reallymark:
; Line 262
  000f2	48 8b 47 70	 mov	 rax, QWORD PTR [rdi+112]
  000f6	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
; Line 263
  000fa	eb 1c		 jmp	 SHORT $LN24@reallymark
$LN4@reallymark:
; Line 270
  000fc	48 8b 47 70	 mov	 rax, QWORD PTR [rdi+112]
  00100	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
; Line 271
  00104	eb 12		 jmp	 SHORT $LN24@reallymark
$LN3@reallymark:
; Line 274
  00106	48 8b 47 70	 mov	 rax, QWORD PTR [rdi+112]
  0010a	48 89 43 48	 mov	 QWORD PTR [rbx+72], rax
; Line 275
  0010e	eb 08		 jmp	 SHORT $LN24@reallymark
$LN2@reallymark:
; Line 278
  00110	48 8b 47 70	 mov	 rax, QWORD PTR [rdi+112]
  00114	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
$LN24@reallymark:
  00118	48 89 5f 70	 mov	 QWORD PTR [rdi+112], rbx
$LN23@reallymark:
  0011c	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
$LN1@reallymark:
; Line 283
  00121	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00126	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0012a	5f		 pop	 rdi
  0012b	c3		 ret	 0
$LN22@reallymark:
  0012c	00 00 00 00	 DD	 $LN12@reallymark
  00130	00 00 00 00	 DD	 $LN4@reallymark
  00134	00 00 00 00	 DD	 $LN6@reallymark
  00138	00 00 00 00	 DD	 $LN10@reallymark
  0013c	00 00 00 00	 DD	 $LN3@reallymark
  00140	00 00 00 00	 DD	 $LN2@reallymark
  00144	00 00 00 00	 DD	 $LN11@reallymark
  00148	00 00 00 00	 DD	 $LN23@reallymark
$LN21@reallymark:
  0014c	00		 DB	 0
  0014d	01		 DB	 1
  0014e	02		 DB	 2
  0014f	03		 DB	 3
  00150	04		 DB	 4
  00151	05		 DB	 5
  00152	07		 DB	 7
  00153	07		 DB	 7
  00154	07		 DB	 7
  00155	07		 DB	 7
  00156	07		 DB	 7
  00157	07		 DB	 7
  00158	07		 DB	 7
  00159	07		 DB	 7
  0015a	07		 DB	 7
  0015b	07		 DB	 7
  0015c	06		 DB	 6
  0015d	07		 DB	 7
  0015e	07		 DB	 7
  0015f	07		 DB	 7
  00160	07		 DB	 7
  00161	07		 DB	 7
  00162	07		 DB	 7
  00163	07		 DB	 7
  00164	07		 DB	 7
  00165	07		 DB	 7
  00166	07		 DB	 7
  00167	07		 DB	 7
  00168	07		 DB	 7
  00169	07		 DB	 7
  0016a	07		 DB	 7
  0016b	07		 DB	 7
  0016c	07		 DB	 7
  0016d	07		 DB	 7
  0016e	02		 DB	 2
reallymarkobject ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaC_upvdeccount
_TEXT	SEGMENT
L$ = 8
uv$ = 16
luaC_upvdeccount PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 679
  00000	48 ff 4a 08	 dec	 QWORD PTR [rdx+8]
; Line 680
  00004	75 15		 jne	 SHORT $LN1@luaC_upvde
  00006	48 8d 42 10	 lea	 rax, QWORD PTR [rdx+16]
  0000a	48 39 02	 cmp	 QWORD PTR [rdx], rax
  0000d	75 0c		 jne	 SHORT $LN1@luaC_upvde
; Line 681
  0000f	45 33 c9	 xor	 r9d, r9d
  00012	45 8d 41 20	 lea	 r8d, QWORD PTR [r9+32]
  00016	e9 00 00 00 00	 jmp	 luaM_realloc_
$LN1@luaC_upvde:
; Line 682
  0001b	c3		 ret	 0
luaC_upvdeccount ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaC_checkfinalizer
_TEXT	SEGMENT
L$ = 48
o$ = 56
mt$ = 64
luaC_checkfinalizer PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 902
$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 905
  0000f	f6 42 09 08	 test	 BYTE PTR [rdx+9], 8
  00013	48 8b 79 18	 mov	 rdi, QWORD PTR [rcx+24]
  00017	49 8b c0	 mov	 rax, r8
  0001a	48 8b da	 mov	 rbx, rdx
  0001d	48 8b f1	 mov	 rsi, rcx
  00020	0f 85 8e 00 00
	00		 jne	 $LN7@luaC_check
  00026	48 85 c0	 test	 rax, rax
  00029	0f 84 85 00 00
	00		 je	 $LN7@luaC_check
  0002f	41 f6 40 0a 04	 test	 BYTE PTR [r8+10], 4
  00034	0f 85 7a 00 00
	00		 jne	 $LN7@luaC_check
  0003a	4c 8b 87 f0 00
	00 00		 mov	 r8, QWORD PTR [rdi+240]
  00041	ba 02 00 00 00	 mov	 edx, 2
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 luaT_gettm
  0004e	48 85 c0	 test	 rax, rax
  00051	74 61		 je	 SHORT $LN7@luaC_check
  00053	0f b6 47 55	 movzx	 eax, BYTE PTR [rdi+85]
  00057	2c 02		 sub	 al, 2
  00059	3c 03		 cmp	 al, 3
  0005b	77 2a		 ja	 SHORT $LN4@luaC_check
; Line 910
  0005d	0f b6 4f 54	 movzx	 ecx, BYTE PTR [rdi+84]
  00061	0f b6 43 09	 movzx	 eax, BYTE PTR [rbx+9]
  00065	80 e1 03	 and	 cl, 3
  00068	24 f8		 and	 al, 248			; 000000f8H
  0006a	0a c8		 or	 cl, al
  0006c	88 4b 09	 mov	 BYTE PTR [rbx+9], cl
; Line 911
  0006f	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00073	48 3b d3	 cmp	 rdx, rbx
  00076	75 0f		 jne	 SHORT $LN4@luaC_check
; Line 912
  00078	45 33 c0	 xor	 r8d, r8d
  0007b	48 8b ce	 mov	 rcx, rsi
  0007e	e8 00 00 00 00	 call	 sweeptolive
  00083	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
$LN4@luaC_check:
; Line 915
  00087	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0008b	48 8d 4f 58	 lea	 rcx, QWORD PTR [rdi+88]
  0008f	48 3b c3	 cmp	 rax, rbx
  00092	74 0b		 je	 SHORT $LN1@luaC_check
$LL3@luaC_check:
  00094	48 8b c8	 mov	 rcx, rax
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 3b c3	 cmp	 rax, rbx
  0009d	75 f5		 jne	 SHORT $LL3@luaC_check
$LN1@luaC_check:
; Line 916
  0009f	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000a2	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 917
  000a5	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  000a9	48 89 03	 mov	 QWORD PTR [rbx], rax
; Line 918
  000ac	48 89 5f 68	 mov	 QWORD PTR [rdi+104], rbx
; Line 919
  000b0	80 4b 09 08	 or	 BYTE PTR [rbx+9], 8
$LN7@luaC_check:
; Line 921
  000b4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b9	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000be	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c2	5f		 pop	 rdi
  000c3	c3		 ret	 0
luaC_checkfinalizer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaC_upvalbarrier_
_TEXT	SEGMENT
L$ = 8
uv$ = 16
luaC_upvalbarrier_ PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 186
  00000	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
; Line 187
  00004	48 8b 02	 mov	 rax, QWORD PTR [rdx]
; Line 189
  00007	80 79 55 01	 cmp	 BYTE PTR [rcx+85], 1
  0000b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0000e	77 0a		 ja	 SHORT $LN1@luaC_upval
; Line 190
  00010	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00014	0f 85 00 00 00
	00		 jne	 reallymarkobject
$LN1@luaC_upval:
; Line 191
  0001a	c3		 ret	 0
luaC_upvalbarrier_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaC_barrierback_
_TEXT	SEGMENT
L$ = 8
t$ = 16
luaC_barrierback_ PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 172
  00000	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
; Line 174
  00004	80 62 09 fb	 and	 BYTE PTR [rdx+9], 251	; 000000fbH
; Line 175
  00008	49 8b 40 78	 mov	 rax, QWORD PTR [r8+120]
  0000c	48 89 42 30	 mov	 QWORD PTR [rdx+48], rax
  00010	49 89 50 78	 mov	 QWORD PTR [r8+120], rdx
; Line 176
  00014	c3		 ret	 0
luaC_barrierback_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaC_barrier_
_TEXT	SEGMENT
L$ = 8
o$ = 16
v$ = 24
luaC_barrier_ PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 156
  00000	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
; Line 158
  00004	80 78 55 01	 cmp	 BYTE PTR [rax+85], 1
  00008	77 0b		 ja	 SHORT $LN2@luaC_barri
; Line 159
  0000a	49 8b d0	 mov	 rdx, r8
  0000d	48 8b c8	 mov	 rcx, rax
  00010	e9 00 00 00 00	 jmp	 reallymarkobject
$LN2@luaC_barri:
; Line 162
  00015	0f b6 48 54	 movzx	 ecx, BYTE PTR [rax+84]
  00019	0f b6 42 09	 movzx	 eax, BYTE PTR [rdx+9]
  0001d	24 f8		 and	 al, 248			; 000000f8H
  0001f	80 e1 03	 and	 cl, 3
  00022	0a c8		 or	 cl, al
  00024	88 4a 09	 mov	 BYTE PTR [rdx+9], cl
; Line 164
  00027	c3		 ret	 0
luaC_barrier_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaC_newobj
_TEXT	SEGMENT
L$ = 48
tt$ = 56
sz$ = 64
luaC_newobj PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 208
$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 209
  0000a	48 8b 79 18	 mov	 rdi, QWORD PTR [rcx+24]
  0000e	4d 8b c8	 mov	 r9, r8
; Line 210
  00011	44 8b c2	 mov	 r8d, edx
  00014	8b da		 mov	 ebx, edx
  00016	33 d2		 xor	 edx, edx
  00018	41 83 e0 0f	 and	 r8d, 15
  0001c	e8 00 00 00 00	 call	 luaM_realloc_
; Line 211
  00021	0f b6 4f 54	 movzx	 ecx, BYTE PTR [rdi+84]
; Line 212
  00025	88 58 08	 mov	 BYTE PTR [rax+8], bl
; Line 216
  00028	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002d	80 e1 03	 and	 cl, 3
  00030	88 48 09	 mov	 BYTE PTR [rax+9], cl
  00033	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  00037	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003a	48 89 47 58	 mov	 QWORD PTR [rdi+88], rax
  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
luaC_newobj ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaC_fullgc
_TEXT	SEGMENT
L$ = 48
n$1 = 56
isemergency$ = 56
luaC_fullgc PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 1163
$LN12:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1164
  00006	48 8b 79 18	 mov	 rdi, QWORD PTR [rcx+24]
  0000a	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0000f	48 8b f1	 mov	 rsi, rcx
; Line 1166
  00012	85 d2		 test	 edx, edx
  00014	74 04		 je	 SHORT $LN2@luaC_fullg
  00016	c6 47 56 01	 mov	 BYTE PTR [rdi+86], 1
$LN2@luaC_fullg:
; Line 1167
  0001a	80 7f 55 01	 cmp	 BYTE PTR [rdi+85], 1
  0001e	77 2c		 ja	 SHORT $LN5@luaC_fullg
; Line 1168
  00020	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00025	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
  00029	4c 8d 44 24 38	 lea	 r8, QWORD PTR n$1[rsp]
  0002e	48 8d 53 58	 lea	 rdx, QWORD PTR [rbx+88]
  00032	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR n$1[rsp], 0
  0003a	c6 43 55 02	 mov	 BYTE PTR [rbx+85], 2
  0003e	e8 00 00 00 00	 call	 sweeptolive
  00043	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax
  00047	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN5@luaC_fullg:
; Line 1171
  0004c	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00051	48 8b ce	 mov	 rcx, rsi
  00054	e8 00 00 00 00	 call	 luaC_runtilstate
; Line 1172
  00059	ba 7f ff ff ff	 mov	 edx, -129		; ffffffffffffff7fH
  0005e	48 8b ce	 mov	 rcx, rsi
  00061	e8 00 00 00 00	 call	 luaC_runtilstate
; Line 1173
  00066	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0006b	48 8b ce	 mov	 rcx, rsi
  0006e	e8 00 00 00 00	 call	 luaC_runtilstate
; Line 1176
  00073	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00078	48 8b ce	 mov	 rcx, rsi
  0007b	e8 00 00 00 00	 call	 luaC_runtilstate
; Line 1178
  00080	4c 8b 47 28	 mov	 r8, QWORD PTR [rdi+40]
  00084	48 63 8f b4 00
	00 00		 movsxd	 rcx, DWORD PTR [rdi+180]
  0008b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00090	48 b8 15 ae 47
	e1 7a 14 ae 47	 mov	 rax, 5165088340638674453 ; 47ae147ae147ae15H
  0009a	49 b9 ff ff ff
	ff ff ff ff 7f	 mov	 r9, 9223372036854775807	; 7fffffffffffffffH
  000a4	c6 47 56 00	 mov	 BYTE PTR [rdi+86], 0
  000a8	49 f7 e0	 mul	 r8
  000ab	4c 2b c2	 sub	 r8, rdx
  000ae	49 8b c1	 mov	 rax, r9
  000b1	49 d1 e8	 shr	 r8, 1
  000b4	4c 03 c2	 add	 r8, rdx
  000b7	48 99		 cdq
  000b9	49 c1 e8 06	 shr	 r8, 6
  000bd	49 f7 f8	 idiv	 r8
  000c0	48 3b c8	 cmp	 rcx, rax
  000c3	7d 06		 jge	 SHORT $LN9@luaC_fullg
  000c5	49 0f af c8	 imul	 rcx, r8
  000c9	eb 03		 jmp	 SHORT $LN10@luaC_fullg
$LN9@luaC_fullg:
  000cb	49 8b c9	 mov	 rcx, r9
$LN10@luaC_fullg:
  000ce	48 8b 57 18	 mov	 rdx, QWORD PTR [rdi+24]
  000d2	48 03 57 10	 add	 rdx, QWORD PTR [rdi+16]
  000d6	48 2b d1	 sub	 rdx, rcx
  000d9	48 8b cf	 mov	 rcx, rdi
; Line 1179
  000dc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e0	5f		 pop	 rdi
; Line 1178
  000e1	e9 00 00 00 00	 jmp	 luaE_setdebt
luaC_fullgc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaC_runtilstate
_TEXT	SEGMENT
L$ = 80
n$1 = 88
statesmask$ = 88
luaC_runtilstate PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 1108
$LN36:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	41 56		 push	 r14
  00005	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 1109
  00009	4c 8b 71 18	 mov	 r14, QWORD PTR [rcx+24]
  0000d	8b ea		 mov	 ebp, edx
  0000f	48 8b f1	 mov	 rsi, rcx
; Line 1110
  00012	41 0f b6 46 55	 movzx	 eax, BYTE PTR [r14+85]
  00017	0f a3 c2	 bt	 edx, eax
  0001a	0f 82 f1 01 00
	00		 jb	 $LN1@luaC_runti
  00020	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00025	4c 89 64 24 28	 mov	 QWORD PTR [rsp+40], r12
  0002a	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  0002f	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:__ImageBase
  00036	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  0003b	45 33 e4	 xor	 r12d, r12d
  0003e	66 90		 npad	 2
$LL2@luaC_runti:
; Line 1111
  00040	48 8b 5e 18	 mov	 rbx, QWORD PTR [rsi+24]
  00044	0f b6 43 55	 movzx	 eax, BYTE PTR [rbx+85]
  00048	83 f8 07	 cmp	 eax, 7
  0004b	0f 87 9e 01 00
	00		 ja	 $LN6@luaC_runti
  00051	41 8b 8c 87 00
	00 00 00	 mov	 ecx, DWORD PTR $LN34@luaC_runti[r15+rax*4]
  00059	49 03 cf	 add	 rcx, r15
  0005c	ff e1		 jmp	 rcx
$LN16@luaC_runti:
  0005e	48 63 43 3c	 movsxd	 rax, DWORD PTR [rbx+60]
  00062	48 8b 93 c8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+200]
  00069	4c 89 63 78	 mov	 QWORD PTR [rbx+120], r12
  0006d	48 c1 e0 03	 shl	 rax, 3
  00071	4c 89 63 70	 mov	 QWORD PTR [rbx+112], r12
  00075	4c 89 a3 88 00
	00 00		 mov	 QWORD PTR [rbx+136], r12
  0007c	4c 89 a3 90 00
	00 00		 mov	 QWORD PTR [rbx+144], r12
  00083	4c 89 a3 80 00
	00 00		 mov	 QWORD PTR [rbx+128], r12
  0008a	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
  0008e	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  00092	74 08		 je	 SHORT $LN22@luaC_runti
  00094	48 8b cb	 mov	 rcx, rbx
  00097	e8 00 00 00 00	 call	 reallymarkobject
$LN22@luaC_runti:
  0009c	f6 43 48 40	 test	 BYTE PTR [rbx+72], 64	; 00000040H
  000a0	74 12		 je	 SHORT $LN21@luaC_runti
  000a2	48 8b 53 40	 mov	 rdx, QWORD PTR [rbx+64]
  000a6	f6 42 09 03	 test	 BYTE PTR [rdx+9], 3
  000aa	74 08		 je	 SHORT $LN21@luaC_runti
  000ac	48 8b cb	 mov	 rcx, rbx
  000af	e8 00 00 00 00	 call	 reallymarkobject
$LN21@luaC_runti:
  000b4	48 8b cb	 mov	 rcx, rbx
  000b7	e8 00 00 00 00	 call	 markmt
  000bc	48 8b cb	 mov	 rcx, rbx
  000bf	e8 00 00 00 00	 call	 markbeingfnz
  000c4	44 88 63 55	 mov	 BYTE PTR [rbx+85], r12b
  000c8	e9 22 01 00 00	 jmp	 $LN6@luaC_runti
$LN15@luaC_runti:
  000cd	48 8b cb	 mov	 rcx, rbx
  000d0	4c 89 63 20	 mov	 QWORD PTR [rbx+32], r12
  000d4	e8 00 00 00 00	 call	 propagatemark
  000d9	4c 39 63 70	 cmp	 QWORD PTR [rbx+112], r12
  000dd	0f 85 0c 01 00
	00		 jne	 $LN6@luaC_runti
  000e3	c6 43 55 01	 mov	 BYTE PTR [rbx+85], 1
  000e7	e9 03 01 00 00	 jmp	 $LN6@luaC_runti
$LN13@luaC_runti:
  000ec	48 8b cb	 mov	 rcx, rbx
  000ef	e8 00 00 00 00	 call	 propagateall
  000f4	48 8b ce	 mov	 rcx, rsi
  000f7	e8 00 00 00 00	 call	 atomic
  000fc	48 8b 7e 18	 mov	 rdi, QWORD PTR [rsi+24]
  00100	4c 8d 44 24 58	 lea	 r8, QWORD PTR n$1[rsp]
  00105	48 8d 57 58	 lea	 rdx, QWORD PTR [rdi+88]
  00109	48 8b ce	 mov	 rcx, rsi
  0010c	44 89 64 24 58	 mov	 DWORD PTR n$1[rsp], r12d
  00111	c6 47 55 02	 mov	 BYTE PTR [rdi+85], 2
  00115	e8 00 00 00 00	 call	 sweeptolive
  0011a	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
  0011e	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00122	48 03 43 10	 add	 rax, QWORD PTR [rbx+16]
  00126	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  0012a	e9 c0 00 00 00	 jmp	 $LN6@luaC_runti
$LN12@luaC_runti:
  0012f	4c 8d 4b 68	 lea	 r9, QWORD PTR [rbx+104]
  00133	41 b8 03 00 00
	00		 mov	 r8d, 3
  00139	48 8b d3	 mov	 rdx, rbx
  0013c	48 8b ce	 mov	 rcx, rsi
  0013f	e8 00 00 00 00	 call	 sweepstep
  00144	e9 a6 00 00 00	 jmp	 $LN6@luaC_runti
$LN11@luaC_runti:
  00149	4c 8d 8b 98 00
	00 00		 lea	 r9, QWORD PTR [rbx+152]
  00150	41 b8 04 00 00
	00		 mov	 r8d, 4
  00156	48 8b d3	 mov	 rdx, rbx
  00159	48 8b ce	 mov	 rcx, rsi
  0015c	e8 00 00 00 00	 call	 sweepstep
  00161	e9 89 00 00 00	 jmp	 $LN6@luaC_runti
$LN10@luaC_runti:
  00166	45 33 c9	 xor	 r9d, r9d
  00169	48 8b d3	 mov	 rdx, rbx
  0016c	48 8b ce	 mov	 rcx, rsi
  0016f	45 8d 41 05	 lea	 r8d, QWORD PTR [r9+5]
  00173	e8 00 00 00 00	 call	 sweepstep
  00178	eb 75		 jmp	 SHORT $LN6@luaC_runti
$LN9@luaC_runti:
  0017a	48 8b 93 c8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+200]
  00181	0f b6 4b 54	 movzx	 ecx, BYTE PTR [rbx+84]
  00185	0f b6 42 09	 movzx	 eax, BYTE PTR [rdx+9]
  00189	80 e1 03	 and	 cl, 3
  0018c	24 f8		 and	 al, 248			; 000000f8H
  0018e	0a c8		 or	 cl, al
  00190	88 4a 09	 mov	 BYTE PTR [rdx+9], cl
  00193	80 7b 56 01	 cmp	 BYTE PTR [rbx+86], 1
  00197	74 33		 je	 SHORT $LN28@luaC_runti
  00199	8b 4b 3c	 mov	 ecx, DWORD PTR [rbx+60]
  0019c	48 8b 7b 18	 mov	 rdi, QWORD PTR [rbx+24]
  001a0	8b c1		 mov	 eax, ecx
  001a2	99		 cdq
  001a3	83 e2 03	 and	 edx, 3
  001a6	03 c2		 add	 eax, edx
  001a8	c1 f8 02	 sar	 eax, 2
  001ab	39 43 38	 cmp	 DWORD PTR [rbx+56], eax
  001ae	7d 11		 jge	 SHORT $LN27@luaC_runti
  001b0	8b c1		 mov	 eax, ecx
  001b2	48 8b ce	 mov	 rcx, rsi
  001b5	99		 cdq
  001b6	2b c2		 sub	 eax, edx
  001b8	d1 f8		 sar	 eax, 1
  001ba	8b d0		 mov	 edx, eax
  001bc	e8 00 00 00 00	 call	 luaS_resize
$LN27@luaC_runti:
  001c1	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  001c5	48 2b c7	 sub	 rax, rdi
  001c8	48 01 43 28	 add	 QWORD PTR [rbx+40], rax
$LN28@luaC_runti:
  001cc	c6 43 55 06	 mov	 BYTE PTR [rbx+85], 6
  001d0	eb 1d		 jmp	 SHORT $LN6@luaC_runti
$LN8@luaC_runti:
  001d2	4c 39 a3 98 00
	00 00		 cmp	 QWORD PTR [rbx+152], r12
  001d9	74 10		 je	 SHORT $LN7@luaC_runti
  001db	80 7b 56 01	 cmp	 BYTE PTR [rbx+86], 1
  001df	74 0a		 je	 SHORT $LN7@luaC_runti
  001e1	48 8b ce	 mov	 rcx, rsi
  001e4	e8 00 00 00 00	 call	 runafewfinalizers
  001e9	eb 04		 jmp	 SHORT $LN6@luaC_runti
$LN7@luaC_runti:
  001eb	c6 43 55 07	 mov	 BYTE PTR [rbx+85], 7
$LN6@luaC_runti:
; Line 1110
  001ef	41 0f b6 46 55	 movzx	 eax, BYTE PTR [r14+85]
  001f4	0f a3 c5	 bt	 ebp, eax
  001f7	0f 83 43 fe ff
	ff		 jae	 $LL2@luaC_runti
  001fd	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  00202	4c 8b 64 24 28	 mov	 r12, QWORD PTR [rsp+40]
  00207	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  0020c	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
$LN1@luaC_runti:
; Line 1112
  00211	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00215	41 5e		 pop	 r14
  00217	5e		 pop	 rsi
  00218	5d		 pop	 rbp
  00219	c3		 ret	 0
  0021a	66 90		 npad	 2
$LN34@luaC_runti:
  0021c	00 00 00 00	 DD	 $LN15@luaC_runti
  00220	00 00 00 00	 DD	 $LN13@luaC_runti
  00224	00 00 00 00	 DD	 $LN12@luaC_runti
  00228	00 00 00 00	 DD	 $LN11@luaC_runti
  0022c	00 00 00 00	 DD	 $LN10@luaC_runti
  00230	00 00 00 00	 DD	 $LN9@luaC_runti
  00234	00 00 00 00	 DD	 $LN8@luaC_runti
  00238	00 00 00 00	 DD	 $LN16@luaC_runti
luaC_runtilstate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaC_step
_TEXT	SEGMENT
L$ = 48
luaC_step PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 1133
$LN25:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1134
  0000f	48 8b 79 18	 mov	 rdi, QWORD PTR [rcx+24]
  00013	48 8b f1	 mov	 rsi, rcx
; Line 1135
  00016	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  0001a	48 85 c9	 test	 rcx, rcx
  0001d	7f 04		 jg	 SHORT $LN11@luaC_step
  0001f	33 db		 xor	 ebx, ebx
  00021	eb 48		 jmp	 SHORT $LN15@luaC_step
$LN11@luaC_step:
  00023	48 b8 0b d7 a3
	70 3d 0a d7 a3	 mov	 rax, -6640827866535438581 ; a3d70a3d70a3d70bH
  0002d	49 b8 ff ff ff
	ff ff ff ff 7f	 mov	 r8, 9223372036854775807	; 7fffffffffffffffH
  00037	48 f7 e9	 imul	 rcx
  0003a	49 8b c0	 mov	 rax, r8
  0003d	48 03 d1	 add	 rdx, rcx
  00040	48 63 8f b8 00
	00 00		 movsxd	 rcx, DWORD PTR [rdi+184]
  00047	48 c1 fa 07	 sar	 rdx, 7
  0004b	48 8b da	 mov	 rbx, rdx
  0004e	48 ff c2	 inc	 rdx
  00051	48 c1 eb 3f	 shr	 rbx, 63			; 0000003fH
  00055	48 03 da	 add	 rbx, rdx
  00058	48 99		 cdq
  0005a	48 f7 f9	 idiv	 rcx
  0005d	48 3b d8	 cmp	 rbx, rax
  00060	7d 06		 jge	 SHORT $LN14@luaC_step
  00062	48 0f af d9	 imul	 rbx, rcx
  00066	eb 03		 jmp	 SHORT $LN15@luaC_step
$LN14@luaC_step:
  00068	49 8b d8	 mov	 rbx, r8
$LN15@luaC_step:
; Line 1136
  0006b	80 7f 57 00	 cmp	 BYTE PTR [rdi+87], 0
  0006f	75 1f		 jne	 SHORT $LL6@luaC_step
; Line 1137
  00071	48 c7 c2 40 a2
	ff ff		 mov	 rdx, -24000		; ffffffffffffa240H
  00078	48 8b cf	 mov	 rcx, rdi
; Line 1151
  0007b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00080	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00085	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00089	5f		 pop	 rdi
; Line 1137
  0008a	e9 00 00 00 00	 jmp	 luaE_setdebt
  0008f	90		 npad	 1
$LL6@luaC_step:
; Line 1141
  00090	48 8b ce	 mov	 rcx, rsi
  00093	e8 00 00 00 00	 call	 singlestep
; Line 1142
  00098	48 2b d8	 sub	 rbx, rax
; Line 1143
  0009b	48 81 fb a0 f6
	ff ff		 cmp	 rbx, -2400		; fffffffffffff6a0H
  000a2	7e 06		 jle	 SHORT $LN3@luaC_step
  000a4	80 7f 55 07	 cmp	 BYTE PTR [rdi+85], 7
  000a8	75 e6		 jne	 SHORT $LL6@luaC_step
$LN3@luaC_step:
; Line 1144
  000aa	80 7f 55 07	 cmp	 BYTE PTR [rdi+85], 7
  000ae	75 17		 jne	 SHORT $LN2@luaC_step
; Line 1145
  000b0	48 8b cf	 mov	 rcx, rdi
; Line 1151
  000b3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b8	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000bd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c1	5f		 pop	 rdi
; Line 1145
  000c2	e9 00 00 00 00	 jmp	 setpause
$LN2@luaC_step:
; Line 1147
  000c7	48 63 8f b8 00
	00 00		 movsxd	 rcx, DWORD PTR [rdi+184]
  000ce	48 8b c3	 mov	 rax, rbx
  000d1	48 99		 cdq
  000d3	48 f7 f9	 idiv	 rcx
; Line 1148
  000d6	48 8b cf	 mov	 rcx, rdi
  000d9	48 69 d0 c8 00
	00 00		 imul	 rdx, rax, 200		; 000000c8H
  000e0	e8 00 00 00 00	 call	 luaE_setdebt
; Line 1149
  000e5	48 8b ce	 mov	 rcx, rsi
; Line 1151
  000e8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ed	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000f2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f6	5f		 pop	 rdi
; Line 1149
  000f7	e9 00 00 00 00	 jmp	 runafewfinalizers
luaC_step ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaC_freeallobjects
_TEXT	SEGMENT
L$ = 48
luaC_freeallobjects PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 970
$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 971
  0000f	48 8b 79 18	 mov	 rdi, QWORD PTR [rcx+24]
  00013	48 8b f1	 mov	 rsi, rcx
; Line 972
  00016	48 8d 97 98 00
	00 00		 lea	 rdx, QWORD PTR [rdi+152]
  0001d	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00020	48 85 c0	 test	 rax, rax
  00023	74 0b		 je	 SHORT $LN9@luaC_freea
$LL10@luaC_freea:
  00025	48 8b d0	 mov	 rdx, rax
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 85 c0	 test	 rax, rax
  0002e	75 f5		 jne	 SHORT $LL10@luaC_freea
$LN9@luaC_freea:
  00030	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  00034	48 85 c0	 test	 rax, rax
  00037	74 23		 je	 SHORT $LN5@luaC_freea
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@luaC_freea:
  00040	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00043	48 89 4f 68	 mov	 QWORD PTR [rdi+104], rcx
  00047	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0004a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0004d	48 89 02	 mov	 QWORD PTR [rdx], rax
  00050	48 8b d0	 mov	 rdx, rax
  00053	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  00057	48 85 c0	 test	 rax, rax
  0005a	75 e4		 jne	 SHORT $LL6@luaC_freea
$LN5@luaC_freea:
; Line 974
  0005c	33 d2		 xor	 edx, edx
  0005e	48 8b ce	 mov	 rcx, rsi
  00061	e8 00 00 00 00	 call	 callallpendingfinalizers
; Line 978
  00066	48 8d 57 68	 lea	 rdx, QWORD PTR [rdi+104]
  0006a	49 83 c8 ff	 or	 r8, -1
  0006e	48 8b ce	 mov	 rcx, rsi
  00071	c6 47 54 03	 mov	 BYTE PTR [rdi+84], 3
  00075	c6 47 56 00	 mov	 BYTE PTR [rdi+86], 0
  00079	e8 00 00 00 00	 call	 sweeplist
; Line 979
  0007e	48 8d 57 58	 lea	 rdx, QWORD PTR [rdi+88]
  00082	49 83 c8 ff	 or	 r8, -1
  00086	48 8b ce	 mov	 rcx, rsi
  00089	e8 00 00 00 00	 call	 sweeplist
; Line 980
  0008e	48 8d 97 a0 00
	00 00		 lea	 rdx, QWORD PTR [rdi+160]
  00095	49 83 c8 ff	 or	 r8, -1
  00099	48 8b ce	 mov	 rcx, rsi
; Line 982
  0009c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a1	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5f		 pop	 rdi
; Line 980
  000ab	e9 00 00 00 00	 jmp	 sweeplist
luaC_freeallobjects ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaC_fix
_TEXT	SEGMENT
L$ = 8
o$ = 16
luaC_fix PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lgc.c
; Line 195
  00000	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
; Line 198
  00004	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00007	80 62 09 fc	 and	 BYTE PTR [rdx+9], 252	; 000000fcH
  0000b	49 89 40 58	 mov	 QWORD PTR [r8+88], rax
; Line 199
  0000f	49 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [r8+160]
  00016	48 89 02	 mov	 QWORD PTR [rdx], rax
; Line 200
  00019	49 89 90 a0 00
	00 00		 mov	 QWORD PTR [r8+160], rdx
; Line 201
  00020	c3		 ret	 0
luaC_fix ENDP
_TEXT	ENDS
END
