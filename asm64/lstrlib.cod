; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04IHGKJMLH@byte?$AA@			; `string'
PUBLIC	??_C@_04ENMBGAPA@char?$AA@			; `string'
PUBLIC	??_C@_04GGLOKIEE@dump?$AA@			; `string'
PUBLIC	??_C@_04CKFJHKAP@find?$AA@			; `string'
PUBLIC	??_C@_06DLEPGFEF@format?$AA@			; `string'
PUBLIC	??_C@_06DPFCLDIO@gmatch?$AA@			; `string'
PUBLIC	??_C@_04GOLEAPFD@gsub?$AA@			; `string'
PUBLIC	??_C@_03BKCJCHLK@len?$AA@			; `string'
PUBLIC	??_C@_05IPJEPLHL@lower?$AA@			; `string'
PUBLIC	??_C@_05FNONLPDI@match?$AA@			; `string'
PUBLIC	??_C@_03HOKODIMJ@rep?$AA@			; `string'
PUBLIC	??_C@_07KOIEOCCE@reverse?$AA@			; `string'
PUBLIC	??_C@_03KCMAIMAP@sub?$AA@			; `string'
PUBLIC	??_C@_05NECKJAMC@upper?$AA@			; `string'
PUBLIC	??_C@_04IPANLPFO@pack?$AA@			; `string'
PUBLIC	??_C@_08JEMJHBLC@packsize?$AA@			; `string'
PUBLIC	??_C@_06FIONAGJL@unpack?$AA@			; `string'
;	COMDAT ??_C@_06FIONAGJL@unpack?$AA@
CONST	SEGMENT
??_C@_06FIONAGJL@unpack?$AA@ DB 'unpack', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JEMJHBLC@packsize?$AA@
CONST	SEGMENT
??_C@_08JEMJHBLC@packsize?$AA@ DB 'packsize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IPANLPFO@pack?$AA@
CONST	SEGMENT
??_C@_04IPANLPFO@pack?$AA@ DB 'pack', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NECKJAMC@upper?$AA@
CONST	SEGMENT
??_C@_05NECKJAMC@upper?$AA@ DB 'upper', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCMAIMAP@sub?$AA@
CONST	SEGMENT
??_C@_03KCMAIMAP@sub?$AA@ DB 'sub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOIEOCCE@reverse?$AA@
CONST	SEGMENT
??_C@_07KOIEOCCE@reverse?$AA@ DB 'reverse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HOKODIMJ@rep?$AA@
CONST	SEGMENT
??_C@_03HOKODIMJ@rep?$AA@ DB 'rep', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FNONLPDI@match?$AA@
CONST	SEGMENT
??_C@_05FNONLPDI@match?$AA@ DB 'match', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPJEPLHL@lower?$AA@
CONST	SEGMENT
??_C@_05IPJEPLHL@lower?$AA@ DB 'lower', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKCJCHLK@len?$AA@
CONST	SEGMENT
??_C@_03BKCJCHLK@len?$AA@ DB 'len', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOLEAPFD@gsub?$AA@
CONST	SEGMENT
??_C@_04GOLEAPFD@gsub?$AA@ DB 'gsub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPFCLDIO@gmatch?$AA@
CONST	SEGMENT
??_C@_06DPFCLDIO@gmatch?$AA@ DB 'gmatch', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLEPGFEF@format?$AA@
CONST	SEGMENT
??_C@_06DLEPGFEF@format?$AA@ DB 'format', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CKFJHKAP@find?$AA@
CONST	SEGMENT
??_C@_04CKFJHKAP@find?$AA@ DB 'find', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGLOKIEE@dump?$AA@
CONST	SEGMENT
??_C@_04GGLOKIEE@dump?$AA@ DB 'dump', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENMBGAPA@char?$AA@
CONST	SEGMENT
??_C@_04ENMBGAPA@char?$AA@ DB 'char', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHGKJMLH@byte?$AA@
CONST	SEGMENT
??_C@_04IHGKJMLH@byte?$AA@ DB 'byte', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
nativeendian DD	01H
	ORG $+12
strlib	DQ	FLAT:??_C@_04IHGKJMLH@byte?$AA@
	DQ	FLAT:str_byte
	DQ	FLAT:??_C@_04ENMBGAPA@char?$AA@
	DQ	FLAT:str_char
	DQ	FLAT:??_C@_04GGLOKIEE@dump?$AA@
	DQ	FLAT:str_dump
	DQ	FLAT:??_C@_04CKFJHKAP@find?$AA@
	DQ	FLAT:str_find
	DQ	FLAT:??_C@_06DLEPGFEF@format?$AA@
	DQ	FLAT:str_format
	DQ	FLAT:??_C@_06DPFCLDIO@gmatch?$AA@
	DQ	FLAT:gmatch
	DQ	FLAT:??_C@_04GOLEAPFD@gsub?$AA@
	DQ	FLAT:str_gsub
	DQ	FLAT:??_C@_03BKCJCHLK@len?$AA@
	DQ	FLAT:str_len
	DQ	FLAT:??_C@_05IPJEPLHL@lower?$AA@
	DQ	FLAT:str_lower
	DQ	FLAT:??_C@_05FNONLPDI@match?$AA@
	DQ	FLAT:str_match
	DQ	FLAT:??_C@_03HOKODIMJ@rep?$AA@
	DQ	FLAT:str_rep
	DQ	FLAT:??_C@_07KOIEOCCE@reverse?$AA@
	DQ	FLAT:str_reverse
	DQ	FLAT:??_C@_03KCMAIMAP@sub?$AA@
	DQ	FLAT:str_sub
	DQ	FLAT:??_C@_05NECKJAMC@upper?$AA@
	DQ	FLAT:str_upper
	DQ	FLAT:??_C@_04IPANLPFO@pack?$AA@
	DQ	FLAT:str_pack
	DQ	FLAT:??_C@_08JEMJHBLC@packsize?$AA@
	DQ	FLAT:str_packsize
	DQ	FLAT:??_C@_06FIONAGJL@unpack?$AA@
	DQ	FLAT:str_unpack
	DQ	0000000000000000H
	DQ	0000000000000000H
CONST	ENDS
PUBLIC	luaopen_string
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BL@JPPPHHNK@resulting?5string?5too?5large?$AA@ ; `string'
PUBLIC	??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0BO@BNLBHKJN@unable?5to?5dump?5given?5function?$AA@ ; `string'
PUBLIC	??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BI@ECNPHIBF@invalid?5pattern?5capture?$AA@ ; `string'
PUBLIC	??_C@_0CD@PLJBIEHA@malformed?5pattern?5?$CIends?5with?5?8?$CF?$CF@ ; `string'
PUBLIC	??_C@_0CA@CFGACOGB@malformed?5pattern?5?$CImissing?5?8?$FN?8?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CP@FCNHBCLO@malformed?5pattern?5?$CImissing?5argum@ ; `string'
PUBLIC	??_C@_0BC@IMEAEJPD@too?5many?5captures?$AA@	; `string'
PUBLIC	??_C@_0BE@LPFFPFJG@pattern?5too?5complex?$AA@	; `string'
PUBLIC	??_C@_0CD@LOJJMDBH@missing?5?8?$FL?8?5after?5?8?$CF?$CFf?8?5in?5patte@ ; `string'
PUBLIC	??_C@_0BD@BFKNEALP@unfinished?5capture?$AA@	; `string'
PUBLIC	??_C@_0L@NLFJOONJ@?$FO$?$CK?$CL?$DP?4?$CI?$FL?$CF?9?$AA@ ; `string'
PUBLIC	??_C@_0CK@KLCOLAN@invalid?5use?5of?5?8?$CFc?8?5in?5replaceme@ ; `string'
PUBLIC	??_C@_0CB@LPDIHGGA@invalid?5replacement?5value?5?$CIa?5?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0BP@PPPOBACA@string?1function?1table?5expected?$AA@ ; `string'
PUBLIC	??_C@_03GAHHLKFB@?2?$CFd?$AA@			; `string'
PUBLIC	??_C@_05OLMHDLGP@?2?$CF03d?$AA@			; `string'
PUBLIC	??_C@_05GGBDHNF@?9?$CL?5?$CD0?$AA@		; `string'
PUBLIC	??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precisi@ ; `string'
PUBLIC	??_C@_08JEIPHCP@no?5value?$AA@			; `string'
PUBLIC	??_C@_02IIDLDAAC@ll?$AA@			; `string'
PUBLIC	??_C@_0BG@FHCNDFMO@string?5contains?5zeros?$AA@	; `string'
PUBLIC	??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8format@ ; `string'
PUBLIC	??_C@_0CI@CNGGJHEE@integral?5size?5?$CI?$CFd?$CJ?5out?5of?5limits@ ; `string'
PUBLIC	??_C@_0CD@KNDEAFDL@missing?5size?5for?5format?5option?5?8@ ; `string'
PUBLIC	??_C@_0BL@EBKLKADF@invalid?5format?5option?5?8?$CFc?8?$AA@ ; `string'
PUBLIC	??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@ ; `string'
PUBLIC	??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@ ; `string'
PUBLIC	??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@	; `string'
PUBLIC	??_C@_0BC@HFAHIBAH@unsigned?5overflow?$AA@	; `string'
PUBLIC	??_C@_0CJ@JDDCIIOM@string?5length?5does?5not?5fit?5in?5gi@ ; `string'
PUBLIC	??_C@_0BI@IHIBMINB@format?5result?5too?5large?$AA@ ; `string'
PUBLIC	??_C@_0BH@BCBEHJHD@variable?9length?5format?$AA@ ; `string'
PUBLIC	??_C@_0CO@PPAGINFB@?$CFd?9byte?5integer?5does?5not?5fit?5int@ ; `string'
PUBLIC	??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@ ; `string'
PUBLIC	??_C@_0BG@KKKAHMHM@data?5string?5too?5short?$AA@ ; `string'
PUBLIC	??_C@_0BB@JAJHLPBA@too?5many?5results?$AA@	; `string'
PUBLIC	??_C@_07NHABFFHN@__index?$AA@			; `string'
PUBLIC	__real@405bc00000000000
EXTRN	__imp_isalpha:PROC
EXTRN	__imp_isupper:PROC
EXTRN	__imp_islower:PROC
EXTRN	__imp_isdigit:PROC
EXTRN	__imp_isxdigit:PROC
EXTRN	__imp_isspace:PROC
EXTRN	__imp_ispunct:PROC
EXTRN	__imp_isalnum:PROC
EXTRN	__imp_isgraph:PROC
EXTRN	__imp_iscntrl:PROC
EXTRN	__imp_toupper:PROC
EXTRN	__imp_tolower:PROC
EXTRN	__imp__snprintf:PROC
EXTRN	__imp_memchr:PROC
EXTRN	__imp_strchr:PROC
EXTRN	__imp_strpbrk:PROC
EXTRN	lua_gettop:PROC
EXTRN	lua_settop:PROC
EXTRN	lua_pushvalue:PROC
EXTRN	lua_rotate:PROC
EXTRN	lua_isstring:PROC
EXTRN	lua_type:PROC
EXTRN	lua_typename:PROC
EXTRN	lua_toboolean:PROC
EXTRN	lua_tolstring:PROC
EXTRN	lua_touserdata:PROC
EXTRN	lua_pushnil:PROC
EXTRN	lua_pushnumber:PROC
EXTRN	lua_pushinteger:PROC
EXTRN	lua_pushlstring:PROC
EXTRN	lua_pushstring:PROC
EXTRN	lua_pushcclosure:PROC
EXTRN	lua_gettable:PROC
EXTRN	lua_createtable:PROC
EXTRN	lua_newuserdata:PROC
EXTRN	lua_setfield:PROC
EXTRN	lua_setmetatable:PROC
EXTRN	lua_callk:PROC
EXTRN	lua_dump:PROC
EXTRN	luaL_checkversion_:PROC
EXTRN	luaL_tolstring:PROC
EXTRN	luaL_argerror:PROC
EXTRN	luaL_checklstring:PROC
EXTRN	luaL_optlstring:PROC
EXTRN	luaL_checknumber:PROC
EXTRN	luaL_checkinteger:PROC
EXTRN	luaL_optinteger:PROC
EXTRN	luaL_checkstack:PROC
EXTRN	luaL_checktype:PROC
EXTRN	luaL_error:PROC
EXTRN	luaL_setfuncs:PROC
EXTRN	luaL_buffinit:PROC
EXTRN	luaL_prepbuffsize:PROC
EXTRN	luaL_addlstring:PROC
EXTRN	luaL_addstring:PROC
EXTRN	luaL_addvalue:PROC
EXTRN	luaL_pushresult:PROC
EXTRN	luaL_pushresultsize:PROC
EXTRN	luaL_buffinitsize:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaopen_string DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$luaopen_string
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_len DD imagerel str_len
	DD	imagerel str_len+48
	DD	imagerel $unwind$str_len
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_sub DD imagerel str_sub
	DD	imagerel str_sub+214
	DD	imagerel $unwind$str_sub
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_reverse DD imagerel str_reverse
	DD	imagerel str_reverse+169
	DD	imagerel $unwind$str_reverse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_lower DD imagerel str_lower
	DD	imagerel str_lower+89
	DD	imagerel $unwind$str_lower
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$str_lower DD imagerel str_lower+89
	DD	imagerel str_lower+151
	DD	imagerel $chain$0$str_lower
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$str_lower DD imagerel str_lower+151
	DD	imagerel str_lower+199
	DD	imagerel $chain$1$str_lower
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_upper DD imagerel str_upper
	DD	imagerel str_upper+89
	DD	imagerel $unwind$str_upper
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$str_upper DD imagerel str_upper+89
	DD	imagerel str_upper+151
	DD	imagerel $chain$0$str_upper
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$str_upper DD imagerel str_upper+151
	DD	imagerel str_upper+199
	DD	imagerel $chain$1$str_upper
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_rep DD imagerel str_rep
	DD	imagerel str_rep+177
	DD	imagerel $unwind$str_rep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$str_rep DD imagerel str_rep+177
	DD	imagerel str_rep+344
	DD	imagerel $chain$1$str_rep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$str_rep DD imagerel str_rep+344
	DD	imagerel str_rep+395
	DD	imagerel $chain$2$str_rep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_byte DD imagerel str_byte
	DD	imagerel str_byte+286
	DD	imagerel $unwind$str_byte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_char DD imagerel str_char
	DD	imagerel str_char+88
	DD	imagerel $unwind$str_char
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$str_char DD imagerel str_char+88
	DD	imagerel str_char+157
	DD	imagerel $chain$0$str_char
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$str_char DD imagerel str_char+157
	DD	imagerel str_char+216
	DD	imagerel $chain$1$str_char
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$writer DD imagerel writer
	DD	imagerel writer+19
	DD	imagerel $unwind$writer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_dump DD imagerel str_dump
	DD	imagerel str_dump+187
	DD	imagerel $unwind$str_dump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$match DD	imagerel match
	DD	imagerel match+66
	DD	imagerel $unwind$match
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$match DD imagerel match+66
	DD	imagerel match+735
	DD	imagerel $chain$0$match
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$match DD imagerel match+735
	DD	imagerel match+757
	DD	imagerel $chain$1$match
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$classend DD imagerel classend
	DD	imagerel classend+150
	DD	imagerel $unwind$classend
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$match_class DD imagerel match_class
	DD	imagerel match_class+356
	DD	imagerel $unwind$match_class
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$matchbracketclass DD imagerel matchbracketclass
	DD	imagerel matchbracketclass+45
	DD	imagerel $unwind$matchbracketclass
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$matchbracketclass DD imagerel matchbracketclass+45
	DD	imagerel matchbracketclass+416
	DD	imagerel $chain$2$matchbracketclass
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$matchbracketclass DD imagerel matchbracketclass+416
	DD	imagerel matchbracketclass+520
	DD	imagerel $chain$3$matchbracketclass
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$matchbalance DD imagerel matchbalance
	DD	imagerel matchbalance+150
	DD	imagerel $unwind$matchbalance
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$max_expand DD imagerel max_expand
	DD	imagerel max_expand+197
	DD	imagerel $unwind$max_expand
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$min_expand DD imagerel min_expand
	DD	imagerel min_expand+183
	DD	imagerel $unwind$min_expand
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$start_capture DD imagerel start_capture
	DD	imagerel start_capture+140
	DD	imagerel $unwind$start_capture
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$end_capture DD imagerel end_capture
	DD	imagerel end_capture+169
	DD	imagerel $unwind$end_capture
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$match_capture DD imagerel match_capture
	DD	imagerel match_capture+159
	DD	imagerel $unwind$match_capture
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lmemfind DD imagerel lmemfind
	DD	imagerel lmemfind+55
	DD	imagerel $unwind$lmemfind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$lmemfind DD imagerel lmemfind+55
	DD	imagerel lmemfind+144
	DD	imagerel $chain$0$lmemfind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$lmemfind DD imagerel lmemfind+144
	DD	imagerel lmemfind+166
	DD	imagerel $chain$1$lmemfind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$lmemfind DD imagerel lmemfind+166
	DD	imagerel lmemfind+172
	DD	imagerel $chain$2$lmemfind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$push_onecapture DD imagerel push_onecapture
	DD	imagerel push_onecapture+65
	DD	imagerel $unwind$push_onecapture
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$push_onecapture DD imagerel push_onecapture+65
	DD	imagerel push_onecapture+149
	DD	imagerel $chain$1$push_onecapture
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$push_onecapture DD imagerel push_onecapture+149
	DD	imagerel push_onecapture+196
	DD	imagerel $chain$3$push_onecapture
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$push_captures DD imagerel push_captures
	DD	imagerel push_captures+83
	DD	imagerel $unwind$push_captures
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$push_captures DD imagerel push_captures+83
	DD	imagerel push_captures+202
	DD	imagerel $chain$0$push_captures
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$push_captures DD imagerel push_captures+202
	DD	imagerel push_captures+229
	DD	imagerel $chain$1$push_captures
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$push_captures DD imagerel push_captures+229
	DD	imagerel push_captures+263
	DD	imagerel $chain$2$push_captures
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$nospecials DD imagerel nospecials
	DD	imagerel nospecials+114
	DD	imagerel $unwind$nospecials
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_find_aux DD imagerel str_find_aux
	DD	imagerel str_find_aux+188
	DD	imagerel $unwind$str_find_aux
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$str_find_aux DD imagerel str_find_aux+188
	DD	imagerel str_find_aux+642
	DD	imagerel $chain$0$str_find_aux
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$str_find_aux DD imagerel str_find_aux+642
	DD	imagerel str_find_aux+686
	DD	imagerel $chain$1$str_find_aux
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gmatch_aux DD imagerel gmatch_aux
	DD	imagerel gmatch_aux+133
	DD	imagerel $unwind$gmatch_aux
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gmatch DD imagerel gmatch
	DD	imagerel gmatch+213
	DD	imagerel $unwind$gmatch
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_s DD	imagerel add_s
	DD	imagerel add_s+299
	DD	imagerel $unwind$add_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_value DD imagerel add_value
	DD	imagerel add_value+274
	DD	imagerel $unwind$add_value
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_gsub DD imagerel str_gsub
	DD	imagerel str_gsub+894
	DD	imagerel $unwind$str_gsub
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$addquoted DD imagerel addquoted
	DD	imagerel addquoted+390
	DD	imagerel $unwind$addquoted
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$scanformat DD imagerel scanformat
	DD	imagerel scanformat+262
	DD	imagerel $unwind$scanformat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_format DD imagerel str_format
	DD	imagerel str_format+1212
	DD	imagerel $unwind$str_format
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getnumlimit DD imagerel getnumlimit
	DD	imagerel getnumlimit+113
	DD	imagerel $unwind$getnumlimit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getoption DD imagerel getoption
	DD	imagerel getoption+783
	DD	imagerel $unwind$getoption
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getdetails DD imagerel getdetails
	DD	imagerel getdetails+16
	DD	imagerel $unwind$getdetails
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$getdetails DD imagerel getdetails+16
	DD	imagerel getdetails+122
	DD	imagerel $chain$0$getdetails
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$getdetails DD imagerel getdetails+122
	DD	imagerel getdetails+130
	DD	imagerel $chain$1$getdetails
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$getdetails DD imagerel getdetails+130
	DD	imagerel getdetails+203
	DD	imagerel $chain$2$getdetails
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$getdetails DD imagerel getdetails+203
	DD	imagerel getdetails+230
	DD	imagerel $chain$3$getdetails
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$packint DD imagerel packint
	DD	imagerel packint+216
	DD	imagerel $unwind$packint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_pack DD imagerel str_pack
	DD	imagerel str_pack+128
	DD	imagerel $unwind$str_pack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$str_pack DD imagerel str_pack+128
	DD	imagerel str_pack+1424
	DD	imagerel $chain$2$str_pack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$str_pack DD imagerel str_pack+1424
	DD	imagerel str_pack+1508
	DD	imagerel $chain$3$str_pack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_packsize DD imagerel str_packsize
	DD	imagerel str_packsize+61
	DD	imagerel $unwind$str_packsize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$str_packsize DD imagerel str_packsize+61
	DD	imagerel str_packsize+382
	DD	imagerel $chain$4$str_packsize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$str_packsize DD imagerel str_packsize+382
	DD	imagerel str_packsize+407
	DD	imagerel $chain$5$str_packsize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unpackint DD imagerel unpackint
	DD	imagerel unpackint+216
	DD	imagerel $unwind$unpackint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$unpackint DD imagerel unpackint+216
	DD	imagerel unpackint+323
	DD	imagerel $chain$1$unpackint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$unpackint DD imagerel unpackint+323
	DD	imagerel unpackint+344
	DD	imagerel $chain$2$unpackint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$str_unpack DD imagerel str_unpack
	DD	imagerel str_unpack+190
	DD	imagerel $unwind$str_unpack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$str_unpack DD imagerel str_unpack+190
	DD	imagerel str_unpack+886
	DD	imagerel $chain$1$str_unpack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$str_unpack DD imagerel str_unpack+886
	DD	imagerel str_unpack+976
	DD	imagerel $chain$2$str_unpack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$createmetatable DD imagerel createmetatable
	DD	imagerel createmetatable+125
	DD	imagerel $unwind$createmetatable
pdata	ENDS
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_07NHABFFHN@__index?$AA@
CONST	SEGMENT
??_C@_07NHABFFHN@__index?$AA@ DB '__index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JAJHLPBA@too?5many?5results?$AA@
CONST	SEGMENT
??_C@_0BB@JAJHLPBA@too?5many?5results?$AA@ DB 'too many results', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KKKAHMHM@data?5string?5too?5short?$AA@
CONST	SEGMENT
??_C@_0BG@KKKAHMHM@data?5string?5too?5short?$AA@ DB 'data string too shor'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@
CONST	SEGMENT
??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@ DB 'initial po'
	DB	'sition out of string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PPAGINFB@?$CFd?9byte?5integer?5does?5not?5fit?5int@
CONST	SEGMENT
??_C@_0CO@PPAGINFB@?$CFd?9byte?5integer?5does?5not?5fit?5int@ DB '%d-byte'
	DB	' integer does not fit into Lua Integer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BCBEHJHD@variable?9length?5format?$AA@
CONST	SEGMENT
??_C@_0BH@BCBEHJHD@variable?9length?5format?$AA@ DB 'variable-length form'
	DB	'at', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IHIBMINB@format?5result?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BI@IHIBMINB@format?5result?5too?5large?$AA@ DB 'format result too '
	DB	'large', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JDDCIIOM@string?5length?5does?5not?5fit?5in?5gi@
CONST	SEGMENT
??_C@_0CJ@JDDCIIOM@string?5length?5does?5not?5fit?5in?5gi@ DB 'string len'
	DB	'gth does not fit in given size', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HFAHIBAH@unsigned?5overflow?$AA@
CONST	SEGMENT
??_C@_0BC@HFAHIBAH@unsigned?5overflow?$AA@ DB 'unsigned overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@
CONST	SEGMENT
??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@ DB 'integer overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@
CONST	SEGMENT
??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@ DB 'format asks'
	DB	' for alignment not power of 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@
CONST	SEGMENT
??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@ DB 'invalid ne'
	DB	'xt option for option ''X''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EBKLKADF@invalid?5format?5option?5?8?$CFc?8?$AA@
CONST	SEGMENT
??_C@_0BL@EBKLKADF@invalid?5format?5option?5?8?$CFc?8?$AA@ DB 'invalid fo'
	DB	'rmat option ''%c''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KNDEAFDL@missing?5size?5for?5format?5option?5?8@
CONST	SEGMENT
??_C@_0CD@KNDEAFDL@missing?5size?5for?5format?5option?5?8@ DB 'missing si'
	DB	'ze for format option ''c''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CNGGJHEE@integral?5size?5?$CI?$CFd?$CJ?5out?5of?5limits@
CONST	SEGMENT
??_C@_0CI@CNGGJHEE@integral?5size?5?$CI?$CFd?$CJ?5out?5of?5limits@ DB 'in'
	DB	'tegral size (%d) out of limits [1,%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8format@
CONST	SEGMENT
??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8format@ DB 'i'
	DB	'nvalid option ''%%%c'' to ''format''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FHCNDFMO@string?5contains?5zeros?$AA@
CONST	SEGMENT
??_C@_0BG@FHCNDFMO@string?5contains?5zeros?$AA@ DB 'string contains zeros'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02IIDLDAAC@ll?$AA@
CONST	SEGMENT
??_C@_02IIDLDAAC@ll?$AA@ DB 'll', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JEIPHCP@no?5value?$AA@
CONST	SEGMENT
??_C@_08JEIPHCP@no?5value?$AA@ DB 'no value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precisi@
CONST	SEGMENT
??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precisi@ DB 'invalid f'
	DB	'ormat (width or precision too long)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ?$AA@
CONST	SEGMENT
??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ?$AA@ DB 'inva'
	DB	'lid format (repeated flags)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGBDHNF@?9?$CL?5?$CD0?$AA@
CONST	SEGMENT
??_C@_05GGBDHNF@?9?$CL?5?$CD0?$AA@ DB '-+ #0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLMHDLGP@?2?$CF03d?$AA@
CONST	SEGMENT
??_C@_05OLMHDLGP@?2?$CF03d?$AA@ DB '\%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GAHHLKFB@?2?$CFd?$AA@
CONST	SEGMENT
??_C@_03GAHHLKFB@?2?$CFd?$AA@ DB '\%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PPPOBACA@string?1function?1table?5expected?$AA@
CONST	SEGMENT
??_C@_0BP@PPPOBACA@string?1function?1table?5expected?$AA@ DB 'string/func'
	DB	'tion/table expected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LPDIHGGA@invalid?5replacement?5value?5?$CIa?5?$CFs?$CJ@
CONST	SEGMENT
??_C@_0CB@LPDIHGGA@invalid?5replacement?5value?5?$CIa?5?$CFs?$CJ@ DB 'inv'
	DB	'alid replacement value (a %s)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KLCOLAN@invalid?5use?5of?5?8?$CFc?8?5in?5replaceme@
CONST	SEGMENT
??_C@_0CK@KLCOLAN@invalid?5use?5of?5?8?$CFc?8?5in?5replaceme@ DB 'invalid'
	DB	' use of ''%c'' in replacement string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NLFJOONJ@?$FO$?$CK?$CL?$DP?4?$CI?$FL?$CF?9?$AA@
CONST	SEGMENT
??_C@_0L@NLFJOONJ@?$FO$?$CK?$CL?$DP?4?$CI?$FL?$CF?9?$AA@ DB '^$*+?.([%-', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BFKNEALP@unfinished?5capture?$AA@
CONST	SEGMENT
??_C@_0BD@BFKNEALP@unfinished?5capture?$AA@ DB 'unfinished capture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LOJJMDBH@missing?5?8?$FL?8?5after?5?8?$CF?$CFf?8?5in?5patte@
CONST	SEGMENT
??_C@_0CD@LOJJMDBH@missing?5?8?$FL?8?5after?5?8?$CF?$CFf?8?5in?5patte@ DB 'm'
	DB	'issing ''['' after ''%%f'' in pattern', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LPFFPFJG@pattern?5too?5complex?$AA@
CONST	SEGMENT
??_C@_0BE@LPFFPFJG@pattern?5too?5complex?$AA@ DB 'pattern too complex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMEAEJPD@too?5many?5captures?$AA@
CONST	SEGMENT
??_C@_0BC@IMEAEJPD@too?5many?5captures?$AA@ DB 'too many captures', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@FCNHBCLO@malformed?5pattern?5?$CImissing?5argum@
CONST	SEGMENT
??_C@_0CP@FCNHBCLO@malformed?5pattern?5?$CImissing?5argum@ DB 'malformed '
	DB	'pattern (missing arguments to ''%%b'')', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CFGACOGB@malformed?5pattern?5?$CImissing?5?8?$FN?8?$CJ?$AA@
CONST	SEGMENT
??_C@_0CA@CFGACOGB@malformed?5pattern?5?$CImissing?5?8?$FN?8?$CJ?$AA@ DB 'm'
	DB	'alformed pattern (missing '']'')', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PLJBIEHA@malformed?5pattern?5?$CIends?5with?5?8?$CF?$CF@
CONST	SEGMENT
??_C@_0CD@PLJBIEHA@malformed?5pattern?5?$CIends?5with?5?8?$CF?$CF@ DB 'ma'
	DB	'lformed pattern (ends with ''%%'')', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ECNPHIBF@invalid?5pattern?5capture?$AA@
CONST	SEGMENT
??_C@_0BI@ECNPHIBF@invalid?5pattern?5capture?$AA@ DB 'invalid pattern cap'
	DB	'ture', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@
CONST	SEGMENT
??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@ DB 'invalid'
	DB	' capture index %%%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BNLBHKJN@unable?5to?5dump?5given?5function?$AA@
CONST	SEGMENT
??_C@_0BO@BNLBHKJN@unable?5to?5dump?5given?5function?$AA@ DB 'unable to d'
	DB	'ump given function', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@ DB 'value out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@ DB 'string slice too lon'
	DB	'g', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JPPPHHNK@resulting?5string?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BL@JPPPHHNK@resulting?5string?5too?5large?$AA@ DB 'resulting strin'
	DB	'g too large', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$createmetatable DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$str_unpack DD 021H
	DD	imagerel str_unpack
	DD	imagerel str_unpack+190
	DD	imagerel $unwind$str_unpack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$str_unpack DD 041021H
	DD	01ce410H
	DD	01bc408H
	DD	imagerel str_unpack
	DD	imagerel str_unpack+190
	DD	imagerel $unwind$str_unpack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_unpack DD 092619H
	DD	01d3418H
	DD	0140118H
	DD	0d00af00cH
	DD	060077008H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$unpackint DD 021H
	DD	imagerel unpackint
	DD	imagerel unpackint+216
	DD	imagerel $unwind$unpackint
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$unpackint DD 040a21H
	DD	0ee40aH
	DD	0d6405H
	DD	imagerel unpackint
	DD	imagerel unpackint+216
	DD	imagerel $unwind$unpackint
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unpackint DD 081601H
	DD	0f3416H
	DD	0f0125216H
	DD	0c00ed010H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$str_packsize DD 021H
	DD	imagerel str_packsize
	DD	imagerel str_packsize+61
	DD	imagerel $unwind$str_packsize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$str_packsize DD 0a1921H
	DD	06f419H
	DD	077414H
	DD	08640fH
	DD	0f540aH
	DD	0e3405H
	DD	imagerel str_packsize
	DD	imagerel str_packsize+61
	DD	imagerel $unwind$str_packsize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_packsize DD 030801H
	DD	0e0048208H
	DD	0c002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$str_pack DD 021H
	DD	imagerel str_pack
	DD	imagerel str_pack+128
	DD	imagerel $unwind$str_pack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$str_pack DD 061821H
	DD	0423f418H
	DD	04227410H
	DD	04216408H
	DD	imagerel str_pack
	DD	imagerel str_pack+128
	DD	imagerel $unwind$str_pack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_pack DD 072f19H
	DD	041a011eH
	DD	0d007e009H
	DD	03003c005H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	020c8H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$packint DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$getdetails DD 021H
	DD	imagerel getdetails+122
	DD	imagerel getdetails+130
	DD	imagerel $chain$1$getdetails
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$getdetails DD 020521H
	DD	085405H
	DD	imagerel getdetails+122
	DD	imagerel getdetails+130
	DD	imagerel $chain$1$getdetails
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$getdetails DD 021H
	DD	imagerel getdetails
	DD	imagerel getdetails+16
	DD	imagerel $unwind$getdetails
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$getdetails DD 020521H
	DD	09e405H
	DD	imagerel getdetails
	DD	imagerel getdetails+16
	DD	imagerel $unwind$getdetails
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getdetails DD 060d01H
	DD	0a340dH
	DD	0f009320dH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getoption DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getnumlimit DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_format DD 0d3e19H
	DD	041b742dH
	DD	041a642dH
	DD	0419342dH
	DD	0412012dH
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	02080H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scanformat DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$addquoted DD 041919H
	DD	0d340aH
	DD	07006720aH
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_gsub DD 0d3e19H
	DD	0461742dH
	DD	0460642dH
	DD	045f342dH
	DD	0458012dH
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	022b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_value DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_s DD 0a1601H
	DD	0c5416H
	DD	0b3416H
	DD	0f0123216H
	DD	0d00ee010H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gmatch DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gmatch_aux DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$str_find_aux DD 021H
	DD	imagerel str_find_aux
	DD	imagerel str_find_aux+188
	DD	imagerel $unwind$str_find_aux
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$str_find_aux DD 020821H
	DD	0577408H
	DD	imagerel str_find_aux
	DD	imagerel str_find_aux+188
	DD	imagerel $unwind$str_find_aux
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_find_aux DD 0b3319H
	DD	0596422H
	DD	0583422H
	DD	0500122H
	DD	0e011f013H
	DD	0c00dd00fH
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0270H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$nospecials DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$push_captures DD 020021H
	DD	0a6400H
	DD	imagerel push_captures
	DD	imagerel push_captures+83
	DD	imagerel $unwind$push_captures
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$push_captures DD 021H
	DD	imagerel push_captures
	DD	imagerel push_captures+83
	DD	imagerel $unwind$push_captures
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$push_captures DD 020521H
	DD	0a6405H
	DD	imagerel push_captures
	DD	imagerel push_captures+83
	DD	imagerel $unwind$push_captures
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$push_captures DD 0a1701H
	DD	0c5417H
	DD	0b3417H
	DD	0f0133217H
	DD	0d00fe011H
	DD	0700bc00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$push_onecapture DD 040021H
	DD	077400H
	DD	066400H
	DD	imagerel push_onecapture
	DD	imagerel push_onecapture+65
	DD	imagerel $unwind$push_onecapture
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$push_onecapture DD 040d21H
	DD	07740dH
	DD	066405H
	DD	imagerel push_onecapture
	DD	imagerel push_onecapture+65
	DD	imagerel $unwind$push_onecapture
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$push_onecapture DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$lmemfind DD 020021H
	DD	063400H
	DD	imagerel lmemfind
	DD	imagerel lmemfind+55
	DD	imagerel $unwind$lmemfind
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$lmemfind DD 021H
	DD	imagerel lmemfind
	DD	imagerel lmemfind+55
	DD	imagerel $unwind$lmemfind
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$lmemfind DD 020521H
	DD	063405H
	DD	imagerel lmemfind
	DD	imagerel lmemfind+55
	DD	imagerel $unwind$lmemfind
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lmemfind DD 081501H
	DD	097415H
	DD	086415H
	DD	075415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$match_capture DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$end_capture DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$start_capture DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$min_expand DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$max_expand DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$matchbalance DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$matchbracketclass DD 021H
	DD	imagerel matchbracketclass
	DD	imagerel matchbracketclass+45
	DD	imagerel $unwind$matchbracketclass
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$matchbracketclass DD 061221H
	DD	0ce412H
	DD	0b740dH
	DD	0a6405H
	DD	imagerel matchbracketclass
	DD	imagerel matchbracketclass+45
	DD	imagerel $unwind$matchbracketclass
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$matchbracketclass DD 060d01H
	DD	0f009320dH
	DD	0c005d007H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$match_class DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$classend DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$match DD 021H
	DD	imagerel match
	DD	imagerel match+66
	DD	imagerel $unwind$match
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$match DD 020521H
	DD	065405H
	DD	imagerel match
	DD	imagerel match+66
	DD	imagerel $unwind$match
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$match DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_dump DD 052519H
	DD	040d3413H
	DD	040a0113H
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	02040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$writer DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$str_char DD 021H
	DD	imagerel str_char
	DD	imagerel str_char+88
	DD	imagerel $unwind$str_char
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$str_char DD 020821H
	DD	040f6408H
	DD	imagerel str_char
	DD	imagerel str_char+88
	DD	imagerel $unwind$str_char
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_char DD 092e19H
	DD	0411541cH
	DD	0410341cH
	DD	040a011cH
	DD	0e00df00fH
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	02040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_byte DD 0a1601H
	DD	0c5416H
	DD	0a3416H
	DD	0f0123216H
	DD	0c00ee010H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$str_rep DD 021H
	DD	imagerel str_rep
	DD	imagerel str_rep+177
	DD	imagerel $unwind$str_rep
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$str_rep DD 041021H
	DD	0412e410H
	DD	04117408H
	DD	imagerel str_rep
	DD	imagerel str_rep+177
	DD	imagerel $unwind$str_rep
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_rep DD 072819H
	DD	04133416H
	DD	040c0116H
	DD	06007f009H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	02050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$str_upper DD 021H
	DD	imagerel str_upper
	DD	imagerel str_upper+89
	DD	imagerel $unwind$str_upper
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$str_upper DD 020821H
	DD	040f7408H
	DD	imagerel str_upper
	DD	imagerel str_upper+89
	DD	imagerel $unwind$str_upper
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_upper DD 052519H
	DD	04103413H
	DD	040c0113H
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	02050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$str_lower DD 021H
	DD	imagerel str_lower
	DD	imagerel str_lower+89
	DD	imagerel $unwind$str_lower
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$str_lower DD 020821H
	DD	040f7408H
	DD	imagerel str_lower
	DD	imagerel str_lower+89
	DD	imagerel $unwind$str_lower
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_lower DD 052519H
	DD	04103413H
	DD	040c0113H
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	02050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_reverse DD 052519H
	DD	040f3413H
	DD	040c0113H
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	02050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_sub DD 081201H
	DD	0a5412H
	DD	083412H
	DD	0e00e3212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_len DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaopen_string DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT createmetatable
_TEXT	SEGMENT
L$ = 48
createmetatable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1533
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1534
  00006	33 d2		 xor	 edx, edx
  00008	48 8b d9	 mov	 rbx, rcx
  0000b	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  0000f	e8 00 00 00 00	 call	 lua_createtable
; Line 1535
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0001b	48 8b cb	 mov	 rcx, rbx
  0001e	e8 00 00 00 00	 call	 lua_pushstring
; Line 1536
  00023	ba fe ff ff ff	 mov	 edx, -2
  00028	48 8b cb	 mov	 rcx, rbx
  0002b	e8 00 00 00 00	 call	 lua_pushvalue
; Line 1537
  00030	ba fe ff ff ff	 mov	 edx, -2
  00035	48 8b cb	 mov	 rcx, rbx
  00038	e8 00 00 00 00	 call	 lua_setmetatable
; Line 1538
  0003d	ba fe ff ff ff	 mov	 edx, -2
  00042	48 8b cb	 mov	 rcx, rbx
  00045	e8 00 00 00 00	 call	 lua_settop
; Line 1539
  0004a	ba fe ff ff ff	 mov	 edx, -2
  0004f	48 8b cb	 mov	 rcx, rbx
  00052	e8 00 00 00 00	 call	 lua_pushvalue
; Line 1540
  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07NHABFFHN@__index?$AA@
  0005e	ba fe ff ff ff	 mov	 edx, -2
  00063	48 8b cb	 mov	 rcx, rbx
  00066	e8 00 00 00 00	 call	 lua_setfield
; Line 1541
  0006b	ba fe ff ff ff	 mov	 edx, -2
  00070	48 8b cb	 mov	 rcx, rbx
; Line 1542
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5b		 pop	 rbx
; Line 1541
  00078	e9 00 00 00 00	 jmp	 lua_settop
createmetatable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_unpack
_TEXT	SEGMENT
align$1 = 48
size$2 = 52
n$1$ = 56
data$1$ = 64
h$ = 72
fmt$ = 88
ld$ = 96
u$3 = 104
__$ArrayPad$ = 144
L$ = 208
str_unpack PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1445
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 55		 push	 r13
  0000a	41 57		 push	 r15
  0000c	48 8d 6c 24 c9	 lea	 rbp, QWORD PTR [rsp-55]
  00011	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 45 27	 mov	 QWORD PTR __$ArrayPad$[rbp-105], rax
; Line 1447
  00026	45 33 c0	 xor	 r8d, r8d
  00029	4c 8b e9	 mov	 r13, rcx
  0002c	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00030	e8 00 00 00 00	 call	 luaL_checklstring
; Line 1449
  00035	4c 8d 45 f7	 lea	 r8, QWORD PTR ld$[rbp-105]
  00039	ba 02 00 00 00	 mov	 edx, 2
  0003e	49 8b cd	 mov	 rcx, r13
  00041	48 8b f8	 mov	 rdi, rax
  00044	48 89 45 ef	 mov	 QWORD PTR fmt$[rbp-105], rax
  00048	e8 00 00 00 00	 call	 luaL_checklstring
; Line 1450
  0004d	48 8b 5d f7	 mov	 rbx, QWORD PTR ld$[rbp-105]
  00051	ba 03 00 00 00	 mov	 edx, 3
  00056	44 8d 42 fe	 lea	 r8d, QWORD PTR [rdx-2]
  0005a	49 8b cd	 mov	 rcx, r13
  0005d	48 89 45 d7	 mov	 QWORD PTR data$1$[rbp-105], rax
  00061	e8 00 00 00 00	 call	 luaL_optinteger
  00066	48 8b f0	 mov	 rsi, rax
  00069	48 85 c0	 test	 rax, rax
  0006c	79 12		 jns	 SHORT $LN21@str_unpack
  0006e	48 f7 d8	 neg	 rax
  00071	48 3b c3	 cmp	 rax, rbx
  00074	76 04		 jbe	 SHORT $LN22@str_unpack
  00076	33 f6		 xor	 esi, esi
  00078	eb 06		 jmp	 SHORT $LN21@str_unpack
$LN22@str_unpack:
  0007a	48 ff c6	 inc	 rsi
  0007d	48 03 f3	 add	 rsi, rbx
$LN21@str_unpack:
; Line 1451
  00080	45 33 ff	 xor	 r15d, r15d
  00083	48 ff ce	 dec	 rsi
  00086	44 89 7d cf	 mov	 DWORD PTR n$1$[rbp-105], r15d
; Line 1452
  0008a	48 3b 75 f7	 cmp	 rsi, QWORD PTR ld$[rbp-105]
  0008e	76 13		 jbe	 SHORT $LN19@str_unpack
  00090	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BP@MEEJFMAG@initial?5position?5out?5of?5string?$AA@
  00097	41 8d 57 03	 lea	 edx, QWORD PTR [r15+3]
  0009b	49 8b cd	 mov	 rcx, r13
  0009e	e8 00 00 00 00	 call	 luaL_argerror
$LN19@str_unpack:
; Line 1453
  000a3	4c 89 6d df	 mov	 QWORD PTR h$[rbp-105], r13
  000a7	c7 45 e7 01 00
	00 00		 mov	 DWORD PTR h$[rbp-97], 1
  000ae	c7 45 eb 01 00
	00 00		 mov	 DWORD PTR h$[rbp-93], 1
; Line 1454
  000b5	44 38 3f	 cmp	 BYTE PTR [rdi], r15b
  000b8	0f 84 b8 02 00
	00		 je	 $LN15@str_unpack
  000be	4c 89 a4 24 d8
	00 00 00	 mov	 QWORD PTR [rsp+216], r12
  000c6	4c 89 b4 24 e0
	00 00 00	 mov	 QWORD PTR [rsp+224], r14
  000ce	66 90		 npad	 2
$LL16@str_unpack:
; Line 1456
  000d0	4c 8d 45 cb	 lea	 r8, QWORD PTR size$2[rbp-105]
  000d4	48 8d 55 ef	 lea	 rdx, QWORD PTR fmt$[rbp-105]
  000d8	48 8d 4d df	 lea	 rcx, QWORD PTR h$[rbp-105]
  000dc	e8 00 00 00 00	 call	 getoption
  000e1	48 63 5d cb	 movsxd	 rbx, DWORD PTR size$2[rbp-105]
  000e5	4c 63 e0	 movsxd	 r12, eax
  000e8	8b fb		 mov	 edi, ebx
  000ea	89 5d c7	 mov	 DWORD PTR align$1[rbp-105], ebx
  000ed	41 83 fc 07	 cmp	 r12d, 7
  000f1	75 40		 jne	 SHORT $LN65@str_unpack
  000f3	48 8b 4d ef	 mov	 rcx, QWORD PTR fmt$[rbp-105]
  000f7	80 39 00	 cmp	 BYTE PTR [rcx], 0
  000fa	74 1d		 je	 SHORT $LN34@str_unpack
  000fc	4c 8d 45 c7	 lea	 r8, QWORD PTR align$1[rbp-105]
  00100	48 8d 55 ef	 lea	 rdx, QWORD PTR fmt$[rbp-105]
  00104	48 8d 4d df	 lea	 rcx, QWORD PTR h$[rbp-105]
  00108	e8 00 00 00 00	 call	 getoption
  0010d	8b 7d c7	 mov	 edi, DWORD PTR align$1[rbp-105]
  00110	83 f8 03	 cmp	 eax, 3
  00113	74 04		 je	 SHORT $LN34@str_unpack
  00115	85 ff		 test	 edi, edi
  00117	75 1a		 jne	 SHORT $LN65@str_unpack
$LN34@str_unpack:
  00119	4c 8b 75 df	 mov	 r14, QWORD PTR h$[rbp-105]
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@
  00124	ba 01 00 00 00	 mov	 edx, 1
  00129	49 8b ce	 mov	 rcx, r14
  0012c	e8 00 00 00 00	 call	 luaL_argerror
  00131	eb 04		 jmp	 SHORT $LN35@str_unpack
$LN65@str_unpack:
  00133	4c 8b 75 df	 mov	 r14, QWORD PTR h$[rbp-105]
$LN35@str_unpack:
  00137	83 ff 01	 cmp	 edi, 1
  0013a	7e 3d		 jle	 SHORT $LN32@str_unpack
  0013c	41 83 fc 03	 cmp	 r12d, 3
  00140	74 37		 je	 SHORT $LN32@str_unpack
  00142	3b 7d eb	 cmp	 edi, DWORD PTR h$[rbp-93]
  00145	0f 4f 7d eb	 cmovg	 edi, DWORD PTR h$[rbp-93]
  00149	89 7d c7	 mov	 DWORD PTR align$1[rbp-105], edi
  0014c	44 8d 7f ff	 lea	 r15d, DWORD PTR [rdi-1]
  00150	44 85 ff	 test	 r15d, edi
  00153	74 14		 je	 SHORT $LN29@str_unpack
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@
  0015c	ba 01 00 00 00	 mov	 edx, 1
  00161	49 8b ce	 mov	 rcx, r14
  00164	e8 00 00 00 00	 call	 luaL_argerror
$LN29@str_unpack:
  00169	41 8b c7	 mov	 eax, r15d
  0016c	23 c6		 and	 eax, esi
  0016e	2b f8		 sub	 edi, eax
  00170	41 23 ff	 and	 edi, r15d
  00173	44 8b 7d cf	 mov	 r15d, DWORD PTR n$1$[rbp-105]
  00177	eb 02		 jmp	 SHORT $LN31@str_unpack
$LN32@str_unpack:
  00179	33 ff		 xor	 edi, edi
$LN31@str_unpack:
; Line 1457
  0017b	48 63 ff	 movsxd	 rdi, edi
  0017e	48 8b c6	 mov	 rax, rsi
  00181	4c 8b f3	 mov	 r14, rbx
  00184	48 8d 0c 1f	 lea	 rcx, QWORD PTR [rdi+rbx]
  00188	48 f7 d0	 not	 rax
  0018b	48 3b c8	 cmp	 rcx, rax
  0018e	77 0a		 ja	 SHORT $LN13@str_unpack
  00190	48 8d 04 31	 lea	 rax, QWORD PTR [rcx+rsi]
  00194	48 3b 45 f7	 cmp	 rax, QWORD PTR ld$[rbp-105]
  00198	76 14		 jbe	 SHORT $LN14@str_unpack
$LN13@str_unpack:
; Line 1458
  0019a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@KKKAHMHM@data?5string?5too?5short?$AA@
  001a1	ba 02 00 00 00	 mov	 edx, 2
  001a6	49 8b cd	 mov	 rcx, r13
  001a9	e8 00 00 00 00	 call	 luaL_argerror
$LN14@str_unpack:
; Line 1461
  001ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@JAJHLPBA@too?5many?5results?$AA@
  001b5	ba 02 00 00 00	 mov	 edx, 2
  001ba	49 8b cd	 mov	 rcx, r13
  001bd	48 03 f7	 add	 rsi, rdi
  001c0	e8 00 00 00 00	 call	 luaL_checkstack
; Line 1462
  001c5	41 ff c7	 inc	 r15d
  001c8	44 89 7d cf	 mov	 DWORD PTR n$1$[rbp-105], r15d
; Line 1463
  001cc	41 83 fc 08	 cmp	 r12d, 8
  001d0	0f 87 80 01 00
	00		 ja	 $LN11@str_unpack
  001d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  001dd	42 8b 8c a2 00
	00 00 00	 mov	 ecx, DWORD PTR $LN62@str_unpack[rdx+r12*4]
  001e5	48 03 ca	 add	 rcx, rdx
  001e8	ff e1		 jmp	 rcx
$LN10@str_unpack:
; Line 1467
  001ea	48 8b 55 d7	 mov	 rdx, QWORD PTR data$1$[rbp-105]
  001ee	44 8b 45 e7	 mov	 r8d, DWORD PTR h$[rbp-97]
  001f2	33 c0		 xor	 eax, eax
  001f4	45 85 e4	 test	 r12d, r12d
  001f7	44 8b cb	 mov	 r9d, ebx
  001fa	49 8b cd	 mov	 rcx, r13
  001fd	0f 94 c0	 sete	 al
  00200	48 03 d6	 add	 rdx, rsi
  00203	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00207	e8 00 00 00 00	 call	 unpackint
; Line 1468
  0020c	49 8b cd	 mov	 rcx, r13
  0020f	48 8b d0	 mov	 rdx, rax
  00212	e8 00 00 00 00	 call	 lua_pushinteger
; Line 1469
  00217	e9 3a 01 00 00	 jmp	 $LN11@str_unpack
$LN9@str_unpack:
; Line 1474
  0021c	48 8b 55 d7	 mov	 rdx, QWORD PTR data$1$[rbp-105]
  00220	48 03 d6	 add	 rdx, rsi
  00223	83 7d e7 01	 cmp	 DWORD PTR h$[rbp-97], 1
  00227	75 28		 jne	 SHORT $LN44@str_unpack
  00229	85 db		 test	 ebx, ebx
  0022b	74 59		 je	 SHORT $LN52@str_unpack
  0022d	48 8d 4d ff	 lea	 rcx, QWORD PTR u$3[rbp-105]
  00231	48 2b ca	 sub	 rcx, rdx
  00234	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL43@str_unpack:
  00240	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00243	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  00247	88 44 11 ff	 mov	 BYTE PTR [rcx+rdx-1], al
  0024b	ff cb		 dec	 ebx
  0024d	75 f1		 jne	 SHORT $LL43@str_unpack
  0024f	eb 32		 jmp	 SHORT $LN66@str_unpack
$LN44@str_unpack:
  00251	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  00254	4c 8d 45 ff	 lea	 r8, QWORD PTR u$3[rbp-105]
  00258	48 63 c8	 movsxd	 rcx, eax
  0025b	4c 03 c1	 add	 r8, rcx
  0025e	85 db		 test	 ebx, ebx
  00260	74 24		 je	 SHORT $LN52@str_unpack
  00262	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL40@str_unpack:
  00270	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00273	4d 8d 40 ff	 lea	 r8, QWORD PTR [r8-1]
  00277	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  0027b	41 88 40 01	 mov	 BYTE PTR [r8+1], al
  0027f	ff cb		 dec	 ebx
  00281	75 ed		 jne	 SHORT $LL40@str_unpack
$LN66@str_unpack:
  00283	8b 5d cb	 mov	 ebx, DWORD PTR size$2[rbp-105]
$LN52@str_unpack:
; Line 1475
  00286	83 fb 04	 cmp	 ebx, 4
  00289	75 15		 jne	 SHORT $LN8@str_unpack
  0028b	f3 0f 10 45 ff	 movss	 xmm0, DWORD PTR u$3[rbp-105]
; Line 1478
  00290	49 8b cd	 mov	 rcx, r13
  00293	0f 5a c8	 cvtps2pd xmm1, xmm0
  00296	e8 00 00 00 00	 call	 lua_pushnumber
; Line 1479
  0029b	e9 b6 00 00 00	 jmp	 $LN11@str_unpack
$LN8@str_unpack:
; Line 1476
  002a0	f2 0f 10 4d ff	 movsdx	 xmm1, QWORD PTR u$3[rbp-105]
; Line 1478
  002a5	49 8b cd	 mov	 rcx, r13
  002a8	e8 00 00 00 00	 call	 lua_pushnumber
; Line 1479
  002ad	e9 a4 00 00 00	 jmp	 $LN11@str_unpack
$LN4@str_unpack:
; Line 1482
  002b2	48 8b 55 d7	 mov	 rdx, QWORD PTR data$1$[rbp-105]
  002b6	4c 8b c3	 mov	 r8, rbx
  002b9	49 8b cd	 mov	 rcx, r13
  002bc	48 03 d6	 add	 rdx, rsi
  002bf	e8 00 00 00 00	 call	 lua_pushlstring
; Line 1483
  002c4	e9 8d 00 00 00	 jmp	 $LN11@str_unpack
$LN3@str_unpack:
; Line 1486
  002c9	48 8b 7d d7	 mov	 rdi, QWORD PTR data$1$[rbp-105]
  002cd	44 8b 45 e7	 mov	 r8d, DWORD PTR h$[rbp-97]
  002d1	44 8b cb	 mov	 r9d, ebx
  002d4	48 8d 14 3e	 lea	 rdx, QWORD PTR [rsi+rdi]
  002d8	49 8b cd	 mov	 rcx, r13
  002db	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  002e3	e8 00 00 00 00	 call	 unpackint
  002e8	48 8b d8	 mov	 rbx, rax
; Line 1487
  002eb	49 8d 0c 06	 lea	 rcx, QWORD PTR [r14+rax]
  002ef	48 03 ce	 add	 rcx, rsi
  002f2	48 3b 4d f7	 cmp	 rcx, QWORD PTR ld$[rbp-105]
  002f6	76 14		 jbe	 SHORT $LN20@str_unpack
  002f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@KKKAHMHM@data?5string?5too?5short?$AA@
  002ff	ba 02 00 00 00	 mov	 edx, 2
  00304	49 8b cd	 mov	 rcx, r13
  00307	e8 00 00 00 00	 call	 luaL_argerror
$LN20@str_unpack:
; Line 1488
  0030c	49 8d 14 36	 lea	 rdx, QWORD PTR [r14+rsi]
  00310	4c 8b c3	 mov	 r8, rbx
  00313	49 8b cd	 mov	 rcx, r13
  00316	48 03 d7	 add	 rdx, rdi
  00319	e8 00 00 00 00	 call	 lua_pushlstring
; Line 1489
  0031e	48 03 f3	 add	 rsi, rbx
; Line 1490
  00321	eb 33		 jmp	 SHORT $LN11@str_unpack
$LN2@str_unpack:
; Line 1493
  00323	48 8b 55 d7	 mov	 rdx, QWORD PTR data$1$[rbp-105]
  00327	48 03 d6	 add	 rdx, rsi
  0032a	48 83 c8 ff	 or	 rax, -1
  0032e	66 90		 npad	 2
$LL61@str_unpack:
  00330	48 ff c0	 inc	 rax
  00333	80 3c 02 00	 cmp	 BYTE PTR [rdx+rax], 0
  00337	75 f7		 jne	 SHORT $LL61@str_unpack
  00339	48 63 d8	 movsxd	 rbx, eax
; Line 1494
  0033c	49 8b cd	 mov	 rcx, r13
  0033f	4c 8b c3	 mov	 r8, rbx
  00342	e8 00 00 00 00	 call	 lua_pushlstring
; Line 1495
  00347	48 ff c6	 inc	 rsi
  0034a	48 03 f3	 add	 rsi, rbx
; Line 1496
  0034d	eb 07		 jmp	 SHORT $LN11@str_unpack
$LN1@str_unpack:
; Line 1499
  0034f	41 ff cf	 dec	 r15d
  00352	44 89 7d cf	 mov	 DWORD PTR n$1$[rbp-105], r15d
$LN11@str_unpack:
; Line 1502
  00356	48 8b 45 ef	 mov	 rax, QWORD PTR fmt$[rbp-105]
  0035a	49 03 f6	 add	 rsi, r14
  0035d	80 38 00	 cmp	 BYTE PTR [rax], 0
  00360	0f 85 6a fd ff
	ff		 jne	 $LL16@str_unpack
  00366	4c 8b b4 24 e0
	00 00 00	 mov	 r14, QWORD PTR [rsp+224]
  0036e	4c 8b a4 24 d8
	00 00 00	 mov	 r12, QWORD PTR [rsp+216]
$LN15@str_unpack:
; Line 1504
  00376	48 8d 56 01	 lea	 rdx, QWORD PTR [rsi+1]
  0037a	49 8b cd	 mov	 rcx, r13
  0037d	e8 00 00 00 00	 call	 lua_pushinteger
; Line 1505
  00382	41 8d 47 01	 lea	 eax, DWORD PTR [r15+1]
; Line 1506
  00386	48 8b 4d 27	 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-105]
  0038a	48 33 cc	 xor	 rcx, rsp
  0038d	e8 00 00 00 00	 call	 __security_check_cookie
  00392	48 8b 9c 24 e8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+232]
  0039a	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  003a1	41 5f		 pop	 r15
  003a3	41 5d		 pop	 r13
  003a5	5f		 pop	 rdi
  003a6	5e		 pop	 rsi
  003a7	5d		 pop	 rbp
  003a8	c3		 ret	 0
  003a9	0f 1f 00	 npad	 3
$LN62@str_unpack:
  003ac	00 00 00 00	 DD	 $LN10@str_unpack
  003b0	00 00 00 00	 DD	 $LN10@str_unpack
  003b4	00 00 00 00	 DD	 $LN9@str_unpack
  003b8	00 00 00 00	 DD	 $LN4@str_unpack
  003bc	00 00 00 00	 DD	 $LN3@str_unpack
  003c0	00 00 00 00	 DD	 $LN2@str_unpack
  003c4	00 00 00 00	 DD	 $LN1@str_unpack
  003c8	00 00 00 00	 DD	 $LN1@str_unpack
  003cc	00 00 00 00	 DD	 $LN1@str_unpack
str_unpack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT unpackint
_TEXT	SEGMENT
res$2$ = 32
L$ = 96
str$ = 104
islittle$ = 112
size$ = 120
issigned$ = 128
unpackint PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1420
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 55		 push	 r13
  00010	41 57		 push	 r15
  00012	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00016	49 63 e9	 movsxd	 rbp, r9d
; Line 1421
  00019	45 33 ed	 xor	 r13d, r13d
  0001c	45 8b f8	 mov	 r15d, r8d
; Line 1423
  0001f	41 b8 08 00 00
	00		 mov	 r8d, 8
  00025	41 8b dd	 mov	 ebx, r13d
  00028	4c 8b e2	 mov	 r12, rdx
  0002b	41 3b e8	 cmp	 ebp, r8d
  0002e	48 89 5c 24 20	 mov	 QWORD PTR res$2$[rsp], rbx
  00033	48 8b fd	 mov	 rdi, rbp
  00036	44 0f 4e c5	 cmovle	 r8d, ebp
; Line 1424
  0003a	45 8d 50 ff	 lea	 r10d, DWORD PTR [r8-1]
  0003e	45 85 d2	 test	 r10d, r10d
  00041	78 33		 js	 SHORT $LN9@unpackint
  00043	49 63 d2	 movsxd	 rdx, r10d
  00046	48 8b cd	 mov	 rcx, rbp
  00049	48 2b ca	 sub	 rcx, rdx
  0004c	48 ff c9	 dec	 rcx
  0004f	90		 npad	 1
$LL11@unpackint:
; Line 1425
  00050	48 c1 e3 08	 shl	 rbx, 8
; Line 1426
  00054	48 8b c1	 mov	 rax, rcx
  00057	45 85 ff	 test	 r15d, r15d
  0005a	48 0f 45 c2	 cmovne	 rax, rdx
  0005e	48 ff ca	 dec	 rdx
  00061	48 ff c1	 inc	 rcx
  00064	42 0f b6 04 20	 movzx	 eax, BYTE PTR [rax+r12]
  00069	48 0b d8	 or	 rbx, rax
  0006c	41 ff ca	 dec	 r10d
  0006f	79 df		 jns	 SHORT $LL11@unpackint
  00071	48 89 5c 24 20	 mov	 QWORD PTR res$2$[rsp], rbx
$LN9@unpackint:
; Line 1428
  00076	83 fd 08	 cmp	 ebp, 8
  00079	7d 38		 jge	 SHORT $LN31@unpackint
; Line 1429
  0007b	44 39 ac 24 80
	00 00 00	 cmp	 DWORD PTR issigned$[rsp], r13d
  00083	0f 84 ba 00 00
	00		 je	 $LN28@unpackint
; Line 1430
  00089	8d 0c ed ff ff
	ff ff		 lea	 ecx, DWORD PTR [rbp*8-1]
  00090	ba 01 00 00 00	 mov	 edx, 1
  00095	48 d3 e2	 shl	 rdx, cl
; Line 1431
  00098	48 8b c2	 mov	 rax, rdx
  0009b	48 33 c3	 xor	 rax, rbx
  0009e	48 2b c2	 sub	 rax, rdx
; Line 1442
  000a1	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  000a6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000aa	41 5f		 pop	 r15
  000ac	41 5d		 pop	 r13
  000ae	41 5c		 pop	 r12
  000b0	5f		 pop	 rdi
  000b1	5d		 pop	 rbp
  000b2	c3		 ret	 0
$LN31@unpackint:
; Line 1434
  000b3	0f 8e 8a 00 00
	00		 jle	 $LN28@unpackint
; Line 1435
  000b9	44 39 ac 24 80
	00 00 00	 cmp	 DWORD PTR issigned$[rsp], r13d
  000c1	74 0b		 je	 SHORT $LN16@unpackint
  000c3	48 85 db	 test	 rbx, rbx
  000c6	79 06		 jns	 SHORT $LN16@unpackint
  000c8	41 bd ff 00 00
	00		 mov	 r13d, 255		; 000000ffH
$LN16@unpackint:
; Line 1436
  000ce	44 3b c5	 cmp	 r8d, ebp
  000d1	7d 70		 jge	 SHORT $LN28@unpackint
  000d3	48 8b 5c 24 60	 mov	 rbx, QWORD PTR L$[rsp]
  000d8	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  000dd	4c 89 74 24 70	 mov	 QWORD PTR [rsp+112], r14
  000e2	49 63 f0	 movsxd	 rsi, r8d
  000e5	44 8b f5	 mov	 r14d, ebp
  000e8	48 2b fe	 sub	 rdi, rsi
  000eb	48 ff cf	 dec	 rdi
  000ee	45 2b f0	 sub	 r14d, r8d
$LL4@unpackint:
; Line 1437
  000f1	45 85 ff	 test	 r15d, r15d
  000f4	48 8b c7	 mov	 rax, rdi
  000f7	48 0f 45 c6	 cmovne	 rax, rsi
  000fb	42 0f b6 04 20	 movzx	 eax, BYTE PTR [rax+r12]
  00100	41 3b c5	 cmp	 eax, r13d
  00103	74 12		 je	 SHORT $LN3@unpackint
; Line 1438
  00105	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@PPAGINFB@?$CFd?9byte?5integer?5does?5not?5fit?5int@
  0010c	44 8b c5	 mov	 r8d, ebp
  0010f	48 8b cb	 mov	 rcx, rbx
  00112	e8 00 00 00 00	 call	 luaL_error
$LN3@unpackint:
; Line 1436
  00117	48 ff c6	 inc	 rsi
  0011a	48 ff cf	 dec	 rdi
  0011d	49 ff ce	 dec	 r14
  00120	75 cf		 jne	 SHORT $LL4@unpackint
; Line 1441
  00122	48 8b 44 24 20	 mov	 rax, QWORD PTR res$2$[rsp]
  00127	4c 8b 74 24 70	 mov	 r14, QWORD PTR [rsp+112]
  0012c	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
; Line 1442
  00131	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  00136	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013a	41 5f		 pop	 r15
  0013c	41 5d		 pop	 r13
  0013e	41 5c		 pop	 r12
  00140	5f		 pop	 rdi
  00141	5d		 pop	 rbp
  00142	c3		 ret	 0
$LN28@unpackint:
; Line 1441
  00143	48 8b c3	 mov	 rax, rbx
; Line 1442
  00146	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  0014b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0014f	41 5f		 pop	 r15
  00151	41 5d		 pop	 r13
  00153	41 5c		 pop	 r12
  00155	5f		 pop	 rdi
  00156	5d		 pop	 rbp
  00157	c3		 ret	 0
unpackint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_packsize
_TEXT	SEGMENT
h$ = 32
align$1 = 96
size$2 = 96
L$ = 96
fmt$ = 104
str_packsize PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1386
  00000	41 54		 push	 r12
  00002	41 56		 push	 r14
  00004	48 83 ec 48	 sub	 rsp, 72			; 00000048H
; Line 1388
  00008	45 33 c0	 xor	 r8d, r8d
  0000b	4c 8b e1	 mov	 r12, rcx
  0000e	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00012	e8 00 00 00 00	 call	 luaL_checklstring
; Line 1389
  00017	45 33 f6	 xor	 r14d, r14d
; Line 1390
  0001a	4c 89 64 24 20	 mov	 QWORD PTR h$[rsp], r12
  0001f	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR h$[rsp+8], 1
  00027	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR h$[rsp+12], 1
  0002f	48 89 44 24 68	 mov	 QWORD PTR fmt$[rsp], rax
; Line 1391
  00034	44 38 30	 cmp	 BYTE PTR [rax], r14b
  00037	0f 84 41 01 00
	00		 je	 $LN5@str_packsi
  0003d	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  00042	48 89 6c 24 78	 mov	 QWORD PTR [rsp+120], rbp
  00047	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0004c	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00051	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  00056	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL6@str_packsi:
; Line 1393
  00060	4c 8d 44 24 60	 lea	 r8, QWORD PTR size$2[rsp]
  00065	48 8d 54 24 68	 lea	 rdx, QWORD PTR fmt$[rsp]
  0006a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR h$[rsp]
  0006f	e8 00 00 00 00	 call	 getoption
  00074	8b 7c 24 60	 mov	 edi, DWORD PTR size$2[rsp]
  00078	8b df		 mov	 ebx, edi
  0007a	44 8b f8	 mov	 r15d, eax
  0007d	89 5c 24 60	 mov	 DWORD PTR align$1[rsp], ebx
  00081	83 f8 07	 cmp	 eax, 7
  00084	75 46		 jne	 SHORT $LN27@str_packsi
  00086	48 8b 44 24 68	 mov	 rax, QWORD PTR fmt$[rsp]
  0008b	80 38 00	 cmp	 BYTE PTR [rax], 0
  0008e	74 21		 je	 SHORT $LN17@str_packsi
  00090	4c 8d 44 24 60	 lea	 r8, QWORD PTR align$1[rsp]
  00095	48 8d 54 24 68	 lea	 rdx, QWORD PTR fmt$[rsp]
  0009a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR h$[rsp]
  0009f	e8 00 00 00 00	 call	 getoption
  000a4	8b 5c 24 60	 mov	 ebx, DWORD PTR align$1[rsp]
  000a8	83 f8 03	 cmp	 eax, 3
  000ab	74 04		 je	 SHORT $LN17@str_packsi
  000ad	85 db		 test	 ebx, ebx
  000af	75 1b		 jne	 SHORT $LN27@str_packsi
$LN17@str_packsi:
  000b1	48 8b 74 24 20	 mov	 rsi, QWORD PTR h$[rsp]
  000b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@
  000bd	ba 01 00 00 00	 mov	 edx, 1
  000c2	48 8b ce	 mov	 rcx, rsi
  000c5	e8 00 00 00 00	 call	 luaL_argerror
  000ca	eb 05		 jmp	 SHORT $LN18@str_packsi
$LN27@str_packsi:
  000cc	48 8b 74 24 20	 mov	 rsi, QWORD PTR h$[rsp]
$LN18@str_packsi:
  000d1	83 fb 01	 cmp	 ebx, 1
  000d4	7e 35		 jle	 SHORT $LN15@str_packsi
  000d6	41 83 ff 03	 cmp	 r15d, 3
  000da	74 2f		 je	 SHORT $LN15@str_packsi
  000dc	3b 5c 24 2c	 cmp	 ebx, DWORD PTR h$[rsp+12]
  000e0	0f 4f 5c 24 2c	 cmovg	 ebx, DWORD PTR h$[rsp+12]
  000e5	8d 6b ff	 lea	 ebp, DWORD PTR [rbx-1]
  000e8	85 eb		 test	 ebp, ebx
  000ea	74 14		 je	 SHORT $LN12@str_packsi
  000ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@
  000f3	ba 01 00 00 00	 mov	 edx, 1
  000f8	48 8b ce	 mov	 rcx, rsi
  000fb	e8 00 00 00 00	 call	 luaL_argerror
$LN12@str_packsi:
  00100	8b c5		 mov	 eax, ebp
  00102	41 23 c6	 and	 eax, r14d
  00105	2b d8		 sub	 ebx, eax
  00107	23 dd		 and	 ebx, ebp
  00109	eb 02		 jmp	 SHORT $LN14@str_packsi
$LN15@str_packsi:
  0010b	33 db		 xor	 ebx, ebx
$LN14@str_packsi:
; Line 1394
  0010d	03 fb		 add	 edi, ebx
; Line 1396
  0010f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00114	48 63 df	 movsxd	 rbx, edi
  00117	89 7c 24 60	 mov	 DWORD PTR size$2[rsp], edi
  0011b	48 2b c3	 sub	 rax, rbx
  0011e	4c 3b f0	 cmp	 r14, rax
  00121	76 14		 jbe	 SHORT $LN9@str_packsi
  00123	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@IHIBMINB@format?5result?5too?5large?$AA@
  0012a	ba 01 00 00 00	 mov	 edx, 1
  0012f	49 8b cc	 mov	 rcx, r12
  00132	e8 00 00 00 00	 call	 luaL_argerror
$LN9@str_packsi:
; Line 1398
  00137	41 8d 47 fc	 lea	 eax, DWORD PTR [r15-4]
  0013b	4c 03 f3	 add	 r14, rbx
  0013e	83 f8 01	 cmp	 eax, 1
  00141	77 14		 ja	 SHORT $LN1@str_packsi
; Line 1401
  00143	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@BCBEHJHD@variable?9length?5format?$AA@
  0014a	ba 01 00 00 00	 mov	 edx, 1
  0014f	49 8b cc	 mov	 rcx, r12
  00152	e8 00 00 00 00	 call	 luaL_argerror
$LN1@str_packsi:
; Line 1391
  00157	48 8b 4c 24 68	 mov	 rcx, QWORD PTR fmt$[rsp]
  0015c	80 39 00	 cmp	 BYTE PTR [rcx], 0
  0015f	0f 85 fb fe ff
	ff		 jne	 $LL6@str_packsi
  00165	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]
  0016a	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  0016f	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00174	48 8b 6c 24 78	 mov	 rbp, QWORD PTR [rsp+120]
  00179	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
$LN5@str_packsi:
; Line 1406
  0017e	49 8b d6	 mov	 rdx, r14
  00181	49 8b cc	 mov	 rcx, r12
  00184	e8 00 00 00 00	 call	 lua_pushinteger
; Line 1407
  00189	b8 01 00 00 00	 mov	 eax, 1
; Line 1408
  0018e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00192	41 5e		 pop	 r14
  00194	41 5c		 pop	 r12
  00196	c3		 ret	 0
str_packsize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_pack
_TEXT	SEGMENT
align$1 = 48
len$2 = 56
h$ = 64
fmt$ = 80
len$3 = 88
L$GSCopy$1$ = 96
len$4 = 104
size$5 = 112
b$ = 128
u$6 = 8352
__$ArrayPad$ = 8392
L$ = 8448
str_pack PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1297
  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	41 54		 push	 r12
  00005	41 55		 push	 r13
  00007	41 56		 push	 r14
  00009	48 8d ac 24 30
	e0 ff ff	 lea	 rbp, QWORD PTR [rsp-8144]
  00011	b8 d0 20 00 00	 mov	 eax, 8400		; 000020d0H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	48 2b e0	 sub	 rsp, rax
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c4	 xor	 rax, rsp
  00028	48 89 85 c8 1f
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax
; Line 1300
  0002f	45 33 c0	 xor	 r8d, r8d
  00032	4c 8b f1	 mov	 r14, rcx
  00035	48 89 4c 24 60	 mov	 QWORD PTR L$GSCopy$1$[rsp], rcx
  0003a	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  0003e	e8 00 00 00 00	 call	 luaL_checklstring
; Line 1301
  00043	41 bc 01 00 00
	00		 mov	 r12d, 1
; Line 1304
  00049	49 8b ce	 mov	 rcx, r14
  0004c	45 33 ed	 xor	 r13d, r13d
  0004f	4c 89 74 24 40	 mov	 QWORD PTR h$[rsp], r14
  00054	48 8b d8	 mov	 rbx, rax
  00057	48 89 44 24 50	 mov	 QWORD PTR fmt$[rsp], rax
  0005c	44 89 64 24 48	 mov	 DWORD PTR h$[rsp+8], r12d
  00061	44 89 64 24 4c	 mov	 DWORD PTR h$[rsp+12], r12d
  00066	e8 00 00 00 00	 call	 lua_pushnil
; Line 1305
  0006b	48 8d 55 80	 lea	 rdx, QWORD PTR b$[rbp-256]
  0006f	49 8b ce	 mov	 rcx, r14
  00072	e8 00 00 00 00	 call	 luaL_buffinit
; Line 1306
  00077	44 38 2b	 cmp	 BYTE PTR [rbx], r13b
  0007a	0f 84 10 05 00
	00		 je	 $LN23@str_pack
  00080	48 89 b4 24 08
	21 00 00	 mov	 QWORD PTR [rsp+8456], rsi
  00088	48 89 bc 24 10
	21 00 00	 mov	 QWORD PTR [rsp+8464], rdi
  00090	4c 89 bc 24 18
	21 00 00	 mov	 QWORD PTR [rsp+8472], r15
  00098	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL24@str_pack:
; Line 1308
  000a0	4c 8d 44 24 70	 lea	 r8, QWORD PTR size$5[rsp]
  000a5	48 8d 54 24 50	 lea	 rdx, QWORD PTR fmt$[rsp]
  000aa	48 8d 4c 24 40	 lea	 rcx, QWORD PTR h$[rsp]
  000af	e8 00 00 00 00	 call	 getoption
  000b4	48 63 7c 24 70	 movsxd	 rdi, DWORD PTR size$5[rsp]
  000b9	4c 63 f8	 movsxd	 r15, eax
  000bc	8b df		 mov	 ebx, edi
  000be	89 5c 24 30	 mov	 DWORD PTR align$1[rsp], ebx
  000c2	41 83 ff 07	 cmp	 r15d, 7
  000c6	75 46		 jne	 SHORT $LN121@str_pack
  000c8	48 8b 44 24 50	 mov	 rax, QWORD PTR fmt$[rsp]
  000cd	80 38 00	 cmp	 BYTE PTR [rax], 0
  000d0	74 21		 je	 SHORT $LN43@str_pack
  000d2	4c 8d 44 24 30	 lea	 r8, QWORD PTR align$1[rsp]
  000d7	48 8d 54 24 50	 lea	 rdx, QWORD PTR fmt$[rsp]
  000dc	48 8d 4c 24 40	 lea	 rcx, QWORD PTR h$[rsp]
  000e1	e8 00 00 00 00	 call	 getoption
  000e6	8b 5c 24 30	 mov	 ebx, DWORD PTR align$1[rsp]
  000ea	83 f8 03	 cmp	 eax, 3
  000ed	74 04		 je	 SHORT $LN43@str_pack
  000ef	85 db		 test	 ebx, ebx
  000f1	75 1b		 jne	 SHORT $LN121@str_pack
$LN43@str_pack:
  000f3	48 8b 74 24 40	 mov	 rsi, QWORD PTR h$[rsp]
  000f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@
  000ff	ba 01 00 00 00	 mov	 edx, 1
  00104	48 8b ce	 mov	 rcx, rsi
  00107	e8 00 00 00 00	 call	 luaL_argerror
  0010c	eb 05		 jmp	 SHORT $LN44@str_pack
$LN121@str_pack:
  0010e	48 8b 74 24 40	 mov	 rsi, QWORD PTR h$[rsp]
$LN44@str_pack:
  00113	83 fb 01	 cmp	 ebx, 1
  00116	7e 42		 jle	 SHORT $LN41@str_pack
  00118	41 83 ff 03	 cmp	 r15d, 3
  0011c	74 3c		 je	 SHORT $LN41@str_pack
  0011e	3b 5c 24 4c	 cmp	 ebx, DWORD PTR h$[rsp+12]
  00122	0f 4f 5c 24 4c	 cmovg	 ebx, DWORD PTR h$[rsp+12]
  00127	89 5c 24 30	 mov	 DWORD PTR align$1[rsp], ebx
  0012b	44 8d 73 ff	 lea	 r14d, DWORD PTR [rbx-1]
  0012f	44 85 f3	 test	 r14d, ebx
  00132	74 14		 je	 SHORT $LN38@str_pack
  00134	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@
  0013b	ba 01 00 00 00	 mov	 edx, 1
  00140	48 8b ce	 mov	 rcx, rsi
  00143	e8 00 00 00 00	 call	 luaL_argerror
$LN38@str_pack:
  00148	41 8b c6	 mov	 eax, r14d
  0014b	41 23 c5	 and	 eax, r13d
  0014e	2b d8		 sub	 ebx, eax
  00150	41 23 de	 and	 ebx, r14d
  00153	4c 8b 74 24 60	 mov	 r14, QWORD PTR L$GSCopy$1$[rsp]
  00158	eb 02		 jmp	 SHORT $LN40@str_pack
$LN41@str_pack:
  0015a	33 db		 xor	 ebx, ebx
$LN40@str_pack:
; Line 1310
  0015c	48 8b 55 90	 mov	 rdx, QWORD PTR b$[rbp-240]
  00160	8d 04 1f	 lea	 eax, DWORD PTR [rdi+rbx]
  00163	48 63 c8	 movsxd	 rcx, eax
  00166	4c 03 e9	 add	 r13, rcx
  00169	85 db		 test	 ebx, ebx
  0016b	7e 34		 jle	 SHORT $LN93@str_pack
  0016d	0f 1f 00	 npad	 3
$LL22@str_pack:
  00170	ff cb		 dec	 ebx
; Line 1311
  00172	48 3b 55 88	 cmp	 rdx, QWORD PTR b$[rbp-248]
  00176	72 12		 jb	 SHORT $LN27@str_pack
  00178	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  0017c	ba 01 00 00 00	 mov	 edx, 1
  00181	e8 00 00 00 00	 call	 luaL_prepbuffsize
  00186	48 8b 55 90	 mov	 rdx, QWORD PTR b$[rbp-240]
$LN27@str_pack:
  0018a	48 8b 45 80	 mov	 rax, QWORD PTR b$[rbp-256]
  0018e	c6 04 10 00	 mov	 BYTE PTR [rax+rdx], 0
  00192	48 8b 55 90	 mov	 rdx, QWORD PTR b$[rbp-240]
  00196	48 ff c2	 inc	 rdx
  00199	48 89 55 90	 mov	 QWORD PTR b$[rbp-240], rdx
  0019d	85 db		 test	 ebx, ebx
  0019f	7f cf		 jg	 SHORT $LL22@str_pack
$LN93@str_pack:
; Line 1312
  001a1	41 ff c4	 inc	 r12d
; Line 1313
  001a4	41 83 ff 08	 cmp	 r15d, 8
  001a8	0f 87 b7 03 00
	00		 ja	 $LN19@str_pack
  001ae	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:__ImageBase
  001b5	42 8b 8c be 00
	00 00 00	 mov	 ecx, DWORD PTR $LN118@str_pack[rsi+r15*4]
  001bd	48 03 ce	 add	 rcx, rsi
  001c0	ff e1		 jmp	 rcx
$LN18@str_pack:
; Line 1315
  001c2	41 8b d4	 mov	 edx, r12d
  001c5	49 8b ce	 mov	 rcx, r14
  001c8	e8 00 00 00 00	 call	 luaL_checkinteger
  001cd	48 8b d8	 mov	 rbx, rax
; Line 1316
  001d0	83 ff 08	 cmp	 edi, 8
  001d3	7d 31		 jge	 SHORT $LN29@str_pack
; Line 1317
  001d5	8d 0c fd ff ff
	ff ff		 lea	 ecx, DWORD PTR [rdi*8-1]
  001dc	ba 01 00 00 00	 mov	 edx, 1
  001e1	48 d3 e2	 shl	 rdx, cl
; Line 1318
  001e4	48 8b c2	 mov	 rax, rdx
  001e7	48 f7 d8	 neg	 rax
  001ea	48 3b c3	 cmp	 rax, rbx
  001ed	7f 05		 jg	 SHORT $LN28@str_pack
  001ef	48 3b da	 cmp	 rbx, rdx
  001f2	7c 12		 jl	 SHORT $LN29@str_pack
$LN28@str_pack:
  001f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@
  001fb	41 8b d4	 mov	 edx, r12d
  001fe	49 8b ce	 mov	 rcx, r14
  00201	e8 00 00 00 00	 call	 luaL_argerror
$LN29@str_pack:
; Line 1320
  00206	44 8b 44 24 48	 mov	 r8d, DWORD PTR h$[rsp+8]
  0020b	33 c0		 xor	 eax, eax
  0020d	48 85 db	 test	 rbx, rbx
  00210	0f 98 c0	 sets	 al
  00213	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  00217	44 8b cf	 mov	 r9d, edi
  0021a	48 8b d3	 mov	 rdx, rbx
  0021d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00221	e8 00 00 00 00	 call	 packint
; Line 1321
  00226	e9 3a 03 00 00	 jmp	 $LN19@str_pack
$LN16@str_pack:
; Line 1324
  0022b	41 8b d4	 mov	 edx, r12d
  0022e	49 8b ce	 mov	 rcx, r14
  00231	e8 00 00 00 00	 call	 luaL_checkinteger
  00236	48 8b d8	 mov	 rbx, rax
; Line 1325
  00239	83 ff 08	 cmp	 edi, 8
  0023c	7d 26		 jge	 SHORT $LN30@str_pack
; Line 1327
  0023e	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [rdi*8]
  00245	b8 01 00 00 00	 mov	 eax, 1
  0024a	48 d3 e0	 shl	 rax, cl
  0024d	48 3b d8	 cmp	 rbx, rax
  00250	72 12		 jb	 SHORT $LN30@str_pack
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@HFAHIBAH@unsigned?5overflow?$AA@
  00259	41 8b d4	 mov	 edx, r12d
  0025c	49 8b ce	 mov	 rcx, r14
  0025f	e8 00 00 00 00	 call	 luaL_argerror
$LN30@str_pack:
; Line 1328
  00264	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  00268	48 8b d7	 mov	 rdx, rdi
  0026b	48 8b f7	 mov	 rsi, rdi
  0026e	e8 00 00 00 00	 call	 luaL_prepbuffsize
  00273	48 63 54 24 48	 movsxd	 rdx, DWORD PTR h$[rsp+8]
  00278	4c 8b c8	 mov	 r9, rax
  0027b	85 d2		 test	 edx, edx
  0027d	74 04		 je	 SHORT $LN57@str_pack
  0027f	33 ff		 xor	 edi, edi
  00281	eb 02		 jmp	 SHORT $LN58@str_pack
$LN57@str_pack:
  00283	ff cf		 dec	 edi
$LN58@str_pack:
  00285	48 63 c7	 movsxd	 rax, edi
  00288	b9 01 00 00 00	 mov	 ecx, 1
  0028d	42 88 1c 08	 mov	 BYTE PTR [rax+r9], bl
  00291	48 3b f1	 cmp	 rsi, rcx
  00294	7e 27		 jle	 SHORT $LN52@str_pack
  00296	4c 8b c2	 mov	 r8, rdx
  00299	48 8d 56 fe	 lea	 rdx, QWORD PTR [rsi-2]
  0029d	0f 1f 00	 npad	 3
$LL54@str_pack:
  002a0	48 c1 eb 08	 shr	 rbx, 8
  002a4	48 8b c2	 mov	 rax, rdx
  002a7	4d 85 c0	 test	 r8, r8
  002aa	48 0f 45 c1	 cmovne	 rax, rcx
  002ae	48 ff c1	 inc	 rcx
  002b1	48 ff ca	 dec	 rdx
  002b4	42 88 1c 08	 mov	 BYTE PTR [rax+r9], bl
  002b8	48 3b ce	 cmp	 rcx, rsi
  002bb	7c e3		 jl	 SHORT $LL54@str_pack
$LN52@str_pack:
  002bd	48 01 75 90	 add	 QWORD PTR b$[rbp-240], rsi
; Line 1329
  002c1	e9 9f 02 00 00	 jmp	 $LN19@str_pack
$LN14@str_pack:
; Line 1333
  002c6	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  002ca	48 8b d7	 mov	 rdx, rdi
  002cd	48 8b f7	 mov	 rsi, rdi
  002d0	e8 00 00 00 00	 call	 luaL_prepbuffsize
; Line 1334
  002d5	41 8b d4	 mov	 edx, r12d
  002d8	49 8b ce	 mov	 rcx, r14
  002db	48 8b d8	 mov	 rbx, rax
  002de	e8 00 00 00 00	 call	 luaL_checknumber
; Line 1335
  002e3	83 ff 04	 cmp	 edi, 4
  002e6	75 0e		 jne	 SHORT $LN13@str_pack
  002e8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ec	f3 0f 11 85 a0
	1f 00 00	 movss	 DWORD PTR u$6[rbp-256], xmm0
  002f4	eb 08		 jmp	 SHORT $LN11@str_pack
$LN13@str_pack:
; Line 1336
  002f6	f2 0f 11 85 a0
	1f 00 00	 movsdx	 QWORD PTR u$6[rbp-256], xmm0
$LN11@str_pack:
; Line 1339
  002fe	83 7c 24 48 01	 cmp	 DWORD PTR h$[rsp+8], 1
  00303	48 8d 8d a0 1f
	00 00		 lea	 rcx, QWORD PTR u$6[rbp-256]
  0030a	75 2c		 jne	 SHORT $LN68@str_pack
  0030c	85 ff		 test	 edi, edi
  0030e	74 ad		 je	 SHORT $LN52@str_pack
  00310	48 8d 85 a0 1f
	00 00		 lea	 rax, QWORD PTR u$6[rbp-256]
  00317	48 2b d8	 sub	 rbx, rax
  0031a	66 0f 1f 44 00
	00		 npad	 6
$LL67@str_pack:
  00320	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00323	48 8d 49 01	 lea	 rcx, QWORD PTR [rcx+1]
  00327	88 44 0b ff	 mov	 BYTE PTR [rbx+rcx-1], al
  0032b	ff cf		 dec	 edi
  0032d	75 f1		 jne	 SHORT $LL67@str_pack
; Line 1328
  0032f	48 01 75 90	 add	 QWORD PTR b$[rbp-240], rsi
; Line 1329
  00333	e9 2d 02 00 00	 jmp	 $LN19@str_pack
; Line 1339
$LN68@str_pack:
  00338	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  0033b	48 63 d0	 movsxd	 rdx, eax
  0033e	48 03 d3	 add	 rdx, rbx
  00341	85 ff		 test	 edi, edi
  00343	0f 84 74 ff ff
	ff		 je	 $LN52@str_pack
  00349	0f 1f 80 00 00
	00 00		 npad	 7
$LL64@str_pack:
  00350	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00353	48 8d 52 ff	 lea	 rdx, QWORD PTR [rdx-1]
  00357	48 8d 49 01	 lea	 rcx, QWORD PTR [rcx+1]
  0035b	88 42 01	 mov	 BYTE PTR [rdx+1], al
  0035e	ff cf		 dec	 edi
  00360	75 ee		 jne	 SHORT $LL64@str_pack
; Line 1340
  00362	48 01 75 90	 add	 QWORD PTR b$[rbp-240], rsi
; Line 1341
  00366	e9 fa 01 00 00	 jmp	 $LN19@str_pack
$LN9@str_pack:
; Line 1345
  0036b	4c 8d 44 24 38	 lea	 r8, QWORD PTR len$2[rsp]
  00370	41 8b d4	 mov	 edx, r12d
  00373	49 8b ce	 mov	 rcx, r14
  00376	e8 00 00 00 00	 call	 luaL_checklstring
; Line 1346
  0037b	4c 8b 44 24 38	 mov	 r8, QWORD PTR len$2[rsp]
  00380	48 8b df	 mov	 rbx, rdi
; Line 1347
  00383	48 8b d0	 mov	 rdx, rax
  00386	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  0038a	49 3b f8	 cmp	 rdi, r8
  0038d	77 0d		 ja	 SHORT $LN8@str_pack
  0038f	4c 8b c3	 mov	 r8, rbx
  00392	e8 00 00 00 00	 call	 luaL_addlstring
; Line 1348
  00397	e9 c9 01 00 00	 jmp	 $LN19@str_pack
$LN8@str_pack:
; Line 1349
  0039c	e8 00 00 00 00	 call	 luaL_addlstring
; Line 1350
  003a1	48 8b 44 24 38	 mov	 rax, QWORD PTR len$2[rsp]
  003a6	48 3b c3	 cmp	 rax, rbx
  003a9	73 42		 jae	 SHORT $LN100@str_pack
  003ab	48 8b 4d 90	 mov	 rcx, QWORD PTR b$[rbp-240]
  003af	90		 npad	 1
$LL6@str_pack:
  003b0	48 ff c0	 inc	 rax
  003b3	48 89 44 24 38	 mov	 QWORD PTR len$2[rsp], rax
; Line 1351
  003b8	48 3b 4d 88	 cmp	 rcx, QWORD PTR b$[rbp-248]
  003bc	72 12		 jb	 SHORT $LN31@str_pack
  003be	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  003c2	ba 01 00 00 00	 mov	 edx, 1
  003c7	e8 00 00 00 00	 call	 luaL_prepbuffsize
  003cc	48 8b 4d 90	 mov	 rcx, QWORD PTR b$[rbp-240]
$LN31@str_pack:
  003d0	48 8b 45 80	 mov	 rax, QWORD PTR b$[rbp-256]
  003d4	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
  003d8	48 8b 4d 90	 mov	 rcx, QWORD PTR b$[rbp-240]
  003dc	48 8b 44 24 38	 mov	 rax, QWORD PTR len$2[rsp]
  003e1	48 ff c1	 inc	 rcx
  003e4	48 89 4d 90	 mov	 QWORD PTR b$[rbp-240], rcx
  003e8	48 3b c3	 cmp	 rax, rbx
  003eb	72 c3		 jb	 SHORT $LL6@str_pack
$LN100@str_pack:
; Line 1350
  003ed	48 ff c0	 inc	 rax
  003f0	48 89 44 24 38	 mov	 QWORD PTR len$2[rsp], rax
; Line 1353
  003f5	e9 6b 01 00 00	 jmp	 $LN19@str_pack
$LN4@str_pack:
; Line 1357
  003fa	4c 8d 44 24 58	 lea	 r8, QWORD PTR len$3[rsp]
  003ff	41 8b d4	 mov	 edx, r12d
  00402	49 8b ce	 mov	 rcx, r14
  00405	e8 00 00 00 00	 call	 luaL_checklstring
  0040a	4c 8b f0	 mov	 r14, rax
; Line 1360
  0040d	83 ff 08	 cmp	 edi, 8
  00410	7d 2a		 jge	 SHORT $LN123@str_pack
  00412	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [rdi*8]
  00419	b8 01 00 00 00	 mov	 eax, 1
  0041e	48 d3 e0	 shl	 rax, cl
  00421	48 39 44 24 58	 cmp	 QWORD PTR len$3[rsp], rax
  00426	72 14		 jb	 SHORT $LN123@str_pack
  00428	48 8b 4c 24 60	 mov	 rcx, QWORD PTR L$GSCopy$1$[rsp]
  0042d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CJ@JDDCIIOM@string?5length?5does?5not?5fit?5in?5gi@
  00434	41 8b d4	 mov	 edx, r12d
  00437	e8 00 00 00 00	 call	 luaL_argerror
$LN123@str_pack:
; Line 1361
  0043c	48 8b 5c 24 58	 mov	 rbx, QWORD PTR len$3[rsp]
  00441	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  00445	48 8b d7	 mov	 rdx, rdi
  00448	48 8b f7	 mov	 rsi, rdi
  0044b	e8 00 00 00 00	 call	 luaL_prepbuffsize
  00450	48 63 54 24 48	 movsxd	 rdx, DWORD PTR h$[rsp+8]
  00455	4c 8b c8	 mov	 r9, rax
  00458	85 d2		 test	 edx, edx
  0045a	74 04		 je	 SHORT $LN80@str_pack
  0045c	33 ff		 xor	 edi, edi
  0045e	eb 02		 jmp	 SHORT $LN81@str_pack
$LN80@str_pack:
  00460	ff cf		 dec	 edi
$LN81@str_pack:
  00462	48 63 c7	 movsxd	 rax, edi
  00465	b9 01 00 00 00	 mov	 ecx, 1
  0046a	42 88 1c 08	 mov	 BYTE PTR [rax+r9], bl
  0046e	48 3b f1	 cmp	 rsi, rcx
  00471	7e 2a		 jle	 SHORT $LN75@str_pack
  00473	4c 8b c2	 mov	 r8, rdx
  00476	48 8d 56 fe	 lea	 rdx, QWORD PTR [rsi-2]
  0047a	66 0f 1f 44 00
	00		 npad	 6
$LL77@str_pack:
  00480	48 c1 eb 08	 shr	 rbx, 8
  00484	48 8b c2	 mov	 rax, rdx
  00487	4d 85 c0	 test	 r8, r8
  0048a	48 0f 45 c1	 cmovne	 rax, rcx
  0048e	48 ff c1	 inc	 rcx
  00491	48 ff ca	 dec	 rdx
  00494	42 88 1c 08	 mov	 BYTE PTR [rax+r9], bl
  00498	48 3b ce	 cmp	 rcx, rsi
  0049b	7c e3		 jl	 SHORT $LL77@str_pack
$LN75@str_pack:
; Line 1362
  0049d	4c 8b 44 24 58	 mov	 r8, QWORD PTR len$3[rsp]
  004a2	48 01 75 90	 add	 QWORD PTR b$[rbp-240], rsi
  004a6	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  004aa	49 8b d6	 mov	 rdx, r14
  004ad	e8 00 00 00 00	 call	 luaL_addlstring
; Line 1363
  004b2	4c 03 6c 24 58	 add	 r13, QWORD PTR len$3[rsp]
; Line 1364
  004b7	e9 a9 00 00 00	 jmp	 $LN19@str_pack
$LN3@str_pack:
; Line 1368
  004bc	4c 8d 44 24 68	 lea	 r8, QWORD PTR len$4[rsp]
  004c1	41 8b d4	 mov	 edx, r12d
  004c4	49 8b ce	 mov	 rcx, r14
  004c7	e8 00 00 00 00	 call	 luaL_checklstring
; Line 1369
  004cc	48 83 c9 ff	 or	 rcx, -1
  004d0	48 8b d8	 mov	 rbx, rax
$LL117@str_pack:
  004d3	48 ff c1	 inc	 rcx
  004d6	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  004da	75 f7		 jne	 SHORT $LL117@str_pack
  004dc	4c 8b 44 24 68	 mov	 r8, QWORD PTR len$4[rsp]
  004e1	49 3b c8	 cmp	 rcx, r8
  004e4	74 17		 je	 SHORT $LN33@str_pack
  004e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@FHCNDFMO@string?5contains?5zeros?$AA@
  004ed	41 8b d4	 mov	 edx, r12d
  004f0	49 8b ce	 mov	 rcx, r14
  004f3	e8 00 00 00 00	 call	 luaL_argerror
  004f8	4c 8b 44 24 68	 mov	 r8, QWORD PTR len$4[rsp]
$LN33@str_pack:
; Line 1370
  004fd	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  00501	48 8b d3	 mov	 rdx, rbx
  00504	e8 00 00 00 00	 call	 luaL_addlstring
; Line 1371
  00509	48 8b 4d 90	 mov	 rcx, QWORD PTR b$[rbp-240]
  0050d	48 3b 4d 88	 cmp	 rcx, QWORD PTR b$[rbp-248]
  00511	72 12		 jb	 SHORT $LN34@str_pack
  00513	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  00517	ba 01 00 00 00	 mov	 edx, 1
  0051c	e8 00 00 00 00	 call	 luaL_prepbuffsize
  00521	48 8b 4d 90	 mov	 rcx, QWORD PTR b$[rbp-240]
$LN34@str_pack:
  00525	48 8b 45 80	 mov	 rax, QWORD PTR b$[rbp-256]
  00529	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
; Line 1372
  0052d	48 8b 44 24 68	 mov	 rax, QWORD PTR len$4[rsp]
  00532	48 ff 45 90	 inc	 QWORD PTR b$[rbp-240]
  00536	48 ff c0	 inc	 rax
  00539	4c 03 e8	 add	 r13, rax
; Line 1373
  0053c	eb 27		 jmp	 SHORT $LN19@str_pack
$LN2@str_pack:
; Line 1375
  0053e	48 3b 55 88	 cmp	 rdx, QWORD PTR b$[rbp-248]
  00542	72 12		 jb	 SHORT $LN35@str_pack
  00544	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  00548	ba 01 00 00 00	 mov	 edx, 1
  0054d	e8 00 00 00 00	 call	 luaL_prepbuffsize
  00552	48 8b 55 90	 mov	 rdx, QWORD PTR b$[rbp-240]
$LN35@str_pack:
  00556	48 8b 45 80	 mov	 rax, QWORD PTR b$[rbp-256]
  0055a	c6 04 10 00	 mov	 BYTE PTR [rax+rdx], 0
  0055e	48 ff 45 90	 inc	 QWORD PTR b$[rbp-240]
$LN1@str_pack:
; Line 1377
  00562	41 ff cc	 dec	 r12d
$LN19@str_pack:
; Line 1306
  00565	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fmt$[rsp]
  0056a	4c 8b 74 24 60	 mov	 r14, QWORD PTR L$GSCopy$1$[rsp]
  0056f	80 39 00	 cmp	 BYTE PTR [rcx], 0
  00572	0f 85 28 fb ff
	ff		 jne	 $LL24@str_pack
  00578	4c 8b bc 24 18
	21 00 00	 mov	 r15, QWORD PTR [rsp+8472]
  00580	48 8b bc 24 10
	21 00 00	 mov	 rdi, QWORD PTR [rsp+8464]
  00588	48 8b b4 24 08
	21 00 00	 mov	 rsi, QWORD PTR [rsp+8456]
$LN23@str_pack:
; Line 1381
  00590	48 8d 4d 80	 lea	 rcx, QWORD PTR b$[rbp-256]
  00594	e8 00 00 00 00	 call	 luaL_pushresult
; Line 1382
  00599	b8 01 00 00 00	 mov	 eax, 1
; Line 1383
  0059e	48 8b 8d c8 1f
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  005a5	48 33 cc	 xor	 rcx, rsp
  005a8	e8 00 00 00 00	 call	 __security_check_cookie
  005ad	48 81 c4 d0 20
	00 00		 add	 rsp, 8400		; 000020d0H
  005b4	41 5e		 pop	 r14
  005b6	41 5d		 pop	 r13
  005b8	41 5c		 pop	 r12
  005ba	5b		 pop	 rbx
  005bb	5d		 pop	 rbp
  005bc	c3		 ret	 0
  005bd	0f 1f 00	 npad	 3
$LN118@str_pack:
  005c0	00 00 00 00	 DD	 $LN18@str_pack
  005c4	00 00 00 00	 DD	 $LN16@str_pack
  005c8	00 00 00 00	 DD	 $LN14@str_pack
  005cc	00 00 00 00	 DD	 $LN9@str_pack
  005d0	00 00 00 00	 DD	 $LN4@str_pack
  005d4	00 00 00 00	 DD	 $LN3@str_pack
  005d8	00 00 00 00	 DD	 $LN2@str_pack
  005dc	00 00 00 00	 DD	 $LN1@str_pack
  005e0	00 00 00 00	 DD	 $LN1@str_pack
str_pack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT copywithendian
_TEXT	SEGMENT
dest$ = 8
src$ = 16
size$ = 24
islittle$ = 32
copywithendian PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1284
  00000	4c 8b d1	 mov	 r10, rcx
; Line 1285
  00003	41 83 f9 01	 cmp	 r9d, 1
  00007	75 1a		 jne	 SHORT $LN6@copywithen
; Line 1286
  00009	45 85 c0	 test	 r8d, r8d
  0000c	74 46		 je	 SHORT $LN13@copywithen
  0000e	4c 2b d2	 sub	 r10, rdx
$LL5@copywithen:
; Line 1287
  00011	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00014	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  00018	41 88 44 12 ff	 mov	 BYTE PTR [r10+rdx-1], al
  0001d	41 ff c8	 dec	 r8d
  00020	75 ef		 jne	 SHORT $LL5@copywithen
; Line 1294
  00022	c3		 ret	 0
$LN6@copywithen:
; Line 1290
  00023	41 8d 40 ff	 lea	 eax, DWORD PTR [r8-1]
  00027	48 63 c8	 movsxd	 rcx, eax
  0002a	4c 03 d1	 add	 r10, rcx
; Line 1291
  0002d	45 85 c0	 test	 r8d, r8d
  00030	74 22		 je	 SHORT $LN13@copywithen
  00032	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL2@copywithen:
; Line 1292
  00040	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00043	4d 8d 52 ff	 lea	 r10, QWORD PTR [r10-1]
  00047	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  0004b	41 88 42 01	 mov	 BYTE PTR [r10+1], al
  0004f	41 ff c8	 dec	 r8d
  00052	75 ec		 jne	 SHORT $LL2@copywithen
$LN13@copywithen:
; Line 1294
  00054	c3		 ret	 0
copywithendian ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT packint
_TEXT	SEGMENT
b$ = 48
n$ = 56
islittle$ = 64
size$ = 72
neg$ = 80
packint	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1263
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	4d 63 f1	 movsxd	 r14, r9d
  0001d	48 8b fa	 mov	 rdi, rdx
  00020	41 8b e8	 mov	 ebp, r8d
; Line 1264
  00023	49 8b d6	 mov	 rdx, r14
  00026	48 8b d9	 mov	 rbx, rcx
  00029	e8 00 00 00 00	 call	 luaL_prepbuffsize
  0002e	4c 8b d0	 mov	 r10, rax
; Line 1266
  00031	85 ed		 test	 ebp, ebp
  00033	74 04		 je	 SHORT $LN10@packint
  00035	33 c0		 xor	 eax, eax
  00037	eb 04		 jmp	 SHORT $LN11@packint
$LN10@packint:
  00039	41 8d 46 ff	 lea	 eax, DWORD PTR [r14-1]
$LN11@packint:
  0003d	48 98		 cdqe
  0003f	42 88 3c 10	 mov	 BYTE PTR [rax+r10], dil
; Line 1267
  00043	41 83 fe 01	 cmp	 r14d, 1
  00047	7e 33		 jle	 SHORT $LN5@packint
  00049	b9 01 00 00 00	 mov	 ecx, 1
  0004e	49 8d 56 fe	 lea	 rdx, QWORD PTR [r14-2]
  00052	45 8d 46 ff	 lea	 r8d, DWORD PTR [r14-1]
  00056	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL7@packint:
; Line 1268
  00060	48 c1 ef 08	 shr	 rdi, 8
; Line 1269
  00064	48 8b c2	 mov	 rax, rdx
  00067	85 ed		 test	 ebp, ebp
  00069	48 0f 45 c1	 cmovne	 rax, rcx
  0006d	48 ff c1	 inc	 rcx
  00070	48 ff ca	 dec	 rdx
  00073	42 88 3c 10	 mov	 BYTE PTR [rax+r10], dil
  00077	49 ff c8	 dec	 r8
  0007a	75 e4		 jne	 SHORT $LL7@packint
$LN5@packint:
; Line 1271
  0007c	83 7c 24 50 00	 cmp	 DWORD PTR neg$[rsp], 0
  00081	74 36		 je	 SHORT $LN25@packint
  00083	41 83 fe 09	 cmp	 r14d, 9
  00087	7c 30		 jl	 SHORT $LN25@packint
; Line 1272
  00089	b9 08 00 00 00	 mov	 ecx, 8
  0008e	49 8d 56 f7	 lea	 rdx, QWORD PTR [r14-9]
  00092	45 8d 46 f8	 lea	 r8d, DWORD PTR [r14-8]
  00096	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL3@packint:
; Line 1273
  000a0	48 8b c2	 mov	 rax, rdx
  000a3	85 ed		 test	 ebp, ebp
  000a5	48 0f 45 c1	 cmovne	 rax, rcx
  000a9	48 ff c1	 inc	 rcx
  000ac	48 ff ca	 dec	 rdx
  000af	42 c6 04 10 ff	 mov	 BYTE PTR [rax+r10], -1
  000b4	49 ff c8	 dec	 r8
  000b7	75 e7		 jne	 SHORT $LL3@packint
$LN25@packint:
; Line 1275
  000b9	4c 01 73 10	 add	 QWORD PTR [rbx+16], r14
; Line 1276
  000bd	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000c2	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000c7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000cc	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000d1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d5	41 5e		 pop	 r14
  000d7	c3		 ret	 0
packint	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getdetails
_TEXT	SEGMENT
h$ = 64
totalsize$ = 72
fmt$ = 80
align$ = 88
psize$ = 88
ntoalign$ = 96
getdetails PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1236
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 57		 push	 r15
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000d	4c 8b fa	 mov	 r15, rdx
  00010	4c 89 74 24 48	 mov	 QWORD PTR [rsp+72], r14
  00015	4d 8b f0	 mov	 r14, r8
; Line 1237
  00018	4d 8b c1	 mov	 r8, r9
  0001b	49 8b d6	 mov	 rdx, r14
  0001e	49 8b d9	 mov	 rbx, r9
  00021	48 8b f9	 mov	 rdi, rcx
  00024	e8 00 00 00 00	 call	 getoption
; Line 1238
  00029	8b 1b		 mov	 ebx, DWORD PTR [rbx]
  0002b	89 5c 24 58	 mov	 DWORD PTR align$[rsp], ebx
  0002f	8b f0		 mov	 esi, eax
; Line 1239
  00031	83 f8 07	 cmp	 eax, 7
  00034	75 3a		 jne	 SHORT $LN7@getdetails
; Line 1240
  00036	4d 8b 06	 mov	 r8, QWORD PTR [r14]
  00039	41 80 38 00	 cmp	 BYTE PTR [r8], 0
  0003d	74 1d		 je	 SHORT $LN6@getdetails
  0003f	4c 8d 44 24 58	 lea	 r8, QWORD PTR align$[rsp]
  00044	49 8b d6	 mov	 rdx, r14
  00047	48 8b cf	 mov	 rcx, rdi
  0004a	e8 00 00 00 00	 call	 getoption
  0004f	8b 5c 24 58	 mov	 ebx, DWORD PTR align$[rsp]
  00053	83 f8 03	 cmp	 eax, 3
  00056	74 04		 je	 SHORT $LN6@getdetails
  00058	85 db		 test	 ebx, ebx
  0005a	75 14		 jne	 SHORT $LN7@getdetails
$LN6@getdetails:
; Line 1241
  0005c	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0005f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@KGGDHJLO@invalid?5next?5option?5for?5option?5?8@
  00066	ba 01 00 00 00	 mov	 edx, 1
  0006b	e8 00 00 00 00	 call	 luaL_argerror
$LN7@getdetails:
; Line 1243
  00070	4c 8b 74 24 48	 mov	 r14, QWORD PTR [rsp+72]
  00075	83 fb 01	 cmp	 ebx, 1
  00078	7e 51		 jle	 SHORT $LN4@getdetails
  0007a	83 fe 03	 cmp	 esi, 3
  0007d	74 4c		 je	 SHORT $LN4@getdetails
; Line 1246
  0007f	3b 5f 0c	 cmp	 ebx, DWORD PTR [rdi+12]
  00082	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00087	0f 4f 5f 0c	 cmovg	 ebx, DWORD PTR [rdi+12]
; Line 1248
  0008b	8d 6b ff	 lea	 ebp, DWORD PTR [rbx-1]
  0008e	85 eb		 test	 ebp, ebx
  00090	74 14		 je	 SHORT $LN1@getdetails
; Line 1249
  00092	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00095	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CJ@BHJFKHIF@format?5asks?5for?5alignment?5not?5po@
  0009c	ba 01 00 00 00	 mov	 edx, 1
  000a1	e8 00 00 00 00	 call	 luaL_argerror
$LN1@getdetails:
; Line 1250
  000a6	8b c5		 mov	 eax, ebp
  000a8	41 23 c7	 and	 eax, r15d
  000ab	2b d8		 sub	 ebx, eax
  000ad	48 8b 44 24 60	 mov	 rax, QWORD PTR ntoalign$[rsp]
  000b2	23 dd		 and	 ebx, ebp
  000b4	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000b9	89 18		 mov	 DWORD PTR [rax], ebx
; Line 1252
  000bb	8b c6		 mov	 eax, esi
; Line 1253
  000bd	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000c2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c6	41 5f		 pop	 r15
  000c8	5f		 pop	 rdi
  000c9	5e		 pop	 rsi
  000ca	c3		 ret	 0
$LN4@getdetails:
; Line 1244
  000cb	48 8b 44 24 60	 mov	 rax, QWORD PTR ntoalign$[rsp]
; Line 1253
  000d0	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000d5	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  000db	8b c6		 mov	 eax, esi
  000dd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e1	41 5f		 pop	 r15
  000e3	5f		 pop	 rdi
  000e4	5e		 pop	 rsi
  000e5	c3		 ret	 0
getdetails ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getoption
_TEXT	SEGMENT
h$ = 48
fmt$ = 56
size$ = 64
getoption PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1188
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1189
  0000a	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0000d	49 8b d8	 mov	 rbx, r8
; Line 1190
  00010	45 33 d2	 xor	 r10d, r10d
  00013	44 0f be 00	 movsx	 r8d, BYTE PTR [rax]
  00017	48 ff c0	 inc	 rax
  0001a	4c 8b ca	 mov	 r9, rdx
  0001d	48 89 02	 mov	 QWORD PTR [rdx], rax
; Line 1191
  00020	41 8d 40 e0	 lea	 eax, DWORD PTR [r8-32]
  00024	48 8b f9	 mov	 rdi, rcx
  00027	44 89 13	 mov	 DWORD PTR [rbx], r10d
  0002a	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  0002d	0f 87 09 02 00
	00		 ja	 $LN1@getoption
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  0003a	48 98		 cdqe
  0003c	0f b6 84 02 00
	00 00 00	 movzx	 eax, BYTE PTR $LN31@getoption[rdx+rax]
  00044	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN32@getoption[rdx+rax*4]
  0004b	48 03 ca	 add	 rcx, rdx
  0004e	ff e1		 jmp	 rcx
$LN26@getoption:
; Line 1192
  00050	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1
  00056	33 c0		 xor	 eax, eax
; Line 1223
  00058	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
$LN25@getoption:
; Line 1193
  00063	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1
  00069	b8 01 00 00 00	 mov	 eax, 1
; Line 1223
  0006e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
$LN24@getoption:
; Line 1194
  00079	c7 03 02 00 00
	00		 mov	 DWORD PTR [rbx], 2
  0007f	33 c0		 xor	 eax, eax
; Line 1223
  00081	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00086	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
$LN23@getoption:
; Line 1195
  0008c	c7 03 02 00 00
	00		 mov	 DWORD PTR [rbx], 2
  00092	b8 01 00 00 00	 mov	 eax, 1
; Line 1223
  00097	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
$LN22@getoption:
; Line 1196
  000a2	c7 03 04 00 00
	00		 mov	 DWORD PTR [rbx], 4
  000a8	33 c0		 xor	 eax, eax
; Line 1223
  000aa	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000af	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b3	5f		 pop	 rdi
  000b4	c3		 ret	 0
$LN21@getoption:
; Line 1197
  000b5	c7 03 04 00 00
	00		 mov	 DWORD PTR [rbx], 4
  000bb	b8 01 00 00 00	 mov	 eax, 1
; Line 1223
  000c0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c9	5f		 pop	 rdi
  000ca	c3		 ret	 0
$LN20@getoption:
; Line 1198
  000cb	c7 03 08 00 00
	00		 mov	 DWORD PTR [rbx], 8
  000d1	33 c0		 xor	 eax, eax
; Line 1223
  000d3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000dc	5f		 pop	 rdi
  000dd	c3		 ret	 0
$LN19@getoption:
; Line 1199
  000de	c7 03 08 00 00
	00		 mov	 DWORD PTR [rbx], 8
  000e4	b8 01 00 00 00	 mov	 eax, 1
; Line 1223
  000e9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ee	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f2	5f		 pop	 rdi
  000f3	c3		 ret	 0
$LN17@getoption:
; Line 1201
  000f4	c7 03 04 00 00
	00		 mov	 DWORD PTR [rbx], 4
  000fa	b8 02 00 00 00	 mov	 eax, 2
; Line 1223
  000ff	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00104	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00108	5f		 pop	 rdi
  00109	c3		 ret	 0
$LN16@getoption:
; Line 1202
  0010a	c7 03 08 00 00
	00		 mov	 DWORD PTR [rbx], 8
  00110	b8 02 00 00 00	 mov	 eax, 2
; Line 1223
  00115	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0011a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0011e	5f		 pop	 rdi
  0011f	c3		 ret	 0
$LN14@getoption:
; Line 1204
  00120	41 b8 04 00 00
	00		 mov	 r8d, 4
  00126	49 8b d1	 mov	 rdx, r9
  00129	48 8b cf	 mov	 rcx, rdi
  0012c	e8 00 00 00 00	 call	 getnumlimit
  00131	89 03		 mov	 DWORD PTR [rbx], eax
  00133	33 c0		 xor	 eax, eax
; Line 1223
  00135	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0013a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013e	5f		 pop	 rdi
  0013f	c3		 ret	 0
$LN13@getoption:
; Line 1205
  00140	41 b8 04 00 00
	00		 mov	 r8d, 4
  00146	49 8b d1	 mov	 rdx, r9
  00149	48 8b cf	 mov	 rcx, rdi
  0014c	e8 00 00 00 00	 call	 getnumlimit
  00151	89 03		 mov	 DWORD PTR [rbx], eax
  00153	b8 01 00 00 00	 mov	 eax, 1
; Line 1223
  00158	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0015d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00161	5f		 pop	 rdi
  00162	c3		 ret	 0
$LN12@getoption:
; Line 1206
  00163	41 b8 08 00 00
	00		 mov	 r8d, 8
  00169	49 8b d1	 mov	 rdx, r9
  0016c	48 8b cf	 mov	 rcx, rdi
  0016f	e8 00 00 00 00	 call	 getnumlimit
  00174	89 03		 mov	 DWORD PTR [rbx], eax
  00176	b8 04 00 00 00	 mov	 eax, 4
; Line 1223
  0017b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00180	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00184	5f		 pop	 rdi
  00185	c3		 ret	 0
$LN11@getoption:
; Line 1208
  00186	83 ca ff	 or	 edx, -1
  00189	49 8b c9	 mov	 rcx, r9
  0018c	e8 00 00 00 00	 call	 getnum
  00191	89 03		 mov	 DWORD PTR [rbx], eax
; Line 1209
  00193	83 f8 ff	 cmp	 eax, -1
  00196	75 0f		 jne	 SHORT $LN10@getoption
; Line 1210
  00198	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0019b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@KNDEAFDL@missing?5size?5for?5format?5option?5?8@
  001a2	e8 00 00 00 00	 call	 luaL_error
$LN10@getoption:
; Line 1211
  001a7	b8 03 00 00 00	 mov	 eax, 3
; Line 1223
  001ac	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001b1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001b5	5f		 pop	 rdi
  001b6	c3		 ret	 0
$LN9@getoption:
; Line 1212
  001b7	b8 05 00 00 00	 mov	 eax, 5
; Line 1223
  001bc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001c1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001c5	5f		 pop	 rdi
  001c6	c3		 ret	 0
$LN8@getoption:
; Line 1213
  001c7	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1
  001cd	b8 06 00 00 00	 mov	 eax, 6
; Line 1223
  001d2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001d7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001db	5f		 pop	 rdi
  001dc	c3		 ret	 0
$LN7@getoption:
; Line 1214
  001dd	b8 07 00 00 00	 mov	 eax, 7
; Line 1223
  001e2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001e7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001eb	5f		 pop	 rdi
  001ec	c3		 ret	 0
$LN5@getoption:
; Line 1216
  001ed	c7 47 08 01 00
	00 00		 mov	 DWORD PTR [rdi+8], 1
; Line 1222
  001f4	b8 08 00 00 00	 mov	 eax, 8
; Line 1223
  001f9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001fe	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00202	5f		 pop	 rdi
  00203	c3		 ret	 0
$LN4@getoption:
; Line 1217
  00204	44 89 57 08	 mov	 DWORD PTR [rdi+8], r10d
; Line 1222
  00208	b8 08 00 00 00	 mov	 eax, 8
; Line 1223
  0020d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00212	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00216	5f		 pop	 rdi
  00217	c3		 ret	 0
$LN2@getoption:
; Line 1219
  00218	41 b8 08 00 00
	00		 mov	 r8d, 8
  0021e	49 8b d1	 mov	 rdx, r9
  00221	48 8b cf	 mov	 rcx, rdi
  00224	e8 00 00 00 00	 call	 getnumlimit
  00229	89 47 0c	 mov	 DWORD PTR [rdi+12], eax
; Line 1222
  0022c	b8 08 00 00 00	 mov	 eax, 8
; Line 1223
  00231	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00236	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0023a	5f		 pop	 rdi
  0023b	c3		 ret	 0
$LN1@getoption:
; Line 1220
  0023c	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0023f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@EBKLKADF@invalid?5format?5option?5?8?$CFc?8?$AA@
  00246	e8 00 00 00 00	 call	 luaL_error
$LN27@getoption:
; Line 1222
  0024b	b8 08 00 00 00	 mov	 eax, 8
; Line 1223
  00250	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00255	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00259	5f		 pop	 rdi
  0025a	c3		 ret	 0
  0025b	90		 npad	 1
$LN32@getoption:
  0025c	00 00 00 00	 DD	 $LN27@getoption
  00260	00 00 00 00	 DD	 $LN2@getoption
  00264	00 00 00 00	 DD	 $LN5@getoption
  00268	00 00 00 00	 DD	 $LN4@getoption
  0026c	00 00 00 00	 DD	 $LN25@getoption
  00270	00 00 00 00	 DD	 $LN23@getoption
  00274	00 00 00 00	 DD	 $LN13@getoption
  00278	00 00 00 00	 DD	 $LN19@getoption
  0027c	00 00 00 00	 DD	 $LN21@getoption
  00280	00 00 00 00	 DD	 $LN7@getoption
  00284	00 00 00 00	 DD	 $LN26@getoption
  00288	00 00 00 00	 DD	 $LN11@getoption
  0028c	00 00 00 00	 DD	 $LN16@getoption
  00290	00 00 00 00	 DD	 $LN17@getoption
  00294	00 00 00 00	 DD	 $LN24@getoption
  00298	00 00 00 00	 DD	 $LN14@getoption
  0029c	00 00 00 00	 DD	 $LN20@getoption
  002a0	00 00 00 00	 DD	 $LN22@getoption
  002a4	00 00 00 00	 DD	 $LN12@getoption
  002a8	00 00 00 00	 DD	 $LN8@getoption
  002ac	00 00 00 00	 DD	 $LN9@getoption
  002b0	00 00 00 00	 DD	 $LN1@getoption
$LN31@getoption:
  002b4	00		 DB	 0
  002b5	01		 DB	 1
  002b6	15		 DB	 21
  002b7	15		 DB	 21
  002b8	15		 DB	 21
  002b9	15		 DB	 21
  002ba	15		 DB	 21
  002bb	15		 DB	 21
  002bc	15		 DB	 21
  002bd	15		 DB	 21
  002be	15		 DB	 21
  002bf	15		 DB	 21
  002c0	15		 DB	 21
  002c1	15		 DB	 21
  002c2	15		 DB	 21
  002c3	15		 DB	 21
  002c4	15		 DB	 21
  002c5	15		 DB	 21
  002c6	15		 DB	 21
  002c7	15		 DB	 21
  002c8	15		 DB	 21
  002c9	15		 DB	 21
  002ca	15		 DB	 21
  002cb	15		 DB	 21
  002cc	15		 DB	 21
  002cd	15		 DB	 21
  002ce	15		 DB	 21
  002cf	15		 DB	 21
  002d0	02		 DB	 2
  002d1	02		 DB	 2
  002d2	03		 DB	 3
  002d3	15		 DB	 21
  002d4	15		 DB	 21
  002d5	15		 DB	 21
  002d6	04		 DB	 4
  002d7	15		 DB	 21
  002d8	15		 DB	 21
  002d9	15		 DB	 21
  002da	15		 DB	 21
  002db	15		 DB	 21
  002dc	05		 DB	 5
  002dd	06		 DB	 6
  002de	07		 DB	 7
  002df	15		 DB	 21
  002e0	08		 DB	 8
  002e1	15		 DB	 21
  002e2	15		 DB	 21
  002e3	15		 DB	 21
  002e4	15		 DB	 21
  002e5	15		 DB	 21
  002e6	15		 DB	 21
  002e7	15		 DB	 21
  002e8	07		 DB	 7
  002e9	15		 DB	 21
  002ea	15		 DB	 21
  002eb	15		 DB	 21
  002ec	09		 DB	 9
  002ed	15		 DB	 21
  002ee	15		 DB	 21
  002ef	15		 DB	 21
  002f0	15		 DB	 21
  002f1	15		 DB	 21
  002f2	15		 DB	 21
  002f3	15		 DB	 21
  002f4	15		 DB	 21
  002f5	15		 DB	 21
  002f6	0a		 DB	 10
  002f7	0b		 DB	 11
  002f8	0c		 DB	 12
  002f9	15		 DB	 21
  002fa	0d		 DB	 13
  002fb	15		 DB	 21
  002fc	0e		 DB	 14
  002fd	0f		 DB	 15
  002fe	10		 DB	 16
  002ff	15		 DB	 21
  00300	11		 DB	 17
  00301	15		 DB	 21
  00302	0c		 DB	 12
  00303	15		 DB	 21
  00304	15		 DB	 21
  00305	15		 DB	 21
  00306	15		 DB	 21
  00307	12		 DB	 18
  00308	15		 DB	 21
  00309	15		 DB	 21
  0030a	15		 DB	 21
  0030b	15		 DB	 21
  0030c	13		 DB	 19
  0030d	15		 DB	 21
  0030e	14		 DB	 20
getoption ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT initheader
_TEXT	SEGMENT
L$ = 8
h$ = 16
initheader PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1179
  00000	48 89 0a	 mov	 QWORD PTR [rdx], rcx
; Line 1180
  00003	c7 42 08 01 00
	00 00		 mov	 DWORD PTR [rdx+8], 1
; Line 1181
  0000a	c7 42 0c 01 00
	00 00		 mov	 DWORD PTR [rdx+12], 1
; Line 1182
  00011	c3		 ret	 0
initheader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getnumlimit
_TEXT	SEGMENT
h$ = 48
fmt$ = 56
df$ = 64
getnumlimit PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1166
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1167
  00006	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00009	41 8b d8	 mov	 ebx, r8d
  0000c	4c 8b ca	 mov	 r9, rdx
  0000f	44 0f be 00	 movsx	 r8d, BYTE PTR [rax]
  00013	41 83 c0 d0	 add	 r8d, -48		; ffffffd0H
  00017	41 83 f8 09	 cmp	 r8d, 9
  0001b	77 2c		 ja	 SHORT $LN5@getnumlimi
  0001d	33 db		 xor	 ebx, ebx
  0001f	90		 npad	 1
$LL8@getnumlimi:
  00020	49 8b 11	 mov	 rdx, QWORD PTR [r9]
  00023	8d 1c 9b	 lea	 ebx, DWORD PTR [rbx+rbx*4]
  00026	0f be 02	 movsx	 eax, BYTE PTR [rdx]
  00029	8d 5b e8	 lea	 ebx, DWORD PTR [rbx-24]
  0002c	8d 1c 58	 lea	 ebx, DWORD PTR [rax+rbx*2]
  0002f	48 8d 42 01	 lea	 rax, QWORD PTR [rdx+1]
  00033	49 89 01	 mov	 QWORD PTR [r9], rax
  00036	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00039	83 c0 d0	 add	 eax, -48		; ffffffd0H
  0003c	83 f8 09	 cmp	 eax, 9
  0003f	77 08		 ja	 SHORT $LN5@getnumlimi
  00041	81 fb cb cc cc
	0c		 cmp	 ebx, 214748363		; 0ccccccbH
  00047	7e d7		 jle	 SHORT $LL8@getnumlimi
$LN5@getnumlimi:
  00049	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  0004c	83 f8 0f	 cmp	 eax, 15
  0004f	76 18		 jbe	 SHORT $LN27@getnumlimi
; Line 1170
  00051	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@CNGGJHEE@integral?5size?5?$CI?$CFd?$CJ?5out?5of?5limits@
  0005b	41 b9 10 00 00
	00		 mov	 r9d, 16
  00061	44 8b c3	 mov	 r8d, ebx
  00064	e8 00 00 00 00	 call	 luaL_error
$LN27@getnumlimi:
; Line 1171
  00069	8b c3		 mov	 eax, ebx
; Line 1172
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5b		 pop	 rbx
  00070	c3		 ret	 0
getnumlimit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getnum
_TEXT	SEGMENT
fmt$ = 8
df$ = 16
getnum	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1150
  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	4c 8b c9	 mov	 r9, rcx
  00006	44 0f be 00	 movsx	 r8d, BYTE PTR [rax]
  0000a	41 83 c0 d0	 add	 r8d, -48		; ffffffd0H
  0000e	41 83 f8 09	 cmp	 r8d, 9
  00012	76 03		 jbe	 SHORT $LN6@getnum
; Line 1151
  00014	8b c2		 mov	 eax, edx
; Line 1159
  00016	c3		 ret	 0
$LN6@getnum:
; Line 1153
  00017	33 c0		 xor	 eax, eax
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@getnum:
; Line 1155
  00020	49 8b 11	 mov	 rdx, QWORD PTR [r9]
  00023	8d 0c 80	 lea	 ecx, DWORD PTR [rax+rax*4]
  00026	0f be 02	 movsx	 eax, BYTE PTR [rdx]
  00029	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  0002c	48 8d 4a 01	 lea	 rcx, QWORD PTR [rdx+1]
  00030	49 89 09	 mov	 QWORD PTR [r9], rcx
; Line 1156
  00033	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00036	83 c0 d0	 add	 eax, -48		; ffffffffffffffd0H
  00039	83 c1 d0	 add	 ecx, -48		; ffffffd0H
  0003c	83 f9 09	 cmp	 ecx, 9
  0003f	77 07		 ja	 SHORT $LN1@getnum
  00041	3d cb cc cc 0c	 cmp	 eax, 214748363		; 0ccccccbH
  00046	7e d8		 jle	 SHORT $LL4@getnum
$LN1@getnum:
; Line 1159
  00048	c3		 ret	 0
getnum	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT digit
_TEXT	SEGMENT
c$ = 8
digit	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1147
  00000	33 c0		 xor	 eax, eax
  00002	83 c1 d0	 add	 ecx, -48		; ffffffd0H
  00005	83 f9 09	 cmp	 ecx, 9
  00008	0f 96 c0	 setbe	 al
  0000b	c3		 ret	 0
digit	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_format
_TEXT	SEGMENT
top$1$ = 32
l$1 = 40
sfl$ = 48
b$ = 64
form$2 = 8288
__$ArrayPad$ = 8320
L$ = 8384
str_format PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 984
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	55		 push	 rbp
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 8d ac 24 70
	e0 ff ff	 lea	 rbp, QWORD PTR [rsp-8080]
  00020	b8 90 20 00 00	 mov	 eax, 8336		; 00002090H
  00025	e8 00 00 00 00	 call	 __chkstk
  0002a	48 2b e0	 sub	 rsp, rax
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c4	 xor	 rax, rsp
  00037	48 89 85 80 1f
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax
  0003e	4c 8b f9	 mov	 r15, rcx
; Line 985
  00041	e8 00 00 00 00	 call	 lua_gettop
; Line 986
  00046	41 be 01 00 00
	00		 mov	 r14d, 1
; Line 988
  0004c	4c 8d 44 24 30	 lea	 r8, QWORD PTR sfl$[rsp]
  00051	49 8b cf	 mov	 rcx, r15
  00054	41 8b d6	 mov	 edx, r14d
  00057	8b f8		 mov	 edi, eax
  00059	89 44 24 20	 mov	 DWORD PTR top$1$[rsp], eax
  0005d	e8 00 00 00 00	 call	 luaL_checklstring
; Line 989
  00062	4c 8b 6c 24 30	 mov	 r13, QWORD PTR sfl$[rsp]
; Line 991
  00067	48 8d 54 24 40	 lea	 rdx, QWORD PTR b$[rsp]
  0006c	49 8b cf	 mov	 rcx, r15
  0006f	4c 03 e8	 add	 r13, rax
  00072	48 8b d8	 mov	 rbx, rax
  00075	e8 00 00 00 00	 call	 luaL_buffinit
; Line 992
  0007a	49 3b dd	 cmp	 rbx, r13
  0007d	0f 83 8e 03 00
	00		 jae	 $LN19@str_format
  00083	48 8b 54 24 50	 mov	 rdx, QWORD PTR b$[rsp+16]
$LL20@str_format:
; Line 993
  00088	80 3b 25	 cmp	 BYTE PTR [rbx], 37	; 00000025H
  0008b	74 36		 je	 SHORT $LN18@str_format
; Line 994
  0008d	48 3b 54 24 48	 cmp	 rdx, QWORD PTR b$[rsp+8]
  00092	72 14		 jb	 SHORT $LN23@str_format
  00094	48 8d 4c 24 40	 lea	 rcx, QWORD PTR b$[rsp]
  00099	ba 01 00 00 00	 mov	 edx, 1
  0009e	e8 00 00 00 00	 call	 luaL_prepbuffsize
  000a3	48 8b 54 24 50	 mov	 rdx, QWORD PTR b$[rsp+16]
$LN23@str_format:
  000a8	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]
  000ab	48 8b 44 24 40	 mov	 rax, QWORD PTR b$[rsp]
  000b0	88 0c 10	 mov	 BYTE PTR [rax+rdx], cl
  000b3	48 8b 54 24 50	 mov	 rdx, QWORD PTR b$[rsp+16]
  000b8	48 ff c2	 inc	 rdx
  000bb	48 ff c3	 inc	 rbx
  000be	e9 40 03 00 00	 jmp	 $LN53@str_format
$LN18@str_format:
; Line 995
  000c3	80 7b 01 25	 cmp	 BYTE PTR [rbx+1], 37	; 00000025H
  000c7	75 38		 jne	 SHORT $LN16@str_format
; Line 996
  000c9	48 3b 54 24 48	 cmp	 rdx, QWORD PTR b$[rsp+8]
  000ce	72 14		 jb	 SHORT $LN24@str_format
  000d0	48 8d 4c 24 40	 lea	 rcx, QWORD PTR b$[rsp]
  000d5	ba 01 00 00 00	 mov	 edx, 1
  000da	e8 00 00 00 00	 call	 luaL_prepbuffsize
  000df	48 8b 54 24 50	 mov	 rdx, QWORD PTR b$[rsp+16]
$LN24@str_format:
  000e4	0f b6 4b 01	 movzx	 ecx, BYTE PTR [rbx+1]
  000e8	48 8b 44 24 40	 mov	 rax, QWORD PTR b$[rsp]
  000ed	88 0c 10	 mov	 BYTE PTR [rax+rdx], cl
  000f0	48 8b 54 24 50	 mov	 rdx, QWORD PTR b$[rsp+16]
  000f5	48 ff c2	 inc	 rdx
  000f8	48 83 c3 02	 add	 rbx, 2
; Line 997
  000fc	e9 02 03 00 00	 jmp	 $LN53@str_format
$LN16@str_format:
; Line 999
  00101	48 8d 4c 24 40	 lea	 rcx, QWORD PTR b$[rsp]
  00106	ba ac 01 00 00	 mov	 edx, 428		; 000001acH
  0010b	e8 00 00 00 00	 call	 luaL_prepbuffsize
; Line 1001
  00110	41 ff c6	 inc	 r14d
  00113	33 f6		 xor	 esi, esi
  00115	4c 8b e0	 mov	 r12, rax
  00118	44 3b f7	 cmp	 r14d, edi
  0011b	7e 12		 jle	 SHORT $LN14@str_format
; Line 1002
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08JEIPHCP@no?5value?$AA@
  00124	41 8b d6	 mov	 edx, r14d
  00127	49 8b cf	 mov	 rcx, r15
  0012a	e8 00 00 00 00	 call	 luaL_argerror
$LN14@str_format:
; Line 1003
  0012f	4c 8d 85 60 1f
	00 00		 lea	 r8, QWORD PTR form$2[rbp-256]
  00136	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  0013a	49 8b cf	 mov	 rcx, r15
  0013d	e8 00 00 00 00	 call	 scanformat
; Line 1004
  00142	48 8d 58 01	 lea	 rbx, QWORD PTR [rax+1]
  00146	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00149	83 e8 41	 sub	 eax, 65			; 00000041H
  0014c	83 f8 37	 cmp	 eax, 55			; 00000037H
  0014f	0f 87 fb 02 00
	00		 ja	 $LN1@str_format
  00155	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  0015c	48 98		 cdqe
  0015e	0f b6 84 02 00
	00 00 00	 movzx	 eax, BYTE PTR $LN51@str_format[rdx+rax]
  00166	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN52@str_format[rdx+rax*4]
  0016d	48 03 ca	 add	 rcx, rdx
  00170	ff e1		 jmp	 rcx
$LN11@str_format:
; Line 1006
  00172	41 8b d6	 mov	 edx, r14d
  00175	49 8b cf	 mov	 rcx, r15
  00178	e8 00 00 00 00	 call	 luaL_checkinteger
  0017d	4c 8d 85 60 1f
	00 00		 lea	 r8, QWORD PTR form$2[rbp-256]
  00184	ba ac 01 00 00	 mov	 edx, 428		; 000001acH
  00189	4c 8b c8	 mov	 r9, rax
  0018c	49 8b cc	 mov	 rcx, r12
  0018f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
  00195	8b f0		 mov	 esi, eax
; Line 1007
  00197	e9 5c 02 00 00	 jmp	 $LN2@str_format
$LN10@str_format:
; Line 1011
  0019c	41 8b d6	 mov	 edx, r14d
  0019f	49 8b cf	 mov	 rcx, r15
  001a2	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 1012
  001a7	48 83 ca ff	 or	 rdx, -1
  001ab	4c 8b d0	 mov	 r10, rax
  001ae	48 8d 85 60 1f
	00 00		 lea	 rax, QWORD PTR form$2[rbp-256]
$LL50@str_format:
  001b5	48 ff c2	 inc	 rdx
  001b8	40 38 34 10	 cmp	 BYTE PTR [rax+rdx], sil
  001bc	75 f7		 jne	 SHORT $LL50@str_format
  001be	44 0f b6 8c 15
	5f 1f 00 00	 movzx	 r9d, BYTE PTR form$2[rbp+rdx-257]
  001c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02IIDLDAAC@ll?$AA@
  001ce	48 8b c2	 mov	 rax, rdx
  001d1	49 2b c0	 sub	 rax, r8
  001d4	49 8b c8	 mov	 rcx, r8
  001d7	4c 8d 84 05 5f
	1f 00 00	 lea	 r8, QWORD PTR form$2[rbp+rax-257]
  001df	90		 npad	 1
$LL28@str_format:
  001e0	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  001e3	48 8d 49 01	 lea	 rcx, QWORD PTR [rcx+1]
  001e7	41 88 44 08 ff	 mov	 BYTE PTR [r8+rcx-1], al
  001ec	84 c0		 test	 al, al
  001ee	75 f0		 jne	 SHORT $LL28@str_format
  001f0	48 8d 85 62 1f
	00 00		 lea	 rax, QWORD PTR form$2[rbp-254]
; Line 1013
  001f7	4c 8d 85 60 1f
	00 00		 lea	 r8, QWORD PTR form$2[rbp-256]
  001fe	49 8b cc	 mov	 rcx, r12
  00201	44 88 4c 10 ff	 mov	 BYTE PTR [rax+rdx-1], r9b
  00206	40 88 34 10	 mov	 BYTE PTR [rax+rdx], sil
  0020a	4d 8b ca	 mov	 r9, r10
  0020d	ba ac 01 00 00	 mov	 edx, 428		; 000001acH
  00212	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
  00218	8b f0		 mov	 esi, eax
; Line 1014
  0021a	e9 d9 01 00 00	 jmp	 $LN2@str_format
$LN9@str_format:
; Line 1017
  0021f	48 8d 85 60 1f
	00 00		 lea	 rax, QWORD PTR form$2[rbp-256]
  00226	48 83 ca ff	 or	 rdx, -1
  0022a	66 0f 1f 44 00
	00		 npad	 6
$LL49@str_format:
  00230	48 ff c2	 inc	 rdx
  00233	40 38 34 10	 cmp	 BYTE PTR [rax+rdx], sil
  00237	75 f7		 jne	 SHORT $LL49@str_format
  00239	44 0f b6 8c 15
	5f 1f 00 00	 movzx	 r9d, BYTE PTR form$2[rbp+rdx-257]
  00242	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00249	48 8b c2	 mov	 rax, rdx
  0024c	49 2b c0	 sub	 rax, r8
  0024f	49 8b c8	 mov	 rcx, r8
  00252	4c 8d 84 05 5f
	1f 00 00	 lea	 r8, QWORD PTR form$2[rbp+rax-257]
  0025a	66 0f 1f 44 00
	00		 npad	 6
$LL31@str_format:
  00260	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00263	48 8d 49 01	 lea	 rcx, QWORD PTR [rcx+1]
  00267	41 88 44 08 ff	 mov	 BYTE PTR [r8+rcx-1], al
  0026c	84 c0		 test	 al, al
  0026e	75 f0		 jne	 SHORT $LL31@str_format
  00270	44 88 8c 15 5f
	1f 00 00	 mov	 BYTE PTR form$2[rbp+rdx-257], r9b
  00278	40 88 b4 15 60
	1f 00 00	 mov	 BYTE PTR form$2[rbp+rdx-256], sil
; Line 1019
  00280	49 8b cf	 mov	 rcx, r15
  00283	41 8b d6	 mov	 edx, r14d
  00286	e8 00 00 00 00	 call	 luaL_checknumber
  0028b	4c 8d 85 60 1f
	00 00		 lea	 r8, QWORD PTR form$2[rbp-256]
  00292	ba ac 01 00 00	 mov	 edx, 428		; 000001acH
  00297	49 8b cc	 mov	 rcx, r12
  0029a	0f 28 d8	 movaps	 xmm3, xmm0
  0029d	66 49 0f 7e d9	 movd	 r9, xmm3
  002a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
  002a8	8b f0		 mov	 esi, eax
; Line 1020
  002aa	e9 49 01 00 00	 jmp	 $LN2@str_format
$LN8@str_format:
; Line 1023
  002af	48 8d 85 60 1f
	00 00		 lea	 rax, QWORD PTR form$2[rbp-256]
  002b6	48 83 ca ff	 or	 rdx, -1
  002ba	66 0f 1f 44 00
	00		 npad	 6
$LL48@str_format:
  002c0	48 ff c2	 inc	 rdx
  002c3	40 38 34 10	 cmp	 BYTE PTR [rax+rdx], sil
  002c7	75 f7		 jne	 SHORT $LL48@str_format
  002c9	44 0f b6 8c 15
	5f 1f 00 00	 movzx	 r9d, BYTE PTR form$2[rbp+rdx-257]
  002d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  002d9	48 8b c2	 mov	 rax, rdx
  002dc	49 2b c0	 sub	 rax, r8
  002df	49 8b c8	 mov	 rcx, r8
  002e2	4c 8d 84 05 5f
	1f 00 00	 lea	 r8, QWORD PTR form$2[rbp+rax-257]
  002ea	66 0f 1f 44 00
	00		 npad	 6
$LL34@str_format:
  002f0	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  002f3	48 8d 49 01	 lea	 rcx, QWORD PTR [rcx+1]
  002f7	41 88 44 08 ff	 mov	 BYTE PTR [r8+rcx-1], al
  002fc	84 c0		 test	 al, al
  002fe	75 f0		 jne	 SHORT $LL34@str_format
  00300	44 88 8c 15 5f
	1f 00 00	 mov	 BYTE PTR form$2[rbp+rdx-257], r9b
  00308	40 88 b4 15 60
	1f 00 00	 mov	 BYTE PTR form$2[rbp+rdx-256], sil
; Line 1024
  00310	49 8b cf	 mov	 rcx, r15
  00313	41 8b d6	 mov	 edx, r14d
  00316	e8 00 00 00 00	 call	 luaL_checknumber
  0031b	4c 8d 85 60 1f
	00 00		 lea	 r8, QWORD PTR form$2[rbp-256]
  00322	ba ac 01 00 00	 mov	 edx, 428		; 000001acH
  00327	49 8b cc	 mov	 rcx, r12
  0032a	0f 28 d8	 movaps	 xmm3, xmm0
  0032d	66 49 0f 7e d9	 movd	 r9, xmm3
  00332	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
  00338	8b f0		 mov	 esi, eax
; Line 1025
  0033a	e9 b9 00 00 00	 jmp	 $LN2@str_format
$LN7@str_format:
; Line 1028
  0033f	48 8d 54 24 40	 lea	 rdx, QWORD PTR b$[rsp]
  00344	45 8b c6	 mov	 r8d, r14d
  00347	49 8b cf	 mov	 rcx, r15
  0034a	e8 00 00 00 00	 call	 addquoted
; Line 1029
  0034f	e9 a4 00 00 00	 jmp	 $LN2@str_format
$LN6@str_format:
; Line 1033
  00354	4c 8d 44 24 28	 lea	 r8, QWORD PTR l$1[rsp]
  00359	41 8b d6	 mov	 edx, r14d
  0035c	49 8b cf	 mov	 rcx, r15
  0035f	e8 00 00 00 00	 call	 luaL_tolstring
  00364	48 8b f8	 mov	 rdi, rax
; Line 1034
  00367	40 38 b5 62 1f
	00 00		 cmp	 BYTE PTR form$2[rbp-254], sil
  0036e	75 0c		 jne	 SHORT $LN5@str_format
; Line 1035
  00370	48 8d 4c 24 40	 lea	 rcx, QWORD PTR b$[rsp]
  00375	e8 00 00 00 00	 call	 luaL_addvalue
; Line 1036
  0037a	eb 78		 jmp	 SHORT $LN54@str_format
$LN5@str_format:
; Line 1037
  0037c	48 83 c8 ff	 or	 rax, -1
$LL47@str_format:
  00380	48 ff c0	 inc	 rax
  00383	40 38 34 07	 cmp	 BYTE PTR [rdi+rax], sil
  00387	75 f7		 jne	 SHORT $LL47@str_format
  00389	48 39 44 24 28	 cmp	 QWORD PTR l$1[rsp], rax
  0038e	74 12		 je	 SHORT $LN25@str_format
  00390	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@FHCNDFMO@string?5contains?5zeros?$AA@
  00397	41 8b d6	 mov	 edx, r14d
  0039a	49 8b cf	 mov	 rcx, r15
  0039d	e8 00 00 00 00	 call	 luaL_argerror
$LN25@str_format:
; Line 1038
  003a2	48 8d 8d 60 1f
	00 00		 lea	 rcx, QWORD PTR form$2[rbp-256]
  003a9	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  003ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  003b4	48 85 c0	 test	 rax, rax
  003b7	75 14		 jne	 SHORT $LN3@str_format
  003b9	48 83 7c 24 28
	64		 cmp	 QWORD PTR l$1[rsp], 100	; 00000064H
  003bf	72 0c		 jb	 SHORT $LN3@str_format
; Line 1040
  003c1	48 8d 4c 24 40	 lea	 rcx, QWORD PTR b$[rsp]
  003c6	e8 00 00 00 00	 call	 luaL_addvalue
; Line 1042
  003cb	eb 27		 jmp	 SHORT $LN54@str_format
$LN3@str_format:
; Line 1043
  003cd	4c 8d 85 60 1f
	00 00		 lea	 r8, QWORD PTR form$2[rbp-256]
  003d4	4c 8b cf	 mov	 r9, rdi
  003d7	ba ac 01 00 00	 mov	 edx, 428		; 000001acH
  003dc	49 8b cc	 mov	 rcx, r12
  003df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
; Line 1044
  003e5	ba fe ff ff ff	 mov	 edx, -2
  003ea	49 8b cf	 mov	 rcx, r15
  003ed	8b f0		 mov	 esi, eax
  003ef	e8 00 00 00 00	 call	 lua_settop
$LN54@str_format:
  003f4	8b 7c 24 20	 mov	 edi, DWORD PTR top$1$[rsp]
$LN2@str_format:
; Line 1055
  003f8	48 8b 54 24 50	 mov	 rdx, QWORD PTR b$[rsp+16]
  003fd	48 63 c6	 movsxd	 rax, esi
  00400	48 03 d0	 add	 rdx, rax
$LN53@str_format:
  00403	48 89 54 24 50	 mov	 QWORD PTR b$[rsp+16], rdx
  00408	49 3b dd	 cmp	 rbx, r13
  0040b	0f 82 77 fc ff
	ff		 jb	 $LL20@str_format
$LN19@str_format:
; Line 1058
  00411	48 8d 4c 24 40	 lea	 rcx, QWORD PTR b$[rsp]
  00416	e8 00 00 00 00	 call	 luaL_pushresult
; Line 1059
  0041b	b8 01 00 00 00	 mov	 eax, 1
$LN21@str_format:
; Line 1060
  00420	48 8b 8d 80 1f
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  00427	48 33 cc	 xor	 rcx, rsp
  0042a	e8 00 00 00 00	 call	 __security_check_cookie
  0042f	4c 8d 9c 24 90
	20 00 00	 lea	 r11, QWORD PTR [rsp+8336]
  00437	49 8b 5b 38	 mov	 rbx, QWORD PTR [r11+56]
  0043b	49 8b 73 40	 mov	 rsi, QWORD PTR [r11+64]
  0043f	49 8b 7b 48	 mov	 rdi, QWORD PTR [r11+72]
  00443	49 8b e3	 mov	 rsp, r11
  00446	41 5f		 pop	 r15
  00448	41 5e		 pop	 r14
  0044a	41 5d		 pop	 r13
  0044c	41 5c		 pop	 r12
  0044e	5d		 pop	 rbp
  0044f	c3		 ret	 0
$LN1@str_format:
; Line 1051
  00450	44 0f be 43 ff	 movsx	 r8d, BYTE PTR [rbx-1]
  00455	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8format@
  0045c	49 8b cf	 mov	 rcx, r15
  0045f	e8 00 00 00 00	 call	 luaL_error
  00464	eb ba		 jmp	 SHORT $LN21@str_format
  00466	66 90		 npad	 2
$LN52@str_format:
; Line 1060
  00468	00 00 00 00	 DD	 $LN9@str_format
  0046c	00 00 00 00	 DD	 $LN8@str_format
  00470	00 00 00 00	 DD	 $LN10@str_format
  00474	00 00 00 00	 DD	 $LN11@str_format
  00478	00 00 00 00	 DD	 $LN7@str_format
  0047c	00 00 00 00	 DD	 $LN6@str_format
  00480	00 00 00 00	 DD	 $LN1@str_format
$LN51@str_format:
  00484	00		 DB	 0
  00485	06		 DB	 6
  00486	06		 DB	 6
  00487	06		 DB	 6
  00488	01		 DB	 1
  00489	06		 DB	 6
  0048a	01		 DB	 1
  0048b	06		 DB	 6
  0048c	06		 DB	 6
  0048d	06		 DB	 6
  0048e	06		 DB	 6
  0048f	06		 DB	 6
  00490	06		 DB	 6
  00491	06		 DB	 6
  00492	06		 DB	 6
  00493	06		 DB	 6
  00494	06		 DB	 6
  00495	06		 DB	 6
  00496	06		 DB	 6
  00497	06		 DB	 6
  00498	06		 DB	 6
  00499	06		 DB	 6
  0049a	06		 DB	 6
  0049b	02		 DB	 2
  0049c	06		 DB	 6
  0049d	06		 DB	 6
  0049e	06		 DB	 6
  0049f	06		 DB	 6
  004a0	06		 DB	 6
  004a1	06		 DB	 6
  004a2	06		 DB	 6
  004a3	06		 DB	 6
  004a4	00		 DB	 0
  004a5	06		 DB	 6
  004a6	03		 DB	 3
  004a7	02		 DB	 2
  004a8	01		 DB	 1
  004a9	01		 DB	 1
  004aa	01		 DB	 1
  004ab	06		 DB	 6
  004ac	02		 DB	 2
  004ad	06		 DB	 6
  004ae	06		 DB	 6
  004af	06		 DB	 6
  004b0	06		 DB	 6
  004b1	06		 DB	 6
  004b2	02		 DB	 2
  004b3	06		 DB	 6
  004b4	04		 DB	 4
  004b5	06		 DB	 6
  004b6	05		 DB	 5
  004b7	06		 DB	 6
  004b8	02		 DB	 2
  004b9	06		 DB	 6
  004ba	06		 DB	 6
  004bb	02		 DB	 2
str_format ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT addlenmod
_TEXT	SEGMENT
form$ = 8
lenmod$ = 16
addlenmod PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 975
  00000	49 83 c9 ff	 or	 r9, -1
  00004	4d 8b c1	 mov	 r8, r9
  00007	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL8@addlenmod:
  00010	49 ff c0	 inc	 r8
  00013	42 80 3c 01 00	 cmp	 BYTE PTR [rcx+r8], 0
  00018	75 f6		 jne	 SHORT $LL8@addlenmod
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL7@addlenmod:
; Line 976
  00020	42 80 7c 0a 01
	00		 cmp	 BYTE PTR [rdx+r9+1], 0
  00026	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  0002a	75 f4		 jne	 SHORT $LL7@addlenmod
; Line 977
  0002c	45 0f b6 5c 08
	ff		 movzx	 r11d, BYTE PTR [r8+rcx-1]
; Line 978
  00032	4d 8b d0	 mov	 r10, r8
  00035	4c 2b d2	 sub	 r10, rdx
  00038	4c 03 d1	 add	 r10, rcx
  0003b	0f 1f 44 00 00	 npad	 5
$LL3@addlenmod:
  00040	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00043	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  00047	41 88 44 12 fe	 mov	 BYTE PTR [r10+rdx-2], al
  0004c	84 c0		 test	 al, al
  0004e	75 f0		 jne	 SHORT $LL3@addlenmod
; Line 979
  00050	4b 8d 04 01	 lea	 rax, QWORD PTR [r9+r8]
  00054	44 88 5c 08 ff	 mov	 BYTE PTR [rax+rcx-1], r11b
; Line 980
  00059	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
; Line 981
  0005d	c3		 ret	 0
addlenmod ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT scanformat
_TEXT	SEGMENT
L$ = 48
strfrmt$ = 56
form$ = 64
scanformat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 949
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 951
  00015	80 3a 00	 cmp	 BYTE PTR [rdx], 0
  00018	4d 8b f0	 mov	 r14, r8
  0001b	48 8b f2	 mov	 rsi, rdx
  0001e	48 8b f9	 mov	 rdi, rcx
  00021	48 8b da	 mov	 rbx, rdx
  00024	74 27		 je	 SHORT $LN16@scanformat
  00026	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL9@scanformat:
  00030	0f be 13	 movsx	 edx, BYTE PTR [rbx]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GGBDHNF@?9?$CL?5?$CD0?$AA@
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00040	48 85 c0	 test	 rax, rax
  00043	74 08		 je	 SHORT $LN16@scanformat
  00045	48 ff c3	 inc	 rbx
  00048	80 3b 00	 cmp	 BYTE PTR [rbx], 0
  0004b	75 e3		 jne	 SHORT $LL9@scanformat
$LN16@scanformat:
; Line 952
  0004d	48 8b c3	 mov	 rax, rbx
  00050	48 2b c6	 sub	 rax, rsi
  00053	48 83 f8 06	 cmp	 rax, 6
  00057	72 0f		 jb	 SHORT $LN7@scanformat
; Line 953
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ?$AA@
  00060	48 8b cf	 mov	 rcx, rdi
  00063	e8 00 00 00 00	 call	 luaL_error
$LN7@scanformat:
; Line 954
  00068	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  00071	85 c0		 test	 eax, eax
  00073	74 03		 je	 SHORT $LN6@scanformat
  00075	48 ff c3	 inc	 rbx
$LN6@scanformat:
; Line 955
  00078	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  00081	85 c0		 test	 eax, eax
  00083	74 03		 je	 SHORT $LN5@scanformat
  00085	48 ff c3	 inc	 rbx
$LN5@scanformat:
; Line 956
  00088	80 3b 2e	 cmp	 BYTE PTR [rbx], 46	; 0000002eH
  0008b	75 24		 jne	 SHORT $LN2@scanformat
; Line 958
  0008d	0f b6 4b 01	 movzx	 ecx, BYTE PTR [rbx+1]
  00091	48 ff c3	 inc	 rbx
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  0009a	85 c0		 test	 eax, eax
  0009c	74 03		 je	 SHORT $LN3@scanformat
  0009e	48 ff c3	 inc	 rbx
$LN3@scanformat:
; Line 959
  000a1	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  000aa	85 c0		 test	 eax, eax
  000ac	74 03		 je	 SHORT $LN2@scanformat
  000ae	48 ff c3	 inc	 rbx
$LN2@scanformat:
; Line 961
  000b1	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  000ba	85 c0		 test	 eax, eax
  000bc	74 0f		 je	 SHORT $LN1@scanformat
; Line 962
  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precisi@
  000c5	48 8b cf	 mov	 rcx, rdi
  000c8	e8 00 00 00 00	 call	 luaL_error
$LN1@scanformat:
; Line 964
  000cd	48 8b fb	 mov	 rdi, rbx
  000d0	49 8d 4e 01	 lea	 rcx, QWORD PTR [r14+1]
  000d4	48 8b d6	 mov	 rdx, rsi
  000d7	48 2b fe	 sub	 rdi, rsi
  000da	41 c6 06 25	 mov	 BYTE PTR [r14], 37	; 00000025H
  000de	4c 8d 47 01	 lea	 r8, QWORD PTR [rdi+1]
  000e2	e8 00 00 00 00	 call	 memcpy
; Line 968
  000e7	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000ec	42 c6 44 37 02
	00		 mov	 BYTE PTR [rdi+r14+2], 0
  000f2	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000f7	48 8b c3	 mov	 rax, rbx
  000fa	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ff	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00103	41 5e		 pop	 r14
  00105	c3		 ret	 0
scanformat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT addquoted
_TEXT	SEGMENT
l$ = 32
buff$1 = 40
__$ArrayPad$ = 56
L$ = 80
b$ = 88
arg$ = 96
addquoted PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 925
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00019	41 8b c0	 mov	 eax, r8d
  0001c	48 8b da	 mov	 rbx, rdx
; Line 927
  0001f	4c 8d 44 24 20	 lea	 r8, QWORD PTR l$[rsp]
  00024	8b d0		 mov	 edx, eax
  00026	e8 00 00 00 00	 call	 luaL_checklstring
; Line 928
  0002b	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0002f	48 8b f8	 mov	 rdi, rax
  00032	48 39 4b 10	 cmp	 QWORD PTR [rbx+16], rcx
  00036	72 0d		 jb	 SHORT $LN13@addquoted
  00038	ba 01 00 00 00	 mov	 edx, 1
  0003d	48 8b cb	 mov	 rcx, rbx
  00040	e8 00 00 00 00	 call	 luaL_prepbuffsize
$LN13@addquoted:
  00045	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00049	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0004c	c6 04 0a 22	 mov	 BYTE PTR [rdx+rcx], 34	; 00000022H
; Line 929
  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR l$[rsp]
  00055	48 ff 43 10	 inc	 QWORD PTR [rbx+16]
  00059	48 85 c0	 test	 rax, rax
  0005c	0f 84 de 00 00
	00		 je	 $LN19@addquoted
  00062	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL10@addquoted:
  00070	48 ff c8	 dec	 rax
  00073	48 89 44 24 20	 mov	 QWORD PTR l$[rsp], rax
; Line 930
  00078	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  0007b	3c 22		 cmp	 al, 34			; 00000022H
  0007d	74 62		 je	 SHORT $LN7@addquoted
  0007f	3c 5c		 cmp	 al, 92			; 0000005cH
  00081	74 5e		 je	 SHORT $LN7@addquoted
  00083	3c 0a		 cmp	 al, 10
  00085	74 5a		 je	 SHORT $LN7@addquoted
; Line 934
  00087	84 c0		 test	 al, al
  00089	74 17		 je	 SHORT $LN4@addquoted
  0008b	0f b6 c8	 movzx	 ecx, al
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_iscntrl
  00094	85 c0		 test	 eax, eax
  00096	75 0a		 jne	 SHORT $LN4@addquoted
; Line 943
  00098	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0009c	48 39 43 10	 cmp	 QWORD PTR [rbx+16], rax
  000a0	eb 6d		 jmp	 SHORT $LN24@addquoted
$LN4@addquoted:
; Line 936
  000a2	0f b6 4f 01	 movzx	 ecx, BYTE PTR [rdi+1]
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
; Line 937
  000ac	44 0f b6 0f	 movzx	 r9d, BYTE PTR [rdi]
  000b0	ba 0a 00 00 00	 mov	 edx, 10
  000b5	48 8d 4c 24 28	 lea	 rcx, QWORD PTR buff$1[rsp]
  000ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03GAHHLKFB@?2?$CFd?$AA@
  000c1	85 c0		 test	 eax, eax
  000c3	74 07		 je	 SHORT $LN25@addquoted
; Line 939
  000c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05OLMHDLGP@?2?$CF03d?$AA@
$LN25@addquoted:
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
; Line 940
  000d2	48 8d 54 24 28	 lea	 rdx, QWORD PTR buff$1[rsp]
  000d7	48 8b cb	 mov	 rcx, rbx
  000da	e8 00 00 00 00	 call	 luaL_addstring
; Line 942
  000df	eb 4e		 jmp	 SHORT $LN1@addquoted
$LN7@addquoted:
; Line 931
  000e1	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  000e5	48 39 43 10	 cmp	 QWORD PTR [rbx+16], rax
  000e9	72 0d		 jb	 SHORT $LN14@addquoted
  000eb	ba 01 00 00 00	 mov	 edx, 1
  000f0	48 8b cb	 mov	 rcx, rbx
  000f3	e8 00 00 00 00	 call	 luaL_prepbuffsize
$LN14@addquoted:
  000f8	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000fc	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000ff	c6 04 01 5c	 mov	 BYTE PTR [rcx+rax], 92	; 0000005cH
  00103	48 ff 43 10	 inc	 QWORD PTR [rbx+16]
  00107	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
; Line 932
  0010b	48 3b 43 08	 cmp	 rax, QWORD PTR [rbx+8]
$LN24@addquoted:
  0010f	72 0d		 jb	 SHORT $LN15@addquoted
  00111	ba 01 00 00 00	 mov	 edx, 1
  00116	48 8b cb	 mov	 rcx, rbx
  00119	e8 00 00 00 00	 call	 luaL_prepbuffsize
$LN15@addquoted:
  0011e	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00122	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  00125	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00128	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0012b	48 ff 43 10	 inc	 QWORD PTR [rbx+16]
$LN1@addquoted:
; Line 944
  0012f	48 8b 44 24 20	 mov	 rax, QWORD PTR l$[rsp]
  00134	48 ff c7	 inc	 rdi
  00137	48 85 c0	 test	 rax, rax
  0013a	0f 85 30 ff ff
	ff		 jne	 $LL10@addquoted
$LN19@addquoted:
; Line 929
  00140	48 ff c8	 dec	 rax
  00143	48 89 44 24 20	 mov	 QWORD PTR l$[rsp], rax
; Line 946
  00148	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0014c	48 39 43 10	 cmp	 QWORD PTR [rbx+16], rax
  00150	72 0d		 jb	 SHORT $LN17@addquoted
  00152	ba 01 00 00 00	 mov	 edx, 1
  00157	48 8b cb	 mov	 rcx, rbx
  0015a	e8 00 00 00 00	 call	 luaL_prepbuffsize
$LN17@addquoted:
  0015f	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00163	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00166	c6 04 01 22	 mov	 BYTE PTR [rcx+rax], 34	; 00000022H
  0016a	48 ff 43 10	 inc	 QWORD PTR [rbx+16]
; Line 947
  0016e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00173	48 33 cc	 xor	 rcx, rsp
  00176	e8 00 00 00 00	 call	 __security_check_cookie
  0017b	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00180	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00184	5f		 pop	 rdi
  00185	c3		 ret	 0
addquoted ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_gsub
_TEXT	SEGMENT
lp$ = 48
L$GSCopy$1$ = 56
tv391 = 64
srcl$ = 72
max_s$1$ = 80
ms$ = 96
b$ = 656
__$ArrayPad$ = 8880
L$ = 8944
str_gsub PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 779
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	55		 push	 rbp
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 8d ac 24 40
	de ff ff	 lea	 rbp, QWORD PTR [rsp-8640]
  00020	b8 c0 22 00 00	 mov	 eax, 8896		; 000022c0H
  00025	e8 00 00 00 00	 call	 __chkstk
  0002a	48 2b e0	 sub	 rsp, rax
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c4	 xor	 rax, rsp
  00037	48 89 85 b0 21
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax
; Line 781
  0003e	4c 8d 44 24 48	 lea	 r8, QWORD PTR srcl$[rsp]
  00043	ba 01 00 00 00	 mov	 edx, 1
  00048	4c 8b f1	 mov	 r14, rcx
  0004b	48 89 4c 24 38	 mov	 QWORD PTR L$GSCopy$1$[rsp], rcx
  00050	e8 00 00 00 00	 call	 luaL_checklstring
; Line 782
  00055	4c 8d 44 24 30	 lea	 r8, QWORD PTR lp$[rsp]
  0005a	ba 02 00 00 00	 mov	 edx, 2
  0005f	49 8b ce	 mov	 rcx, r14
  00062	48 8b d8	 mov	 rbx, rax
  00065	e8 00 00 00 00	 call	 luaL_checklstring
; Line 783
  0006a	ba 03 00 00 00	 mov	 edx, 3
  0006f	49 8b ce	 mov	 rcx, r14
  00072	4c 8b e0	 mov	 r12, rax
  00075	e8 00 00 00 00	 call	 lua_type
; Line 784
  0007a	4c 8b 44 24 48	 mov	 r8, QWORD PTR srcl$[rsp]
  0007f	ba 04 00 00 00	 mov	 edx, 4
  00084	49 8b ce	 mov	 rcx, r14
  00087	49 ff c0	 inc	 r8
  0008a	44 8b e8	 mov	 r13d, eax
  0008d	e8 00 00 00 00	 call	 luaL_optinteger
; Line 785
  00092	33 ff		 xor	 edi, edi
  00094	41 80 3c 24 5e	 cmp	 BYTE PTR [r12], 94	; 0000005eH
  00099	41 8d 4d fd	 lea	 ecx, DWORD PTR [r13-3]
  0009d	48 8b f0	 mov	 rsi, rax
  000a0	40 0f 94 c7	 sete	 dil
; Line 786
  000a4	45 33 ff	 xor	 r15d, r15d
  000a7	48 89 44 24 50	 mov	 QWORD PTR max_s$1$[rsp], rax
  000ac	83 f9 03	 cmp	 ecx, 3
  000af	76 13		 jbe	 SHORT $LN12@str_gsub
; Line 791
  000b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BP@PPPOBACA@string?1function?1table?5expected?$AA@
  000b8	41 8d 57 03	 lea	 edx, QWORD PTR [r15+3]
  000bc	49 8b ce	 mov	 rcx, r14
  000bf	e8 00 00 00 00	 call	 luaL_argerror
$LN12@str_gsub:
; Line 792
  000c4	48 8d 95 90 01
	00 00		 lea	 rdx, QWORD PTR b$[rbp-256]
  000cb	49 8b ce	 mov	 rcx, r14
  000ce	e8 00 00 00 00	 call	 luaL_buffinit
; Line 794
  000d3	48 8b 44 24 30	 mov	 rax, QWORD PTR lp$[rsp]
  000d8	85 ff		 test	 edi, edi
  000da	74 0b		 je	 SHORT $LN9@str_gsub
  000dc	49 ff c4	 inc	 r12
  000df	48 ff c8	 dec	 rax
  000e2	48 89 44 24 30	 mov	 QWORD PTR lp$[rsp], rax
$LN9@str_gsub:
; Line 796
  000e7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR srcl$[rsp]
  000ec	49 03 c4	 add	 rax, r12
  000ef	4c 89 74 24 78	 mov	 QWORD PTR ms$[rsp+24], r14
  000f4	48 89 44 24 70	 mov	 QWORD PTR ms$[rsp+16], rax
  000f9	4c 8d 04 19	 lea	 r8, QWORD PTR [rcx+rbx]
  000fd	48 b8 57 9e ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427362903 ; 3fffffffffff9e57H
  00107	c7 45 88 c8 00
	00 00		 mov	 DWORD PTR ms$[rbp-216], 200 ; 000000c8H
  0010e	48 89 5c 24 60	 mov	 QWORD PTR ms$[rsp], rbx
  00113	4c 89 44 24 68	 mov	 QWORD PTR ms$[rsp+8], r8
  00118	48 3b c8	 cmp	 rcx, rax
  0011b	73 0e		 jae	 SHORT $LN15@str_gsub
  0011d	48 8d 04 8d a0
	86 01 00	 lea	 rax, QWORD PTR [rcx*4+100000]
  00125	48 89 45 80	 mov	 QWORD PTR ms$[rbp-224], rax
  00129	eb 08		 jmp	 SHORT $LN39@str_gsub
$LN15@str_gsub:
  0012b	48 c7 45 80 ff
	ff ff ff	 mov	 QWORD PTR ms$[rbp-224], -1
$LN39@str_gsub:
; Line 797
  00133	48 85 f6	 test	 rsi, rsi
  00136	0f 8e e4 01 00
	00		 jle	 $LN40@str_gsub
; Line 809
  0013c	4c 63 f7	 movsxd	 r14, edi
  0013f	4c 89 74 24 40	 mov	 QWORD PTR tv391[rsp], r14
$LL8@str_gsub:
; Line 800
  00144	48 8d 4c 24 60	 lea	 rcx, QWORD PTR ms$[rsp]
  00149	4d 8b c4	 mov	 r8, r12
  0014c	48 8b d3	 mov	 rdx, rbx
  0014f	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR ms$[rbp-212], 0
  00156	e8 00 00 00 00	 call	 match
  0015b	48 8b f0	 mov	 rsi, rax
  0015e	48 85 c0	 test	 rax, rax
  00161	0f 84 56 01 00
	00		 je	 $LN5@str_gsub
; Line 802
  00167	4c 8b 4c 24 78	 mov	 r9, QWORD PTR ms$[rsp+24]
  0016c	41 8b d5	 mov	 edx, r13d
  0016f	49 ff c7	 inc	 r15
  00172	49 8b f9	 mov	 rdi, r9
  00175	83 ea 05	 sub	 edx, 5
  00178	74 59		 je	 SHORT $LN24@str_gsub
  0017a	ff ca		 dec	 edx
  0017c	74 1c		 je	 SHORT $LN25@str_gsub
  0017e	48 8d 95 90 01
	00 00		 lea	 rdx, QWORD PTR b$[rbp-256]
  00185	48 8d 4c 24 60	 lea	 rcx, QWORD PTR ms$[rsp]
  0018a	4c 8b c8	 mov	 r9, rax
  0018d	4c 8b c3	 mov	 r8, rbx
  00190	e8 00 00 00 00	 call	 add_s
  00195	e9 19 01 00 00	 jmp	 $LN28@str_gsub
$LN25@str_gsub:
  0019a	ba 03 00 00 00	 mov	 edx, 3
  0019f	49 8b c9	 mov	 rcx, r9
  001a2	e8 00 00 00 00	 call	 lua_pushvalue
  001a7	48 8d 4c 24 60	 lea	 rcx, QWORD PTR ms$[rsp]
  001ac	4c 8b c6	 mov	 r8, rsi
  001af	48 8b d3	 mov	 rdx, rbx
  001b2	e8 00 00 00 00	 call	 push_captures
  001b7	45 33 c9	 xor	 r9d, r9d
  001ba	48 8b cf	 mov	 rcx, rdi
  001bd	45 8d 41 01	 lea	 r8d, QWORD PTR [r9+1]
  001c1	8b d0		 mov	 edx, eax
  001c3	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  001cc	e8 00 00 00 00	 call	 lua_callk
  001d1	eb 58		 jmp	 SHORT $LN26@str_gsub
$LN24@str_gsub:
  001d3	83 7d 8c 00	 cmp	 DWORD PTR ms$[rbp-212], 0
  001d7	7f 13		 jg	 SHORT $LN36@str_gsub
  001d9	4c 8b c0	 mov	 r8, rax
  001dc	48 8b d3	 mov	 rdx, rbx
  001df	49 8b c9	 mov	 rcx, r9
  001e2	4c 2b c3	 sub	 r8, rbx
  001e5	e8 00 00 00 00	 call	 lua_pushlstring
  001ea	eb 32		 jmp	 SHORT $LN30@str_gsub
$LN36@str_gsub:
  001ec	4c 8b 75 98	 mov	 r14, QWORD PTR ms$[rbp-200]
  001f0	49 83 fe ff	 cmp	 r14, -1
  001f4	75 62		 jne	 SHORT $LN32@str_gsub
  001f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BFKNEALP@unfinished?5capture?$AA@
  001fd	49 8b c9	 mov	 rcx, r9
  00200	e8 00 00 00 00	 call	 luaL_error
  00205	4c 8b 4c 24 78	 mov	 r9, QWORD PTR ms$[rsp+24]
$LN31@str_gsub:
  0020a	48 8b 55 90	 mov	 rdx, QWORD PTR ms$[rbp-208]
  0020e	4d 8b c6	 mov	 r8, r14
  00211	49 8b c9	 mov	 rcx, r9
  00214	e8 00 00 00 00	 call	 lua_pushlstring
$LN47@str_gsub:
  00219	4c 8b 74 24 40	 mov	 r14, QWORD PTR tv391[rsp]
$LN30@str_gsub:
  0021e	ba 03 00 00 00	 mov	 edx, 3
  00223	48 8b cf	 mov	 rcx, rdi
  00226	e8 00 00 00 00	 call	 lua_gettable
$LN26@str_gsub:
  0022b	83 ca ff	 or	 edx, -1
  0022e	48 8b cf	 mov	 rcx, rdi
  00231	e8 00 00 00 00	 call	 lua_toboolean
  00236	48 8b cf	 mov	 rcx, rdi
  00239	85 c0		 test	 eax, eax
  0023b	75 37		 jne	 SHORT $LN22@str_gsub
  0023d	8d 50 fe	 lea	 edx, QWORD PTR [rax-2]
  00240	e8 00 00 00 00	 call	 lua_settop
  00245	4c 8b c6	 mov	 r8, rsi
  00248	48 8b d3	 mov	 rdx, rbx
  0024b	4c 2b c3	 sub	 r8, rbx
  0024e	48 8b cf	 mov	 rcx, rdi
  00251	e8 00 00 00 00	 call	 lua_pushlstring
  00256	eb 4f		 jmp	 SHORT $LN20@str_gsub
$LN32@str_gsub:
  00258	49 83 fe fe	 cmp	 r14, -2
  0025c	75 ac		 jne	 SHORT $LN31@str_gsub
  0025e	48 8b 55 90	 mov	 rdx, QWORD PTR ms$[rbp-208]
  00262	49 8b c9	 mov	 rcx, r9
  00265	48 2b 54 24 60	 sub	 rdx, QWORD PTR ms$[rsp]
  0026a	48 ff c2	 inc	 rdx
  0026d	e8 00 00 00 00	 call	 lua_pushinteger
  00272	eb a5		 jmp	 SHORT $LN47@str_gsub
$LN22@str_gsub:
  00274	83 ca ff	 or	 edx, -1
  00277	e8 00 00 00 00	 call	 lua_isstring
  0027c	85 c0		 test	 eax, eax
  0027e	75 27		 jne	 SHORT $LN20@str_gsub
  00280	83 ca ff	 or	 edx, -1
  00283	48 8b cf	 mov	 rcx, rdi
  00286	e8 00 00 00 00	 call	 lua_type
  0028b	48 8b cf	 mov	 rcx, rdi
  0028e	8b d0		 mov	 edx, eax
  00290	e8 00 00 00 00	 call	 lua_typename
  00295	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@LPDIHGGA@invalid?5replacement?5value?5?$CIa?5?$CFs?$CJ@
  0029c	48 8b cf	 mov	 rcx, rdi
  0029f	4c 8b c0	 mov	 r8, rax
  002a2	e8 00 00 00 00	 call	 luaL_error
$LN20@str_gsub:
  002a7	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR b$[rbp-256]
  002ae	e8 00 00 00 00	 call	 luaL_addvalue
$LN28@str_gsub:
; Line 804
  002b3	48 3b f3	 cmp	 rsi, rbx
  002b6	76 05		 jbe	 SHORT $LN5@str_gsub
; Line 805
  002b8	48 8b de	 mov	 rbx, rsi
  002bb	eb 49		 jmp	 SHORT $LN2@str_gsub
$LN5@str_gsub:
; Line 806
  002bd	4c 8b 44 24 68	 mov	 r8, QWORD PTR ms$[rsp+8]
  002c2	49 3b d8	 cmp	 rbx, r8
  002c5	73 54		 jae	 SHORT $LN46@str_gsub
; Line 807
  002c7	48 8b 95 a0 01
	00 00		 mov	 rdx, QWORD PTR b$[rbp-240]
  002ce	48 3b 95 98 01
	00 00		 cmp	 rdx, QWORD PTR b$[rbp-248]
  002d5	72 18		 jb	 SHORT $LN13@str_gsub
  002d7	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR b$[rbp-256]
  002de	ba 01 00 00 00	 mov	 edx, 1
  002e3	e8 00 00 00 00	 call	 luaL_prepbuffsize
  002e8	48 8b 95 a0 01
	00 00		 mov	 rdx, QWORD PTR b$[rbp-240]
$LN13@str_gsub:
  002ef	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]
  002f2	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR b$[rbp-256]
  002f9	88 0c 10	 mov	 BYTE PTR [rax+rdx], cl
  002fc	48 ff 85 a0 01
	00 00		 inc	 QWORD PTR b$[rbp-240]
  00303	48 ff c3	 inc	 rbx
$LN2@str_gsub:
; Line 809
  00306	4d 85 f6	 test	 r14, r14
  00309	75 0b		 jne	 SHORT $LN45@str_gsub
; Line 797
  0030b	4c 3b 7c 24 50	 cmp	 r15, QWORD PTR max_s$1$[rsp]
  00310	0f 8c 2e fe ff
	ff		 jl	 $LL8@str_gsub
$LN45@str_gsub:
  00316	4c 8b 44 24 68	 mov	 r8, QWORD PTR ms$[rsp+8]
$LN46@str_gsub:
  0031b	4c 8b 74 24 38	 mov	 r14, QWORD PTR L$GSCopy$1$[rsp]
$LN40@str_gsub:
; Line 811
  00320	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR b$[rbp-256]
  00327	4c 2b c3	 sub	 r8, rbx
  0032a	48 8b d3	 mov	 rdx, rbx
  0032d	e8 00 00 00 00	 call	 luaL_addlstring
; Line 812
  00332	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR b$[rbp-256]
  00339	e8 00 00 00 00	 call	 luaL_pushresult
; Line 813
  0033e	49 8b d7	 mov	 rdx, r15
  00341	49 8b ce	 mov	 rcx, r14
  00344	e8 00 00 00 00	 call	 lua_pushinteger
; Line 814
  00349	b8 02 00 00 00	 mov	 eax, 2
; Line 815
  0034e	48 8b 8d b0 21
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  00355	48 33 cc	 xor	 rcx, rsp
  00358	e8 00 00 00 00	 call	 __security_check_cookie
  0035d	4c 8d 9c 24 c0
	22 00 00	 lea	 r11, QWORD PTR [rsp+8896]
  00365	49 8b 5b 38	 mov	 rbx, QWORD PTR [r11+56]
  00369	49 8b 73 40	 mov	 rsi, QWORD PTR [r11+64]
  0036d	49 8b 7b 48	 mov	 rdi, QWORD PTR [r11+72]
  00371	49 8b e3	 mov	 rsp, r11
  00374	41 5f		 pop	 r15
  00376	41 5e		 pop	 r14
  00378	41 5d		 pop	 r13
  0037a	41 5c		 pop	 r12
  0037c	5d		 pop	 rbp
  0037d	c3		 ret	 0
str_gsub ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT add_value
_TEXT	SEGMENT
ms$ = 64
b$ = 72
s$ = 80
e$ = 88
tr$ = 96
add_value PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 749
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 751
  0001a	44 8b 54 24 60	 mov	 r10d, DWORD PTR tr$[rsp]
  0001f	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
  00023	49 8b f9	 mov	 rdi, r9
  00026	49 8b f0	 mov	 rsi, r8
  00029	4c 8b f2	 mov	 r14, rdx
  0002c	48 8b e9	 mov	 rbp, rcx
  0002f	41 83 ea 05	 sub	 r10d, 5
  00033	74 46		 je	 SHORT $LN5@add_value
  00035	41 ff ca	 dec	 r10d
  00038	74 0a		 je	 SHORT $LN6@add_value
; Line 765
  0003a	e8 00 00 00 00	 call	 add_s
; Line 766
  0003f	e9 b3 00 00 00	 jmp	 $LN9@add_value
$LN6@add_value:
; Line 754
  00044	ba 03 00 00 00	 mov	 edx, 3
  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 lua_pushvalue
; Line 755
  00051	4c 8b c7	 mov	 r8, rdi
  00054	48 8b d6	 mov	 rdx, rsi
  00057	48 8b cd	 mov	 rcx, rbp
  0005a	e8 00 00 00 00	 call	 push_captures
; Line 756
  0005f	45 33 c9	 xor	 r9d, r9d
  00062	48 8b cb	 mov	 rcx, rbx
  00065	45 8d 41 01	 lea	 r8d, QWORD PTR [r9+1]
  00069	8b d0		 mov	 edx, eax
  0006b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00074	e8 00 00 00 00	 call	 lua_callk
; Line 757
  00079	eb 14		 jmp	 SHORT $LN7@add_value
$LN5@add_value:
; Line 760
  0007b	33 d2		 xor	 edx, edx
  0007d	e8 00 00 00 00	 call	 push_onecapture
; Line 761
  00082	ba 03 00 00 00	 mov	 edx, 3
  00087	48 8b cb	 mov	 rcx, rbx
  0008a	e8 00 00 00 00	 call	 lua_gettable
$LN7@add_value:
; Line 769
  0008f	83 ca ff	 or	 edx, -1
  00092	48 8b cb	 mov	 rcx, rbx
  00095	e8 00 00 00 00	 call	 lua_toboolean
; Line 770
  0009a	48 8b cb	 mov	 rcx, rbx
  0009d	85 c0		 test	 eax, eax
  0009f	75 1b		 jne	 SHORT $LN3@add_value
  000a1	8d 50 fe	 lea	 edx, QWORD PTR [rax-2]
  000a4	e8 00 00 00 00	 call	 lua_settop
; Line 771
  000a9	48 2b fe	 sub	 rdi, rsi
  000ac	48 8b d6	 mov	 rdx, rsi
  000af	4c 8b c7	 mov	 r8, rdi
  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	e8 00 00 00 00	 call	 lua_pushlstring
  000ba	eb 33		 jmp	 SHORT $LN1@add_value
$LN3@add_value:
; Line 773
  000bc	83 ca ff	 or	 edx, -1
  000bf	e8 00 00 00 00	 call	 lua_isstring
  000c4	85 c0		 test	 eax, eax
  000c6	75 27		 jne	 SHORT $LN1@add_value
; Line 774
  000c8	83 ca ff	 or	 edx, -1
  000cb	48 8b cb	 mov	 rcx, rbx
  000ce	e8 00 00 00 00	 call	 lua_type
  000d3	48 8b cb	 mov	 rcx, rbx
  000d6	8b d0		 mov	 edx, eax
  000d8	e8 00 00 00 00	 call	 lua_typename
  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@LPDIHGGA@invalid?5replacement?5value?5?$CIa?5?$CFs?$CJ@
  000e4	48 8b cb	 mov	 rcx, rbx
  000e7	4c 8b c0	 mov	 r8, rax
  000ea	e8 00 00 00 00	 call	 luaL_error
$LN1@add_value:
; Line 775
  000ef	49 8b ce	 mov	 rcx, r14
  000f2	e8 00 00 00 00	 call	 luaL_addvalue
$LN9@add_value:
; Line 776
  000f7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fc	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00101	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00106	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0010b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010f	41 5e		 pop	 r14
  00111	c3		 ret	 0
add_value ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT add_s
_TEXT	SEGMENT
l$ = 80
ms$ = 80
b$ = 88
s$ = 96
e$ = 104
add_s	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 721
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 723
  00016	4c 8b 71 18	 mov	 r14, QWORD PTR [rcx+24]
  0001a	49 8b f0	 mov	 rsi, r8
  0001d	48 8b da	 mov	 rbx, rdx
  00020	4c 8b e9	 mov	 r13, rcx
; Line 724
  00023	4c 8d 44 24 50	 lea	 r8, QWORD PTR l$[rsp]
  00028	ba 03 00 00 00	 mov	 edx, 3
  0002d	49 8b ce	 mov	 rcx, r14
  00030	4d 8b f9	 mov	 r15, r9
  00033	e8 00 00 00 00	 call	 lua_tolstring
; Line 725
  00038	33 ff		 xor	 edi, edi
  0003a	48 8b e8	 mov	 rbp, rax
  0003d	48 39 7c 24 50	 cmp	 QWORD PTR l$[rsp], rdi
  00042	0f 86 cc 00 00
	00		 jbe	 $LN8@add_s
$LL10@add_s:
; Line 726
  00048	80 3c 2f 25	 cmp	 BYTE PTR [rdi+rbp], 37	; 00000025H
  0004c	75 2b		 jne	 SHORT $LN4@add_s
; Line 730
  0004e	0f b6 4c 2f 01	 movzx	 ecx, BYTE PTR [rdi+rbp+1]
  00053	48 ff c7	 inc	 rdi
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  0005c	85 c0		 test	 eax, eax
  0005e	75 44		 jne	 SHORT $LN5@add_s
; Line 731
  00060	80 3c 2f 25	 cmp	 BYTE PTR [rdi+rbp], 37	; 00000025H
  00064	74 13		 je	 SHORT $LN4@add_s
; Line 732
  00066	44 8d 40 25	 lea	 r8d, QWORD PTR [rax+37]
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@KLCOLAN@invalid?5use?5of?5?8?$CFc?8?5in?5replaceme@
  00071	49 8b ce	 mov	 rcx, r14
  00074	e8 00 00 00 00	 call	 luaL_error
$LN4@add_s:
; Line 733
  00079	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0007d	48 39 43 10	 cmp	 QWORD PTR [rbx+16], rax
  00081	72 0d		 jb	 SHORT $LN14@add_s
  00083	ba 01 00 00 00	 mov	 edx, 1
  00088	48 8b cb	 mov	 rcx, rbx
  0008b	e8 00 00 00 00	 call	 luaL_prepbuffsize
$LN14@add_s:
  00090	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00094	0f b6 04 2f	 movzx	 eax, BYTE PTR [rdi+rbp]
  00098	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0009b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0009e	48 ff 43 10	 inc	 QWORD PTR [rbx+16]
  000a2	eb 62		 jmp	 SHORT $LN9@add_s
$LN5@add_s:
; Line 735
  000a4	0f b6 04 2f	 movzx	 eax, BYTE PTR [rdi+rbp]
  000a8	3c 30		 cmp	 al, 48			; 00000030H
  000aa	75 13		 jne	 SHORT $LN2@add_s
; Line 736
  000ac	4d 8b c7	 mov	 r8, r15
  000af	48 8b d6	 mov	 rdx, rsi
  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	4c 2b c6	 sub	 r8, rsi
  000b8	e8 00 00 00 00	 call	 luaL_addlstring
; Line 737
  000bd	eb 47		 jmp	 SHORT $LN9@add_s
$LN2@add_s:
; Line 738
  000bf	0f be d0	 movsx	 edx, al
  000c2	4d 8b cf	 mov	 r9, r15
  000c5	4c 8b c6	 mov	 r8, rsi
  000c8	83 ea 31	 sub	 edx, 49			; 00000031H
  000cb	49 8b cd	 mov	 rcx, r13
  000ce	e8 00 00 00 00	 call	 push_onecapture
; Line 739
  000d3	45 33 c0	 xor	 r8d, r8d
  000d6	83 ca ff	 or	 edx, -1
  000d9	49 8b ce	 mov	 rcx, r14
  000dc	e8 00 00 00 00	 call	 luaL_tolstring
; Line 740
  000e1	41 83 c8 ff	 or	 r8d, -1
  000e5	49 8b ce	 mov	 rcx, r14
  000e8	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  000ec	e8 00 00 00 00	 call	 lua_rotate
  000f1	ba fe ff ff ff	 mov	 edx, -2
  000f6	49 8b ce	 mov	 rcx, r14
  000f9	e8 00 00 00 00	 call	 lua_settop
; Line 741
  000fe	48 8b cb	 mov	 rcx, rbx
  00101	e8 00 00 00 00	 call	 luaL_addvalue
$LN9@add_s:
; Line 725
  00106	48 ff c7	 inc	 rdi
  00109	48 3b 7c 24 50	 cmp	 rdi, QWORD PTR l$[rsp]
  0010e	0f 82 34 ff ff
	ff		 jb	 $LL10@add_s
$LN8@add_s:
; Line 745
  00114	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00119	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  0011e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00122	41 5f		 pop	 r15
  00124	41 5e		 pop	 r14
  00126	41 5d		 pop	 r13
  00128	5f		 pop	 rdi
  00129	5e		 pop	 rsi
  0012a	c3		 ret	 0
add_s	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gmatch
_TEXT	SEGMENT
lp$ = 48
L$ = 48
ls$ = 56
gmatch	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 706
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 708
  0000f	4c 8d 44 24 38	 lea	 r8, QWORD PTR ls$[rsp]
  00014	ba 01 00 00 00	 mov	 edx, 1
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	e8 00 00 00 00	 call	 luaL_checklstring
; Line 709
  00021	4c 8d 44 24 30	 lea	 r8, QWORD PTR lp$[rsp]
  00026	ba 02 00 00 00	 mov	 edx, 2
  0002b	48 8b cb	 mov	 rcx, rbx
  0002e	48 8b f8	 mov	 rdi, rax
  00031	e8 00 00 00 00	 call	 luaL_checklstring
; Line 711
  00036	ba 02 00 00 00	 mov	 edx, 2
  0003b	48 8b cb	 mov	 rcx, rbx
  0003e	48 8b f0	 mov	 rsi, rax
  00041	e8 00 00 00 00	 call	 lua_settop
; Line 712
  00046	ba 40 02 00 00	 mov	 edx, 576		; 00000240H
  0004b	48 8b cb	 mov	 rcx, rbx
  0004e	e8 00 00 00 00	 call	 lua_newuserdata
; Line 713
  00053	4c 8b 44 24 38	 mov	 r8, QWORD PTR ls$[rsp]
  00058	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lp$[rsp]
  0005d	48 8b d0	 mov	 rdx, rax
  00060	48 89 58 28	 mov	 QWORD PTR [rax+40], rbx
  00064	c7 40 38 c8 00
	00 00		 mov	 DWORD PTR [rax+56], 200	; 000000c8H
  0006b	48 89 78 10	 mov	 QWORD PTR [rax+16], rdi
  0006f	49 8d 04 38	 lea	 rax, QWORD PTR [r8+rdi]
  00073	48 89 42 18	 mov	 QWORD PTR [rdx+24], rax
  00077	48 8d 04 31	 lea	 rax, QWORD PTR [rcx+rsi]
  0007b	48 89 42 20	 mov	 QWORD PTR [rdx+32], rax
  0007f	48 b8 57 9e ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427362903 ; 3fffffffffff9e57H
  00089	4c 3b c0	 cmp	 r8, rax
  0008c	73 0e		 jae	 SHORT $LN4@gmatch
  0008e	4a 8d 04 85 a0
	86 01 00	 lea	 rax, QWORD PTR [r8*4+100000]
  00096	48 89 42 30	 mov	 QWORD PTR [rdx+48], rax
  0009a	eb 08		 jmp	 SHORT $LN3@gmatch
$LN4@gmatch:
  0009c	48 c7 42 30 ff
	ff ff ff	 mov	 QWORD PTR [rdx+48], -1
$LN3@gmatch:
; Line 714
  000a4	48 89 3a	 mov	 QWORD PTR [rdx], rdi
  000a7	48 89 72 08	 mov	 QWORD PTR [rdx+8], rsi
; Line 715
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gmatch_aux
  000b2	41 b8 03 00 00
	00		 mov	 r8d, 3
  000b8	48 8b cb	 mov	 rcx, rbx
  000bb	e8 00 00 00 00	 call	 lua_pushcclosure
; Line 717
  000c0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000c5	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000ca	b8 01 00 00 00	 mov	 eax, 1
  000cf	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d3	5f		 pop	 rdi
  000d4	c3		 ret	 0
gmatch	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gmatch_aux
_TEXT	SEGMENT
L$ = 48
gmatch_aux PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 688
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 689
  00014	ba d5 b9 f0 ff	 mov	 edx, -1001003		; fffffffffff0b9d5H
  00019	e8 00 00 00 00	 call	 lua_touserdata
  0001e	48 8b f8	 mov	 rdi, rax
; Line 691
  00021	48 8b 18	 mov	 rbx, QWORD PTR [rax]
  00024	48 3b 58 18	 cmp	 rbx, QWORD PTR [rax+24]
  00028	77 2a		 ja	 SHORT $LN4@gmatch_aux
  0002a	33 ed		 xor	 ebp, ebp
  0002c	0f 1f 40 00	 npad	 4
$LL6@gmatch_aux:
; Line 694
  00030	4c 8b 47 08	 mov	 r8, QWORD PTR [rdi+8]
  00034	48 8d 4f 10	 lea	 rcx, QWORD PTR [rdi+16]
  00038	48 8b d3	 mov	 rdx, rbx
  0003b	89 6f 3c	 mov	 DWORD PTR [rdi+60], ebp
  0003e	e8 00 00 00 00	 call	 match
  00043	4c 8b c0	 mov	 r8, rax
  00046	48 85 c0	 test	 rax, rax
  00049	75 20		 jne	 SHORT $LN12@gmatch_aux
; Line 691
  0004b	48 ff c3	 inc	 rbx
  0004e	48 3b 5f 18	 cmp	 rbx, QWORD PTR [rdi+24]
  00052	76 dc		 jbe	 SHORT $LL6@gmatch_aux
$LN4@gmatch_aux:
; Line 702
  00054	33 c0		 xor	 eax, eax
$LN7@gmatch_aux:
; Line 703
  00056	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005b	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00060	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN12@gmatch_aux:
; Line 695
  0006b	48 3b c3	 cmp	 rax, rbx
  0006e	75 04		 jne	 SHORT $LN2@gmatch_aux
; Line 696
  00070	48 8d 43 01	 lea	 rax, QWORD PTR [rbx+1]
$LN2@gmatch_aux:
; Line 699
  00074	48 8d 4f 10	 lea	 rcx, QWORD PTR [rdi+16]
  00078	48 8b d3	 mov	 rdx, rbx
  0007b	48 89 07	 mov	 QWORD PTR [rdi], rax
  0007e	e8 00 00 00 00	 call	 push_captures
  00083	eb d1		 jmp	 SHORT $LN7@gmatch_aux
gmatch_aux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_match
_TEXT	SEGMENT
L$ = 8
str_match PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 676
  00000	33 d2		 xor	 edx, edx
  00002	e9 00 00 00 00	 jmp	 str_find_aux
str_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_find
_TEXT	SEGMENT
L$ = 8
str_find PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 671
  00000	ba 01 00 00 00	 mov	 edx, 1
  00005	e9 00 00 00 00	 jmp	 str_find_aux
str_find ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_find_aux
_TEXT	SEGMENT
lp$ = 32
ls$ = 40
find$1$ = 48
ms$1 = 64
__$ArrayPad$ = 624
L$ = 688
find$ = 696
str_find_aux PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 623
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	55		 push	 rbp
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	41 56		 push	 r14
  00011	41 57		 push	 r15
  00013	48 8d ac 24 80
	fe ff ff	 lea	 rbp, QWORD PTR [rsp-384]
  0001b	48 81 ec 80 02
	00 00		 sub	 rsp, 640		; 00000280H
  00022	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00029	48 33 c4	 xor	 rax, rsp
  0002c	48 89 85 70 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax
  00033	44 8b e2	 mov	 r12d, edx
  00036	89 54 24 30	 mov	 DWORD PTR find$1$[rsp], edx
; Line 625
  0003a	4c 8d 44 24 28	 lea	 r8, QWORD PTR ls$[rsp]
  0003f	ba 01 00 00 00	 mov	 edx, 1
  00044	4c 8b f9	 mov	 r15, rcx
  00047	e8 00 00 00 00	 call	 luaL_checklstring
; Line 626
  0004c	4c 8d 44 24 20	 lea	 r8, QWORD PTR lp$[rsp]
  00051	ba 02 00 00 00	 mov	 edx, 2
  00056	49 8b cf	 mov	 rcx, r15
  00059	4c 8b e8	 mov	 r13, rax
  0005c	e8 00 00 00 00	 call	 luaL_checklstring
; Line 627
  00061	48 8b 5c 24 28	 mov	 rbx, QWORD PTR ls$[rsp]
  00066	ba 03 00 00 00	 mov	 edx, 3
  0006b	44 8d 42 fe	 lea	 r8d, QWORD PTR [rdx-2]
  0006f	49 8b cf	 mov	 rcx, r15
  00072	48 8b f0	 mov	 rsi, rax
  00075	e8 00 00 00 00	 call	 luaL_optinteger
  0007a	4c 8b 44 24 28	 mov	 r8, QWORD PTR ls$[rsp]
  0007f	4c 8b f0	 mov	 r14, rax
  00082	48 85 c0	 test	 rax, rax
  00085	79 0e		 jns	 SHORT $LN18@str_find_a
  00087	48 f7 d8	 neg	 rax
  0008a	48 3b c3	 cmp	 rax, rbx
  0008d	77 27		 ja	 SHORT $LN47@str_find_a
  0008f	49 ff c6	 inc	 r14
  00092	4c 03 f3	 add	 r14, rbx
$LN18@str_find_a:
; Line 628
  00095	49 83 fe 01	 cmp	 r14, 1
  00099	7c 1b		 jl	 SHORT $LN47@str_find_a
; Line 629
  0009b	49 8d 50 01	 lea	 rdx, QWORD PTR [r8+1]
  0009f	4c 3b f2	 cmp	 r14, rdx
  000a2	7e 18		 jle	 SHORT $LN13@str_find_a
; Line 630
  000a4	49 8b cf	 mov	 rcx, r15
  000a7	e8 00 00 00 00	 call	 lua_pushnil
; Line 631
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	e9 cc 01 00 00	 jmp	 $LN16@str_find_a
$LN47@str_find_a:
; Line 628
  000b6	41 be 01 00 00
	00		 mov	 r14d, 1
$LN13@str_find_a:
  000bc	48 89 bc 24 b8
	02 00 00	 mov	 QWORD PTR [rsp+696], rdi
; Line 634
  000c4	45 85 e4	 test	 r12d, r12d
  000c7	0f 84 b5 00 00
	00		 je	 $LN12@str_find_a
  000cd	ba 04 00 00 00	 mov	 edx, 4
  000d2	49 8b cf	 mov	 rcx, r15
  000d5	e8 00 00 00 00	 call	 lua_toboolean
  000da	85 c0		 test	 eax, eax
  000dc	75 46		 jne	 SHORT $LN11@str_find_a
  000de	4c 8b 64 24 20	 mov	 r12, QWORD PTR lp$[rsp]
  000e3	33 ff		 xor	 edi, edi
  000e5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL27@str_find_a:
  000f0	48 8d 1c 37	 lea	 rbx, QWORD PTR [rdi+rsi]
  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NLFJOONJ@?$FO$?$CK?$CL?$DP?4?$CI?$FL?$CF?9?$AA@
  000fb	48 8b cb	 mov	 rcx, rbx
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strpbrk
  00104	48 85 c0	 test	 rax, rax
  00107	75 6f		 jne	 SHORT $LN49@str_find_a
  00109	48 83 c8 ff	 or	 rax, -1
  0010d	0f 1f 00	 npad	 3
$LL48@str_find_a:
  00110	48 ff c0	 inc	 rax
  00113	80 3c 03 00	 cmp	 BYTE PTR [rbx+rax], 0
  00117	75 f7		 jne	 SHORT $LL48@str_find_a
  00119	48 ff c7	 inc	 rdi
  0011c	48 03 f8	 add	 rdi, rax
  0011f	49 3b fc	 cmp	 rdi, r12
  00122	76 cc		 jbe	 SHORT $LL27@str_find_a
$LN11@str_find_a:
; Line 636
  00124	48 8b 54 24 28	 mov	 rdx, QWORD PTR ls$[rsp]
  00129	4c 8b 4c 24 20	 mov	 r9, QWORD PTR lp$[rsp]
  0012e	49 8d 4d ff	 lea	 rcx, QWORD PTR [r13-1]
  00132	49 2b d6	 sub	 rdx, r14
  00135	49 03 ce	 add	 rcx, r14
  00138	4c 8b c6	 mov	 r8, rsi
  0013b	48 ff c2	 inc	 rdx
  0013e	e8 00 00 00 00	 call	 lmemfind
  00143	48 8b d8	 mov	 rbx, rax
; Line 637
  00146	48 85 c0	 test	 rax, rax
  00149	0f 84 d6 00 00
	00		 je	 $LN5@str_find_a
; Line 638
  0014f	49 2b dd	 sub	 rbx, r13
  00152	49 8b cf	 mov	 rcx, r15
  00155	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  00159	e8 00 00 00 00	 call	 lua_pushinteger
; Line 639
  0015e	48 8b 54 24 20	 mov	 rdx, QWORD PTR lp$[rsp]
  00163	49 8b cf	 mov	 rcx, r15
  00166	48 03 d3	 add	 rdx, rbx
  00169	e8 00 00 00 00	 call	 lua_pushinteger
; Line 640
  0016e	b8 02 00 00 00	 mov	 eax, 2
  00173	e9 02 01 00 00	 jmp	 $LN51@str_find_a
$LN49@str_find_a:
  00178	4c 8b 44 24 28	 mov	 r8, QWORD PTR ls$[rsp]
  0017d	44 8b 64 24 30	 mov	 r12d, DWORD PTR find$1$[rsp]
$LN12@str_find_a:
; Line 648
  00182	48 8b 4c 24 20	 mov	 rcx, QWORD PTR lp$[rsp]
  00187	33 d2		 xor	 edx, edx
  00189	49 8d 5d ff	 lea	 rbx, QWORD PTR [r13-1]
  0018d	49 03 de	 add	 rbx, r14
  00190	80 3e 5e	 cmp	 BYTE PTR [rsi], 94	; 0000005eH
  00193	0f 94 c2	 sete	 dl
  00196	85 d2		 test	 edx, edx
  00198	74 0b		 je	 SHORT $LN8@str_find_a
  0019a	48 ff c6	 inc	 rsi
  0019d	48 ff c9	 dec	 rcx
  001a0	48 89 4c 24 20	 mov	 QWORD PTR lp$[rsp], rcx
$LN8@str_find_a:
; Line 650
  001a5	4b 8d 04 28	 lea	 rax, QWORD PTR [r8+r13]
  001a9	4c 89 7c 24 58	 mov	 QWORD PTR ms$1[rsp+24], r15
  001ae	c7 44 24 68 c8
	00 00 00	 mov	 DWORD PTR ms$1[rsp+40], 200 ; 000000c8H
  001b6	48 89 44 24 48	 mov	 QWORD PTR ms$1[rsp+8], rax
  001bb	48 8d 04 31	 lea	 rax, QWORD PTR [rcx+rsi]
  001bf	4c 89 6c 24 40	 mov	 QWORD PTR ms$1[rsp], r13
  001c4	48 89 44 24 50	 mov	 QWORD PTR ms$1[rsp+16], rax
  001c9	48 b8 57 9e ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427362903 ; 3fffffffffff9e57H
  001d3	4c 3b c0	 cmp	 r8, rax
  001d6	73 0f		 jae	 SHORT $LN31@str_find_a
  001d8	4a 8d 04 85 a0
	86 01 00	 lea	 rax, QWORD PTR [r8*4+100000]
  001e0	48 89 44 24 60	 mov	 QWORD PTR ms$1[rsp+32], rax
  001e5	eb 09		 jmp	 SHORT $LN42@str_find_a
$LN31@str_find_a:
  001e7	48 c7 44 24 60
	ff ff ff ff	 mov	 QWORD PTR ms$1[rsp+32], -1
$LN42@str_find_a:
; Line 663
  001f0	4c 63 f2	 movsxd	 r14, edx
$LL7@str_find_a:
; Line 654
  001f3	48 8d 4c 24 40	 lea	 rcx, QWORD PTR ms$1[rsp]
  001f8	4c 8b c6	 mov	 r8, rsi
  001fb	48 8b d3	 mov	 rdx, rbx
  001fe	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR ms$1[rsp+44], 0
  00206	e8 00 00 00 00	 call	 match
  0020b	48 8b f8	 mov	 rdi, rax
  0020e	48 85 c0	 test	 rax, rax
  00211	75 21		 jne	 SHORT $LN40@str_find_a
; Line 663
  00213	48 8b c3	 mov	 rax, rbx
  00216	48 ff c3	 inc	 rbx
  00219	48 3b 44 24 48	 cmp	 rax, QWORD PTR ms$1[rsp+8]
  0021e	73 05		 jae	 SHORT $LN5@str_find_a
  00220	4d 85 f6	 test	 r14, r14
  00223	74 ce		 je	 SHORT $LL7@str_find_a
$LN5@str_find_a:
; Line 665
  00225	49 8b cf	 mov	 rcx, r15
  00228	e8 00 00 00 00	 call	 lua_pushnil
; Line 666
  0022d	b8 01 00 00 00	 mov	 eax, 1
  00232	eb 46		 jmp	 SHORT $LN51@str_find_a
$LN40@str_find_a:
; Line 655
  00234	45 85 e4	 test	 r12d, r12d
  00237	74 31		 je	 SHORT $LN3@str_find_a
; Line 656
  00239	49 2b dd	 sub	 rbx, r13
  0023c	49 8b cf	 mov	 rcx, r15
  0023f	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  00243	e8 00 00 00 00	 call	 lua_pushinteger
; Line 657
  00248	49 2b fd	 sub	 rdi, r13
  0024b	49 8b cf	 mov	 rcx, r15
  0024e	48 8b d7	 mov	 rdx, rdi
  00251	e8 00 00 00 00	 call	 lua_pushinteger
; Line 658
  00256	48 8d 4c 24 40	 lea	 rcx, QWORD PTR ms$1[rsp]
  0025b	45 33 c0	 xor	 r8d, r8d
  0025e	33 d2		 xor	 edx, edx
  00260	e8 00 00 00 00	 call	 push_captures
  00265	83 c0 02	 add	 eax, 2
  00268	eb 10		 jmp	 SHORT $LN51@str_find_a
$LN3@str_find_a:
; Line 661
  0026a	48 8d 4c 24 40	 lea	 rcx, QWORD PTR ms$1[rsp]
  0026f	4c 8b c0	 mov	 r8, rax
  00272	48 8b d3	 mov	 rdx, rbx
  00275	e8 00 00 00 00	 call	 push_captures
$LN51@str_find_a:
  0027a	48 8b bc 24 b8
	02 00 00	 mov	 rdi, QWORD PTR [rsp+696]
$LN16@str_find_a:
; Line 667
  00282	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  00289	48 33 cc	 xor	 rcx, rsp
  0028c	e8 00 00 00 00	 call	 __security_check_cookie
  00291	4c 8d 9c 24 80
	02 00 00	 lea	 r11, QWORD PTR [rsp+640]
  00299	49 8b 5b 40	 mov	 rbx, QWORD PTR [r11+64]
  0029d	49 8b 73 48	 mov	 rsi, QWORD PTR [r11+72]
  002a1	49 8b e3	 mov	 rsp, r11
  002a4	41 5f		 pop	 r15
  002a6	41 5e		 pop	 r14
  002a8	41 5d		 pop	 r13
  002aa	41 5c		 pop	 r12
  002ac	5d		 pop	 rbp
  002ad	c3		 ret	 0
str_find_aux ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT reprepstate
_TEXT	SEGMENT
ms$ = 8
reprepstate PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 618
  00000	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [rcx+44], 0
; Line 620
  00007	c3		 ret	 0
reprepstate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT prepstate
_TEXT	SEGMENT
ms$ = 8
L$ = 16
s$ = 24
ls$ = 32
p$ = 40
lp$ = 48
prepstate PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 605
  00000	48 89 51 18	 mov	 QWORD PTR [rcx+24], rdx
; Line 609
  00004	48 8b 54 24 28	 mov	 rdx, QWORD PTR p$[rsp]
  00009	4b 8d 04 08	 lea	 rax, QWORD PTR [r8+r9]
  0000d	48 03 54 24 30	 add	 rdx, QWORD PTR lp$[rsp]
  00012	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
; Line 610
  00016	48 b8 57 9e ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427362903 ; 3fffffffffff9e57H
  00020	c7 41 28 c8 00
	00 00		 mov	 DWORD PTR [rcx+40], 200	; 000000c8H
  00027	4c 89 01	 mov	 QWORD PTR [rcx], r8
  0002a	48 89 51 10	 mov	 QWORD PTR [rcx+16], rdx
  0002e	4c 3b c8	 cmp	 r9, rax
  00031	73 0d		 jae	 SHORT $LN2@prepstate
; Line 611
  00033	4a 8d 04 8d a0
	86 01 00	 lea	 rax, QWORD PTR [r9*4+100000]
  0003b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
; Line 614
  0003f	c3		 ret	 0
$LN2@prepstate:
; Line 613
  00040	48 c7 41 20 ff
	ff ff ff	 mov	 QWORD PTR [rcx+32], -1
; Line 614
  00048	c3		 ret	 0
prepstate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT nospecials
_TEXT	SEGMENT
p$ = 48
l$ = 56
nospecials PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 592
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f2	 mov	 rsi, rdx
  00017	48 8b e9	 mov	 rbp, rcx
; Line 593
  0001a	33 ff		 xor	 edi, edi
  0001c	0f 1f 40 00	 npad	 4
$LL4@nospecials:
; Line 595
  00020	48 8d 1c 2f	 lea	 rbx, QWORD PTR [rdi+rbp]
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NLFJOONJ@?$FO$?$CK?$CL?$DP?4?$CI?$FL?$CF?9?$AA@
  0002b	48 8b cb	 mov	 rcx, rbx
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strpbrk
  00034	48 85 c0	 test	 rax, rax
  00037	75 22		 jne	 SHORT $LN8@nospecials
; Line 597
  00039	48 83 c8 ff	 or	 rax, -1
  0003d	0f 1f 00	 npad	 3
$LL12@nospecials:
  00040	48 ff c0	 inc	 rax
  00043	80 3c 03 00	 cmp	 BYTE PTR [rbx+rax], 0
  00047	75 f7		 jne	 SHORT $LL12@nospecials
  00049	48 ff c7	 inc	 rdi
  0004c	48 03 f8	 add	 rdi, rax
; Line 598
  0004f	48 3b fe	 cmp	 rdi, rsi
  00052	76 cc		 jbe	 SHORT $LL4@nospecials
; Line 599
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	eb 02		 jmp	 SHORT $LN5@nospecials
$LN8@nospecials:
; Line 596
  0005b	33 c0		 xor	 eax, eax
$LN5@nospecials:
; Line 600
  0005d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00062	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00067	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
nospecials ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT push_captures
_TEXT	SEGMENT
ms$ = 80
s$ = 88
e$ = 96
push_captures PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 581
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	41 56		 push	 r14
  00011	41 57		 push	 r15
  00013	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 583
  00017	44 8b 71 2c	 mov	 r14d, DWORD PTR [rcx+44]
  0001b	4d 8b e8	 mov	 r13, r8
  0001e	4c 8b fa	 mov	 r15, rdx
  00021	48 8b d9	 mov	 rbx, rcx
  00024	45 85 f6	 test	 r14d, r14d
  00027	75 0b		 jne	 SHORT $LN6@push_captu
  00029	48 85 d2	 test	 rdx, rdx
  0002c	74 06		 je	 SHORT $LN6@push_captu
  0002e	41 be 01 00 00
	00		 mov	 r14d, 1
$LN6@push_captu:
; Line 584
  00034	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00038	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@IMEAEJPD@too?5many?5captures?$AA@
  0003f	41 8b d6	 mov	 edx, r14d
  00042	e8 00 00 00 00	 call	 luaL_checkstack
; Line 585
  00047	33 ed		 xor	 ebp, ebp
  00049	4d 63 e6	 movsxd	 r12, r14d
  0004c	8b fd		 mov	 edi, ebp
  0004e	45 85 f6	 test	 r14d, r14d
  00051	7e 77		 jle	 SHORT $LN21@push_captu
  00053	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
$LL3@push_captu:
; Line 586
  00058	3b 6b 2c	 cmp	 ebp, DWORD PTR [rbx+44]
  0005b	7c 26		 jl	 SHORT $LN14@push_captu
  0005d	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00061	48 85 ff	 test	 rdi, rdi
  00064	75 0b		 jne	 SHORT $LN13@push_captu
  00066	4d 8b c5	 mov	 r8, r13
  00069	49 8b d7	 mov	 rdx, r15
  0006c	4d 2b c7	 sub	 r8, r15
  0006f	eb 45		 jmp	 SHORT $LN22@push_captu
$LN13@push_captu:
  00071	44 8d 45 01	 lea	 r8d, DWORD PTR [rbp+1]
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@
  0007c	e8 00 00 00 00	 call	 luaL_error
  00081	eb 38		 jmp	 SHORT $LN2@push_captu
$LN14@push_captu:
  00083	48 8b c7	 mov	 rax, rdi
  00086	48 03 c0	 add	 rax, rax
  00089	48 8b 74 c3 38	 mov	 rsi, QWORD PTR [rbx+rax*8+56]
  0008e	48 83 fe ff	 cmp	 rsi, -1
  00092	75 51		 jne	 SHORT $LN10@push_captu
  00094	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BFKNEALP@unfinished?5capture?$AA@
  0009f	e8 00 00 00 00	 call	 luaL_error
$LN9@push_captu:
  000a4	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  000a8	48 8d 57 03	 lea	 rdx, QWORD PTR [rdi+3]
  000ac	4c 8b c6	 mov	 r8, rsi
  000af	48 03 d2	 add	 rdx, rdx
  000b2	48 8b 14 d3	 mov	 rdx, QWORD PTR [rbx+rdx*8]
$LN22@push_captu:
  000b6	e8 00 00 00 00	 call	 lua_pushlstring
$LN2@push_captu:
; Line 585
  000bb	48 ff c7	 inc	 rdi
  000be	ff c5		 inc	 ebp
  000c0	49 3b fc	 cmp	 rdi, r12
  000c3	7c 93		 jl	 SHORT $LL3@push_captu
  000c5	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
$LN21@push_captu:
; Line 588
  000ca	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  000cf	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  000d4	41 8b c6	 mov	 eax, r14d
  000d7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000db	41 5f		 pop	 r15
  000dd	41 5e		 pop	 r14
  000df	41 5d		 pop	 r13
  000e1	41 5c		 pop	 r12
  000e3	5f		 pop	 rdi
  000e4	c3		 ret	 0
; Line 586
$LN10@push_captu:
  000e5	48 83 fe fe	 cmp	 rsi, -2
  000e9	75 b9		 jne	 SHORT $LN9@push_captu
  000eb	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  000ef	48 8d 47 03	 lea	 rax, QWORD PTR [rdi+3]
  000f3	48 03 c0	 add	 rax, rax
  000f6	48 8b 14 c3	 mov	 rdx, QWORD PTR [rbx+rax*8]
  000fa	48 2b 13	 sub	 rdx, QWORD PTR [rbx]
  000fd	48 ff c2	 inc	 rdx
  00100	e8 00 00 00 00	 call	 lua_pushinteger
  00105	eb b4		 jmp	 SHORT $LN2@push_captu
push_captures ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT push_onecapture
_TEXT	SEGMENT
ms$ = 48
i$ = 56
s$ = 64
e$ = 72
push_onecapture PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 563
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	49 8b c0	 mov	 rax, r8
  00009	48 8b d9	 mov	 rbx, rcx
; Line 564
  0000c	3b 51 2c	 cmp	 edx, DWORD PTR [rcx+44]
  0000f	7c 30		 jl	 SHORT $LN7@push_oneca
; Line 566
  00011	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00015	85 d2		 test	 edx, edx
  00017	75 13		 jne	 SHORT $LN6@push_oneca
  00019	4c 2b c8	 sub	 r9, rax
  0001c	48 8b d0	 mov	 rdx, rax
  0001f	4d 8b c1	 mov	 r8, r9
; Line 578
  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5b		 pop	 rbx
; Line 566
  00027	e9 00 00 00 00	 jmp	 lua_pushlstring
$LN6@push_oneca:
; Line 568
  0002c	44 8d 42 01	 lea	 r8d, DWORD PTR [rdx+1]
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@
; Line 578
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5b		 pop	 rbx
; Line 568
  0003c	e9 00 00 00 00	 jmp	 luaL_error
$LN7@push_oneca:
  00041	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
; Line 571
  00046	48 63 f2	 movsxd	 rsi, edx
  00049	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0004e	48 8b c6	 mov	 rax, rsi
  00051	48 03 c0	 add	 rax, rax
  00054	48 8b 7c c1 38	 mov	 rdi, QWORD PTR [rcx+rax*8+56]
; Line 572
  00059	48 83 ff ff	 cmp	 rdi, -1
  0005d	75 36		 jne	 SHORT $LN3@push_oneca
  0005f	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BFKNEALP@unfinished?5capture?$AA@
  0006a	e8 00 00 00 00	 call	 luaL_error
$LN2@push_oneca:
; Line 576
  0006f	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00073	48 8d 56 03	 lea	 rdx, QWORD PTR [rsi+3]
  00077	4c 8b c7	 mov	 r8, rdi
  0007a	48 03 d2	 add	 rdx, rdx
  0007d	48 8b 14 d3	 mov	 rdx, QWORD PTR [rbx+rdx*8]
  00081	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00086	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
; Line 578
  0008b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008f	5b		 pop	 rbx
; Line 576
  00090	e9 00 00 00 00	 jmp	 lua_pushlstring
$LN3@push_oneca:
; Line 573
  00095	48 83 ff fe	 cmp	 rdi, -2
  00099	75 d4		 jne	 SHORT $LN2@push_oneca
; Line 574
  0009b	48 8d 46 03	 lea	 rax, QWORD PTR [rsi+3]
  0009f	48 03 c0	 add	 rax, rax
  000a2	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  000a6	48 2b 11	 sub	 rdx, QWORD PTR [rcx]
  000a9	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  000ad	48 ff c2	 inc	 rdx
  000b0	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000b5	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
; Line 578
  000ba	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000be	5b		 pop	 rbx
; Line 574
  000bf	e9 00 00 00 00	 jmp	 lua_pushinteger
push_onecapture ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lmemfind
_TEXT	SEGMENT
s1$ = 48
l1$ = 56
s2$ = 64
l2$ = 72
lmemfind PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 541
  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	49 8b e9	 mov	 rbp, r9
  00018	4d 8b f0	 mov	 r14, r8
  0001b	48 8b f2	 mov	 rsi, rdx
  0001e	48 8b f9	 mov	 rdi, rcx
; Line 542
  00021	4d 85 c9	 test	 r9, r9
  00024	75 05		 jne	 SHORT $LN8@lmemfind
  00026	48 8b c1	 mov	 rax, rcx
  00029	eb 65		 jmp	 SHORT $LN5@lmemfind
$LN8@lmemfind:
; Line 543
  0002b	4c 3b ca	 cmp	 r9, rdx
  0002e	76 04		 jbe	 SHORT $LN6@lmemfind
  00030	33 c0		 xor	 eax, eax
  00032	eb 5c		 jmp	 SHORT $LN5@lmemfind
$LN6@lmemfind:
; Line 546
  00034	48 ff cd	 dec	 rbp
  00037	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
; Line 547
  0003c	48 2b f5	 sub	 rsi, rbp
; Line 548
  0003f	74 48		 je	 SHORT $LN3@lmemfind
  00041	0f 1f 40 00 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL4@lmemfind:
  00050	41 0f be 16	 movsx	 edx, BYTE PTR [r14]
  00054	4c 8b c6	 mov	 r8, rsi
  00057	48 8b cf	 mov	 rcx, rdi
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  00060	48 8b d8	 mov	 rbx, rax
  00063	48 85 c0	 test	 rax, rax
  00066	74 21		 je	 SHORT $LN3@lmemfind
; Line 549
  00068	48 ff c3	 inc	 rbx
; Line 550
  0006b	49 8d 56 01	 lea	 rdx, QWORD PTR [r14+1]
  0006f	4c 8b c5	 mov	 r8, rbp
  00072	48 8b cb	 mov	 rcx, rbx
  00075	e8 00 00 00 00	 call	 memcmp
  0007a	85 c0		 test	 eax, eax
  0007c	74 28		 je	 SHORT $LN12@lmemfind
; Line 553
  0007e	48 2b fb	 sub	 rdi, rbx
  00081	48 03 f7	 add	 rsi, rdi
; Line 554
  00084	48 8b fb	 mov	 rdi, rbx
  00087	75 c7		 jne	 SHORT $LL4@lmemfind
$LN3@lmemfind:
; Line 557
  00089	33 c0		 xor	 eax, eax
$LN15@lmemfind:
  0008b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN5@lmemfind:
; Line 559
  00090	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00095	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009a	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	41 5e		 pop	 r14
  000a5	c3		 ret	 0
$LN12@lmemfind:
; Line 551
  000a6	48 8d 43 ff	 lea	 rax, QWORD PTR [rbx-1]
  000aa	eb df		 jmp	 SHORT $LN15@lmemfind
lmemfind ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT match_capture
_TEXT	SEGMENT
ms$ = 48
s$ = 56
l$ = 64
match_capture PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 424
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 426
  0000f	41 83 c0 cf	 add	 r8d, -49		; ffffffffffffffcfH
  00013	48 8b f2	 mov	 rsi, rdx
  00016	48 8b d9	 mov	 rbx, rcx
  00019	78 14		 js	 SHORT $LN5@match_capt
  0001b	44 3b 41 2c	 cmp	 r8d, DWORD PTR [rcx+44]
  0001f	7d 0e		 jge	 SHORT $LN5@match_capt
  00021	49 63 c0	 movsxd	 rax, r8d
  00024	48 03 c0	 add	 rax, rax
  00027	48 83 7c c1 38
	ff		 cmp	 QWORD PTR [rcx+rax*8+56], -1
  0002d	75 16		 jne	 SHORT $LN7@match_capt
$LN5@match_capt:
  0002f	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@
  0003a	41 ff c0	 inc	 r8d
  0003d	e8 00 00 00 00	 call	 luaL_error
  00042	44 8b c0	 mov	 r8d, eax
$LN7@match_capt:
; Line 427
  00045	49 63 c8	 movsxd	 rcx, r8d
  00048	48 8b c1	 mov	 rax, rcx
  0004b	48 03 c0	 add	 rax, rax
  0004e	48 8b 7c c3 38	 mov	 rdi, QWORD PTR [rbx+rax*8+56]
; Line 429
  00053	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00057	48 2b c6	 sub	 rax, rsi
  0005a	48 3b c7	 cmp	 rax, rdi
  0005d	72 2e		 jb	 SHORT $LN2@match_capt
  0005f	48 83 c1 03	 add	 rcx, 3
  00063	4c 8b c7	 mov	 r8, rdi
  00066	48 8b d6	 mov	 rdx, rsi
  00069	48 03 c9	 add	 rcx, rcx
  0006c	48 8b 0c cb	 mov	 rcx, QWORD PTR [rbx+rcx*8]
  00070	e8 00 00 00 00	 call	 memcmp
  00075	85 c0		 test	 eax, eax
  00077	75 14		 jne	 SHORT $LN2@match_capt
; Line 430
  00079	48 8d 04 37	 lea	 rax, QWORD PTR [rdi+rsi]
; Line 432
  0007d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00082	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00087	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008b	5f		 pop	 rdi
  0008c	c3		 ret	 0
$LN2@match_capt:
  0008d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00092	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00097	33 c0		 xor	 eax, eax
  00099	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
match_capture ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT end_capture
_TEXT	SEGMENT
ms$ = 48
s$ = 56
p$ = 64
end_capture PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 414
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 415
  00014	44 8b 59 2c	 mov	 r11d, DWORD PTR [rcx+44]
  00018	49 8b e8	 mov	 rbp, r8
  0001b	48 8b f2	 mov	 rsi, rdx
  0001e	41 ff cb	 dec	 r11d
  00021	48 8b d9	 mov	 rbx, rcx
  00024	49 63 c3	 movsxd	 rax, r11d
  00027	78 20		 js	 SHORT $LN5@end_captur
  00029	4c 8b c8	 mov	 r9, rax
  0002c	4c 8d 51 38	 lea	 r10, QWORD PTR [rcx+56]
  00030	49 c1 e1 04	 shl	 r9, 4
  00034	4d 03 d1	 add	 r10, r9
$LL7@end_captur:
  00037	49 83 3a ff	 cmp	 QWORD PTR [r10], -1
  0003b	74 1f		 je	 SHORT $LN8@end_captur
  0003d	41 ff cb	 dec	 r11d
  00040	49 83 ea 10	 sub	 r10, 16
  00044	48 ff c8	 dec	 rax
  00047	79 ee		 jns	 SHORT $LL7@end_captur
$LN5@end_captur:
  00049	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@ECNPHIBF@invalid?5pattern?5capture?$AA@
  00054	e8 00 00 00 00	 call	 luaL_error
  00059	44 8b d8	 mov	 r11d, eax
$LN8@end_captur:
; Line 417
  0005c	49 63 cb	 movsxd	 rcx, r11d
  0005f	48 8b c6	 mov	 rax, rsi
; Line 418
  00062	4c 8b c5	 mov	 r8, rbp
  00065	48 8b f9	 mov	 rdi, rcx
  00068	48 83 c1 03	 add	 rcx, 3
  0006c	48 8b d6	 mov	 rdx, rsi
  0006f	48 03 c9	 add	 rcx, rcx
  00072	48 03 ff	 add	 rdi, rdi
  00075	48 2b 04 cb	 sub	 rax, QWORD PTR [rbx+rcx*8]
  00079	48 8b cb	 mov	 rcx, rbx
  0007c	48 89 44 fb 38	 mov	 QWORD PTR [rbx+rdi*8+56], rax
  00081	e8 00 00 00 00	 call	 match
  00086	48 85 c0	 test	 rax, rax
  00089	75 09		 jne	 SHORT $LN75@end_captur
; Line 419
  0008b	48 c7 44 fb 38
	ff ff ff ff	 mov	 QWORD PTR [rbx+rdi*8+56], -1
$LN75@end_captur:
; Line 421
  00094	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00099	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
end_capture ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT start_capture
_TEXT	SEGMENT
ms$ = 48
s$ = 56
p$ = 64
what$ = 72
start_capture PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 400
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 402
  0001a	48 63 79 2c	 movsxd	 rdi, DWORD PTR [rcx+44]
  0001e	49 63 e9	 movsxd	 rbp, r9d
  00021	4d 8b f0	 mov	 r14, r8
  00024	48 8b f2	 mov	 rsi, rdx
  00027	48 8b d9	 mov	 rbx, rcx
; Line 403
  0002a	83 ff 20	 cmp	 edi, 32			; 00000020H
  0002d	7c 10		 jl	 SHORT $LN2@start_capt
  0002f	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@IMEAEJPD@too?5many?5captures?$AA@
  0003a	e8 00 00 00 00	 call	 luaL_error
$LN2@start_capt:
; Line 404
  0003f	48 8d 47 03	 lea	 rax, QWORD PTR [rdi+3]
  00043	4c 8b cf	 mov	 r9, rdi
; Line 407
  00046	4d 8b c6	 mov	 r8, r14
  00049	48 03 c0	 add	 rax, rax
  0004c	4d 03 c9	 add	 r9, r9
  0004f	48 8b d6	 mov	 rdx, rsi
  00052	48 89 34 c3	 mov	 QWORD PTR [rbx+rax*8], rsi
  00056	8d 47 01	 lea	 eax, DWORD PTR [rdi+1]
  00059	4a 89 6c cb 38	 mov	 QWORD PTR [rbx+r9*8+56], rbp
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	89 43 2c	 mov	 DWORD PTR [rbx+44], eax
  00064	e8 00 00 00 00	 call	 match
  00069	48 85 c0	 test	 rax, rax
  0006c	75 03		 jne	 SHORT $LN78@start_capt
; Line 408
  0006e	ff 4b 2c	 dec	 DWORD PTR [rbx+44]
$LN78@start_capt:
; Line 410
  00071	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00076	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0007b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00080	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00085	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00089	41 5e		 pop	 r14
  0008b	c3		 ret	 0
start_capture ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT min_expand
_TEXT	SEGMENT
ms$ = 48
s$ = 56
p$ = 64
ep$ = 72
min_expand PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 387
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	49 8b f8	 mov	 rdi, r8
; Line 389
  0001d	4d 8d 41 01	 lea	 r8, QWORD PTR [r9+1]
  00021	4d 8b f1	 mov	 r14, r9
  00024	48 8b da	 mov	 rbx, rdx
  00027	48 8b f1	 mov	 rsi, rcx
  0002a	e8 00 00 00 00	 call	 match
; Line 390
  0002f	48 85 c0	 test	 rax, rax
  00032	75 68		 jne	 SHORT $LN79@min_expand
$LL6@min_expand:
; Line 392
  00034	48 3b 5e 08	 cmp	 rbx, QWORD PTR [rsi+8]
  00038	73 60		 jae	 SHORT $LN2@min_expand
  0003a	0f b6 0f	 movzx	 ecx, BYTE PTR [rdi]
  0003d	44 0f b6 0b	 movzx	 r9d, BYTE PTR [rbx]
  00041	0f b6 c1	 movzx	 eax, cl
  00044	80 f9 25	 cmp	 cl, 37			; 00000025H
  00047	74 26		 je	 SHORT $LN70@min_expand
  00049	3c 2e		 cmp	 al, 46			; 0000002eH
  0004b	74 34		 je	 SHORT $LN82@min_expand
  0004d	3c 5b		 cmp	 al, 91			; 0000005bH
  0004f	74 0d		 je	 SHORT $LN69@min_expand
  00051	0f b6 c1	 movzx	 eax, cl
  00054	33 c9		 xor	 ecx, ecx
  00056	41 3b c1	 cmp	 eax, r9d
  00059	0f 94 c1	 sete	 cl
  0005c	eb 1f		 jmp	 SHORT $LN72@min_expand
$LN69@min_expand:
  0005e	4d 8d 46 ff	 lea	 r8, QWORD PTR [r14-1]
  00062	48 8b d7	 mov	 rdx, rdi
  00065	41 8b c9	 mov	 ecx, r9d
  00068	e8 00 00 00 00	 call	 matchbracketclass
  0006d	eb 0c		 jmp	 SHORT $LN84@min_expand
$LN70@min_expand:
  0006f	0f b6 57 01	 movzx	 edx, BYTE PTR [rdi+1]
  00073	41 8b c9	 mov	 ecx, r9d
  00076	e8 00 00 00 00	 call	 match_class
$LN84@min_expand:
  0007b	8b c8		 mov	 ecx, eax
$LN72@min_expand:
  0007d	85 c9		 test	 ecx, ecx
  0007f	74 19		 je	 SHORT $LN2@min_expand
$LN82@min_expand:
; Line 393
  00081	48 ff c3	 inc	 rbx
  00084	4d 8d 46 01	 lea	 r8, QWORD PTR [r14+1]
  00088	48 8b ce	 mov	 rcx, rsi
  0008b	48 8b d3	 mov	 rdx, rbx
  0008e	e8 00 00 00 00	 call	 match
  00093	48 85 c0	 test	 rax, rax
  00096	74 9c		 je	 SHORT $LL6@min_expand
; Line 390
  00098	eb 02		 jmp	 SHORT $LN79@min_expand
$LN2@min_expand:
; Line 394
  0009a	33 c0		 xor	 eax, eax
$LN79@min_expand:
; Line 396
  0009c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a1	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000a6	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ab	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000b0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b4	41 5e		 pop	 r14
  000b6	c3		 ret	 0
min_expand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT max_expand
_TEXT	SEGMENT
ms$ = 64
s$ = 72
p$ = 80
ep$ = 88
max_expand PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 372
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00018	4d 8b f9	 mov	 r15, r9
  0001b	49 8b f0	 mov	 rsi, r8
  0001e	4c 8b f2	 mov	 r14, rdx
  00021	48 8b e9	 mov	 rbp, rcx
; Line 373
  00024	33 db		 xor	 ebx, ebx
  00026	48 8b fa	 mov	 rdi, rdx
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@max_expand:
; Line 374
  00030	48 3b 7d 08	 cmp	 rdi, QWORD PTR [rbp+8]
  00034	73 53		 jae	 SHORT $LN89@max_expand
  00036	44 0f b6 06	 movzx	 r8d, BYTE PTR [rsi]
  0003a	44 0f b6 0f	 movzx	 r9d, BYTE PTR [rdi]
  0003e	41 0f b6 c0	 movzx	 eax, r8b
  00042	41 80 f8 25	 cmp	 r8b, 37			; 00000025H
  00046	74 27		 je	 SHORT $LN10@max_expand
  00048	3c 2e		 cmp	 al, 46			; 0000002eH
  0004a	74 35		 je	 SHORT $LN88@max_expand
  0004c	3c 5b		 cmp	 al, 91			; 0000005bH
  0004e	74 0e		 je	 SHORT $LN9@max_expand
  00050	33 c9		 xor	 ecx, ecx
  00052	41 0f b6 c0	 movzx	 eax, r8b
  00056	41 3b c1	 cmp	 eax, r9d
  00059	0f 94 c1	 sete	 cl
  0005c	eb 1f		 jmp	 SHORT $LN12@max_expand
$LN9@max_expand:
  0005e	4d 8d 47 ff	 lea	 r8, QWORD PTR [r15-1]
  00062	48 8b d6	 mov	 rdx, rsi
  00065	41 8b c9	 mov	 ecx, r9d
  00068	e8 00 00 00 00	 call	 matchbracketclass
  0006d	eb 0c		 jmp	 SHORT $LN90@max_expand
$LN10@max_expand:
  0006f	0f b6 56 01	 movzx	 edx, BYTE PTR [rsi+1]
  00073	41 8b c9	 mov	 ecx, r9d
  00076	e8 00 00 00 00	 call	 match_class
$LN90@max_expand:
  0007b	8b c8		 mov	 ecx, eax
$LN12@max_expand:
  0007d	85 c9		 test	 ecx, ecx
  0007f	74 08		 je	 SHORT $LN89@max_expand
$LN88@max_expand:
; Line 375
  00081	48 ff c3	 inc	 rbx
  00084	48 ff c7	 inc	 rdi
  00087	eb a7		 jmp	 SHORT $LL5@max_expand
$LN89@max_expand:
; Line 377
  00089	48 85 db	 test	 rbx, rbx
  0008c	78 1c		 js	 SHORT $LN2@max_expand
  0008e	66 90		 npad	 2
$LL3@max_expand:
; Line 378
  00090	4a 8d 14 33	 lea	 rdx, QWORD PTR [rbx+r14]
  00094	4d 8d 47 01	 lea	 r8, QWORD PTR [r15+1]
  00098	48 8b cd	 mov	 rcx, rbp
  0009b	e8 00 00 00 00	 call	 match
; Line 379
  000a0	48 85 c0	 test	 rax, rax
  000a3	75 07		 jne	 SHORT $LN6@max_expand
; Line 380
  000a5	48 ff cb	 dec	 rbx
; Line 377
  000a8	79 e6		 jns	 SHORT $LL3@max_expand
$LN2@max_expand:
; Line 382
  000aa	33 c0		 xor	 eax, eax
$LN6@max_expand:
; Line 383
  000ac	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b1	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000b6	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000bb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bf	41 5f		 pop	 r15
  000c1	41 5e		 pop	 r14
  000c3	5f		 pop	 rdi
  000c4	c3		 ret	 0
max_expand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT matchbalance
_TEXT	SEGMENT
ms$ = 48
s$ = 56
p$ = 64
matchbalance PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 352
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 353
  0000f	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00013	49 8b f8	 mov	 rdi, r8
  00016	48 8b da	 mov	 rbx, rdx
  00019	48 ff c8	 dec	 rax
  0001c	48 8b f1	 mov	 rsi, rcx
  0001f	4c 3b c0	 cmp	 r8, rax
  00022	72 10		 jb	 SHORT $LN9@matchbalan
; Line 354
  00024	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@FCNHBCLO@malformed?5pattern?5?$CImissing?5argum@
  0002f	e8 00 00 00 00	 call	 luaL_error
$LN9@matchbalan:
; Line 355
  00034	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  00037	38 03		 cmp	 BYTE PTR [rbx], al
  00039	75 49		 jne	 SHORT $LN16@matchbalan
; Line 358
  0003b	48 8b 56 08	 mov	 rdx, QWORD PTR [rsi+8]
  0003f	44 0f be 4f 01	 movsx	 r9d, BYTE PTR [rdi+1]
; Line 360
  00044	48 ff c3	 inc	 rbx
  00047	44 0f be c0	 movsx	 r8d, al
  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	48 3b da	 cmp	 rbx, rdx
  00053	73 2f		 jae	 SHORT $LN16@matchbalan
$LL6@matchbalan:
; Line 361
  00055	0f be 0b	 movsx	 ecx, BYTE PTR [rbx]
  00058	41 3b c9	 cmp	 ecx, r9d
  0005b	75 18		 jne	 SHORT $LN4@matchbalan
; Line 362
  0005d	ff c8		 dec	 eax
  0005f	75 1b		 jne	 SHORT $LN1@matchbalan
  00061	48 8d 43 01	 lea	 rax, QWORD PTR [rbx+1]
; Line 368
  00065	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
$LN4@matchbalan:
; Line 364
  00075	41 3b c8	 cmp	 ecx, r8d
  00078	75 02		 jne	 SHORT $LN1@matchbalan
  0007a	ff c0		 inc	 eax
$LN1@matchbalan:
; Line 360
  0007c	48 ff c3	 inc	 rbx
  0007f	48 3b da	 cmp	 rbx, rdx
  00082	72 d1		 jb	 SHORT $LL6@matchbalan
$LN16@matchbalan:
; Line 368
  00084	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00089	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008e	33 c0		 xor	 eax, eax
  00090	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00094	5f		 pop	 rdi
  00095	c3		 ret	 0
matchbalance ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT singlematch
_TEXT	SEGMENT
ms$ = 8
s$ = 16
p$ = 24
ep$ = 32
singlematch PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 336
  00000	4d 8b d9	 mov	 r11, r9
  00003	4d 8b d0	 mov	 r10, r8
; Line 337
  00006	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  0000a	72 03		 jb	 SHORT $LN8@singlematc
; Line 338
  0000c	33 c0		 xor	 eax, eax
; Line 348
  0000e	c3		 ret	 0
$LN8@singlematc:
; Line 341
  0000f	41 0f b6 08	 movzx	 ecx, BYTE PTR [r8]
  00013	44 0f b6 0a	 movzx	 r9d, BYTE PTR [rdx]
  00017	0f b6 c1	 movzx	 eax, cl
  0001a	80 f9 25	 cmp	 cl, 37			; 00000025H
  0001d	74 29		 je	 SHORT $LN3@singlematc
  0001f	3c 2e		 cmp	 al, 46			; 0000002eH
  00021	74 1f		 je	 SHORT $LN4@singlematc
  00023	3c 5b		 cmp	 al, 91			; 0000005bH
  00025	74 0c		 je	 SHORT $LN2@singlematc
; Line 345
  00027	33 c0		 xor	 eax, eax
  00029	0f b6 c9	 movzx	 ecx, cl
  0002c	41 3b c9	 cmp	 ecx, r9d
  0002f	0f 94 c0	 sete	 al
; Line 348
  00032	c3		 ret	 0
$LN2@singlematc:
; Line 344
  00033	4d 8d 43 ff	 lea	 r8, QWORD PTR [r11-1]
  00037	49 8b d2	 mov	 rdx, r10
  0003a	41 8b c9	 mov	 ecx, r9d
  0003d	e9 00 00 00 00	 jmp	 matchbracketclass
$LN4@singlematc:
; Line 342
  00042	b8 01 00 00 00	 mov	 eax, 1
; Line 348
  00047	c3		 ret	 0
$LN3@singlematc:
; Line 343
  00048	41 0f b6 50 01	 movzx	 edx, BYTE PTR [r8+1]
  0004d	41 8b c9	 mov	 ecx, r9d
  00050	e9 00 00 00 00	 jmp	 match_class
singlematch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT matchbracketclass
_TEXT	SEGMENT
c$ = 80
p$ = 88
ec$ = 96
matchbracketclass PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 312
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 54		 push	 r12
  00005	41 55		 push	 r13
  00007	41 57		 push	 r15
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 314
  0000d	48 8d 42 01	 lea	 rax, QWORD PTR [rdx+1]
  00011	45 33 e4	 xor	 r12d, r12d
  00014	4d 8b f8	 mov	 r15, r8
  00017	80 38 5e	 cmp	 BYTE PTR [rax], 94	; 0000005eH
  0001a	48 8b da	 mov	 rbx, rdx
  0001d	8b e9		 mov	 ebp, ecx
  0001f	41 bd 01 00 00
	00		 mov	 r13d, 1
  00025	75 06		 jne	 SHORT $LN31@matchbrack
; Line 315
  00027	45 8b ec	 mov	 r13d, r12d
; Line 316
  0002a	48 8b d8	 mov	 rbx, rax
$LN31@matchbrack:
; Line 318
  0002d	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00032	48 ff c3	 inc	 rbx
  00035	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  0003a	4c 89 74 24 60	 mov	 QWORD PTR [rsp+96], r14
  0003f	49 3b d8	 cmp	 rbx, r8
  00042	0f 83 31 01 00
	00		 jae	 $LN8@matchbrack
  00048	48 8d 7b 02	 lea	 rdi, QWORD PTR [rbx+2]
  0004c	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:__ImageBase
$LL9@matchbrack:
; Line 319
  00053	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  00056	3c 25		 cmp	 al, 37			; 00000025H
  00058	0f 85 df 00 00
	00		 jne	 $LN7@matchbrack
; Line 321
  0005e	44 0f b6 73 01	 movzx	 r14d, BYTE PTR [rbx+1]
  00063	48 ff c3	 inc	 rbx
  00066	48 ff c7	 inc	 rdi
  00069	41 8b ce	 mov	 ecx, r14d
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  00072	83 c0 9f	 add	 eax, -97		; ffffffffffffff9fH
  00075	83 f8 19	 cmp	 eax, 25
  00078	0f 87 a8 00 00
	00		 ja	 $LN13@matchbrack
  0007e	48 98		 cdqe
  00080	8b 8c 86 00 00
	00 00		 mov	 ecx, DWORD PTR $LN38@matchbrack[rsi+rax*4]
  00087	48 03 ce	 add	 rcx, rsi
  0008a	ff e1		 jmp	 rcx
$LN24@matchbrack:
  0008c	8b cd		 mov	 ecx, ebp
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isalpha
  00094	8b f0		 mov	 esi, eax
  00096	eb 75		 jmp	 SHORT $LN25@matchbrack
$LN23@matchbrack:
  00098	8b cd		 mov	 ecx, ebp
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_iscntrl
  000a0	8b f0		 mov	 esi, eax
  000a2	eb 69		 jmp	 SHORT $LN25@matchbrack
$LN22@matchbrack:
  000a4	8b cd		 mov	 ecx, ebp
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  000ac	8b f0		 mov	 esi, eax
  000ae	eb 5d		 jmp	 SHORT $LN25@matchbrack
$LN21@matchbrack:
  000b0	8b cd		 mov	 ecx, ebp
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isgraph
  000b8	8b f0		 mov	 esi, eax
  000ba	eb 51		 jmp	 SHORT $LN25@matchbrack
$LN20@matchbrack:
  000bc	8b cd		 mov	 ecx, ebp
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_islower
  000c4	8b f0		 mov	 esi, eax
  000c6	eb 45		 jmp	 SHORT $LN25@matchbrack
$LN19@matchbrack:
  000c8	8b cd		 mov	 ecx, ebp
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ispunct
  000d0	8b f0		 mov	 esi, eax
  000d2	eb 39		 jmp	 SHORT $LN25@matchbrack
$LN18@matchbrack:
  000d4	8b cd		 mov	 ecx, ebp
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isspace
  000dc	8b f0		 mov	 esi, eax
  000de	eb 2d		 jmp	 SHORT $LN25@matchbrack
$LN17@matchbrack:
  000e0	8b cd		 mov	 ecx, ebp
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isupper
  000e8	8b f0		 mov	 esi, eax
  000ea	eb 21		 jmp	 SHORT $LN25@matchbrack
$LN16@matchbrack:
  000ec	8b cd		 mov	 ecx, ebp
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isalnum
  000f4	8b f0		 mov	 esi, eax
  000f6	eb 15		 jmp	 SHORT $LN25@matchbrack
$LN15@matchbrack:
  000f8	8b cd		 mov	 ecx, ebp
  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isxdigit
  00100	8b f0		 mov	 esi, eax
  00102	eb 09		 jmp	 SHORT $LN25@matchbrack
$LN14@matchbrack:
  00104	85 ed		 test	 ebp, ebp
  00106	41 8b f4	 mov	 esi, r12d
  00109	40 0f 94 c6	 sete	 sil
$LN25@matchbrack:
  0010d	41 8b ce	 mov	 ecx, r14d
  00110	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_islower
  00116	85 c0		 test	 eax, eax
  00118	75 16		 jne	 SHORT $LN27@matchbrack
  0011a	85 f6		 test	 esi, esi
  0011c	41 8b c4	 mov	 eax, r12d
  0011f	0f 94 c0	 sete	 al
  00122	8b f0		 mov	 esi, eax
  00124	eb 0a		 jmp	 SHORT $LN27@matchbrack
$LN13@matchbrack:
  00126	44 3b f5	 cmp	 r14d, ebp
  00129	41 8b f4	 mov	 esi, r12d
  0012c	40 0f 94 c6	 sete	 sil
$LN27@matchbrack:
  00130	85 f6		 test	 esi, esi
  00132	75 2a		 jne	 SHORT $LN32@matchbrack
; Line 324
  00134	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:__ImageBase
  0013b	eb 2d		 jmp	 SHORT $LN1@matchbrack
$LN7@matchbrack:
  0013d	80 7b 01 2d	 cmp	 BYTE PTR [rbx+1], 45	; 0000002dH
  00141	75 20		 jne	 SHORT $LN4@matchbrack
  00143	49 3b ff	 cmp	 rdi, r15
  00146	73 1b		 jae	 SHORT $LN4@matchbrack
; Line 326
  00148	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  0014b	48 83 c3 02	 add	 rbx, 2
  0014f	48 83 c7 02	 add	 rdi, 2
  00153	3b c5		 cmp	 eax, ebp
  00155	7f 13		 jg	 SHORT $LN1@matchbrack
  00157	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  0015a	3b e8		 cmp	 ebp, eax
  0015c	7f 0c		 jg	 SHORT $LN1@matchbrack
$LN32@matchbrack:
; Line 322
  0015e	41 8b c5	 mov	 eax, r13d
  00161	eb 20		 jmp	 SHORT $LN11@matchbrack
$LN4@matchbrack:
; Line 329
  00163	0f b6 c0	 movzx	 eax, al
  00166	3b c5		 cmp	 eax, ebp
  00168	74 f4		 je	 SHORT $LN32@matchbrack
$LN1@matchbrack:
; Line 318
  0016a	48 ff c3	 inc	 rbx
  0016d	48 ff c7	 inc	 rdi
  00170	49 3b df	 cmp	 rbx, r15
  00173	0f 82 da fe ff
	ff		 jb	 $LL9@matchbrack
$LN8@matchbrack:
; Line 331
  00179	45 85 ed	 test	 r13d, r13d
  0017c	41 0f 94 c4	 sete	 r12b
  00180	41 8b c4	 mov	 eax, r12d
$LN11@matchbrack:
  00183	4c 8b 74 24 60	 mov	 r14, QWORD PTR [rsp+96]
  00188	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0018d	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
; Line 332
  00192	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00196	41 5f		 pop	 r15
  00198	41 5d		 pop	 r13
  0019a	41 5c		 pop	 r12
  0019c	5d		 pop	 rbp
  0019d	5b		 pop	 rbx
  0019e	c3		 ret	 0
  0019f	90		 npad	 1
$LN38@matchbrack:
  001a0	00 00 00 00	 DD	 $LN24@matchbrack
  001a4	00 00 00 00	 DD	 $LN13@matchbrack
  001a8	00 00 00 00	 DD	 $LN23@matchbrack
  001ac	00 00 00 00	 DD	 $LN22@matchbrack
  001b0	00 00 00 00	 DD	 $LN13@matchbrack
  001b4	00 00 00 00	 DD	 $LN13@matchbrack
  001b8	00 00 00 00	 DD	 $LN21@matchbrack
  001bc	00 00 00 00	 DD	 $LN13@matchbrack
  001c0	00 00 00 00	 DD	 $LN13@matchbrack
  001c4	00 00 00 00	 DD	 $LN13@matchbrack
  001c8	00 00 00 00	 DD	 $LN13@matchbrack
  001cc	00 00 00 00	 DD	 $LN20@matchbrack
  001d0	00 00 00 00	 DD	 $LN13@matchbrack
  001d4	00 00 00 00	 DD	 $LN13@matchbrack
  001d8	00 00 00 00	 DD	 $LN13@matchbrack
  001dc	00 00 00 00	 DD	 $LN19@matchbrack
  001e0	00 00 00 00	 DD	 $LN13@matchbrack
  001e4	00 00 00 00	 DD	 $LN13@matchbrack
  001e8	00 00 00 00	 DD	 $LN18@matchbrack
  001ec	00 00 00 00	 DD	 $LN13@matchbrack
  001f0	00 00 00 00	 DD	 $LN17@matchbrack
  001f4	00 00 00 00	 DD	 $LN13@matchbrack
  001f8	00 00 00 00	 DD	 $LN16@matchbrack
  001fc	00 00 00 00	 DD	 $LN15@matchbrack
  00200	00 00 00 00	 DD	 $LN13@matchbrack
  00204	00 00 00 00	 DD	 $LN14@matchbrack
matchbracketclass ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT match_class
_TEXT	SEGMENT
c$ = 48
cl$ = 56
match_class PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 292
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	8b f9		 mov	 edi, ecx
; Line 294
  00016	8b ca		 mov	 ecx, edx
  00018	8b ea		 mov	 ebp, edx
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  00020	83 c0 9f	 add	 eax, -97		; ffffffffffffff9fH
  00023	83 f8 19	 cmp	 eax, 25
  00026	0f 87 b0 00 00
	00		 ja	 $LN1@match_clas
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00033	48 98		 cdqe
  00035	44 8b 84 81 00
	00 00 00	 mov	 r8d, DWORD PTR $LN19@match_clas[rcx+rax*4]
  0003d	4c 03 c1	 add	 r8, rcx
  00040	33 f6		 xor	 esi, esi
  00042	41 ff e0	 jmp	 r8
$LN12@match_clas:
; Line 295
  00045	8b cf		 mov	 ecx, edi
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isalpha
  0004d	8b d8		 mov	 ebx, eax
  0004f	eb 73		 jmp	 SHORT $LN13@match_clas
$LN11@match_clas:
; Line 296
  00051	8b cf		 mov	 ecx, edi
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_iscntrl
  00059	8b d8		 mov	 ebx, eax
  0005b	eb 67		 jmp	 SHORT $LN13@match_clas
$LN10@match_clas:
; Line 297
  0005d	8b cf		 mov	 ecx, edi
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  00065	8b d8		 mov	 ebx, eax
  00067	eb 5b		 jmp	 SHORT $LN13@match_clas
$LN9@match_clas:
; Line 298
  00069	8b cf		 mov	 ecx, edi
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isgraph
  00071	8b d8		 mov	 ebx, eax
  00073	eb 4f		 jmp	 SHORT $LN13@match_clas
$LN8@match_clas:
; Line 299
  00075	8b cf		 mov	 ecx, edi
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_islower
  0007d	8b d8		 mov	 ebx, eax
  0007f	eb 43		 jmp	 SHORT $LN13@match_clas
$LN7@match_clas:
; Line 300
  00081	8b cf		 mov	 ecx, edi
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ispunct
  00089	8b d8		 mov	 ebx, eax
  0008b	eb 37		 jmp	 SHORT $LN13@match_clas
$LN6@match_clas:
; Line 301
  0008d	8b cf		 mov	 ecx, edi
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isspace
  00095	8b d8		 mov	 ebx, eax
  00097	eb 2b		 jmp	 SHORT $LN13@match_clas
$LN5@match_clas:
; Line 302
  00099	8b cf		 mov	 ecx, edi
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isupper
  000a1	8b d8		 mov	 ebx, eax
  000a3	eb 1f		 jmp	 SHORT $LN13@match_clas
$LN4@match_clas:
; Line 303
  000a5	8b cf		 mov	 ecx, edi
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isalnum
  000ad	8b d8		 mov	 ebx, eax
  000af	eb 13		 jmp	 SHORT $LN13@match_clas
$LN3@match_clas:
; Line 304
  000b1	8b cf		 mov	 ecx, edi
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isxdigit
  000b9	8b d8		 mov	 ebx, eax
  000bb	eb 07		 jmp	 SHORT $LN13@match_clas
$LN2@match_clas:
; Line 305
  000bd	85 ff		 test	 edi, edi
  000bf	8b de		 mov	 ebx, esi
  000c1	0f 94 c3	 sete	 bl
$LN13@match_clas:
; Line 308
  000c4	8b cd		 mov	 ecx, ebp
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_islower
  000cc	85 c0		 test	 eax, eax
  000ce	75 08		 jne	 SHORT $LN18@match_clas
  000d0	85 db		 test	 ebx, ebx
  000d2	40 0f 94 c6	 sete	 sil
  000d6	8b de		 mov	 ebx, esi
$LN18@match_clas:
  000d8	8b c3		 mov	 eax, ebx
  000da	eb 0a		 jmp	 SHORT $LN15@match_clas
$LN1@match_clas:
; Line 306
  000dc	33 f6		 xor	 esi, esi
  000de	3b ef		 cmp	 ebp, edi
  000e0	40 0f 94 c6	 sete	 sil
  000e4	8b c6		 mov	 eax, esi
$LN15@match_clas:
; Line 309
  000e6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000eb	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000f0	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000f5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f9	5f		 pop	 rdi
  000fa	c3		 ret	 0
  000fb	90		 npad	 1
$LN19@match_clas:
  000fc	00 00 00 00	 DD	 $LN12@match_clas
  00100	00 00 00 00	 DD	 $LN1@match_clas
  00104	00 00 00 00	 DD	 $LN11@match_clas
  00108	00 00 00 00	 DD	 $LN10@match_clas
  0010c	00 00 00 00	 DD	 $LN1@match_clas
  00110	00 00 00 00	 DD	 $LN1@match_clas
  00114	00 00 00 00	 DD	 $LN9@match_clas
  00118	00 00 00 00	 DD	 $LN1@match_clas
  0011c	00 00 00 00	 DD	 $LN1@match_clas
  00120	00 00 00 00	 DD	 $LN1@match_clas
  00124	00 00 00 00	 DD	 $LN1@match_clas
  00128	00 00 00 00	 DD	 $LN8@match_clas
  0012c	00 00 00 00	 DD	 $LN1@match_clas
  00130	00 00 00 00	 DD	 $LN1@match_clas
  00134	00 00 00 00	 DD	 $LN1@match_clas
  00138	00 00 00 00	 DD	 $LN7@match_clas
  0013c	00 00 00 00	 DD	 $LN1@match_clas
  00140	00 00 00 00	 DD	 $LN1@match_clas
  00144	00 00 00 00	 DD	 $LN6@match_clas
  00148	00 00 00 00	 DD	 $LN1@match_clas
  0014c	00 00 00 00	 DD	 $LN5@match_clas
  00150	00 00 00 00	 DD	 $LN1@match_clas
  00154	00 00 00 00	 DD	 $LN4@match_clas
  00158	00 00 00 00	 DD	 $LN3@match_clas
  0015c	00 00 00 00	 DD	 $LN1@match_clas
  00160	00 00 00 00	 DD	 $LN2@match_clas
match_class ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT classend
_TEXT	SEGMENT
ms$ = 48
p$ = 56
classend PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 268
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 269
  0000a	0f be 02	 movsx	 eax, BYTE PTR [rdx]
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	48 8d 5a 01	 lea	 rbx, QWORD PTR [rdx+1]
  00014	83 f8 25	 cmp	 eax, 37			; 00000025H
  00017	74 58		 je	 SHORT $LN10@classend
  00019	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0001c	74 0e		 je	 SHORT $LN8@classend
; Line 286
  0001e	48 8b c3	 mov	 rax, rbx
; Line 289
  00021	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
$LN8@classend:
; Line 276
  0002c	80 3b 5e	 cmp	 BYTE PTR [rbx], 94	; 0000005eH
  0002f	75 03		 jne	 SHORT $LL6@classend
  00031	48 ff c3	 inc	 rbx
$LL6@classend:
; Line 278
  00034	48 3b 5f 10	 cmp	 rbx, QWORD PTR [rdi+16]
  00038	75 10		 jne	 SHORT $LN3@classend
; Line 279
  0003a	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@CFGACOGB@malformed?5pattern?5?$CImissing?5?8?$FN?8?$CJ?$AA@
  00045	e8 00 00 00 00	 call	 luaL_error
$LN3@classend:
; Line 280
  0004a	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  0004d	48 ff c3	 inc	 rbx
  00050	3c 25		 cmp	 al, 37			; 00000025H
  00052	75 09		 jne	 SHORT $LN5@classend
  00054	48 3b 5f 10	 cmp	 rbx, QWORD PTR [rdi+16]
  00058	73 03		 jae	 SHORT $LN5@classend
; Line 281
  0005a	48 ff c3	 inc	 rbx
$LN5@classend:
; Line 282
  0005d	80 3b 5d	 cmp	 BYTE PTR [rbx], 93	; 0000005dH
  00060	75 d2		 jne	 SHORT $LL6@classend
; Line 273
  00062	48 8d 43 01	 lea	 rax, QWORD PTR [rbx+1]
; Line 289
  00066	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
$LN10@classend:
; Line 271
  00071	48 3b 59 10	 cmp	 rbx, QWORD PTR [rcx+16]
  00075	75 10		 jne	 SHORT $LN9@classend
; Line 272
  00077	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@PLJBIEHA@malformed?5pattern?5?$CIends?5with?5?8?$CF?$CF@
  00082	e8 00 00 00 00	 call	 luaL_error
$LN9@classend:
; Line 273
  00087	48 8d 43 01	 lea	 rax, QWORD PTR [rbx+1]
; Line 289
  0008b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00090	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00094	5f		 pop	 rdi
  00095	c3		 ret	 0
classend ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT capture_to_close
_TEXT	SEGMENT
ms$ = 8
capture_to_close PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 262
  00000	44 8b 49 2c	 mov	 r9d, DWORD PTR [rcx+44]
  00004	41 ff c9	 dec	 r9d
  00007	49 63 d1	 movsxd	 rdx, r9d
  0000a	78 26		 js	 SHORT $LN2@capture_to
; Line 261
  0000c	48 8b c2	 mov	 rax, rdx
  0000f	4c 8d 41 38	 lea	 r8, QWORD PTR [rcx+56]
  00013	48 c1 e0 04	 shl	 rax, 4
  00017	4c 03 c0	 add	 r8, rax
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@capture_to:
; Line 263
  00020	49 83 38 ff	 cmp	 QWORD PTR [r8], -1
  00024	74 1c		 je	 SHORT $LN8@capture_to
; Line 262
  00026	41 ff c9	 dec	 r9d
  00029	49 83 e8 10	 sub	 r8, 16
  0002d	48 ff ca	 dec	 rdx
  00030	79 ee		 jns	 SHORT $LL4@capture_to
$LN2@capture_to:
; Line 264
  00032	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@ECNPHIBF@invalid?5pattern?5capture?$AA@
  0003d	e9 00 00 00 00	 jmp	 luaL_error
$LN8@capture_to:
; Line 263
  00042	41 8b c1	 mov	 eax, r9d
; Line 265
  00045	c3		 ret	 0
capture_to_close ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT check_capture
_TEXT	SEGMENT
ms$ = 8
l$ = 16
check_capture PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 253
  00000	83 ea 31	 sub	 edx, 49			; 00000031H
; Line 254
  00003	78 16		 js	 SHORT $LN1@check_capt
  00005	3b 51 2c	 cmp	 edx, DWORD PTR [rcx+44]
  00008	7d 11		 jge	 SHORT $LN1@check_capt
  0000a	48 63 c2	 movsxd	 rax, edx
  0000d	48 03 c0	 add	 rax, rax
  00010	48 83 7c c1 38
	ff		 cmp	 QWORD PTR [rcx+rax*8+56], -1
  00016	74 03		 je	 SHORT $LN1@check_capt
; Line 256
  00018	8b c2		 mov	 eax, edx
; Line 257
  0001a	c3		 ret	 0
$LN1@check_capt:
; Line 255
  0001b	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0001f	44 8d 42 01	 lea	 r8d, DWORD PTR [rdx+1]
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JNACDPC@invalid?5capture?5index?5?$CF?$CF?$CFd?$AA@
  0002a	e9 00 00 00 00	 jmp	 luaL_error
check_capture ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT match
_TEXT	SEGMENT
ms$ = 48
s$ = 56
p$ = 64
match	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 435
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b d8	 mov	 rbx, r8
; Line 436
  00012	44 8b 41 28	 mov	 r8d, DWORD PTR [rcx+40]
  00016	48 8b fa	 mov	 rdi, rdx
  00019	41 8d 40 ff	 lea	 eax, DWORD PTR [r8-1]
  0001d	48 8b f1	 mov	 rsi, rcx
  00020	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00023	45 85 c0	 test	 r8d, r8d
  00026	75 10		 jne	 SHORT $LN57@match
; Line 437
  00028	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LPFFPFJG@pattern?5too?5complex?$AA@
  00033	e8 00 00 00 00	 call	 luaL_error
$LN57@match:
; Line 439
  00038	48 3b 5e 10	 cmp	 rbx, QWORD PTR [rsi+16]
  0003c	0f 84 9d 02 00
	00		 je	 $LN34@match
  00042	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$init$68:
; Line 440
  00050	0f be 0b	 movsx	 ecx, BYTE PTR [rbx]
  00053	83 e9 24	 sub	 ecx, 36			; 00000024H
  00056	0f 84 02 01 00
	00		 je	 $LN29@match
  0005c	ff c9		 dec	 ecx
  0005e	74 28		 je	 SHORT $LN27@match
  00060	83 e9 03	 sub	 ecx, 3
  00063	0f 84 fc 01 00
	00		 je	 $LN33@match
  00069	ff c9		 dec	 ecx
  0006b	0f 85 fb 00 00
	00		 jne	 $dflt$69
; Line 449
  00071	4c 8d 43 01	 lea	 r8, QWORD PTR [rbx+1]
  00075	48 8b d7	 mov	 rdx, rdi
  00078	48 8b ce	 mov	 rcx, rsi
  0007b	e8 00 00 00 00	 call	 end_capture
  00080	48 8b f8	 mov	 rdi, rax
; Line 450
  00083	e9 52 02 00 00	 jmp	 $LN65@match
$LN27@match:
; Line 459
  00088	0f b6 4b 01	 movzx	 ecx, BYTE PTR [rbx+1]
  0008c	0f b6 c1	 movzx	 eax, cl
  0008f	80 f9 30	 cmp	 cl, 48			; 00000030H
  00092	0f 8c d4 00 00
	00		 jl	 $dflt$69
  00098	3c 39		 cmp	 al, 57			; 00000039H
  0009a	0f 8e 9a 00 00
	00		 jle	 $LN19@match
  000a0	3c 62		 cmp	 al, 98			; 00000062H
  000a2	74 72		 je	 SHORT $LN24@match
  000a4	3c 66		 cmp	 al, 102			; 00000066H
  000a6	0f 85 c0 00 00
	00		 jne	 $dflt$69
; Line 469
  000ac	48 83 c3 02	 add	 rbx, 2
; Line 470
  000b0	80 3b 5b	 cmp	 BYTE PTR [rbx], 91	; 0000005bH
  000b3	74 10		 je	 SHORT $LN21@match
; Line 471
  000b5	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  000b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@LOJJMDBH@missing?5?8?$FL?8?5after?5?8?$CF?$CFf?8?5in?5patte@
  000c0	e8 00 00 00 00	 call	 luaL_error
$LN21@match:
; Line 472
  000c5	48 8b d3	 mov	 rdx, rbx
  000c8	48 8b ce	 mov	 rcx, rsi
  000cb	e8 00 00 00 00	 call	 classend
  000d0	48 8b e8	 mov	 rbp, rax
; Line 473
  000d3	48 3b 3e	 cmp	 rdi, QWORD PTR [rsi]
  000d6	75 04		 jne	 SHORT $LN40@match
  000d8	32 c9		 xor	 cl, cl
  000da	eb 04		 jmp	 SHORT $LN41@match
$LN40@match:
  000dc	0f b6 4f ff	 movzx	 ecx, BYTE PTR [rdi-1]
$LN41@match:
; Line 475
  000e0	4c 8d 40 ff	 lea	 r8, QWORD PTR [rax-1]
  000e4	0f b6 c9	 movzx	 ecx, cl
  000e7	48 8b d3	 mov	 rdx, rbx
  000ea	e8 00 00 00 00	 call	 matchbracketclass
  000ef	85 c0		 test	 eax, eax
  000f1	0f 85 cf 01 00
	00		 jne	 $LN14@match
  000f7	0f b6 0f	 movzx	 ecx, BYTE PTR [rdi]
  000fa	4c 8d 45 ff	 lea	 r8, QWORD PTR [rbp-1]
  000fe	48 8b d3	 mov	 rdx, rbx
  00101	e8 00 00 00 00	 call	 matchbracketclass
  00106	85 c0		 test	 eax, eax
  00108	0f 84 b8 01 00
	00		 je	 $LN14@match
; Line 476
  0010e	48 8b dd	 mov	 rbx, rbp
  00111	e9 43 01 00 00	 jmp	 $LN59@match
$LN24@match:
; Line 461
  00116	4c 8d 43 02	 lea	 r8, QWORD PTR [rbx+2]
  0011a	48 8b d7	 mov	 rdx, rdi
  0011d	48 8b ce	 mov	 rcx, rsi
  00120	e8 00 00 00 00	 call	 matchbalance
  00125	48 8b f8	 mov	 rdi, rax
; Line 462
  00128	48 85 c0	 test	 rax, rax
  0012b	0f 84 a9 01 00
	00		 je	 $LN65@match
; Line 463
  00131	48 83 c3 04	 add	 rbx, 4
  00135	e9 1f 01 00 00	 jmp	 $LN59@match
$LN19@match:
; Line 484
  0013a	44 0f b6 c1	 movzx	 r8d, cl
  0013e	48 8b d7	 mov	 rdx, rdi
  00141	48 8b ce	 mov	 rcx, rsi
  00144	e8 00 00 00 00	 call	 match_capture
  00149	48 8b f8	 mov	 rdi, rax
; Line 485
  0014c	48 85 c0	 test	 rax, rax
  0014f	0f 84 85 01 00
	00		 je	 $LN65@match
; Line 486
  00155	48 83 c3 02	 add	 rbx, 2
  00159	e9 fb 00 00 00	 jmp	 $LN59@match
$LN29@match:
; Line 453
  0015e	48 8d 43 01	 lea	 rax, QWORD PTR [rbx+1]
  00162	48 3b 46 10	 cmp	 rax, QWORD PTR [rsi+16]
  00166	0f 84 5e 01 00
	00		 je	 $LN28@match
$dflt$69:
; Line 495
  0016c	48 8b d3	 mov	 rdx, rbx
  0016f	48 8b ce	 mov	 rcx, rsi
  00172	e8 00 00 00 00	 call	 classend
  00177	48 8b e8	 mov	 rbp, rax
; Line 497
  0017a	48 3b 7e 08	 cmp	 rdi, QWORD PTR [rsi+8]
  0017e	0f 83 b1 00 00
	00		 jae	 $LN62@match
  00184	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]
  00187	44 0f b6 0f	 movzx	 r9d, BYTE PTR [rdi]
  0018b	0f b6 c1	 movzx	 eax, cl
  0018e	80 f9 25	 cmp	 cl, 37			; 00000025H
  00191	74 26		 je	 SHORT $LN44@match
  00193	3c 2e		 cmp	 al, 46			; 0000002eH
  00195	74 34		 je	 SHORT $LN15@match
  00197	3c 5b		 cmp	 al, 91			; 0000005bH
  00199	74 0d		 je	 SHORT $LN43@match
  0019b	0f b6 c1	 movzx	 eax, cl
  0019e	33 c9		 xor	 ecx, ecx
  001a0	41 3b c1	 cmp	 eax, r9d
  001a3	0f 94 c1	 sete	 cl
  001a6	eb 1f		 jmp	 SHORT $LN46@match
$LN43@match:
  001a8	4c 8d 45 ff	 lea	 r8, QWORD PTR [rbp-1]
  001ac	48 8b d3	 mov	 rdx, rbx
  001af	41 8b c9	 mov	 ecx, r9d
  001b2	e8 00 00 00 00	 call	 matchbracketclass
  001b7	eb 0c		 jmp	 SHORT $LN66@match
$LN44@match:
  001b9	0f b6 53 01	 movzx	 edx, BYTE PTR [rbx+1]
  001bd	41 8b c9	 mov	 ecx, r9d
  001c0	e8 00 00 00 00	 call	 match_class
$LN66@match:
  001c5	8b c8		 mov	 ecx, eax
$LN46@match:
  001c7	85 c9		 test	 ecx, ecx
  001c9	74 6a		 je	 SHORT $LN62@match
$LN15@match:
; Line 505
  001cb	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  001cf	48 8d 41 ff	 lea	 rax, QWORD PTR [rcx-1]
  001d3	48 89 46 20	 mov	 QWORD PTR [rsi+32], rax
  001d7	48 85 c9	 test	 rcx, rcx
  001da	75 10		 jne	 SHORT $LN10@match
; Line 506
  001dc	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  001e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LPFFPFJG@pattern?5too?5complex?$AA@
  001e7	e8 00 00 00 00	 call	 luaL_error
$LN10@match:
; Line 507
  001ec	0f be 4d 00	 movsx	 ecx, BYTE PTR [rbp]
  001f0	83 e9 2a	 sub	 ecx, 42			; 0000002aH
  001f3	0f 84 b7 00 00
	00		 je	 $LN3@match
  001f9	ff c9		 dec	 ecx
  001fb	0f 84 ac 00 00
	00		 je	 $LN4@match
  00201	83 e9 02	 sub	 ecx, 2
  00204	0f 84 8d 00 00
	00		 je	 $LN2@match
  0020a	83 f9 12	 cmp	 ecx, 18
  0020d	74 08		 je	 SHORT $LN7@match
; Line 527
  0020f	48 ff c7	 inc	 rdi
  00212	48 8b dd	 mov	 rbx, rbp
  00215	eb 42		 jmp	 SHORT $LN59@match
$LN7@match:
; Line 510
  00217	48 8d 5d 01	 lea	 rbx, QWORD PTR [rbp+1]
  0021b	48 8d 57 01	 lea	 rdx, QWORD PTR [rdi+1]
  0021f	48 8b ce	 mov	 rcx, rsi
  00222	4c 8b c3	 mov	 r8, rbx
  00225	e8 00 00 00 00	 call	 match
  0022a	48 85 c0	 test	 rax, rax
  0022d	0f 85 8e 00 00
	00		 jne	 $LN58@match
; Line 513
  00233	eb 24		 jmp	 SHORT $LN59@match
$LN62@match:
; Line 498
  00235	0f b6 45 00	 movzx	 eax, BYTE PTR [rbp]
  00239	3c 3f		 cmp	 al, 63			; 0000003fH
  0023b	0f 87 85 00 00
	00		 ja	 $LN14@match
  00241	48 0f be c0	 movsx	 rax, al
  00245	48 b9 00 00 00
	00 00 24 00 80	 mov	 rcx, -9223332454436175872 ; 8000240000000000H
  0024f	48 0f a3 c1	 bt	 rcx, rax
  00253	73 71		 jae	 SHORT $LN14@match
; Line 499
  00255	48 8d 5d 01	 lea	 rbx, QWORD PTR [rbp+1]
$LN59@match:
; Line 439
  00259	48 3b 5e 10	 cmp	 rbx, QWORD PTR [rsi+16]
  0025d	0f 85 ed fd ff
	ff		 jne	 $init$68
  00263	eb 75		 jmp	 SHORT $LN65@match
$LN33@match:
; Line 442
  00265	80 7b 01 29	 cmp	 BYTE PTR [rbx+1], 41	; 00000029H
  00269	4c 8d 43 01	 lea	 r8, QWORD PTR [rbx+1]
; Line 443
  0026d	48 8b d7	 mov	 rdx, rdi
  00270	48 8b ce	 mov	 rcx, rsi
  00273	75 14		 jne	 SHORT $LN32@match
  00275	4c 8d 43 02	 lea	 r8, QWORD PTR [rbx+2]
  00279	41 b9 fe ff ff
	ff		 mov	 r9d, -2
  0027f	e8 00 00 00 00	 call	 start_capture
  00284	48 8b f8	 mov	 rdi, rax
; Line 444
  00287	eb 51		 jmp	 SHORT $LN65@match
$LN32@match:
; Line 445
  00289	41 83 c9 ff	 or	 r9d, -1
  0028d	e8 00 00 00 00	 call	 start_capture
  00292	48 8b f8	 mov	 rdi, rax
; Line 446
  00295	eb 43		 jmp	 SHORT $LN65@match
$LN2@match:
; Line 524
  00297	4c 8b cd	 mov	 r9, rbp
  0029a	4c 8b c3	 mov	 r8, rbx
  0029d	48 8b d7	 mov	 rdx, rdi
  002a0	48 8b ce	 mov	 rcx, rsi
  002a3	e8 00 00 00 00	 call	 min_expand
  002a8	48 8b f8	 mov	 rdi, rax
; Line 525
  002ab	eb 2d		 jmp	 SHORT $LN65@match
$LN4@match:
; Line 518
  002ad	48 ff c7	 inc	 rdi
$LN3@match:
; Line 521
  002b0	4c 8b cd	 mov	 r9, rbp
  002b3	4c 8b c3	 mov	 r8, rbx
  002b6	48 8b d7	 mov	 rdx, rdi
  002b9	48 8b ce	 mov	 rcx, rsi
  002bc	e8 00 00 00 00	 call	 max_expand
$LN58@match:
  002c1	48 8b f8	 mov	 rdi, rax
; Line 530
  002c4	eb 14		 jmp	 SHORT $LN65@match
$LN14@match:
; Line 502
  002c6	33 ff		 xor	 edi, edi
; Line 504
  002c8	eb 10		 jmp	 SHORT $LN65@match
$LN28@match:
; Line 455
  002ca	48 3b 7e 08	 cmp	 rdi, QWORD PTR [rsi+8]
  002ce	ba 00 00 00 00	 mov	 edx, 0
  002d3	48 0f 44 d7	 cmove	 rdx, rdi
  002d7	48 8b fa	 mov	 rdi, rdx
$LN65@match:
  002da	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
$LN34@match:
; Line 534
  002df	ff 46 28	 inc	 DWORD PTR [rsi+40]
; Line 536
  002e2	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  002e7	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  002ec	48 8b c7	 mov	 rax, rdi
  002ef	48 83 c4 20	 add	 rsp, 32			; 00000020H
  002f3	5f		 pop	 rdi
  002f4	c3		 ret	 0
match	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_dump
_TEXT	SEGMENT
b$ = 32
__$ArrayPad$ = 8256
L$ = 8288
str_dump PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 187
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	b8 50 20 00 00	 mov	 eax, 8272		; 00002050H
  0000b	e8 00 00 00 00	 call	 __chkstk
  00010	48 2b e0	 sub	 rsp, rax
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 40
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 189
  00025	ba 02 00 00 00	 mov	 edx, 2
  0002a	48 8b f9	 mov	 rdi, rcx
  0002d	e8 00 00 00 00	 call	 lua_toboolean
; Line 190
  00032	ba 01 00 00 00	 mov	 edx, 1
  00037	48 8b cf	 mov	 rcx, rdi
  0003a	44 8d 42 05	 lea	 r8d, QWORD PTR [rdx+5]
  0003e	8b d8		 mov	 ebx, eax
  00040	e8 00 00 00 00	 call	 luaL_checktype
; Line 191
  00045	ba 01 00 00 00	 mov	 edx, 1
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	e8 00 00 00 00	 call	 lua_settop
; Line 192
  00052	48 8d 54 24 20	 lea	 rdx, QWORD PTR b$[rsp]
  00057	48 8b cf	 mov	 rcx, rdi
  0005a	e8 00 00 00 00	 call	 luaL_buffinit
; Line 193
  0005f	4c 8d 44 24 20	 lea	 r8, QWORD PTR b$[rsp]
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:writer
  0006b	44 8b cb	 mov	 r9d, ebx
  0006e	48 8b cf	 mov	 rcx, rdi
  00071	e8 00 00 00 00	 call	 lua_dump
  00076	85 c0		 test	 eax, eax
  00078	74 11		 je	 SHORT $LN1@str_dump
; Line 194
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@BNLBHKJN@unable?5to?5dump?5given?5function?$AA@
  00081	48 8b cf	 mov	 rcx, rdi
  00084	e8 00 00 00 00	 call	 luaL_error
  00089	eb 0f		 jmp	 SHORT $LN2@str_dump
$LN1@str_dump:
; Line 195
  0008b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$[rsp]
  00090	e8 00 00 00 00	 call	 luaL_pushresult
; Line 196
  00095	b8 01 00 00 00	 mov	 eax, 1
$LN2@str_dump:
; Line 197
  0009a	48 8b 8c 24 40
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000a2	48 33 cc	 xor	 rcx, rsp
  000a5	e8 00 00 00 00	 call	 __security_check_cookie
  000aa	48 8b 9c 24 68
	20 00 00	 mov	 rbx, QWORD PTR [rsp+8296]
  000b2	48 81 c4 50 20
	00 00		 add	 rsp, 8272		; 00002050H
  000b9	5f		 pop	 rdi
  000ba	c3		 ret	 0
str_dump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT writer
_TEXT	SEGMENT
L$ = 48
b$ = 56
size$ = 64
B$ = 72
writer	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 180
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 182
  00004	49 8b c9	 mov	 rcx, r9
  00007	e8 00 00 00 00	 call	 luaL_addlstring
; Line 183
  0000c	33 c0		 xor	 eax, eax
; Line 184
  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	c3		 ret	 0
writer	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_char
_TEXT	SEGMENT
b$ = 32
__$ArrayPad$ = 8256
L$ = 8304
str_char PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 165
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	57		 push	 rdi
  0000b	41 56		 push	 r14
  0000d	41 57		 push	 r15
  0000f	b8 50 20 00 00	 mov	 eax, 8272		; 00002050H
  00014	e8 00 00 00 00	 call	 __chkstk
  00019	48 2b e0	 sub	 rsp, rax
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 40
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002e	48 8b e9	 mov	 rbp, rcx
; Line 166
  00031	e8 00 00 00 00	 call	 lua_gettop
; Line 169
  00036	48 8d 54 24 20	 lea	 rdx, QWORD PTR b$[rsp]
  0003b	4c 63 f0	 movsxd	 r14, eax
  0003e	48 8b cd	 mov	 rcx, rbp
  00041	4d 8b c6	 mov	 r8, r14
  00044	e8 00 00 00 00	 call	 luaL_buffinitsize
; Line 170
  00049	bf 01 00 00 00	 mov	 edi, 1
  0004e	8b df		 mov	 ebx, edi
  00050	4c 8b f8	 mov	 r15, rax
  00053	49 3b de	 cmp	 rbx, r14
  00056	7f 45		 jg	 SHORT $LN1@str_char
  00058	48 89 b4 24 78
	20 00 00	 mov	 QWORD PTR [rsp+8312], rsi
$LL3@str_char:
; Line 171
  00060	8b d7		 mov	 edx, edi
  00062	48 8b cd	 mov	 rcx, rbp
  00065	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 172
  0006a	0f b6 c8	 movzx	 ecx, al
  0006d	48 8b f0	 mov	 rsi, rax
  00070	48 3b c8	 cmp	 rcx, rax
  00073	74 11		 je	 SHORT $LN6@str_char
  00075	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@JFBPAFFP@value?5out?5of?5range?$AA@
  0007c	8b d7		 mov	 edx, edi
  0007e	48 8b cd	 mov	 rcx, rbp
  00081	e8 00 00 00 00	 call	 luaL_argerror
$LN6@str_char:
; Line 173
  00086	41 88 74 1f ff	 mov	 BYTE PTR [r15+rbx-1], sil
  0008b	48 ff c3	 inc	 rbx
  0008e	ff c7		 inc	 edi
  00090	49 3b de	 cmp	 rbx, r14
  00093	7e cb		 jle	 SHORT $LL3@str_char
  00095	48 8b b4 24 78
	20 00 00	 mov	 rsi, QWORD PTR [rsp+8312]
$LN1@str_char:
; Line 175
  0009d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$[rsp]
  000a2	49 8b d6	 mov	 rdx, r14
  000a5	e8 00 00 00 00	 call	 luaL_pushresultsize
; Line 176
  000aa	b8 01 00 00 00	 mov	 eax, 1
; Line 177
  000af	48 8b 8c 24 40
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000b7	48 33 cc	 xor	 rcx, rsp
  000ba	e8 00 00 00 00	 call	 __security_check_cookie
  000bf	4c 8d 9c 24 50
	20 00 00	 lea	 r11, QWORD PTR [rsp+8272]
  000c7	49 8b 5b 30	 mov	 rbx, QWORD PTR [r11+48]
  000cb	49 8b 6b 38	 mov	 rbp, QWORD PTR [r11+56]
  000cf	49 8b e3	 mov	 rsp, r11
  000d2	41 5f		 pop	 r15
  000d4	41 5e		 pop	 r14
  000d6	5f		 pop	 rdi
  000d7	c3		 ret	 0
str_char ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_byte
_TEXT	SEGMENT
L$ = 80
l$ = 88
str_byte PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 146
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 148
  00016	41 bc 01 00 00
	00		 mov	 r12d, 1
  0001c	4c 8d 44 24 58	 lea	 r8, QWORD PTR l$[rsp]
  00021	48 8b e9	 mov	 rbp, rcx
  00024	41 8b d4	 mov	 edx, r12d
  00027	e8 00 00 00 00	 call	 luaL_checklstring
; Line 149
  0002c	48 8b 7c 24 58	 mov	 rdi, QWORD PTR l$[rsp]
  00031	41 8d 54 24 01	 lea	 edx, QWORD PTR [r12+1]
  00036	45 8b c4	 mov	 r8d, r12d
  00039	48 8b cd	 mov	 rcx, rbp
  0003c	4c 8b f8	 mov	 r15, rax
  0003f	e8 00 00 00 00	 call	 luaL_optinteger
  00044	33 db		 xor	 ebx, ebx
  00046	48 8b f0	 mov	 rsi, rax
  00049	48 85 c0	 test	 rax, rax
  0004c	79 12		 jns	 SHORT $LN10@str_byte
  0004e	48 f7 d8	 neg	 rax
  00051	48 3b c7	 cmp	 rax, rdi
  00054	76 04		 jbe	 SHORT $LN11@str_byte
  00056	8b f3		 mov	 esi, ebx
  00058	eb 06		 jmp	 SHORT $LN10@str_byte
$LN11@str_byte:
  0005a	48 ff c6	 inc	 rsi
  0005d	48 03 f7	 add	 rsi, rdi
$LN10@str_byte:
; Line 150
  00060	4c 8b 74 24 58	 mov	 r14, QWORD PTR l$[rsp]
  00065	4c 8b c6	 mov	 r8, rsi
  00068	ba 03 00 00 00	 mov	 edx, 3
  0006d	48 8b cd	 mov	 rcx, rbp
  00070	e8 00 00 00 00	 call	 luaL_optinteger
  00075	48 8b f8	 mov	 rdi, rax
  00078	48 85 c0	 test	 rax, rax
  0007b	79 13		 jns	 SHORT $LN16@str_byte
  0007d	48 f7 d8	 neg	 rax
  00080	49 3b c6	 cmp	 rax, r14
  00083	76 05		 jbe	 SHORT $LN17@str_byte
  00085	48 8b fb	 mov	 rdi, rbx
  00088	eb 06		 jmp	 SHORT $LN16@str_byte
$LN17@str_byte:
  0008a	48 ff c7	 inc	 rdi
  0008d	49 03 fe	 add	 rdi, r14
$LN16@str_byte:
; Line 152
  00090	49 3b f4	 cmp	 rsi, r12
  00093	49 0f 4c f4	 cmovl	 rsi, r12
; Line 153
  00097	48 3b 7c 24 58	 cmp	 rdi, QWORD PTR l$[rsp]
  0009c	48 0f 4f 7c 24
	58		 cmovg	 rdi, QWORD PTR l$[rsp]
; Line 154
  000a2	48 3b f7	 cmp	 rsi, rdi
  000a5	7e 04		 jle	 SHORT $LN5@str_byte
  000a7	33 c0		 xor	 eax, eax
  000a9	eb 5c		 jmp	 SHORT $LN8@str_byte
$LN5@str_byte:
; Line 155
  000ab	48 8b c7	 mov	 rax, rdi
; Line 156
  000ae	48 8b cd	 mov	 rcx, rbp
  000b1	48 2b c6	 sub	 rax, rsi
  000b4	48 3d ff ff ff
	7f		 cmp	 rax, 2147483647		; 7fffffffH
  000ba	7c 0e		 jl	 SHORT $LN4@str_byte
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
  000c3	e8 00 00 00 00	 call	 luaL_error
  000c8	eb 3d		 jmp	 SHORT $LN8@str_byte
$LN4@str_byte:
; Line 157
  000ca	2b fe		 sub	 edi, esi
; Line 158
  000cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@DFAIEAEC@string?5slice?5too?5long?$AA@
  000d3	ff c7		 inc	 edi
  000d5	8b d7		 mov	 edx, edi
  000d7	e8 00 00 00 00	 call	 luaL_checkstack
; Line 159
  000dc	4c 63 f7	 movsxd	 r14, edi
  000df	85 ff		 test	 edi, edi
  000e1	7e 22		 jle	 SHORT $LN1@str_byte
  000e3	49 03 f7	 add	 rsi, r15
  000e6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL3@str_byte:
; Line 160
  000f0	0f b6 54 1e ff	 movzx	 edx, BYTE PTR [rsi+rbx-1]
  000f5	48 8b cd	 mov	 rcx, rbp
  000f8	e8 00 00 00 00	 call	 lua_pushinteger
  000fd	48 ff c3	 inc	 rbx
  00100	49 3b de	 cmp	 rbx, r14
  00103	7c eb		 jl	 SHORT $LL3@str_byte
$LN1@str_byte:
; Line 161
  00105	8b c7		 mov	 eax, edi
$LN8@str_byte:
; Line 162
  00107	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0010c	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  00111	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00115	41 5f		 pop	 r15
  00117	41 5e		 pop	 r14
  00119	41 5c		 pop	 r12
  0011b	5f		 pop	 rdi
  0011c	5e		 pop	 rsi
  0011d	c3		 ret	 0
str_byte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_rep
_TEXT	SEGMENT
l$ = 32
lsep$ = 40
b$1 = 48
__$ArrayPad$ = 8272
L$ = 8320
str_rep	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 120
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	41 57		 push	 r15
  00009	b8 60 20 00 00	 mov	 eax, 8288		; 00002060H
  0000e	e8 00 00 00 00	 call	 __chkstk
  00013	48 2b e0	 sub	 rsp, rax
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 50
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 122
  00028	4c 8d 44 24 20	 lea	 r8, QWORD PTR l$[rsp]
  0002d	ba 01 00 00 00	 mov	 edx, 1
  00032	48 8b d9	 mov	 rbx, rcx
  00035	e8 00 00 00 00	 call	 luaL_checklstring
; Line 123
  0003a	ba 02 00 00 00	 mov	 edx, 2
  0003f	48 8b cb	 mov	 rcx, rbx
  00042	48 8b f0	 mov	 rsi, rax
  00045	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 124
  0004a	4c 8d 4c 24 28	 lea	 r9, QWORD PTR lsep$[rsp]
  0004f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00056	ba 03 00 00 00	 mov	 edx, 3
  0005b	48 8b cb	 mov	 rcx, rbx
  0005e	4c 8b f8	 mov	 r15, rax
  00061	e8 00 00 00 00	 call	 luaL_optlstring
  00066	48 8b e8	 mov	 rbp, rax
; Line 125
  00069	4d 85 ff	 test	 r15, r15
  0006c	7f 19		 jg	 SHORT $LN8@str_rep
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00075	48 8b cb	 mov	 rcx, rbx
  00078	e8 00 00 00 00	 call	 lua_pushstring
; Line 142
  0007d	b8 01 00 00 00	 mov	 eax, 1
  00082	e9 e0 00 00 00	 jmp	 $LN9@str_rep
$LN8@str_rep:
; Line 126
  00087	48 8b 4c 24 20	 mov	 rcx, QWORD PTR l$[rsp]
  0008c	4c 8b 4c 24 28	 mov	 r9, QWORD PTR lsep$[rsp]
  00091	4d 8d 04 09	 lea	 r8, QWORD PTR [r9+rcx]
  00095	4c 3b c1	 cmp	 r8, rcx
  00098	0f 82 ba 00 00
	00		 jb	 $LN5@str_rep
  0009e	33 d2		 xor	 edx, edx
  000a0	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000a5	49 f7 f7	 div	 r15
  000a8	4c 3b c0	 cmp	 r8, rax
  000ab	0f 87 a7 00 00
	00		 ja	 $LN5@str_rep
; Line 129
  000b1	48 89 bc 24 88
	20 00 00	 mov	 QWORD PTR [rsp+8328], rdi
  000b9	4c 89 b4 24 90
	20 00 00	 mov	 QWORD PTR [rsp+8336], r14
  000c1	49 8d 7f ff	 lea	 rdi, QWORD PTR [r15-1]
  000c5	49 8b c7	 mov	 rax, r15
  000c8	4c 8b f7	 mov	 r14, rdi
; Line 131
  000cb	48 8d 54 24 30	 lea	 rdx, QWORD PTR b$1[rsp]
  000d0	48 0f af c1	 imul	 rax, rcx
  000d4	4d 0f af f1	 imul	 r14, r9
  000d8	4c 03 f0	 add	 r14, rax
  000db	4d 8b c6	 mov	 r8, r14
  000de	48 8b cb	 mov	 rcx, rbx
  000e1	e8 00 00 00 00	 call	 luaL_buffinitsize
  000e6	48 8b d8	 mov	 rbx, rax
; Line 132
  000e9	49 83 ff 01	 cmp	 r15, 1
  000ed	7e 35		 jle	 SHORT $LN15@str_rep
  000ef	90		 npad	 1
$LL3@str_rep:
; Line 133
  000f0	4c 8b 44 24 20	 mov	 r8, QWORD PTR l$[rsp]
  000f5	48 8b d6	 mov	 rdx, rsi
  000f8	48 8b cb	 mov	 rcx, rbx
  000fb	e8 00 00 00 00	 call	 memcpy
; Line 134
  00100	4c 8b 44 24 28	 mov	 r8, QWORD PTR lsep$[rsp]
  00105	48 03 5c 24 20	 add	 rbx, QWORD PTR l$[rsp]
  0010a	4d 85 c0	 test	 r8, r8
  0010d	74 10		 je	 SHORT $LN1@str_rep
; Line 135
  0010f	48 8b d5	 mov	 rdx, rbp
  00112	48 8b cb	 mov	 rcx, rbx
  00115	e8 00 00 00 00	 call	 memcpy
; Line 136
  0011a	48 03 5c 24 28	 add	 rbx, QWORD PTR lsep$[rsp]
$LN1@str_rep:
; Line 132
  0011f	48 ff cf	 dec	 rdi
  00122	75 cc		 jne	 SHORT $LL3@str_rep
$LN15@str_rep:
; Line 139
  00124	4c 8b 44 24 20	 mov	 r8, QWORD PTR l$[rsp]
  00129	48 8b d6	 mov	 rdx, rsi
  0012c	48 8b cb	 mov	 rcx, rbx
  0012f	e8 00 00 00 00	 call	 memcpy
; Line 140
  00134	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$1[rsp]
  00139	49 8b d6	 mov	 rdx, r14
  0013c	e8 00 00 00 00	 call	 luaL_pushresultsize
  00141	4c 8b b4 24 90
	20 00 00	 mov	 r14, QWORD PTR [rsp+8336]
  00149	48 8b bc 24 88
	20 00 00	 mov	 rdi, QWORD PTR [rsp+8328]
; Line 142
  00151	b8 01 00 00 00	 mov	 eax, 1
  00156	eb 0f		 jmp	 SHORT $LN9@str_rep
$LN5@str_rep:
; Line 127
  00158	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JPPPHHNK@resulting?5string?5too?5large?$AA@
  0015f	48 8b cb	 mov	 rcx, rbx
  00162	e8 00 00 00 00	 call	 luaL_error
$LN9@str_rep:
; Line 143
  00167	48 8b 8c 24 50
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0016f	48 33 cc	 xor	 rcx, rsp
  00172	e8 00 00 00 00	 call	 __security_check_cookie
  00177	48 8b 9c 24 98
	20 00 00	 mov	 rbx, QWORD PTR [rsp+8344]
  0017f	48 81 c4 60 20
	00 00		 add	 rsp, 8288		; 00002060H
  00186	41 5f		 pop	 r15
  00188	5e		 pop	 rsi
  00189	5d		 pop	 rbp
  0018a	c3		 ret	 0
str_rep	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_upper
_TEXT	SEGMENT
l$ = 32
b$ = 48
__$ArrayPad$ = 8272
L$ = 8304
str_upper PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 107
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	b8 60 20 00 00	 mov	 eax, 8288		; 00002060H
  0000b	e8 00 00 00 00	 call	 __chkstk
  00010	48 2b e0	 sub	 rsp, rax
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 50
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 111
  00025	4c 8d 44 24 20	 lea	 r8, QWORD PTR l$[rsp]
  0002a	ba 01 00 00 00	 mov	 edx, 1
  0002f	48 8b d9	 mov	 rbx, rcx
  00032	e8 00 00 00 00	 call	 luaL_checklstring
; Line 112
  00037	4c 8b 44 24 20	 mov	 r8, QWORD PTR l$[rsp]
  0003c	48 8d 54 24 30	 lea	 rdx, QWORD PTR b$[rsp]
  00041	48 8b cb	 mov	 rcx, rbx
  00044	48 8b f0	 mov	 rsi, rax
  00047	e8 00 00 00 00	 call	 luaL_buffinitsize
; Line 113
  0004c	48 8b 54 24 20	 mov	 rdx, QWORD PTR l$[rsp]
  00051	48 8b d8	 mov	 rbx, rax
  00054	48 85 d2	 test	 rdx, rdx
  00057	74 3e		 je	 SHORT $LN1@str_upper
  00059	48 89 bc 24 78
	20 00 00	 mov	 QWORD PTR [rsp+8312], rdi
  00061	48 8b f8	 mov	 rdi, rax
  00064	48 2b f0	 sub	 rsi, rax
  00067	48 f7 df	 neg	 rdi
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL3@str_upper:
; Line 114
  00070	0f b6 0c 1e	 movzx	 ecx, BYTE PTR [rsi+rbx]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  0007a	48 8d 5b 01	 lea	 rbx, QWORD PTR [rbx+1]
  0007e	88 43 ff	 mov	 BYTE PTR [rbx-1], al
  00081	48 8b 54 24 20	 mov	 rdx, QWORD PTR l$[rsp]
  00086	48 8d 0c 1f	 lea	 rcx, QWORD PTR [rdi+rbx]
  0008a	48 3b ca	 cmp	 rcx, rdx
  0008d	72 e1		 jb	 SHORT $LL3@str_upper
  0008f	48 8b bc 24 78
	20 00 00	 mov	 rdi, QWORD PTR [rsp+8312]
$LN1@str_upper:
; Line 115
  00097	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$[rsp]
  0009c	e8 00 00 00 00	 call	 luaL_pushresultsize
; Line 116
  000a1	b8 01 00 00 00	 mov	 eax, 1
; Line 117
  000a6	48 8b 8c 24 50
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ae	48 33 cc	 xor	 rcx, rsp
  000b1	e8 00 00 00 00	 call	 __security_check_cookie
  000b6	48 8b 9c 24 80
	20 00 00	 mov	 rbx, QWORD PTR [rsp+8320]
  000be	48 81 c4 60 20
	00 00		 add	 rsp, 8288		; 00002060H
  000c5	5e		 pop	 rsi
  000c6	c3		 ret	 0
str_upper ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_lower
_TEXT	SEGMENT
l$ = 32
b$ = 48
__$ArrayPad$ = 8272
L$ = 8304
str_lower PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 94
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	b8 60 20 00 00	 mov	 eax, 8288		; 00002060H
  0000b	e8 00 00 00 00	 call	 __chkstk
  00010	48 2b e0	 sub	 rsp, rax
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 50
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 98
  00025	4c 8d 44 24 20	 lea	 r8, QWORD PTR l$[rsp]
  0002a	ba 01 00 00 00	 mov	 edx, 1
  0002f	48 8b d9	 mov	 rbx, rcx
  00032	e8 00 00 00 00	 call	 luaL_checklstring
; Line 99
  00037	4c 8b 44 24 20	 mov	 r8, QWORD PTR l$[rsp]
  0003c	48 8d 54 24 30	 lea	 rdx, QWORD PTR b$[rsp]
  00041	48 8b cb	 mov	 rcx, rbx
  00044	48 8b f0	 mov	 rsi, rax
  00047	e8 00 00 00 00	 call	 luaL_buffinitsize
; Line 100
  0004c	48 8b 54 24 20	 mov	 rdx, QWORD PTR l$[rsp]
  00051	48 8b d8	 mov	 rbx, rax
  00054	48 85 d2	 test	 rdx, rdx
  00057	74 3e		 je	 SHORT $LN1@str_lower
  00059	48 89 bc 24 78
	20 00 00	 mov	 QWORD PTR [rsp+8312], rdi
  00061	48 8b f8	 mov	 rdi, rax
  00064	48 2b f0	 sub	 rsi, rax
  00067	48 f7 df	 neg	 rdi
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL3@str_lower:
; Line 101
  00070	0f b6 0c 1e	 movzx	 ecx, BYTE PTR [rsi+rbx]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  0007a	48 8d 5b 01	 lea	 rbx, QWORD PTR [rbx+1]
  0007e	88 43 ff	 mov	 BYTE PTR [rbx-1], al
  00081	48 8b 54 24 20	 mov	 rdx, QWORD PTR l$[rsp]
  00086	48 8d 0c 1f	 lea	 rcx, QWORD PTR [rdi+rbx]
  0008a	48 3b ca	 cmp	 rcx, rdx
  0008d	72 e1		 jb	 SHORT $LL3@str_lower
  0008f	48 8b bc 24 78
	20 00 00	 mov	 rdi, QWORD PTR [rsp+8312]
$LN1@str_lower:
; Line 102
  00097	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$[rsp]
  0009c	e8 00 00 00 00	 call	 luaL_pushresultsize
; Line 103
  000a1	b8 01 00 00 00	 mov	 eax, 1
; Line 104
  000a6	48 8b 8c 24 50
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ae	48 33 cc	 xor	 rcx, rsp
  000b1	e8 00 00 00 00	 call	 __security_check_cookie
  000b6	48 8b 9c 24 80
	20 00 00	 mov	 rbx, QWORD PTR [rsp+8320]
  000be	48 81 c4 60 20
	00 00		 add	 rsp, 8288		; 00002060H
  000c5	5e		 pop	 rsi
  000c6	c3		 ret	 0
str_lower ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_reverse
_TEXT	SEGMENT
l$ = 32
b$ = 48
__$ArrayPad$ = 8272
L$ = 8304
str_reverse PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 82
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	b8 60 20 00 00	 mov	 eax, 8288		; 00002060H
  0000b	e8 00 00 00 00	 call	 __chkstk
  00010	48 2b e0	 sub	 rsp, rax
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 50
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 85
  00025	4c 8d 44 24 20	 lea	 r8, QWORD PTR l$[rsp]
  0002a	ba 01 00 00 00	 mov	 edx, 1
  0002f	48 8b d9	 mov	 rbx, rcx
  00032	e8 00 00 00 00	 call	 luaL_checklstring
; Line 86
  00037	4c 8b 44 24 20	 mov	 r8, QWORD PTR l$[rsp]
  0003c	48 8d 54 24 30	 lea	 rdx, QWORD PTR b$[rsp]
  00041	48 8b cb	 mov	 rcx, rbx
  00044	48 8b f8	 mov	 rdi, rax
  00047	e8 00 00 00 00	 call	 luaL_buffinitsize
; Line 87
  0004c	48 8b 54 24 20	 mov	 rdx, QWORD PTR l$[rsp]
  00051	33 c9		 xor	 ecx, ecx
  00053	48 85 d2	 test	 rdx, rdx
  00056	74 21		 je	 SHORT $LN1@str_revers
  00058	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL3@str_revers:
; Line 88
  00060	48 2b d1	 sub	 rdx, rcx
  00063	48 ff c1	 inc	 rcx
  00066	0f b6 54 3a ff	 movzx	 edx, BYTE PTR [rdx+rdi-1]
  0006b	88 54 01 ff	 mov	 BYTE PTR [rcx+rax-1], dl
  0006f	48 8b 54 24 20	 mov	 rdx, QWORD PTR l$[rsp]
  00074	48 3b ca	 cmp	 rcx, rdx
  00077	72 e7		 jb	 SHORT $LL3@str_revers
$LN1@str_revers:
; Line 89
  00079	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$[rsp]
  0007e	e8 00 00 00 00	 call	 luaL_pushresultsize
; Line 90
  00083	b8 01 00 00 00	 mov	 eax, 1
; Line 91
  00088	48 8b 8c 24 50
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00090	48 33 cc	 xor	 rcx, rsp
  00093	e8 00 00 00 00	 call	 __security_check_cookie
  00098	48 8b 9c 24 78
	20 00 00	 mov	 rbx, QWORD PTR [rsp+8312]
  000a0	48 81 c4 60 20
	00 00		 add	 rsp, 8288		; 00002060H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
str_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_sub
_TEXT	SEGMENT
L$ = 64
l$ = 72
str_sub	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 68
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 56		 push	 r14
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 70
  00012	41 be 01 00 00
	00		 mov	 r14d, 1
  00018	4c 8d 44 24 48	 lea	 r8, QWORD PTR l$[rsp]
  0001d	48 8b f9	 mov	 rdi, rcx
  00020	41 8b d6	 mov	 edx, r14d
  00023	e8 00 00 00 00	 call	 luaL_checklstring
; Line 71
  00028	48 8b 74 24 48	 mov	 rsi, QWORD PTR l$[rsp]
  0002d	41 8d 56 01	 lea	 edx, QWORD PTR [r14+1]
  00031	48 8b cf	 mov	 rcx, rdi
  00034	48 8b e8	 mov	 rbp, rax
  00037	e8 00 00 00 00	 call	 luaL_checkinteger
  0003c	48 8b d8	 mov	 rbx, rax
  0003f	48 85 c0	 test	 rax, rax
  00042	79 12		 jns	 SHORT $LN7@str_sub
  00044	48 f7 d8	 neg	 rax
  00047	48 3b c6	 cmp	 rax, rsi
  0004a	76 04		 jbe	 SHORT $LN8@str_sub
  0004c	33 db		 xor	 ebx, ebx
  0004e	eb 06		 jmp	 SHORT $LN7@str_sub
$LN8@str_sub:
  00050	48 ff c3	 inc	 rbx
  00053	48 03 de	 add	 rbx, rsi
$LN7@str_sub:
; Line 72
  00056	48 8b 74 24 48	 mov	 rsi, QWORD PTR l$[rsp]
  0005b	49 83 c8 ff	 or	 r8, -1
  0005f	48 8b cf	 mov	 rcx, rdi
  00062	41 8d 50 04	 lea	 edx, QWORD PTR [r8+4]
  00066	e8 00 00 00 00	 call	 luaL_optinteger
  0006b	4c 8b c0	 mov	 r8, rax
  0006e	48 85 c0	 test	 rax, rax
  00071	79 13		 jns	 SHORT $LN13@str_sub
  00073	48 f7 d8	 neg	 rax
  00076	48 3b c6	 cmp	 rax, rsi
  00079	76 05		 jbe	 SHORT $LN14@str_sub
  0007b	45 33 c0	 xor	 r8d, r8d
  0007e	eb 06		 jmp	 SHORT $LN13@str_sub
$LN14@str_sub:
  00080	49 ff c0	 inc	 r8
  00083	4c 03 c6	 add	 r8, rsi
$LN13@str_sub:
; Line 73
  00086	49 3b de	 cmp	 rbx, r14
; Line 76
  00089	48 8b cf	 mov	 rcx, rdi
  0008c	49 0f 4c de	 cmovl	 rbx, r14
  00090	4c 3b 44 24 48	 cmp	 r8, QWORD PTR l$[rsp]
  00095	4c 0f 4f 44 24
	48		 cmovg	 r8, QWORD PTR l$[rsp]
  0009b	49 3b d8	 cmp	 rbx, r8
  0009e	7f 14		 jg	 SHORT $LN2@str_sub
  000a0	4c 2b c3	 sub	 r8, rbx
  000a3	48 8d 55 ff	 lea	 rdx, QWORD PTR [rbp-1]
  000a7	48 03 d3	 add	 rdx, rbx
  000aa	49 ff c0	 inc	 r8
  000ad	e8 00 00 00 00	 call	 lua_pushlstring
  000b2	eb 0c		 jmp	 SHORT $LN19@str_sub
$LN2@str_sub:
; Line 77
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000bb	e8 00 00 00 00	 call	 lua_pushstring
$LN19@str_sub:
; Line 79
  000c0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000c5	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000ca	41 8b c6	 mov	 eax, r14d
  000cd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d1	41 5e		 pop	 r14
  000d3	5f		 pop	 rdi
  000d4	5e		 pop	 rsi
  000d5	c3		 ret	 0
str_sub	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT posrelat
_TEXT	SEGMENT
pos$ = 8
len$ = 16
posrelat PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 62
  00000	48 8b c1	 mov	 rax, rcx
  00003	48 85 c9	 test	 rcx, rcx
  00006	79 12		 jns	 SHORT $LN1@posrelat
; Line 63
  00008	48 f7 d8	 neg	 rax
  0000b	48 3b c2	 cmp	 rax, rdx
  0000e	76 03		 jbe	 SHORT $LN2@posrelat
  00010	33 c0		 xor	 eax, eax
; Line 65
  00012	c3		 ret	 0
$LN2@posrelat:
; Line 64
  00013	48 8d 42 01	 lea	 rax, QWORD PTR [rdx+1]
  00017	48 03 c1	 add	 rax, rcx
$LN1@posrelat:
; Line 65
  0001a	c3		 ret	 0
posrelat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT str_len
_TEXT	SEGMENT
L$ = 48
l$ = 56
str_len	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 52
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 54
  00006	4c 8d 44 24 38	 lea	 r8, QWORD PTR l$[rsp]
  0000b	ba 01 00 00 00	 mov	 edx, 1
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 luaL_checklstring
; Line 55
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR l$[rsp]
  0001d	48 8b cb	 mov	 rcx, rbx
  00020	e8 00 00 00 00	 call	 lua_pushinteger
; Line 56
  00025	b8 01 00 00 00	 mov	 eax, 1
; Line 57
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5b		 pop	 rbx
  0002f	c3		 ret	 0
str_len	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaopen_string
_TEXT	SEGMENT
L$ = 48
luaopen_string PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lstrlib.c
; Line 1548
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1549
  00006	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@405bc00000000000
  0000e	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00014	48 8b d9	 mov	 rbx, rcx
  00017	e8 00 00 00 00	 call	 luaL_checkversion_
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	44 8d 42 11	 lea	 r8d, QWORD PTR [rdx+17]
  00025	e8 00 00 00 00	 call	 lua_createtable
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:strlib
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 luaL_setfuncs
; Line 1550
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	e8 00 00 00 00	 call	 createmetatable
; Line 1551
  00044	b8 01 00 00 00	 mov	 eax, 1
; Line 1552
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5b		 pop	 rbx
  0004e	c3		 ret	 0
luaopen_string ENDP
_TEXT	ENDS
END
