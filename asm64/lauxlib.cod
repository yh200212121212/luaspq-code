; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	luaL_checkversion_
PUBLIC	luaL_getmetafield
PUBLIC	luaL_callmeta
PUBLIC	luaL_tolstring
PUBLIC	luaL_argerror
PUBLIC	luaL_checklstring
PUBLIC	luaL_optlstring
PUBLIC	luaL_checknumber
PUBLIC	luaL_optnumber
PUBLIC	luaL_checkinteger
PUBLIC	luaL_optinteger
PUBLIC	luaL_checkstack
PUBLIC	luaL_checktype
PUBLIC	luaL_checkany
PUBLIC	luaL_newmetatable
PUBLIC	luaL_setmetatable
PUBLIC	luaL_testudata
PUBLIC	luaL_checkudata
PUBLIC	luaL_where
PUBLIC	luaL_error
PUBLIC	luaL_checkoption
PUBLIC	luaL_fileresult
PUBLIC	luaL_execresult
PUBLIC	luaL_ref
PUBLIC	luaL_unref
PUBLIC	luaL_loadfilex
PUBLIC	luaL_loadbufferx
PUBLIC	luaL_loadstring
PUBLIC	luaL_newstate
PUBLIC	luaL_len
PUBLIC	luaL_gsub
PUBLIC	luaL_setfuncs
PUBLIC	luaL_getsubtable
PUBLIC	luaL_traceback
PUBLIC	luaL_requiref
PUBLIC	luaL_buffinit
PUBLIC	luaL_prepbuffsize
PUBLIC	luaL_addlstring
PUBLIC	luaL_addstring
PUBLIC	luaL_addvalue
PUBLIC	luaL_pushresult
PUBLIC	luaL_pushresultsize
PUBLIC	luaL_buffinitsize
PUBLIC	luaL_pushmodule
PUBLIC	luaL_openlib
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_01INIBCBCB@f?$AA@				; `string'
PUBLIC	??_C@_07PINPBNPB@_LOADED?$AA@			; `string'
PUBLIC	??_C@_03DDAHKNHO@_G?4?$AA@			; `string'
PUBLIC	??_C@_0O@EHCGJIOP@function?5?8?$CFs?8?$AA@	; `string'
PUBLIC	??_C@_07JJBIELFA@?$CFs?5?8?$CFs?8?$AA@		; `string'
PUBLIC	??_C@_0L@HEICADBI@main?5chunk?$AA@		; `string'
PUBLIC	??_C@_0BB@OJHNELPG@function?5?$DM?$CFs?3?$CFd?$DO?$AA@ ; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_0BB@CJHIJJAH@stack?5traceback?3?$AA@	; `string'
PUBLIC	??_C@_05JLIPKFIA@?6?7?4?4?4?$AA@		; `string'
PUBLIC	??_C@_04DOIEKPJK@Slnt?$AA@			; `string'
PUBLIC	??_C@_05GEEEIDH@?6?7?$CFs?3?$AA@		; `string'
PUBLIC	??_C@_03CDCAMCGK@?$CFd?3?$AA@			; `string'
PUBLIC	??_C@_04GJPPFNOH@?5in?5?$AA@			; `string'
PUBLIC	??_C@_0BF@HEPAINJG@?6?7?$CI?4?4?4tail?5calls?4?4?4?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BG@CHJGEHJL@bad?5argument?5?$CD?$CFd?5?$CI?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_06GABBCIBA@method?$AA@			; `string'
PUBLIC	??_C@_0BO@LENGMNDF@calling?5?8?$CFs?8?5on?5bad?5self?5?$CI?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BO@GOMKJOAH@bad?5argument?5?$CD?$CFd?5to?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_06LHMLJNCG@__name?$AA@			; `string'
PUBLIC	??_C@_0P@JGKNIAMH@light?5userdata?$AA@		; `string'
PUBLIC	??_C@_0BE@LDJANOJE@?$CFs?5expected?0?5got?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_02KHAMJCKP@Sl?$AA@			; `string'
PUBLIC	??_C@_07FCDHCGBN@?$CFs?3?$CFd?3?5?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_04MKNBDEPB@exit?$AA@			; `string'
PUBLIC	??_C@_0BE@HBADPNMP@invalid?5option?5?8?$CFs?8?$AA@ ; `string'
PUBLIC	??_C@_0BE@CBBDHBEP@stack?5overflow?5?$CI?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0P@EODJGPIM@stack?5overflow?$AA@		; `string'
PUBLIC	??_C@_0P@PDHEKNMA@value?5expected?$AA@		; `string'
PUBLIC	??_C@_0CF@GPCMCKGL@number?5has?5no?5integer?5representa@ ; `string'
PUBLIC	??_C@_0CI@KEENHMCA@not?5enough?5memory?5for?5buffer?5all@ ; `string'
PUBLIC	??_C@_06OAFBFKCG@LUABOX?$AA@			; `string'
PUBLIC	??_C@_04BDLIKKMN@__gc?$AA@			; `string'
PUBLIC	??_C@_0BB@IIFCFAGL@buffer?5too?5large?$AA@	; `string'
PUBLIC	??_C@_0BB@BJDGDOHH@cannot?5?$CFs?5?$CFs?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_03PKPBNCAL@?o?$LL?$LP?$AA@		; `string'
PUBLIC	??_C@_06CCPPALKB@?$DNstdin?$AA@			; `string'
PUBLIC	??_C@_03HPDLNGOA@?$EA?$CFs?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_06IEGCHAII@reopen?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_0CA@GGPBEEGI@object?5length?5is?5not?5an?5integer?$AA@ ; `string'
PUBLIC	??_C@_0L@HDFPAPPH@__tostring?$AA@		; `string'
PUBLIC	??_C@_02BPIDFGKK@?$CFI?$AA@			; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_03ILAMHENH@nil?$AA@			; `string'
PUBLIC	??_C@_06CILKLLDB@?$CFs?3?5?$CFp?$AA@		; `string'
PUBLIC	??_C@_0BO@CBJIAGLF@name?5conflict?5for?5module?5?8?$CFs?8?$AA@ ; `string'
PUBLIC	??_C@_0BC@CDGHCIOF@too?5many?5upvalues?$AA@	; `string'
PUBLIC	??_C@_0DC@EFOPIIKP@PANIC?3?5unprotected?5error?5in?5call@ ; `string'
PUBLIC	??_C@_0DB@FGBFPBHC@core?5and?5library?5have?5incompatib@ ; `string'
PUBLIC	??_C@_0BK@DLNLJHN@multiple?5Lua?5VMs?5detected?$AA@ ; `string'
PUBLIC	??_C@_0DG@EDLDPMHE@version?5mismatch?3?5app?4?5needs?5?$CFf?0@ ; `string'
PUBLIC	__real@405bc00000000000
EXTRN	__imp__errno:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_feof:PROC
EXTRN	__imp_ferror:PROC
EXTRN	__imp_fflush:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp_freopen:PROC
EXTRN	__imp_getc:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_realloc:PROC
EXTRN	__imp_strchr:PROC
EXTRN	__imp_strerror:PROC
EXTRN	__imp_strncmp:PROC
EXTRN	__imp_strstr:PROC
EXTRN	lua_newstate:PROC
EXTRN	lua_atpanic:PROC
EXTRN	lua_version:PROC
EXTRN	lua_absindex:PROC
EXTRN	lua_gettop:PROC
EXTRN	lua_settop:PROC
EXTRN	lua_pushvalue:PROC
EXTRN	lua_rotate:PROC
EXTRN	lua_copy:PROC
EXTRN	lua_checkstack:PROC
EXTRN	lua_isnumber:PROC
EXTRN	lua_isinteger:PROC
EXTRN	lua_type:PROC
EXTRN	lua_typename:PROC
EXTRN	lua_tonumberx:PROC
EXTRN	lua_tointegerx:PROC
EXTRN	lua_toboolean:PROC
EXTRN	lua_tolstring:PROC
EXTRN	lua_rawlen:PROC
EXTRN	lua_touserdata:PROC
EXTRN	lua_topointer:PROC
EXTRN	lua_rawequal:PROC
EXTRN	lua_pushnil:PROC
EXTRN	lua_pushinteger:PROC
EXTRN	lua_pushlstring:PROC
EXTRN	lua_pushstring:PROC
EXTRN	lua_pushvfstring:PROC
EXTRN	lua_pushfstring:PROC
EXTRN	lua_pushcclosure:PROC
EXTRN	lua_pushboolean:PROC
EXTRN	lua_getfield:PROC
EXTRN	lua_rawget:PROC
EXTRN	lua_rawgeti:PROC
EXTRN	lua_createtable:PROC
EXTRN	lua_newuserdata:PROC
EXTRN	lua_getmetatable:PROC
EXTRN	lua_setglobal:PROC
EXTRN	lua_settable:PROC
EXTRN	lua_setfield:PROC
EXTRN	lua_rawseti:PROC
EXTRN	lua_setmetatable:PROC
EXTRN	lua_callk:PROC
EXTRN	lua_load:PROC
EXTRN	lua_error:PROC
EXTRN	lua_next:PROC
EXTRN	lua_concat:PROC
EXTRN	lua_len:PROC
EXTRN	lua_getallocf:PROC
EXTRN	lua_getstack:PROC
EXTRN	lua_getinfo:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcpy:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_checkversion_ DD imagerel $LN9
	DD	imagerel $LN9+151
	DD	imagerel $unwind$luaL_checkversion_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_getmetafield DD imagerel $LN9
	DD	imagerel $LN9+129
	DD	imagerel $unwind$luaL_getmetafield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_callmeta DD imagerel $LN5
	DD	imagerel $LN5+120
	DD	imagerel $unwind$luaL_callmeta
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_tolstring DD imagerel $LN26
	DD	imagerel $LN26+411
	DD	imagerel $unwind$luaL_tolstring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_argerror DD imagerel $LN12
	DD	imagerel $LN12+269
	DD	imagerel $unwind$luaL_argerror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_checklstring DD imagerel $LN8
	DD	imagerel $LN8+76
	DD	imagerel $unwind$luaL_checklstring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_optlstring DD imagerel $LN15
	DD	imagerel $LN15+144
	DD	imagerel $unwind$luaL_optlstring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_checknumber DD imagerel $LN8
	DD	imagerel $LN8+85
	DD	imagerel $unwind$luaL_checknumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_optnumber DD imagerel $LN11
	DD	imagerel $LN11+102
	DD	imagerel $unwind$luaL_optnumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_checkinteger DD imagerel $LN13
	DD	imagerel $LN13+132
	DD	imagerel $unwind$luaL_checkinteger
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_optinteger DD imagerel $LN6
	DD	imagerel $LN6+76
	DD	imagerel $unwind$luaL_optinteger
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_checkstack DD imagerel $LN7
	DD	imagerel $LN7+84
	DD	imagerel $unwind$luaL_checkstack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_checktype DD imagerel $LN7
	DD	imagerel $LN7+71
	DD	imagerel $unwind$luaL_checktype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_checkany DD imagerel $LN5
	DD	imagerel $LN5+53
	DD	imagerel $unwind$luaL_checkany
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_newmetatable DD imagerel $LN5
	DD	imagerel $LN5+147
	DD	imagerel $unwind$luaL_newmetatable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_setmetatable DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$luaL_setmetatable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_testudata DD imagerel $LN7
	DD	imagerel $LN7+135
	DD	imagerel $unwind$luaL_testudata
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_checkudata DD imagerel $LN6
	DD	imagerel $LN6+78
	DD	imagerel $unwind$luaL_checkudata
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_where DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$luaL_where
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_error DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$luaL_error
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_checkoption DD imagerel $LN35
	DD	imagerel $LN35+224
	DD	imagerel $unwind$luaL_checkoption
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_fileresult DD imagerel $LN8
	DD	imagerel $LN8+147
	DD	imagerel $unwind$luaL_fileresult
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_execresult DD imagerel $LN16
	DD	imagerel $LN16+114
	DD	imagerel $unwind$luaL_execresult
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_ref DD imagerel $LN7
	DD	imagerel $LN7+180
	DD	imagerel $unwind$luaL_ref
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_unref DD imagerel $LN6
	DD	imagerel $LN6+21
	DD	imagerel $unwind$luaL_unref
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$luaL_unref DD imagerel $LN6+21
	DD	imagerel $LN6+98
	DD	imagerel $chain$0$luaL_unref
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$luaL_unref DD imagerel $LN6+98
	DD	imagerel $LN6+99
	DD	imagerel $chain$1$luaL_unref
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_loadfilex DD imagerel $LN76
	DD	imagerel $LN76+90
	DD	imagerel $unwind$luaL_loadfilex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$luaL_loadfilex DD imagerel $LN76+90
	DD	imagerel $LN76+181
	DD	imagerel $chain$2$luaL_loadfilex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$luaL_loadfilex DD imagerel $LN76+181
	DD	imagerel $LN76+249
	DD	imagerel $chain$3$luaL_loadfilex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$luaL_loadfilex DD imagerel $LN76+249
	DD	imagerel $LN76+686
	DD	imagerel $chain$4$luaL_loadfilex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$luaL_loadfilex DD imagerel $LN76+686
	DD	imagerel $LN76+717
	DD	imagerel $chain$5$luaL_loadfilex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_loadbufferx DD imagerel $LN4
	DD	imagerel $LN4+46
	DD	imagerel $unwind$luaL_loadbufferx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_loadstring DD imagerel $LN7
	DD	imagerel $LN7+64
	DD	imagerel $unwind$luaL_loadstring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_newstate DD imagerel $LN6
	DD	imagerel $LN6+52
	DD	imagerel $unwind$luaL_newstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_len DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$luaL_len
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_gsub DD imagerel $LN54
	DD	imagerel $LN54+42
	DD	imagerel $unwind$luaL_gsub
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$luaL_gsub DD imagerel $LN54+42
	DD	imagerel $LN54+672
	DD	imagerel $chain$4$luaL_gsub
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$luaL_gsub DD imagerel $LN54+672
	DD	imagerel $LN54+772
	DD	imagerel $chain$5$luaL_gsub
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$luaL_gsub DD imagerel $LN54+772
	DD	imagerel $LN54+911
	DD	imagerel $chain$6$luaL_gsub
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_setfuncs DD imagerel $LN24
	DD	imagerel $LN24+58
	DD	imagerel $unwind$luaL_setfuncs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$luaL_setfuncs DD imagerel $LN24+58
	DD	imagerel $LN24+165
	DD	imagerel $chain$2$luaL_setfuncs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$luaL_setfuncs DD imagerel $LN24+165
	DD	imagerel $LN24+186
	DD	imagerel $chain$3$luaL_setfuncs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_getsubtable DD imagerel $LN6
	DD	imagerel $LN6+134
	DD	imagerel $unwind$luaL_getsubtable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_traceback DD imagerel $LN20
	DD	imagerel $LN20+426
	DD	imagerel $unwind$luaL_traceback
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_requiref DD imagerel $LN10
	DD	imagerel $LN10+10
	DD	imagerel $unwind$luaL_requiref
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$luaL_requiref DD imagerel $LN10+10
	DD	imagerel $LN10+62
	DD	imagerel $chain$1$luaL_requiref
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$luaL_requiref DD imagerel $LN10+62
	DD	imagerel $LN10+133
	DD	imagerel $chain$2$luaL_requiref
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$luaL_requiref DD imagerel $LN10+133
	DD	imagerel $LN10+296
	DD	imagerel $chain$3$luaL_requiref
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$luaL_requiref DD imagerel $LN10+296
	DD	imagerel $LN10+329
	DD	imagerel $chain$4$luaL_requiref
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_prepbuffsize DD imagerel $LN10
	DD	imagerel $LN10+174
	DD	imagerel $unwind$luaL_prepbuffsize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_addlstring DD imagerel $LN6
	DD	imagerel $LN6+71
	DD	imagerel $unwind$luaL_addlstring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_addstring DD imagerel $LN8
	DD	imagerel $LN8+88
	DD	imagerel $unwind$luaL_addstring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_addvalue DD imagerel $LN8
	DD	imagerel $LN8+164
	DD	imagerel $unwind$luaL_addvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_pushresult DD imagerel $LN8
	DD	imagerel $LN8+49
	DD	imagerel $unwind$luaL_pushresult
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$luaL_pushresult DD imagerel $LN8+49
	DD	imagerel $LN8+140
	DD	imagerel $chain$0$luaL_pushresult
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$luaL_pushresult DD imagerel $LN8+140
	DD	imagerel $LN8+151
	DD	imagerel $chain$1$luaL_pushresult
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_pushmodule DD imagerel $LN6
	DD	imagerel $LN6+208
	DD	imagerel $unwind$luaL_pushmodule
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_openlib DD imagerel $LN24
	DD	imagerel $LN24+245
	DD	imagerel $unwind$luaL_openlib
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$findfield DD imagerel findfield
	DD	imagerel findfield+298
	DD	imagerel $unwind$findfield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pushglobalfuncname DD imagerel pushglobalfuncname
	DD	imagerel pushglobalfuncname+241
	DD	imagerel $unwind$pushglobalfuncname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pushfuncname DD imagerel pushfuncname
	DD	imagerel pushfuncname+235
	DD	imagerel $unwind$pushfuncname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lastlevel DD imagerel lastlevel
	DD	imagerel lastlevel+59
	DD	imagerel $unwind$lastlevel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$lastlevel DD imagerel lastlevel+59
	DD	imagerel lastlevel+107
	DD	imagerel $chain$0$lastlevel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$lastlevel DD imagerel lastlevel+107
	DD	imagerel lastlevel+179
	DD	imagerel $chain$1$lastlevel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$lastlevel DD imagerel lastlevel+179
	DD	imagerel lastlevel+187
	DD	imagerel $chain$2$lastlevel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$lastlevel DD imagerel lastlevel+187
	DD	imagerel lastlevel+220
	DD	imagerel $chain$3$lastlevel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$lastlevel DD imagerel lastlevel+220
	DD	imagerel lastlevel+225
	DD	imagerel $chain$4$lastlevel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$lastlevel DD imagerel lastlevel+225
	DD	imagerel lastlevel+230
	DD	imagerel $chain$5$lastlevel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$typeerror DD imagerel typeerror
	DD	imagerel typeerror+227
	DD	imagerel $unwind$typeerror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tag_error DD imagerel tag_error
	DD	imagerel tag_error+46
	DD	imagerel $unwind$tag_error
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$interror DD imagerel interror
	DD	imagerel interror+84
	DD	imagerel $unwind$interror
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$resizebox DD imagerel resizebox
	DD	imagerel resizebox+133
	DD	imagerel $unwind$resizebox
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$boxgc DD	imagerel boxgc
	DD	imagerel boxgc+83
	DD	imagerel $unwind$boxgc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newbox DD imagerel newbox
	DD	imagerel newbox+129
	DD	imagerel $unwind$newbox
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getF DD	imagerel getF
	DD	imagerel getF+117
	DD	imagerel $unwind$getF
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$errfile DD imagerel errfile
	DD	imagerel errfile+139
	DD	imagerel $unwind$errfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$skipBOM DD imagerel skipBOM
	DD	imagerel skipBOM+98
	DD	imagerel $unwind$skipBOM
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$skipcomment DD imagerel skipcomment
	DD	imagerel skipcomment+171
	DD	imagerel $unwind$skipcomment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaL_findtable DD imagerel luaL_findtable
	DD	imagerel luaL_findtable+302
	DD	imagerel $unwind$luaL_findtable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$l_alloc DD imagerel l_alloc
	DD	imagerel l_alloc+45
	DD	imagerel $unwind$l_alloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$panic DD	imagerel panic
	DD	imagerel panic+70
	DD	imagerel $unwind$panic
pdata	ENDS
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_0DG@EDLDPMHE@version?5mismatch?3?5app?4?5needs?5?$CFf?0@
CONST	SEGMENT
??_C@_0DG@EDLDPMHE@version?5mismatch?3?5app?4?5needs?5?$CFf?0@ DB 'versio'
	DB	'n mismatch: app. needs %f, Lua core provides %f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DLNLJHN@multiple?5Lua?5VMs?5detected?$AA@
CONST	SEGMENT
??_C@_0BK@DLNLJHN@multiple?5Lua?5VMs?5detected?$AA@ DB 'multiple Lua VMs '
	DB	'detected', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@FGBFPBHC@core?5and?5library?5have?5incompatib@
CONST	SEGMENT
??_C@_0DB@FGBFPBHC@core?5and?5library?5have?5incompatib@ DB 'core and lib'
	DB	'rary have incompatible numeric types', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EFOPIIKP@PANIC?3?5unprotected?5error?5in?5call@
CONST	SEGMENT
??_C@_0DC@EFOPIIKP@PANIC?3?5unprotected?5error?5in?5call@ DB 'PANIC: unpr'
	DB	'otected error in call to Lua API (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CDGHCIOF@too?5many?5upvalues?$AA@
CONST	SEGMENT
??_C@_0BC@CDGHCIOF@too?5many?5upvalues?$AA@ DB 'too many upvalues', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CBJIAGLF@name?5conflict?5for?5module?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0BO@CBJIAGLF@name?5conflict?5for?5module?5?8?$CFs?8?$AA@ DB 'name c'
	DB	'onflict for module ''%s''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CILKLLDB@?$CFs?3?5?$CFp?$AA@
CONST	SEGMENT
??_C@_06CILKLLDB@?$CFs?3?5?$CFp?$AA@ DB '%s: %p', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03ILAMHENH@nil?$AA@
CONST	SEGMENT
??_C@_03ILAMHENH@nil?$AA@ DB 'nil', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BPIDFGKK@?$CFI?$AA@
CONST	SEGMENT
??_C@_02BPIDFGKK@?$CFI?$AA@ DB '%I', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HDFPAPPH@__tostring?$AA@
CONST	SEGMENT
??_C@_0L@HDFPAPPH@__tostring?$AA@ DB '__tostring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GGPBEEGI@object?5length?5is?5not?5an?5integer?$AA@
CONST	SEGMENT
??_C@_0CA@GGPBEEGI@object?5length?5is?5not?5an?5integer?$AA@ DB 'object l'
	DB	'ength is not an integer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEGCHAII@reopen?$AA@
CONST	SEGMENT
??_C@_06IEGCHAII@reopen?$AA@ DB 'reopen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HPDLNGOA@?$EA?$CFs?$AA@
CONST	SEGMENT
??_C@_03HPDLNGOA@?$EA?$CFs?$AA@ DB '@%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCPPALKB@?$DNstdin?$AA@
CONST	SEGMENT
??_C@_06CCPPALKB@?$DNstdin?$AA@ DB '=stdin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03PKPBNCAL@?o?$LL?$LP?$AA@
CONST	SEGMENT
??_C@_03PKPBNCAL@?o?$LL?$LP?$AA@ DB 0efH, 0bbH, 0bfH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BJDGDOHH@cannot?5?$CFs?5?$CFs?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BB@BJDGDOHH@cannot?5?$CFs?5?$CFs?3?5?$CFs?$AA@ DB 'cannot %s %s: %'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IIFCFAGL@buffer?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BB@IIFCFAGL@buffer?5too?5large?$AA@ DB 'buffer too large', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BDLIKKMN@__gc?$AA@
CONST	SEGMENT
??_C@_04BDLIKKMN@__gc?$AA@ DB '__gc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OAFBFKCG@LUABOX?$AA@
CONST	SEGMENT
??_C@_06OAFBFKCG@LUABOX?$AA@ DB 'LUABOX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KEENHMCA@not?5enough?5memory?5for?5buffer?5all@
CONST	SEGMENT
??_C@_0CI@KEENHMCA@not?5enough?5memory?5for?5buffer?5all@ DB 'not enough '
	DB	'memory for buffer allocation', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GPCMCKGL@number?5has?5no?5integer?5representa@
CONST	SEGMENT
??_C@_0CF@GPCMCKGL@number?5has?5no?5integer?5representa@ DB 'number has n'
	DB	'o integer representation', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PDHEKNMA@value?5expected?$AA@
CONST	SEGMENT
??_C@_0P@PDHEKNMA@value?5expected?$AA@ DB 'value expected', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EODJGPIM@stack?5overflow?$AA@
CONST	SEGMENT
??_C@_0P@EODJGPIM@stack?5overflow?$AA@ DB 'stack overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CBBDHBEP@stack?5overflow?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BE@CBBDHBEP@stack?5overflow?5?$CI?$CFs?$CJ?$AA@ DB 'stack overflow'
	DB	' (%s)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HBADPNMP@invalid?5option?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0BE@HBADPNMP@invalid?5option?5?8?$CFs?8?$AA@ DB 'invalid option ''%'
	DB	's''', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKNBDEPB@exit?$AA@
CONST	SEGMENT
??_C@_04MKNBDEPB@exit?$AA@ DB 'exit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@ DB '%s: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07FCDHCGBN@?$CFs?3?$CFd?3?5?$AA@
CONST	SEGMENT
??_C@_07FCDHCGBN@?$CFs?3?$CFd?3?5?$AA@ DB '%s:%d: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KHAMJCKP@Sl?$AA@
CONST	SEGMENT
??_C@_02KHAMJCKP@Sl?$AA@ DB 'Sl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LDJANOJE@?$CFs?5expected?0?5got?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@LDJANOJE@?$CFs?5expected?0?5got?5?$CFs?$AA@ DB '%s expected, go'
	DB	't %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JGKNIAMH@light?5userdata?$AA@
CONST	SEGMENT
??_C@_0P@JGKNIAMH@light?5userdata?$AA@ DB 'light userdata', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LHMLJNCG@__name?$AA@
CONST	SEGMENT
??_C@_06LHMLJNCG@__name?$AA@ DB '__name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GOMKJOAH@bad?5argument?5?$CD?$CFd?5to?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@GOMKJOAH@bad?5argument?5?$CD?$CFd?5to?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@ DB 'b'
	DB	'ad argument #%d to ''%s'' (%s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LENGMNDF@calling?5?8?$CFs?8?5on?5bad?5self?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@LENGMNDF@calling?5?8?$CFs?8?5on?5bad?5self?5?$CI?$CFs?$CJ?$AA@ DB 'c'
	DB	'alling ''%s'' on bad self (%s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GABBCIBA@method?$AA@
CONST	SEGMENT
??_C@_06GABBCIBA@method?$AA@ DB 'method', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CHJGEHJL@bad?5argument?5?$CD?$CFd?5?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@CHJGEHJL@bad?5argument?5?$CD?$CFd?5?$CI?$CFs?$CJ?$AA@ DB 'bad a'
	DB	'rgument #%d (%s)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HEPAINJG@?6?7?$CI?4?4?4tail?5calls?4?4?4?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@HEPAINJG@?6?7?$CI?4?4?4tail?5calls?4?4?4?$CJ?$AA@ DB 0aH, 09H, '('
	DB	'...tail calls...)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJPPFNOH@?5in?5?$AA@
CONST	SEGMENT
??_C@_04GJPPFNOH@?5in?5?$AA@ DB ' in ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CDCAMCGK@?$CFd?3?$AA@
CONST	SEGMENT
??_C@_03CDCAMCGK@?$CFd?3?$AA@ DB '%d:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GEEEIDH@?6?7?$CFs?3?$AA@
CONST	SEGMENT
??_C@_05GEEEIDH@?6?7?$CFs?3?$AA@ DB 0aH, 09H, '%s:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DOIEKPJK@Slnt?$AA@
CONST	SEGMENT
??_C@_04DOIEKPJK@Slnt?$AA@ DB 'Slnt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLIPKFIA@?6?7?4?4?4?$AA@
CONST	SEGMENT
??_C@_05JLIPKFIA@?6?7?4?4?4?$AA@ DB 0aH, 09H, '...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CJHIJJAH@stack?5traceback?3?$AA@
CONST	SEGMENT
??_C@_0BB@CJHIJJAH@stack?5traceback?3?$AA@ DB 'stack traceback:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OJHNELPG@function?5?$DM?$CFs?3?$CFd?$DO?$AA@
CONST	SEGMENT
??_C@_0BB@OJHNELPG@function?5?$DM?$CFs?3?$CFd?$DO?$AA@ DB 'function <%s:%'
	DB	'd>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HEICADBI@main?5chunk?$AA@
CONST	SEGMENT
??_C@_0L@HEICADBI@main?5chunk?$AA@ DB 'main chunk', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JJBIELFA@?$CFs?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_07JJBIELFA@?$CFs?5?8?$CFs?8?$AA@ DB '%s ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EHCGJIOP@function?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0O@EHCGJIOP@function?5?8?$CFs?8?$AA@ DB 'function ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDAHKNHO@_G?4?$AA@
CONST	SEGMENT
??_C@_03DDAHKNHO@_G?4?$AA@ DB '_G.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PINPBNPB@_LOADED?$AA@
CONST	SEGMENT
??_C@_07PINPBNPB@_LOADED?$AA@ DB '_LOADED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01INIBCBCB@f?$AA@
CONST	SEGMENT
??_C@_01INIBCBCB@f?$AA@ DB 'f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$panic DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$l_alloc DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_findtable DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$skipcomment DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$skipBOM DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$errfile DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getF DD	040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newbox DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$boxgc DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$resizebox DD 061001H
	DD	083410H
	DD	0700c3210H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$interror DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tag_error DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$typeerror DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$lastlevel DD 021H
	DD	imagerel lastlevel
	DD	imagerel lastlevel+59
	DD	imagerel $unwind$lastlevel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$lastlevel DD 020021H
	DD	01a7400H
	DD	imagerel lastlevel
	DD	imagerel lastlevel+59
	DD	imagerel $unwind$lastlevel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$lastlevel DD 021H
	DD	imagerel lastlevel
	DD	imagerel lastlevel+59
	DD	imagerel $unwind$lastlevel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$lastlevel DD 021H
	DD	imagerel lastlevel+59
	DD	imagerel lastlevel+107
	DD	imagerel $chain$0$lastlevel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$lastlevel DD 020821H
	DD	0196408H
	DD	imagerel lastlevel+59
	DD	imagerel lastlevel+107
	DD	imagerel $chain$0$lastlevel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$lastlevel DD 020821H
	DD	01a7408H
	DD	imagerel lastlevel
	DD	imagerel lastlevel+59
	DD	imagerel $unwind$lastlevel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lastlevel DD 051f19H
	DD	01b340dH
	DD	016010dH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pushfuncname DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pushglobalfuncname DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$findfield DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_openlib DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_pushmodule DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$luaL_pushresult DD 021H
	DD	imagerel $LN8
	DD	imagerel $LN8+49
	DD	imagerel $unwind$luaL_pushresult
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$luaL_pushresult DD 020521H
	DD	077405H
	DD	imagerel $LN8
	DD	imagerel $LN8+49
	DD	imagerel $unwind$luaL_pushresult
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_pushresult DD 040a01H
	DD	08340aH
	DD	06006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_addvalue DD 081201H
	DD	0a5412H
	DD	093412H
	DD	0e00e3212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_addstring DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_addlstring DD 061401H
	DD	076414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_prepbuffsize DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$luaL_requiref DD 021H
	DD	imagerel $LN10
	DD	imagerel $LN10+10
	DD	imagerel $unwind$luaL_requiref
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$luaL_requiref DD 021H
	DD	imagerel $LN10+10
	DD	imagerel $LN10+62
	DD	imagerel $chain$1$luaL_requiref
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$luaL_requiref DD 020521H
	DD	083405H
	DD	imagerel $LN10+10
	DD	imagerel $LN10+62
	DD	imagerel $chain$1$luaL_requiref
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$luaL_requiref DD 040d21H
	DD	0ae40dH
	DD	095405H
	DD	imagerel $LN10
	DD	imagerel $LN10+10
	DD	imagerel $unwind$luaL_requiref
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_requiref DD 040a01H
	DD	0b640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_traceback DD 092419H
	DD	0160112H
	DD	0e009f00bH
	DD	07005d007H
	DD	050036004H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_getsubtable DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$luaL_setfuncs DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+58
	DD	imagerel $unwind$luaL_setfuncs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$luaL_setfuncs DD 060f21H
	DD	0af40fH
	DD	09740aH
	DD	083405H
	DD	imagerel $LN24
	DD	imagerel $LN24+58
	DD	imagerel $unwind$luaL_setfuncs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_setfuncs DD 040901H
	DD	0e0053209H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$luaL_gsub DD 020021H
	DD	04117400H
	DD	imagerel $LN54
	DD	imagerel $LN54+42
	DD	imagerel $unwind$luaL_gsub
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$luaL_gsub DD 040021H
	DD	040ee400H
	DD	04117400H
	DD	imagerel $LN54
	DD	imagerel $LN54+42
	DD	imagerel $unwind$luaL_gsub
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$luaL_gsub DD 0a6121H
	DD	04117461H
	DD	040df423H
	DD	040ee418H
	DD	040fd410H
	DD	0410c408H
	DD	imagerel $LN54
	DD	imagerel $LN54+42
	DD	imagerel $unwind$luaL_gsub
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_gsub DD 052a19H
	DD	04120119H
	DD	030036004H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	02050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_len DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_newstate DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_loadstring DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_loadbufferx DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$luaL_loadfilex DD 021H
	DD	imagerel $LN76
	DD	imagerel $LN76+90
	DD	imagerel $unwind$luaL_loadfilex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$luaL_loadfilex DD 060021H
	DD	04ad400H
	DD	04b7400H
	DD	0553400H
	DD	imagerel $LN76
	DD	imagerel $LN76+90
	DD	imagerel $unwind$luaL_loadfilex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$luaL_loadfilex DD 021H
	DD	imagerel $LN76
	DD	imagerel $LN76+90
	DD	imagerel $unwind$luaL_loadfilex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$luaL_loadfilex DD 061f21H
	DD	04ad41fH
	DD	04b7410H
	DD	0553408H
	DD	imagerel $LN76
	DD	imagerel $LN76+90
	DD	imagerel $unwind$luaL_loadfilex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_loadfilex DD 072919H
	DD	04c0118H
	DD	0e007f009H
	DD	06003c005H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0240H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$luaL_unref DD 021H
	DD	imagerel $LN6
	DD	imagerel $LN6+21
	DD	imagerel $unwind$luaL_unref
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$luaL_unref DD 020521H
	DD	067405H
	DD	imagerel $LN6
	DD	imagerel $LN6+21
	DD	imagerel $unwind$luaL_unref
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_unref DD 040f01H
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_ref DD 063b01H
	DD	06643bH
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_execresult DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_fileresult DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_checkoption DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_error DD 031501H
	DD	070114215H
	DD	03010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_where DD 031b19H
	DD	0160109H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_checkudata DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_testudata DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_setmetatable DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_newmetatable DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_checkany DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_checktype DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_checkstack DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_optinteger DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_checkinteger DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_optnumber DD 060f01H
	DD	02680fH
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_checknumber DD 061401H
	DD	026814H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_optlstring DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_checklstring DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_argerror DD 051d19H
	DD	018010bH
	DD	060037004H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_tolstring DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_callmeta DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_getmetafield DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaL_checkversion_ DD 081401H
	DD	026814H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT panic
_TEXT	SEGMENT
L$ = 48
panic	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 996
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 998
  00006	45 33 c0	 xor	 r8d, r8d
  00009	83 ca ff	 or	 edx, -1
  0000c	e8 00 00 00 00	 call	 lua_tolstring
  00011	48 8b d8	 mov	 rbx, rax
  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@EFOPIIKP@PANIC?3?5unprotected?5error?5in?5call@
  00021	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00025	4c 8b c3	 mov	 r8, rbx
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00034	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
; Line 999
  0003e	33 c0		 xor	 eax, eax
; Line 1000
  00040	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00044	5b		 pop	 rbx
  00045	c3		 ret	 0
panic	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT l_alloc
_TEXT	SEGMENT
ud$ = 48
ptr$ = 56
osize$ = 64
nsize$ = 72
l_alloc	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 985
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8b c2	 mov	 rax, rdx
; Line 987
  00007	4d 85 c9	 test	 r9, r9
  0000a	75 10		 jne	 SHORT $LN2@l_alloc
; Line 988
  0000c	48 8b ca	 mov	 rcx, rdx
  0000f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
; Line 989
  00015	33 c0		 xor	 eax, eax
; Line 993
  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
$LN2@l_alloc:
; Line 992
  0001c	49 8b d1	 mov	 rdx, r9
  0001f	48 8b c8	 mov	 rcx, rax
; Line 993
  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
; Line 992
  00026	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_realloc
l_alloc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT libsize
_TEXT	SEGMENT
l$ = 8
libsize	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 862
  00000	33 c0		 xor	 eax, eax
; Line 863
  00002	48 85 c9	 test	 rcx, rcx
  00005	74 0e		 je	 SHORT $LN10@libsize
$LL3@libsize:
  00007	48 83 39 00	 cmp	 QWORD PTR [rcx], 0
  0000b	74 08		 je	 SHORT $LN10@libsize
  0000d	ff c0		 inc	 eax
  0000f	48 83 c1 10	 add	 rcx, 16
  00013	75 f2		 jne	 SHORT $LL3@libsize
$LN10@libsize:
; Line 865
  00015	c3		 ret	 0
libsize	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_findtable
_TEXT	SEGMENT
L$ = 64
idx$ = 72
fname$ = 80
szhint$ = 88
luaL_findtable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 833
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00018	45 8b f1	 mov	 r14d, r9d
  0001b	49 8b f8	 mov	 rdi, r8
  0001e	48 8b f1	 mov	 rsi, rcx
; Line 835
  00021	85 d2		 test	 edx, edx
  00023	74 05		 je	 SHORT $LN20@luaL_findt
  00025	e8 00 00 00 00	 call	 lua_pushvalue
$LN20@luaL_findt:
  0002a	41 bf 01 00 00
	00		 mov	 r15d, 1
$LL7@luaL_findt:
; Line 837
  00030	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00035	48 8b cf	 mov	 rcx, rdi
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0003e	48 8b d8	 mov	 rbx, rax
; Line 838
  00041	48 85 c0	 test	 rax, rax
  00044	75 16		 jne	 SHORT $LN4@luaL_findt
  00046	48 83 cb ff	 or	 rbx, -1
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL19@luaL_findt:
  00050	48 ff c3	 inc	 rbx
  00053	80 3c 1f 00	 cmp	 BYTE PTR [rdi+rbx], 0
  00057	75 f7		 jne	 SHORT $LL19@luaL_findt
  00059	48 03 df	 add	 rbx, rdi
$LN4@luaL_findt:
; Line 839
  0005c	48 8b eb	 mov	 rbp, rbx
  0005f	48 8b d7	 mov	 rdx, rdi
  00062	48 8b ce	 mov	 rcx, rsi
  00065	48 2b ef	 sub	 rbp, rdi
  00068	4c 8b c5	 mov	 r8, rbp
  0006b	e8 00 00 00 00	 call	 lua_pushlstring
; Line 840
  00070	ba fe ff ff ff	 mov	 edx, -2
  00075	48 8b ce	 mov	 rcx, rsi
  00078	e8 00 00 00 00	 call	 lua_rawget
; Line 841
  0007d	48 8b ce	 mov	 rcx, rsi
  00080	85 c0		 test	 eax, eax
  00082	75 46		 jne	 SHORT $LN3@luaL_findt
  00084	8d 50 fe	 lea	 edx, QWORD PTR [rax-2]
  00087	e8 00 00 00 00	 call	 lua_settop
; Line 842
  0008c	80 3b 2e	 cmp	 BYTE PTR [rbx], 46	; 0000002eH
  0008f	45 8b c6	 mov	 r8d, r14d
  00092	45 0f 44 c7	 cmove	 r8d, r15d
  00096	33 d2		 xor	 edx, edx
  00098	48 8b ce	 mov	 rcx, rsi
  0009b	e8 00 00 00 00	 call	 lua_createtable
; Line 843
  000a0	4c 8b c5	 mov	 r8, rbp
  000a3	48 8b d7	 mov	 rdx, rdi
  000a6	48 8b ce	 mov	 rcx, rsi
  000a9	e8 00 00 00 00	 call	 lua_pushlstring
; Line 844
  000ae	ba fe ff ff ff	 mov	 edx, -2
  000b3	48 8b ce	 mov	 rcx, rsi
  000b6	e8 00 00 00 00	 call	 lua_pushvalue
; Line 845
  000bb	ba fc ff ff ff	 mov	 edx, -4
  000c0	48 8b ce	 mov	 rcx, rsi
  000c3	e8 00 00 00 00	 call	 lua_settable
  000c8	eb 0d		 jmp	 SHORT $LN1@luaL_findt
$LN3@luaL_findt:
; Line 847
  000ca	83 ca ff	 or	 edx, -1
  000cd	e8 00 00 00 00	 call	 lua_type
  000d2	83 f8 05	 cmp	 eax, 5
  000d5	75 2e		 jne	 SHORT $LN12@luaL_findt
$LN1@luaL_findt:
; Line 851
  000d7	41 83 c8 ff	 or	 r8d, -1
  000db	48 8b ce	 mov	 rcx, rsi
  000de	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  000e2	e8 00 00 00 00	 call	 lua_rotate
  000e7	ba fe ff ff ff	 mov	 edx, -2
  000ec	48 8b ce	 mov	 rcx, rsi
  000ef	e8 00 00 00 00	 call	 lua_settop
; Line 853
  000f4	80 3b 2e	 cmp	 BYTE PTR [rbx], 46	; 0000002eH
  000f7	48 8d 7b 01	 lea	 rdi, QWORD PTR [rbx+1]
  000fb	0f 84 2f ff ff
	ff		 je	 $LL7@luaL_findt
; Line 854
  00101	33 c0		 xor	 eax, eax
  00103	eb 10		 jmp	 SHORT $LN9@luaL_findt
$LN12@luaL_findt:
; Line 848
  00105	ba fd ff ff ff	 mov	 edx, -3
  0010a	48 8b ce	 mov	 rcx, rsi
  0010d	e8 00 00 00 00	 call	 lua_settop
; Line 849
  00112	48 8b c7	 mov	 rax, rdi
$LN9@luaL_findt:
; Line 855
  00115	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0011a	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0011f	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00124	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00128	41 5f		 pop	 r15
  0012a	41 5e		 pop	 r14
  0012c	5f		 pop	 rdi
  0012d	c3		 ret	 0
luaL_findtable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getS
_TEXT	SEGMENT
L$ = 8
ud$ = 16
size$ = 24
getS	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 734
  00000	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  00004	48 85 c0	 test	 rax, rax
  00007	75 01		 jne	 SHORT $LN1@getS
; Line 738
  00009	c3		 ret	 0
$LN1@getS:
; Line 735
  0000a	49 89 00	 mov	 QWORD PTR [r8], rax
; Line 737
  0000d	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00010	48 c7 42 08 00
	00 00 00	 mov	 QWORD PTR [rdx+8], 0
; Line 738
  00018	c3		 ret	 0
getS	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT skipcomment
_TEXT	SEGMENT
lf$ = 48
cp$ = 56
skipcomment PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 676
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f2	 mov	 rsi, rdx
  00012	48 8b d9	 mov	 rbx, rcx
; Line 677
  00015	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03PKPBNCAL@?o?$LL?$LP?$AA@
  0001c	c7 01 00 00 00
	00		 mov	 DWORD PTR [rcx], 0
$LL13@skipcommen:
  00022	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	74 2a		 je	 SHORT $LN9@skipcommen
  00033	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  00036	48 ff c7	 inc	 rdi
  00039	3b c8		 cmp	 ecx, eax
  0003b	75 20		 jne	 SHORT $LN9@skipcommen
  0003d	48 63 03	 movsxd	 rax, DWORD PTR [rbx]
  00040	88 4c 18 10	 mov	 BYTE PTR [rax+rbx+16], cl
  00044	ff 03		 inc	 DWORD PTR [rbx]
  00046	80 3f 00	 cmp	 BYTE PTR [rdi], 0
  00049	75 d7		 jne	 SHORT $LL13@skipcommen
  0004b	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0004f	c7 03 00 00 00
	00		 mov	 DWORD PTR [rbx], 0
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  0005b	8b c8		 mov	 ecx, eax
$LN9@skipcommen:
  0005d	89 0e		 mov	 DWORD PTR [rsi], ecx
; Line 678
  0005f	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00062	75 35		 jne	 SHORT $LN6@skipcommen
$LL5@skipcommen:
; Line 680
  00064	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
; Line 681
  0006e	83 f8 ff	 cmp	 eax, -1
  00071	74 05		 je	 SHORT $LN2@skipcommen
  00073	83 f8 0a	 cmp	 eax, 10
  00076	75 ec		 jne	 SHORT $LL5@skipcommen
$LN2@skipcommen:
; Line 682
  00078	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  00082	89 06		 mov	 DWORD PTR [rsi], eax
; Line 683
  00084	b8 01 00 00 00	 mov	 eax, 1
; Line 686
  00089	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00093	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00097	5f		 pop	 rdi
  00098	c3		 ret	 0
$LN6@skipcommen:
  00099	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a3	33 c0		 xor	 eax, eax
  000a5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
skipcomment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT skipBOM
_TEXT	SEGMENT
lf$ = 48
skipBOM	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 655
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx
; Line 656
  0000d	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03PKPBNCAL@?o?$LL?$LP?$AA@
; Line 658
  00014	c7 01 00 00 00
	00		 mov	 DWORD PTR [rcx], 0
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL5@skipBOM:
; Line 660
  00020	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
; Line 661
  0002a	83 f8 ff	 cmp	 eax, -1
  0002d	74 28		 je	 SHORT $LN1@skipBOM
  0002f	0f b6 0f	 movzx	 ecx, BYTE PTR [rdi]
  00032	48 ff c7	 inc	 rdi
  00035	3b c1		 cmp	 eax, ecx
  00037	75 1e		 jne	 SHORT $LN1@skipBOM
; Line 662
  00039	48 63 0b	 movsxd	 rcx, DWORD PTR [rbx]
  0003c	88 44 19 10	 mov	 BYTE PTR [rcx+rbx+16], al
  00040	ff 03		 inc	 DWORD PTR [rbx]
; Line 663
  00042	80 3f 00	 cmp	 BYTE PTR [rdi], 0
  00045	75 d9		 jne	 SHORT $LL5@skipBOM
; Line 665
  00047	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0004b	c7 03 00 00 00
	00		 mov	 DWORD PTR [rbx], 0
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
$LN1@skipBOM:
; Line 666
  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
skipBOM	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT errfile
_TEXT	SEGMENT
L$ = 64
what$ = 72
fnameindex$ = 80
errfile	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 646
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	41 8b f0	 mov	 esi, r8d
  00017	48 8b fa	 mov	 rdi, rdx
  0001a	48 8b e9	 mov	 rbp, rcx
; Line 647
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00023	8b 08		 mov	 ecx, DWORD PTR [rax]
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strerror
; Line 648
  0002b	45 33 c0	 xor	 r8d, r8d
  0002e	8b d6		 mov	 edx, esi
  00030	48 8b cd	 mov	 rcx, rbp
  00033	48 8b d8	 mov	 rbx, rax
  00036	e8 00 00 00 00	 call	 lua_tolstring
; Line 649
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@BJDGDOHH@cannot?5?$CFs?5?$CFs?3?5?$CFs?$AA@
  00042	4c 8b c7	 mov	 r8, rdi
  00045	4c 8d 48 01	 lea	 r9, QWORD PTR [rax+1]
  00049	48 8b cd	 mov	 rcx, rbp
  0004c	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00051	e8 00 00 00 00	 call	 lua_pushfstring
; Line 650
  00056	41 83 c8 ff	 or	 r8d, -1
  0005a	8b d6		 mov	 edx, esi
  0005c	48 8b cd	 mov	 rcx, rbp
  0005f	e8 00 00 00 00	 call	 lua_rotate
  00064	ba fe ff ff ff	 mov	 edx, -2
  00069	48 8b cd	 mov	 rcx, rbp
  0006c	e8 00 00 00 00	 call	 lua_settop
; Line 652
  00071	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00076	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0007b	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00080	b8 07 00 00 00	 mov	 eax, 7
  00085	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00089	5f		 pop	 rdi
  0008a	c3		 ret	 0
errfile	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getF
_TEXT	SEGMENT
L$ = 48
ud$ = 56
size$ = 64
getF	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 628
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 631
  0000a	48 63 02	 movsxd	 rax, DWORD PTR [rdx]
  0000d	49 8b f8	 mov	 rdi, r8
  00010	48 8b da	 mov	 rbx, rdx
  00013	85 c0		 test	 eax, eax
  00015	7e 18		 jle	 SHORT $LN3@getF
; Line 632
  00017	49 89 00	 mov	 QWORD PTR [r8], rax
; Line 633
  0001a	c7 02 00 00 00
	00		 mov	 DWORD PTR [rdx], 0
; Line 642
  00020	48 8d 42 10	 lea	 rax, QWORD PTR [rdx+16]
; Line 643
  00024	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
$LN3@getF:
; Line 639
  0002f	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_feof
  00039	85 c0		 test	 eax, eax
  0003b	74 0d		 je	 SHORT $LN1@getF
  0003d	33 c0		 xor	 eax, eax
; Line 643
  0003f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
$LN1@getF:
; Line 640
  0004a	4c 8b 4b 08	 mov	 r9, QWORD PTR [rbx+8]
  0004e	48 8d 4b 10	 lea	 rcx, QWORD PTR [rbx+16]
  00052	ba 01 00 00 00	 mov	 edx, 1
  00057	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  00063	48 89 07	 mov	 QWORD PTR [rdi], rax
; Line 642
  00066	48 8d 43 10	 lea	 rax, QWORD PTR [rbx+16]
; Line 643
  0006a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
getF	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT newbox
_TEXT	SEGMENT
L$ = 48
newsize$ = 56
newbox	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 468
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
; Line 469
  0000d	ba 10 00 00 00	 mov	 edx, 16
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 lua_newuserdata
; Line 470
  0001a	33 c9		 xor	 ecx, ecx
; Line 472
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OAFBFKCG@LUABOX?$AA@
  00023	48 89 08	 mov	 QWORD PTR [rax], rcx
  00026	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0002a	48 8b cb	 mov	 rcx, rbx
  0002d	e8 00 00 00 00	 call	 luaL_newmetatable
  00032	85 c0		 test	 eax, eax
  00034	74 26		 je	 SHORT $LN1@newbox
; Line 473
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:boxgc
  0003d	45 33 c0	 xor	 r8d, r8d
  00040	48 8b cb	 mov	 rcx, rbx
  00043	e8 00 00 00 00	 call	 lua_pushcclosure
; Line 474
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04BDLIKKMN@__gc?$AA@
  0004f	ba fe ff ff ff	 mov	 edx, -2
  00054	48 8b cb	 mov	 rcx, rbx
  00057	e8 00 00 00 00	 call	 lua_setfield
$LN1@newbox:
; Line 476
  0005c	ba fe ff ff ff	 mov	 edx, -2
  00061	48 8b cb	 mov	 rcx, rbx
  00064	e8 00 00 00 00	 call	 lua_setmetatable
; Line 477
  00069	4c 8b c7	 mov	 r8, rdi
  0006c	83 ca ff	 or	 edx, -1
  0006f	48 8b cb	 mov	 rcx, rbx
; Line 478
  00072	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
; Line 477
  0007c	e9 00 00 00 00	 jmp	 resizebox
newbox	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT boxgc
_TEXT	SEGMENT
L$ = 48
ud$1 = 56
boxgc	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 462
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 463
  0000a	48 8d 54 24 38	 lea	 rdx, QWORD PTR ud$1[rsp]
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	e8 00 00 00 00	 call	 lua_getallocf
  00017	ba 01 00 00 00	 mov	 edx, 1
  0001c	48 8b cb	 mov	 rcx, rbx
  0001f	48 8b f8	 mov	 rdi, rax
  00022	e8 00 00 00 00	 call	 lua_touserdata
  00027	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ud$1[rsp]
  0002c	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00030	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00033	45 33 c9	 xor	 r9d, r9d
  00036	48 8b d8	 mov	 rbx, rax
  00039	ff d7		 call	 rdi
  0003b	48 c7 43 08 00
	00 00 00	 mov	 QWORD PTR [rbx+8], 0
  00043	48 89 03	 mov	 QWORD PTR [rbx], rax
; Line 465
  00046	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004b	33 c0		 xor	 eax, eax
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
boxgc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT resizebox
_TEXT	SEGMENT
L$ = 64
idx$ = 72
ud$ = 80
newsize$ = 80
resizebox PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 447
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	55		 push	 rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00010	8b fa		 mov	 edi, edx
; Line 449
  00012	48 8d 54 24 50	 lea	 rdx, QWORD PTR ud$[rsp]
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b e9	 mov	 rbp, rcx
  0001d	e8 00 00 00 00	 call	 lua_getallocf
; Line 450
  00022	8b d7		 mov	 edx, edi
  00024	48 8b cd	 mov	 rcx, rbp
  00027	48 8b d8	 mov	 rbx, rax
  0002a	e8 00 00 00 00	 call	 lua_touserdata
; Line 451
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ud$[rsp]
  00034	4c 8b ce	 mov	 r9, rsi
  00037	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  0003b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0003e	48 8b f8	 mov	 rdi, rax
  00041	ff d3		 call	 rbx
  00043	48 8b d8	 mov	 rbx, rax
; Line 452
  00046	48 85 c0	 test	 rax, rax
  00049	75 23		 jne	 SHORT $LN1@resizebox
  0004b	48 85 f6	 test	 rsi, rsi
  0004e	74 1e		 je	 SHORT $LN1@resizebox
; Line 453
  00050	8b 54 24 48	 mov	 edx, DWORD PTR idx$[rsp]
  00054	45 33 c0	 xor	 r8d, r8d
  00057	48 8b cd	 mov	 rcx, rbp
  0005a	e8 00 00 00 00	 call	 resizebox
; Line 454
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@KEENHMCA@not?5enough?5memory?5for?5buffer?5all@
  00066	48 8b cd	 mov	 rcx, rbp
  00069	e8 00 00 00 00	 call	 luaL_error
$LN1@resizebox:
; Line 456
  0006e	48 89 1f	 mov	 QWORD PTR [rdi], rbx
; Line 458
  00071	48 8b c3	 mov	 rax, rbx
; Line 459
  00074	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00079	48 89 77 08	 mov	 QWORD PTR [rdi+8], rsi
  0007d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00081	5f		 pop	 rdi
  00082	5e		 pop	 rsi
  00083	5d		 pop	 rbp
  00084	c3		 ret	 0
resizebox ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT interror
_TEXT	SEGMENT
L$ = 48
arg$ = 56
interror PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 408
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b fa		 mov	 edi, edx
  0000c	48 8b d9	 mov	 rbx, rcx
; Line 409
  0000f	e8 00 00 00 00	 call	 lua_isnumber
; Line 410
  00014	48 8b cb	 mov	 rcx, rbx
  00017	85 c0		 test	 eax, eax
  00019	74 18		 je	 SHORT $LN2@interror
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CF@GPCMCKGL@number?5has?5no?5integer?5representa@
  00022	8b d7		 mov	 edx, edi
; Line 413
  00024	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
; Line 410
  0002e	e9 00 00 00 00	 jmp	 luaL_argerror
$LN2@interror:
; Line 412
  00033	ba 03 00 00 00	 mov	 edx, 3
  00038	e8 00 00 00 00	 call	 lua_typename
  0003d	8b d7		 mov	 edx, edi
  0003f	48 8b cb	 mov	 rcx, rbx
  00042	4c 8b c0	 mov	 r8, rax
; Line 413
  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5f		 pop	 rdi
; Line 412
  0004f	e9 00 00 00 00	 jmp	 typeerror
interror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT tag_error
_TEXT	SEGMENT
L$ = 48
arg$ = 56
tag$ = 64
tag_error PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 196
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b da		 mov	 ebx, edx
; Line 197
  0000c	41 8b d0	 mov	 edx, r8d
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 lua_typename
  00017	8b d3		 mov	 edx, ebx
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	4c 8b c0	 mov	 r8, rax
; Line 198
  0001f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5f		 pop	 rdi
; Line 197
  00029	e9 00 00 00 00	 jmp	 typeerror
tag_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT typeerror
_TEXT	SEGMENT
L$ = 48
arg$ = 56
tname$ = 64
typeerror PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 182
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b e8	 mov	 rbp, r8
  00017	8b fa		 mov	 edi, edx
  00019	48 8b d9	 mov	 rbx, rcx
; Line 185
  0001c	e8 00 00 00 00	 call	 lua_getmetatable
  00021	85 c0		 test	 eax, eax
  00023	74 2d		 je	 SHORT $LN4@typeerror
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06LHMLJNCG@__name?$AA@
  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	e8 00 00 00 00	 call	 lua_pushstring
  00034	ba fe ff ff ff	 mov	 edx, -2
  00039	48 8b cb	 mov	 rcx, rbx
  0003c	e8 00 00 00 00	 call	 lua_rawget
  00041	48 8b cb	 mov	 rcx, rbx
  00044	8b f0		 mov	 esi, eax
  00046	85 c0		 test	 eax, eax
  00048	75 20		 jne	 SHORT $LN8@typeerror
  0004a	8d 50 fd	 lea	 edx, QWORD PTR [rax-3]
  0004d	e8 00 00 00 00	 call	 lua_settop
$LN4@typeerror:
; Line 187
  00052	8b d7		 mov	 edx, edi
  00054	48 8b cb	 mov	 rcx, rbx
  00057	e8 00 00 00 00	 call	 lua_type
  0005c	83 f8 02	 cmp	 eax, 2
  0005f	75 38		 jne	 SHORT $LN2@typeerror
; Line 188
  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0P@JGKNIAMH@light?5userdata?$AA@
; Line 189
  00068	eb 43		 jmp	 SHORT $LN1@typeerror
; Line 185
$LN8@typeerror:
  0006a	41 83 c8 ff	 or	 r8d, -1
  0006e	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  00072	e8 00 00 00 00	 call	 lua_rotate
  00077	ba fe ff ff ff	 mov	 edx, -2
  0007c	48 8b cb	 mov	 rcx, rbx
  0007f	e8 00 00 00 00	 call	 lua_settop
  00084	83 fe 04	 cmp	 esi, 4
  00087	75 c9		 jne	 SHORT $LN4@typeerror
; Line 186
  00089	45 33 c0	 xor	 r8d, r8d
  0008c	83 ca ff	 or	 edx, -1
  0008f	48 8b cb	 mov	 rcx, rbx
  00092	e8 00 00 00 00	 call	 lua_tolstring
  00097	eb 14		 jmp	 SHORT $LN1@typeerror
$LN2@typeerror:
; Line 190
  00099	8b d7		 mov	 edx, edi
  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	e8 00 00 00 00	 call	 lua_type
  000a3	48 8b cb	 mov	 rcx, rbx
  000a6	8b d0		 mov	 edx, eax
  000a8	e8 00 00 00 00	 call	 lua_typename
$LN1@typeerror:
; Line 191
  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LDJANOJE@?$CFs?5expected?0?5got?5?$CFs?$AA@
  000b4	4c 8b c8	 mov	 r9, rax
  000b7	4c 8b c5	 mov	 r8, rbp
  000ba	48 8b cb	 mov	 rcx, rbx
  000bd	e8 00 00 00 00	 call	 lua_pushfstring
; Line 192
  000c2	8b d7		 mov	 edx, edi
  000c4	48 8b cb	 mov	 rcx, rbx
  000c7	4c 8b c0	 mov	 r8, rax
; Line 193
  000ca	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000cf	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000d4	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000d9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000dd	5f		 pop	 rdi
; Line 192
  000de	e9 00 00 00 00	 jmp	 luaL_argerror
typeerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT lastlevel
_TEXT	SEGMENT
ar$ = 32
__$ArrayPad$ = 160
L$ = 192
lastlevel PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 110
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 112
  0001f	bb 01 00 00 00	 mov	 ebx, 1
; Line 114
  00024	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  00029	48 8b e9	 mov	 rbp, rcx
  0002c	8b d3		 mov	 edx, ebx
  0002e	e8 00 00 00 00	 call	 lua_getstack
  00033	85 c0		 test	 eax, eax
  00035	0f 84 a6 00 00
	00		 je	 $LN17@lastlevel
  0003b	48 89 bc 24 d0
	00 00 00	 mov	 QWORD PTR [rsp+208], rdi
  00043	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL6@lastlevel:
  00050	8b fb		 mov	 edi, ebx
  00052	03 db		 add	 ebx, ebx
  00054	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  00059	8b d3		 mov	 edx, ebx
  0005b	48 8b cd	 mov	 rcx, rbp
  0005e	e8 00 00 00 00	 call	 lua_getstack
  00063	85 c0		 test	 eax, eax
  00065	75 e9		 jne	 SHORT $LL6@lastlevel
; Line 116
  00067	3b fb		 cmp	 edi, ebx
  00069	7d 71		 jge	 SHORT $LN16@lastlevel
  0006b	48 89 b4 24 c8
	00 00 00	 mov	 QWORD PTR [rsp+200], rsi
  00073	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL4@lastlevel:
; Line 117
  00080	8d 04 3b	 lea	 eax, DWORD PTR [rbx+rdi]
; Line 118
  00083	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  00088	48 8b cd	 mov	 rcx, rbp
  0008b	99		 cdq
  0008c	2b c2		 sub	 eax, edx
  0008e	d1 f8		 sar	 eax, 1
  00090	8b d0		 mov	 edx, eax
  00092	8b f0		 mov	 esi, eax
  00094	e8 00 00 00 00	 call	 lua_getstack
  00099	85 c0		 test	 eax, eax
  0009b	74 05		 je	 SHORT $LN2@lastlevel
  0009d	8d 7e 01	 lea	 edi, DWORD PTR [rsi+1]
  000a0	eb 02		 jmp	 SHORT $LN1@lastlevel
$LN2@lastlevel:
; Line 119
  000a2	8b de		 mov	 ebx, esi
$LN1@lastlevel:
; Line 116
  000a4	3b fb		 cmp	 edi, ebx
  000a6	7c d8		 jl	 SHORT $LL4@lastlevel
; Line 121
  000a8	48 8b b4 24 c8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+200]
  000b0	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
$LN18@lastlevel:
  000b3	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+208]
$LN3@lastlevel:
; Line 122
  000bb	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000c3	48 33 cc	 xor	 rcx, rsp
  000c6	e8 00 00 00 00	 call	 __security_check_cookie
  000cb	48 8b 9c 24 d8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+216]
  000d3	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000da	5d		 pop	 rbp
  000db	c3		 ret	 0
$LN16@lastlevel:
; Line 121
  000dc	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  000df	eb d2		 jmp	 SHORT $LN18@lastlevel
$LN17@lastlevel:
  000e1	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  000e4	eb d5		 jmp	 SHORT $LN3@lastlevel
lastlevel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT pushfuncname
_TEXT	SEGMENT
L$ = 48
ar$ = 56
pushfuncname PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 94
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx
; Line 95
  00010	e8 00 00 00 00	 call	 pushglobalfuncname
  00015	85 c0		 test	 eax, eax
  00017	74 47		 je	 SHORT $LN8@pushfuncna
; Line 96
  00019	45 33 c0	 xor	 r8d, r8d
  0001c	83 ca ff	 or	 edx, -1
  0001f	48 8b cb	 mov	 rcx, rbx
  00022	e8 00 00 00 00	 call	 lua_tolstring
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@EHCGJIOP@function?5?8?$CFs?8?$AA@
  0002e	48 8b cb	 mov	 rcx, rbx
  00031	4c 8b c0	 mov	 r8, rax
  00034	e8 00 00 00 00	 call	 lua_pushfstring
; Line 97
  00039	41 83 c8 ff	 or	 r8d, -1
  0003d	48 8b cb	 mov	 rcx, rbx
  00040	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  00044	e8 00 00 00 00	 call	 lua_rotate
  00049	ba fe ff ff ff	 mov	 edx, -2
  0004e	48 8b cb	 mov	 rcx, rbx
; Line 107
  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5f		 pop	 rdi
; Line 97
  0005b	e9 00 00 00 00	 jmp	 lua_settop
$LN8@pushfuncna:
; Line 99
  00060	4c 8b 47 10	 mov	 r8, QWORD PTR [rdi+16]
  00064	41 80 38 00	 cmp	 BYTE PTR [r8], 0
  00068	74 1d		 je	 SHORT $LN6@pushfuncna
; Line 100
  0006a	4c 8b 4f 08	 mov	 r9, QWORD PTR [rdi+8]
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JJBIELFA@?$CFs?5?8?$CFs?8?$AA@
  00075	48 8b cb	 mov	 rcx, rbx
; Line 107
  00078	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00081	5f		 pop	 rdi
; Line 100
  00082	e9 00 00 00 00	 jmp	 lua_pushfstring
$LN6@pushfuncna:
; Line 101
  00087	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  0008b	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0008e	80 f9 6d	 cmp	 cl, 109			; 0000006dH
  00091	75 19		 jne	 SHORT $LN4@pushfuncna
; Line 102
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HEICADBI@main?5chunk?$AA@
; Line 106
  0009a	48 8b cb	 mov	 rcx, rbx
; Line 107
  0009d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a6	5f		 pop	 rdi
; Line 106
  000a7	e9 00 00 00 00	 jmp	 lua_pushstring
$LN4@pushfuncna:
; Line 103
  000ac	80 f9 43	 cmp	 cl, 67			; 00000043H
  000af	74 21		 je	 SHORT $LN2@pushfuncna
; Line 104
  000b1	44 8b 4f 2c	 mov	 r9d, DWORD PTR [rdi+44]
  000b5	4c 8d 47 38	 lea	 r8, QWORD PTR [rdi+56]
  000b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@OJHNELPG@function?5?$DM?$CFs?3?$CFd?$DO?$AA@
  000c0	48 8b cb	 mov	 rcx, rbx
; Line 107
  000c3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cc	5f		 pop	 rdi
; Line 104
  000cd	e9 00 00 00 00	 jmp	 lua_pushfstring
$LN2@pushfuncna:
; Line 106
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000d9	48 8b cb	 mov	 rcx, rbx
; Line 107
  000dc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e5	5f		 pop	 rdi
; Line 106
  000e6	e9 00 00 00 00	 jmp	 lua_pushstring
pushfuncname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT pushglobalfuncname
_TEXT	SEGMENT
L$ = 48
ar$ = 56
pushglobalfuncname PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 73
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b da	 mov	 rbx, rdx
  00017	48 8b f9	 mov	 rdi, rcx
; Line 74
  0001a	e8 00 00 00 00	 call	 lua_gettop
; Line 75
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01INIBCBCB@f?$AA@
  00026	4c 8b c3	 mov	 r8, rbx
  00029	48 8b cf	 mov	 rcx, rdi
  0002c	8b f0		 mov	 esi, eax
  0002e	e8 00 00 00 00	 call	 lua_getinfo
; Line 76
  00033	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07PINPBNPB@_LOADED?$AA@
  0003a	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  0003f	48 8b cf	 mov	 rcx, rdi
  00042	e8 00 00 00 00	 call	 lua_getfield
; Line 77
  00047	8d 56 01	 lea	 edx, DWORD PTR [rsi+1]
  0004a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00050	48 8b cf	 mov	 rcx, rdi
  00053	e8 00 00 00 00	 call	 findfield
; Line 78
  00058	48 8b cf	 mov	 rcx, rdi
  0005b	85 c0		 test	 eax, eax
  0005d	74 74		 je	 SHORT $LN3@pushglobal
  0005f	45 33 c0	 xor	 r8d, r8d
  00062	83 ca ff	 or	 edx, -1
  00065	e8 00 00 00 00	 call	 lua_tolstring
; Line 79
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DDAHKNHO@_G?4?$AA@
  00071	41 b8 03 00 00
	00		 mov	 r8d, 3
  00077	48 8b c8	 mov	 rcx, rax
  0007a	48 8b d8	 mov	 rbx, rax
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncmp
  00083	85 c0		 test	 eax, eax
  00085	75 29		 jne	 SHORT $LN2@pushglobal
; Line 80
  00087	48 8d 53 03	 lea	 rdx, QWORD PTR [rbx+3]
  0008b	48 8b cf	 mov	 rcx, rdi
  0008e	e8 00 00 00 00	 call	 lua_pushstring
; Line 81
  00093	41 83 c8 ff	 or	 r8d, -1
  00097	48 8b cf	 mov	 rcx, rdi
  0009a	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  0009e	e8 00 00 00 00	 call	 lua_rotate
  000a3	ba fe ff ff ff	 mov	 edx, -2
  000a8	48 8b cf	 mov	 rcx, rdi
  000ab	e8 00 00 00 00	 call	 lua_settop
$LN2@pushglobal:
; Line 83
  000b0	44 8d 46 01	 lea	 r8d, DWORD PTR [rsi+1]
  000b4	83 ca ff	 or	 edx, -1
  000b7	48 8b cf	 mov	 rcx, rdi
  000ba	e8 00 00 00 00	 call	 lua_copy
; Line 84
  000bf	ba fd ff ff ff	 mov	 edx, -3
  000c4	48 8b cf	 mov	 rcx, rdi
  000c7	e8 00 00 00 00	 call	 lua_settop
; Line 85
  000cc	b8 01 00 00 00	 mov	 eax, 1
  000d1	eb 09		 jmp	 SHORT $LN1@pushglobal
$LN3@pushglobal:
; Line 88
  000d3	8b d6		 mov	 edx, esi
  000d5	e8 00 00 00 00	 call	 lua_settop
; Line 89
  000da	33 c0		 xor	 eax, eax
$LN1@pushglobal:
; Line 91
  000dc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e1	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000e6	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000eb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ef	5f		 pop	 rdi
  000f0	c3		 ret	 0
pushglobalfuncname ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT findfield
_TEXT	SEGMENT
L$ = 48
objidx$ = 56
level$ = 64
findfield PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 45
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f0	 mov	 esi, r8d
  00012	8b fa		 mov	 edi, edx
  00014	48 8b d9	 mov	 rbx, rcx
; Line 46
  00017	45 85 c0	 test	 r8d, r8d
  0001a	74 7e		 je	 SHORT $LN7@findfield
  0001c	83 ca ff	 or	 edx, -1
  0001f	e8 00 00 00 00	 call	 lua_type
  00024	83 f8 05	 cmp	 eax, 5
  00027	75 71		 jne	 SHORT $LN7@findfield
; Line 48
  00029	48 8b cb	 mov	 rcx, rbx
  0002c	e8 00 00 00 00	 call	 lua_pushnil
; Line 49
  00031	ba fe ff ff ff	 mov	 edx, -2
  00036	48 8b cb	 mov	 rcx, rbx
  00039	e8 00 00 00 00	 call	 lua_next
  0003e	85 c0		 test	 eax, eax
  00040	74 58		 je	 SHORT $LN7@findfield
$LL6@findfield:
; Line 50
  00042	ba fe ff ff ff	 mov	 edx, -2
  00047	48 8b cb	 mov	 rcx, rbx
  0004a	e8 00 00 00 00	 call	 lua_type
  0004f	83 f8 04	 cmp	 eax, 4
  00052	75 28		 jne	 SHORT $LN1@findfield
; Line 51
  00054	41 83 c8 ff	 or	 r8d, -1
  00058	8b d7		 mov	 edx, edi
  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	e8 00 00 00 00	 call	 lua_rawequal
; Line 55
  00062	48 8b cb	 mov	 rcx, rbx
  00065	85 c0		 test	 eax, eax
  00067	0f 85 9e 00 00
	00		 jne	 $LN12@findfield
  0006d	44 8d 46 ff	 lea	 r8d, DWORD PTR [rsi-1]
  00071	8b d7		 mov	 edx, edi
  00073	e8 00 00 00 00	 call	 findfield
  00078	85 c0		 test	 eax, eax
  0007a	75 30		 jne	 SHORT $LN13@findfield
$LN1@findfield:
; Line 63
  0007c	ba fe ff ff ff	 mov	 edx, -2
  00081	48 8b cb	 mov	 rcx, rbx
  00084	e8 00 00 00 00	 call	 lua_settop
  00089	ba fe ff ff ff	 mov	 edx, -2
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	e8 00 00 00 00	 call	 lua_next
  00096	85 c0		 test	 eax, eax
  00098	75 a8		 jne	 SHORT $LL6@findfield
$LN7@findfield:
; Line 47
  0009a	33 c0		 xor	 eax, eax
; Line 66
  0009c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a1	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
$LN13@findfield:
; Line 56
  000ac	41 83 c8 ff	 or	 r8d, -1
  000b0	48 8b cb	 mov	 rcx, rbx
  000b3	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  000b7	e8 00 00 00 00	 call	 lua_rotate
  000bc	ba fe ff ff ff	 mov	 edx, -2
  000c1	48 8b cb	 mov	 rcx, rbx
  000c4	e8 00 00 00 00	 call	 lua_settop
; Line 57
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  000d0	48 8b cb	 mov	 rcx, rbx
  000d3	e8 00 00 00 00	 call	 lua_pushstring
; Line 58
  000d8	ba fe ff ff ff	 mov	 edx, -2
  000dd	48 8b cb	 mov	 rcx, rbx
  000e0	44 8d 42 03	 lea	 r8d, QWORD PTR [rdx+3]
  000e4	e8 00 00 00 00	 call	 lua_rotate
; Line 59
  000e9	ba 03 00 00 00	 mov	 edx, 3
  000ee	48 8b cb	 mov	 rcx, rbx
  000f1	e8 00 00 00 00	 call	 lua_concat
; Line 60
  000f6	b8 01 00 00 00	 mov	 eax, 1
; Line 66
  000fb	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00100	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00105	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00109	5f		 pop	 rdi
  0010a	c3		 ret	 0
$LN12@findfield:
; Line 52
  0010b	ba fe ff ff ff	 mov	 edx, -2
  00110	e8 00 00 00 00	 call	 lua_settop
; Line 66
  00115	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0011a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0011f	b8 01 00 00 00	 mov	 eax, 1
  00124	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00128	5f		 pop	 rdi
  00129	c3		 ret	 0
findfield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_openlib
_TEXT	SEGMENT
L$ = 48
libname$ = 56
l$ = 64
nup$ = 72
luaL_openlib PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 891
$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	41 8b e9	 mov	 ebp, r9d
  0001d	49 8b f0	 mov	 rsi, r8
  00020	4c 8b f2	 mov	 r14, rdx
  00023	48 8b d9	 mov	 rbx, rcx
; Line 892
  00026	e8 00 00 00 00	 call	 lua_version
  0002b	33 c9		 xor	 ecx, ecx
  0002d	48 8b f8	 mov	 rdi, rax
  00030	e8 00 00 00 00	 call	 lua_version
  00035	48 3b f8	 cmp	 rdi, rax
  00038	74 11		 je	 SHORT $LN8@luaL_openl
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@DLNLJHN@multiple?5Lua?5VMs?5detected?$AA@
  00041	48 8b cb	 mov	 rcx, rbx
  00044	e8 00 00 00 00	 call	 luaL_error
  00049	eb 2d		 jmp	 SHORT $LN6@luaL_openl
$LN8@luaL_openl:
  0004b	f2 0f 10 1f	 movsdx	 xmm3, QWORD PTR [rdi]
  0004f	f2 0f 10 15 00
	00 00 00	 movsdx	 xmm2, QWORD PTR __real@405bc00000000000
  00057	66 0f 2e da	 ucomisd xmm3, xmm2
  0005b	7a 02		 jp	 SHORT $LN21@luaL_openl
  0005d	74 19		 je	 SHORT $LN6@luaL_openl
$LN21@luaL_openl:
  0005f	66 49 0f 7e d9	 movd	 r9, xmm3
  00064	66 49 0f 7e d0	 movd	 r8, xmm2
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@EDLDPMHE@version?5mismatch?3?5app?4?5needs?5?$CFf?0@
  00070	48 8b cb	 mov	 rcx, rbx
  00073	e8 00 00 00 00	 call	 luaL_error
$LN6@luaL_openl:
; Line 893
  00078	83 cf ff	 or	 edi, -1
  0007b	4d 85 f6	 test	 r14, r14
  0007e	74 3c		 je	 SHORT $LN3@luaL_openl
; Line 894
  00080	45 33 c0	 xor	 r8d, r8d
  00083	48 8b c6	 mov	 rax, rsi
  00086	48 85 f6	 test	 rsi, rsi
  00089	74 14		 je	 SHORT $LN22@luaL_openl
  0008b	0f 1f 44 00 00	 npad	 5
$LL14@luaL_openl:
  00090	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00094	74 09		 je	 SHORT $LN22@luaL_openl
  00096	41 ff c0	 inc	 r8d
  00099	48 83 c0 10	 add	 rax, 16
  0009d	75 f1		 jne	 SHORT $LL14@luaL_openl
$LN22@luaL_openl:
  0009f	49 8b d6	 mov	 rdx, r14
  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	e8 00 00 00 00	 call	 luaL_pushmodule
; Line 895
  000aa	8b d7		 mov	 edx, edi
  000ac	41 b8 01 00 00
	00		 mov	 r8d, 1
  000b2	2b d5		 sub	 edx, ebp
  000b4	48 8b cb	 mov	 rcx, rbx
  000b7	e8 00 00 00 00	 call	 lua_rotate
$LN3@luaL_openl:
; Line 898
  000bc	48 8b cb	 mov	 rcx, rbx
  000bf	48 85 f6	 test	 rsi, rsi
  000c2	74 0d		 je	 SHORT $LN2@luaL_openl
  000c4	44 8b c5	 mov	 r8d, ebp
  000c7	48 8b d6	 mov	 rdx, rsi
  000ca	e8 00 00 00 00	 call	 luaL_setfuncs
; Line 899
  000cf	eb 09		 jmp	 SHORT $LN1@luaL_openl
$LN2@luaL_openl:
; Line 900
  000d1	2b fd		 sub	 edi, ebp
  000d3	8b d7		 mov	 edx, edi
  000d5	e8 00 00 00 00	 call	 lua_settop
$LN1@luaL_openl:
; Line 901
  000da	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000df	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000e4	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000e9	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000ee	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f2	41 5e		 pop	 r14
  000f4	c3		 ret	 0
luaL_openlib ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_pushmodule
_TEXT	SEGMENT
L$ = 48
modname$ = 56
sizehint$ = 64
luaL_pushmodule PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 875
$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f0	 mov	 esi, r8d
  00012	48 8b fa	 mov	 rdi, rdx
; Line 876
  00015	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07PINPBNPB@_LOADED?$AA@
  0001c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00022	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00027	48 8b d9	 mov	 rbx, rcx
  0002a	e8 00 00 00 00	 call	 luaL_findtable
; Line 877
  0002f	4c 8b c7	 mov	 r8, rdi
  00032	83 ca ff	 or	 edx, -1
  00035	48 8b cb	 mov	 rcx, rbx
  00038	e8 00 00 00 00	 call	 lua_getfield
  0003d	83 f8 05	 cmp	 eax, 5
  00040	74 62		 je	 SHORT $LN2@luaL_pushm
; Line 878
  00042	ba fe ff ff ff	 mov	 edx, -2
  00047	48 8b cb	 mov	 rcx, rbx
  0004a	e8 00 00 00 00	 call	 lua_settop
; Line 880
  0004f	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00054	41 b8 02 00 00
	00		 mov	 r8d, 2
  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	e8 00 00 00 00	 call	 lua_rawgeti
; Line 881
  00062	44 8b ce	 mov	 r9d, esi
  00065	4c 8b c7	 mov	 r8, rdi
  00068	33 d2		 xor	 edx, edx
  0006a	48 8b cb	 mov	 rcx, rbx
  0006d	e8 00 00 00 00	 call	 luaL_findtable
  00072	48 85 c0	 test	 rax, rax
  00075	74 12		 je	 SHORT $LN1@luaL_pushm
; Line 882
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@CBJIAGLF@name?5conflict?5for?5module?5?8?$CFs?8?$AA@
  0007e	4c 8b c7	 mov	 r8, rdi
  00081	48 8b cb	 mov	 rcx, rbx
  00084	e8 00 00 00 00	 call	 luaL_error
$LN1@luaL_pushm:
; Line 883
  00089	83 ca ff	 or	 edx, -1
  0008c	48 8b cb	 mov	 rcx, rbx
  0008f	e8 00 00 00 00	 call	 lua_pushvalue
; Line 884
  00094	4c 8b c7	 mov	 r8, rdi
  00097	ba fd ff ff ff	 mov	 edx, -3
  0009c	48 8b cb	 mov	 rcx, rbx
  0009f	e8 00 00 00 00	 call	 lua_setfield
$LN2@luaL_pushm:
; Line 886
  000a4	41 83 c8 ff	 or	 r8d, -1
  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  000af	e8 00 00 00 00	 call	 lua_rotate
  000b4	ba fe ff ff ff	 mov	 edx, -2
  000b9	48 8b cb	 mov	 rcx, rbx
; Line 887
  000bc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c1	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ca	5f		 pop	 rdi
; Line 886
  000cb	e9 00 00 00 00	 jmp	 lua_settop
luaL_pushmodule ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_buffinitsize
_TEXT	SEGMENT
L$ = 8
B$ = 16
sz$ = 24
luaL_buffinitsize PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 564
  00000	48 8d 42 20	 lea	 rax, QWORD PTR [rdx+32]
  00004	4c 8b ca	 mov	 r9, rdx
  00007	48 89 4a 18	 mov	 QWORD PTR [rdx+24], rcx
  0000b	48 c7 42 10 00
	00 00 00	 mov	 QWORD PTR [rdx+16], 0
  00013	48 c7 42 08 00
	20 00 00	 mov	 QWORD PTR [rdx+8], 8192	; 00002000H
  0001b	48 89 02	 mov	 QWORD PTR [rdx], rax
; Line 565
  0001e	49 8b d0	 mov	 rdx, r8
  00021	49 8b c9	 mov	 rcx, r9
  00024	e9 00 00 00 00	 jmp	 luaL_prepbuffsize
luaL_buffinitsize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_pushresultsize
_TEXT	SEGMENT
B$ = 8
sz$ = 16
luaL_pushresultsize PROC				; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 539
  00000	48 01 51 10	 add	 QWORD PTR [rcx+16], rdx
; Line 540
  00004	e9 00 00 00 00	 jmp	 luaL_pushresult
luaL_pushresultsize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_pushresult
_TEXT	SEGMENT
ud$1 = 48
B$ = 48
luaL_pushresult PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 528
$LN8:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 529
  0000a	48 8b 71 18	 mov	 rsi, QWORD PTR [rcx+24]
; Line 530
  0000e	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
  00012	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00015	48 8b d9	 mov	 rbx, rcx
  00018	48 8b ce	 mov	 rcx, rsi
  0001b	e8 00 00 00 00	 call	 lua_pushlstring
; Line 531
  00020	48 8d 43 20	 lea	 rax, QWORD PTR [rbx+32]
  00024	48 39 03	 cmp	 QWORD PTR [rbx], rax
  00027	74 63		 je	 SHORT $LN1@luaL_pushr
; Line 532
  00029	48 8d 54 24 30	 lea	 rdx, QWORD PTR ud$1[rsp]
  0002e	48 8b ce	 mov	 rcx, rsi
  00031	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00036	e8 00 00 00 00	 call	 lua_getallocf
  0003b	ba fe ff ff ff	 mov	 edx, -2
  00040	48 8b ce	 mov	 rcx, rsi
  00043	48 8b f8	 mov	 rdi, rax
  00046	e8 00 00 00 00	 call	 lua_touserdata
  0004b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ud$1[rsp]
  00050	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00054	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00057	45 33 c9	 xor	 r9d, r9d
  0005a	48 8b d8	 mov	 rbx, rax
  0005d	ff d7		 call	 rdi
; Line 533
  0005f	41 83 c8 ff	 or	 r8d, -1
  00063	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  00067	48 8b ce	 mov	 rcx, rsi
  0006a	48 89 03	 mov	 QWORD PTR [rbx], rax
  0006d	48 c7 43 08 00
	00 00 00	 mov	 QWORD PTR [rbx+8], 0
  00075	e8 00 00 00 00	 call	 lua_rotate
  0007a	ba fe ff ff ff	 mov	 edx, -2
  0007f	48 8b ce	 mov	 rcx, rsi
  00082	e8 00 00 00 00	 call	 lua_settop
  00087	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
$LN1@luaL_pushr:
; Line 535
  0008c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00091	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00095	5e		 pop	 rsi
  00096	c3		 ret	 0
luaL_pushresult ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_addvalue
_TEXT	SEGMENT
l$ = 64
B$ = 64
luaL_addvalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 544
$LN8:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 56		 push	 r14
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 545
  00012	48 8b 79 18	 mov	 rdi, QWORD PTR [rcx+24]
  00016	48 8b d9	 mov	 rbx, rcx
; Line 547
  00019	4c 8d 44 24 40	 lea	 r8, QWORD PTR l$[rsp]
  0001e	48 8b cf	 mov	 rcx, rdi
  00021	83 ca ff	 or	 edx, -1
  00024	e8 00 00 00 00	 call	 lua_tolstring
; Line 548
  00029	48 8d 6b 20	 lea	 rbp, QWORD PTR [rbx+32]
  0002d	4c 8b f0	 mov	 r14, rax
  00030	48 39 2b	 cmp	 QWORD PTR [rbx], rbp
  00033	74 11		 je	 SHORT $LN1@luaL_addva
; Line 549
  00035	ba fe ff ff ff	 mov	 edx, -2
  0003a	48 8b cf	 mov	 rcx, rdi
  0003d	44 8d 42 03	 lea	 r8d, QWORD PTR [rdx+3]
  00041	e8 00 00 00 00	 call	 lua_rotate
$LN1@luaL_addva:
; Line 550
  00046	48 8b 74 24 40	 mov	 rsi, QWORD PTR l$[rsp]
  0004b	48 85 f6	 test	 rsi, rsi
  0004e	74 1d		 je	 SHORT $LN4@luaL_addva
  00050	48 8b d6	 mov	 rdx, rsi
  00053	48 8b cb	 mov	 rcx, rbx
  00056	e8 00 00 00 00	 call	 luaL_prepbuffsize
  0005b	4c 8b c6	 mov	 r8, rsi
  0005e	49 8b d6	 mov	 rdx, r14
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 memcpy
  00069	48 01 73 10	 add	 QWORD PTR [rbx+16], rsi
$LN4@luaL_addva:
; Line 551
  0006d	33 d2		 xor	 edx, edx
  0006f	48 39 2b	 cmp	 QWORD PTR [rbx], rbp
  00072	48 8b cf	 mov	 rcx, rdi
  00075	0f 94 c2	 sete	 dl
  00078	41 83 c8 ff	 or	 r8d, -1
  0007c	83 c2 fe	 add	 edx, -2
  0007f	e8 00 00 00 00	 call	 lua_rotate
  00084	ba fe ff ff ff	 mov	 edx, -2
  00089	48 8b cf	 mov	 rcx, rdi
  0008c	e8 00 00 00 00	 call	 lua_settop
; Line 552
  00091	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00096	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0009b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009f	41 5e		 pop	 r14
  000a1	5f		 pop	 rdi
  000a2	5e		 pop	 rsi
  000a3	c3		 ret	 0
luaL_addvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_addstring
_TEXT	SEGMENT
B$ = 48
s$ = 56
luaL_addstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 523
$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b f1	 mov	 rsi, rcx
; Line 524
  00015	48 83 cb ff	 or	 rbx, -1
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@luaL_addst:
  00020	48 ff c3	 inc	 rbx
  00023	80 3c 1a 00	 cmp	 BYTE PTR [rdx+rbx], 0
  00027	75 f7		 jne	 SHORT $LL6@luaL_addst
  00029	48 85 db	 test	 rbx, rbx
  0002c	74 1a		 je	 SHORT $LN3@luaL_addst
  0002e	48 8b d3	 mov	 rdx, rbx
  00031	e8 00 00 00 00	 call	 luaL_prepbuffsize
  00036	4c 8b c3	 mov	 r8, rbx
  00039	48 8b d7	 mov	 rdx, rdi
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 memcpy
  00044	48 01 5e 10	 add	 QWORD PTR [rsi+16], rbx
$LN3@luaL_addst:
; Line 525
  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
luaL_addstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_addlstring
_TEXT	SEGMENT
B$ = 48
s$ = 56
l$ = 64
luaL_addlstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 514
$LN6:
; Line 515
  00000	4d 85 c0	 test	 r8, r8
  00003	74 41		 je	 SHORT $LN4@luaL_addls
  00005	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  0000a	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 514
  00014	49 8b d8	 mov	 rbx, r8
  00017	48 8b f2	 mov	 rsi, rdx
  0001a	48 8b f9	 mov	 rdi, rcx
; Line 516
  0001d	48 8b d3	 mov	 rdx, rbx
  00020	e8 00 00 00 00	 call	 luaL_prepbuffsize
; Line 517
  00025	4c 8b c3	 mov	 r8, rbx
  00028	48 8b d6	 mov	 rdx, rsi
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	e8 00 00 00 00	 call	 memcpy
; Line 518
  00033	48 01 5f 10	 add	 QWORD PTR [rdi+16], rbx
; Line 520
  00037	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
$LN4@luaL_addls:
  00046	c3		 ret	 0
luaL_addlstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_prepbuffsize
_TEXT	SEGMENT
B$ = 48
sz$ = 56
luaL_prepbuffsize PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 491
$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 493
  0000f	48 8b 79 08	 mov	 rdi, QWORD PTR [rcx+8]
  00013	48 8b 71 18	 mov	 rsi, QWORD PTR [rcx+24]
  00017	48 8b d9	 mov	 rbx, rcx
  0001a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0001e	48 8b c7	 mov	 rax, rdi
  00021	48 2b c1	 sub	 rax, rcx
  00024	48 3b c2	 cmp	 rax, rdx
  00027	73 6e		 jae	 SHORT $LN6@luaL_prepb
; Line 495
  00029	48 03 ff	 add	 rdi, rdi
; Line 496
  0002c	48 8b c7	 mov	 rax, rdi
  0002f	48 2b c1	 sub	 rax, rcx
  00032	48 3b c2	 cmp	 rax, rdx
  00035	73 04		 jae	 SHORT $LN5@luaL_prepb
; Line 497
  00037	48 8d 3c 11	 lea	 rdi, QWORD PTR [rcx+rdx]
$LN5@luaL_prepb:
; Line 498
  0003b	48 3b f9	 cmp	 rdi, rcx
  0003e	72 0b		 jb	 SHORT $LN3@luaL_prepb
  00040	48 8b c7	 mov	 rax, rdi
  00043	48 2b c1	 sub	 rax, rcx
  00046	48 3b c2	 cmp	 rax, rdx
  00049	73 0f		 jae	 SHORT $LN4@luaL_prepb
$LN3@luaL_prepb:
; Line 499
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@IIFCFAGL@buffer?5too?5large?$AA@
  00052	48 8b ce	 mov	 rcx, rsi
  00055	e8 00 00 00 00	 call	 luaL_error
$LN4@luaL_prepb:
; Line 501
  0005a	48 8d 43 20	 lea	 rax, QWORD PTR [rbx+32]
; Line 502
  0005e	48 8b ce	 mov	 rcx, rsi
  00061	48 39 03	 cmp	 QWORD PTR [rbx], rax
  00064	74 10		 je	 SHORT $LN2@luaL_prepb
  00066	4c 8b c7	 mov	 r8, rdi
  00069	83 ca ff	 or	 edx, -1
  0006c	e8 00 00 00 00	 call	 resizebox
  00071	48 8b f0	 mov	 rsi, rax
; Line 503
  00074	eb 1a		 jmp	 SHORT $LN1@luaL_prepb
$LN2@luaL_prepb:
; Line 504
  00076	48 8b d7	 mov	 rdx, rdi
  00079	e8 00 00 00 00	 call	 newbox
; Line 505
  0007e	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  00082	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00085	48 8b c8	 mov	 rcx, rax
  00088	48 8b f0	 mov	 rsi, rax
  0008b	e8 00 00 00 00	 call	 memcpy
$LN1@luaL_prepb:
; Line 507
  00090	48 89 33	 mov	 QWORD PTR [rbx], rsi
; Line 508
  00093	48 89 7b 08	 mov	 QWORD PTR [rbx+8], rdi
$LN6@luaL_prepb:
; Line 510
  00097	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
; Line 511
  0009b	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a0	48 03 03	 add	 rax, QWORD PTR [rbx]
  000a3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
luaL_prepbuffsize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_buffinit
_TEXT	SEGMENT
L$ = 8
B$ = 16
luaL_buffinit PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 557
  00000	48 8d 42 20	 lea	 rax, QWORD PTR [rdx+32]
  00004	48 89 4a 18	 mov	 QWORD PTR [rdx+24], rcx
; Line 558
  00008	48 c7 42 10 00
	00 00 00	 mov	 QWORD PTR [rdx+16], 0
  00010	48 89 02	 mov	 QWORD PTR [rdx], rax
; Line 559
  00013	48 c7 42 08 00
	20 00 00	 mov	 QWORD PTR [rdx+8], 8192	; 00002000H
; Line 560
  0001b	c3		 ret	 0
luaL_buffinit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_requiref
_TEXT	SEGMENT
L$ = 64
modname$ = 72
openf$ = 80
glb$ = 88
luaL_requiref PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 949
$LN10:
  00000	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  0000f	48 8b f2	 mov	 rsi, rdx
  00012	4c 89 74 24 50	 mov	 QWORD PTR [rsp+80], r14
  00017	4d 8b f0	 mov	 r14, r8
; Line 950
  0001a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07PINPBNPB@_LOADED?$AA@
  00021	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00026	41 8b e9	 mov	 ebp, r9d
  00029	48 8b f9	 mov	 rdi, rcx
  0002c	e8 00 00 00 00	 call	 lua_getfield
  00031	83 f8 05	 cmp	 eax, 5
  00034	74 4f		 je	 SHORT $LN5@luaL_requi
  00036	ba fe ff ff ff	 mov	 edx, -2
  0003b	48 8b cf	 mov	 rcx, rdi
  0003e	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00043	e8 00 00 00 00	 call	 lua_settop
  00048	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  0004d	48 8b cf	 mov	 rcx, rdi
  00050	e8 00 00 00 00	 call	 lua_absindex
  00055	45 33 c0	 xor	 r8d, r8d
  00058	33 d2		 xor	 edx, edx
  0005a	48 8b cf	 mov	 rcx, rdi
  0005d	8b d8		 mov	 ebx, eax
  0005f	e8 00 00 00 00	 call	 lua_createtable
  00064	83 ca ff	 or	 edx, -1
  00067	48 8b cf	 mov	 rcx, rdi
  0006a	e8 00 00 00 00	 call	 lua_pushvalue
  0006f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07PINPBNPB@_LOADED?$AA@
  00076	8b d3		 mov	 edx, ebx
  00078	48 8b cf	 mov	 rcx, rdi
  0007b	e8 00 00 00 00	 call	 lua_setfield
  00080	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN5@luaL_requi:
; Line 951
  00085	4c 8b c6	 mov	 r8, rsi
  00088	83 ca ff	 or	 edx, -1
  0008b	48 8b cf	 mov	 rcx, rdi
  0008e	e8 00 00 00 00	 call	 lua_getfield
; Line 952
  00093	83 ca ff	 or	 edx, -1
  00096	48 8b cf	 mov	 rcx, rdi
  00099	e8 00 00 00 00	 call	 lua_toboolean
  0009e	85 c0		 test	 eax, eax
  000a0	75 5b		 jne	 SHORT $LN2@luaL_requi
; Line 953
  000a2	8d 50 fe	 lea	 edx, QWORD PTR [rax-2]
  000a5	48 8b cf	 mov	 rcx, rdi
  000a8	e8 00 00 00 00	 call	 lua_settop
; Line 954
  000ad	45 33 c0	 xor	 r8d, r8d
  000b0	49 8b d6	 mov	 rdx, r14
  000b3	48 8b cf	 mov	 rcx, rdi
  000b6	e8 00 00 00 00	 call	 lua_pushcclosure
; Line 955
  000bb	48 8b d6	 mov	 rdx, rsi
  000be	48 8b cf	 mov	 rcx, rdi
  000c1	e8 00 00 00 00	 call	 lua_pushstring
; Line 956
  000c6	ba 01 00 00 00	 mov	 edx, 1
  000cb	45 33 c9	 xor	 r9d, r9d
  000ce	48 8b cf	 mov	 rcx, rdi
  000d1	44 8b c2	 mov	 r8d, edx
  000d4	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000dd	e8 00 00 00 00	 call	 lua_callk
; Line 957
  000e2	83 ca ff	 or	 edx, -1
  000e5	48 8b cf	 mov	 rcx, rdi
  000e8	e8 00 00 00 00	 call	 lua_pushvalue
; Line 958
  000ed	4c 8b c6	 mov	 r8, rsi
  000f0	ba fd ff ff ff	 mov	 edx, -3
  000f5	48 8b cf	 mov	 rcx, rdi
  000f8	e8 00 00 00 00	 call	 lua_setfield
$LN2@luaL_requi:
; Line 960
  000fd	41 83 c8 ff	 or	 r8d, -1
  00101	48 8b cf	 mov	 rcx, rdi
  00104	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  00108	e8 00 00 00 00	 call	 lua_rotate
  0010d	ba fe ff ff ff	 mov	 edx, -2
  00112	48 8b cf	 mov	 rcx, rdi
  00115	e8 00 00 00 00	 call	 lua_settop
  0011a	4c 8b 74 24 50	 mov	 r14, QWORD PTR [rsp+80]
; Line 961
  0011f	85 ed		 test	 ebp, ebp
  00121	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00126	74 16		 je	 SHORT $LN1@luaL_requi
; Line 962
  00128	83 ca ff	 or	 edx, -1
  0012b	48 8b cf	 mov	 rcx, rdi
  0012e	e8 00 00 00 00	 call	 lua_pushvalue
; Line 963
  00133	48 8b d6	 mov	 rdx, rsi
  00136	48 8b cf	 mov	 rcx, rdi
  00139	e8 00 00 00 00	 call	 lua_setglobal
$LN1@luaL_requi:
; Line 965
  0013e	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00143	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00147	5f		 pop	 rdi
  00148	c3		 ret	 0
luaL_requiref ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_traceback
_TEXT	SEGMENT
ar$ = 32
__$ArrayPad$ = 160
L$ = 240
L1$ = 248
msg$ = 256
level$ = 264
luaL_traceback PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 126
$LN20:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 55		 push	 r13
  00007	41 56		 push	 r14
  00009	41 57		 push	 r15
  0000b	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00024	41 8b f9	 mov	 edi, r9d
  00027	4d 8b f0	 mov	 r14, r8
  0002a	48 8b ea	 mov	 rbp, rdx
  0002d	48 8b d9	 mov	 rbx, rcx
; Line 128
  00030	e8 00 00 00 00	 call	 lua_gettop
; Line 129
  00035	48 8b cd	 mov	 rcx, rbp
  00038	44 8b f8	 mov	 r15d, eax
  0003b	e8 00 00 00 00	 call	 lastlevel
; Line 130
  00040	83 ce ff	 or	 esi, -1
  00043	8b c8		 mov	 ecx, eax
  00045	44 8b e8	 mov	 r13d, eax
  00048	b8 0a 00 00 00	 mov	 eax, 10
  0004d	2b cf		 sub	 ecx, edi
  0004f	83 f9 15	 cmp	 ecx, 21
  00052	0f 4f f0	 cmovg	 esi, eax
; Line 131
  00055	4d 85 f6	 test	 r14, r14
  00058	74 12		 je	 SHORT $LN7@luaL_trace
; Line 132
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03OFAPEBGM@?$CFs?6?$AA@
  00061	4d 8b c6	 mov	 r8, r14
  00064	48 8b cb	 mov	 rcx, rbx
  00067	e8 00 00 00 00	 call	 lua_pushfstring
$LN7@luaL_trace:
; Line 133
  0006c	ba 1e 00 00 00	 mov	 edx, 30
  00071	48 8b cb	 mov	 rcx, rbx
  00074	e8 00 00 00 00	 call	 lua_checkstack
  00079	85 c0		 test	 eax, eax
  0007b	75 0f		 jne	 SHORT $LN10@luaL_trace
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 luaL_error
$LN10@luaL_trace:
; Line 134
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@CJHIJJAH@stack?5traceback?3?$AA@
  00093	48 8b cb	 mov	 rcx, rbx
  00096	e8 00 00 00 00	 call	 lua_pushstring
; Line 135
  0009b	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  000a0	8b d7		 mov	 edx, edi
  000a2	48 8b cd	 mov	 rcx, rbp
  000a5	e8 00 00 00 00	 call	 lua_getstack
  000aa	85 c0		 test	 eax, eax
  000ac	0f 84 c1 00 00
	00		 je	 $LN16@luaL_trace
$LL6@luaL_trace:
; Line 136
  000b2	8b c6		 mov	 eax, esi
  000b4	ff c7		 inc	 edi
  000b6	ff ce		 dec	 esi
  000b8	85 c0		 test	 eax, eax
  000ba	75 18		 jne	 SHORT $LN4@luaL_trace
; Line 137
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05JLIPKFIA@?6?7?4?4?4?$AA@
  000c3	48 8b cb	 mov	 rcx, rbx
  000c6	e8 00 00 00 00	 call	 lua_pushstring
; Line 138
  000cb	41 8d 7d f6	 lea	 edi, DWORD PTR [r13-10]
; Line 140
  000cf	e9 88 00 00 00	 jmp	 $LN3@luaL_trace
$LN4@luaL_trace:
; Line 141
  000d4	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DOIEKPJK@Slnt?$AA@
  000e0	48 8b cd	 mov	 rcx, rbp
  000e3	e8 00 00 00 00	 call	 lua_getinfo
; Line 142
  000e8	4c 8d 44 24 58	 lea	 r8, QWORD PTR ar$[rsp+56]
  000ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GEEEIDH@?6?7?$CFs?3?$AA@
  000f4	48 8b cb	 mov	 rcx, rbx
  000f7	e8 00 00 00 00	 call	 lua_pushfstring
; Line 143
  000fc	44 8b 44 24 48	 mov	 r8d, DWORD PTR ar$[rsp+40]
  00101	45 85 c0	 test	 r8d, r8d
  00104	7e 0f		 jle	 SHORT $LN2@luaL_trace
; Line 144
  00106	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CDCAMCGK@?$CFd?3?$AA@
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	e8 00 00 00 00	 call	 lua_pushfstring
$LN2@luaL_trace:
; Line 145
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04GJPPFNOH@?5in?5?$AA@
  0011c	48 8b cb	 mov	 rcx, rbx
  0011f	e8 00 00 00 00	 call	 lua_pushstring
; Line 146
  00124	48 8d 54 24 20	 lea	 rdx, QWORD PTR ar$[rsp]
  00129	48 8b cb	 mov	 rcx, rbx
  0012c	e8 00 00 00 00	 call	 pushfuncname
; Line 147
  00131	80 7c 24 57 00	 cmp	 BYTE PTR ar$[rsp+55], 0
  00136	74 0f		 je	 SHORT $LN1@luaL_trace
; Line 148
  00138	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@HEPAINJG@?6?7?$CI?4?4?4tail?5calls?4?4?4?$CJ?$AA@
  0013f	48 8b cb	 mov	 rcx, rbx
  00142	e8 00 00 00 00	 call	 lua_pushstring
$LN1@luaL_trace:
; Line 149
  00147	48 8b cb	 mov	 rcx, rbx
  0014a	e8 00 00 00 00	 call	 lua_gettop
  0014f	48 8b cb	 mov	 rcx, rbx
  00152	41 2b c7	 sub	 eax, r15d
  00155	8b d0		 mov	 edx, eax
  00157	e8 00 00 00 00	 call	 lua_concat
$LN3@luaL_trace:
; Line 135
  0015c	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  00161	8b d7		 mov	 edx, edi
  00163	48 8b cd	 mov	 rcx, rbp
  00166	e8 00 00 00 00	 call	 lua_getstack
  0016b	85 c0		 test	 eax, eax
  0016d	0f 85 3f ff ff
	ff		 jne	 $LL6@luaL_trace
$LN16@luaL_trace:
; Line 152
  00173	48 8b cb	 mov	 rcx, rbx
  00176	e8 00 00 00 00	 call	 lua_gettop
  0017b	48 8b cb	 mov	 rcx, rbx
  0017e	41 2b c7	 sub	 eax, r15d
  00181	8b d0		 mov	 edx, eax
  00183	e8 00 00 00 00	 call	 lua_concat
; Line 153
  00188	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00190	48 33 cc	 xor	 rcx, rsp
  00193	e8 00 00 00 00	 call	 __security_check_cookie
  00198	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  0019f	41 5f		 pop	 r15
  001a1	41 5e		 pop	 r14
  001a3	41 5d		 pop	 r13
  001a5	5f		 pop	 rdi
  001a6	5e		 pop	 rsi
  001a7	5d		 pop	 rbp
  001a8	5b		 pop	 rbx
  001a9	c3		 ret	 0
luaL_traceback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_getsubtable
_TEXT	SEGMENT
L$ = 48
idx$ = 56
fname$ = 64
luaL_getsubtable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 928
$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
  00012	8b da		 mov	 ebx, edx
  00014	48 8b f9	 mov	 rdi, rcx
; Line 929
  00017	e8 00 00 00 00	 call	 lua_getfield
  0001c	83 f8 05	 cmp	 eax, 5
  0001f	75 15		 jne	 SHORT $LN2@luaL_getsu
; Line 930
  00021	b8 01 00 00 00	 mov	 eax, 1
; Line 939
  00026	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002b	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
$LN2@luaL_getsu:
; Line 932
  00036	ba fe ff ff ff	 mov	 edx, -2
  0003b	48 8b cf	 mov	 rcx, rdi
  0003e	e8 00 00 00 00	 call	 lua_settop
; Line 933
  00043	8b d3		 mov	 edx, ebx
  00045	48 8b cf	 mov	 rcx, rdi
  00048	e8 00 00 00 00	 call	 lua_absindex
; Line 934
  0004d	45 33 c0	 xor	 r8d, r8d
  00050	33 d2		 xor	 edx, edx
  00052	48 8b cf	 mov	 rcx, rdi
  00055	8b d8		 mov	 ebx, eax
  00057	e8 00 00 00 00	 call	 lua_createtable
; Line 935
  0005c	83 ca ff	 or	 edx, -1
  0005f	48 8b cf	 mov	 rcx, rdi
  00062	e8 00 00 00 00	 call	 lua_pushvalue
; Line 936
  00067	4c 8b c6	 mov	 r8, rsi
  0006a	8b d3		 mov	 edx, ebx
  0006c	48 8b cf	 mov	 rcx, rdi
  0006f	e8 00 00 00 00	 call	 lua_setfield
; Line 939
  00074	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00079	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0007e	33 c0		 xor	 eax, eax
  00080	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00084	5f		 pop	 rdi
  00085	c3		 ret	 0
luaL_getsubtable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_setfuncs
_TEXT	SEGMENT
L$ = 64
l$ = 72
nup$ = 80
luaL_setfuncs PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 911
$LN24:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	41 56		 push	 r14
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00009	41 8b e8	 mov	 ebp, r8d
  0000c	4c 8b f2	 mov	 r14, rdx
  0000f	48 8b f1	 mov	 rsi, rcx
; Line 912
  00012	8d 55 14	 lea	 edx, DWORD PTR [rbp+20]
  00015	e8 00 00 00 00	 call	 lua_checkstack
  0001a	85 c0		 test	 eax, eax
  0001c	75 16		 jne	 SHORT $LN9@luaL_setfu
  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@CDGHCIOF@too?5many?5upvalues?$AA@
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@CBBDHBEP@stack?5overflow?5?$CI?$CFs?$CJ?$AA@
  0002c	48 8b ce	 mov	 rcx, rsi
  0002f	e8 00 00 00 00	 call	 luaL_error
$LN9@luaL_setfu:
; Line 913
  00034	49 83 3e 00	 cmp	 QWORD PTR [r14], 0
  00038	74 6b		 je	 SHORT $LN4@luaL_setfu
  0003a	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0003f	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00044	4c 89 7c 24 50	 mov	 QWORD PTR [rsp+80], r15
  00049	41 bf fe ff ff
	ff		 mov	 r15d, -2
  0004f	44 2b fd	 sub	 r15d, ebp
$LL6@luaL_setfu:
; Line 915
  00052	85 ed		 test	 ebp, ebp
  00054	7e 19		 jle	 SHORT $LN1@luaL_setfu
  00056	8b fd		 mov	 edi, ebp
  00058	48 8b dd	 mov	 rbx, rbp
  0005b	f7 df		 neg	 edi
  0005d	0f 1f 00	 npad	 3
$LL3@luaL_setfu:
; Line 916
  00060	8b d7		 mov	 edx, edi
  00062	48 8b ce	 mov	 rcx, rsi
  00065	e8 00 00 00 00	 call	 lua_pushvalue
  0006a	48 ff cb	 dec	 rbx
  0006d	75 f1		 jne	 SHORT $LL3@luaL_setfu
$LN1@luaL_setfu:
; Line 917
  0006f	49 8b 56 08	 mov	 rdx, QWORD PTR [r14+8]
  00073	44 8b c5	 mov	 r8d, ebp
  00076	48 8b ce	 mov	 rcx, rsi
  00079	e8 00 00 00 00	 call	 lua_pushcclosure
; Line 918
  0007e	4d 8b 06	 mov	 r8, QWORD PTR [r14]
  00081	41 8b d7	 mov	 edx, r15d
  00084	48 8b ce	 mov	 rcx, rsi
  00087	e8 00 00 00 00	 call	 lua_setfield
  0008c	49 83 c6 10	 add	 r14, 16
  00090	49 83 3e 00	 cmp	 QWORD PTR [r14], 0
  00094	75 bc		 jne	 SHORT $LL6@luaL_setfu
  00096	4c 8b 7c 24 50	 mov	 r15, QWORD PTR [rsp+80]
  0009b	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000a0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN4@luaL_setfu:
; Line 920
  000a5	83 ca ff	 or	 edx, -1
  000a8	48 8b ce	 mov	 rcx, rsi
  000ab	2b d5		 sub	 edx, ebp
; Line 921
  000ad	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b1	41 5e		 pop	 r14
  000b3	5e		 pop	 rsi
  000b4	5d		 pop	 rbp
; Line 920
  000b5	e9 00 00 00 00	 jmp	 lua_settop
luaL_setfuncs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_gsub
_TEXT	SEGMENT
p$GSCopy$1$ = 32
ud$1 = 32
L$GSCopy$1$ = 40
b$ = 48
__$ArrayPad$ = 8272
L$ = 8368
s$ = 8376
p$ = 8384
r$ = 8392
luaL_gsub PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 969
$LN54:
  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	56		 push	 rsi
  00004	48 8d ac 24 70
	e0 ff ff	 lea	 rbp, QWORD PTR [rsp-8080]
  0000c	b8 90 20 00 00	 mov	 eax, 8336		; 00002090H
  00011	e8 00 00 00 00	 call	 __chkstk
  00016	48 2b e0	 sub	 rsp, rax
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 85 50 1f
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax
  0002a	4c 89 a4 24 80
	20 00 00	 mov	 QWORD PTR [rsp+8320], r12
  00032	4c 89 ac 24 78
	20 00 00	 mov	 QWORD PTR [rsp+8312], r13
  0003a	4c 89 b4 24 70
	20 00 00	 mov	 QWORD PTR [rsp+8304], r14
  00042	49 8b c0	 mov	 rax, r8
  00045	4c 89 bc 24 68
	20 00 00	 mov	 QWORD PTR [rsp+8296], r15
  0004d	4c 8b f2	 mov	 r14, rdx
  00050	48 89 4c 24 28	 mov	 QWORD PTR L$GSCopy$1$[rsp], rcx
; Line 971
  00055	49 83 cc ff	 or	 r12, -1
  00059	4d 8b f9	 mov	 r15, r9
  0005c	48 89 44 24 20	 mov	 QWORD PTR p$GSCopy$1$[rsp], rax
$LL48@luaL_gsub:
  00061	43 80 7c 20 01
	00		 cmp	 BYTE PTR [r8+r12+1], 0
  00067	4d 8d 64 24 01	 lea	 r12, QWORD PTR [r12+1]
  0006c	75 f3		 jne	 SHORT $LL48@luaL_gsub
; Line 973
  0006e	48 89 4c 24 48	 mov	 QWORD PTR b$[rsp+24], rcx
  00073	48 8d 4c 24 50	 lea	 rcx, QWORD PTR b$[rsp+32]
; Line 974
  00078	48 8b d0	 mov	 rdx, rax
  0007b	48 89 4c 24 30	 mov	 QWORD PTR b$[rsp], rcx
  00080	49 8b ce	 mov	 rcx, r14
  00083	48 89 bc 24 88
	20 00 00	 mov	 QWORD PTR [rsp+8328], rdi
  0008b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR b$[rsp+16], 0
  00094	48 c7 44 24 38
	00 20 00 00	 mov	 QWORD PTR b$[rsp+8], 8192 ; 00002000H
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strstr
  000a3	4c 8b e8	 mov	 r13, rax
  000a6	48 85 c0	 test	 rax, rax
  000a9	0f 84 d0 01 00
	00		 je	 $LN1@luaL_gsub
  000af	90		 npad	 1
$LL2@luaL_gsub:
; Line 975
  000b0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp+16]
  000b5	49 8b dd	 mov	 rbx, r13
  000b8	49 2b de	 sub	 rbx, r14
  000bb	0f 84 c6 00 00
	00		 je	 $LN7@luaL_gsub
  000c1	48 8b 7c 24 38	 mov	 rdi, QWORD PTR b$[rsp+8]
  000c6	48 8b 74 24 48	 mov	 rsi, QWORD PTR b$[rsp+24]
  000cb	48 8b c7	 mov	 rax, rdi
  000ce	48 2b c1	 sub	 rax, rcx
  000d1	48 3b c3	 cmp	 rax, rbx
  000d4	0f 83 8d 00 00
	00		 jae	 $LN49@luaL_gsub
  000da	48 03 ff	 add	 rdi, rdi
  000dd	48 8b c7	 mov	 rax, rdi
  000e0	48 2b c1	 sub	 rax, rcx
  000e3	48 3b c3	 cmp	 rax, rbx
  000e6	73 04		 jae	 SHORT $LN14@luaL_gsub
  000e8	48 8d 3c 19	 lea	 rdi, QWORD PTR [rcx+rbx]
$LN14@luaL_gsub:
  000ec	48 3b f9	 cmp	 rdi, rcx
  000ef	72 0b		 jb	 SHORT $LN12@luaL_gsub
  000f1	48 8b c7	 mov	 rax, rdi
  000f4	48 2b c1	 sub	 rax, rcx
  000f7	48 3b c3	 cmp	 rax, rbx
  000fa	73 0f		 jae	 SHORT $LN13@luaL_gsub
$LN12@luaL_gsub:
  000fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@IIFCFAGL@buffer?5too?5large?$AA@
  00103	48 8b ce	 mov	 rcx, rsi
  00106	e8 00 00 00 00	 call	 luaL_error
$LN13@luaL_gsub:
  0010b	48 8d 44 24 50	 lea	 rax, QWORD PTR b$[rsp+32]
  00110	48 8b ce	 mov	 rcx, rsi
  00113	48 39 44 24 30	 cmp	 QWORD PTR b$[rsp], rax
  00118	74 1f		 je	 SHORT $LN11@luaL_gsub
  0011a	4c 8b c7	 mov	 r8, rdi
  0011d	83 ca ff	 or	 edx, -1
  00120	e8 00 00 00 00	 call	 resizebox
  00125	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp+16]
  0012a	48 89 7c 24 38	 mov	 QWORD PTR b$[rsp+8], rdi
  0012f	48 8b f0	 mov	 rsi, rax
  00132	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax
  00137	eb 33		 jmp	 SHORT $LN15@luaL_gsub
$LN11@luaL_gsub:
  00139	48 8b d7	 mov	 rdx, rdi
  0013c	e8 00 00 00 00	 call	 newbox
  00141	4c 8b 44 24 40	 mov	 r8, QWORD PTR b$[rsp+16]
  00146	48 8b 54 24 30	 mov	 rdx, QWORD PTR b$[rsp]
  0014b	48 8b c8	 mov	 rcx, rax
  0014e	48 8b f0	 mov	 rsi, rax
  00151	e8 00 00 00 00	 call	 memcpy
  00156	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp+16]
  0015b	48 89 74 24 30	 mov	 QWORD PTR b$[rsp], rsi
  00160	48 89 7c 24 38	 mov	 QWORD PTR b$[rsp+8], rdi
  00165	eb 05		 jmp	 SHORT $LN15@luaL_gsub
$LN49@luaL_gsub:
  00167	48 8b 74 24 30	 mov	 rsi, QWORD PTR b$[rsp]
$LN15@luaL_gsub:
  0016c	48 03 ce	 add	 rcx, rsi
  0016f	4c 8b c3	 mov	 r8, rbx
  00172	49 8b d6	 mov	 rdx, r14
  00175	e8 00 00 00 00	 call	 memcpy
  0017a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp+16]
  0017f	48 03 cb	 add	 rcx, rbx
  00182	48 89 4c 24 40	 mov	 QWORD PTR b$[rsp+16], rcx
$LN7@luaL_gsub:
; Line 976
  00187	48 83 cb ff	 or	 rbx, -1
  0018b	0f 1f 44 00 00	 npad	 5
$LL47@luaL_gsub:
  00190	48 ff c3	 inc	 rbx
  00193	41 80 3c 1f 00	 cmp	 BYTE PTR [r15+rbx], 0
  00198	75 f6		 jne	 SHORT $LL47@luaL_gsub
  0019a	48 85 db	 test	 rbx, rbx
  0019d	0f 84 be 00 00
	00		 je	 $LN20@luaL_gsub
  001a3	48 8b 7c 24 38	 mov	 rdi, QWORD PTR b$[rsp+8]
  001a8	48 8b 74 24 48	 mov	 rsi, QWORD PTR b$[rsp+24]
  001ad	48 8b c7	 mov	 rax, rdi
  001b0	48 2b c1	 sub	 rax, rcx
  001b3	48 3b c3	 cmp	 rax, rbx
  001b6	0f 83 8d 00 00
	00		 jae	 $LN51@luaL_gsub
  001bc	48 03 ff	 add	 rdi, rdi
  001bf	48 8b c7	 mov	 rax, rdi
  001c2	48 2b c1	 sub	 rax, rcx
  001c5	48 3b c3	 cmp	 rax, rbx
  001c8	73 04		 jae	 SHORT $LN27@luaL_gsub
  001ca	48 8d 3c 19	 lea	 rdi, QWORD PTR [rcx+rbx]
$LN27@luaL_gsub:
  001ce	48 3b f9	 cmp	 rdi, rcx
  001d1	72 0b		 jb	 SHORT $LN25@luaL_gsub
  001d3	48 8b c7	 mov	 rax, rdi
  001d6	48 2b c1	 sub	 rax, rcx
  001d9	48 3b c3	 cmp	 rax, rbx
  001dc	73 0f		 jae	 SHORT $LN26@luaL_gsub
$LN25@luaL_gsub:
  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@IIFCFAGL@buffer?5too?5large?$AA@
  001e5	48 8b ce	 mov	 rcx, rsi
  001e8	e8 00 00 00 00	 call	 luaL_error
$LN26@luaL_gsub:
  001ed	48 8d 44 24 50	 lea	 rax, QWORD PTR b$[rsp+32]
  001f2	48 8b ce	 mov	 rcx, rsi
  001f5	48 39 44 24 30	 cmp	 QWORD PTR b$[rsp], rax
  001fa	74 1f		 je	 SHORT $LN24@luaL_gsub
  001fc	4c 8b c7	 mov	 r8, rdi
  001ff	83 ca ff	 or	 edx, -1
  00202	e8 00 00 00 00	 call	 resizebox
  00207	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp+16]
  0020c	48 89 7c 24 38	 mov	 QWORD PTR b$[rsp+8], rdi
  00211	48 8b f0	 mov	 rsi, rax
  00214	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax
  00219	eb 33		 jmp	 SHORT $LN28@luaL_gsub
$LN24@luaL_gsub:
  0021b	48 8b d7	 mov	 rdx, rdi
  0021e	e8 00 00 00 00	 call	 newbox
  00223	4c 8b 44 24 40	 mov	 r8, QWORD PTR b$[rsp+16]
  00228	48 8b 54 24 30	 mov	 rdx, QWORD PTR b$[rsp]
  0022d	48 8b c8	 mov	 rcx, rax
  00230	48 8b f0	 mov	 rsi, rax
  00233	e8 00 00 00 00	 call	 memcpy
  00238	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp+16]
  0023d	48 89 74 24 30	 mov	 QWORD PTR b$[rsp], rsi
  00242	48 89 7c 24 38	 mov	 QWORD PTR b$[rsp+8], rdi
  00247	eb 05		 jmp	 SHORT $LN28@luaL_gsub
$LN51@luaL_gsub:
  00249	48 8b 74 24 30	 mov	 rsi, QWORD PTR b$[rsp]
$LN28@luaL_gsub:
  0024e	48 03 ce	 add	 rcx, rsi
  00251	4c 8b c3	 mov	 r8, rbx
  00254	49 8b d7	 mov	 rdx, r15
  00257	e8 00 00 00 00	 call	 memcpy
  0025c	48 01 5c 24 40	 add	 QWORD PTR b$[rsp+16], rbx
$LN20@luaL_gsub:
; Line 977
  00261	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$GSCopy$1$[rsp]
  00266	4f 8d 34 2c	 lea	 r14, QWORD PTR [r12+r13]
  0026a	49 8b ce	 mov	 rcx, r14
  0026d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strstr
  00273	4c 8b e8	 mov	 r13, rax
  00276	48 85 c0	 test	 rax, rax
  00279	0f 85 31 fe ff
	ff		 jne	 $LL2@luaL_gsub
$LN1@luaL_gsub:
  0027f	4c 8b bc 24 68
	20 00 00	 mov	 r15, QWORD PTR [rsp+8296]
  00287	4c 8b ac 24 78
	20 00 00	 mov	 r13, QWORD PTR [rsp+8312]
  0028f	4c 8b a4 24 80
	20 00 00	 mov	 r12, QWORD PTR [rsp+8320]
; Line 979
  00297	48 83 cb ff	 or	 rbx, -1
  0029b	0f 1f 44 00 00	 npad	 5
$LL46@luaL_gsub:
  002a0	48 ff c3	 inc	 rbx
  002a3	41 80 3c 1e 00	 cmp	 BYTE PTR [r14+rbx], 0
  002a8	75 f6		 jne	 SHORT $LL46@luaL_gsub
  002aa	48 85 db	 test	 rbx, rbx
  002ad	74 2a		 je	 SHORT $LN52@luaL_gsub
  002af	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$[rsp]
  002b4	48 8b d3	 mov	 rdx, rbx
  002b7	e8 00 00 00 00	 call	 luaL_prepbuffsize
  002bc	4c 8b c3	 mov	 r8, rbx
  002bf	49 8b d6	 mov	 rdx, r14
  002c2	48 8b c8	 mov	 rcx, rax
  002c5	e8 00 00 00 00	 call	 memcpy
  002ca	4c 8b 44 24 40	 mov	 r8, QWORD PTR b$[rsp+16]
  002cf	4c 03 c3	 add	 r8, rbx
  002d2	4c 89 44 24 40	 mov	 QWORD PTR b$[rsp+16], r8
  002d7	eb 05		 jmp	 SHORT $LN33@luaL_gsub
$LN52@luaL_gsub:
  002d9	4c 8b 44 24 40	 mov	 r8, QWORD PTR b$[rsp+16]
$LN33@luaL_gsub:
; Line 980
  002de	48 8b 74 24 48	 mov	 rsi, QWORD PTR b$[rsp+24]
  002e3	48 8b 54 24 30	 mov	 rdx, QWORD PTR b$[rsp]
  002e8	48 8b ce	 mov	 rcx, rsi
  002eb	e8 00 00 00 00	 call	 lua_pushlstring
  002f0	4c 8b b4 24 70
	20 00 00	 mov	 r14, QWORD PTR [rsp+8304]
  002f8	48 8d 44 24 50	 lea	 rax, QWORD PTR b$[rsp+32]
  002fd	48 39 44 24 30	 cmp	 QWORD PTR b$[rsp], rax
  00302	74 59		 je	 SHORT $LN36@luaL_gsub
  00304	48 8d 54 24 20	 lea	 rdx, QWORD PTR ud$1[rsp]
  00309	48 8b ce	 mov	 rcx, rsi
  0030c	e8 00 00 00 00	 call	 lua_getallocf
  00311	ba fe ff ff ff	 mov	 edx, -2
  00316	48 8b ce	 mov	 rcx, rsi
  00319	48 8b f8	 mov	 rdi, rax
  0031c	e8 00 00 00 00	 call	 lua_touserdata
  00321	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ud$1[rsp]
  00326	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  0032a	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0032d	45 33 c9	 xor	 r9d, r9d
  00330	48 8b d8	 mov	 rbx, rax
  00333	ff d7		 call	 rdi
  00335	41 83 c8 ff	 or	 r8d, -1
  00339	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  0033d	48 8b ce	 mov	 rcx, rsi
  00340	48 89 03	 mov	 QWORD PTR [rbx], rax
  00343	48 c7 43 08 00
	00 00 00	 mov	 QWORD PTR [rbx+8], 0
  0034b	e8 00 00 00 00	 call	 lua_rotate
  00350	ba fe ff ff ff	 mov	 edx, -2
  00355	48 8b ce	 mov	 rcx, rsi
  00358	e8 00 00 00 00	 call	 lua_settop
$LN36@luaL_gsub:
; Line 981
  0035d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR L$GSCopy$1$[rsp]
  00362	45 33 c0	 xor	 r8d, r8d
  00365	83 ca ff	 or	 edx, -1
  00368	e8 00 00 00 00	 call	 lua_tolstring
  0036d	48 8b bc 24 88
	20 00 00	 mov	 rdi, QWORD PTR [rsp+8328]
; Line 982
  00375	48 8b 8d 50 1f
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  0037c	48 33 cc	 xor	 rcx, rsp
  0037f	e8 00 00 00 00	 call	 __security_check_cookie
  00384	48 81 c4 90 20
	00 00		 add	 rsp, 8336		; 00002090H
  0038b	5e		 pop	 rsi
  0038c	5b		 pop	 rbx
  0038d	5d		 pop	 rbp
  0038e	c3		 ret	 0
luaL_gsub ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_len
_TEXT	SEGMENT
L$ = 48
idx$ = 56
isnum$ = 64
luaL_len PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 784
$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx
; Line 787
  0000d	e8 00 00 00 00	 call	 lua_len
; Line 788
  00012	4c 8d 44 24 40	 lea	 r8, QWORD PTR isnum$[rsp]
  00017	83 ca ff	 or	 edx, -1
  0001a	48 8b cb	 mov	 rcx, rbx
  0001d	e8 00 00 00 00	 call	 lua_tointegerx
; Line 789
  00022	83 7c 24 40 00	 cmp	 DWORD PTR isnum$[rsp], 0
  00027	48 8b f8	 mov	 rdi, rax
  0002a	75 0f		 jne	 SHORT $LN1@luaL_len
; Line 790
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@GGPBEEGI@object?5length?5is?5not?5an?5integer?$AA@
  00033	48 8b cb	 mov	 rcx, rbx
  00036	e8 00 00 00 00	 call	 luaL_error
$LN1@luaL_len:
; Line 791
  0003b	ba fe ff ff ff	 mov	 edx, -2
  00040	48 8b cb	 mov	 rcx, rbx
  00043	e8 00 00 00 00	 call	 lua_settop
; Line 793
  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	48 8b c7	 mov	 rax, rdi
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
luaL_len ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_newstate
_TEXT	SEGMENT
luaL_newstate PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 1003
$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1004
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:l_alloc
  0000d	33 d2		 xor	 edx, edx
  0000f	e8 00 00 00 00	 call	 lua_newstate
  00014	48 8b d8	 mov	 rbx, rax
; Line 1005
  00017	48 85 c0	 test	 rax, rax
  0001a	74 12		 je	 SHORT $LN1@luaL_newst
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:panic
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 lua_atpanic
; Line 1006
  0002b	48 8b c3	 mov	 rax, rbx
$LN1@luaL_newst:
; Line 1007
  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
luaL_newstate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_loadstring
_TEXT	SEGMENT
ls$1 = 48
L$ = 80
s$ = 88
luaL_loadstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 750
$LN7:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
; Line 751
  00004	48 89 54 24 30	 mov	 QWORD PTR ls$1[rsp], rdx
  00009	48 83 c8 ff	 or	 rax, -1
  0000d	0f 1f 00	 npad	 3
$LL5@luaL_loads:
  00010	48 ff c0	 inc	 rax
  00013	80 3c 02 00	 cmp	 BYTE PTR [rdx+rax], 0
  00017	75 f7		 jne	 SHORT $LL5@luaL_loads
  00019	4c 8b ca	 mov	 r9, rdx
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR ls$1[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:getS
  00028	48 89 44 24 38	 mov	 QWORD PTR ls$1[rsp+8], rax
  0002d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00036	e8 00 00 00 00	 call	 lua_load
; Line 752
  0003b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0003f	c3		 ret	 0
luaL_loadstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_loadbufferx
_TEXT	SEGMENT
ls$ = 48
L$ = 80
buff$ = 88
size$ = 96
name$ = 104
mode$ = 112
luaL_loadbufferx PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 742
$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
; Line 746
  00004	48 8b 44 24 70	 mov	 rax, QWORD PTR mode$[rsp]
  00009	48 89 54 24 30	 mov	 QWORD PTR ls$[rsp], rdx
  0000e	4c 89 44 24 38	 mov	 QWORD PTR ls$[rsp+8], r8
  00013	4c 8d 44 24 30	 lea	 r8, QWORD PTR ls$[rsp]
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:getS
  0001f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00024	e8 00 00 00 00	 call	 lua_load
; Line 747
  00029	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0002d	c3		 ret	 0
luaL_loadbufferx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_loadfilex
_TEXT	SEGMENT
lf$ = 48
__$ArrayPad$ = 576
L$ = 656
filename$ = 664
mode$ = 672
luaL_loadfilex PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 690
$LN76:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	41 54		 push	 r12
  00005	41 56		 push	 r14
  00007	41 57		 push	 r15
  00009	48 8d ac 24 a0
	fe ff ff	 lea	 rbp, QWORD PTR [rsp-352]
  00011	48 81 ec 60 02
	00 00		 sub	 rsp, 608		; 00000260H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 85 40 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax
  00029	4d 8b e0	 mov	 r12, r8
  0002c	4c 8b fa	 mov	 r15, rdx
  0002f	48 8b f1	 mov	 rsi, rcx
; Line 694
  00032	e8 00 00 00 00	 call	 lua_gettop
; Line 696
  00037	48 8b ce	 mov	 rcx, rsi
  0003a	44 8d 70 01	 lea	 r14d, DWORD PTR [rax+1]
  0003e	4d 85 ff	 test	 r15, r15
  00041	75 72		 jne	 SHORT $LN9@luaL_loadf
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06CCPPALKB@?$DNstdin?$AA@
  0004a	e8 00 00 00 00	 call	 lua_pushstring
; Line 697
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00055	48 89 44 24 38	 mov	 QWORD PTR lf$[rsp+8], rax
$LN7@luaL_loadf:
; Line 704
  0005a	48 89 9c 24 a8
	02 00 00	 mov	 QWORD PTR [rsp+680], rbx
  00062	48 89 bc 24 58
	02 00 00	 mov	 QWORD PTR [rsp+600], rdi
  0006a	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03PKPBNCAL@?o?$LL?$LP?$AA@
  00071	4c 89 ac 24 50
	02 00 00	 mov	 QWORD PTR [rsp+592], r13
  00079	45 33 ed	 xor	 r13d, r13d
  0007c	48 8b df	 mov	 rbx, rdi
  0007f	44 89 6c 24 30	 mov	 DWORD PTR lf$[rsp], r13d
$LL24@luaL_loadf:
  00084	48 8b c8	 mov	 rcx, rax
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  0008d	83 f8 ff	 cmp	 eax, -1
  00090	74 77		 je	 SHORT $LN20@luaL_loadf
  00092	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]
  00095	48 ff c3	 inc	 rbx
  00098	3b c1		 cmp	 eax, ecx
  0009a	75 6d		 jne	 SHORT $LN20@luaL_loadf
  0009c	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR lf$[rsp]
  000a1	88 44 0c 40	 mov	 BYTE PTR lf$[rsp+rcx+16], al
  000a5	ff 44 24 30	 inc	 DWORD PTR lf$[rsp]
  000a9	44 38 2b	 cmp	 BYTE PTR [rbx], r13b
  000ac	74 4b		 je	 SHORT $LN70@luaL_loadf
  000ae	48 8b 44 24 38	 mov	 rax, QWORD PTR lf$[rsp+8]
  000b3	eb cf		 jmp	 SHORT $LL24@luaL_loadf
$LN9@luaL_loadf:
; Line 700
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HPDLNGOA@?$EA?$CFs?$AA@
  000bc	4d 8b c7	 mov	 r8, r15
  000bf	e8 00 00 00 00	 call	 lua_pushfstring
; Line 701
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  000cb	49 8b cf	 mov	 rcx, r15
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  000d4	48 89 44 24 38	 mov	 QWORD PTR lf$[rsp+8], rax
; Line 702
  000d9	48 85 c0	 test	 rax, rax
  000dc	0f 85 78 ff ff
	ff		 jne	 $LN7@luaL_loadf
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04PMOCAHAA@open?$AA@
  000e9	45 8b c6	 mov	 r8d, r14d
  000ec	48 8b ce	 mov	 rcx, rsi
  000ef	e8 00 00 00 00	 call	 errfile
  000f4	e9 b5 01 00 00	 jmp	 $LN10@luaL_loadf
$LN70@luaL_loadf:
; Line 704
  000f9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR lf$[rsp+8]
  000fe	44 89 6c 24 30	 mov	 DWORD PTR lf$[rsp], r13d
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
$LN20@luaL_loadf:
  00109	83 f8 23	 cmp	 eax, 35			; 00000023H
  0010c	75 30		 jne	 SHORT $LN61@luaL_loadf
  0010e	66 90		 npad	 2
$LL16@luaL_loadf:
  00110	48 8b 4c 24 38	 mov	 rcx, QWORD PTR lf$[rsp+8]
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  0011b	83 f8 ff	 cmp	 eax, -1
  0011e	74 05		 je	 SHORT $LN13@luaL_loadf
  00120	83 f8 0a	 cmp	 eax, 10
  00123	75 eb		 jne	 SHORT $LL16@luaL_loadf
$LN13@luaL_loadf:
  00125	48 8b 4c 24 38	 mov	 rcx, QWORD PTR lf$[rsp+8]
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
; Line 705
  00130	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR lf$[rsp]
  00135	c6 44 0c 40 0a	 mov	 BYTE PTR lf$[rsp+rcx+16], 10
  0013a	ff 44 24 30	 inc	 DWORD PTR lf$[rsp]
$LN61@luaL_loadf:
; Line 706
  0013e	83 f8 1b	 cmp	 eax, 27
  00141	0f 85 b9 00 00
	00		 jne	 $LN63@luaL_loadf
  00147	4d 85 ff	 test	 r15, r15
  0014a	0f 84 b5 00 00
	00		 je	 $LN59@luaL_loadf
; Line 707
  00150	4c 8b 44 24 38	 mov	 r8, QWORD PTR lf$[rsp+8]
  00155	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  0015c	49 8b cf	 mov	 rcx, r15
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_freopen
  00165	48 89 44 24 38	 mov	 QWORD PTR lf$[rsp+8], rax
; Line 708
  0016a	48 85 c0	 test	 rax, rax
  0016d	75 17		 jne	 SHORT $LN4@luaL_loadf
  0016f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IEGCHAII@reopen?$AA@
  00176	45 8b c6	 mov	 r8d, r14d
  00179	48 8b ce	 mov	 rcx, rsi
  0017c	e8 00 00 00 00	 call	 errfile
  00181	e9 10 01 00 00	 jmp	 $LN74@luaL_loadf
$LN4@luaL_loadf:
; Line 709
  00186	44 89 6c 24 30	 mov	 DWORD PTR lf$[rsp], r13d
  0018b	0f 1f 44 00 00	 npad	 5
$LL39@luaL_loadf:
  00190	48 8b c8	 mov	 rcx, rax
  00193	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  00199	83 f8 ff	 cmp	 eax, -1
  0019c	74 33		 je	 SHORT $LN35@luaL_loadf
  0019e	0f b6 0f	 movzx	 ecx, BYTE PTR [rdi]
  001a1	48 ff c7	 inc	 rdi
  001a4	3b c1		 cmp	 eax, ecx
  001a6	75 29		 jne	 SHORT $LN35@luaL_loadf
  001a8	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR lf$[rsp]
  001ad	88 44 0c 40	 mov	 BYTE PTR lf$[rsp+rcx+16], al
  001b1	ff 44 24 30	 inc	 DWORD PTR lf$[rsp]
  001b5	44 38 2f	 cmp	 BYTE PTR [rdi], r13b
  001b8	74 07		 je	 SHORT $LN71@luaL_loadf
  001ba	48 8b 44 24 38	 mov	 rax, QWORD PTR lf$[rsp+8]
  001bf	eb cf		 jmp	 SHORT $LL39@luaL_loadf
$LN71@luaL_loadf:
  001c1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR lf$[rsp+8]
  001c6	44 89 6c 24 30	 mov	 DWORD PTR lf$[rsp], r13d
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
$LN35@luaL_loadf:
  001d1	83 f8 23	 cmp	 eax, 35			; 00000023H
  001d4	75 2a		 jne	 SHORT $LN63@luaL_loadf
  001d6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL31@luaL_loadf:
  001e0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR lf$[rsp+8]
  001e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  001eb	83 f8 ff	 cmp	 eax, -1
  001ee	74 05		 je	 SHORT $LN28@luaL_loadf
  001f0	83 f8 0a	 cmp	 eax, 10
  001f3	75 eb		 jne	 SHORT $LL31@luaL_loadf
$LN28@luaL_loadf:
  001f5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR lf$[rsp+8]
  001fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
$LN63@luaL_loadf:
; Line 711
  00200	83 f8 ff	 cmp	 eax, -1
  00203	74 0d		 je	 SHORT $LN3@luaL_loadf
$LN59@luaL_loadf:
; Line 712
  00205	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR lf$[rsp]
  0020a	88 44 0c 40	 mov	 BYTE PTR lf$[rsp+rcx+16], al
  0020e	ff 44 24 30	 inc	 DWORD PTR lf$[rsp]
$LN3@luaL_loadf:
; Line 713
  00212	45 33 c0	 xor	 r8d, r8d
  00215	83 ca ff	 or	 edx, -1
  00218	48 8b ce	 mov	 rcx, rsi
  0021b	e8 00 00 00 00	 call	 lua_tolstring
  00220	4c 8d 44 24 30	 lea	 r8, QWORD PTR lf$[rsp]
  00225	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:getF
  0022c	48 8b ce	 mov	 rcx, rsi
  0022f	4c 8b c8	 mov	 r9, rax
  00232	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  00237	e8 00 00 00 00	 call	 lua_load
; Line 714
  0023c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR lf$[rsp+8]
  00241	8b f8		 mov	 edi, eax
  00243	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ferror
  00249	8b d8		 mov	 ebx, eax
; Line 715
  0024b	4d 85 ff	 test	 r15, r15
  0024e	74 0b		 je	 SHORT $LN2@luaL_loadf
  00250	48 8b 4c 24 38	 mov	 rcx, QWORD PTR lf$[rsp+8]
  00255	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN2@luaL_loadf:
; Line 717
  0025b	41 8b d6	 mov	 edx, r14d
  0025e	48 8b ce	 mov	 rcx, rsi
  00261	85 db		 test	 ebx, ebx
  00263	74 19		 je	 SHORT $LN1@luaL_loadf
  00265	e8 00 00 00 00	 call	 lua_settop
; Line 718
  0026a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@
  00271	45 8b c6	 mov	 r8d, r14d
  00274	48 8b ce	 mov	 rcx, rsi
  00277	e8 00 00 00 00	 call	 errfile
  0027c	eb 18		 jmp	 SHORT $LN74@luaL_loadf
$LN1@luaL_loadf:
; Line 720
  0027e	41 83 c8 ff	 or	 r8d, -1
  00282	e8 00 00 00 00	 call	 lua_rotate
  00287	ba fe ff ff ff	 mov	 edx, -2
  0028c	48 8b ce	 mov	 rcx, rsi
  0028f	e8 00 00 00 00	 call	 lua_settop
; Line 721
  00294	8b c7		 mov	 eax, edi
$LN74@luaL_loadf:
  00296	48 8b bc 24 58
	02 00 00	 mov	 rdi, QWORD PTR [rsp+600]
  0029e	48 8b 9c 24 a8
	02 00 00	 mov	 rbx, QWORD PTR [rsp+680]
  002a6	4c 8b ac 24 50
	02 00 00	 mov	 r13, QWORD PTR [rsp+592]
$LN10@luaL_loadf:
; Line 722
  002ae	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  002b5	48 33 cc	 xor	 rcx, rsp
  002b8	e8 00 00 00 00	 call	 __security_check_cookie
  002bd	48 81 c4 60 02
	00 00		 add	 rsp, 608		; 00000260H
  002c4	41 5f		 pop	 r15
  002c6	41 5e		 pop	 r14
  002c8	41 5c		 pop	 r12
  002ca	5e		 pop	 rsi
  002cb	5d		 pop	 rbp
  002cc	c3		 ret	 0
luaL_loadfilex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_unref
_TEXT	SEGMENT
L$ = 48
t$ = 56
ref$ = 64
luaL_unref PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 602
$LN6:
; Line 603
  00000	45 85 c0	 test	 r8d, r8d
  00003	78 5d		 js	 SHORT $LN4@luaL_unref
  00005	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  0000a	56		 push	 rsi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 602
  0000f	49 63 d8	 movsxd	 rbx, r8d
  00012	48 8b f1	 mov	 rsi, rcx
  00015	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
; Line 604
  0001a	e8 00 00 00 00	 call	 lua_absindex
; Line 605
  0001f	45 33 c0	 xor	 r8d, r8d
  00022	48 8b ce	 mov	 rcx, rsi
  00025	8b d0		 mov	 edx, eax
  00027	8b f8		 mov	 edi, eax
  00029	e8 00 00 00 00	 call	 lua_rawgeti
; Line 606
  0002e	4c 8b c3	 mov	 r8, rbx
  00031	8b d7		 mov	 edx, edi
  00033	48 8b ce	 mov	 rcx, rsi
  00036	e8 00 00 00 00	 call	 lua_rawseti
; Line 607
  0003b	48 8b d3	 mov	 rdx, rbx
  0003e	48 8b ce	 mov	 rcx, rsi
  00041	e8 00 00 00 00	 call	 lua_pushinteger
; Line 608
  00046	45 33 c0	 xor	 r8d, r8d
  00049	8b d7		 mov	 edx, edi
  0004b	48 8b ce	 mov	 rcx, rsi
  0004e	e8 00 00 00 00	 call	 lua_rawseti
  00053	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
; Line 610
  00058	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5e		 pop	 rsi
$LN4@luaL_unref:
  00062	c3		 ret	 0
luaL_unref ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_ref
_TEXT	SEGMENT
L$ = 48
t$ = 56
luaL_ref PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 581
$LN7:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b fa		 mov	 edi, edx
; Line 583
  0000c	83 ca ff	 or	 edx, -1
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	e8 00 00 00 00	 call	 lua_type
; Line 584
  00017	48 8b cb	 mov	 rcx, rbx
  0001a	85 c0		 test	 eax, eax
  0001c	75 16		 jne	 SHORT $LN3@luaL_ref
  0001e	8d 50 fe	 lea	 edx, QWORD PTR [rax-2]
  00021	e8 00 00 00 00	 call	 lua_settop
; Line 585
  00026	83 c8 ff	 or	 eax, -1
; Line 599
  00029	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5f		 pop	 rdi
  00033	c3		 ret	 0
$LN3@luaL_ref:
; Line 587
  00034	8b d7		 mov	 edx, edi
  00036	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0003b	e8 00 00 00 00	 call	 lua_absindex
; Line 588
  00040	45 33 c0	 xor	 r8d, r8d
  00043	48 8b cb	 mov	 rcx, rbx
  00046	8b d0		 mov	 edx, eax
  00048	8b f0		 mov	 esi, eax
  0004a	e8 00 00 00 00	 call	 lua_rawgeti
; Line 589
  0004f	45 33 c0	 xor	 r8d, r8d
  00052	83 ca ff	 or	 edx, -1
  00055	48 8b cb	 mov	 rcx, rbx
  00058	e8 00 00 00 00	 call	 lua_tointegerx
; Line 590
  0005d	ba fe ff ff ff	 mov	 edx, -2
  00062	48 8b cb	 mov	 rcx, rbx
  00065	48 8b f8	 mov	 rdi, rax
  00068	e8 00 00 00 00	 call	 lua_settop
; Line 592
  0006d	8b d6		 mov	 edx, esi
  0006f	48 8b cb	 mov	 rcx, rbx
  00072	85 ff		 test	 edi, edi
  00074	74 17		 je	 SHORT $LN2@luaL_ref
  00076	4c 63 c7	 movsxd	 r8, edi
  00079	e8 00 00 00 00	 call	 lua_rawgeti
; Line 593
  0007e	45 33 c0	 xor	 r8d, r8d
  00081	8b d6		 mov	 edx, esi
  00083	48 8b cb	 mov	 rcx, rbx
  00086	e8 00 00 00 00	 call	 lua_rawseti
; Line 595
  0008b	eb 08		 jmp	 SHORT $LN1@luaL_ref
$LN2@luaL_ref:
; Line 596
  0008d	e8 00 00 00 00	 call	 lua_rawlen
  00092	8d 78 01	 lea	 edi, DWORD PTR [rax+1]
$LN1@luaL_ref:
; Line 597
  00095	4c 63 c7	 movsxd	 r8, edi
  00098	8b d6		 mov	 edx, esi
  0009a	48 8b cb	 mov	 rcx, rbx
  0009d	e8 00 00 00 00	 call	 lua_rawseti
  000a2	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
; Line 599
  000a7	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000ac	8b c7		 mov	 eax, edi
  000ae	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b2	5f		 pop	 rdi
  000b3	c3		 ret	 0
luaL_ref ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_execresult
_TEXT	SEGMENT
L$ = 48
stat$ = 56
luaL_execresult PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 265
$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 63 da	 movsxd	 rbx, edx
  0000d	48 8b f9	 mov	 rdi, rcx
; Line 267
  00010	83 fb ff	 cmp	 ebx, -1
  00013	75 1e		 jne	 SHORT $LN13@luaL_execr
; Line 268
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0001b	48 8b cf	 mov	 rcx, rdi
  0001e	48 63 18	 movsxd	 rbx, DWORD PTR [rax]
  00021	e8 00 00 00 00	 call	 lua_pushnil
  00026	8b cb		 mov	 ecx, ebx
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strerror
  0002e	48 8b d0	 mov	 rdx, rax
  00031	eb 1c		 jmp	 SHORT $LN14@luaL_execr
$LN13@luaL_execr:
; Line 271
  00033	85 d2		 test	 edx, edx
  00035	75 0c		 jne	 SHORT $LN2@luaL_execr
; Line 272
  00037	ba 01 00 00 00	 mov	 edx, 1
  0003c	e8 00 00 00 00	 call	 lua_pushboolean
; Line 273
  00041	eb 05		 jmp	 SHORT $LN1@luaL_execr
$LN2@luaL_execr:
; Line 274
  00043	e8 00 00 00 00	 call	 lua_pushnil
$LN1@luaL_execr:
; Line 275
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MKNBDEPB@exit?$AA@
$LN14@luaL_execr:
  0004f	48 8b cf	 mov	 rcx, rdi
  00052	e8 00 00 00 00	 call	 lua_pushstring
; Line 276
  00057	48 8b d3	 mov	 rdx, rbx
  0005a	48 8b cf	 mov	 rcx, rdi
  0005d	e8 00 00 00 00	 call	 lua_pushinteger
; Line 279
  00062	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00067	b8 03 00 00 00	 mov	 eax, 3
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
luaL_execresult ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_fileresult
_TEXT	SEGMENT
L$ = 48
stat$ = 56
fname$ = 64
luaL_fileresult PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 225
$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b e8	 mov	 rbp, r8
  00017	8b da		 mov	 ebx, edx
  00019	48 8b f9	 mov	 rdi, rcx
; Line 226
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
; Line 228
  00022	48 8b cf	 mov	 rcx, rdi
  00025	48 63 30	 movsxd	 rsi, DWORD PTR [rax]
  00028	85 db		 test	 ebx, ebx
  0002a	74 11		 je	 SHORT $LN4@luaL_filer
  0002c	ba 01 00 00 00	 mov	 edx, 1
  00031	e8 00 00 00 00	 call	 lua_pushboolean
; Line 229
  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	eb 41		 jmp	 SHORT $LN3@luaL_filer
$LN4@luaL_filer:
; Line 232
  0003d	e8 00 00 00 00	 call	 lua_pushnil
; Line 234
  00042	8b ce		 mov	 ecx, esi
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strerror
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	48 85 ed	 test	 rbp, rbp
  00050	74 14		 je	 SHORT $LN2@luaL_filer
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@
  00059	4c 8b c8	 mov	 r9, rax
  0005c	4c 8b c5	 mov	 r8, rbp
  0005f	e8 00 00 00 00	 call	 lua_pushfstring
; Line 235
  00064	eb 08		 jmp	 SHORT $LN1@luaL_filer
$LN2@luaL_filer:
; Line 236
  00066	48 8b d0	 mov	 rdx, rax
  00069	e8 00 00 00 00	 call	 lua_pushstring
$LN1@luaL_filer:
; Line 237
  0006e	48 8b d6	 mov	 rdx, rsi
  00071	48 8b cf	 mov	 rcx, rdi
  00074	e8 00 00 00 00	 call	 lua_pushinteger
; Line 238
  00079	b8 03 00 00 00	 mov	 eax, 3
$LN3@luaL_filer:
; Line 240
  0007e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00083	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00088	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0008d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
luaL_fileresult ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_checkoption
_TEXT	SEGMENT
L$ = 48
arg$ = 56
def$ = 64
lst$ = 72
luaL_checkoption PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 340
$LN35:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f1	 mov	 rsi, r9
  00017	49 8b d8	 mov	 rbx, r8
  0001a	8b ea		 mov	 ebp, edx
  0001c	48 8b f9	 mov	 rdi, rcx
; Line 342
  0001f	4d 85 c0	 test	 r8, r8
  00022	74 0e		 je	 SHORT $LN7@luaL_check
  00024	e8 00 00 00 00	 call	 lua_type
  00029	85 c0		 test	 eax, eax
  0002b	7e 2f		 jle	 SHORT $LN24@luaL_check
  0002d	8b d5		 mov	 edx, ebp
  0002f	48 8b cf	 mov	 rcx, rdi
$LN7@luaL_check:
  00032	45 33 c0	 xor	 r8d, r8d
  00035	e8 00 00 00 00	 call	 lua_tolstring
  0003a	48 8b d8	 mov	 rbx, rax
  0003d	48 85 c0	 test	 rax, rax
  00040	75 1a		 jne	 SHORT $LN24@luaL_check
  00042	ba 04 00 00 00	 mov	 edx, 4
  00047	48 8b cf	 mov	 rcx, rdi
  0004a	e8 00 00 00 00	 call	 lua_typename
  0004f	8b d5		 mov	 edx, ebp
  00051	48 8b cf	 mov	 rcx, rdi
  00054	4c 8b c0	 mov	 r8, rax
  00057	e8 00 00 00 00	 call	 typeerror
$LN24@luaL_check:
; Line 344
  0005c	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  0005f	45 33 d2	 xor	 r10d, r10d
  00062	48 85 c0	 test	 rax, rax
  00065	74 40		 je	 SHORT $LN2@luaL_check
  00067	45 8b ca	 mov	 r9d, r10d
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL4@luaL_check:
; Line 345
  00070	4c 8b c3	 mov	 r8, rbx
  00073	4c 2b c0	 sub	 r8, rax
  00076	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL31@luaL_check:
  00080	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00083	42 0f b6 0c 00	 movzx	 ecx, BYTE PTR [rax+r8]
  00088	2b d1		 sub	 edx, ecx
  0008a	75 07		 jne	 SHORT $LN32@luaL_check
  0008c	48 ff c0	 inc	 rax
  0008f	85 c9		 test	 ecx, ecx
  00091	75 ed		 jne	 SHORT $LL31@luaL_check
$LN32@luaL_check:
  00093	85 d2		 test	 edx, edx
  00095	74 44		 je	 SHORT $LN27@luaL_check
; Line 344
  00097	4a 8b 44 ce 08	 mov	 rax, QWORD PTR [rsi+r9*8+8]
  0009c	49 ff c1	 inc	 r9
  0009f	41 ff c2	 inc	 r10d
  000a2	48 85 c0	 test	 rax, rax
  000a5	75 c9		 jne	 SHORT $LL4@luaL_check
$LN2@luaL_check:
; Line 348
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HBADPNMP@invalid?5option?5?8?$CFs?8?$AA@
  000ae	4c 8b c3	 mov	 r8, rbx
  000b1	48 8b cf	 mov	 rcx, rdi
  000b4	e8 00 00 00 00	 call	 lua_pushfstring
  000b9	8b d5		 mov	 edx, ebp
  000bb	48 8b cf	 mov	 rcx, rdi
  000be	4c 8b c0	 mov	 r8, rax
  000c1	e8 00 00 00 00	 call	 luaL_argerror
$LN5@luaL_check:
; Line 349
  000c6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000cb	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000d0	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000d5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d9	5f		 pop	 rdi
  000da	c3		 ret	 0
$LN27@luaL_check:
; Line 346
  000db	41 8b c2	 mov	 eax, r10d
  000de	eb e6		 jmp	 SHORT $LN5@luaL_check
luaL_checkoption ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_error
_TEXT	SEGMENT
L$ = 64
fmt$ = 72
luaL_error PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 214
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000f	53		 push	 rbx
  00010	57		 push	 rdi
  00011	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 217
  00015	ba 01 00 00 00	 mov	 edx, 1
  0001a	48 8b d9	 mov	 rbx, rcx
  0001d	48 8d 7c 24 50	 lea	 rdi, QWORD PTR fmt$[rsp+8]
  00022	e8 00 00 00 00	 call	 luaL_where
; Line 218
  00027	48 8b 54 24 48	 mov	 rdx, QWORD PTR fmt$[rsp]
  0002c	4c 8b c7	 mov	 r8, rdi
  0002f	48 8b cb	 mov	 rcx, rbx
  00032	e8 00 00 00 00	 call	 lua_pushvfstring
; Line 220
  00037	ba 02 00 00 00	 mov	 edx, 2
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	e8 00 00 00 00	 call	 lua_concat
; Line 221
  00044	48 8b cb	 mov	 rcx, rbx
  00047	e8 00 00 00 00	 call	 lua_error
; Line 222
  0004c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00050	5f		 pop	 rdi
  00051	5b		 pop	 rbx
  00052	c3		 ret	 0
luaL_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_where
_TEXT	SEGMENT
ar$ = 32
__$ArrayPad$ = 160
L$ = 192
level$ = 200
luaL_where PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 201
$LN6:
  00000	40 53		 push	 rbx
  00002	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 203
  0001b	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  00020	48 8b d9	 mov	 rbx, rcx
  00023	e8 00 00 00 00	 call	 lua_getstack
  00028	85 c0		 test	 eax, eax
  0002a	74 34		 je	 SHORT $LN1@luaL_where
; Line 204
  0002c	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KHAMJCKP@Sl?$AA@
  00038	48 8b cb	 mov	 rcx, rbx
  0003b	e8 00 00 00 00	 call	 lua_getinfo
; Line 205
  00040	44 8b 4c 24 48	 mov	 r9d, DWORD PTR ar$[rsp+40]
  00045	45 85 c9	 test	 r9d, r9d
  00048	7e 16		 jle	 SHORT $LN1@luaL_where
; Line 206
  0004a	4c 8d 44 24 58	 lea	 r8, QWORD PTR ar$[rsp+56]
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07FCDHCGBN@?$CFs?3?$CFd?3?5?$AA@
  00056	48 8b cb	 mov	 rcx, rbx
  00059	e8 00 00 00 00	 call	 lua_pushfstring
; Line 207
  0005e	eb 0f		 jmp	 SHORT $LN3@luaL_where
$LN1@luaL_where:
; Line 210
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00067	48 8b cb	 mov	 rcx, rbx
  0006a	e8 00 00 00 00	 call	 lua_pushstring
$LN3@luaL_where:
; Line 211
  0006f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00077	48 33 cc	 xor	 rcx, rsp
  0007a	e8 00 00 00 00	 call	 __security_check_cookie
  0007f	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  00086	5b		 pop	 rbx
  00087	c3		 ret	 0
luaL_where ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_checkudata
_TEXT	SEGMENT
L$ = 48
ud$ = 56
tname$ = 64
luaL_checkudata PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 324
$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f8	 mov	 rdi, r8
  00017	8b f2		 mov	 esi, edx
  00019	48 8b e9	 mov	 rbp, rcx
; Line 325
  0001c	e8 00 00 00 00	 call	 luaL_testudata
  00021	48 8b d8	 mov	 rbx, rax
; Line 326
  00024	48 85 c0	 test	 rax, rax
  00027	75 10		 jne	 SHORT $LN1@luaL_check
  00029	4c 8b c7	 mov	 r8, rdi
  0002c	8b d6		 mov	 edx, esi
  0002e	48 8b cd	 mov	 rcx, rbp
  00031	e8 00 00 00 00	 call	 typeerror
; Line 327
  00036	48 8b c3	 mov	 rax, rbx
$LN1@luaL_check:
; Line 328
  00039	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003e	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00043	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
luaL_checkudata ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_testudata
_TEXT	SEGMENT
L$ = 48
ud$ = 56
tname$ = 64
luaL_testudata PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 309
$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b e8	 mov	 rbp, r8
  00017	8b fa		 mov	 edi, edx
  00019	48 8b d9	 mov	 rbx, rcx
; Line 310
  0001c	e8 00 00 00 00	 call	 lua_touserdata
  00021	48 8b f0	 mov	 rsi, rax
; Line 311
  00024	48 85 c0	 test	 rax, rax
  00027	74 47		 je	 SHORT $LN2@luaL_testu
; Line 312
  00029	8b d7		 mov	 edx, edi
  0002b	48 8b cb	 mov	 rcx, rbx
  0002e	e8 00 00 00 00	 call	 lua_getmetatable
  00033	85 c0		 test	 eax, eax
  00035	74 39		 je	 SHORT $LN2@luaL_testu
; Line 313
  00037	4c 8b c5	 mov	 r8, rbp
  0003a	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  0003f	48 8b cb	 mov	 rcx, rbx
  00042	e8 00 00 00 00	 call	 lua_getfield
; Line 314
  00047	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0004d	83 ca ff	 or	 edx, -1
  00050	48 8b cb	 mov	 rcx, rbx
  00053	e8 00 00 00 00	 call	 lua_rawequal
  00058	33 c9		 xor	 ecx, ecx
  0005a	85 c0		 test	 eax, eax
; Line 316
  0005c	8d 51 fd	 lea	 edx, QWORD PTR [rcx-3]
  0005f	48 0f 44 f1	 cmove	 rsi, rcx
  00063	48 8b cb	 mov	 rcx, rbx
  00066	e8 00 00 00 00	 call	 lua_settop
; Line 317
  0006b	48 8b c6	 mov	 rax, rsi
  0006e	eb 02		 jmp	 SHORT $LN4@luaL_testu
$LN2@luaL_testu:
; Line 320
  00070	33 c0		 xor	 eax, eax
$LN4@luaL_testu:
; Line 321
  00072	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00077	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0007c	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00081	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00085	5f		 pop	 rdi
  00086	c3		 ret	 0
luaL_testudata ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_setmetatable
_TEXT	SEGMENT
L$ = 48
tname$ = 56
luaL_setmetatable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 303
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 304
  00006	4c 8b c2	 mov	 r8, rdx
  00009	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	e8 00 00 00 00	 call	 lua_getfield
; Line 305
  00016	ba fe ff ff ff	 mov	 edx, -2
  0001b	48 8b cb	 mov	 rcx, rbx
; Line 306
  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5b		 pop	 rbx
; Line 305
  00023	e9 00 00 00 00	 jmp	 lua_setmetatable
luaL_setmetatable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_newmetatable
_TEXT	SEGMENT
L$ = 48
tname$ = 56
luaL_newmetatable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 290
$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
; Line 291
  0000d	4c 8b c2	 mov	 r8, rdx
  00010	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00015	48 8b d9	 mov	 rbx, rcx
  00018	e8 00 00 00 00	 call	 lua_getfield
  0001d	85 c0		 test	 eax, eax
  0001f	74 0d		 je	 SHORT $LN1@luaL_newme
; Line 292
  00021	33 c0		 xor	 eax, eax
; Line 300
  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
$LN1@luaL_newme:
; Line 293
  0002e	ba fe ff ff ff	 mov	 edx, -2
  00033	48 8b cb	 mov	 rcx, rbx
  00036	e8 00 00 00 00	 call	 lua_settop
; Line 294
  0003b	33 d2		 xor	 edx, edx
  0003d	48 8b cb	 mov	 rcx, rbx
  00040	44 8d 42 02	 lea	 r8d, QWORD PTR [rdx+2]
  00044	e8 00 00 00 00	 call	 lua_createtable
; Line 295
  00049	48 8b d7	 mov	 rdx, rdi
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	e8 00 00 00 00	 call	 lua_pushstring
; Line 296
  00054	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06LHMLJNCG@__name?$AA@
  0005b	ba fe ff ff ff	 mov	 edx, -2
  00060	48 8b cb	 mov	 rcx, rbx
  00063	e8 00 00 00 00	 call	 lua_setfield
; Line 297
  00068	83 ca ff	 or	 edx, -1
  0006b	48 8b cb	 mov	 rcx, rbx
  0006e	e8 00 00 00 00	 call	 lua_pushvalue
; Line 298
  00073	4c 8b c7	 mov	 r8, rdi
  00076	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  0007b	48 8b cb	 mov	 rcx, rbx
  0007e	e8 00 00 00 00	 call	 lua_setfield
; Line 300
  00083	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
luaL_newmetatable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_checkany
_TEXT	SEGMENT
L$ = 48
arg$ = 56
luaL_checkany PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 370
$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b da		 mov	 ebx, edx
  0000c	48 8b f9	 mov	 rdi, rcx
; Line 371
  0000f	e8 00 00 00 00	 call	 lua_type
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 11		 jne	 SHORT $LN1@luaL_check
; Line 372
  00019	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@PDHEKNMA@value?5expected?$AA@
  00020	8b d3		 mov	 edx, ebx
  00022	48 8b cf	 mov	 rcx, rdi
  00025	e8 00 00 00 00	 call	 luaL_argerror
$LN1@luaL_check:
; Line 373
  0002a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
luaL_checkany ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_checktype
_TEXT	SEGMENT
L$ = 48
arg$ = 56
t$ = 64
luaL_checktype PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 364
$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f8	 mov	 edi, r8d
  00012	8b f2		 mov	 esi, edx
  00014	48 8b d9	 mov	 rbx, rcx
; Line 365
  00017	e8 00 00 00 00	 call	 lua_type
  0001c	3b c7		 cmp	 eax, edi
  0001e	74 17		 je	 SHORT $LN4@luaL_check
; Line 366
  00020	8b d7		 mov	 edx, edi
  00022	48 8b cb	 mov	 rcx, rbx
  00025	e8 00 00 00 00	 call	 lua_typename
  0002a	8b d6		 mov	 edx, esi
  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	4c 8b c0	 mov	 r8, rax
  00032	e8 00 00 00 00	 call	 typeerror
$LN4@luaL_check:
; Line 367
  00037	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
luaL_checktype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_checkstack
_TEXT	SEGMENT
L$ = 48
space$ = 56
msg$ = 64
luaL_checkstack PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 352
$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 355
  0000a	83 c2 14	 add	 edx, 20
  0000d	49 8b f8	 mov	 rdi, r8
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 lua_checkstack
  00018	85 c0		 test	 eax, eax
  0001a	75 2d		 jne	 SHORT $LN1@luaL_check
; Line 357
  0001c	48 8b cb	 mov	 rcx, rbx
  0001f	48 85 ff	 test	 rdi, rdi
  00022	74 19		 je	 SHORT $LN2@luaL_check
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@CBBDHBEP@stack?5overflow?5?$CI?$CFs?$CJ?$AA@
  0002b	4c 8b c7	 mov	 r8, rdi
; Line 361
  0002e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
; Line 357
  00038	e9 00 00 00 00	 jmp	 luaL_error
$LN2@luaL_check:
; Line 359
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  00044	e8 00 00 00 00	 call	 luaL_error
$LN1@luaL_check:
; Line 361
  00049	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
luaL_checkstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_optinteger
_TEXT	SEGMENT
L$ = 48
arg$ = 56
def$ = 64
luaL_optinteger PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 427
$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	8b fa		 mov	 edi, edx
  00014	48 8b f1	 mov	 rsi, rcx
; Line 428
  00017	e8 00 00 00 00	 call	 lua_type
  0001c	85 c0		 test	 eax, eax
  0001e	7f 13		 jg	 SHORT $LN3@luaL_optin
  00020	48 8b c3	 mov	 rax, rbx
; Line 429
  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5f		 pop	 rdi
  00032	c3		 ret	 0
$LN3@luaL_optin:
; Line 428
  00033	8b d7		 mov	 edx, edi
  00035	48 8b ce	 mov	 rcx, rsi
; Line 429
  00038	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
; Line 428
  00047	e9 00 00 00 00	 jmp	 luaL_checkinteger
luaL_optinteger ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_checkinteger
_TEXT	SEGMENT
L$ = 48
arg$ = 56
isnum$ = 64
luaL_checkinteger PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 416
$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 418
  0000f	4c 8d 44 24 40	 lea	 r8, QWORD PTR isnum$[rsp]
  00014	8b f2		 mov	 esi, edx
  00016	48 8b d9	 mov	 rbx, rcx
  00019	e8 00 00 00 00	 call	 lua_tointegerx
; Line 419
  0001e	83 7c 24 40 00	 cmp	 DWORD PTR isnum$[rsp], 0
  00023	48 8b f8	 mov	 rdi, rax
  00026	75 4c		 jne	 SHORT $LN8@luaL_check
; Line 420
  00028	8b d6		 mov	 edx, esi
  0002a	48 8b cb	 mov	 rcx, rbx
  0002d	e8 00 00 00 00	 call	 lua_isnumber
  00032	48 8b cb	 mov	 rcx, rbx
  00035	85 c0		 test	 eax, eax
  00037	74 21		 je	 SHORT $LN5@luaL_check
  00039	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CF@GPCMCKGL@number?5has?5no?5integer?5representa@
  00040	8b d6		 mov	 edx, esi
  00042	e8 00 00 00 00	 call	 luaL_argerror
; Line 422
  00047	48 8b c7	 mov	 rax, rdi
; Line 423
  0004a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
; Line 420
$LN5@luaL_check:
  0005a	ba 03 00 00 00	 mov	 edx, 3
  0005f	e8 00 00 00 00	 call	 lua_typename
  00064	8b d6		 mov	 edx, esi
  00066	48 8b cb	 mov	 rcx, rbx
  00069	4c 8b c0	 mov	 r8, rax
  0006c	e8 00 00 00 00	 call	 typeerror
; Line 422
  00071	48 8b c7	 mov	 rax, rdi
$LN8@luaL_check:
; Line 423
  00074	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00079	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	5f		 pop	 rdi
  00083	c3		 ret	 0
luaL_checkinteger ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_optnumber
_TEXT	SEGMENT
L$ = 64
arg$ = 72
def$ = 80
isnum$1 = 88
luaL_optnumber PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 403
$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  0000f	8b fa		 mov	 edi, edx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	0f 28 f2	 movaps	 xmm6, xmm2
; Line 404
  00017	e8 00 00 00 00	 call	 lua_type
  0001c	85 c0		 test	 eax, eax
  0001e	7e 33		 jle	 SHORT $LN8@luaL_optnu
  00020	4c 8d 44 24 58	 lea	 r8, QWORD PTR isnum$1[rsp]
  00025	8b d7		 mov	 edx, edi
  00027	48 8b cb	 mov	 rcx, rbx
  0002a	e8 00 00 00 00	 call	 lua_tonumberx
  0002f	83 7c 24 58 00	 cmp	 DWORD PTR isnum$1[rsp], 0
  00034	0f 28 f0	 movaps	 xmm6, xmm0
  00037	75 1a		 jne	 SHORT $LN8@luaL_optnu
  00039	ba 03 00 00 00	 mov	 edx, 3
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	e8 00 00 00 00	 call	 lua_typename
  00046	8b d7		 mov	 edx, edi
  00048	48 8b cb	 mov	 rcx, rbx
  0004b	4c 8b c0	 mov	 r8, rax
  0004e	e8 00 00 00 00	 call	 typeerror
$LN8@luaL_optnu:
; Line 405
  00053	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00058	0f 28 c6	 movaps	 xmm0, xmm6
  0005b	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
luaL_optnumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_checknumber
_TEXT	SEGMENT
L$ = 64
arg$ = 72
isnum$ = 80
luaL_checknumber PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 394
$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 396
  0000a	4c 8d 44 24 50	 lea	 r8, QWORD PTR isnum$[rsp]
  0000f	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  00014	8b fa		 mov	 edi, edx
  00016	48 8b d9	 mov	 rbx, rcx
  00019	e8 00 00 00 00	 call	 lua_tonumberx
; Line 397
  0001e	83 7c 24 50 00	 cmp	 DWORD PTR isnum$[rsp], 0
  00023	0f 28 f0	 movaps	 xmm6, xmm0
  00026	75 1d		 jne	 SHORT $LN4@luaL_check
; Line 398
  00028	ba 03 00 00 00	 mov	 edx, 3
  0002d	48 8b cb	 mov	 rcx, rbx
  00030	e8 00 00 00 00	 call	 lua_typename
  00035	8b d7		 mov	 edx, edi
  00037	48 8b cb	 mov	 rcx, rbx
  0003a	4c 8b c0	 mov	 r8, rax
  0003d	e8 00 00 00 00	 call	 typeerror
; Line 399
  00042	0f 28 c6	 movaps	 xmm0, xmm6
$LN4@luaL_check:
; Line 400
  00045	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0004a	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0004f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
luaL_checknumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_optlstring
_TEXT	SEGMENT
L$ = 48
arg$ = 56
def$ = 64
len$ = 72
luaL_optlstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 384
$LN15:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f9	 mov	 rdi, r9
  00017	49 8b d8	 mov	 rbx, r8
  0001a	8b ea		 mov	 ebp, edx
  0001c	48 8b f1	 mov	 rsi, rcx
; Line 385
  0001f	e8 00 00 00 00	 call	 lua_type
  00024	85 c0		 test	 eax, eax
  00026	7f 23		 jg	 SHORT $LN3@luaL_optls
; Line 386
  00028	48 85 ff	 test	 rdi, rdi
  0002b	74 4b		 je	 SHORT $LN11@luaL_optls
; Line 387
  0002d	48 85 db	 test	 rbx, rbx
  00030	74 12		 je	 SHORT $LN6@luaL_optls
  00032	48 83 c8 ff	 or	 rax, -1
$LL13@luaL_optls:
  00036	48 ff c0	 inc	 rax
  00039	80 3c 03 00	 cmp	 BYTE PTR [rbx+rax], 0
  0003d	75 f7		 jne	 SHORT $LL13@luaL_optls
  0003f	48 89 07	 mov	 QWORD PTR [rdi], rax
; Line 388
  00042	eb 34		 jmp	 SHORT $LN11@luaL_optls
$LN6@luaL_optls:
; Line 387
  00044	33 c0		 xor	 eax, eax
  00046	48 89 07	 mov	 QWORD PTR [rdi], rax
; Line 388
  00049	eb 2d		 jmp	 SHORT $LN11@luaL_optls
$LN3@luaL_optls:
; Line 390
  0004b	4c 8b c7	 mov	 r8, rdi
  0004e	8b d5		 mov	 edx, ebp
  00050	48 8b ce	 mov	 rcx, rsi
  00053	e8 00 00 00 00	 call	 lua_tolstring
  00058	48 8b d8	 mov	 rbx, rax
  0005b	48 85 c0	 test	 rax, rax
  0005e	75 18		 jne	 SHORT $LN11@luaL_optls
  00060	8d 50 04	 lea	 edx, QWORD PTR [rax+4]
  00063	48 8b ce	 mov	 rcx, rsi
  00066	e8 00 00 00 00	 call	 lua_typename
  0006b	8b d5		 mov	 edx, ebp
  0006d	48 8b ce	 mov	 rcx, rsi
  00070	4c 8b c0	 mov	 r8, rax
  00073	e8 00 00 00 00	 call	 typeerror
$LN11@luaL_optls:
; Line 391
  00078	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0007d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00082	48 8b c3	 mov	 rax, rbx
  00085	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
luaL_optlstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_checklstring
_TEXT	SEGMENT
L$ = 48
arg$ = 56
len$ = 64
luaL_checklstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 376
$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b f2		 mov	 esi, edx
  00011	48 8b f9	 mov	 rdi, rcx
; Line 377
  00014	e8 00 00 00 00	 call	 lua_tolstring
  00019	48 8b d8	 mov	 rbx, rax
; Line 378
  0001c	48 85 c0	 test	 rax, rax
  0001f	75 1b		 jne	 SHORT $LN4@luaL_check
  00021	8d 50 04	 lea	 edx, QWORD PTR [rax+4]
  00024	48 8b cf	 mov	 rcx, rdi
  00027	e8 00 00 00 00	 call	 lua_typename
  0002c	8b d6		 mov	 edx, esi
  0002e	48 8b cf	 mov	 rcx, rdi
  00031	4c 8b c0	 mov	 r8, rax
  00034	e8 00 00 00 00	 call	 typeerror
; Line 379
  00039	48 8b c3	 mov	 rax, rbx
$LN4@luaL_check:
; Line 380
  0003c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00041	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
luaL_checklstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_argerror
_TEXT	SEGMENT
ar$ = 48
__$ArrayPad$ = 176
L$ = 224
arg$ = 232
extramsg$ = 240
luaL_argerror PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 164
$LN12:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001d	49 8b f0	 mov	 rsi, r8
  00020	8b fa		 mov	 edi, edx
; Line 166
  00022	4c 8d 44 24 30	 lea	 r8, QWORD PTR ar$[rsp]
  00027	33 d2		 xor	 edx, edx
  00029	48 8b d9	 mov	 rbx, rcx
  0002c	e8 00 00 00 00	 call	 lua_getstack
; Line 167
  00031	48 8b cb	 mov	 rcx, rbx
  00034	85 c0		 test	 eax, eax
  00036	75 17		 jne	 SHORT $LN4@luaL_arger
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@CHJGEHJL@bad?5argument?5?$CD?$CFd?5?$CI?$CFs?$CJ?$AA@
  0003f	4c 8b ce	 mov	 r9, rsi
  00042	44 8b c7	 mov	 r8d, edi
  00045	e8 00 00 00 00	 call	 luaL_error
  0004a	e9 a3 00 00 00	 jmp	 $LN5@luaL_arger
$LN4@luaL_arger:
; Line 168
  0004f	4c 8d 44 24 30	 lea	 r8, QWORD PTR ar$[rsp]
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  0005b	e8 00 00 00 00	 call	 lua_getinfo
; Line 169
  00060	48 8b 54 24 40	 mov	 rdx, QWORD PTR ar$[rsp+16]
  00065	33 c0		 xor	 eax, eax
  00067	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06GABBCIBA@method?$AA@
  0006e	66 90		 npad	 2
$LL9@luaL_arger:
  00070	0f b6 0c 02	 movzx	 ecx, BYTE PTR [rdx+rax]
  00074	48 ff c0	 inc	 rax
  00077	41 3a 4c 00 ff	 cmp	 cl, BYTE PTR [r8+rax-1]
  0007c	75 23		 jne	 SHORT $LN2@luaL_arger
  0007e	48 83 f8 07	 cmp	 rax, 7
  00082	75 ec		 jne	 SHORT $LL9@luaL_arger
; Line 170
  00084	ff cf		 dec	 edi
; Line 171
  00086	75 19		 jne	 SHORT $LN2@luaL_arger
; Line 173
  00088	4c 8b 44 24 38	 mov	 r8, QWORD PTR ar$[rsp+8]
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@LENGMNDF@calling?5?8?$CFs?8?5on?5bad?5self?5?$CI?$CFs?$CJ?$AA@
  00094	4c 8b ce	 mov	 r9, rsi
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	e8 00 00 00 00	 call	 luaL_error
  0009f	eb 51		 jmp	 SHORT $LN5@luaL_arger
$LN2@luaL_arger:
; Line 175
  000a1	48 8b 44 24 38	 mov	 rax, QWORD PTR ar$[rsp+8]
  000a6	48 85 c0	 test	 rax, rax
  000a9	75 2d		 jne	 SHORT $LN8@luaL_arger
; Line 176
  000ab	48 8d 54 24 30	 lea	 rdx, QWORD PTR ar$[rsp]
  000b0	48 8b cb	 mov	 rcx, rbx
  000b3	e8 00 00 00 00	 call	 pushglobalfuncname
  000b8	85 c0		 test	 eax, eax
  000ba	74 10		 je	 SHORT $LN7@luaL_arger
  000bc	45 33 c0	 xor	 r8d, r8d
  000bf	83 ca ff	 or	 edx, -1
  000c2	48 8b cb	 mov	 rcx, rbx
  000c5	e8 00 00 00 00	 call	 lua_tolstring
  000ca	eb 07		 jmp	 SHORT $LN10@luaL_arger
$LN7@luaL_arger:
  000cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
$LN10@luaL_arger:
  000d3	48 89 44 24 38	 mov	 QWORD PTR ar$[rsp+8], rax
$LN8@luaL_arger:
; Line 178
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@GOMKJOAH@bad?5argument?5?$CD?$CFd?5to?5?8?$CFs?8?5?$CI?$CFs?$CJ?$AA@
  000df	4c 8b c8	 mov	 r9, rax
  000e2	44 8b c7	 mov	 r8d, edi
  000e5	48 8b cb	 mov	 rcx, rbx
  000e8	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  000ed	e8 00 00 00 00	 call	 luaL_error
$LN5@luaL_arger:
; Line 179
  000f2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000fa	48 33 cc	 xor	 rcx, rsp
  000fd	e8 00 00 00 00	 call	 __security_check_cookie
  00102	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00109	5f		 pop	 rdi
  0010a	5e		 pop	 rsi
  0010b	5b		 pop	 rbx
  0010c	c3		 ret	 0
luaL_argerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_tolstring
_TEXT	SEGMENT
L$ = 64
idx$ = 72
len$ = 80
luaL_tolstring PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 796
$LN26:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	49 8b e8	 mov	 rbp, r8
  00017	8b f2		 mov	 esi, edx
  00019	48 8b f9	 mov	 rdi, rcx
; Line 797
  0001c	e8 00 00 00 00	 call	 lua_absindex
  00021	48 8b cf	 mov	 rcx, rdi
  00024	8b d0		 mov	 edx, eax
  00026	8b d8		 mov	 ebx, eax
  00028	e8 00 00 00 00	 call	 lua_getmetatable
  0002d	85 c0		 test	 eax, eax
  0002f	74 2b		 je	 SHORT $LN23@luaL_tolst
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HDFPAPPH@__tostring?$AA@
  00038	48 8b cf	 mov	 rcx, rdi
  0003b	e8 00 00 00 00	 call	 lua_pushstring
  00040	ba fe ff ff ff	 mov	 edx, -2
  00045	48 8b cf	 mov	 rcx, rdi
  00048	e8 00 00 00 00	 call	 lua_rawget
  0004d	48 8b cf	 mov	 rcx, rdi
  00050	85 c0		 test	 eax, eax
  00052	75 6a		 jne	 SHORT $LN17@luaL_tolst
  00054	8d 50 fd	 lea	 edx, QWORD PTR [rax-3]
  00057	e8 00 00 00 00	 call	 lua_settop
$LN23@luaL_tolst:
; Line 798
  0005c	8b d6		 mov	 edx, esi
  0005e	48 8b cf	 mov	 rcx, rdi
  00061	e8 00 00 00 00	 call	 lua_type
; Line 817
  00066	48 8b cf	 mov	 rcx, rdi
  00069	85 c0		 test	 eax, eax
  0006b	0f 84 fc 00 00
	00		 je	 $LN2@luaL_tolst
  00071	8b d6		 mov	 edx, esi
  00073	ff c8		 dec	 eax
  00075	0f 84 d4 00 00
	00		 je	 $LN3@luaL_tolst
; Line 798
  0007b	83 e8 02	 sub	 eax, 2
  0007e	0f 84 83 00 00
	00		 je	 $LN7@luaL_tolst
  00084	ff c8		 dec	 eax
  00086	74 78		 je	 SHORT $LN4@luaL_tolst
; Line 817
  00088	e8 00 00 00 00	 call	 lua_topointer
  0008d	8b d6		 mov	 edx, esi
  0008f	48 8b cf	 mov	 rcx, rdi
  00092	48 8b d8	 mov	 rbx, rax
  00095	e8 00 00 00 00	 call	 lua_type
  0009a	48 8b cf	 mov	 rcx, rdi
  0009d	8b d0		 mov	 edx, eax
  0009f	e8 00 00 00 00	 call	 lua_typename
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06CILKLLDB@?$CFs?3?5?$CFp?$AA@
  000ab	4c 8b cb	 mov	 r9, rbx
  000ae	4c 8b c0	 mov	 r8, rax
  000b1	48 8b cf	 mov	 rcx, rdi
  000b4	e8 00 00 00 00	 call	 lua_pushfstring
; Line 818
  000b9	e9 bb 00 00 00	 jmp	 $LN8@luaL_tolst
; Line 797
$LN17@luaL_tolst:
  000be	41 83 c8 ff	 or	 r8d, -1
  000c2	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  000c6	e8 00 00 00 00	 call	 lua_rotate
  000cb	ba fe ff ff ff	 mov	 edx, -2
  000d0	48 8b cf	 mov	 rcx, rdi
  000d3	e8 00 00 00 00	 call	 lua_settop
  000d8	8b d3		 mov	 edx, ebx
  000da	48 8b cf	 mov	 rcx, rdi
  000dd	e8 00 00 00 00	 call	 lua_pushvalue
  000e2	ba 01 00 00 00	 mov	 edx, 1
  000e7	45 33 c9	 xor	 r9d, r9d
  000ea	48 8b cf	 mov	 rcx, rdi
  000ed	44 8b c2	 mov	 r8d, edx
  000f0	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000f9	e8 00 00 00 00	 call	 lua_callk
  000fe	eb 79		 jmp	 SHORT $LN8@luaL_tolst
$LN4@luaL_tolst:
; Line 807
  00100	e8 00 00 00 00	 call	 lua_pushvalue
; Line 808
  00105	eb 72		 jmp	 SHORT $LN8@luaL_tolst
$LN7@luaL_tolst:
; Line 800
  00107	e8 00 00 00 00	 call	 lua_isinteger
; Line 801
  0010c	45 33 c0	 xor	 r8d, r8d
  0010f	8b d6		 mov	 edx, esi
  00111	48 8b cf	 mov	 rcx, rdi
  00114	85 c0		 test	 eax, eax
  00116	74 19		 je	 SHORT $LN6@luaL_tolst
  00118	e8 00 00 00 00	 call	 lua_tointegerx
  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02BPIDFGKK@?$CFI?$AA@
  00124	48 8b cf	 mov	 rcx, rdi
  00127	4c 8b c0	 mov	 r8, rax
  0012a	e8 00 00 00 00	 call	 lua_pushfstring
; Line 802
  0012f	eb 48		 jmp	 SHORT $LN8@luaL_tolst
$LN6@luaL_tolst:
; Line 803
  00131	e8 00 00 00 00	 call	 lua_tonumberx
  00136	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02NJPGOMH@?$CFf?$AA@
  0013d	48 8b cf	 mov	 rcx, rdi
  00140	0f 28 d0	 movaps	 xmm2, xmm0
  00143	66 49 0f 7e d0	 movd	 r8, xmm2
  00148	e8 00 00 00 00	 call	 lua_pushfstring
; Line 804
  0014d	eb 2a		 jmp	 SHORT $LN8@luaL_tolst
$LN3@luaL_tolst:
; Line 810
  0014f	e8 00 00 00 00	 call	 lua_toboolean
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LOAJBDKD@true?$AA@
  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05LAPONLG@false?$AA@
  00162	85 c0		 test	 eax, eax
  00164	48 0f 45 d1	 cmovne	 rdx, rcx
  00168	48 8b cf	 mov	 rcx, rdi
; Line 811
  0016b	eb 07		 jmp	 SHORT $LN24@luaL_tolst
$LN2@luaL_tolst:
; Line 813
  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03ILAMHENH@nil?$AA@
$LN24@luaL_tolst:
  00174	e8 00 00 00 00	 call	 lua_pushstring
$LN8@luaL_tolst:
; Line 821
  00179	4c 8b c5	 mov	 r8, rbp
  0017c	83 ca ff	 or	 edx, -1
  0017f	48 8b cf	 mov	 rcx, rdi
; Line 822
  00182	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00187	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0018c	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00191	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00195	5f		 pop	 rdi
; Line 821
  00196	e9 00 00 00 00	 jmp	 lua_tolstring
luaL_tolstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_callmeta
_TEXT	SEGMENT
L$ = 64
obj$ = 72
event$ = 80
luaL_callmeta PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 774
$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b f9	 mov	 rdi, rcx
; Line 775
  00015	e8 00 00 00 00	 call	 lua_absindex
; Line 776
  0001a	4c 8b c3	 mov	 r8, rbx
  0001d	48 8b cf	 mov	 rcx, rdi
  00020	8b d0		 mov	 edx, eax
  00022	8b f0		 mov	 esi, eax
  00024	e8 00 00 00 00	 call	 luaL_getmetafield
  00029	85 c0		 test	 eax, eax
  0002b	75 10		 jne	 SHORT $LN1@luaL_callm
; Line 781
  0002d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00032	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00037	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
$LN1@luaL_callm:
; Line 778
  0003d	8b d6		 mov	 edx, esi
  0003f	48 8b cf	 mov	 rcx, rdi
  00042	e8 00 00 00 00	 call	 lua_pushvalue
; Line 779
  00047	ba 01 00 00 00	 mov	 edx, 1
  0004c	45 33 c9	 xor	 r9d, r9d
  0004f	48 8b cf	 mov	 rcx, rdi
  00052	44 8b c2	 mov	 r8d, edx
  00055	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0005e	e8 00 00 00 00	 call	 lua_callk
; Line 781
  00063	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00068	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0006d	b8 01 00 00 00	 mov	 eax, 1
  00072	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
luaL_callmeta ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_getmetafield
_TEXT	SEGMENT
L$ = 48
obj$ = 56
event$ = 64
luaL_getmetafield PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 758
$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b f8	 mov	 rdi, r8
  0000d	48 8b d9	 mov	 rbx, rcx
; Line 759
  00010	e8 00 00 00 00	 call	 lua_getmetatable
  00015	85 c0		 test	 eax, eax
  00017	75 0b		 jne	 SHORT $LN4@luaL_getme
; Line 771
  00019	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5f		 pop	 rdi
  00023	c3		 ret	 0
$LN4@luaL_getme:
; Line 763
  00024	48 8b d7	 mov	 rdx, rdi
  00027	48 8b cb	 mov	 rcx, rbx
  0002a	e8 00 00 00 00	 call	 lua_pushstring
; Line 764
  0002f	ba fe ff ff ff	 mov	 edx, -2
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 lua_rawget
; Line 766
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	8b f8		 mov	 edi, eax
  00041	85 c0		 test	 eax, eax
  00043	75 15		 jne	 SHORT $LN2@luaL_getme
  00045	8d 50 fd	 lea	 edx, QWORD PTR [rax-3]
; Line 768
  00048	e8 00 00 00 00	 call	 lua_settop
; Line 769
  0004d	8b c7		 mov	 eax, edi
; Line 771
  0004f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
$LN2@luaL_getme:
; Line 768
  0005a	41 83 c8 ff	 or	 r8d, -1
  0005e	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  00062	e8 00 00 00 00	 call	 lua_rotate
  00067	ba fe ff ff ff	 mov	 edx, -2
  0006c	48 8b cb	 mov	 rcx, rbx
  0006f	e8 00 00 00 00	 call	 lua_settop
; Line 771
  00074	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00079	8b c7		 mov	 eax, edi
  0007b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007f	5f		 pop	 rdi
  00080	c3		 ret	 0
luaL_getmetafield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaL_checkversion_
_TEXT	SEGMENT
L$ = 64
ver$ = 72
sz$ = 80
luaL_checkversion_ PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\lauxlib.c
; Line 1010
$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  00014	49 8b d8	 mov	 rbx, r8
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	0f 28 f1	 movaps	 xmm6, xmm1
; Line 1011
  0001d	e8 00 00 00 00	 call	 lua_version
  00022	48 8b f0	 mov	 rsi, rax
; Line 1012
  00025	48 81 fb 88 00
	00 00		 cmp	 rbx, 136		; 00000088H
  0002c	74 0f		 je	 SHORT $LN4@luaL_check
; Line 1013
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@FGBFPBHC@core?5and?5library?5have?5incompatib@
  00035	48 8b cf	 mov	 rcx, rdi
  00038	e8 00 00 00 00	 call	 luaL_error
$LN4@luaL_check:
; Line 1014
  0003d	33 c9		 xor	 ecx, ecx
  0003f	e8 00 00 00 00	 call	 lua_version
  00044	48 3b f0	 cmp	 rsi, rax
  00047	74 11		 je	 SHORT $LN3@luaL_check
; Line 1015
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@DLNLJHN@multiple?5Lua?5VMs?5detected?$AA@
  00050	48 8b cf	 mov	 rcx, rdi
  00053	e8 00 00 00 00	 call	 luaL_error
  00058	eb 28		 jmp	 SHORT $LN1@luaL_check
$LN3@luaL_check:
; Line 1016
  0005a	f2 0f 10 1e	 movsdx	 xmm3, QWORD PTR [rsi]
  0005e	66 0f 2e de	 ucomisd xmm3, xmm6
  00062	7a 02		 jp	 SHORT $LN7@luaL_check
  00064	74 1c		 je	 SHORT $LN1@luaL_check
$LN7@luaL_check:
; Line 1018
  00066	0f 28 d6	 movaps	 xmm2, xmm6
  00069	66 49 0f 7e d9	 movd	 r9, xmm3
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@EDLDPMHE@version?5mismatch?3?5app?4?5needs?5?$CFf?0@
  00075	66 49 0f 7e d0	 movd	 r8, xmm2
  0007a	48 8b cf	 mov	 rcx, rdi
  0007d	e8 00 00 00 00	 call	 luaL_error
$LN1@luaL_check:
; Line 1019
  00082	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00087	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0008c	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  00091	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00095	5f		 pop	 rdi
  00096	c3		 ret	 0
luaL_checkversion_ ENDP
_TEXT	ENDS
END
