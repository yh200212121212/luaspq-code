; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
dummynode_ DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	luaH_getint
PUBLIC	luaH_setint
PUBLIC	luaH_getshortstr
PUBLIC	luaH_getstr
PUBLIC	luaH_get
PUBLIC	luaH_newkey
PUBLIC	luaH_set
PUBLIC	luaH_new
PUBLIC	luaH_resize
PUBLIC	luaH_resizearray
PUBLIC	luaH_free
PUBLIC	luaH_next
PUBLIC	luaH_getn
PUBLIC	??_C@_0BG@FEBJBDLJ@invalid?5key?5to?5?8next?8?$AA@ ; `string'
PUBLIC	??_C@_0P@KKABOKCO@table?5overflow?$AA@		; `string'
PUBLIC	??_C@_0BD@BDIKLFBP@table?5index?5is?5nil?$AA@	; `string'
PUBLIC	??_C@_0BD@BKBJANLJ@table?5index?5is?5NaN?$AA@	; `string'
PUBLIC	__real@41e0000000000000
PUBLIC	__real@43e0000000000000
PUBLIC	__real@c3e0000000000000
EXTRN	__imp_frexp:PROC
EXTRN	luaO_ceillog2:PROC
EXTRN	luaM_realloc_:PROC
EXTRN	luaG_runerror:PROC
EXTRN	luaC_newobj:PROC
EXTRN	luaC_barrierback_:PROC
EXTRN	luaS_hashlongstr:PROC
EXTRN	luaV_equalobj:PROC
EXTRN	luaV_tointeger:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	luaO_nilobject_:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaH_setint DD imagerel $LN21
	DD	imagerel $LN21+157
	DD	imagerel $unwind$luaH_setint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaH_getstr DD imagerel $LN31
	DD	imagerel $LN31+188
	DD	imagerel $unwind$luaH_getstr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaH_get DD imagerel $LN24
	DD	imagerel $LN24+210
	DD	imagerel $unwind$luaH_get
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaH_newkey DD imagerel $LN42
	DD	imagerel $LN42+88
	DD	imagerel $unwind$luaH_newkey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$luaH_newkey DD imagerel $LN42+88
	DD	imagerel $LN42+211
	DD	imagerel $chain$1$luaH_newkey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$luaH_newkey DD imagerel $LN42+211
	DD	imagerel $LN42+237
	DD	imagerel $chain$2$luaH_newkey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$luaH_newkey DD imagerel $LN42+237
	DD	imagerel $LN42+466
	DD	imagerel $chain$3$luaH_newkey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$luaH_newkey DD imagerel $LN42+466
	DD	imagerel $LN42+495
	DD	imagerel $chain$4$luaH_newkey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaH_set DD imagerel $LN59
	DD	imagerel $LN59+77
	DD	imagerel $unwind$luaH_set
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaH_new DD imagerel $LN17
	DD	imagerel $LN17+57
	DD	imagerel $unwind$luaH_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaH_resize DD imagerel $LN36
	DD	imagerel $LN36+17
	DD	imagerel $unwind$luaH_resize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$luaH_resize DD imagerel $LN36+17
	DD	imagerel $LN36+32
	DD	imagerel $chain$2$luaH_resize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$luaH_resize DD imagerel $LN36+32
	DD	imagerel $LN36+273
	DD	imagerel $chain$4$luaH_resize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$luaH_resize DD imagerel $LN36+273
	DD	imagerel $LN36+379
	DD	imagerel $chain$5$luaH_resize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$luaH_resize DD imagerel $LN36+379
	DD	imagerel $LN36+410
	DD	imagerel $chain$6$luaH_resize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaH_free DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$luaH_free
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaH_next DD imagerel $LN22
	DD	imagerel $LN22+202
	DD	imagerel $unwind$luaH_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$l_hashfloat DD imagerel l_hashfloat
	DD	imagerel l_hashfloat+77
	DD	imagerel $unwind$l_hashfloat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mainposition DD imagerel mainposition
	DD	imagerel mainposition+416
	DD	imagerel $unwind$mainposition
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$findindex DD imagerel findindex
	DD	imagerel findindex+88
	DD	imagerel $unwind$findindex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$findindex DD imagerel findindex+88
	DD	imagerel findindex+209
	DD	imagerel $chain$1$findindex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$findindex DD imagerel findindex+209
	DD	imagerel findindex+226
	DD	imagerel $chain$2$findindex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$findindex DD imagerel findindex+226
	DD	imagerel findindex+242
	DD	imagerel $chain$3$findindex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$computesizes DD imagerel computesizes
	DD	imagerel computesizes+104
	DD	imagerel $unwind$computesizes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$countint DD imagerel countint
	DD	imagerel countint+69
	DD	imagerel $unwind$countint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$numusearray DD imagerel numusearray
	DD	imagerel numusearray+147
	DD	imagerel $unwind$numusearray
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$numusehash DD imagerel numusehash
	DD	imagerel numusehash+48
	DD	imagerel $unwind$numusehash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$numusehash DD imagerel numusehash+48
	DD	imagerel numusehash+171
	DD	imagerel $chain$1$numusehash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$numusehash DD imagerel numusehash+171
	DD	imagerel numusehash+194
	DD	imagerel $chain$2$numusehash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setarrayvector DD imagerel setarrayvector
	DD	imagerel setarrayvector+112
	DD	imagerel $unwind$setarrayvector
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setnodevector DD imagerel setnodevector
	DD	imagerel setnodevector+87
	DD	imagerel $unwind$setnodevector
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$setnodevector DD imagerel setnodevector+87
	DD	imagerel setnodevector+142
	DD	imagerel $chain$0$setnodevector
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$setnodevector DD imagerel setnodevector+142
	DD	imagerel setnodevector+198
	DD	imagerel $chain$1$setnodevector
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$rehash DD imagerel rehash
	DD	imagerel rehash+462
	DD	imagerel $unwind$rehash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getgeneric DD imagerel getgeneric
	DD	imagerel getgeneric+104
	DD	imagerel $unwind$getgeneric
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unbound_search DD imagerel unbound_search
	DD	imagerel unbound_search+442
	DD	imagerel $unwind$unbound_search
pdata	ENDS
;	COMDAT __real@c3e0000000000000
CONST	SEGMENT
__real@c3e0000000000000 DQ 0c3e0000000000000r	; -9.22337e+018
CONST	ENDS
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+018
CONST	ENDS
;	COMDAT __real@41e0000000000000
CONST	SEGMENT
__real@41e0000000000000 DQ 041e0000000000000r	; 2.14748e+009
CONST	ENDS
;	COMDAT ??_C@_0BD@BKBJANLJ@table?5index?5is?5NaN?$AA@
CONST	SEGMENT
??_C@_0BD@BKBJANLJ@table?5index?5is?5NaN?$AA@ DB 'table index is NaN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BDIKLFBP@table?5index?5is?5nil?$AA@
CONST	SEGMENT
??_C@_0BD@BDIKLFBP@table?5index?5is?5nil?$AA@ DB 'table index is nil', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KKABOKCO@table?5overflow?$AA@
CONST	SEGMENT
??_C@_0P@KKABOKCO@table?5overflow?$AA@ DB 'table overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FEBJBDLJ@invalid?5key?5to?5?8next?8?$AA@
CONST	SEGMENT
??_C@_0BG@FEBJBDLJ@invalid?5key?5to?5?8next?8?$AA@ DB 'invalid key to ''n'
	DB	'ext''', 00H					; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unbound_search DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getgeneric DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rehash DD 0b2919H
	DD	0233417H
	DD	0180117H
	DD	0e00ef010H
	DD	0c00ad00cH
	DD	060077008H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$setnodevector DD 021H
	DD	imagerel setnodevector
	DD	imagerel setnodevector+87
	DD	imagerel $unwind$setnodevector
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$setnodevector DD 020521H
	DD	067405H
	DD	imagerel setnodevector
	DD	imagerel setnodevector+87
	DD	imagerel $unwind$setnodevector
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setnodevector DD 081501H
	DD	096415H
	DD	085415H
	DD	073415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setarrayvector DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$numusehash DD 021H
	DD	imagerel numusehash
	DD	imagerel numusehash+48
	DD	imagerel $unwind$numusehash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$numusehash DD 040d21H
	DD	0bd40dH
	DD	0a7405H
	DD	imagerel numusehash
	DD	imagerel numusehash+48
	DD	imagerel $unwind$numusehash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$numusehash DD 081101H
	DD	0c3411H
	DD	0f00d3211H
	DD	0c009e00bH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$numusearray DD 081401H
	DD	047414H
	DD	03640fH
	DD	02540aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$countint DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$computesizes DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$findindex DD 040021H
	DD	076400H
	DD	063400H
	DD	imagerel findindex
	DD	imagerel findindex+88
	DD	imagerel $unwind$findindex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$findindex DD 021H
	DD	imagerel findindex
	DD	imagerel findindex+88
	DD	imagerel $unwind$findindex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$findindex DD 040a21H
	DD	07640aH
	DD	063405H
	DD	imagerel findindex
	DD	imagerel findindex+88
	DD	imagerel $unwind$findindex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$findindex DD 061001H
	DD	097410H
	DD	085410H
	DD	0e00c3210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mainposition DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$l_hashfloat DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaH_next DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaH_free DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$luaH_resize DD 021H
	DD	imagerel $LN36
	DD	imagerel $LN36+17
	DD	imagerel $unwind$luaH_resize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$luaH_resize DD 020021H
	DD	04f400H
	DD	imagerel $LN36+17
	DD	imagerel $LN36+32
	DD	imagerel $chain$2$luaH_resize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$luaH_resize DD 047321H
	DD	04f473H
	DD	05d405H
	DD	imagerel $LN36+17
	DD	imagerel $LN36+32
	DD	imagerel $chain$2$luaH_resize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$luaH_resize DD 060f21H
	DD	0c740fH
	DD	0b640aH
	DD	0a3405H
	DD	imagerel $LN36
	DD	imagerel $LN36+17
	DD	imagerel $unwind$luaH_resize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaH_resize DD 040a01H
	DD	0e006520aH
	DD	05002c004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaH_new DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaH_set DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$luaH_newkey DD 021H
	DD	imagerel $LN42
	DD	imagerel $LN42+88
	DD	imagerel $unwind$luaH_newkey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$luaH_newkey DD 040021H
	DD	0b7400H
	DD	0a3400H
	DD	imagerel $LN42
	DD	imagerel $LN42+88
	DD	imagerel $unwind$luaH_newkey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$luaH_newkey DD 021H
	DD	imagerel $LN42
	DD	imagerel $LN42+88
	DD	imagerel $unwind$luaH_newkey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$luaH_newkey DD 040a21H
	DD	0b740aH
	DD	0a3405H
	DD	imagerel $LN42
	DD	imagerel $LN42+88
	DD	imagerel $unwind$luaH_newkey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaH_newkey DD 040901H
	DD	0e0055209H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaH_get DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaH_getstr DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaH_setint DD 020601H
	DD	030025206H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT unbound_search
_TEXT	SEGMENT
t$ = 8
j$ = 16
unbound_search PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 613
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi
  0000a	8b 59 0c	 mov	 ebx, DWORD PTR [rcx+12]
  0000d	4c 8b d9	 mov	 r11, rcx
; Line 614
  00010	44 8b d2	 mov	 r10d, edx
; Line 615
  00013	44 8d 42 01	 lea	 r8d, DWORD PTR [rdx+1]
; Line 617
  00017	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:luaO_nilobject_
  0001e	66 90		 npad	 2
$LL9@unbound_se:
  00020	49 8d 40 ff	 lea	 rax, QWORD PTR [r8-1]
  00024	41 8b d0	 mov	 edx, r8d
  00027	48 3b c3	 cmp	 rax, rbx
  0002a	73 11		 jae	 SHORT $LN18@unbound_se
  0002c	49 8b 4b 10	 mov	 rcx, QWORD PTR [r11+16]
  00030	48 c1 e2 04	 shl	 rdx, 4
  00034	48 83 c1 f0	 add	 rcx, -16
  00038	48 03 ca	 add	 rcx, rdx
  0003b	eb 43		 jmp	 SHORT $LN17@unbound_se
$LN18@unbound_se:
  0003d	41 0f b6 4b 0b	 movzx	 ecx, BYTE PTR [r11+11]
  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	d3 e0		 shl	 eax, cl
  00049	ff c8		 dec	 eax
  0004b	48 63 c8	 movsxd	 rcx, eax
  0004e	48 63 c2	 movsxd	 rax, edx
  00051	48 23 c8	 and	 rcx, rax
  00054	48 c1 e1 05	 shl	 rcx, 5
  00058	49 03 4b 18	 add	 rcx, QWORD PTR [r11+24]
  0005c	0f 1f 40 00	 npad	 4
$LL16@unbound_se:
  00060	83 79 18 13	 cmp	 DWORD PTR [rcx+24], 19
  00064	75 06		 jne	 SHORT $LN14@unbound_se
  00066	48 39 51 10	 cmp	 QWORD PTR [rcx+16], rdx
  0006a	74 14		 je	 SHORT $LN17@unbound_se
$LN14@unbound_se:
  0006c	48 63 41 1c	 movsxd	 rax, DWORD PTR [rcx+28]
  00070	85 c0		 test	 eax, eax
  00072	74 09		 je	 SHORT $LN50@unbound_se
  00074	48 c1 e0 05	 shl	 rax, 5
  00078	48 03 c8	 add	 rcx, rax
  0007b	eb e3		 jmp	 SHORT $LL16@unbound_se
$LN50@unbound_se:
  0007d	48 8b cf	 mov	 rcx, rdi
$LN17@unbound_se:
  00080	83 79 08 00	 cmp	 DWORD PTR [rcx+8], 0
  00084	0f 84 90 00 00
	00		 je	 $LN44@unbound_se
; Line 618
  0008a	45 8b d0	 mov	 r10d, r8d
; Line 619
  0008d	41 81 f8 ff ff
	ff 3f		 cmp	 r8d, 1073741823		; 3fffffffH
  00094	77 05		 ja	 SHORT $LN51@unbound_se
; Line 625
  00096	45 03 c0	 add	 r8d, r8d
  00099	eb 85		 jmp	 SHORT $LL9@unbound_se
$LN51@unbound_se:
; Line 621
  0009b	41 b8 01 00 00
	00		 mov	 r8d, 1
$LL6@unbound_se:
; Line 622
  000a1	41 8b d0	 mov	 edx, r8d
  000a4	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  000a8	48 3b c3	 cmp	 rax, rbx
  000ab	73 11		 jae	 SHORT $LN27@unbound_se
  000ad	49 8b 43 10	 mov	 rax, QWORD PTR [r11+16]
  000b1	48 c1 e2 04	 shl	 rdx, 4
  000b5	48 83 c0 f0	 add	 rax, -16
  000b9	48 03 c2	 add	 rax, rdx
  000bc	eb 42		 jmp	 SHORT $LN26@unbound_se
$LN27@unbound_se:
  000be	41 0f b6 4b 0b	 movzx	 ecx, BYTE PTR [r11+11]
  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	d3 e0		 shl	 eax, cl
  000ca	48 63 ca	 movsxd	 rcx, edx
  000cd	ff c8		 dec	 eax
  000cf	48 98		 cdqe
  000d1	48 23 c1	 and	 rax, rcx
  000d4	48 c1 e0 05	 shl	 rax, 5
  000d8	49 03 43 18	 add	 rax, QWORD PTR [r11+24]
  000dc	0f 1f 40 00	 npad	 4
$LL25@unbound_se:
  000e0	83 78 18 13	 cmp	 DWORD PTR [rax+24], 19
  000e4	75 06		 jne	 SHORT $LN23@unbound_se
  000e6	48 39 50 10	 cmp	 QWORD PTR [rax+16], rdx
  000ea	74 14		 je	 SHORT $LN26@unbound_se
$LN23@unbound_se:
  000ec	48 63 48 1c	 movsxd	 rcx, DWORD PTR [rax+28]
  000f0	85 c9		 test	 ecx, ecx
  000f2	74 09		 je	 SHORT $LN53@unbound_se
  000f4	48 c1 e1 05	 shl	 rcx, 5
  000f8	48 03 c1	 add	 rax, rcx
  000fb	eb e3		 jmp	 SHORT $LL25@unbound_se
$LN53@unbound_se:
  000fd	48 8b c7	 mov	 rax, rdi
$LN26@unbound_se:
  00100	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00104	74 05		 je	 SHORT $LN5@unbound_se
  00106	41 ff c0	 inc	 r8d
  00109	eb 96		 jmp	 SHORT $LL6@unbound_se
$LN5@unbound_se:
; Line 623
  0010b	41 8d 40 ff	 lea	 eax, DWORD PTR [r8-1]
; Line 634
  0010f	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00114	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  00119	c3		 ret	 0
$LN44@unbound_se:
; Line 628
  0011a	41 8b c0	 mov	 eax, r8d
  0011d	41 2b c2	 sub	 eax, r10d
  00120	83 f8 01	 cmp	 eax, 1
  00123	0f 86 83 00 00
	00		 jbe	 $LN3@unbound_se
  00129	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@unbound_se:
; Line 629
  00130	47 8d 0c 02	 lea	 r9d, DWORD PTR [r10+r8]
  00134	41 d1 e9	 shr	 r9d, 1
; Line 630
  00137	41 8b d1	 mov	 edx, r9d
  0013a	49 8d 41 ff	 lea	 rax, QWORD PTR [r9-1]
  0013e	48 3b c3	 cmp	 rax, rbx
  00141	73 11		 jae	 SHORT $LN36@unbound_se
  00143	49 8b 4b 10	 mov	 rcx, QWORD PTR [r11+16]
  00147	48 c1 e2 04	 shl	 rdx, 4
  0014b	48 83 c1 f0	 add	 rcx, -16
  0014f	48 03 ca	 add	 rcx, rdx
  00152	eb 3f		 jmp	 SHORT $LN35@unbound_se
$LN36@unbound_se:
  00154	41 0f b6 4b 0b	 movzx	 ecx, BYTE PTR [r11+11]
  00159	b8 01 00 00 00	 mov	 eax, 1
  0015e	d3 e0		 shl	 eax, cl
  00160	ff c8		 dec	 eax
  00162	48 63 c8	 movsxd	 rcx, eax
  00165	48 63 c2	 movsxd	 rax, edx
  00168	48 23 c8	 and	 rcx, rax
  0016b	48 c1 e1 05	 shl	 rcx, 5
  0016f	49 03 4b 18	 add	 rcx, QWORD PTR [r11+24]
$LL34@unbound_se:
  00173	83 79 18 13	 cmp	 DWORD PTR [rcx+24], 19
  00177	75 06		 jne	 SHORT $LN32@unbound_se
  00179	48 39 51 10	 cmp	 QWORD PTR [rcx+16], rdx
  0017d	74 14		 je	 SHORT $LN35@unbound_se
$LN32@unbound_se:
  0017f	48 63 41 1c	 movsxd	 rax, DWORD PTR [rcx+28]
  00183	85 c0		 test	 eax, eax
  00185	74 09		 je	 SHORT $LN55@unbound_se
  00187	48 c1 e0 05	 shl	 rax, 5
  0018b	48 03 c8	 add	 rcx, rax
  0018e	eb e3		 jmp	 SHORT $LL34@unbound_se
$LN55@unbound_se:
  00190	48 8b cf	 mov	 rcx, rdi
$LN35@unbound_se:
  00193	83 79 08 00	 cmp	 DWORD PTR [rcx+8], 0
  00197	75 05		 jne	 SHORT $LN2@unbound_se
  00199	45 8b c1	 mov	 r8d, r9d
  0019c	eb 03		 jmp	 SHORT $LN1@unbound_se
$LN2@unbound_se:
; Line 631
  0019e	45 8b d1	 mov	 r10d, r9d
$LN1@unbound_se:
; Line 628
  001a1	41 8b c8	 mov	 ecx, r8d
  001a4	41 2b ca	 sub	 ecx, r10d
  001a7	83 f9 01	 cmp	 ecx, 1
  001aa	77 84		 ja	 SHORT $LL4@unbound_se
$LN3@unbound_se:
; Line 634
  001ac	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  001b1	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  001b6	41 8b c2	 mov	 eax, r10d
  001b9	c3		 ret	 0
unbound_search ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getgeneric
_TEXT	SEGMENT
t$ = 48
key$ = 56
getgeneric PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 541
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
; Line 542
  0000d	e8 00 00 00 00	 call	 mainposition
; Line 544
  00012	4c 8b c7	 mov	 r8, rdi
  00015	48 8d 50 10	 lea	 rdx, QWORD PTR [rax+16]
  00019	33 c9		 xor	 ecx, ecx
  0001b	48 8b d8	 mov	 rbx, rax
  0001e	e8 00 00 00 00	 call	 luaV_equalobj
  00023	85 c0		 test	 eax, eax
  00025	75 21		 jne	 SHORT $LN10@getgeneric
$LL5@getgeneric:
; Line 547
  00027	48 63 43 1c	 movsxd	 rax, DWORD PTR [rbx+28]
; Line 548
  0002b	85 c0		 test	 eax, eax
  0002d	74 27		 je	 SHORT $LN11@getgeneric
; Line 550
  0002f	48 c1 e0 05	 shl	 rax, 5
  00033	4c 8b c7	 mov	 r8, rdi
  00036	33 c9		 xor	 ecx, ecx
  00038	48 03 d8	 add	 rbx, rax
  0003b	48 8d 53 10	 lea	 rdx, QWORD PTR [rbx+16]
  0003f	e8 00 00 00 00	 call	 luaV_equalobj
  00044	85 c0		 test	 eax, eax
  00046	74 df		 je	 SHORT $LL5@getgeneric
$LN10@getgeneric:
; Line 545
  00048	48 8b c3	 mov	 rax, rbx
; Line 553
  0004b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
$LN11@getgeneric:
; Line 549
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:luaO_nilobject_
; Line 553
  0005d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
getgeneric ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getfreepos
_TEXT	SEGMENT
t$ = 8
getfreepos PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 425
  00000	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]
  00004	48 39 51 20	 cmp	 QWORD PTR [rcx+32], rdx
  00008	76 1a		 jbe	 SHORT $LN2@getfreepos
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL3@getfreepos:
; Line 426
  00010	48 83 41 20 e0	 add	 QWORD PTR [rcx+32], -32	; ffffffffffffffe0H
  00015	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
; Line 427
  00019	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  0001d	74 07		 je	 SHORT $LN4@getfreepos
; Line 425
  0001f	48 3b c2	 cmp	 rax, rdx
  00022	77 ec		 ja	 SHORT $LL3@getfreepos
$LN2@getfreepos:
; Line 430
  00024	33 c0		 xor	 eax, eax
$LN4@getfreepos:
; Line 431
  00026	c3		 ret	 0
getfreepos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT rehash
_TEXT	SEGMENT
L$GSCopy$1$ = 32
ek$GSCopy$1$ = 40
nums$ = 48
__$ArrayPad$ = 176
L$ = 256
t$ = 264
ek$ = 272
rehash	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 378
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	41 57		 push	 r15
  00010	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 385
  00029	8b 72 0c	 mov	 esi, DWORD PTR [rdx+12]
  0002c	33 c0		 xor	 eax, eax
  0002e	48 89 4c 24 20	 mov	 QWORD PTR L$GSCopy$1$[rsp], rcx
  00033	33 db		 xor	 ebx, ebx
  00035	41 bc 01 00 00
	00		 mov	 r12d, 1
  0003b	48 8d 7c 24 30	 lea	 rdi, QWORD PTR nums$[rsp]
  00040	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00045	4c 89 44 24 28	 mov	 QWORD PTR ek$GSCopy$1$[rsp], r8
  0004a	4c 8b ea	 mov	 r13, rdx
  0004d	f3 ab		 rep stosd
  0004f	8b eb		 mov	 ebp, ebx
  00051	45 8b d4	 mov	 r10d, r12d
  00054	41 8b c4	 mov	 eax, r12d
  00057	44 8b db	 mov	 r11d, ebx
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL14@rehash:
  00060	8b fb		 mov	 edi, ebx
  00062	45 8b c2	 mov	 r8d, r10d
  00065	44 3b d6	 cmp	 r10d, esi
  00068	76 09		 jbe	 SHORT $LN10@rehash
  0006a	44 8b c6	 mov	 r8d, esi
  0006d	3b c6		 cmp	 eax, esi
  0006f	77 38		 ja	 SHORT $LN76@rehash
  00071	eb 05		 jmp	 SHORT $LN95@rehash
$LN10@rehash:
  00073	41 3b c2	 cmp	 eax, r10d
  00076	77 1e		 ja	 SHORT $LN7@rehash
$LN95@rehash:
  00078	4d 8b 4d 10	 mov	 r9, QWORD PTR [r13+16]
  0007c	0f 1f 40 00	 npad	 4
$LL82@rehash:
  00080	8d 50 ff	 lea	 edx, DWORD PTR [rax-1]
  00083	48 03 d2	 add	 rdx, rdx
  00086	41 39 5c d1 08	 cmp	 DWORD PTR [r9+rdx*8+8], ebx
  0008b	74 02		 je	 SHORT $LN83@rehash
  0008d	ff c7		 inc	 edi
$LN83@rehash:
  0008f	ff c0		 inc	 eax
  00091	41 3b c0	 cmp	 eax, r8d
  00094	76 ea		 jbe	 SHORT $LL82@rehash
$LN7@rehash:
  00096	42 01 7c 9c 30	 add	 DWORD PTR nums$[rsp+r11*4], edi
  0009b	49 ff c3	 inc	 r11
  0009e	03 ef		 add	 ebp, edi
  000a0	45 03 d2	 add	 r10d, r10d
  000a3	49 83 fb 1f	 cmp	 r11, 31
  000a7	7e b7		 jle	 SHORT $LL14@rehash
$LN76@rehash:
; Line 387
  000a9	41 0f b6 4d 0b	 movzx	 ecx, BYTE PTR [r13+11]
  000ae	41 8b c4	 mov	 eax, r12d
  000b1	44 8b f3	 mov	 r14d, ebx
  000b4	d3 e0		 shl	 eax, cl
  000b6	44 8b fb	 mov	 r15d, ebx
  000b9	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  000be	48 63 f8	 movsxd	 rdi, eax
  000c1	85 c0		 test	 eax, eax
  000c3	74 5b		 je	 SHORT $LN80@rehash
  000c5	48 8b f7	 mov	 rsi, rdi
  000c8	48 c1 e6 05	 shl	 rsi, 5
  000cc	0f 1f 40 00	 npad	 4
$LL19@rehash:
  000d0	49 8b 45 18	 mov	 rax, QWORD PTR [r13+24]
  000d4	48 8d 76 e0	 lea	 rsi, QWORD PTR [rsi-32]
  000d8	48 ff cf	 dec	 rdi
  000db	39 5c 06 08	 cmp	 DWORD PTR [rsi+rax+8], ebx
  000df	74 3a		 je	 SHORT $LN17@rehash
  000e1	83 7c 06 18 13	 cmp	 DWORD PTR [rsi+rax+24], 19
  000e6	75 2b		 jne	 SHORT $LN23@rehash
  000e8	48 8b 44 06 10	 mov	 rax, QWORD PTR [rsi+rax+16]
  000ed	48 85 c0	 test	 rax, rax
  000f0	7e 21		 jle	 SHORT $LN23@rehash
  000f2	48 3b c1	 cmp	 rax, rcx
  000f5	77 1c		 ja	 SHORT $LN23@rehash
  000f7	85 c0		 test	 eax, eax
  000f9	74 18		 je	 SHORT $LN23@rehash
  000fb	8b c8		 mov	 ecx, eax
  000fd	e8 00 00 00 00	 call	 luaO_ceillog2
  00102	48 63 c8	 movsxd	 rcx, eax
  00105	41 8b c4	 mov	 eax, r12d
  00108	ff 44 8c 30	 inc	 DWORD PTR nums$[rsp+rcx*4]
  0010c	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  00111	eb 02		 jmp	 SHORT $LN22@rehash
$LN23@rehash:
  00113	8b c3		 mov	 eax, ebx
$LN22@rehash:
  00115	44 03 f8	 add	 r15d, eax
  00118	41 ff c6	 inc	 r14d
$LN17@rehash:
  0011b	48 85 ff	 test	 rdi, rdi
  0011e	75 b0		 jne	 SHORT $LL19@rehash
$LN80@rehash:
; Line 389
  00120	48 8b 44 24 28	 mov	 rax, QWORD PTR ek$GSCopy$1$[rsp]
  00125	41 8d 34 2f	 lea	 esi, DWORD PTR [r15+rbp]
  00129	ff c5		 inc	 ebp
  0012b	83 78 08 13	 cmp	 DWORD PTR [rax+8], 19
  0012f	75 24		 jne	 SHORT $LN31@rehash
  00131	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00134	48 85 c0	 test	 rax, rax
  00137	7e 1c		 jle	 SHORT $LN31@rehash
  00139	48 3b c1	 cmp	 rax, rcx
  0013c	77 17		 ja	 SHORT $LN31@rehash
  0013e	85 c0		 test	 eax, eax
  00140	74 13		 je	 SHORT $LN31@rehash
  00142	8b c8		 mov	 ecx, eax
  00144	e8 00 00 00 00	 call	 luaO_ceillog2
  00149	48 63 c8	 movsxd	 rcx, eax
  0014c	41 8b c4	 mov	 eax, r12d
  0014f	ff 44 8c 30	 inc	 DWORD PTR nums$[rsp+rcx*4]
  00153	eb 02		 jmp	 SHORT $LN30@rehash
$LN31@rehash:
  00155	8b c3		 mov	 eax, ebx
$LN30@rehash:
; Line 390
  00157	41 03 ee	 add	 ebp, r14d
; Line 392
  0015a	8b d3		 mov	 edx, ebx
  0015c	44 8b c3	 mov	 r8d, ebx
  0015f	03 f0		 add	 esi, eax
  00161	74 2e		 je	 SHORT $LN40@rehash
  00163	8b c3		 mov	 eax, ebx
  00165	48 8d 7c 24 30	 lea	 rdi, QWORD PTR nums$[rsp]
  0016a	66 0f 1f 44 00
	00		 npad	 6
$LL42@rehash:
  00170	8b 0f		 mov	 ecx, DWORD PTR [rdi]
  00172	85 c9		 test	 ecx, ecx
  00174	74 0b		 je	 SHORT $LN41@rehash
  00176	03 d9		 add	 ebx, ecx
  00178	3b d8		 cmp	 ebx, eax
  0017a	76 05		 jbe	 SHORT $LN41@rehash
  0017c	45 8b c4	 mov	 r8d, r12d
  0017f	8b d3		 mov	 edx, ebx
$LN41@rehash:
  00181	45 03 e4	 add	 r12d, r12d
  00184	48 83 c7 04	 add	 rdi, 4
  00188	41 8b c4	 mov	 eax, r12d
  0018b	d1 e8		 shr	 eax, 1
  0018d	3b f0		 cmp	 esi, eax
  0018f	77 df		 ja	 SHORT $LL42@rehash
$LN40@rehash:
; Line 394
  00191	48 8b 4c 24 20	 mov	 rcx, QWORD PTR L$GSCopy$1$[rsp]
  00196	2b ea		 sub	 ebp, edx
  00198	49 8b d5	 mov	 rdx, r13
  0019b	44 8b cd	 mov	 r9d, ebp
  0019e	e8 00 00 00 00	 call	 luaH_resize
; Line 395
  001a3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ab	48 33 cc	 xor	 rcx, rsp
  001ae	e8 00 00 00 00	 call	 __security_check_cookie
  001b3	48 8b 9c 24 18
	01 00 00	 mov	 rbx, QWORD PTR [rsp+280]
  001bb	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  001c2	41 5f		 pop	 r15
  001c4	41 5e		 pop	 r14
  001c6	41 5d		 pop	 r13
  001c8	41 5c		 pop	 r12
  001ca	5f		 pop	 rdi
  001cb	5e		 pop	 rsi
  001cc	5d		 pop	 rbp
  001cd	c3		 ret	 0
rehash	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT setnodevector
_TEXT	SEGMENT
L$ = 48
t$ = 56
size$ = 64
setnodevector PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 310
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	41 8b f0	 mov	 esi, r8d
  00018	48 8b da	 mov	 rbx, rdx
  0001b	4c 8b f1	 mov	 r14, rcx
; Line 312
  0001e	45 85 c0	 test	 r8d, r8d
  00021	75 11		 jne	 SHORT $LN6@setnodevec
; Line 313
  00023	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:dummynode_
  0002a	48 89 42 18	 mov	 QWORD PTR [rdx+24], rax
; Line 314
  0002e	33 c0		 xor	 eax, eax
  00030	8b e8		 mov	 ebp, eax
; Line 316
  00032	eb 5a		 jmp	 SHORT $LN1@setnodevec
$LN6@setnodevec:
; Line 318
  00034	41 8b c8	 mov	 ecx, r8d
  00037	e8 00 00 00 00	 call	 luaO_ceillog2
  0003c	8b e8		 mov	 ebp, eax
; Line 319
  0003e	83 f8 1e	 cmp	 eax, 30
  00041	7f 73		 jg	 SHORT $LN15@setnodevec
; Line 321
  00043	8b c8		 mov	 ecx, eax
  00045	be 01 00 00 00	 mov	 esi, 1
; Line 322
  0004a	45 33 c0	 xor	 r8d, r8d
  0004d	d3 e6		 shl	 esi, cl
  0004f	33 d2		 xor	 edx, edx
  00051	49 8b ce	 mov	 rcx, r14
  00054	44 8b ce	 mov	 r9d, esi
  00057	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0005c	8b fe		 mov	 edi, esi
  0005e	49 c1 e1 05	 shl	 r9, 5
  00062	e8 00 00 00 00	 call	 luaM_realloc_
  00067	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
; Line 323
  0006b	85 f6		 test	 esi, esi
  0006d	7e 1a		 jle	 SHORT $LN13@setnodevec
  0006f	33 c0		 xor	 eax, eax
  00071	8b d0		 mov	 edx, eax
$LL3@setnodevec:
; Line 324
  00073	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00077	48 8d 52 20	 lea	 rdx, QWORD PTR [rdx+32]
; Line 326
  0007b	48 89 44 0a f8	 mov	 QWORD PTR [rdx+rcx-8], rax
; Line 327
  00080	89 44 0a e8	 mov	 DWORD PTR [rdx+rcx-24], eax
  00084	48 ff cf	 dec	 rdi
  00087	75 ea		 jne	 SHORT $LL3@setnodevec
$LN13@setnodevec:
  00089	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN1@setnodevec:
; Line 331
  0008e	8b c6		 mov	 eax, esi
; Line 332
  00090	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00095	40 88 6b 0b	 mov	 BYTE PTR [rbx+11], bpl
  00099	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0009e	48 c1 e0 05	 shl	 rax, 5
  000a2	48 03 43 18	 add	 rax, QWORD PTR [rbx+24]
  000a6	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
  000aa	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000af	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b3	41 5e		 pop	 r14
  000b5	c3		 ret	 0
$LN15@setnodevec:
; Line 320
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@KKABOKCO@table?5overflow?$AA@
  000bd	49 8b ce	 mov	 rcx, r14
  000c0	e8 00 00 00 00	 call	 luaG_runerror
  000c5	cc		 int	 3
$LN14@setnodevec:
setnodevector ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT setarrayvector
_TEXT	SEGMENT
L$ = 48
t$ = 56
size$ = 64
setarrayvector PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 301
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 303
  0000a	45 8b c8	 mov	 r9d, r8d
  0000d	41 8b f8	 mov	 edi, r8d
  00010	44 8b 42 0c	 mov	 r8d, DWORD PTR [rdx+12]
  00014	48 8b da	 mov	 rbx, rdx
  00017	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0001b	49 c1 e0 04	 shl	 r8, 4
  0001f	49 c1 e1 04	 shl	 r9, 4
  00023	e8 00 00 00 00	 call	 luaM_realloc_
; Line 304
  00028	8b 53 0c	 mov	 edx, DWORD PTR [rbx+12]
  0002b	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  0002f	3b d7		 cmp	 edx, edi
  00031	73 2f		 jae	 SHORT $LN10@setarrayve
  00033	8b c2		 mov	 eax, edx
  00035	8b cf		 mov	 ecx, edi
  00037	2b ca		 sub	 ecx, edx
  00039	48 c1 e0 04	 shl	 rax, 4
  0003d	45 33 c0	 xor	 r8d, r8d
  00040	8b d1		 mov	 edx, ecx
  00042	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL3@setarrayve:
; Line 305
  00050	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00054	48 8d 40 10	 lea	 rax, QWORD PTR [rax+16]
  00058	44 89 44 01 f8	 mov	 DWORD PTR [rcx+rax-8], r8d
  0005d	48 ff ca	 dec	 rdx
  00060	75 ee		 jne	 SHORT $LL3@setarrayve
$LN10@setarrayve:
; Line 306
  00062	89 7b 0c	 mov	 DWORD PTR [rbx+12], edi
; Line 307
  00065	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
setarrayvector ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT numusehash
_TEXT	SEGMENT
t$ = 80
nums$ = 88
pna$ = 96
numusehash PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 285
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	41 54		 push	 r12
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00011	4c 8b f9	 mov	 r15, rcx
; Line 288
  00014	0f b6 49 0b	 movzx	 ecx, BYTE PTR [rcx+11]
  00018	b8 01 00 00 00	 mov	 eax, 1
  0001d	d3 e0		 shl	 eax, cl
  0001f	33 f6		 xor	 esi, esi
  00021	33 ed		 xor	 ebp, ebp
  00023	4d 8b f0	 mov	 r14, r8
  00026	4c 8b e2	 mov	 r12, rdx
  00029	48 63 d8	 movsxd	 rbx, eax
; Line 289
  0002c	85 c0		 test	 eax, eax
  0002e	74 7b		 je	 SHORT $LN18@numusehash
; Line 286
  00030	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00035	48 8b fb	 mov	 rdi, rbx
  00038	4c 89 6c 24 58	 mov	 QWORD PTR [rsp+88], r13
  0003d	48 c1 e7 05	 shl	 rdi, 5
  00041	41 bd 00 00 00
	80		 mov	 r13d, -2147483648	; 80000000H
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL3@numusehash:
; Line 289
  00050	49 8b 47 18	 mov	 rax, QWORD PTR [r15+24]
  00054	48 8d 7f e0	 lea	 rdi, QWORD PTR [rdi-32]
  00058	48 ff cb	 dec	 rbx
; Line 291
  0005b	83 7c 07 08 00	 cmp	 DWORD PTR [rdi+rax+8], 0
  00060	74 35		 je	 SHORT $LN1@numusehash
; Line 292
  00062	83 7c 07 18 13	 cmp	 DWORD PTR [rdi+rax+24], 19
  00067	75 28		 jne	 SHORT $LN7@numusehash
  00069	48 8b 44 07 10	 mov	 rax, QWORD PTR [rdi+rax+16]
  0006e	48 85 c0	 test	 rax, rax
  00071	7e 1e		 jle	 SHORT $LN7@numusehash
  00073	49 3b c5	 cmp	 rax, r13
  00076	77 19		 ja	 SHORT $LN7@numusehash
  00078	85 c0		 test	 eax, eax
  0007a	74 15		 je	 SHORT $LN7@numusehash
  0007c	8b c8		 mov	 ecx, eax
  0007e	e8 00 00 00 00	 call	 luaO_ceillog2
  00083	48 63 c8	 movsxd	 rcx, eax
  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	41 ff 04 8c	 inc	 DWORD PTR [r12+rcx*4]
  0008f	eb 02		 jmp	 SHORT $LN6@numusehash
$LN7@numusehash:
  00091	33 c0		 xor	 eax, eax
$LN6@numusehash:
  00093	03 e8		 add	 ebp, eax
; Line 293
  00095	ff c6		 inc	 esi
$LN1@numusehash:
; Line 289
  00097	48 85 db	 test	 rbx, rbx
  0009a	75 b4		 jne	 SHORT $LL3@numusehash
; Line 296
  0009c	41 01 2e	 add	 DWORD PTR [r14], ebp
  0009f	4c 8b 6c 24 58	 mov	 r13, QWORD PTR [rsp+88]
  000a4	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
; Line 297
  000a9	eb 03		 jmp	 SHORT $LN19@numusehash
$LN18@numusehash:
; Line 296
  000ab	41 01 28	 add	 DWORD PTR [r8], ebp
$LN19@numusehash:
; Line 297
  000ae	8b c6		 mov	 eax, esi
; Line 298
  000b0	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000b5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b9	41 5f		 pop	 r15
  000bb	41 5e		 pop	 r14
  000bd	41 5c		 pop	 r12
  000bf	5e		 pop	 rsi
  000c0	5d		 pop	 rbp
  000c1	c3		 ret	 0
numusehash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT numusearray
_TEXT	SEGMENT
t$ = 8
nums$ = 16
numusearray PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 259
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
; Line 263
  00014	b8 01 00 00 00	 mov	 eax, 1
  00019	33 ff		 xor	 edi, edi
  0001b	48 8b ea	 mov	 rbp, rdx
  0001e	48 8b f1	 mov	 rsi, rcx
; Line 265
  00021	33 db		 xor	 ebx, ebx
  00023	44 8b d8	 mov	 r11d, eax
  00026	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL9@numusearra:
; Line 268
  00030	8b 4e 0c	 mov	 ecx, DWORD PTR [rsi+12]
  00033	45 33 c0	 xor	 r8d, r8d
  00036	45 8b cb	 mov	 r9d, r11d
  00039	44 3b d9	 cmp	 r11d, ecx
  0003c	76 09		 jbe	 SHORT $LN5@numusearra
; Line 269
  0003e	44 8b c9	 mov	 r9d, ecx
; Line 270
  00041	3b c1		 cmp	 eax, ecx
  00043	77 37		 ja	 SHORT $LN26@numusearra
; Line 274
  00045	eb 05		 jmp	 SHORT $LN24@numusearra
$LN5@numusearra:
  00047	41 3b c3	 cmp	 eax, r11d
  0004a	77 1c		 ja	 SHORT $LN2@numusearra
$LN24@numusearra:
; Line 275
  0004c	4c 8b 56 10	 mov	 r10, QWORD PTR [rsi+16]
$LL17@numusearra:
  00050	8d 50 ff	 lea	 edx, DWORD PTR [rax-1]
  00053	48 03 d2	 add	 rdx, rdx
  00056	41 83 7c d2 08
	00		 cmp	 DWORD PTR [r10+rdx*8+8], 0
  0005c	74 03		 je	 SHORT $LN18@numusearra
; Line 276
  0005e	41 ff c0	 inc	 r8d
$LN18@numusearra:
; Line 274
  00061	ff c0		 inc	 eax
  00063	41 3b c1	 cmp	 eax, r9d
  00066	76 e8		 jbe	 SHORT $LL17@numusearra
$LN2@numusearra:
; Line 278
  00068	44 01 44 9d 00	 add	 DWORD PTR [rbp+rbx*4], r8d
  0006d	48 ff c3	 inc	 rbx
; Line 279
  00070	41 03 f8	 add	 edi, r8d
  00073	45 03 db	 add	 r11d, r11d
  00076	48 83 fb 1f	 cmp	 rbx, 31
  0007a	7e b4		 jle	 SHORT $LL9@numusearra
$LN26@numusearra:
; Line 282
  0007c	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00081	48 8b 6c 24 10	 mov	 rbp, QWORD PTR [rsp+16]
  00086	48 8b 74 24 18	 mov	 rsi, QWORD PTR [rsp+24]
  0008b	8b c7		 mov	 eax, edi
  0008d	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]
  00092	c3		 ret	 0
numusearray ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT countint
_TEXT	SEGMENT
key$ = 48
nums$ = 56
countint PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 243
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 244
  00006	83 79 08 13	 cmp	 DWORD PTR [rcx+8], 19
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	75 2e		 jne	 SHORT $LN2@countint
  0000f	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00012	48 85 c0	 test	 rax, rax
  00015	7e 26		 jle	 SHORT $LN2@countint
  00017	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  0001c	48 3b c1	 cmp	 rax, rcx
  0001f	77 1c		 ja	 SHORT $LN2@countint
; Line 245
  00021	85 c0		 test	 eax, eax
  00023	74 18		 je	 SHORT $LN2@countint
; Line 246
  00025	8b c8		 mov	 ecx, eax
  00027	e8 00 00 00 00	 call	 luaO_ceillog2
  0002c	48 63 c8	 movsxd	 rcx, eax
; Line 247
  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	ff 04 8b	 inc	 DWORD PTR [rbx+rcx*4]
; Line 251
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5b		 pop	 rbx
  0003c	c3		 ret	 0
$LN2@countint:
; Line 250
  0003d	33 c0		 xor	 eax, eax
; Line 251
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5b		 pop	 rbx
  00044	c3		 ret	 0
countint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT computesizes
_TEXT	SEGMENT
nums$ = 8
pna$ = 16
computesizes PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 221
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi
; Line 228
  0000a	8b 3a		 mov	 edi, DWORD PTR [rdx]
  0000c	45 33 c0	 xor	 r8d, r8d
  0000f	4c 8b d1	 mov	 r10, rcx
  00012	45 8b d8	 mov	 r11d, r8d
  00015	41 8b d8	 mov	 ebx, r8d
  00018	45 8d 48 01	 lea	 r9d, QWORD PTR [r8+1]
  0001c	85 ff		 test	 edi, edi
  0001e	74 38		 je	 SHORT $LN12@computesiz
  00020	41 8b c0	 mov	 eax, r8d
$LL5@computesiz:
  00023	41 8b 0a	 mov	 ecx, DWORD PTR [r10]
; Line 229
  00026	85 c9		 test	 ecx, ecx
  00028	74 0e		 je	 SHORT $LN4@computesiz
; Line 230
  0002a	44 03 c1	 add	 r8d, ecx
; Line 231
  0002d	44 3b c0	 cmp	 r8d, eax
  00030	76 06		 jbe	 SHORT $LN4@computesiz
; Line 232
  00032	41 8b d9	 mov	 ebx, r9d
; Line 233
  00035	45 8b d8	 mov	 r11d, r8d
$LN4@computesiz:
; Line 228
  00038	45 03 c9	 add	 r9d, r9d
  0003b	49 83 c2 04	 add	 r10, 4
  0003f	41 8b c1	 mov	 eax, r9d
  00042	d1 e8		 shr	 eax, 1
  00044	3b f8		 cmp	 edi, eax
  00046	77 db		 ja	 SHORT $LL5@computesiz
; Line 238
  00048	44 89 1a	 mov	 DWORD PTR [rdx], r11d
; Line 239
  0004b	8b c3		 mov	 eax, ebx
; Line 240
  0004d	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00052	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  00057	c3		 ret	 0
$LN12@computesiz:
  00058	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  0005d	8b c3		 mov	 eax, ebx
  0005f	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00064	44 89 02	 mov	 DWORD PTR [rdx], r8d
  00067	c3		 ret	 0
computesizes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT findindex
_TEXT	SEGMENT
L$ = 48
t$ = 56
key$ = 64
findindex PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 161
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 56		 push	 r14
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 163
  00010	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00014	49 8b f8	 mov	 rdi, r8
  00017	48 8b ea	 mov	 rbp, rdx
  0001a	4c 8b f1	 mov	 r14, rcx
  0001d	85 c0		 test	 eax, eax
  0001f	75 11		 jne	 SHORT $LN9@findindex
; Line 185
  00021	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00026	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	41 5e		 pop	 r14
  00031	c3		 ret	 0
$LN9@findindex:
; Line 164
  00032	83 f8 13	 cmp	 eax, 19
  00035	75 1b		 jne	 SHORT $LN8@findindex
  00037	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0003a	48 85 c0	 test	 rax, rax
  0003d	7e 13		 jle	 SHORT $LN8@findindex
  0003f	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  00044	48 3b c1	 cmp	 rax, rcx
  00047	77 09		 ja	 SHORT $LN8@findindex
; Line 165
  00049	85 c0		 test	 eax, eax
  0004b	74 05		 je	 SHORT $LN8@findindex
  0004d	3b 42 0c	 cmp	 eax, DWORD PTR [rdx+12]
  00050	76 7f		 jbe	 SHORT $LN5@findindex
$LN8@findindex:
; Line 169
  00052	49 8b d0	 mov	 rdx, r8
  00055	48 8b cd	 mov	 rcx, rbp
  00058	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0005d	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00062	e8 00 00 00 00	 call	 mainposition
; Line 174
  00067	4c 8b c7	 mov	 r8, rdi
  0006a	48 8d 70 10	 lea	 rsi, QWORD PTR [rax+16]
  0006e	33 c9		 xor	 ecx, ecx
  00070	48 8b d8	 mov	 rbx, rax
  00073	48 8b d6	 mov	 rdx, rsi
  00076	e8 00 00 00 00	 call	 luaV_equalobj
  0007b	85 c0		 test	 eax, eax
  0007d	75 39		 jne	 SHORT $LN3@findindex
  0007f	90		 npad	 1
$LL6@findindex:
  00080	83 7b 18 0a	 cmp	 DWORD PTR [rbx+24], 10
  00084	75 0e		 jne	 SHORT $LN4@findindex
  00086	f6 47 08 40	 test	 BYTE PTR [rdi+8], 64	; 00000040H
  0008a	74 08		 je	 SHORT $LN4@findindex
  0008c	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0008f	48 39 06	 cmp	 QWORD PTR [rsi], rax
  00092	74 24		 je	 SHORT $LN3@findindex
$LN4@findindex:
; Line 179
  00094	48 63 43 1c	 movsxd	 rax, DWORD PTR [rbx+28]
; Line 180
  00098	85 c0		 test	 eax, eax
  0009a	74 46		 je	 SHORT $LN24@findindex
; Line 182
  0009c	48 c1 e0 05	 shl	 rax, 5
  000a0	4c 8b c7	 mov	 r8, rdi
  000a3	33 c9		 xor	 ecx, ecx
  000a5	48 03 d8	 add	 rbx, rax
  000a8	48 8d 73 10	 lea	 rsi, QWORD PTR [rbx+16]
  000ac	48 8b d6	 mov	 rdx, rsi
  000af	e8 00 00 00 00	 call	 luaV_equalobj
  000b4	85 c0		 test	 eax, eax
  000b6	74 c8		 je	 SHORT $LL6@findindex
$LN3@findindex:
; Line 175
  000b8	48 2b 5d 18	 sub	 rbx, QWORD PTR [rbp+24]
; Line 177
  000bc	8b 45 0c	 mov	 eax, DWORD PTR [rbp+12]
  000bf	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c4	48 c1 fb 05	 sar	 rbx, 5
  000c8	ff c0		 inc	 eax
  000ca	03 c3		 add	 eax, ebx
  000cc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN5@findindex:
; Line 185
  000d1	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000d6	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000db	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000df	41 5e		 pop	 r14
  000e1	c3		 ret	 0
$LN24@findindex:
; Line 181
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@FEBJBDLJ@invalid?5key?5to?5?8next?8?$AA@
  000e9	49 8b ce	 mov	 rcx, r14
  000ec	e8 00 00 00 00	 call	 luaG_runerror
  000f1	cc		 int	 3
$LN23@findindex:
findindex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT arrayindex
_TEXT	SEGMENT
key$ = 8
arrayindex PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 147
  00000	83 79 08 13	 cmp	 DWORD PTR [rcx+8], 19
  00004	75 12		 jne	 SHORT $LN1@arrayindex
; Line 148
  00006	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; Line 149
  00009	48 85 c0	 test	 rax, rax
  0000c	7e 0a		 jle	 SHORT $LN1@arrayindex
  0000e	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  00013	48 3b c1	 cmp	 rax, rcx
  00016	76 02		 jbe	 SHORT $LN3@arrayindex
$LN1@arrayindex:
; Line 152
  00018	33 c0		 xor	 eax, eax
$LN3@arrayindex:
; Line 153
  0001a	c3		 ret	 0
arrayindex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT mainposition
_TEXT	SEGMENT
t$ = 48
i$1 = 56
key$ = 56
mainposition PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 119
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 120
  00006	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  00009	4c 8b ca	 mov	 r9, rdx
  0000c	48 8b d9	 mov	 rbx, rcx
  0000f	83 e0 3f	 and	 eax, 63			; 0000003fH
  00012	ff c8		 dec	 eax
  00014	83 f8 15	 cmp	 eax, 21
  00017	0f 87 fe 00 00
	00		 ja	 $LN1@mainpositi
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00024	48 98		 cdqe
  00026	44 8b 84 81 00
	00 00 00	 mov	 r8d, DWORD PTR $LN20@mainpositi[rcx+rax*4]
  0002e	4c 03 c1	 add	 r8, rcx
  00031	41 ff e0	 jmp	 r8
$LN8@mainpositi:
; Line 122
  00034	0f b6 4b 0b	 movzx	 ecx, BYTE PTR [rbx+11]
  00038	b8 01 00 00 00	 mov	 eax, 1
  0003d	d3 e0		 shl	 eax, cl
  0003f	48 63 0a	 movsxd	 rcx, DWORD PTR [rdx]
  00042	ff c8		 dec	 eax
  00044	48 98		 cdqe
  00046	48 23 c1	 and	 rax, rcx
; Line 137
  00049	48 c1 e0 05	 shl	 rax, 5
  0004d	48 03 43 18	 add	 rax, QWORD PTR [rbx+24]
; Line 139
  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN7@mainpositi:
; Line 124
  00057	f2 41 0f 10 01	 movsdx	 xmm0, QWORD PTR [r9]
  0005c	48 8d 54 24 38	 lea	 rdx, QWORD PTR i$1[rsp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_frexp
  00067	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@41e0000000000000
  0006f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@c3e0000000000000
  00077	72 22		 jb	 SHORT $LN14@mainpositi
  00079	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@43e0000000000000
  00081	66 0f 2f c8	 comisd	 xmm1, xmm0
  00085	76 14		 jbe	 SHORT $LN14@mainpositi
  00087	f2 48 0f 2c c0	 cvttsd2si rax, xmm0
  0008c	03 44 24 38	 add	 eax, DWORD PTR i$1[rsp]
  00090	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00095	76 06		 jbe	 SHORT $LN13@mainpositi
  00097	f7 d0		 not	 eax
  00099	eb 02		 jmp	 SHORT $LN13@mainpositi
$LN14@mainpositi:
  0009b	33 c0		 xor	 eax, eax
$LN13@mainpositi:
  0009d	0f b6 4b 0b	 movzx	 ecx, BYTE PTR [rbx+11]
  000a1	99		 cdq
  000a2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a8	41 d3 e0	 shl	 r8d, cl
  000ab	41 ff c8	 dec	 r8d
  000ae	41 83 c8 01	 or	 r8d, 1
  000b2	41 f7 f8	 idiv	 r8d
  000b5	48 63 c2	 movsxd	 rax, edx
; Line 137
  000b8	48 c1 e0 05	 shl	 rax, 5
  000bc	48 03 43 18	 add	 rax, QWORD PTR [rbx+24]
; Line 139
  000c0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c4	5b		 pop	 rbx
  000c5	c3		 ret	 0
$LN6@mainpositi:
; Line 126
  000c6	0f b6 4b 0b	 movzx	 ecx, BYTE PTR [rbx+11]
  000ca	b8 01 00 00 00	 mov	 eax, 1
  000cf	d3 e0		 shl	 eax, cl
  000d1	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  000d4	48 63 51 0c	 movsxd	 rdx, DWORD PTR [rcx+12]
  000d8	ff c8		 dec	 eax
  000da	48 98		 cdqe
  000dc	48 23 c2	 and	 rax, rdx
; Line 137
  000df	48 c1 e0 05	 shl	 rax, 5
  000e3	48 03 43 18	 add	 rax, QWORD PTR [rbx+24]
; Line 139
  000e7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000eb	5b		 pop	 rbx
  000ec	c3		 ret	 0
$LN5@mainpositi:
; Line 128
  000ed	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  000f0	e8 00 00 00 00	 call	 luaS_hashlongstr
  000f5	0f b6 4b 0b	 movzx	 ecx, BYTE PTR [rbx+11]
  000f9	41 b8 01 00 00
	00		 mov	 r8d, 1
  000ff	41 d3 e0	 shl	 r8d, cl
  00102	48 98		 cdqe
  00104	41 ff c8	 dec	 r8d
  00107	49 63 c8	 movsxd	 rcx, r8d
  0010a	48 23 c1	 and	 rax, rcx
; Line 137
  0010d	48 c1 e0 05	 shl	 rax, 5
  00111	48 03 43 18	 add	 rax, QWORD PTR [rbx+24]
; Line 139
  00115	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00119	5b		 pop	 rbx
  0011a	c3		 ret	 0
$LN1@mainpositi:
; Line 137
  0011b	41 8b 01	 mov	 eax, DWORD PTR [r9]
  0011e	0f b6 4b 0b	 movzx	 ecx, BYTE PTR [rbx+11]
  00122	33 d2		 xor	 edx, edx
  00124	41 b8 01 00 00
	00		 mov	 r8d, 1
  0012a	41 d3 e0	 shl	 r8d, cl
  0012d	41 ff c8	 dec	 r8d
  00130	41 83 c8 01	 or	 r8d, 1
  00134	41 f7 f0	 div	 r8d
  00137	8b c2		 mov	 eax, edx
  00139	48 c1 e0 05	 shl	 rax, 5
  0013d	48 03 43 18	 add	 rax, QWORD PTR [rbx+24]
; Line 139
  00141	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00145	5b		 pop	 rbx
  00146	c3		 ret	 0
  00147	90		 npad	 1
$LN20@mainpositi:
  00148	00 00 00 00	 DD	 $LN8@mainpositi
  0014c	00 00 00 00	 DD	 $LN1@mainpositi
  00150	00 00 00 00	 DD	 $LN7@mainpositi
  00154	00 00 00 00	 DD	 $LN6@mainpositi
  00158	00 00 00 00	 DD	 $LN1@mainpositi
  0015c	00 00 00 00	 DD	 $LN1@mainpositi
  00160	00 00 00 00	 DD	 $LN1@mainpositi
  00164	00 00 00 00	 DD	 $LN1@mainpositi
  00168	00 00 00 00	 DD	 $LN1@mainpositi
  0016c	00 00 00 00	 DD	 $LN1@mainpositi
  00170	00 00 00 00	 DD	 $LN1@mainpositi
  00174	00 00 00 00	 DD	 $LN1@mainpositi
  00178	00 00 00 00	 DD	 $LN1@mainpositi
  0017c	00 00 00 00	 DD	 $LN1@mainpositi
  00180	00 00 00 00	 DD	 $LN1@mainpositi
  00184	00 00 00 00	 DD	 $LN1@mainpositi
  00188	00 00 00 00	 DD	 $LN1@mainpositi
  0018c	00 00 00 00	 DD	 $LN1@mainpositi
  00190	00 00 00 00	 DD	 $LN8@mainpositi
  00194	00 00 00 00	 DD	 $LN5@mainpositi
  00198	00 00 00 00	 DD	 $LN1@mainpositi
  0019c	00 00 00 00	 DD	 $LN1@mainpositi
mainposition ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT l_hashfloat
_TEXT	SEGMENT
i$ = 48
n$ = 48
l_hashfloat PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 99
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 102
  00004	48 8d 54 24 30	 lea	 rdx, QWORD PTR i$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_frexp
  0000f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@41e0000000000000
; Line 103
  00017	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@c3e0000000000000
  0001f	72 25		 jb	 SHORT $LN2@l_hashfloa
  00021	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@43e0000000000000
  00029	66 0f 2f c8	 comisd	 xmm1, xmm0
  0002d	76 17		 jbe	 SHORT $LN2@l_hashfloa
  0002f	f2 48 0f 2c c0	 cvttsd2si rax, xmm0
; Line 108
  00034	03 44 24 30	 add	 eax, DWORD PTR i$[rsp]
; Line 109
  00038	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0003d	76 09		 jbe	 SHORT $LN1@l_hashfloa
  0003f	f7 d0		 not	 eax
; Line 111
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
$LN2@l_hashfloa:
; Line 105
  00046	33 c0		 xor	 eax, eax
$LN1@l_hashfloa:
; Line 111
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
l_hashfloat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_getn
_TEXT	SEGMENT
t$ = 8
luaH_getn PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 642
  00000	44 8b 41 0c	 mov	 r8d, DWORD PTR [rcx+12]
; Line 643
  00004	45 85 c0	 test	 r8d, r8d
  00007	74 52		 je	 SHORT $LN8@luaH_getn
  00009	4c 8b 51 10	 mov	 r10, QWORD PTR [rcx+16]
  0000d	41 8d 50 ff	 lea	 edx, DWORD PTR [r8-1]
  00011	48 03 d2	 add	 rdx, rdx
  00014	41 83 7c d2 08
	00		 cmp	 DWORD PTR [r10+rdx*8+8], 0
  0001a	75 3f		 jne	 SHORT $LN8@luaH_getn
; Line 645
  0001c	45 33 c9	 xor	 r9d, r9d
; Line 646
  0001f	41 83 f8 01	 cmp	 r8d, 1
  00023	76 32		 jbe	 SHORT $LN6@luaH_getn
  00025	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL7@luaH_getn:
; Line 647
  00030	43 8d 14 01	 lea	 edx, DWORD PTR [r9+r8]
  00034	d1 ea		 shr	 edx, 1
; Line 648
  00036	8d 4a ff	 lea	 ecx, DWORD PTR [rdx-1]
  00039	48 03 c9	 add	 rcx, rcx
  0003c	41 83 7c ca 08
	00		 cmp	 DWORD PTR [r10+rcx*8+8], 0
  00042	75 05		 jne	 SHORT $LN5@luaH_getn
  00044	44 8b c2	 mov	 r8d, edx
  00047	eb 03		 jmp	 SHORT $LN4@luaH_getn
$LN5@luaH_getn:
; Line 649
  00049	44 8b ca	 mov	 r9d, edx
$LN4@luaH_getn:
; Line 646
  0004c	41 8b c0	 mov	 eax, r8d
  0004f	41 2b c1	 sub	 eax, r9d
  00052	83 f8 01	 cmp	 eax, 1
  00055	77 d9		 ja	 SHORT $LL7@luaH_getn
$LN6@luaH_getn:
; Line 651
  00057	41 8b c1	 mov	 eax, r9d
; Line 657
  0005a	c3		 ret	 0
$LN8@luaH_getn:
; Line 654
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:dummynode_
  00062	48 39 41 18	 cmp	 QWORD PTR [rcx+24], rax
  00066	75 04		 jne	 SHORT $LN2@luaH_getn
; Line 655
  00068	41 8b c0	 mov	 eax, r8d
; Line 657
  0006b	c3		 ret	 0
$LN2@luaH_getn:
; Line 656
  0006c	41 8b d0	 mov	 edx, r8d
  0006f	e9 00 00 00 00	 jmp	 unbound_search
luaH_getn ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_next
_TEXT	SEGMENT
L$ = 48
t$ = 56
key$ = 64
luaH_next PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 188
$LN22:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b f8	 mov	 rdi, r8
  0000d	48 8b da	 mov	 rbx, rdx
; Line 189
  00010	e8 00 00 00 00	 call	 findindex
  00015	44 8b 4b 0c	 mov	 r9d, DWORD PTR [rbx+12]
; Line 190
  00019	41 3b c1	 cmp	 eax, r9d
  0001c	73 18		 jae	 SHORT $LN6@luaH_next
; Line 191
  0001e	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
$LL8@luaH_next:
  00022	8b c8		 mov	 ecx, eax
  00024	48 03 c9	 add	 rcx, rcx
  00027	41 83 7c c8 08
	00		 cmp	 DWORD PTR [r8+rcx*8+8], 0
  0002d	75 42		 jne	 SHORT $LN13@luaH_next
; Line 190
  0002f	ff c0		 inc	 eax
  00031	41 3b c1	 cmp	 eax, r9d
  00034	72 ec		 jb	 SHORT $LL8@luaH_next
$LN6@luaH_next:
; Line 197
  00036	0f b6 4b 0b	 movzx	 ecx, BYTE PTR [rbx+11]
  0003a	ba 01 00 00 00	 mov	 edx, 1
  0003f	41 2b c1	 sub	 eax, r9d
  00042	d3 e2		 shl	 edx, cl
  00044	3b c2		 cmp	 eax, edx
  00046	7d 1c		 jge	 SHORT $LN2@luaH_next
; Line 198
  00048	4c 8b 43 18	 mov	 r8, QWORD PTR [rbx+24]
  0004c	0f 1f 40 00	 npad	 4
$LL4@luaH_next:
  00050	8b c8		 mov	 ecx, eax
  00052	48 c1 e1 05	 shl	 rcx, 5
  00056	42 83 7c 01 08
	00		 cmp	 DWORD PTR [rcx+r8+8], 0
  0005c	75 41		 jne	 SHORT $LN14@luaH_next
; Line 197
  0005e	ff c0		 inc	 eax
  00060	3b c2		 cmp	 eax, edx
  00062	7c ec		 jl	 SHORT $LL4@luaH_next
$LN2@luaH_next:
; Line 204
  00064	33 c0		 xor	 eax, eax
; Line 205
  00066	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
$LN13@luaH_next:
; Line 192
  00071	8d 50 01	 lea	 edx, DWORD PTR [rax+1]
  00074	c7 47 08 13 00
	00 00		 mov	 DWORD PTR [rdi+8], 19
; Line 193
  0007b	8b c8		 mov	 ecx, eax
  0007d	48 89 17	 mov	 QWORD PTR [rdi], rdx
  00080	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00084	48 03 c9	 add	 rcx, rcx
  00087	0f 10 04 c8	 movups	 xmm0, XMMWORD PTR [rax+rcx*8]
; Line 194
  0008b	b8 01 00 00 00	 mov	 eax, 1
  00090	0f 11 47 10	 movups	 XMMWORD PTR [rdi+16], xmm0
; Line 205
  00094	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00099	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
$LN14@luaH_next:
; Line 199
  0009f	8b c8		 mov	 ecx, eax
  000a1	48 c1 e1 05	 shl	 rcx, 5
  000a5	41 0f 10 44 08
	10		 movups	 xmm0, XMMWORD PTR [r8+rcx+16]
  000ab	0f 11 07	 movups	 XMMWORD PTR [rdi], xmm0
; Line 200
  000ae	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
; Line 205
  000b2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b7	0f 10 04 08	 movups	 xmm0, XMMWORD PTR [rax+rcx]
  000bb	b8 01 00 00 00	 mov	 eax, 1
  000c0	0f 11 47 10	 movups	 XMMWORD PTR [rdi+16], xmm0
  000c4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c8	5f		 pop	 rdi
  000c9	c3		 ret	 0
luaH_next ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_free
_TEXT	SEGMENT
L$ = 48
t$ = 56
luaH_free PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 416
$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
; Line 417
  0000d	48 8b 52 18	 mov	 rdx, QWORD PTR [rdx+24]
  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:dummynode_
  00018	48 8b f9	 mov	 rdi, rcx
  0001b	48 3b d0	 cmp	 rdx, rax
  0001e	74 1d		 je	 SHORT $LN1@luaH_free
; Line 418
  00020	0f b6 4b 0b	 movzx	 ecx, BYTE PTR [rbx+11]
  00024	b8 01 00 00 00	 mov	 eax, 1
  00029	45 33 c9	 xor	 r9d, r9d
  0002c	d3 e0		 shl	 eax, cl
  0002e	48 8b cf	 mov	 rcx, rdi
  00031	4c 63 c0	 movsxd	 r8, eax
  00034	49 c1 e0 05	 shl	 r8, 5
  00038	e8 00 00 00 00	 call	 luaM_realloc_
$LN1@luaH_free:
; Line 419
  0003d	44 8b 43 0c	 mov	 r8d, DWORD PTR [rbx+12]
  00041	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  00045	45 33 c9	 xor	 r9d, r9d
  00048	49 c1 e0 04	 shl	 r8, 4
  0004c	48 8b cf	 mov	 rcx, rdi
  0004f	e8 00 00 00 00	 call	 luaM_realloc_
; Line 420
  00054	45 33 c9	 xor	 r9d, r9d
  00057	48 8b d3	 mov	 rdx, rbx
  0005a	45 8d 41 38	 lea	 r8d, QWORD PTR [r9+56]
  0005e	48 8b cf	 mov	 rcx, rdi
; Line 421
  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
; Line 420
  0006b	e9 00 00 00 00	 jmp	 luaM_realloc_
luaH_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_resizearray
_TEXT	SEGMENT
L$ = 8
t$ = 16
nasize$ = 24
luaH_resizearray PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 370
  00000	48 8b c1	 mov	 rax, rcx
; Line 371
  00003	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dummynode_
  0000a	48 39 4a 18	 cmp	 QWORD PTR [rdx+24], rcx
  0000e	75 0b		 jne	 SHORT $LN3@luaH_resiz
  00010	45 33 c9	 xor	 r9d, r9d
; Line 372
  00013	48 8b c8	 mov	 rcx, rax
  00016	e9 00 00 00 00	 jmp	 luaH_resize
$LN3@luaH_resiz:
; Line 371
  0001b	0f b6 4a 0b	 movzx	 ecx, BYTE PTR [rdx+11]
  0001f	41 b9 01 00 00
	00		 mov	 r9d, 1
  00025	41 d3 e1	 shl	 r9d, cl
; Line 372
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e9 00 00 00 00	 jmp	 luaH_resize
luaH_resizearray ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_resize
_TEXT	SEGMENT
L$ = 80
t$ = 88
nasize$ = 96
nhsize$ = 104
luaH_resize PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 336
$LN36:
  00000	40 55		 push	 rbp
  00002	41 54		 push	 r12
  00004	41 56		 push	 r14
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 339
  0000a	8b 6a 0c	 mov	 ebp, DWORD PTR [rdx+12]
; Line 341
  0000d	4c 8b 62 18	 mov	 r12, QWORD PTR [rdx+24]
  00011	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00016	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  0001b	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00020	4c 89 6c 24 28	 mov	 QWORD PTR [rsp+40], r13
  00025	44 0f b6 6a 0b	 movzx	 r13d, BYTE PTR [rdx+11]
  0002a	41 8b f1	 mov	 esi, r9d
  0002d	41 8b d8	 mov	 ebx, r8d
  00030	48 8b fa	 mov	 rdi, rdx
  00033	4c 8b f1	 mov	 r14, rcx
; Line 342
  00036	44 3b c5	 cmp	 r8d, ebp
  00039	76 4a		 jbe	 SHORT $LN17@luaH_resiz
; Line 343
  0003b	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0003f	44 8b cb	 mov	 r9d, ebx
  00042	44 8b c5	 mov	 r8d, ebp
  00045	49 c1 e1 04	 shl	 r9, 4
  00049	49 c1 e0 04	 shl	 r8, 4
  0004d	e8 00 00 00 00	 call	 luaM_realloc_
  00052	8b 57 0c	 mov	 edx, DWORD PTR [rdi+12]
  00055	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax
  00059	3b d3		 cmp	 edx, ebx
  0005b	73 25		 jae	 SHORT $LN14@luaH_resiz
  0005d	8b ca		 mov	 ecx, edx
  0005f	8b c3		 mov	 eax, ebx
  00061	2b c2		 sub	 eax, edx
  00063	48 c1 e1 04	 shl	 rcx, 4
  00067	45 33 c0	 xor	 r8d, r8d
  0006a	8b d0		 mov	 edx, eax
  0006c	0f 1f 40 00	 npad	 4
$LL16@luaH_resiz:
  00070	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00074	48 8d 49 10	 lea	 rcx, QWORD PTR [rcx+16]
  00078	44 89 44 08 f8	 mov	 DWORD PTR [rax+rcx-8], r8d
  0007d	48 ff ca	 dec	 rdx
  00080	75 ee		 jne	 SHORT $LL16@luaH_resiz
$LN14@luaH_resiz:
  00082	89 5f 0c	 mov	 DWORD PTR [rdi+12], ebx
$LN17@luaH_resiz:
; Line 345
  00085	44 8b c6	 mov	 r8d, esi
  00088	48 8b d7	 mov	 rdx, rdi
  0008b	49 8b ce	 mov	 rcx, r14
  0008e	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00093	e8 00 00 00 00	 call	 setnodevector
; Line 346
  00098	3b dd		 cmp	 ebx, ebp
  0009a	73 5c		 jae	 SHORT $LN10@luaH_resiz
; Line 349
  0009c	4c 8b fb	 mov	 r15, rbx
  0009f	89 5f 0c	 mov	 DWORD PTR [rdi+12], ebx
  000a2	49 c1 e7 04	 shl	 r15, 4
  000a6	49 8b f7	 mov	 rsi, r15
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@luaH_resiz:
; Line 350
  000b0	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  000b4	83 7c 06 08 00	 cmp	 DWORD PTR [rsi+rax+8], 0
  000b9	74 19		 je	 SHORT $LN8@luaH_resiz
; Line 351
  000bb	44 8b cb	 mov	 r9d, ebx
  000be	44 8d 43 01	 lea	 r8d, DWORD PTR [rbx+1]
  000c2	48 8b d7	 mov	 rdx, rdi
  000c5	49 c1 e1 04	 shl	 r9, 4
  000c9	49 8b ce	 mov	 rcx, r14
  000cc	4c 03 c8	 add	 r9, rax
  000cf	e8 00 00 00 00	 call	 luaH_setint
$LN8@luaH_resiz:
; Line 349
  000d4	ff c3		 inc	 ebx
  000d6	48 83 c6 10	 add	 rsi, 16
  000da	3b dd		 cmp	 ebx, ebp
  000dc	72 d2		 jb	 SHORT $LL9@luaH_resiz
; Line 354
  000de	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  000e2	4c 8b c5	 mov	 r8, rbp
  000e5	4d 8b cf	 mov	 r9, r15
  000e8	49 c1 e0 04	 shl	 r8, 4
  000ec	49 8b ce	 mov	 rcx, r14
  000ef	e8 00 00 00 00	 call	 luaM_realloc_
  000f4	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax
$LN10@luaH_resiz:
; Line 357
  000f8	41 8b cd	 mov	 ecx, r13d
  000fb	4c 8b 6c 24 28	 mov	 r13, QWORD PTR [rsp+40]
  00100	bd 01 00 00 00	 mov	 ebp, 1
  00105	d3 e5		 shl	 ebp, cl
  00107	8d 45 ff	 lea	 eax, DWORD PTR [rbp-1]
  0010a	48 63 f0	 movsxd	 rsi, eax
  0010d	85 c0		 test	 eax, eax
  0010f	78 4a		 js	 SHORT $LN3@luaH_resiz
  00111	48 8b c6	 mov	 rax, rsi
  00114	49 8d 5c 24 10	 lea	 rbx, QWORD PTR [r12+16]
  00119	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:luaO_nilobject_
  00120	48 c1 e0 05	 shl	 rax, 5
  00124	48 03 d8	 add	 rbx, rax
$LL5@luaH_resiz:
; Line 359
  00127	83 7b f8 00	 cmp	 DWORD PTR [rbx-8], 0
  0012b	74 25		 je	 SHORT $LN4@luaH_resiz
; Line 362
  0012d	48 8b d3	 mov	 rdx, rbx
  00130	48 8b cf	 mov	 rcx, rdi
  00133	e8 00 00 00 00	 call	 luaH_get
  00138	49 3b c7	 cmp	 rax, r15
  0013b	75 0e		 jne	 SHORT $LN19@luaH_resiz
  0013d	4c 8b c3	 mov	 r8, rbx
  00140	48 8b d7	 mov	 rdx, rdi
  00143	49 8b ce	 mov	 rcx, r14
  00146	e8 00 00 00 00	 call	 luaH_newkey
$LN19@luaH_resiz:
  0014b	0f 10 43 f0	 movups	 xmm0, XMMWORD PTR [rbx-16]
  0014f	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
$LN4@luaH_resiz:
; Line 357
  00152	48 83 eb 20	 sub	 rbx, 32			; 00000020H
  00156	48 ff ce	 dec	 rsi
  00159	79 cc		 jns	 SHORT $LL5@luaH_resiz
$LN3@luaH_resiz:
  0015b	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  00160	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  00165	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0016a	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
; Line 365
  0016f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:dummynode_
  00176	4c 3b e0	 cmp	 r12, rax
  00179	74 15		 je	 SHORT $LN1@luaH_resiz
; Line 366
  0017b	4c 63 c5	 movsxd	 r8, ebp
  0017e	45 33 c9	 xor	 r9d, r9d
  00181	49 8b d4	 mov	 rdx, r12
  00184	49 c1 e0 05	 shl	 r8, 5
  00188	49 8b ce	 mov	 rcx, r14
  0018b	e8 00 00 00 00	 call	 luaM_realloc_
$LN1@luaH_resiz:
; Line 367
  00190	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00194	41 5e		 pop	 r14
  00196	41 5c		 pop	 r12
  00198	5d		 pop	 rbp
  00199	c3		 ret	 0
luaH_resize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_new
_TEXT	SEGMENT
L$ = 48
luaH_new PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 404
$LN17:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 405
  00004	ba 05 00 00 00	 mov	 edx, 5
  00009	44 8d 42 33	 lea	 r8d, QWORD PTR [rdx+51]
  0000d	e8 00 00 00 00	 call	 luaC_newobj
; Line 407
  00012	33 c9		 xor	 ecx, ecx
  00014	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx
; Line 409
  00018	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
; Line 410
  0001c	89 48 0c	 mov	 DWORD PTR [rax+12], ecx
; Line 411
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dummynode_
  00026	66 c7 40 0a ff
	00		 mov	 WORD PTR [rax+10], 255	; 000000ffH
  0002c	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
  00030	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
; Line 413
  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
luaH_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_set
_TEXT	SEGMENT
L$ = 48
t$ = 56
key$ = 64
luaH_set PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 591
$LN59:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b f1	 mov	 rsi, rcx
; Line 592
  00015	49 8b d0	 mov	 rdx, r8
  00018	48 8b cf	 mov	 rcx, rdi
  0001b	49 8b d8	 mov	 rbx, r8
  0001e	e8 00 00 00 00	 call	 luaH_get
; Line 593
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:luaO_nilobject_
  0002a	48 3b c1	 cmp	 rax, rcx
  0002d	75 0e		 jne	 SHORT $LN1@luaH_set
; Line 595
  0002f	4c 8b c3	 mov	 r8, rbx
  00032	48 8b d7	 mov	 rdx, rdi
  00035	48 8b ce	 mov	 rcx, rsi
  00038	e8 00 00 00 00	 call	 luaH_newkey
$LN1@luaH_set:
; Line 596
  0003d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00042	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
luaH_set ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_newkey
_TEXT	SEGMENT
aux$ = 32
L$ = 80
t$ = 88
k$1 = 96
key$ = 96
luaH_newkey PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 442
$LN42:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	41 56		 push	 r14
  00005	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 445
  00009	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  0000d	4d 8b f0	 mov	 r14, r8
  00010	48 8b f2	 mov	 rsi, rdx
  00013	48 8b e9	 mov	 rbp, rcx
  00016	85 c0		 test	 eax, eax
  00018	0f 84 b4 01 00
	00		 je	 $LN39@luaH_newke
; Line 446
  0001e	83 f8 03	 cmp	 eax, 3
  00021	75 2f		 jne	 SHORT $LN11@luaH_newke
; Line 448
  00023	48 8d 54 24 60	 lea	 rdx, QWORD PTR k$1[rsp]
  00028	45 33 c0	 xor	 r8d, r8d
  0002b	49 8b ce	 mov	 rcx, r14
  0002e	e8 00 00 00 00	 call	 luaV_tointeger
  00033	85 c0		 test	 eax, eax
  00035	0f 84 98 00 00
	00		 je	 $LN13@luaH_newke
; Line 449
  0003b	48 8b 44 24 60	 mov	 rax, QWORD PTR k$1[rsp]
  00040	c7 44 24 28 13
	00 00 00	 mov	 DWORD PTR aux$[rsp+8], 19
; Line 450
  00048	4c 8d 74 24 20	 lea	 r14, QWORD PTR aux$[rsp]
  0004d	48 89 44 24 20	 mov	 QWORD PTR aux$[rsp], rax
$LN11@luaH_newke:
; Line 455
  00052	49 8b d6	 mov	 rdx, r14
  00055	48 8b ce	 mov	 rcx, rsi
  00058	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0005d	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  00062	e8 00 00 00 00	 call	 mainposition
; Line 456
  00067	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0006b	48 8b f8	 mov	 rdi, rax
  0006e	75 10		 jne	 SHORT $LN26@luaH_newke
  00070	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:dummynode_
  00077	48 3b f8	 cmp	 rdi, rax
  0007a	0f 85 1b 01 00
	00		 jne	 $LN3@luaH_newke
$LN26@luaH_newke:
; Line 458
  00080	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]
  00084	48 39 46 20	 cmp	 QWORD PTR [rsi+32], rax
  00088	76 1a		 jbe	 SHORT $LN34@luaH_newke
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL23@luaH_newke:
  00090	48 83 46 20 e0	 add	 QWORD PTR [rsi+32], -32	; ffffffffffffffe0H
  00095	48 8b 5e 20	 mov	 rbx, QWORD PTR [rsi+32]
  00099	83 7b 18 00	 cmp	 DWORD PTR [rbx+24], 0
  0009d	74 4e		 je	 SHORT $LN28@luaH_newke
  0009f	48 3b d8	 cmp	 rbx, rax
  000a2	77 ec		 ja	 SHORT $LL23@luaH_newke
$LN34@luaH_newke:
; Line 460
  000a4	4d 8b c6	 mov	 r8, r14
  000a7	48 8b d6	 mov	 rdx, rsi
  000aa	48 8b cd	 mov	 rcx, rbp
  000ad	e8 00 00 00 00	 call	 rehash
; Line 462
  000b2	4d 8b c6	 mov	 r8, r14
  000b5	48 8b d6	 mov	 rdx, rsi
  000b8	48 8b cd	 mov	 rcx, rbp
  000bb	e8 00 00 00 00	 call	 luaH_set
$LN37@luaH_newke:
  000c0	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000c5	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
; Line 491
  000ca	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ce	41 5e		 pop	 r14
  000d0	5e		 pop	 rsi
  000d1	5d		 pop	 rbp
  000d2	c3		 ret	 0
$LN13@luaH_newke:
; Line 452
  000d3	f2 41 0f 10 06	 movsdx	 xmm0, QWORD PTR [r14]
  000d8	66 0f 2e c0	 ucomisd xmm0, xmm0
  000dc	0f 8a fd 00 00
	00		 jp	 $LN41@luaH_newke
  000e2	0f 84 6a ff ff
	ff		 je	 $LN11@luaH_newke
  000e8	e9 f2 00 00 00	 jmp	 $LN41@luaH_newke
$LN28@luaH_newke:
; Line 459
  000ed	48 85 db	 test	 rbx, rbx
  000f0	74 b2		 je	 SHORT $LN34@luaH_newke
; Line 465
  000f2	48 8d 57 10	 lea	 rdx, QWORD PTR [rdi+16]
  000f6	48 8b ce	 mov	 rcx, rsi
  000f9	e8 00 00 00 00	 call	 mainposition
  000fe	48 8b d0	 mov	 rdx, rax
; Line 466
  00101	48 3b c7	 cmp	 rax, rdi
  00104	74 6c		 je	 SHORT $LN7@luaH_newke
; Line 468
  00106	48 63 48 1c	 movsxd	 rcx, DWORD PTR [rax+28]
  0010a	48 c1 e1 05	 shl	 rcx, 5
  0010e	48 03 c8	 add	 rcx, rax
  00111	48 3b cf	 cmp	 rcx, rdi
  00114	74 25		 je	 SHORT $LN5@luaH_newke
  00116	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL6@luaH_newke:
; Line 469
  00120	48 63 4a 1c	 movsxd	 rcx, DWORD PTR [rdx+28]
  00124	48 c1 e1 05	 shl	 rcx, 5
  00128	48 03 d1	 add	 rdx, rcx
  0012b	48 63 42 1c	 movsxd	 rax, DWORD PTR [rdx+28]
  0012f	48 c1 e0 05	 shl	 rax, 5
  00133	48 03 c2	 add	 rax, rdx
  00136	48 3b c7	 cmp	 rax, rdi
  00139	75 e5		 jne	 SHORT $LL6@luaH_newke
$LN5@luaH_newke:
; Line 470
  0013b	48 8b c3	 mov	 rax, rbx
; Line 472
  0013e	33 c9		 xor	 ecx, ecx
  00140	48 2b c2	 sub	 rax, rdx
  00143	48 c1 f8 05	 sar	 rax, 5
  00147	89 42 1c	 mov	 DWORD PTR [rdx+28], eax
  0014a	0f 10 07	 movups	 xmm0, XMMWORD PTR [rdi]
  0014d	0f 11 03	 movups	 XMMWORD PTR [rbx], xmm0
  00150	0f 10 4f 10	 movups	 xmm1, XMMWORD PTR [rdi+16]
  00154	0f 11 4b 10	 movups	 XMMWORD PTR [rbx+16], xmm1
  00158	39 4f 1c	 cmp	 DWORD PTR [rdi+28], ecx
  0015b	74 10		 je	 SHORT $LN4@luaH_newke
; Line 473
  0015d	48 8b c7	 mov	 rax, rdi
  00160	48 2b c3	 sub	 rax, rbx
  00163	48 c1 f8 05	 sar	 rax, 5
  00167	01 43 1c	 add	 DWORD PTR [rbx+28], eax
; Line 474
  0016a	89 4f 1c	 mov	 DWORD PTR [rdi+28], ecx
$LN4@luaH_newke:
; Line 476
  0016d	89 4f 08	 mov	 DWORD PTR [rdi+8], ecx
; Line 478
  00170	eb 29		 jmp	 SHORT $LN3@luaH_newke
$LN7@luaH_newke:
; Line 480
  00172	48 63 47 1c	 movsxd	 rax, DWORD PTR [rdi+28]
  00176	85 c0		 test	 eax, eax
  00178	74 11		 je	 SHORT $LN2@luaH_newke
; Line 481
  0017a	48 c1 e0 05	 shl	 rax, 5
  0017e	48 2b c3	 sub	 rax, rbx
  00181	48 03 c7	 add	 rax, rdi
  00184	48 c1 f8 05	 sar	 rax, 5
  00188	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN2@luaH_newke:
; Line 483
  0018b	48 8b c3	 mov	 rax, rbx
  0018e	48 2b c7	 sub	 rax, rdi
  00191	48 c1 f8 05	 sar	 rax, 5
  00195	89 47 1c	 mov	 DWORD PTR [rdi+28], eax
; Line 484
  00198	48 8b fb	 mov	 rdi, rbx
$LN3@luaH_newke:
; Line 487
  0019b	49 8b 06	 mov	 rax, QWORD PTR [r14]
  0019e	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax
  001a2	41 8b 46 08	 mov	 eax, DWORD PTR [r14+8]
  001a6	89 47 18	 mov	 DWORD PTR [rdi+24], eax
; Line 488
  001a9	41 f6 46 08 40	 test	 BYTE PTR [r14+8], 64	; 00000040H
  001ae	74 1a		 je	 SHORT $LN19@luaH_newke
  001b0	f6 46 09 04	 test	 BYTE PTR [rsi+9], 4
  001b4	74 14		 je	 SHORT $LN19@luaH_newke
  001b6	49 8b 06	 mov	 rax, QWORD PTR [r14]
  001b9	f6 40 09 03	 test	 BYTE PTR [rax+9], 3
  001bd	74 0b		 je	 SHORT $LN19@luaH_newke
  001bf	48 8b d6	 mov	 rdx, rsi
  001c2	48 8b cd	 mov	 rcx, rbp
  001c5	e8 00 00 00 00	 call	 luaC_barrierback_
$LN19@luaH_newke:
; Line 490
  001ca	48 8b c7	 mov	 rax, rdi
  001cd	e9 ee fe ff ff	 jmp	 $LN37@luaH_newke
$LN39@luaH_newke:
; Line 445
  001d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BDIKLFBP@table?5index?5is?5nil?$AA@
  001d9	e8 00 00 00 00	 call	 luaG_runerror
  001de	cc		 int	 3
$LN41@luaH_newke:
; Line 453
  001df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BKBJANLJ@table?5index?5is?5NaN?$AA@
  001e6	48 8b cd	 mov	 rcx, rbp
  001e9	e8 00 00 00 00	 call	 luaG_runerror
  001ee	cc		 int	 3
$LN38@luaH_newke:
luaH_newkey ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_get
_TEXT	SEGMENT
t$ = 48
k$1 = 56
key$ = 56
luaH_get PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 570
$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 571
  0000a	44 8b 42 08	 mov	 r8d, DWORD PTR [rdx+8]
  0000e	48 8b da	 mov	 rbx, rdx
  00011	48 8b f9	 mov	 rdi, rcx
  00014	41 83 e0 3f	 and	 r8d, 63			; 0000003fH
  00018	0f 84 a2 00 00
	00		 je	 $LN4@luaH_get
  0001e	41 83 e8 03	 sub	 r8d, 3
  00022	74 5b		 je	 SHORT $LN3@luaH_get
  00024	41 ff c8	 dec	 r8d
  00027	74 18		 je	 SHORT $LN6@luaH_get
  00029	41 83 f8 0f	 cmp	 r8d, 15
  0002d	75 7c		 jne	 SHORT $LN2@luaH_get
; Line 573
  0002f	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
; Line 584
  00032	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
; Line 573
  0003c	e9 00 00 00 00	 jmp	 luaH_getint
$LN6@luaH_get:
; Line 572
  00041	0f b6 49 0b	 movzx	 ecx, BYTE PTR [rcx+11]
  00045	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	d3 e0		 shl	 eax, cl
  0004f	48 63 4a 0c	 movsxd	 rcx, DWORD PTR [rdx+12]
  00053	ff c8		 dec	 eax
  00055	48 98		 cdqe
  00057	48 23 c1	 and	 rax, rcx
  0005a	48 c1 e0 05	 shl	 rax, 5
  0005e	48 03 47 18	 add	 rax, QWORD PTR [rdi+24]
$LL15@luaH_get:
  00062	83 78 18 44	 cmp	 DWORD PTR [rax+24], 68	; 00000044H
  00066	75 06		 jne	 SHORT $LN13@luaH_get
  00068	48 39 50 10	 cmp	 QWORD PTR [rax+16], rdx
  0006c	74 59		 je	 SHORT $LN7@luaH_get
$LN13@luaH_get:
  0006e	48 63 48 1c	 movsxd	 rcx, DWORD PTR [rax+28]
  00072	85 c9		 test	 ecx, ecx
  00074	74 4a		 je	 SHORT $LN4@luaH_get
  00076	48 c1 e1 05	 shl	 rcx, 5
  0007a	48 03 c1	 add	 rax, rcx
  0007d	eb e3		 jmp	 SHORT $LL15@luaH_get
$LN3@luaH_get:
; Line 577
  0007f	48 8d 54 24 38	 lea	 rdx, QWORD PTR k$1[rsp]
  00084	45 33 c0	 xor	 r8d, r8d
  00087	48 8b cb	 mov	 rcx, rbx
  0008a	e8 00 00 00 00	 call	 luaV_tointeger
  0008f	85 c0		 test	 eax, eax
  00091	74 18		 je	 SHORT $LN2@luaH_get
; Line 578
  00093	48 8b 54 24 38	 mov	 rdx, QWORD PTR k$1[rsp]
  00098	48 8b cf	 mov	 rcx, rdi
  0009b	e8 00 00 00 00	 call	 luaH_getint
; Line 584
  000a0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
$LN2@luaH_get:
; Line 582
  000ab	48 8b d3	 mov	 rdx, rbx
  000ae	48 8b cf	 mov	 rcx, rdi
; Line 584
  000b1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ba	5f		 pop	 rdi
; Line 582
  000bb	e9 00 00 00 00	 jmp	 getgeneric
$LN4@luaH_get:
; Line 574
  000c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:luaO_nilobject_
$LN7@luaH_get:
; Line 584
  000c7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000cc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d0	5f		 pop	 rdi
  000d1	c3		 ret	 0
luaH_get ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_getstr
_TEXT	SEGMENT
ko$1 = 32
t$ = 64
key$ = 72
luaH_getstr PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 556
$LN31:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 557
  00006	0f b6 42 08	 movzx	 eax, BYTE PTR [rdx+8]
  0000a	4c 8b c1	 mov	 r8, rcx
  0000d	3c 04		 cmp	 al, 4
  0000f	75 3c		 jne	 SHORT $LN2@luaH_getst
; Line 558
  00011	0f b6 49 0b	 movzx	 ecx, BYTE PTR [rcx+11]
  00015	b8 01 00 00 00	 mov	 eax, 1
  0001a	d3 e0		 shl	 eax, cl
  0001c	ff c8		 dec	 eax
  0001e	48 63 d8	 movsxd	 rbx, eax
  00021	48 63 42 0c	 movsxd	 rax, DWORD PTR [rdx+12]
  00025	48 23 d8	 and	 rbx, rax
  00028	48 c1 e3 05	 shl	 rbx, 5
  0002c	49 03 58 18	 add	 rbx, QWORD PTR [r8+24]
$LL9@luaH_getst:
  00030	83 7b 18 44	 cmp	 DWORD PTR [rbx+24], 68	; 00000044H
  00034	75 06		 jne	 SHORT $LN7@luaH_getst
  00036	48 39 53 10	 cmp	 QWORD PTR [rbx+16], rdx
  0003a	74 77		 je	 SHORT $LN24@luaH_getst
$LN7@luaH_getst:
  0003c	48 63 43 1c	 movsxd	 rax, DWORD PTR [rbx+28]
  00040	85 c0		 test	 eax, eax
  00042	74 68		 je	 SHORT $LN25@luaH_getst
  00044	48 c1 e0 05	 shl	 rax, 5
  00048	48 03 d8	 add	 rbx, rax
  0004b	eb e3		 jmp	 SHORT $LL9@luaH_getst
$LN2@luaH_getst:
; Line 561
  0004d	0f b6 c0	 movzx	 eax, al
  00050	48 89 54 24 20	 mov	 QWORD PTR ko$1[rsp], rdx
; Line 562
  00055	48 8d 54 24 20	 lea	 rdx, QWORD PTR ko$1[rsp]
  0005a	83 c8 40	 or	 eax, 64			; 00000040H
  0005d	89 44 24 28	 mov	 DWORD PTR ko$1[rsp+8], eax
  00061	e8 00 00 00 00	 call	 mainposition
  00066	4c 8d 44 24 20	 lea	 r8, QWORD PTR ko$1[rsp]
  0006b	48 8d 50 10	 lea	 rdx, QWORD PTR [rax+16]
  0006f	33 c9		 xor	 ecx, ecx
  00071	48 8b d8	 mov	 rbx, rax
  00074	e8 00 00 00 00	 call	 luaV_equalobj
  00079	85 c0		 test	 eax, eax
  0007b	75 36		 jne	 SHORT $LN24@luaH_getst
  0007d	0f 1f 00	 npad	 3
$LL16@luaH_getst:
  00080	48 63 43 1c	 movsxd	 rax, DWORD PTR [rbx+28]
  00084	85 c0		 test	 eax, eax
  00086	74 24		 je	 SHORT $LN25@luaH_getst
  00088	48 c1 e0 05	 shl	 rax, 5
  0008c	4c 8d 44 24 20	 lea	 r8, QWORD PTR ko$1[rsp]
  00091	33 c9		 xor	 ecx, ecx
  00093	48 03 d8	 add	 rbx, rax
  00096	48 8d 53 10	 lea	 rdx, QWORD PTR [rbx+16]
  0009a	e8 00 00 00 00	 call	 luaV_equalobj
  0009f	85 c0		 test	 eax, eax
  000a1	74 dd		 je	 SHORT $LL16@luaH_getst
  000a3	48 8b c3	 mov	 rax, rbx
; Line 564
  000a6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000aa	5b		 pop	 rbx
  000ab	c3		 ret	 0
$LN25@luaH_getst:
; Line 562
  000ac	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:luaO_nilobject_
$LN24@luaH_getst:
  000b3	48 8b c3	 mov	 rax, rbx
; Line 564
  000b6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ba	5b		 pop	 rbx
  000bb	c3		 ret	 0
luaH_getstr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_getshortstr
_TEXT	SEGMENT
t$ = 8
key$ = 16
luaH_getshortstr PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 521
  00000	4c 63 42 0c	 movsxd	 r8, DWORD PTR [rdx+12]
  00004	4c 8b c9	 mov	 r9, rcx
  00007	0f b6 49 0b	 movzx	 ecx, BYTE PTR [rcx+11]
  0000b	b8 01 00 00 00	 mov	 eax, 1
  00010	d3 e0		 shl	 eax, cl
  00012	ff c8		 dec	 eax
  00014	48 98		 cdqe
  00016	49 23 c0	 and	 rax, r8
  00019	48 c1 e0 05	 shl	 rax, 5
  0001d	49 03 41 18	 add	 rax, QWORD PTR [r9+24]
$LL5@luaH_getsh:
; Line 525
  00021	83 78 18 44	 cmp	 DWORD PTR [rax+24], 68	; 00000044H
  00025	75 06		 jne	 SHORT $LN3@luaH_getsh
  00027	48 39 50 10	 cmp	 QWORD PTR [rax+16], rdx
  0002b	74 18		 je	 SHORT $LN4@luaH_getsh
$LN3@luaH_getsh:
; Line 528
  0002d	48 63 48 1c	 movsxd	 rcx, DWORD PTR [rax+28]
; Line 529
  00031	85 c9		 test	 ecx, ecx
  00033	74 09		 je	 SHORT $LN11@luaH_getsh
; Line 531
  00035	48 c1 e1 05	 shl	 rcx, 5
  00039	48 03 c1	 add	 rax, rcx
; Line 533
  0003c	eb e3		 jmp	 SHORT $LL5@luaH_getsh
$LN11@luaH_getsh:
; Line 530
  0003e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:luaO_nilobject_
$LN4@luaH_getsh:
; Line 534
  00045	c3		 ret	 0
luaH_getshortstr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_setint
_TEXT	SEGMENT
k$1 = 32
L$ = 64
t$ = 72
key$ = 80
value$ = 88
luaH_setint PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 599
$LN21:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 600
  00006	44 8b 52 0c	 mov	 r10d, DWORD PTR [rdx+12]
  0000a	49 8d 40 ff	 lea	 rax, QWORD PTR [r8-1]
  0000e	49 8b d9	 mov	 rbx, r9
  00011	4c 8b c9	 mov	 r9, rcx
  00014	49 3b c2	 cmp	 rax, r10
  00017	73 44		 jae	 SHORT $LN11@luaH_setin
  00019	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  0001d	4d 8b d0	 mov	 r10, r8
  00020	48 83 c0 f0	 add	 rax, -16
  00024	49 c1 e2 04	 shl	 r10, 4
  00028	49 03 c2	 add	 rax, r10
$LN16@luaH_setin:
; Line 602
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:luaO_nilobject_
  00032	48 3b c1	 cmp	 rax, rcx
  00035	75 1a		 jne	 SHORT $LN1@luaH_setin
$LN2@luaH_setin:
; Line 606
  00037	4c 89 44 24 20	 mov	 QWORD PTR k$1[rsp], r8
; Line 607
  0003c	4c 8d 44 24 20	 lea	 r8, QWORD PTR k$1[rsp]
  00041	49 8b c9	 mov	 rcx, r9
  00044	c7 44 24 28 13
	00 00 00	 mov	 DWORD PTR k$1[rsp+8], 19
  0004c	e8 00 00 00 00	 call	 luaH_newkey
$LN1@luaH_setin:
; Line 609
  00051	0f 10 03	 movups	 xmm0, XMMWORD PTR [rbx]
  00054	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
; Line 610
  00057	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005b	5b		 pop	 rbx
  0005c	c3		 ret	 0
; Line 600
$LN11@luaH_setin:
  0005d	0f b6 4a 0b	 movzx	 ecx, BYTE PTR [rdx+11]
  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	d3 e0		 shl	 eax, cl
  00068	49 63 c8	 movsxd	 rcx, r8d
  0006b	ff c8		 dec	 eax
  0006d	48 98		 cdqe
  0006f	48 23 c1	 and	 rax, rcx
  00072	48 c1 e0 05	 shl	 rax, 5
  00076	48 03 42 18	 add	 rax, QWORD PTR [rdx+24]
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL9@luaH_setin:
  00080	83 78 18 13	 cmp	 DWORD PTR [rax+24], 19
  00084	75 06		 jne	 SHORT $LN7@luaH_setin
  00086	4c 39 40 10	 cmp	 QWORD PTR [rax+16], r8
  0008a	74 9f		 je	 SHORT $LN16@luaH_setin
$LN7@luaH_setin:
  0008c	48 63 48 1c	 movsxd	 rcx, DWORD PTR [rax+28]
  00090	85 c9		 test	 ecx, ecx
  00092	74 a3		 je	 SHORT $LN2@luaH_setin
  00094	48 c1 e1 05	 shl	 rcx, 5
  00098	48 03 c1	 add	 rax, rcx
  0009b	eb e3		 jmp	 SHORT $LL9@luaH_setin
luaH_setint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaH_getint
_TEXT	SEGMENT
t$ = 8
key$ = 16
luaH_getint PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ltable.c
; Line 499
  00000	44 8b 41 0c	 mov	 r8d, DWORD PTR [rcx+12]
  00004	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00008	4c 8b c9	 mov	 r9, rcx
  0000b	49 3b c0	 cmp	 rax, r8
  0000e	73 10		 jae	 SHORT $LN7@luaH_getin
; Line 500
  00010	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00014	48 c1 e2 04	 shl	 rdx, 4
  00018	48 83 c2 f0	 add	 rdx, -16
  0001c	48 03 c2	 add	 rax, rdx
; Line 514
  0001f	c3		 ret	 0
$LN7@luaH_getin:
; Line 502
  00020	0f b6 49 0b	 movzx	 ecx, BYTE PTR [rcx+11]
  00024	b8 01 00 00 00	 mov	 eax, 1
  00029	d3 e0		 shl	 eax, cl
  0002b	48 63 ca	 movsxd	 rcx, edx
  0002e	ff c8		 dec	 eax
  00030	48 98		 cdqe
  00032	48 23 c1	 and	 rax, rcx
  00035	48 c1 e0 05	 shl	 rax, 5
  00039	49 03 41 18	 add	 rax, QWORD PTR [r9+24]
  0003d	0f 1f 00	 npad	 3
$LL5@luaH_getin:
; Line 504
  00040	83 78 18 13	 cmp	 DWORD PTR [rax+24], 19
  00044	75 06		 jne	 SHORT $LN3@luaH_getin
  00046	48 39 50 10	 cmp	 QWORD PTR [rax+16], rdx
  0004a	74 18		 je	 SHORT $LN6@luaH_getin
$LN3@luaH_getin:
; Line 507
  0004c	48 63 48 1c	 movsxd	 rcx, DWORD PTR [rax+28]
; Line 508
  00050	85 c9		 test	 ecx, ecx
  00052	74 09		 je	 SHORT $LN13@luaH_getin
; Line 509
  00054	48 c1 e1 05	 shl	 rcx, 5
  00058	48 03 c1	 add	 rax, rcx
; Line 511
  0005b	eb e3		 jmp	 SHORT $LL5@luaH_getin
$LN13@luaH_getin:
; Line 512
  0005d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:luaO_nilobject_
$LN6@luaH_getin:
; Line 514
  00064	c3		 ret	 0
luaH_getint ENDP
_TEXT	ENDS
END
