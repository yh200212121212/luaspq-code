; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	luaU_dump
PUBLIC	??_C@_04NBPDLJKJ@?$BLLua?$AA@			; `string'
PUBLIC	??_C@_06HHFEHHII@?$BJ?$JD?$AN?6?$BK?6?$AA@	; `string'
PUBLIC	__real@4077280000000000
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaU_dump DD imagerel $LN9
	DD	imagerel $LN9+119
	DD	imagerel $unwind$luaU_dump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpBlock DD imagerel DumpBlock
	DD	imagerel DumpBlock+46
	DD	imagerel $unwind$DumpBlock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpByte DD imagerel DumpByte
	DD	imagerel DumpByte+49
	DD	imagerel $unwind$DumpByte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpInt DD imagerel DumpInt
	DD	imagerel DumpInt+48
	DD	imagerel $unwind$DumpInt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpNumber DD imagerel DumpNumber
	DD	imagerel DumpNumber+50
	DD	imagerel $unwind$DumpNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpInteger DD imagerel DumpInteger
	DD	imagerel DumpInteger+49
	DD	imagerel $unwind$DumpInteger
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpString DD imagerel DumpString
	DD	imagerel DumpString+59
	DD	imagerel $unwind$DumpString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$DumpString DD imagerel DumpString+59
	DD	imagerel DumpString+234
	DD	imagerel $chain$0$DumpString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$DumpString DD imagerel DumpString+234
	DD	imagerel DumpString+240
	DD	imagerel $chain$1$DumpString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpCode DD imagerel DumpCode
	DD	imagerel DumpCode+100
	DD	imagerel $unwind$DumpCode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpFunction DD imagerel DumpFunction
	DD	imagerel DumpFunction+393
	DD	imagerel $unwind$DumpFunction
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpConstants DD imagerel DumpConstants
	DD	imagerel DumpConstants+68
	DD	imagerel $unwind$DumpConstants
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$DumpConstants DD imagerel DumpConstants+68
	DD	imagerel DumpConstants+282
	DD	imagerel $chain$0$DumpConstants
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$DumpConstants DD imagerel DumpConstants+282
	DD	imagerel DumpConstants+296
	DD	imagerel $chain$1$DumpConstants
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpProtos DD imagerel DumpProtos
	DD	imagerel DumpProtos+129
	DD	imagerel $unwind$DumpProtos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpUpvalues DD imagerel DumpUpvalues
	DD	imagerel DumpUpvalues+196
	DD	imagerel $unwind$DumpUpvalues
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpDebug DD imagerel DumpDebug
	DD	imagerel DumpDebug+364
	DD	imagerel $unwind$DumpDebug
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DumpHeader DD imagerel DumpHeader
	DD	imagerel DumpHeader+403
	DD	imagerel $unwind$DumpHeader
pdata	ENDS
;	COMDAT __real@4077280000000000
CONST	SEGMENT
__real@4077280000000000 DQ 04077280000000000r	; 370.5
CONST	ENDS
;	COMDAT ??_C@_06HHFEHHII@?$BJ?$JD?$AN?6?$BK?6?$AA@
CONST	SEGMENT
??_C@_06HHFEHHII@?$BJ?$JD?$AN?6?$BK?6?$AA@ DB 019H, 093H, 0dH, 0aH, 01aH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04NBPDLJKJ@?$BLLua?$AA@
CONST	SEGMENT
??_C@_04NBPDLJKJ@?$BLLua?$AA@ DB 01bH, 'Lua', 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpHeader DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpDebug DD 081201H
	DD	0b5412H
	DD	0a3412H
	DD	0e00e3212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpUpvalues DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpProtos DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$DumpConstants DD 021H
	DD	imagerel DumpConstants
	DD	imagerel DumpConstants+68
	DD	imagerel $unwind$DumpConstants
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$DumpConstants DD 020521H
	DD	096405H
	DD	imagerel DumpConstants
	DD	imagerel DumpConstants+68
	DD	imagerel $unwind$DumpConstants
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpConstants DD 060d01H
	DD	0a340dH
	DD	0e009320dH
	DD	050067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpFunction DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpCode DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$DumpString DD 021H
	DD	imagerel DumpString
	DD	imagerel DumpString+59
	DD	imagerel $unwind$DumpString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$DumpString DD 020521H
	DD	077405H
	DD	imagerel DumpString
	DD	imagerel DumpString+59
	DD	imagerel $unwind$DumpString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpString DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpInteger DD 020a01H
	DD	03006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpNumber DD 020b01H
	DD	03007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpInt DD 020901H
	DD	030053209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpByte DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DumpBlock DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaU_dump DD 020601H
	DD	030027206H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpHeader
_TEXT	SEGMENT
x$ = 48
x$ = 48
x$1 = 48
x$2 = 48
x$3 = 48
x$4 = 48
x$5 = 48
x$6 = 48
x$7 = 48
D$ = 48
DumpHeader PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 184
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 185
  00006	83 79 1c 00	 cmp	 DWORD PTR [rcx+28], 0
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	75 1a		 jne	 SHORT $LN3@DumpHeader
  0000f	4c 8b 49 10	 mov	 r9, QWORD PTR [rcx+16]
  00013	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NBPDLJKJ@?$BLLua?$AA@
  0001d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00023	ff 53 08	 call	 QWORD PTR [rbx+8]
  00026	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN3@DumpHeader:
; Line 186
  00029	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  0002d	c6 44 24 30 11	 mov	 BYTE PTR x$7[rsp], 17
  00032	75 18		 jne	 SHORT $LN8@DumpHeader
  00034	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00038	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0003b	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$7[rsp]
  00040	41 b8 01 00 00
	00		 mov	 r8d, 1
  00046	ff 53 08	 call	 QWORD PTR [rbx+8]
  00049	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN8@DumpHeader:
; Line 187
  0004c	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  00050	c6 44 24 30 00	 mov	 BYTE PTR x$5[rsp], 0
  00055	75 34		 jne	 SHORT $LN16@DumpHeader
  00057	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  0005b	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0005e	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$5[rsp]
  00063	41 b8 01 00 00
	00		 mov	 r8d, 1
  00069	ff 53 08	 call	 QWORD PTR [rbx+8]
  0006c	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
; Line 188
  0006f	85 c0		 test	 eax, eax
  00071	75 18		 jne	 SHORT $LN16@DumpHeader
  00073	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00077	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0007a	44 8d 40 06	 lea	 r8d, QWORD PTR [rax+6]
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06HHFEHHII@?$BJ?$JD?$AN?6?$BK?6?$AA@
  00085	ff 53 08	 call	 QWORD PTR [rbx+8]
  00088	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN16@DumpHeader:
; Line 189
  0008b	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  0008f	c6 44 24 30 04	 mov	 BYTE PTR x$6[rsp], 4
  00094	75 18		 jne	 SHORT $LN21@DumpHeader
  00096	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  0009a	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0009d	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$6[rsp]
  000a2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a8	ff 53 08	 call	 QWORD PTR [rbx+8]
  000ab	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN21@DumpHeader:
; Line 190
  000ae	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  000b2	c6 44 24 30 08	 mov	 BYTE PTR x$4[rsp], 8
  000b7	75 18		 jne	 SHORT $LN26@DumpHeader
  000b9	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  000bd	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000c0	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$4[rsp]
  000c5	41 b8 01 00 00
	00		 mov	 r8d, 1
  000cb	ff 53 08	 call	 QWORD PTR [rbx+8]
  000ce	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN26@DumpHeader:
; Line 191
  000d1	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  000d5	c6 44 24 30 04	 mov	 BYTE PTR x$3[rsp], 4
  000da	75 18		 jne	 SHORT $LN31@DumpHeader
  000dc	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  000e0	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000e3	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$3[rsp]
  000e8	41 b8 01 00 00
	00		 mov	 r8d, 1
  000ee	ff 53 08	 call	 QWORD PTR [rbx+8]
  000f1	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN31@DumpHeader:
; Line 192
  000f4	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  000f8	c6 44 24 30 08	 mov	 BYTE PTR x$2[rsp], 8
  000fd	75 18		 jne	 SHORT $LN36@DumpHeader
  000ff	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00103	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00106	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$2[rsp]
  0010b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00111	ff 53 08	 call	 QWORD PTR [rbx+8]
  00114	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN36@DumpHeader:
; Line 193
  00117	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  0011b	c6 44 24 30 08	 mov	 BYTE PTR x$1[rsp], 8
  00120	75 18		 jne	 SHORT $LN41@DumpHeader
  00122	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00126	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00129	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$1[rsp]
  0012e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00134	ff 53 08	 call	 QWORD PTR [rbx+8]
  00137	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN41@DumpHeader:
; Line 194
  0013a	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  0013e	48 c7 44 24 30
	78 56 00 00	 mov	 QWORD PTR x$[rsp], 22136 ; 00005678H
  00147	75 18		 jne	 SHORT $LN46@DumpHeader
  00149	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  0014d	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00150	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  00155	41 b8 08 00 00
	00		 mov	 r8d, 8
  0015b	ff 53 08	 call	 QWORD PTR [rbx+8]
  0015e	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN46@DumpHeader:
; Line 195
  00161	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  00165	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@4077280000000000
  0016d	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR x$[rsp], xmm0
  00173	75 18		 jne	 SHORT $LN51@DumpHeader
  00175	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00179	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0017c	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  00181	41 b8 08 00 00
	00		 mov	 r8d, 8
  00187	ff 53 08	 call	 QWORD PTR [rbx+8]
  0018a	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN51@DumpHeader:
; Line 196
  0018d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00191	5b		 pop	 rbx
  00192	c3		 ret	 0
DumpHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpDebug
_TEXT	SEGMENT
x$ = 64
x$ = 64
x$ = 64
x$ = 64
f$ = 64
x$ = 72
D$ = 72
DumpDebug PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 147
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 56		 push	 r14
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 149
  00012	33 ff		 xor	 edi, edi
  00014	48 8b da	 mov	 rbx, rdx
  00017	48 8b e9	 mov	 rbp, rcx
  0001a	8b f7		 mov	 esi, edi
  0001c	39 7a 18	 cmp	 DWORD PTR [rdx+24], edi
  0001f	75 03		 jne	 SHORT $LN10@DumpDebug
  00021	8b 71 1c	 mov	 esi, DWORD PTR [rcx+28]
$LN10@DumpDebug:
; Line 150
  00024	89 74 24 40	 mov	 DWORD PTR x$[rsp], esi
  00028	39 7a 1c	 cmp	 DWORD PTR [rdx+28], edi
  0002b	75 18		 jne	 SHORT $LN17@DumpDebug
  0002d	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  00031	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00034	48 8d 54 24 40	 lea	 rdx, QWORD PTR x$[rsp]
  00039	41 b8 04 00 00
	00		 mov	 r8d, 4
  0003f	ff 53 08	 call	 QWORD PTR [rbx+8]
  00042	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN17@DumpDebug:
; Line 151
  00045	48 63 c6	 movsxd	 rax, esi
  00048	4c 8d 04 85 00
	00 00 00	 lea	 r8, QWORD PTR [rax*4]
  00050	39 7b 1c	 cmp	 DWORD PTR [rbx+28], edi
  00053	75 16		 jne	 SHORT $LN20@DumpDebug
  00055	4d 85 c0	 test	 r8, r8
  00058	74 11		 je	 SHORT $LN20@DumpDebug
  0005a	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  0005e	48 8b 55 48	 mov	 rdx, QWORD PTR [rbp+72]
  00062	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00065	ff 53 08	 call	 QWORD PTR [rbx+8]
  00068	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN20@DumpDebug:
; Line 152
  0006b	8b f7		 mov	 esi, edi
  0006d	39 7b 18	 cmp	 DWORD PTR [rbx+24], edi
  00070	75 03		 jne	 SHORT $LN12@DumpDebug
  00072	8b 75 24	 mov	 esi, DWORD PTR [rbp+36]
$LN12@DumpDebug:
; Line 153
  00075	89 74 24 40	 mov	 DWORD PTR x$[rsp], esi
  00079	39 7b 1c	 cmp	 DWORD PTR [rbx+28], edi
  0007c	75 18		 jne	 SHORT $LN25@DumpDebug
  0007e	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00082	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00085	48 8d 54 24 40	 lea	 rdx, QWORD PTR x$[rsp]
  0008a	41 b8 04 00 00
	00		 mov	 r8d, 4
  00090	ff 53 08	 call	 QWORD PTR [rbx+8]
  00093	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN25@DumpDebug:
; Line 154
  00096	4c 63 f6	 movsxd	 r14, esi
  00099	85 f6		 test	 esi, esi
  0009b	7e 6e		 jle	 SHORT $LN4@DumpDebug
  0009d	48 8b f7	 mov	 rsi, rdi
$LL6@DumpDebug:
; Line 155
  000a0	48 8b 4d 50	 mov	 rcx, QWORD PTR [rbp+80]
  000a4	48 8b d3	 mov	 rdx, rbx
  000a7	48 8b 0c 31	 mov	 rcx, QWORD PTR [rcx+rsi]
  000ab	e8 00 00 00 00	 call	 DumpString
; Line 156
  000b0	48 8b 45 50	 mov	 rax, QWORD PTR [rbp+80]
  000b4	8b 4c 30 08	 mov	 ecx, DWORD PTR [rax+rsi+8]
  000b8	89 4c 24 40	 mov	 DWORD PTR x$[rsp], ecx
  000bc	39 7b 1c	 cmp	 DWORD PTR [rbx+28], edi
  000bf	75 18		 jne	 SHORT $LN30@DumpDebug
  000c1	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  000c5	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000c8	48 8d 54 24 40	 lea	 rdx, QWORD PTR x$[rsp]
  000cd	41 b8 04 00 00
	00		 mov	 r8d, 4
  000d3	ff 53 08	 call	 QWORD PTR [rbx+8]
  000d6	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN30@DumpDebug:
; Line 157
  000d9	48 8b 45 50	 mov	 rax, QWORD PTR [rbp+80]
  000dd	8b 4c 30 0c	 mov	 ecx, DWORD PTR [rax+rsi+12]
  000e1	89 4c 24 48	 mov	 DWORD PTR x$[rsp], ecx
  000e5	39 7b 1c	 cmp	 DWORD PTR [rbx+28], edi
  000e8	75 18		 jne	 SHORT $LN5@DumpDebug
  000ea	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  000ee	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000f1	48 8d 54 24 48	 lea	 rdx, QWORD PTR x$[rsp]
  000f6	41 b8 04 00 00
	00		 mov	 r8d, 4
  000fc	ff 53 08	 call	 QWORD PTR [rbx+8]
  000ff	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN5@DumpDebug:
; Line 154
  00102	48 83 c6 10	 add	 rsi, 16
  00106	49 ff ce	 dec	 r14
  00109	75 95		 jne	 SHORT $LL6@DumpDebug
$LN4@DumpDebug:
; Line 159
  0010b	8b f7		 mov	 esi, edi
  0010d	39 7b 18	 cmp	 DWORD PTR [rbx+24], edi
  00110	75 03		 jne	 SHORT $LN14@DumpDebug
  00112	8b 75 10	 mov	 esi, DWORD PTR [rbp+16]
$LN14@DumpDebug:
; Line 160
  00115	89 74 24 40	 mov	 DWORD PTR x$[rsp], esi
  00119	39 7b 1c	 cmp	 DWORD PTR [rbx+28], edi
  0011c	75 18		 jne	 SHORT $LN40@DumpDebug
  0011e	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00122	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00125	48 8d 54 24 40	 lea	 rdx, QWORD PTR x$[rsp]
  0012a	41 b8 04 00 00
	00		 mov	 r8d, 4
  00130	ff 53 08	 call	 QWORD PTR [rbx+8]
  00133	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN40@DumpDebug:
; Line 161
  00136	48 63 f6	 movsxd	 rsi, esi
  00139	48 85 f6	 test	 rsi, rsi
  0013c	7e 1b		 jle	 SHORT $LN1@DumpDebug
  0013e	66 90		 npad	 2
$LL3@DumpDebug:
; Line 162
  00140	48 8b 4d 58	 mov	 rcx, QWORD PTR [rbp+88]
  00144	48 8b d3	 mov	 rdx, rbx
  00147	48 8b 0c 39	 mov	 rcx, QWORD PTR [rcx+rdi]
  0014b	e8 00 00 00 00	 call	 DumpString
  00150	48 8d 7f 10	 lea	 rdi, QWORD PTR [rdi+16]
  00154	48 ff ce	 dec	 rsi
  00157	75 e7		 jne	 SHORT $LL3@DumpDebug
$LN1@DumpDebug:
; Line 163
  00159	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0015e	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00163	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00167	41 5e		 pop	 r14
  00169	5f		 pop	 rdi
  0016a	5e		 pop	 rsi
  0016b	c3		 ret	 0
DumpDebug ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpUpvalues
_TEXT	SEGMENT
x$1 = 48
x$2 = 48
x$ = 48
f$ = 48
D$ = 56
DumpUpvalues PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 137
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 139
  00014	83 7a 1c 00	 cmp	 DWORD PTR [rdx+28], 0
  00018	48 63 79 10	 movsxd	 rdi, DWORD PTR [rcx+16]
  0001c	48 8b da	 mov	 rbx, rdx
  0001f	89 7c 24 30	 mov	 DWORD PTR x$[rsp], edi
  00023	48 8b e9	 mov	 rbp, rcx
  00026	75 18		 jne	 SHORT $LN8@DumpUpvalu
  00028	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  0002c	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0002f	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  00034	41 b8 04 00 00
	00		 mov	 r8d, 4
  0003a	ff 53 08	 call	 QWORD PTR [rbx+8]
  0003d	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN8@DumpUpvalu:
; Line 140
  00040	48 8b f7	 mov	 rsi, rdi
  00043	85 ff		 test	 edi, edi
  00045	7e 68		 jle	 SHORT $LN1@DumpUpvalu
  00047	33 ff		 xor	 edi, edi
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@DumpUpvalu:
; Line 141
  00050	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  00054	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  00058	0f b6 4c 38 08	 movzx	 ecx, BYTE PTR [rax+rdi+8]
  0005d	88 4c 24 30	 mov	 BYTE PTR x$2[rsp], cl
  00061	75 18		 jne	 SHORT $LN13@DumpUpvalu
  00063	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00067	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0006a	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$2[rsp]
  0006f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00075	ff 53 08	 call	 QWORD PTR [rbx+8]
  00078	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN13@DumpUpvalu:
; Line 142
  0007b	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  0007f	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  00083	0f b6 4c 38 09	 movzx	 ecx, BYTE PTR [rax+rdi+9]
  00088	88 4c 24 30	 mov	 BYTE PTR x$1[rsp], cl
  0008c	75 18		 jne	 SHORT $LN2@DumpUpvalu
  0008e	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00092	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00095	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$1[rsp]
  0009a	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a0	ff 53 08	 call	 QWORD PTR [rbx+8]
  000a3	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN2@DumpUpvalu:
; Line 140
  000a6	48 83 c7 10	 add	 rdi, 16
  000aa	48 ff ce	 dec	 rsi
  000ad	75 a1		 jne	 SHORT $LL3@DumpUpvalu
$LN1@DumpUpvalu:
; Line 144
  000af	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000b4	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000b9	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000be	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c2	5f		 pop	 rdi
  000c3	c3		 ret	 0
DumpUpvalues ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpProtos
_TEXT	SEGMENT
x$ = 48
f$ = 48
D$ = 56
DumpProtos PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 128
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 131
  00014	83 7a 1c 00	 cmp	 DWORD PTR [rdx+28], 0
  00018	48 63 69 20	 movsxd	 rbp, DWORD PTR [rcx+32]
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	89 6c 24 30	 mov	 DWORD PTR x$[rsp], ebp
  00023	48 8b f9	 mov	 rdi, rcx
  00026	75 18		 jne	 SHORT $LN8@DumpProtos
  00028	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  0002c	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0002f	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  00034	41 b8 04 00 00
	00		 mov	 r8d, 4
  0003a	ff 56 08	 call	 QWORD PTR [rsi+8]
  0003d	89 46 1c	 mov	 DWORD PTR [rsi+28], eax
$LN8@DumpProtos:
; Line 132
  00040	33 db		 xor	 ebx, ebx
  00042	48 85 ed	 test	 rbp, rbp
  00045	7e 25		 jle	 SHORT $LN1@DumpProtos
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL3@DumpProtos:
; Line 133
  00050	48 8b 4f 40	 mov	 rcx, QWORD PTR [rdi+64]
  00054	48 8b 57 68	 mov	 rdx, QWORD PTR [rdi+104]
  00058	4c 8b c6	 mov	 r8, rsi
  0005b	48 8b 0c d9	 mov	 rcx, QWORD PTR [rcx+rbx*8]
  0005f	e8 00 00 00 00	 call	 DumpFunction
  00064	48 ff c3	 inc	 rbx
  00067	48 3b dd	 cmp	 rbx, rbp
  0006a	7c e4		 jl	 SHORT $LL3@DumpProtos
$LN1@DumpProtos:
; Line 134
  0006c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00071	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00076	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0007b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007f	5f		 pop	 rdi
  00080	c3		 ret	 0
DumpProtos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpConstants
_TEXT	SEGMENT
x$ = 64
x$ = 64
x$1 = 64
x$2 = 64
x$ = 64
f$ = 64
D$ = 72
DumpConstants PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 98
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	41 56		 push	 r14
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 101
  0000d	83 7a 1c 00	 cmp	 DWORD PTR [rdx+28], 0
  00011	48 63 79 14	 movsxd	 rdi, DWORD PTR [rcx+20]
  00015	48 8b da	 mov	 rbx, rdx
  00018	89 7c 24 40	 mov	 DWORD PTR x$[rsp], edi
  0001c	4c 8b f1	 mov	 r14, rcx
  0001f	75 18		 jne	 SHORT $LN16@DumpConsta
  00021	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  00025	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00028	48 8d 54 24 40	 lea	 rdx, QWORD PTR x$[rsp]
  0002d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00033	ff 53 08	 call	 QWORD PTR [rbx+8]
  00036	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN16@DumpConsta:
; Line 102
  00039	48 8b ef	 mov	 rbp, rdi
  0003c	85 ff		 test	 edi, edi
  0003e	0f 8e d6 00 00
	00		 jle	 $LN9@DumpConsta
  00044	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00049	33 ff		 xor	 edi, edi
  0004b	0f 1f 44 00 00	 npad	 5
$LL11@DumpConsta:
  00050	49 8b 76 30	 mov	 rsi, QWORD PTR [r14+48]
; Line 104
  00054	0f b6 44 37 08	 movzx	 eax, BYTE PTR [rdi+rsi+8]
  00059	24 3f		 and	 al, 63			; 0000003fH
  0005b	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  0005f	88 44 24 40	 mov	 BYTE PTR x$2[rsp], al
  00063	75 18		 jne	 SHORT $LN21@DumpConsta
  00065	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00069	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0006c	48 8d 54 24 40	 lea	 rdx, QWORD PTR x$2[rsp]
  00071	41 b8 01 00 00
	00		 mov	 r8d, 1
  00077	ff 53 08	 call	 QWORD PTR [rbx+8]
  0007a	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN21@DumpConsta:
; Line 105
  0007d	8b 4c 37 08	 mov	 ecx, DWORD PTR [rdi+rsi+8]
  00081	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00084	ff c9		 dec	 ecx
  00086	74 5a		 je	 SHORT $LN5@DumpConsta
  00088	83 e9 02	 sub	 ecx, 2
  0008b	74 37		 je	 SHORT $LN4@DumpConsta
  0008d	ff c9		 dec	 ecx
  0008f	74 09		 je	 SHORT $LN2@DumpConsta
  00091	83 e9 0f	 sub	 ecx, 15
  00094	74 12		 je	 SHORT $LN3@DumpConsta
  00096	ff c9		 dec	 ecx
  00098	75 6e		 jne	 SHORT $LN10@DumpConsta
$LN2@DumpConsta:
; Line 119
  0009a	48 8b 0c 37	 mov	 rcx, QWORD PTR [rdi+rsi]
  0009e	48 8b d3	 mov	 rdx, rbx
  000a1	e8 00 00 00 00	 call	 DumpString
; Line 120
  000a6	eb 60		 jmp	 SHORT $LN10@DumpConsta
$LN3@DumpConsta:
; Line 115
  000a8	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  000ac	48 8b 04 37	 mov	 rax, QWORD PTR [rdi+rsi]
  000b0	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
  000b5	75 51		 jne	 SHORT $LN10@DumpConsta
  000b7	41 b8 08 00 00
	00		 mov	 r8d, 8
  000bd	48 8d 54 24 40	 lea	 rdx, QWORD PTR x$[rsp]
; Line 116
  000c2	eb 37		 jmp	 SHORT $LN43@DumpConsta
$LN4@DumpConsta:
; Line 112
  000c4	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  000c8	f2 0f 10 04 37	 movsdx	 xmm0, QWORD PTR [rdi+rsi]
  000cd	f2 0f 11 44 24
	40		 movsdx	 QWORD PTR x$[rsp], xmm0
  000d3	75 33		 jne	 SHORT $LN10@DumpConsta
  000d5	41 b8 08 00 00
	00		 mov	 r8d, 8
  000db	48 8d 54 24 40	 lea	 rdx, QWORD PTR x$[rsp]
; Line 113
  000e0	eb 19		 jmp	 SHORT $LN43@DumpConsta
$LN5@DumpConsta:
; Line 109
  000e2	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  000e6	0f b6 04 37	 movzx	 eax, BYTE PTR [rdi+rsi]
  000ea	88 44 24 40	 mov	 BYTE PTR x$1[rsp], al
  000ee	75 18		 jne	 SHORT $LN10@DumpConsta
  000f0	41 b8 01 00 00
	00		 mov	 r8d, 1
  000f6	48 8d 54 24 40	 lea	 rdx, QWORD PTR x$1[rsp]
$LN43@DumpConsta:
  000fb	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  000ff	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00102	ff 53 08	 call	 QWORD PTR [rbx+8]
  00105	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN10@DumpConsta:
; Line 102
  00108	48 83 c7 10	 add	 rdi, 16
  0010c	48 ff cd	 dec	 rbp
  0010f	0f 85 3b ff ff
	ff		 jne	 $LL11@DumpConsta
  00115	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
$LN9@DumpConsta:
; Line 125
  0011a	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0011f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00123	41 5e		 pop	 r14
  00125	5f		 pop	 rdi
  00126	5d		 pop	 rbp
  00127	c3		 ret	 0
DumpConstants ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpFunction
_TEXT	SEGMENT
x$ = 48
x$1 = 48
x$2 = 48
x$3 = 48
x$4 = 48
x$ = 48
x$ = 48
f$ = 48
psource$ = 56
D$ = 64
DumpFunction PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 166
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 167
  0000a	41 83 78 18 00	 cmp	 DWORD PTR [r8+24], 0
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b f9	 mov	 rdi, rcx
  00015	75 13		 jne	 SHORT $LN2@DumpFuncti
  00017	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0001b	48 3b ca	 cmp	 rcx, rdx
  0001e	74 0a		 je	 SHORT $LN2@DumpFuncti
; Line 170
  00020	48 8b d3	 mov	 rdx, rbx
  00023	e8 00 00 00 00	 call	 DumpString
  00028	eb 24		 jmp	 SHORT $LN16@DumpFuncti
$LN2@DumpFuncti:
; Line 168
  0002a	41 83 78 1c 00	 cmp	 DWORD PTR [r8+28], 0
  0002f	c6 44 24 30 00	 mov	 BYTE PTR x$4[rsp], 0
  00034	75 18		 jne	 SHORT $LN16@DumpFuncti
  00036	4d 8b 48 10	 mov	 r9, QWORD PTR [r8+16]
  0003a	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0003d	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$4[rsp]
  00042	41 b8 01 00 00
	00		 mov	 r8d, 1
  00048	ff 53 08	 call	 QWORD PTR [rbx+8]
  0004b	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN16@DumpFuncti:
; Line 171
  0004e	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  00052	8b 47 28	 mov	 eax, DWORD PTR [rdi+40]
  00055	89 44 24 30	 mov	 DWORD PTR x$[rsp], eax
  00059	75 18		 jne	 SHORT $LN37@DumpFuncti
  0005b	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  0005f	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00062	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  00067	41 b8 04 00 00
	00		 mov	 r8d, 4
  0006d	ff 53 08	 call	 QWORD PTR [rbx+8]
  00070	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN37@DumpFuncti:
; Line 172
  00073	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  00077	8b 47 2c	 mov	 eax, DWORD PTR [rdi+44]
  0007a	89 44 24 30	 mov	 DWORD PTR x$[rsp], eax
  0007e	75 18		 jne	 SHORT $LN42@DumpFuncti
  00080	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00084	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00087	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  0008c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00092	ff 53 08	 call	 QWORD PTR [rbx+8]
  00095	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN42@DumpFuncti:
; Line 173
  00098	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  0009c	0f b6 47 0a	 movzx	 eax, BYTE PTR [rdi+10]
  000a0	88 44 24 30	 mov	 BYTE PTR x$3[rsp], al
  000a4	75 18		 jne	 SHORT $LN47@DumpFuncti
  000a6	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  000aa	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000ad	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$3[rsp]
  000b2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000b8	ff 53 08	 call	 QWORD PTR [rbx+8]
  000bb	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN47@DumpFuncti:
; Line 174
  000be	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  000c2	0f b6 47 0b	 movzx	 eax, BYTE PTR [rdi+11]
  000c6	88 44 24 30	 mov	 BYTE PTR x$2[rsp], al
  000ca	75 18		 jne	 SHORT $LN52@DumpFuncti
  000cc	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  000d0	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000d3	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$2[rsp]
  000d8	41 b8 01 00 00
	00		 mov	 r8d, 1
  000de	ff 53 08	 call	 QWORD PTR [rbx+8]
  000e1	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN52@DumpFuncti:
; Line 175
  000e4	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  000e8	0f b6 47 0c	 movzx	 eax, BYTE PTR [rdi+12]
  000ec	88 44 24 30	 mov	 BYTE PTR x$1[rsp], al
  000f0	75 18		 jne	 SHORT $LN57@DumpFuncti
  000f2	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  000f6	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000f9	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$1[rsp]
  000fe	41 b8 01 00 00
	00		 mov	 r8d, 1
  00104	ff 53 08	 call	 QWORD PTR [rbx+8]
  00107	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN57@DumpFuncti:
; Line 176
  0010a	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  0010e	8b 47 18	 mov	 eax, DWORD PTR [rdi+24]
  00111	89 44 24 30	 mov	 DWORD PTR x$[rsp], eax
  00115	75 18		 jne	 SHORT $LN64@DumpFuncti
  00117	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  0011b	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0011e	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  00123	41 b8 04 00 00
	00		 mov	 r8d, 4
  00129	ff 53 08	 call	 QWORD PTR [rbx+8]
  0012c	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN64@DumpFuncti:
  0012f	4c 63 47 18	 movsxd	 r8, DWORD PTR [rdi+24]
  00133	49 c1 e0 02	 shl	 r8, 2
  00137	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  0013b	75 16		 jne	 SHORT $LN67@DumpFuncti
  0013d	4d 85 c0	 test	 r8, r8
  00140	74 11		 je	 SHORT $LN67@DumpFuncti
  00142	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00146	48 8b 57 38	 mov	 rdx, QWORD PTR [rdi+56]
  0014a	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0014d	ff 53 08	 call	 QWORD PTR [rbx+8]
  00150	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN67@DumpFuncti:
; Line 177
  00153	48 8b d3	 mov	 rdx, rbx
  00156	48 8b cf	 mov	 rcx, rdi
  00159	e8 00 00 00 00	 call	 DumpConstants
; Line 178
  0015e	48 8b d3	 mov	 rdx, rbx
  00161	48 8b cf	 mov	 rcx, rdi
  00164	e8 00 00 00 00	 call	 DumpUpvalues
; Line 179
  00169	48 8b d3	 mov	 rdx, rbx
  0016c	48 8b cf	 mov	 rcx, rdi
  0016f	e8 00 00 00 00	 call	 DumpProtos
; Line 180
  00174	48 8b d3	 mov	 rdx, rbx
  00177	48 8b cf	 mov	 rcx, rdi
; Line 181
  0017a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0017f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00183	5f		 pop	 rdi
; Line 180
  00184	e9 00 00 00 00	 jmp	 DumpDebug
DumpFunction ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpCode
_TEXT	SEGMENT
x$ = 48
f$ = 48
D$ = 56
DumpCode PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 90
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 91
  0000a	83 7a 1c 00	 cmp	 DWORD PTR [rdx+28], 0
  0000e	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  00011	48 8b da	 mov	 rbx, rdx
  00014	89 44 24 30	 mov	 DWORD PTR x$[rsp], eax
  00018	48 8b f9	 mov	 rdi, rcx
  0001b	75 18		 jne	 SHORT $LN5@DumpCode
  0001d	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  00021	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00024	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  00029	41 b8 04 00 00
	00		 mov	 r8d, 4
  0002f	ff 53 08	 call	 QWORD PTR [rbx+8]
  00032	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN5@DumpCode:
; Line 92
  00035	4c 63 47 18	 movsxd	 r8, DWORD PTR [rdi+24]
  00039	49 c1 e0 02	 shl	 r8, 2
  0003d	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  00041	75 16		 jne	 SHORT $LN8@DumpCode
  00043	4d 85 c0	 test	 r8, r8
  00046	74 11		 je	 SHORT $LN8@DumpCode
  00048	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  0004c	48 8b 57 38	 mov	 rdx, QWORD PTR [rdi+56]
  00050	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00053	ff 53 08	 call	 QWORD PTR [rbx+8]
  00056	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN8@DumpCode:
; Line 93
  00059	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0005e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00062	5f		 pop	 rdi
  00063	c3		 ret	 0
DumpCode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpString
_TEXT	SEGMENT
x$1 = 48
x$2 = 48
x$3 = 48
s$ = 48
D$ = 56
size$4 = 64
DumpString PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 73
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx
; Line 74
  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 29		 jne	 SHORT $LN4@DumpString
; Line 75
  0000e	88 4c 24 30	 mov	 BYTE PTR x$2[rsp], cl
  00012	39 4a 1c	 cmp	 DWORD PTR [rdx+28], ecx
  00015	0f 85 cf 00 00
	00		 jne	 $LN27@DumpString
  0001b	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  0001f	44 8d 41 01	 lea	 r8d, QWORD PTR [rcx+1]
  00023	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00026	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$2[rsp]
  0002b	ff 53 08	 call	 QWORD PTR [rbx+8]
  0002e	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
; Line 87
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN4@DumpString:
; Line 77
  00037	80 79 08 04	 cmp	 BYTE PTR [rcx+8], 4
  0003b	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00040	75 06		 jne	 SHORT $LN7@DumpString
  00042	0f b6 41 0b	 movzx	 eax, BYTE PTR [rcx+11]
  00046	eb 04		 jmp	 SHORT $LN8@DumpString
$LN7@DumpString:
  00048	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
$LN8@DumpString:
  0004c	48 ff c0	 inc	 rax
; Line 78
  0004f	48 8d 79 18	 lea	 rdi, QWORD PTR [rcx+24]
  00053	48 89 44 24 40	 mov	 QWORD PTR size$4[rsp], rax
; Line 79
  00058	48 3d ff 00 00
	00		 cmp	 rax, 255		; 000000ffH
  0005e	73 1b		 jae	 SHORT $LN2@DumpString
; Line 80
  00060	83 7a 1c 00	 cmp	 DWORD PTR [rdx+28], 0
  00064	88 44 24 30	 mov	 BYTE PTR x$3[rsp], al
  00068	75 5c		 jne	 SHORT $LN24@DumpString
  0006a	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  0006e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00074	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$3[rsp]
; Line 81
  00079	eb 3d		 jmp	 SHORT $LN31@DumpString
$LN2@DumpString:
; Line 82
  0007b	83 7a 1c 00	 cmp	 DWORD PTR [rdx+28], 0
  0007f	c6 44 24 30 ff	 mov	 BYTE PTR x$1[rsp], 255	; 000000ffH
  00084	75 1d		 jne	 SHORT $LN21@DumpString
  00086	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  0008a	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0008d	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$1[rsp]
  00092	41 b8 01 00 00
	00		 mov	 r8d, 1
  00098	ff 53 08	 call	 QWORD PTR [rbx+8]
  0009b	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
  0009e	48 8b 44 24 40	 mov	 rax, QWORD PTR size$4[rsp]
$LN21@DumpString:
; Line 83
  000a3	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  000a7	75 1d		 jne	 SHORT $LN24@DumpString
  000a9	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  000ad	41 b8 08 00 00
	00		 mov	 r8d, 8
  000b3	48 8d 54 24 40	 lea	 rdx, QWORD PTR size$4[rsp]
$LN31@DumpString:
  000b8	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000bb	ff 53 08	 call	 QWORD PTR [rbx+8]
  000be	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
  000c1	48 8b 44 24 40	 mov	 rax, QWORD PTR size$4[rsp]
$LN24@DumpString:
; Line 85
  000c6	83 7b 1c 00	 cmp	 DWORD PTR [rbx+28], 0
  000ca	4c 8d 40 ff	 lea	 r8, QWORD PTR [rax-1]
  000ce	75 15		 jne	 SHORT $LN30@DumpString
  000d0	4d 85 c0	 test	 r8, r8
  000d3	74 10		 je	 SHORT $LN30@DumpString
  000d5	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  000d9	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000dc	48 8b d7	 mov	 rdx, rdi
  000df	ff 53 08	 call	 QWORD PTR [rbx+8]
  000e2	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN30@DumpString:
  000e5	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
$LN27@DumpString:
; Line 87
  000ea	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ee	5b		 pop	 rbx
  000ef	c3		 ret	 0
DumpString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpInteger
_TEXT	SEGMENT
x$ = 48
D$ = 56
DumpInteger PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 68
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 69
  0000a	83 7a 1c 00	 cmp	 DWORD PTR [rdx+28], 0
  0000e	48 8b da	 mov	 rbx, rdx
  00011	75 18		 jne	 SHORT $LN3@DumpIntege
  00013	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  00017	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0001a	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  0001f	41 b8 08 00 00
	00		 mov	 r8d, 8
  00025	ff 53 08	 call	 QWORD PTR [rbx+8]
  00028	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN3@DumpIntege:
; Line 70
  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
DumpInteger ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpNumber
_TEXT	SEGMENT
x$ = 48
D$ = 56
DumpNumber PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 63
  00000	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR [rsp+8], xmm0
  00006	53		 push	 rbx
  00007	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 64
  0000b	83 7a 1c 00	 cmp	 DWORD PTR [rdx+28], 0
  0000f	48 8b da	 mov	 rbx, rdx
  00012	75 18		 jne	 SHORT $LN3@DumpNumber
  00014	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  00018	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0001b	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  00020	41 b8 08 00 00
	00		 mov	 r8d, 8
  00026	ff 53 08	 call	 QWORD PTR [rbx+8]
  00029	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN3@DumpNumber:
; Line 65
  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
DumpNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpInt
_TEXT	SEGMENT
x$ = 48
D$ = 56
DumpInt	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 58
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	53		 push	 rbx
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 59
  00009	83 7a 1c 00	 cmp	 DWORD PTR [rdx+28], 0
  0000d	48 8b da	 mov	 rbx, rdx
  00010	75 18		 jne	 SHORT $LN3@DumpInt
  00012	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  00016	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00019	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  0001e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00024	ff 53 08	 call	 QWORD PTR [rbx+8]
  00027	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN3@DumpInt:
; Line 60
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5b		 pop	 rbx
  0002f	c3		 ret	 0
DumpInt	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpByte
_TEXT	SEGMENT
x$ = 48
y$ = 48
D$ = 56
DumpByte PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 52
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 54
  00006	83 7a 1c 00	 cmp	 DWORD PTR [rdx+28], 0
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	88 4c 24 30	 mov	 BYTE PTR x$[rsp], cl
  00011	75 18		 jne	 SHORT $LN3@DumpByte
  00013	4c 8b 4a 10	 mov	 r9, QWORD PTR [rdx+16]
  00017	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0001a	48 8d 54 24 30	 lea	 rdx, QWORD PTR x$[rsp]
  0001f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00025	ff 53 08	 call	 QWORD PTR [rbx+8]
  00028	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN3@DumpByte:
; Line 55
  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
DumpByte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT DumpBlock
_TEXT	SEGMENT
b$ = 48
size$ = 56
D$ = 64
DumpBlock PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 40
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 41
  00006	41 83 78 1c 00	 cmp	 DWORD PTR [r8+28], 0
  0000b	49 8b d8	 mov	 rbx, r8
  0000e	75 18		 jne	 SHORT $LN1@DumpBlock
  00010	48 85 d2	 test	 rdx, rdx
  00013	74 13		 je	 SHORT $LN1@DumpBlock
; Line 43
  00015	4d 8b 48 10	 mov	 r9, QWORD PTR [r8+16]
  00019	4c 8b c2	 mov	 r8, rdx
  0001c	48 8b d1	 mov	 rdx, rcx
  0001f	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00022	ff 53 08	 call	 QWORD PTR [rbx+8]
  00025	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
$LN1@DumpBlock:
; Line 46
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
DumpBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaU_dump
_TEXT	SEGMENT
D$ = 32
L$ = 80
f$ = 88
w$ = 96
data$ = 104
x$1 = 112
strip$ = 112
luaU_dump PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldump.c
; Line 203
$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; Line 208
  00006	8b 44 24 70	 mov	 eax, DWORD PTR strip$[rsp]
  0000a	48 89 4c 24 20	 mov	 QWORD PTR D$[rsp], rcx
; Line 210
  0000f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR D$[rsp]
  00014	48 8b da	 mov	 rbx, rdx
  00017	4c 89 44 24 28	 mov	 QWORD PTR D$[rsp+8], r8
  0001c	4c 89 4c 24 30	 mov	 QWORD PTR D$[rsp+16], r9
  00021	89 44 24 38	 mov	 DWORD PTR D$[rsp+24], eax
  00025	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR D$[rsp+28], 0
  0002d	e8 00 00 00 00	 call	 DumpHeader
; Line 211
  00032	83 7c 24 3c 00	 cmp	 DWORD PTR D$[rsp+28], 0
  00037	0f b6 43 10	 movzx	 eax, BYTE PTR [rbx+16]
  0003b	88 44 24 70	 mov	 BYTE PTR x$1[rsp], al
  0003f	75 1d		 jne	 SHORT $LN5@luaU_dump
  00041	4c 8b 4c 24 30	 mov	 r9, QWORD PTR D$[rsp+16]
  00046	48 8b 4c 24 20	 mov	 rcx, QWORD PTR D$[rsp]
  0004b	48 8d 54 24 70	 lea	 rdx, QWORD PTR x$1[rsp]
  00050	41 b8 01 00 00
	00		 mov	 r8d, 1
  00056	ff 54 24 28	 call	 QWORD PTR D$[rsp+8]
  0005a	89 44 24 3c	 mov	 DWORD PTR D$[rsp+28], eax
$LN5@luaU_dump:
; Line 212
  0005e	4c 8d 44 24 20	 lea	 r8, QWORD PTR D$[rsp]
  00063	33 d2		 xor	 edx, edx
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 DumpFunction
; Line 213
  0006d	8b 44 24 3c	 mov	 eax, DWORD PTR D$[rsp+28]
; Line 214
  00071	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00075	5b		 pop	 rbx
  00076	c3		 ret	 0
luaU_dump ENDP
_TEXT	ENDS
END
