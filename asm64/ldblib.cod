; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04OMFAIDPG@call?$AA@			; `string'
PUBLIC	??_C@_06LNOFJDNM@return?$AA@			; `string'
PUBLIC	??_C@_04HJPCFDOP@line?$AA@			; `string'
PUBLIC	??_C@_05IOMEMJEC@count?$AA@			; `string'
PUBLIC	??_C@_09PJFMDEKP@tail?5call?$AA@		; `string'
PUBLIC	??_C@_05GFCDIDHO@debug?$AA@			; `string'
PUBLIC	??_C@_0N@FNKEMMA@getuservalue?$AA@		; `string'
PUBLIC	??_C@_07GELEAAJ@gethook?$AA@			; `string'
PUBLIC	??_C@_07OICKPAFH@getinfo?$AA@			; `string'
PUBLIC	??_C@_08GMECKPDH@getlocal?$AA@			; `string'
PUBLIC	??_C@_0M@NCNCBJKP@getregistry?$AA@		; `string'
PUBLIC	??_C@_0N@LGLOEPAG@getmetatable?$AA@		; `string'
PUBLIC	??_C@_0L@DNKHBCFJ@getupvalue?$AA@		; `string'
PUBLIC	??_C@_0M@BLDMBHBB@upvaluejoin?$AA@		; `string'
PUBLIC	??_C@_09LPCDDMGF@upvalueid?$AA@			; `string'
PUBLIC	??_C@_0N@HBGEIAIM@setuservalue?$AA@		; `string'
PUBLIC	??_C@_07POLKHPNI@sethook?$AA@			; `string'
PUBLIC	??_C@_08JNGOLMEK@setlocal?$AA@			; `string'
PUBLIC	??_C@_0N@MCAAIDEK@setmetatable?$AA@		; `string'
PUBLIC	??_C@_0L@CDIIKFBA@setupvalue?$AA@		; `string'
PUBLIC	??_C@_09GPFEECNC@traceback?$AA@			; `string'
;	COMDAT ??_C@_09GPFEECNC@traceback?$AA@
CONST	SEGMENT
??_C@_09GPFEECNC@traceback?$AA@ DB 'traceback', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CDIIKFBA@setupvalue?$AA@
CONST	SEGMENT
??_C@_0L@CDIIKFBA@setupvalue?$AA@ DB 'setupvalue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MCAAIDEK@setmetatable?$AA@
CONST	SEGMENT
??_C@_0N@MCAAIDEK@setmetatable?$AA@ DB 'setmetatable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JNGOLMEK@setlocal?$AA@
CONST	SEGMENT
??_C@_08JNGOLMEK@setlocal?$AA@ DB 'setlocal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07POLKHPNI@sethook?$AA@
CONST	SEGMENT
??_C@_07POLKHPNI@sethook?$AA@ DB 'sethook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HBGEIAIM@setuservalue?$AA@
CONST	SEGMENT
??_C@_0N@HBGEIAIM@setuservalue?$AA@ DB 'setuservalue', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPCDDMGF@upvalueid?$AA@
CONST	SEGMENT
??_C@_09LPCDDMGF@upvalueid?$AA@ DB 'upvalueid', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BLDMBHBB@upvaluejoin?$AA@
CONST	SEGMENT
??_C@_0M@BLDMBHBB@upvaluejoin?$AA@ DB 'upvaluejoin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DNKHBCFJ@getupvalue?$AA@
CONST	SEGMENT
??_C@_0L@DNKHBCFJ@getupvalue?$AA@ DB 'getupvalue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LGLOEPAG@getmetatable?$AA@
CONST	SEGMENT
??_C@_0N@LGLOEPAG@getmetatable?$AA@ DB 'getmetatable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NCNCBJKP@getregistry?$AA@
CONST	SEGMENT
??_C@_0M@NCNCBJKP@getregistry?$AA@ DB 'getregistry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GMECKPDH@getlocal?$AA@
CONST	SEGMENT
??_C@_08GMECKPDH@getlocal?$AA@ DB 'getlocal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OICKPAFH@getinfo?$AA@
CONST	SEGMENT
??_C@_07OICKPAFH@getinfo?$AA@ DB 'getinfo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GELEAAJ@gethook?$AA@
CONST	SEGMENT
??_C@_07GELEAAJ@gethook?$AA@ DB 'gethook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FNKEMMA@getuservalue?$AA@
CONST	SEGMENT
??_C@_0N@FNKEMMA@getuservalue?$AA@ DB 'getuservalue', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFCDIDHO@debug?$AA@
CONST	SEGMENT
??_C@_05GFCDIDHO@debug?$AA@ DB 'debug', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PJFMDEKP@tail?5call?$AA@
CONST	SEGMENT
??_C@_09PJFMDEKP@tail?5call?$AA@ DB 'tail call', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count?$AA@
CONST	SEGMENT
??_C@_05IOMEMJEC@count?$AA@ DB 'count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HJPCFDOP@line?$AA@
CONST	SEGMENT
??_C@_04HJPCFDOP@line?$AA@ DB 'line', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNOFJDNM@return?$AA@
CONST	SEGMENT
??_C@_06LNOFJDNM@return?$AA@ DB 'return', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OMFAIDPG@call?$AA@
CONST	SEGMENT
??_C@_04OMFAIDPG@call?$AA@ DB 'call', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
HOOKKEY	DD	00H
	ORG $+4
?hooknames@?1??hookf@@9@9 DQ FLAT:??_C@_04OMFAIDPG@call?$AA@ ; `hookf'::`2'::hooknames
	DQ	FLAT:??_C@_06LNOFJDNM@return?$AA@
	DQ	FLAT:??_C@_04HJPCFDOP@line?$AA@
	DQ	FLAT:??_C@_05IOMEMJEC@count?$AA@
	DQ	FLAT:??_C@_09PJFMDEKP@tail?5call?$AA@
dblib	DQ	FLAT:??_C@_05GFCDIDHO@debug?$AA@
	DQ	FLAT:db_debug
	DQ	FLAT:??_C@_0N@FNKEMMA@getuservalue?$AA@
	DQ	FLAT:db_getuservalue
	DQ	FLAT:??_C@_07GELEAAJ@gethook?$AA@
	DQ	FLAT:db_gethook
	DQ	FLAT:??_C@_07OICKPAFH@getinfo?$AA@
	DQ	FLAT:db_getinfo
	DQ	FLAT:??_C@_08GMECKPDH@getlocal?$AA@
	DQ	FLAT:db_getlocal
	DQ	FLAT:??_C@_0M@NCNCBJKP@getregistry?$AA@
	DQ	FLAT:db_getregistry
	DQ	FLAT:??_C@_0N@LGLOEPAG@getmetatable?$AA@
	DQ	FLAT:db_getmetatable
	DQ	FLAT:??_C@_0L@DNKHBCFJ@getupvalue?$AA@
	DQ	FLAT:db_getupvalue
	DQ	FLAT:??_C@_0M@BLDMBHBB@upvaluejoin?$AA@
	DQ	FLAT:db_upvaluejoin
	DQ	FLAT:??_C@_09LPCDDMGF@upvalueid?$AA@
	DQ	FLAT:db_upvalueid
	DQ	FLAT:??_C@_0N@HBGEIAIM@setuservalue?$AA@
	DQ	FLAT:db_setuservalue
	DQ	FLAT:??_C@_07POLKHPNI@sethook?$AA@
	DQ	FLAT:db_sethook
	DQ	FLAT:??_C@_08JNGOLMEK@setlocal?$AA@
	DQ	FLAT:db_setlocal
	DQ	FLAT:??_C@_0N@MCAAIDEK@setmetatable?$AA@
	DQ	FLAT:db_setmetatable
	DQ	FLAT:??_C@_0L@CDIIKFBA@setupvalue?$AA@
	DQ	FLAT:db_setupvalue
	DQ	FLAT:??_C@_09GPFEECNC@traceback?$AA@
	DQ	FLAT:db_traceback
	DQ	0000000000000000H
	DQ	0000000000000000H
CONST	ENDS
PUBLIC	luaopen_debug
PUBLIC	??_C@_0P@EODJGPIM@stack?5overflow?$AA@		; `string'
PUBLIC	??_C@_0BG@HDIIKINN@nil?5or?5table?5expected?$AA@ ; `string'
PUBLIC	??_C@_06LMJLCCA@flnStu?$AA@			; `string'
PUBLIC	??_C@_03PENLABEP@?$DO?$CFs?$AA@			; `string'
PUBLIC	??_C@_0P@PJFAGLMH@invalid?5option?$AA@		; `string'
PUBLIC	??_C@_06OEKOLKIL@source?$AA@			; `string'
PUBLIC	??_C@_09NOFDGFFO@short_src?$AA@			; `string'
PUBLIC	??_C@_0M@IOFFDKM@linedefined?$AA@		; `string'
PUBLIC	??_C@_0BA@BGGOJOFO@lastlinedefined?$AA@		; `string'
PUBLIC	??_C@_04IOPLPGDE@what?$AA@			; `string'
PUBLIC	??_C@_0M@OLGEEKJC@currentline?$AA@		; `string'
PUBLIC	??_C@_04BDNNNDAF@nups?$AA@			; `string'
PUBLIC	??_C@_07DEOJMPEE@nparams?$AA@			; `string'
PUBLIC	??_C@_08PKLIBBKE@isvararg?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_08JEGIFMFI@namewhat?$AA@			; `string'
PUBLIC	??_C@_0L@KHAEKHMK@istailcall?$AA@		; `string'
PUBLIC	??_C@_0M@DINLHJFF@activelines?$AA@		; `string'
PUBLIC	??_C@_04HPNHAEOP@func?$AA@			; `string'
PUBLIC	??_C@_0BD@EFMIJNPC@level?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0BG@MMNKKMGE@invalid?5upvalue?5index?$AA@	; `string'
PUBLIC	??_C@_0BG@EHJAKGKG@Lua?5function?5expected?$AA@	; `string'
PUBLIC	??_C@_01DICPFPGM@k?$AA@				; `string'
PUBLIC	??_C@_06BPGFKLEK@__mode?$AA@			; `string'
PUBLIC	??_C@_0O@POGBCBNN@external?5hook?$AA@		; `string'
PUBLIC	??_C@_0M@FBGICICO@lua_debug?$DO?5?$AA@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_05KJNBGLAC@cont?6?$AA@			; `string'
PUBLIC	??_C@_0BB@BLKFCGLG@?$DN?$CIdebug?5command?$CJ?$AA@ ; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	__real@405bc00000000000
EXTRN	__imp___iob_func:PROC
EXTRN	__imp_fflush:PROC
EXTRN	__imp_fgets:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	__imp_strchr:PROC
EXTRN	lua_settop:PROC
EXTRN	lua_pushvalue:PROC
EXTRN	lua_rotate:PROC
EXTRN	lua_checkstack:PROC
EXTRN	lua_xmove:PROC
EXTRN	lua_iscfunction:PROC
EXTRN	lua_type:PROC
EXTRN	lua_tolstring:PROC
EXTRN	lua_tothread:PROC
EXTRN	lua_pushnil:PROC
EXTRN	lua_pushinteger:PROC
EXTRN	lua_pushstring:PROC
EXTRN	lua_pushfstring:PROC
EXTRN	lua_pushboolean:PROC
EXTRN	lua_pushlightuserdata:PROC
EXTRN	lua_pushthread:PROC
EXTRN	lua_rawget:PROC
EXTRN	lua_rawgetp:PROC
EXTRN	lua_createtable:PROC
EXTRN	lua_getmetatable:PROC
EXTRN	lua_getuservalue:PROC
EXTRN	lua_setfield:PROC
EXTRN	lua_rawset:PROC
EXTRN	lua_rawsetp:PROC
EXTRN	lua_setmetatable:PROC
EXTRN	lua_setuservalue:PROC
EXTRN	lua_callk:PROC
EXTRN	lua_pcallk:PROC
EXTRN	lua_getstack:PROC
EXTRN	lua_getinfo:PROC
EXTRN	lua_getlocal:PROC
EXTRN	lua_setlocal:PROC
EXTRN	lua_getupvalue:PROC
EXTRN	lua_setupvalue:PROC
EXTRN	lua_upvalueid:PROC
EXTRN	lua_upvaluejoin:PROC
EXTRN	lua_sethook:PROC
EXTRN	lua_gethook:PROC
EXTRN	lua_gethookmask:PROC
EXTRN	lua_gethookcount:PROC
EXTRN	luaL_checkversion_:PROC
EXTRN	luaL_argerror:PROC
EXTRN	luaL_checklstring:PROC
EXTRN	luaL_optlstring:PROC
EXTRN	luaL_checkinteger:PROC
EXTRN	luaL_optinteger:PROC
EXTRN	luaL_checktype:PROC
EXTRN	luaL_checkany:PROC
EXTRN	luaL_error:PROC
EXTRN	luaL_loadbufferx:PROC
EXTRN	luaL_setfuncs:PROC
EXTRN	luaL_traceback:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$luaopen_debug DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$luaopen_debug
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$checkstack DD imagerel checkstack
	DD	imagerel checkstack+52
	DD	imagerel $unwind$checkstack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_getregistry DD imagerel db_getregistry
	DD	imagerel db_getregistry+24
	DD	imagerel $unwind$db_getregistry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_getmetatable DD imagerel db_getmetatable
	DD	imagerel db_getmetatable+55
	DD	imagerel $unwind$db_getmetatable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_setmetatable DD imagerel db_setmetatable
	DD	imagerel db_setmetatable+85
	DD	imagerel $unwind$db_setmetatable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_getuservalue DD imagerel db_getuservalue
	DD	imagerel db_getuservalue+64
	DD	imagerel $unwind$db_getuservalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_setuservalue DD imagerel db_setuservalue
	DD	imagerel db_setuservalue+73
	DD	imagerel $unwind$db_setuservalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getthread DD imagerel getthread
	DD	imagerel getthread+78
	DD	imagerel $unwind$getthread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$settabss DD imagerel settabss
	DD	imagerel settabss+50
	DD	imagerel $unwind$settabss
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$settabsi DD imagerel settabsi
	DD	imagerel settabsi+50
	DD	imagerel $unwind$settabsi
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$settabsb DD imagerel settabsb
	DD	imagerel settabsb+50
	DD	imagerel $unwind$settabsb
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$treatstackoption DD imagerel treatstackoption
	DD	imagerel treatstackoption+78
	DD	imagerel $unwind$treatstackoption
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_getinfo DD imagerel db_getinfo
	DD	imagerel db_getinfo+995
	DD	imagerel $unwind$db_getinfo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_getlocal DD imagerel db_getlocal
	DD	imagerel db_getlocal+364
	DD	imagerel $unwind$db_getlocal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_setlocal DD imagerel db_setlocal
	DD	imagerel db_setlocal+324
	DD	imagerel $unwind$db_setlocal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$auxupvalue DD imagerel auxupvalue
	DD	imagerel auxupvalue+147
	DD	imagerel $unwind$auxupvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_getupvalue DD imagerel db_getupvalue
	DD	imagerel db_getupvalue+119
	DD	imagerel $unwind$db_getupvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_setupvalue DD imagerel db_setupvalue
	DD	imagerel db_setupvalue+132
	DD	imagerel $unwind$db_setupvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$checkupval DD imagerel checkupval
	DD	imagerel checkupval+113
	DD	imagerel $unwind$checkupval
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_upvalueid DD imagerel db_upvalueid
	DD	imagerel db_upvalueid+125
	DD	imagerel $unwind$db_upvalueid
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_upvaluejoin DD imagerel db_upvaluejoin
	DD	imagerel db_upvaluejoin+276
	DD	imagerel $unwind$db_upvaluejoin
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$hookf DD	imagerel hookf
	DD	imagerel hookf+145
	DD	imagerel $unwind$hookf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$makemask DD imagerel makemask
	DD	imagerel makemask+109
	DD	imagerel $unwind$makemask
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_sethook DD imagerel db_sethook
	DD	imagerel db_sethook+116
	DD	imagerel $unwind$db_sethook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$db_sethook DD imagerel db_sethook+116
	DD	imagerel db_sethook+237
	DD	imagerel $chain$0$db_sethook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$db_sethook DD imagerel db_sethook+237
	DD	imagerel db_sethook+498
	DD	imagerel $chain$1$db_sethook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_gethook DD imagerel db_gethook
	DD	imagerel db_gethook+377
	DD	imagerel $unwind$db_gethook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_debug DD imagerel db_debug
	DD	imagerel db_debug+110
	DD	imagerel $unwind$db_debug
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$db_debug DD imagerel db_debug+110
	DD	imagerel db_debug+436
	DD	imagerel $chain$2$db_debug
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$db_debug DD imagerel db_debug+436
	DD	imagerel db_debug+463
	DD	imagerel $chain$3$db_debug
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$db_traceback DD imagerel db_traceback
	DD	imagerel db_traceback+189
	DD	imagerel $unwind$db_traceback
pdata	ENDS
;	COMDAT __real@405bc00000000000
CONST	SEGMENT
__real@405bc00000000000 DQ 0405bc00000000000r	; 111
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BLKFCGLG@?$DN?$CIdebug?5command?$CJ?$AA@
CONST	SEGMENT
??_C@_0BB@BLKFCGLG@?$DN?$CIdebug?5command?$CJ?$AA@ DB '=(debug command)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNBGLAC@cont?6?$AA@
CONST	SEGMENT
??_C@_05KJNBGLAC@cont?6?$AA@ DB 'cont', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FBGICICO@lua_debug?$DO?5?$AA@
CONST	SEGMENT
??_C@_0M@FBGICICO@lua_debug?$DO?5?$AA@ DB 'lua_debug> ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@POGBCBNN@external?5hook?$AA@
CONST	SEGMENT
??_C@_0O@POGBCBNN@external?5hook?$AA@ DB 'external hook', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPGFKLEK@__mode?$AA@
CONST	SEGMENT
??_C@_06BPGFKLEK@__mode?$AA@ DB '__mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01DICPFPGM@k?$AA@
CONST	SEGMENT
??_C@_01DICPFPGM@k?$AA@ DB 'k', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EHJAKGKG@Lua?5function?5expected?$AA@
CONST	SEGMENT
??_C@_0BG@EHJAKGKG@Lua?5function?5expected?$AA@ DB 'Lua function expected'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MMNKKMGE@invalid?5upvalue?5index?$AA@
CONST	SEGMENT
??_C@_0BG@MMNKKMGE@invalid?5upvalue?5index?$AA@ DB 'invalid upvalue index'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFMIJNPC@level?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BD@EFMIJNPC@level?5out?5of?5range?$AA@ DB 'level out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPNHAEOP@func?$AA@
CONST	SEGMENT
??_C@_04HPNHAEOP@func?$AA@ DB 'func', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DINLHJFF@activelines?$AA@
CONST	SEGMENT
??_C@_0M@DINLHJFF@activelines?$AA@ DB 'activelines', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KHAEKHMK@istailcall?$AA@
CONST	SEGMENT
??_C@_0L@KHAEKHMK@istailcall?$AA@ DB 'istailcall', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JEGIFMFI@namewhat?$AA@
CONST	SEGMENT
??_C@_08JEGIFMFI@namewhat?$AA@ DB 'namewhat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PKLIBBKE@isvararg?$AA@
CONST	SEGMENT
??_C@_08PKLIBBKE@isvararg?$AA@ DB 'isvararg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DEOJMPEE@nparams?$AA@
CONST	SEGMENT
??_C@_07DEOJMPEE@nparams?$AA@ DB 'nparams', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BDNNNDAF@nups?$AA@
CONST	SEGMENT
??_C@_04BDNNNDAF@nups?$AA@ DB 'nups', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OLGEEKJC@currentline?$AA@
CONST	SEGMENT
??_C@_0M@OLGEEKJC@currentline?$AA@ DB 'currentline', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IOPLPGDE@what?$AA@
CONST	SEGMENT
??_C@_04IOPLPGDE@what?$AA@ DB 'what', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BGGOJOFO@lastlinedefined?$AA@
CONST	SEGMENT
??_C@_0BA@BGGOJOFO@lastlinedefined?$AA@ DB 'lastlinedefined', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IOFFDKM@linedefined?$AA@
CONST	SEGMENT
??_C@_0M@IOFFDKM@linedefined?$AA@ DB 'linedefined', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NOFDGFFO@short_src?$AA@
CONST	SEGMENT
??_C@_09NOFDGFFO@short_src?$AA@ DB 'short_src', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source?$AA@
CONST	SEGMENT
??_C@_06OEKOLKIL@source?$AA@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PJFAGLMH@invalid?5option?$AA@
CONST	SEGMENT
??_C@_0P@PJFAGLMH@invalid?5option?$AA@ DB 'invalid option', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PENLABEP@?$DO?$CFs?$AA@
CONST	SEGMENT
??_C@_03PENLABEP@?$DO?$CFs?$AA@ DB '>%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMJLCCA@flnStu?$AA@
CONST	SEGMENT
??_C@_06LMJLCCA@flnStu?$AA@ DB 'flnStu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HDIIKINN@nil?5or?5table?5expected?$AA@
CONST	SEGMENT
??_C@_0BG@HDIIKINN@nil?5or?5table?5expected?$AA@ DB 'nil or table expecte'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EODJGPIM@stack?5overflow?$AA@
CONST	SEGMENT
??_C@_0P@EODJGPIM@stack?5overflow?$AA@ DB 'stack overflow', 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_traceback DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$db_debug DD 021H
	DD	imagerel db_debug
	DD	imagerel db_debug+110
	DD	imagerel $unwind$db_debug
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$db_debug DD 061f21H
	DD	02b341fH
	DD	02d6410H
	DD	02c5408H
	DD	imagerel db_debug
	DD	imagerel db_debug+110
	DD	imagerel $unwind$db_debug
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_debug DD 031b19H
	DD	0280109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_gethook DD 061e19H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
	DD	imagerel __GSHandlerCheck
	DD	028H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$db_sethook DD 021H
	DD	imagerel db_sethook
	DD	imagerel db_sethook+116
	DD	imagerel $unwind$db_sethook
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$db_sethook DD 020521H
	DD	0af405H
	DD	imagerel db_sethook
	DD	imagerel db_sethook+116
	DD	imagerel $unwind$db_sethook
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_sethook DD 0a1601H
	DD	0c5416H
	DD	0b3416H
	DD	0e0123216H
	DD	0c00ed010H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$makemask DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$hookf DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_upvaluejoin DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_upvalueid DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checkupval DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_setupvalue DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_getupvalue DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$auxupvalue DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_setlocal DD 0b2d19H
	DD	01d641bH
	DD	01c541bH
	DD	01b341bH
	DD	016011bH
	DD	0e012f014H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_getlocal DD 092919H
	DD	01b6417H
	DD	01a5417H
	DD	0193417H
	DD	0160117H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_getinfo DD 092719H
	DD	01c5415H
	DD	01b3415H
	DD	0160115H
	DD	0700ce00eH
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$treatstackoption DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$settabsb DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$settabsi DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$settabss DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getthread DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_setuservalue DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_getuservalue DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_setmetatable DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_getmetatable DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$db_getregistry DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checkstack DD 020a01H
	DD	03006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$luaopen_debug DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_traceback
_TEXT	SEGMENT
L$ = 64
db_traceback PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 417
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 419
  00018	ba 01 00 00 00	 mov	 edx, 1
  0001d	48 8b d9	 mov	 rbx, rcx
  00020	e8 00 00 00 00	 call	 lua_type
  00025	45 33 f6	 xor	 r14d, r14d
  00028	83 f8 08	 cmp	 eax, 8
  0002b	75 14		 jne	 SHORT $LN6@db_traceba
  0002d	be 01 00 00 00	 mov	 esi, 1
  00032	48 8b cb	 mov	 rcx, rbx
  00035	8b d6		 mov	 edx, esi
  00037	e8 00 00 00 00	 call	 lua_tothread
  0003c	48 8b e8	 mov	 rbp, rax
  0003f	eb 06		 jmp	 SHORT $LN5@db_traceba
$LN6@db_traceba:
  00041	41 8b f6	 mov	 esi, r14d
  00044	48 8b eb	 mov	 rbp, rbx
$LN5@db_traceba:
; Line 420
  00047	8d 56 01	 lea	 edx, DWORD PTR [rsi+1]
  0004a	45 33 c0	 xor	 r8d, r8d
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	e8 00 00 00 00	 call	 lua_tolstring
  00055	4c 8b f8	 mov	 r15, rax
; Line 421
  00058	48 85 c0	 test	 rax, rax
  0005b	75 1c		 jne	 SHORT $LN2@db_traceba
  0005d	8d 56 01	 lea	 edx, DWORD PTR [rsi+1]
  00060	48 8b cb	 mov	 rcx, rbx
  00063	e8 00 00 00 00	 call	 lua_type
  00068	85 c0		 test	 eax, eax
  0006a	7e 0d		 jle	 SHORT $LN2@db_traceba
; Line 422
  0006c	8d 56 01	 lea	 edx, DWORD PTR [rsi+1]
  0006f	48 8b cb	 mov	 rcx, rbx
  00072	e8 00 00 00 00	 call	 lua_pushvalue
; Line 423
  00077	eb 26		 jmp	 SHORT $LN9@db_traceba
$LN2@db_traceba:
; Line 424
  00079	48 3b dd	 cmp	 rbx, rbp
  0007c	8d 56 02	 lea	 edx, DWORD PTR [rsi+2]
  0007f	48 8b cb	 mov	 rcx, rbx
  00082	41 0f 94 c6	 sete	 r14b
  00086	4d 8b c6	 mov	 r8, r14
  00089	e8 00 00 00 00	 call	 luaL_optinteger
; Line 425
  0008e	4d 8b c7	 mov	 r8, r15
  00091	48 8b d5	 mov	 rdx, rbp
  00094	44 8b c8	 mov	 r9d, eax
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	e8 00 00 00 00	 call	 luaL_traceback
$LN9@db_traceba:
; Line 428
  0009f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a4	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000a9	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000ae	b8 01 00 00 00	 mov	 eax, 1
  000b3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b7	41 5f		 pop	 r15
  000b9	41 5e		 pop	 r14
  000bb	5f		 pop	 rdi
  000bc	c3		 ret	 0
db_traceback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_debug
_TEXT	SEGMENT
buffer$1 = 48
__$ArrayPad$ = 304
L$ = 336
db_debug PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 402
  00000	40 57		 push	 rdi
  00002	48 81 ec 40 01
	00 00		 sub	 rsp, 320		; 00000140H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001b	48 8b f9	 mov	 rdi, rcx
; Line 405
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00024	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@FBGICICO@lua_debug?$DO?5?$AA@
  0002b	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00042	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
; Line 407
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00052	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buffer$1[rsp]
  00057	4c 8b c0	 mov	 r8, rax
  0005a	ba fa 00 00 00	 mov	 edx, 250		; 000000faH
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgets
  00065	48 85 c0	 test	 rax, rax
  00068	0f 84 5f 01 00
	00		 je	 $LN21@db_debug
  0006e	48 89 ac 24 60
	01 00 00	 mov	 QWORD PTR [rsp+352], rbp
  00076	48 89 b4 24 68
	01 00 00	 mov	 QWORD PTR [rsp+360], rsi
  0007e	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:??_C@_05KJNBGLAC@cont?6?$AA@
  00085	48 89 9c 24 58
	01 00 00	 mov	 QWORD PTR [rsp+344], rbx
  0008d	33 ed		 xor	 ebp, ebp
  0008f	90		 npad	 1
$LL6@db_debug:
  00090	48 8b c5	 mov	 rax, rbp
  00093	48 8d 54 24 30	 lea	 rdx, QWORD PTR buffer$1[rsp]
  00098	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL16@db_debug:
  000a0	0f b6 0c 02	 movzx	 ecx, BYTE PTR [rdx+rax]
  000a4	48 ff c0	 inc	 rax
  000a7	3a 4c 06 ff	 cmp	 cl, BYTE PTR [rsi+rax-1]
  000ab	75 0b		 jne	 SHORT $LN17@db_debug
  000ad	48 83 f8 06	 cmp	 rax, 6
  000b1	75 ed		 jne	 SHORT $LL16@db_debug
  000b3	e9 e2 00 00 00	 jmp	 $LN20@db_debug
$LN17@db_debug:
; Line 410
  000b8	48 8d 44 24 30	 lea	 rax, QWORD PTR buffer$1[rsp]
  000bd	49 83 c8 ff	 or	 r8, -1
$LL14@db_debug:
  000c1	49 ff c0	 inc	 r8
  000c4	42 38 2c 00	 cmp	 BYTE PTR [rax+r8], bpl
  000c8	75 f7		 jne	 SHORT $LL14@db_debug
  000ca	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0BB@BLKFCGLG@?$DN?$CIdebug?5command?$CJ?$AA@
  000d1	48 8d 54 24 30	 lea	 rdx, QWORD PTR buffer$1[rsp]
  000d6	48 8b cf	 mov	 rcx, rdi
  000d9	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  000de	e8 00 00 00 00	 call	 luaL_loadbufferx
  000e3	85 c0		 test	 eax, eax
  000e5	75 1e		 jne	 SHORT $LN1@db_debug
  000e7	45 33 c9	 xor	 r9d, r9d
  000ea	45 33 c0	 xor	 r8d, r8d
  000ed	33 d2		 xor	 edx, edx
  000ef	48 8b cf	 mov	 rcx, rdi
  000f2	48 89 6c 24 28	 mov	 QWORD PTR [rsp+40], rbp
  000f7	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  000fc	e8 00 00 00 00	 call	 lua_pcallk
  00101	85 c0		 test	 eax, eax
  00103	74 3b		 je	 SHORT $LN2@db_debug
$LN1@db_debug:
; Line 411
  00105	45 33 c0	 xor	 r8d, r8d
  00108	83 ca ff	 or	 edx, -1
  0010b	48 8b cf	 mov	 rcx, rdi
  0010e	e8 00 00 00 00	 call	 lua_tolstring
  00113	48 8b d8	 mov	 rbx, rax
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0011c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03OFAPEBGM@?$CFs?6?$AA@
  00123	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00127	4c 8b c3	 mov	 r8, rbx
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  00130	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00136	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0013a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
$LN2@db_debug:
; Line 412
  00140	33 d2		 xor	 edx, edx
  00142	48 8b cf	 mov	 rcx, rdi
  00145	e8 00 00 00 00	 call	 lua_settop
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00150	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@FBGICICO@lua_debug?$DO?5?$AA@
  00157	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0016e	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00172	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
  00178	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0017e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buffer$1[rsp]
  00183	4c 8b c0	 mov	 r8, rax
  00186	ba fa 00 00 00	 mov	 edx, 250		; 000000faH
  0018b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgets
  00191	48 85 c0	 test	 rax, rax
  00194	0f 85 f6 fe ff
	ff		 jne	 $LL6@db_debug
$LN20@db_debug:
  0019a	48 8b 9c 24 58
	01 00 00	 mov	 rbx, QWORD PTR [rsp+344]
  001a2	48 8b ac 24 60
	01 00 00	 mov	 rbp, QWORD PTR [rsp+352]
  001aa	48 8b b4 24 68
	01 00 00	 mov	 rsi, QWORD PTR [rsp+360]
; Line 408
  001b2	33 c0		 xor	 eax, eax
$LN18@db_debug:
; Line 414
  001b4	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001bc	48 33 cc	 xor	 rcx, rsp
  001bf	e8 00 00 00 00	 call	 __security_check_cookie
  001c4	48 81 c4 40 01
	00 00		 add	 rsp, 320		; 00000140H
  001cb	5f		 pop	 rdi
  001cc	c3		 ret	 0
$LN21@db_debug:
  001cd	eb e5		 jmp	 SHORT $LN18@db_debug
db_debug ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_gethook
_TEXT	SEGMENT
buff$ = 32
__$ArrayPad$ = 40
L$ = 64
db_gethook PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 379
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 44 24 28	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 381
  0001e	ba 01 00 00 00	 mov	 edx, 1
  00023	48 8b d9	 mov	 rbx, rcx
  00026	e8 00 00 00 00	 call	 lua_type
  0002b	83 f8 08	 cmp	 eax, 8
  0002e	75 10		 jne	 SHORT $LN8@db_gethook
  00030	8d 50 f9	 lea	 edx, QWORD PTR [rax-7]
  00033	48 8b cb	 mov	 rcx, rbx
  00036	e8 00 00 00 00	 call	 lua_tothread
  0003b	48 8b f8	 mov	 rdi, rax
  0003e	eb 03		 jmp	 SHORT $LN7@db_gethook
$LN8@db_gethook:
  00040	48 8b fb	 mov	 rdi, rbx
$LN7@db_gethook:
; Line 383
  00043	48 8b cf	 mov	 rcx, rdi
  00046	e8 00 00 00 00	 call	 lua_gethookmask
; Line 384
  0004b	48 8b cf	 mov	 rcx, rdi
  0004e	8b f0		 mov	 esi, eax
  00050	e8 00 00 00 00	 call	 lua_gethook
; Line 385
  00055	48 85 c0	 test	 rax, rax
  00058	75 0d		 jne	 SHORT $LN4@db_gethook
; Line 386
  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	e8 00 00 00 00	 call	 lua_pushnil
  00062	e9 96 00 00 00	 jmp	 $LN1@db_gethook
$LN4@db_gethook:
; Line 387
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hookf
  0006e	48 3b c1	 cmp	 rax, rcx
; Line 388
  00071	48 8b cb	 mov	 rcx, rbx
  00074	74 0e		 je	 SHORT $LN2@db_gethook
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@POGBCBNN@external?5hook?$AA@
  0007d	e8 00 00 00 00	 call	 lua_pushstring
; Line 389
  00082	eb 79		 jmp	 SHORT $LN1@db_gethook
$LN2@db_gethook:
; Line 390
  00084	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:HOOKKEY
  0008b	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00090	e8 00 00 00 00	 call	 lua_rawgetp
; Line 391
  00095	48 3b df	 cmp	 rbx, rdi
  00098	74 20		 je	 SHORT $LN11@db_gethook
  0009a	ba 01 00 00 00	 mov	 edx, 1
  0009f	48 8b cf	 mov	 rcx, rdi
  000a2	e8 00 00 00 00	 call	 lua_checkstack
  000a7	85 c0		 test	 eax, eax
  000a9	75 0f		 jne	 SHORT $LN11@db_gethook
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	e8 00 00 00 00	 call	 luaL_error
$LN11@db_gethook:
; Line 392
  000ba	48 8b cf	 mov	 rcx, rdi
  000bd	e8 00 00 00 00	 call	 lua_pushthread
  000c2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000c8	48 8b d3	 mov	 rdx, rbx
  000cb	48 8b cf	 mov	 rcx, rdi
  000ce	e8 00 00 00 00	 call	 lua_xmove
; Line 393
  000d3	ba fe ff ff ff	 mov	 edx, -2
  000d8	48 8b cb	 mov	 rcx, rbx
  000db	e8 00 00 00 00	 call	 lua_rawget
; Line 394
  000e0	41 83 c8 ff	 or	 r8d, -1
  000e4	48 8b cb	 mov	 rcx, rbx
  000e7	41 8d 50 ff	 lea	 edx, QWORD PTR [r8-1]
  000eb	e8 00 00 00 00	 call	 lua_rotate
  000f0	ba fe ff ff ff	 mov	 edx, -2
  000f5	48 8b cb	 mov	 rcx, rbx
  000f8	e8 00 00 00 00	 call	 lua_settop
$LN1@db_gethook:
; Line 396
  000fd	33 c9		 xor	 ecx, ecx
  000ff	40 f6 c6 01	 test	 sil, 1
  00103	74 0a		 je	 SHORT $LN16@db_gethook
  00105	c6 44 24 20 63	 mov	 BYTE PTR buff$[rsp], 99	; 00000063H
  0010a	b9 01 00 00 00	 mov	 ecx, 1
$LN16@db_gethook:
  0010f	40 f6 c6 02	 test	 sil, 2
  00113	74 0a		 je	 SHORT $LN15@db_gethook
  00115	48 63 c1	 movsxd	 rax, ecx
  00118	ff c1		 inc	 ecx
  0011a	c6 44 04 20 72	 mov	 BYTE PTR buff$[rsp+rax], 114 ; 00000072H
$LN15@db_gethook:
  0011f	40 f6 c6 04	 test	 sil, 4
  00123	74 0a		 je	 SHORT $LN14@db_gethook
  00125	48 63 c1	 movsxd	 rax, ecx
  00128	ff c1		 inc	 ecx
  0012a	c6 44 04 20 6c	 mov	 BYTE PTR buff$[rsp+rax], 108 ; 0000006cH
$LN14@db_gethook:
  0012f	48 63 c1	 movsxd	 rax, ecx
  00132	48 8d 54 24 20	 lea	 rdx, QWORD PTR buff$[rsp]
  00137	48 8b cb	 mov	 rcx, rbx
  0013a	c6 44 04 20 00	 mov	 BYTE PTR buff$[rsp+rax], 0
  0013f	e8 00 00 00 00	 call	 lua_pushstring
; Line 397
  00144	48 8b cf	 mov	 rcx, rdi
  00147	e8 00 00 00 00	 call	 lua_gethookcount
  0014c	48 8b cb	 mov	 rcx, rbx
  0014f	48 63 d0	 movsxd	 rdx, eax
  00152	e8 00 00 00 00	 call	 lua_pushinteger
; Line 398
  00157	b8 03 00 00 00	 mov	 eax, 3
; Line 399
  0015c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00161	48 33 cc	 xor	 rcx, rsp
  00164	e8 00 00 00 00	 call	 __security_check_cookie
  00169	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0016e	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00173	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00177	5f		 pop	 rdi
  00178	c3		 ret	 0
db_gethook ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_sethook
_TEXT	SEGMENT
L$ = 80
db_sethook PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 347
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 55		 push	 r13
  00010	41 56		 push	 r14
  00012	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 350
  00016	41 bd 01 00 00
	00		 mov	 r13d, 1
  0001c	48 8b d9	 mov	 rbx, rcx
  0001f	41 8b d5	 mov	 edx, r13d
  00022	e8 00 00 00 00	 call	 lua_type
  00027	33 ff		 xor	 edi, edi
  00029	83 f8 08	 cmp	 eax, 8
  0002c	75 13		 jne	 SHORT $LN7@db_sethook
  0002e	41 8b d5	 mov	 edx, r13d
  00031	48 8b cb	 mov	 rcx, rbx
  00034	41 8b ed	 mov	 ebp, r13d
  00037	e8 00 00 00 00	 call	 lua_tothread
  0003c	48 8b f0	 mov	 rsi, rax
  0003f	eb 05		 jmp	 SHORT $LN6@db_sethook
$LN7@db_sethook:
  00041	8b ef		 mov	 ebp, edi
  00043	48 8b f3	 mov	 rsi, rbx
$LN6@db_sethook:
; Line 351
  00046	44 8d 75 01	 lea	 r14d, DWORD PTR [rbp+1]
  0004a	48 8b cb	 mov	 rcx, rbx
  0004d	41 8b d6	 mov	 edx, r14d
  00050	e8 00 00 00 00	 call	 lua_type
; Line 352
  00055	48 8b cb	 mov	 rcx, rbx
  00058	85 c0		 test	 eax, eax
  0005a	7f 12		 jg	 SHORT $LN3@db_sethook
  0005c	41 8b d6	 mov	 edx, r14d
  0005f	e8 00 00 00 00	 call	 lua_settop
; Line 353
  00064	4c 8b e7	 mov	 r12, rdi
  00067	8b ef		 mov	 ebp, edi
; Line 355
  00069	e9 89 00 00 00	 jmp	 $LN10@db_sethook
$LN3@db_sethook:
; Line 356
  0006e	8d 55 02	 lea	 edx, DWORD PTR [rbp+2]
  00071	45 33 c0	 xor	 r8d, r8d
  00074	4c 89 7c 24 50	 mov	 QWORD PTR [rsp+80], r15
  00079	e8 00 00 00 00	 call	 luaL_checklstring
; Line 357
  0007e	41 b8 06 00 00
	00		 mov	 r8d, 6
  00084	41 8b d6	 mov	 edx, r14d
  00087	48 8b cb	 mov	 rcx, rbx
  0008a	4c 8b f8	 mov	 r15, rax
  0008d	e8 00 00 00 00	 call	 luaL_checktype
; Line 358
  00092	8d 55 03	 lea	 edx, DWORD PTR [rbp+3]
  00095	45 33 c0	 xor	 r8d, r8d
  00098	48 8b cb	 mov	 rcx, rbx
  0009b	e8 00 00 00 00	 call	 luaL_optinteger
; Line 359
  000a0	ba 63 00 00 00	 mov	 edx, 99			; 00000063H
  000a5	49 8b cf	 mov	 rcx, r15
  000a8	48 8b e8	 mov	 rbp, rax
  000ab	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:hookf
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  000b8	48 85 c0	 test	 rax, rax
  000bb	ba 72 00 00 00	 mov	 edx, 114		; 00000072H
  000c0	49 8b cf	 mov	 rcx, r15
  000c3	41 0f 45 fd	 cmovne	 edi, r13d
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  000cd	48 85 c0	 test	 rax, rax
  000d0	74 03		 je	 SHORT $LN12@db_sethook
  000d2	83 cf 02	 or	 edi, 2
$LN12@db_sethook:
  000d5	ba 6c 00 00 00	 mov	 edx, 108		; 0000006cH
  000da	49 8b cf	 mov	 rcx, r15
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  000e3	4c 8b 7c 24 50	 mov	 r15, QWORD PTR [rsp+80]
  000e8	48 85 c0	 test	 rax, rax
  000eb	74 03		 je	 SHORT $LN11@db_sethook
  000ed	83 cf 04	 or	 edi, 4
$LN11@db_sethook:
  000f0	85 ed		 test	 ebp, ebp
  000f2	7e 03		 jle	 SHORT $LN10@db_sethook
  000f4	83 cf 08	 or	 edi, 8
$LN10@db_sethook:
; Line 361
  000f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:HOOKKEY
  000fe	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00103	48 8b cb	 mov	 rcx, rbx
  00106	e8 00 00 00 00	 call	 lua_rawgetp
  0010b	85 c0		 test	 eax, eax
  0010d	75 68		 jne	 SHORT $LN1@db_sethook
; Line 362
  0010f	44 8d 40 02	 lea	 r8d, QWORD PTR [rax+2]
  00113	33 d2		 xor	 edx, edx
  00115	48 8b cb	 mov	 rcx, rbx
  00118	e8 00 00 00 00	 call	 lua_createtable
; Line 363
  0011d	83 ca ff	 or	 edx, -1
  00120	48 8b cb	 mov	 rcx, rbx
  00123	e8 00 00 00 00	 call	 lua_pushvalue
; Line 364
  00128	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:HOOKKEY
  0012f	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00134	48 8b cb	 mov	 rcx, rbx
  00137	e8 00 00 00 00	 call	 lua_rawsetp
; Line 365
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00143	48 8b cb	 mov	 rcx, rbx
  00146	e8 00 00 00 00	 call	 lua_pushstring
; Line 366
  0014b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06BPGFKLEK@__mode?$AA@
  00152	ba fe ff ff ff	 mov	 edx, -2
  00157	48 8b cb	 mov	 rcx, rbx
  0015a	e8 00 00 00 00	 call	 lua_setfield
; Line 367
  0015f	83 ca ff	 or	 edx, -1
  00162	48 8b cb	 mov	 rcx, rbx
  00165	e8 00 00 00 00	 call	 lua_pushvalue
; Line 368
  0016a	ba fe ff ff ff	 mov	 edx, -2
  0016f	48 8b cb	 mov	 rcx, rbx
  00172	e8 00 00 00 00	 call	 lua_setmetatable
$LN1@db_sethook:
; Line 370
  00177	48 3b de	 cmp	 rbx, rsi
  0017a	74 1e		 je	 SHORT $LN16@db_sethook
  0017c	41 8b d5	 mov	 edx, r13d
  0017f	48 8b ce	 mov	 rcx, rsi
  00182	e8 00 00 00 00	 call	 lua_checkstack
  00187	85 c0		 test	 eax, eax
  00189	75 0f		 jne	 SHORT $LN16@db_sethook
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  00192	48 8b cb	 mov	 rcx, rbx
  00195	e8 00 00 00 00	 call	 luaL_error
$LN16@db_sethook:
; Line 371
  0019a	48 8b ce	 mov	 rcx, rsi
  0019d	e8 00 00 00 00	 call	 lua_pushthread
  001a2	45 8b c5	 mov	 r8d, r13d
  001a5	48 8b d3	 mov	 rdx, rbx
  001a8	48 8b ce	 mov	 rcx, rsi
  001ab	e8 00 00 00 00	 call	 lua_xmove
; Line 372
  001b0	41 8b d6	 mov	 edx, r14d
  001b3	48 8b cb	 mov	 rcx, rbx
  001b6	e8 00 00 00 00	 call	 lua_pushvalue
; Line 373
  001bb	ba fd ff ff ff	 mov	 edx, -3
  001c0	48 8b cb	 mov	 rcx, rbx
  001c3	e8 00 00 00 00	 call	 lua_rawset
; Line 374
  001c8	44 8b cd	 mov	 r9d, ebp
  001cb	44 8b c7	 mov	 r8d, edi
  001ce	49 8b d4	 mov	 rdx, r12
  001d1	48 8b ce	 mov	 rcx, rsi
  001d4	e8 00 00 00 00	 call	 lua_sethook
; Line 376
  001d9	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  001de	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  001e3	33 c0		 xor	 eax, eax
  001e5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e9	41 5e		 pop	 r14
  001eb	41 5d		 pop	 r13
  001ed	41 5c		 pop	 r12
  001ef	5f		 pop	 rdi
  001f0	5e		 pop	 rsi
  001f1	c3		 ret	 0
db_sethook ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT unmakemask
_TEXT	SEGMENT
mask$ = 8
smask$ = 16
unmakemask PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 338
  00000	45 33 c0	 xor	 r8d, r8d
; Line 339
  00003	f6 c1 01	 test	 cl, 1
  00006	74 09		 je	 SHORT $LN3@unmakemask
  00008	c6 02 63	 mov	 BYTE PTR [rdx], 99	; 00000063H
  0000b	41 b8 01 00 00
	00		 mov	 r8d, 1
$LN3@unmakemask:
; Line 340
  00011	f6 c1 02	 test	 cl, 2
  00014	74 0a		 je	 SHORT $LN2@unmakemask
  00016	49 63 c0	 movsxd	 rax, r8d
  00019	41 ff c0	 inc	 r8d
  0001c	c6 04 10 72	 mov	 BYTE PTR [rax+rdx], 114	; 00000072H
$LN2@unmakemask:
; Line 341
  00020	f6 c1 04	 test	 cl, 4
  00023	74 0a		 je	 SHORT $LN1@unmakemask
  00025	49 63 c0	 movsxd	 rax, r8d
  00028	41 ff c0	 inc	 r8d
  0002b	c6 04 10 6c	 mov	 BYTE PTR [rax+rdx], 108	; 0000006cH
$LN1@unmakemask:
; Line 342
  0002f	49 63 c0	 movsxd	 rax, r8d
  00032	c6 04 10 00	 mov	 BYTE PTR [rax+rdx], 0
; Line 343
  00036	48 8b c2	 mov	 rax, rdx
; Line 344
  00039	c3		 ret	 0
unmakemask ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT makemask
_TEXT	SEGMENT
smask$ = 48
count$ = 56
makemask PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 324
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b f2		 mov	 esi, edx
; Line 325
  00011	33 db		 xor	 ebx, ebx
  00013	48 8b f9	 mov	 rdi, rcx
; Line 326
  00016	8d 53 63	 lea	 edx, QWORD PTR [rbx+99]
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0001f	b9 01 00 00 00	 mov	 ecx, 1
  00024	48 85 c0	 test	 rax, rax
; Line 327
  00027	8d 51 71	 lea	 edx, QWORD PTR [rcx+113]
  0002a	0f 45 d9	 cmovne	 ebx, ecx
  0002d	48 8b cf	 mov	 rcx, rdi
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00036	48 85 c0	 test	 rax, rax
  00039	74 03		 je	 SHORT $LN3@makemask
  0003b	83 cb 02	 or	 ebx, 2
$LN3@makemask:
; Line 328
  0003e	ba 6c 00 00 00	 mov	 edx, 108		; 0000006cH
  00043	48 8b cf	 mov	 rcx, rdi
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0004c	48 85 c0	 test	 rax, rax
  0004f	74 03		 je	 SHORT $LN2@makemask
  00051	83 cb 04	 or	 ebx, 4
$LN2@makemask:
; Line 329
  00054	85 f6		 test	 esi, esi
  00056	7e 03		 jle	 SHORT $LN7@makemask
  00058	83 cb 08	 or	 ebx, 8
$LN7@makemask:
; Line 331
  0005b	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00060	8b c3		 mov	 eax, ebx
  00062	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
makemask ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT hookf
_TEXT	SEGMENT
L$ = 64
ar$ = 72
hookf	PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 305
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx
; Line 308
  0000d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:HOOKKEY
  00014	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	e8 00 00 00 00	 call	 lua_rawgetp
; Line 309
  00021	48 8b cb	 mov	 rcx, rbx
  00024	e8 00 00 00 00	 call	 lua_pushthread
; Line 310
  00029	ba fe ff ff ff	 mov	 edx, -2
  0002e	48 8b cb	 mov	 rcx, rbx
  00031	e8 00 00 00 00	 call	 lua_rawget
  00036	83 f8 06	 cmp	 eax, 6
  00039	75 4b		 jne	 SHORT $LN3@hookf
; Line 311
  0003b	48 63 17	 movsxd	 rdx, DWORD PTR [rdi]
  0003e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?hooknames@?1??hookf@@9@9
  00045	48 8b cb	 mov	 rcx, rbx
  00048	48 8b 14 d0	 mov	 rdx, QWORD PTR [rax+rdx*8]
  0004c	e8 00 00 00 00	 call	 lua_pushstring
; Line 312
  00051	48 63 47 28	 movsxd	 rax, DWORD PTR [rdi+40]
; Line 313
  00055	48 8b cb	 mov	 rcx, rbx
  00058	85 c0		 test	 eax, eax
  0005a	78 0a		 js	 SHORT $LN2@hookf
  0005c	48 8b d0	 mov	 rdx, rax
  0005f	e8 00 00 00 00	 call	 lua_pushinteger
  00064	eb 05		 jmp	 SHORT $LN1@hookf
$LN2@hookf:
; Line 314
  00066	e8 00 00 00 00	 call	 lua_pushnil
$LN1@hookf:
; Line 316
  0006b	45 33 c9	 xor	 r9d, r9d
  0006e	45 33 c0	 xor	 r8d, r8d
  00071	48 8b cb	 mov	 rcx, rbx
  00074	41 8d 51 02	 lea	 edx, QWORD PTR [r9+2]
  00078	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00081	e8 00 00 00 00	 call	 lua_callk
$LN3@hookf:
; Line 318
  00086	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
hookf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_upvaluejoin
_TEXT	SEGMENT
L$ = 64
db_upvaluejoin PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 291
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; Line 292
  0000f	ba 02 00 00 00	 mov	 edx, 2
  00014	48 8b d9	 mov	 rbx, rcx
  00017	e8 00 00 00 00	 call	 luaL_checkinteger
  0001c	ba 01 00 00 00	 mov	 edx, 1
  00021	48 8b cb	 mov	 rcx, rbx
  00024	44 8d 42 05	 lea	 r8d, QWORD PTR [rdx+5]
  00028	48 8b f0	 mov	 rsi, rax
  0002b	e8 00 00 00 00	 call	 luaL_checktype
  00030	44 8b c6	 mov	 r8d, esi
  00033	ba 01 00 00 00	 mov	 edx, 1
  00038	48 8b cb	 mov	 rcx, rbx
  0003b	e8 00 00 00 00	 call	 lua_getupvalue
  00040	48 85 c0	 test	 rax, rax
  00043	75 12		 jne	 SHORT $LN7@db_upvalue
  00045	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@MMNKKMGE@invalid?5upvalue?5index?$AA@
  0004c	8d 50 02	 lea	 edx, QWORD PTR [rax+2]
  0004f	48 8b cb	 mov	 rcx, rbx
  00052	e8 00 00 00 00	 call	 luaL_argerror
$LN7@db_upvalue:
; Line 293
  00057	ba 04 00 00 00	 mov	 edx, 4
  0005c	48 8b cb	 mov	 rcx, rbx
  0005f	e8 00 00 00 00	 call	 luaL_checkinteger
  00064	ba 03 00 00 00	 mov	 edx, 3
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	44 8d 42 03	 lea	 r8d, QWORD PTR [rdx+3]
  00070	48 8b f8	 mov	 rdi, rax
  00073	e8 00 00 00 00	 call	 luaL_checktype
  00078	44 8b c7	 mov	 r8d, edi
  0007b	ba 03 00 00 00	 mov	 edx, 3
  00080	48 8b cb	 mov	 rcx, rbx
  00083	e8 00 00 00 00	 call	 lua_getupvalue
  00088	48 85 c0	 test	 rax, rax
  0008b	75 12		 jne	 SHORT $LN10@db_upvalue
  0008d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@MMNKKMGE@invalid?5upvalue?5index?$AA@
  00094	8d 50 04	 lea	 edx, QWORD PTR [rax+4]
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	e8 00 00 00 00	 call	 luaL_argerror
$LN10@db_upvalue:
; Line 294
  0009f	ba 01 00 00 00	 mov	 edx, 1
  000a4	48 8b cb	 mov	 rcx, rbx
  000a7	e8 00 00 00 00	 call	 lua_iscfunction
  000ac	85 c0		 test	 eax, eax
  000ae	74 14		 je	 SHORT $LN3@db_upvalue
  000b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@EHJAKGKG@Lua?5function?5expected?$AA@
  000b7	ba 01 00 00 00	 mov	 edx, 1
  000bc	48 8b cb	 mov	 rcx, rbx
  000bf	e8 00 00 00 00	 call	 luaL_argerror
$LN3@db_upvalue:
; Line 295
  000c4	ba 03 00 00 00	 mov	 edx, 3
  000c9	48 8b cb	 mov	 rcx, rbx
  000cc	e8 00 00 00 00	 call	 lua_iscfunction
  000d1	85 c0		 test	 eax, eax
  000d3	74 14		 je	 SHORT $LN4@db_upvalue
  000d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@EHJAKGKG@Lua?5function?5expected?$AA@
  000dc	ba 03 00 00 00	 mov	 edx, 3
  000e1	48 8b cb	 mov	 rcx, rbx
  000e4	e8 00 00 00 00	 call	 luaL_argerror
$LN4@db_upvalue:
; Line 296
  000e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ef	44 8b c6	 mov	 r8d, esi
  000f2	48 8b cb	 mov	 rcx, rbx
  000f5	41 8d 51 fe	 lea	 edx, QWORD PTR [r9-2]
  000f9	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  000fd	e8 00 00 00 00	 call	 lua_upvaluejoin
; Line 298
  00102	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00107	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0010c	33 c0		 xor	 eax, eax
  0010e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00112	5f		 pop	 rdi
  00113	c3		 ret	 0
db_upvaluejoin ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_upvalueid
_TEXT	SEGMENT
L$ = 48
db_upvalueid PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 284
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 285
  0000a	ba 02 00 00 00	 mov	 edx, 2
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	e8 00 00 00 00	 call	 luaL_checkinteger
  00017	ba 01 00 00 00	 mov	 edx, 1
  0001c	48 8b cb	 mov	 rcx, rbx
  0001f	44 8d 42 05	 lea	 r8d, QWORD PTR [rdx+5]
  00023	48 8b f8	 mov	 rdi, rax
  00026	e8 00 00 00 00	 call	 luaL_checktype
  0002b	44 8b c7	 mov	 r8d, edi
  0002e	ba 01 00 00 00	 mov	 edx, 1
  00033	48 8b cb	 mov	 rcx, rbx
  00036	e8 00 00 00 00	 call	 lua_getupvalue
  0003b	48 85 c0	 test	 rax, rax
  0003e	75 12		 jne	 SHORT $LN5@db_upvalue
  00040	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@MMNKKMGE@invalid?5upvalue?5index?$AA@
  00047	8d 50 02	 lea	 edx, QWORD PTR [rax+2]
  0004a	48 8b cb	 mov	 rcx, rbx
  0004d	e8 00 00 00 00	 call	 luaL_argerror
$LN5@db_upvalue:
; Line 286
  00052	44 8b c7	 mov	 r8d, edi
  00055	ba 01 00 00 00	 mov	 edx, 1
  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	e8 00 00 00 00	 call	 lua_upvalueid
  00062	48 8b cb	 mov	 rcx, rbx
  00065	48 8b d0	 mov	 rdx, rax
  00068	e8 00 00 00 00	 call	 lua_pushlightuserdata
; Line 288
  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
db_upvalueid ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT checkupval
_TEXT	SEGMENT
L$ = 48
argf$ = 56
argnup$ = 64
checkupval PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 275
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	8b da		 mov	 ebx, edx
; Line 276
  00016	41 8b d0	 mov	 edx, r8d
  00019	41 8b e8	 mov	 ebp, r8d
  0001c	48 8b f1	 mov	 rsi, rcx
  0001f	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 277
  00024	41 b8 06 00 00
	00		 mov	 r8d, 6
  0002a	8b d3		 mov	 edx, ebx
  0002c	48 8b ce	 mov	 rcx, rsi
  0002f	48 8b f8	 mov	 rdi, rax
  00032	e8 00 00 00 00	 call	 luaL_checktype
; Line 279
  00037	44 8b c7	 mov	 r8d, edi
  0003a	8b d3		 mov	 edx, ebx
  0003c	48 8b ce	 mov	 rcx, rsi
  0003f	e8 00 00 00 00	 call	 lua_getupvalue
  00044	48 85 c0	 test	 rax, rax
  00047	75 11		 jne	 SHORT $LN4@checkupval
  00049	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@MMNKKMGE@invalid?5upvalue?5index?$AA@
  00050	8b d5		 mov	 edx, ebp
  00052	48 8b ce	 mov	 rcx, rsi
  00055	e8 00 00 00 00	 call	 luaL_argerror
$LN4@checkupval:
; Line 281
  0005a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005f	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00064	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00069	8b c7		 mov	 eax, edi
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
checkupval ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_setupvalue
_TEXT	SEGMENT
L$ = 48
db_setupvalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 265
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 266
  0000a	ba 03 00 00 00	 mov	 edx, 3
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 luaL_checkany
; Line 267
  00017	ba 02 00 00 00	 mov	 edx, 2
  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	e8 00 00 00 00	 call	 luaL_checkinteger
  00024	ba 01 00 00 00	 mov	 edx, 1
  00029	48 8b cf	 mov	 rcx, rdi
  0002c	44 8d 42 05	 lea	 r8d, QWORD PTR [rdx+5]
  00030	48 8b d8	 mov	 rbx, rax
  00033	e8 00 00 00 00	 call	 luaL_checktype
  00038	44 8b c3	 mov	 r8d, ebx
  0003b	ba 01 00 00 00	 mov	 edx, 1
  00040	48 8b cf	 mov	 rcx, rdi
  00043	e8 00 00 00 00	 call	 lua_setupvalue
  00048	48 85 c0	 test	 rax, rax
  0004b	75 0b		 jne	 SHORT $LN3@db_setupva
; Line 268
  0004d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
; Line 267
$LN3@db_setupva:
  00058	48 8b d0	 mov	 rdx, rax
  0005b	48 8b cf	 mov	 rcx, rdi
  0005e	e8 00 00 00 00	 call	 lua_pushstring
  00063	41 b8 01 00 00
	00		 mov	 r8d, 1
  00069	83 ca ff	 or	 edx, -1
  0006c	48 8b cf	 mov	 rcx, rdi
  0006f	e8 00 00 00 00	 call	 lua_rotate
; Line 268
  00074	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	5f		 pop	 rdi
  00083	c3		 ret	 0
db_setupvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_getupvalue
_TEXT	SEGMENT
L$ = 48
db_getupvalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 260
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 261
  0000a	ba 02 00 00 00	 mov	 edx, 2
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	e8 00 00 00 00	 call	 luaL_checkinteger
  00017	ba 01 00 00 00	 mov	 edx, 1
  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	44 8d 42 05	 lea	 r8d, QWORD PTR [rdx+5]
  00023	48 8b d8	 mov	 rbx, rax
  00026	e8 00 00 00 00	 call	 luaL_checktype
  0002b	44 8b c3	 mov	 r8d, ebx
  0002e	ba 01 00 00 00	 mov	 edx, 1
  00033	48 8b cf	 mov	 rcx, rdi
  00036	e8 00 00 00 00	 call	 lua_getupvalue
  0003b	48 85 c0	 test	 rax, rax
  0003e	75 0b		 jne	 SHORT $LN3@db_getupva
; Line 262
  00040	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
; Line 261
$LN3@db_getupva:
  0004b	48 8b d0	 mov	 rdx, rax
  0004e	48 8b cf	 mov	 rcx, rdi
  00051	e8 00 00 00 00	 call	 lua_pushstring
  00056	ba fe ff ff ff	 mov	 edx, -2
  0005b	48 8b cf	 mov	 rcx, rdi
  0005e	44 8d 42 03	 lea	 r8d, QWORD PTR [rdx+3]
  00062	e8 00 00 00 00	 call	 lua_rotate
; Line 262
  00067	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006c	b8 02 00 00 00	 mov	 eax, 2
  00071	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00075	5f		 pop	 rdi
  00076	c3		 ret	 0
db_getupvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT auxupvalue
_TEXT	SEGMENT
L$ = 48
get$ = 56
auxupvalue PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 248
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b f2		 mov	 esi, edx
; Line 250
  00011	ba 02 00 00 00	 mov	 edx, 2
  00016	48 8b d9	 mov	 rbx, rcx
  00019	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 251
  0001e	ba 01 00 00 00	 mov	 edx, 1
  00023	48 8b cb	 mov	 rcx, rbx
  00026	44 8d 42 05	 lea	 r8d, QWORD PTR [rdx+5]
  0002a	48 8b f8	 mov	 rdi, rax
  0002d	e8 00 00 00 00	 call	 luaL_checktype
; Line 252
  00032	44 8b c7	 mov	 r8d, edi
  00035	ba 01 00 00 00	 mov	 edx, 1
  0003a	48 8b cb	 mov	 rcx, rbx
  0003d	85 f6		 test	 esi, esi
  0003f	74 07		 je	 SHORT $LN4@auxupvalue
  00041	e8 00 00 00 00	 call	 lua_getupvalue
  00046	eb 05		 jmp	 SHORT $LN5@auxupvalue
$LN4@auxupvalue:
  00048	e8 00 00 00 00	 call	 lua_setupvalue
$LN5@auxupvalue:
; Line 253
  0004d	48 85 c0	 test	 rax, rax
  00050	75 10		 jne	 SHORT $LN1@auxupvalue
; Line 257
  00052	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00057	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
$LN1@auxupvalue:
; Line 254
  00062	48 8b d0	 mov	 rdx, rax
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 lua_pushstring
; Line 255
  0006d	83 ca ff	 or	 edx, -1
  00070	41 b8 01 00 00
	00		 mov	 r8d, 1
  00076	2b d6		 sub	 edx, esi
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 lua_rotate
; Line 257
  00080	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00085	8d 46 01	 lea	 eax, DWORD PTR [rsi+1]
  00088	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
auxupvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_setlocal
_TEXT	SEGMENT
ar$ = 32
__$ArrayPad$ = 160
L$ = 208
db_setlocal PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 224
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 227
  0002d	ba 01 00 00 00	 mov	 edx, 1
  00032	48 8b f9	 mov	 rdi, rcx
  00035	e8 00 00 00 00	 call	 lua_type
  0003a	83 f8 08	 cmp	 eax, 8
  0003d	75 14		 jne	 SHORT $LN6@db_setloca
  0003f	bd 01 00 00 00	 mov	 ebp, 1
  00044	48 8b cf	 mov	 rcx, rdi
  00047	8b d5		 mov	 edx, ebp
  00049	e8 00 00 00 00	 call	 lua_tothread
  0004e	48 8b f0	 mov	 rsi, rax
  00051	eb 05		 jmp	 SHORT $LN5@db_setloca
$LN6@db_setloca:
  00053	33 ed		 xor	 ebp, ebp
  00055	48 8b f7	 mov	 rsi, rdi
$LN5@db_setloca:
; Line 229
  00058	8d 55 01	 lea	 edx, DWORD PTR [rbp+1]
  0005b	48 8b cf	 mov	 rcx, rdi
  0005e	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 230
  00063	8d 55 02	 lea	 edx, DWORD PTR [rbp+2]
  00066	48 8b cf	 mov	 rcx, rdi
  00069	48 8b d8	 mov	 rbx, rax
  0006c	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 231
  00071	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  00076	8b d3		 mov	 edx, ebx
  00078	48 8b ce	 mov	 rcx, rsi
  0007b	4c 8b f8	 mov	 r15, rax
  0007e	e8 00 00 00 00	 call	 lua_getstack
; Line 232
  00083	48 8b cf	 mov	 rcx, rdi
  00086	85 c0		 test	 eax, eax
  00088	75 11		 jne	 SHORT $LN2@db_setloca
  0008a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@EFMIJNPC@level?5out?5of?5range?$AA@
  00091	8d 55 01	 lea	 edx, DWORD PTR [rbp+1]
  00094	e8 00 00 00 00	 call	 luaL_argerror
  00099	eb 7c		 jmp	 SHORT $LN3@db_setloca
$LN2@db_setloca:
; Line 233
  0009b	8d 55 03	 lea	 edx, DWORD PTR [rbp+3]
  0009e	e8 00 00 00 00	 call	 luaL_checkany
; Line 234
  000a3	8d 55 03	 lea	 edx, DWORD PTR [rbp+3]
  000a6	48 8b cf	 mov	 rcx, rdi
  000a9	e8 00 00 00 00	 call	 lua_settop
; Line 235
  000ae	48 3b fe	 cmp	 rdi, rsi
  000b1	74 20		 je	 SHORT $LN9@db_setloca
  000b3	ba 01 00 00 00	 mov	 edx, 1
  000b8	48 8b ce	 mov	 rcx, rsi
  000bb	e8 00 00 00 00	 call	 lua_checkstack
  000c0	85 c0		 test	 eax, eax
  000c2	75 0f		 jne	 SHORT $LN9@db_setloca
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  000cb	48 8b cf	 mov	 rcx, rdi
  000ce	e8 00 00 00 00	 call	 luaL_error
$LN9@db_setloca:
; Line 236
  000d3	41 b8 01 00 00
	00		 mov	 r8d, 1
  000d9	48 8b d6	 mov	 rdx, rsi
  000dc	48 8b cf	 mov	 rcx, rdi
  000df	e8 00 00 00 00	 call	 lua_xmove
; Line 237
  000e4	48 8d 54 24 20	 lea	 rdx, QWORD PTR ar$[rsp]
  000e9	45 8b c7	 mov	 r8d, r15d
  000ec	48 8b ce	 mov	 rcx, rsi
  000ef	e8 00 00 00 00	 call	 lua_setlocal
  000f4	48 8b d8	 mov	 rbx, rax
; Line 238
  000f7	48 85 c0	 test	 rax, rax
  000fa	75 0b		 jne	 SHORT $LN1@db_setloca
; Line 239
  000fc	8d 50 fe	 lea	 edx, QWORD PTR [rax-2]
  000ff	48 8b ce	 mov	 rcx, rsi
  00102	e8 00 00 00 00	 call	 lua_settop
$LN1@db_setloca:
; Line 240
  00107	48 8b d3	 mov	 rdx, rbx
  0010a	48 8b cf	 mov	 rcx, rdi
  0010d	e8 00 00 00 00	 call	 lua_pushstring
; Line 241
  00112	b8 01 00 00 00	 mov	 eax, 1
$LN3@db_setloca:
; Line 242
  00117	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011f	48 33 cc	 xor	 rcx, rsp
  00122	e8 00 00 00 00	 call	 __security_check_cookie
  00127	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  0012f	49 8b 5b 28	 mov	 rbx, QWORD PTR [r11+40]
  00133	49 8b 6b 30	 mov	 rbp, QWORD PTR [r11+48]
  00137	49 8b 73 38	 mov	 rsi, QWORD PTR [r11+56]
  0013b	49 8b e3	 mov	 rsp, r11
  0013e	41 5f		 pop	 r15
  00140	41 5e		 pop	 r14
  00142	5f		 pop	 rdi
  00143	c3		 ret	 0
db_setlocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_getlocal
_TEXT	SEGMENT
ar$ = 32
__$ArrayPad$ = 160
L$ = 192
db_getlocal PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 193
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 195
  00029	ba 01 00 00 00	 mov	 edx, 1
  0002e	48 8b d9	 mov	 rbx, rcx
  00031	e8 00 00 00 00	 call	 lua_type
  00036	83 f8 08	 cmp	 eax, 8
  00039	75 14		 jne	 SHORT $LN9@db_getloca
  0003b	be 01 00 00 00	 mov	 esi, 1
  00040	48 8b cb	 mov	 rcx, rbx
  00043	8b d6		 mov	 edx, esi
  00045	e8 00 00 00 00	 call	 lua_tothread
  0004a	48 8b f8	 mov	 rdi, rax
  0004d	eb 05		 jmp	 SHORT $LN8@db_getloca
$LN9@db_getloca:
  0004f	33 f6		 xor	 esi, esi
  00051	48 8b fb	 mov	 rdi, rbx
$LN8@db_getloca:
; Line 198
  00054	8d 56 02	 lea	 edx, DWORD PTR [rsi+2]
  00057	48 8b cb	 mov	 rcx, rbx
  0005a	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 199
  0005f	ff c6		 inc	 esi
  00061	48 8b cb	 mov	 rcx, rbx
  00064	8b d6		 mov	 edx, esi
  00066	48 8b e8	 mov	 rbp, rax
  00069	e8 00 00 00 00	 call	 lua_type
; Line 200
  0006e	8b d6		 mov	 edx, esi
  00070	48 8b cb	 mov	 rcx, rbx
  00073	83 f8 06	 cmp	 eax, 6
  00076	75 22		 jne	 SHORT $LN5@db_getloca
  00078	e8 00 00 00 00	 call	 lua_pushvalue
; Line 201
  0007d	44 8b c5	 mov	 r8d, ebp
  00080	33 d2		 xor	 edx, edx
  00082	48 8b cb	 mov	 rcx, rbx
  00085	e8 00 00 00 00	 call	 lua_getlocal
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	48 8b d0	 mov	 rdx, rax
  00090	e8 00 00 00 00	 call	 lua_pushstring
; Line 202
  00095	e9 a4 00 00 00	 jmp	 $LN15@db_getloca
$LN5@db_getloca:
; Line 205
  0009a	e8 00 00 00 00	 call	 luaL_checkinteger
; Line 206
  0009f	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  000a4	48 8b cf	 mov	 rcx, rdi
  000a7	8b d0		 mov	 edx, eax
  000a9	e8 00 00 00 00	 call	 lua_getstack
  000ae	85 c0		 test	 eax, eax
  000b0	75 13		 jne	 SHORT $LN3@db_getloca
; Line 207
  000b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@EFMIJNPC@level?5out?5of?5range?$AA@
  000b9	8b d6		 mov	 edx, esi
  000bb	48 8b cb	 mov	 rcx, rbx
  000be	e8 00 00 00 00	 call	 luaL_argerror
  000c3	eb 7e		 jmp	 SHORT $LN1@db_getloca
$LN3@db_getloca:
; Line 208
  000c5	48 3b df	 cmp	 rbx, rdi
  000c8	74 20		 je	 SHORT $LN12@db_getloca
  000ca	ba 01 00 00 00	 mov	 edx, 1
  000cf	48 8b cf	 mov	 rcx, rdi
  000d2	e8 00 00 00 00	 call	 lua_checkstack
  000d7	85 c0		 test	 eax, eax
  000d9	75 0f		 jne	 SHORT $LN12@db_getloca
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  000e2	48 8b cb	 mov	 rcx, rbx
  000e5	e8 00 00 00 00	 call	 luaL_error
$LN12@db_getloca:
; Line 209
  000ea	48 8d 54 24 20	 lea	 rdx, QWORD PTR ar$[rsp]
  000ef	44 8b c5	 mov	 r8d, ebp
  000f2	48 8b cf	 mov	 rcx, rdi
  000f5	e8 00 00 00 00	 call	 lua_getlocal
  000fa	48 8b f0	 mov	 rsi, rax
; Line 210
  000fd	48 85 c0	 test	 rax, rax
  00100	74 34		 je	 SHORT $LN2@db_getloca
; Line 211
  00102	41 b8 01 00 00
	00		 mov	 r8d, 1
  00108	48 8b d3	 mov	 rdx, rbx
  0010b	48 8b cf	 mov	 rcx, rdi
  0010e	e8 00 00 00 00	 call	 lua_xmove
; Line 212
  00113	48 8b d6	 mov	 rdx, rsi
  00116	48 8b cb	 mov	 rcx, rbx
  00119	e8 00 00 00 00	 call	 lua_pushstring
; Line 213
  0011e	ba fe ff ff ff	 mov	 edx, -2
  00123	48 8b cb	 mov	 rcx, rbx
  00126	44 8d 42 03	 lea	 r8d, QWORD PTR [rdx+3]
  0012a	e8 00 00 00 00	 call	 lua_rotate
; Line 214
  0012f	b8 02 00 00 00	 mov	 eax, 2
  00134	eb 0d		 jmp	 SHORT $LN1@db_getloca
$LN2@db_getloca:
; Line 217
  00136	48 8b cb	 mov	 rcx, rbx
  00139	e8 00 00 00 00	 call	 lua_pushnil
$LN15@db_getloca:
; Line 218
  0013e	b8 01 00 00 00	 mov	 eax, 1
$LN1@db_getloca:
; Line 221
  00143	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0014b	48 33 cc	 xor	 rcx, rsp
  0014e	e8 00 00 00 00	 call	 __security_check_cookie
  00153	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  0015b	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  0015f	49 8b 6b 20	 mov	 rbp, QWORD PTR [r11+32]
  00163	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  00167	49 8b e3	 mov	 rsp, r11
  0016a	5f		 pop	 rdi
  0016b	c3		 ret	 0
db_getlocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_getinfo
_TEXT	SEGMENT
ar$ = 32
__$ArrayPad$ = 160
L$ = 208
db_getinfo PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 145
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 56		 push	 r14
  0000e	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 148
  00027	ba 01 00 00 00	 mov	 edx, 1
  0002c	48 8b d9	 mov	 rbx, rcx
  0002f	e8 00 00 00 00	 call	 lua_type
  00034	83 f8 08	 cmp	 eax, 8
  00037	75 14		 jne	 SHORT $LN15@db_getinfo
  00039	bd 01 00 00 00	 mov	 ebp, 1
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	8b d5		 mov	 edx, ebp
  00043	e8 00 00 00 00	 call	 lua_tothread
  00048	48 8b f8	 mov	 rdi, rax
  0004b	eb 05		 jmp	 SHORT $LN14@db_getinfo
$LN15@db_getinfo:
  0004d	33 ed		 xor	 ebp, ebp
  0004f	48 8b fb	 mov	 rdi, rbx
$LN14@db_getinfo:
; Line 149
  00052	44 8d 75 02	 lea	 r14d, DWORD PTR [rbp+2]
  00056	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06LMJLCCA@flnStu?$AA@
  0005d	45 33 c9	 xor	 r9d, r9d
  00060	41 8b d6	 mov	 edx, r14d
  00063	48 8b cb	 mov	 rcx, rbx
  00066	e8 00 00 00 00	 call	 luaL_optlstring
  0006b	48 8b f0	 mov	 rsi, rax
; Line 150
  0006e	48 3b df	 cmp	 rbx, rdi
  00071	74 20		 je	 SHORT $LN18@db_getinfo
  00073	ba 03 00 00 00	 mov	 edx, 3
  00078	48 8b cf	 mov	 rcx, rdi
  0007b	e8 00 00 00 00	 call	 lua_checkstack
  00080	85 c0		 test	 eax, eax
  00082	75 0f		 jne	 SHORT $LN18@db_getinfo
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  0008b	48 8b cb	 mov	 rcx, rbx
  0008e	e8 00 00 00 00	 call	 luaL_error
$LN18@db_getinfo:
; Line 151
  00093	ff c5		 inc	 ebp
  00095	48 8b cb	 mov	 rcx, rbx
  00098	8b d5		 mov	 edx, ebp
  0009a	e8 00 00 00 00	 call	 lua_type
; Line 152
  0009f	48 8b cb	 mov	 rcx, rbx
  000a2	83 f8 06	 cmp	 eax, 6
  000a5	75 58		 jne	 SHORT $LN11@db_getinfo
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PENLABEP@?$DO?$CFs?$AA@
  000ae	4c 8b c6	 mov	 r8, rsi
  000b1	e8 00 00 00 00	 call	 lua_pushfstring
; Line 153
  000b6	8b d5		 mov	 edx, ebp
  000b8	48 8b cb	 mov	 rcx, rbx
  000bb	48 8b f0	 mov	 rsi, rax
  000be	e8 00 00 00 00	 call	 lua_pushvalue
; Line 154
  000c3	41 b8 01 00 00
	00		 mov	 r8d, 1
  000c9	48 8b d7	 mov	 rdx, rdi
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	e8 00 00 00 00	 call	 lua_xmove
$LN9@db_getinfo:
; Line 162
  000d4	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  000d9	48 8b d6	 mov	 rdx, rsi
  000dc	48 8b cf	 mov	 rcx, rdi
  000df	e8 00 00 00 00	 call	 lua_getinfo
; Line 163
  000e4	48 8b cb	 mov	 rcx, rbx
  000e7	85 c0		 test	 eax, eax
  000e9	75 3c		 jne	 SHORT $LN8@db_getinfo
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@PJFAGLMH@invalid?5option?$AA@
  000f2	41 8b d6	 mov	 edx, r14d
  000f5	e8 00 00 00 00	 call	 luaL_argerror
  000fa	e9 bc 02 00 00	 jmp	 $LN12@db_getinfo
$LN11@db_getinfo:
; Line 157
  000ff	8b d5		 mov	 edx, ebp
  00101	e8 00 00 00 00	 call	 luaL_checkinteger
  00106	4c 8d 44 24 20	 lea	 r8, QWORD PTR ar$[rsp]
  0010b	48 8b cf	 mov	 rcx, rdi
  0010e	48 8b d0	 mov	 rdx, rax
  00111	e8 00 00 00 00	 call	 lua_getstack
  00116	85 c0		 test	 eax, eax
  00118	75 ba		 jne	 SHORT $LN9@db_getinfo
; Line 158
  0011a	48 8b cb	 mov	 rcx, rbx
  0011d	e8 00 00 00 00	 call	 lua_pushnil
; Line 159
  00122	e9 8f 02 00 00	 jmp	 $LN51@db_getinfo
$LN8@db_getinfo:
; Line 164
  00127	45 33 c0	 xor	 r8d, r8d
  0012a	33 d2		 xor	 edx, edx
  0012c	e8 00 00 00 00	 call	 lua_createtable
; Line 165
  00131	ba 53 00 00 00	 mov	 edx, 83			; 00000053H
  00136	48 8b ce	 mov	 rcx, rsi
  00139	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0013f	48 85 c0	 test	 rax, rax
  00142	0f 84 a5 00 00
	00		 je	 $LN29@db_getinfo
; Line 166
  00148	48 8b 54 24 40	 mov	 rdx, QWORD PTR ar$[rsp+32]
  0014d	48 8b cb	 mov	 rcx, rbx
  00150	e8 00 00 00 00	 call	 lua_pushstring
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06OEKOLKIL@source?$AA@
  0015c	ba fe ff ff ff	 mov	 edx, -2
  00161	48 8b cb	 mov	 rcx, rbx
  00164	e8 00 00 00 00	 call	 lua_setfield
; Line 167
  00169	48 8d 54 24 58	 lea	 rdx, QWORD PTR ar$[rsp+56]
  0016e	48 8b cb	 mov	 rcx, rbx
  00171	e8 00 00 00 00	 call	 lua_pushstring
  00176	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09NOFDGFFO@short_src?$AA@
  0017d	ba fe ff ff ff	 mov	 edx, -2
  00182	48 8b cb	 mov	 rcx, rbx
  00185	e8 00 00 00 00	 call	 lua_setfield
; Line 168
  0018a	48 63 54 24 4c	 movsxd	 rdx, DWORD PTR ar$[rsp+44]
  0018f	48 8b cb	 mov	 rcx, rbx
  00192	e8 00 00 00 00	 call	 lua_pushinteger
  00197	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@IOFFDKM@linedefined?$AA@
  0019e	ba fe ff ff ff	 mov	 edx, -2
  001a3	48 8b cb	 mov	 rcx, rbx
  001a6	e8 00 00 00 00	 call	 lua_setfield
; Line 169
  001ab	48 63 54 24 50	 movsxd	 rdx, DWORD PTR ar$[rsp+48]
  001b0	48 8b cb	 mov	 rcx, rbx
  001b3	e8 00 00 00 00	 call	 lua_pushinteger
  001b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@BGGOJOFO@lastlinedefined?$AA@
  001bf	ba fe ff ff ff	 mov	 edx, -2
  001c4	48 8b cb	 mov	 rcx, rbx
  001c7	e8 00 00 00 00	 call	 lua_setfield
; Line 170
  001cc	48 8b 54 24 38	 mov	 rdx, QWORD PTR ar$[rsp+24]
  001d1	48 8b cb	 mov	 rcx, rbx
  001d4	e8 00 00 00 00	 call	 lua_pushstring
  001d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04IOPLPGDE@what?$AA@
  001e0	ba fe ff ff ff	 mov	 edx, -2
  001e5	48 8b cb	 mov	 rcx, rbx
  001e8	e8 00 00 00 00	 call	 lua_setfield
$LN29@db_getinfo:
; Line 172
  001ed	ba 6c 00 00 00	 mov	 edx, 108		; 0000006cH
  001f2	48 8b ce	 mov	 rcx, rsi
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  001fb	48 85 c0	 test	 rax, rax
  001fe	74 21		 je	 SHORT $LN31@db_getinfo
; Line 173
  00200	48 63 54 24 48	 movsxd	 rdx, DWORD PTR ar$[rsp+40]
  00205	48 8b cb	 mov	 rcx, rbx
  00208	e8 00 00 00 00	 call	 lua_pushinteger
  0020d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@OLGEEKJC@currentline?$AA@
  00214	ba fe ff ff ff	 mov	 edx, -2
  00219	48 8b cb	 mov	 rcx, rbx
  0021c	e8 00 00 00 00	 call	 lua_setfield
$LN31@db_getinfo:
; Line 174
  00221	ba 75 00 00 00	 mov	 edx, 117		; 00000075H
  00226	48 8b ce	 mov	 rcx, rsi
  00229	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0022f	48 85 c0	 test	 rax, rax
  00232	74 63		 je	 SHORT $LN37@db_getinfo
; Line 175
  00234	0f b6 54 24 54	 movzx	 edx, BYTE PTR ar$[rsp+52]
  00239	48 8b cb	 mov	 rcx, rbx
  0023c	e8 00 00 00 00	 call	 lua_pushinteger
  00241	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04BDNNNDAF@nups?$AA@
  00248	ba fe ff ff ff	 mov	 edx, -2
  0024d	48 8b cb	 mov	 rcx, rbx
  00250	e8 00 00 00 00	 call	 lua_setfield
; Line 176
  00255	0f b6 54 24 55	 movzx	 edx, BYTE PTR ar$[rsp+53]
  0025a	48 8b cb	 mov	 rcx, rbx
  0025d	e8 00 00 00 00	 call	 lua_pushinteger
  00262	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07DEOJMPEE@nparams?$AA@
  00269	ba fe ff ff ff	 mov	 edx, -2
  0026e	48 8b cb	 mov	 rcx, rbx
  00271	e8 00 00 00 00	 call	 lua_setfield
; Line 177
  00276	0f be 54 24 56	 movsx	 edx, BYTE PTR ar$[rsp+54]
  0027b	48 8b cb	 mov	 rcx, rbx
  0027e	e8 00 00 00 00	 call	 lua_pushboolean
  00283	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08PKLIBBKE@isvararg?$AA@
  0028a	ba fe ff ff ff	 mov	 edx, -2
  0028f	48 8b cb	 mov	 rcx, rbx
  00292	e8 00 00 00 00	 call	 lua_setfield
$LN37@db_getinfo:
; Line 179
  00297	ba 6e 00 00 00	 mov	 edx, 110		; 0000006eH
  0029c	48 8b ce	 mov	 rcx, rsi
  0029f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  002a5	48 85 c0	 test	 rax, rax
  002a8	74 42		 je	 SHORT $LN41@db_getinfo
; Line 180
  002aa	48 8b 54 24 28	 mov	 rdx, QWORD PTR ar$[rsp+8]
  002af	48 8b cb	 mov	 rcx, rbx
  002b2	e8 00 00 00 00	 call	 lua_pushstring
  002b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04MEMAJGDJ@name?$AA@
  002be	ba fe ff ff ff	 mov	 edx, -2
  002c3	48 8b cb	 mov	 rcx, rbx
  002c6	e8 00 00 00 00	 call	 lua_setfield
; Line 181
  002cb	48 8b 54 24 30	 mov	 rdx, QWORD PTR ar$[rsp+16]
  002d0	48 8b cb	 mov	 rcx, rbx
  002d3	e8 00 00 00 00	 call	 lua_pushstring
  002d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08JEGIFMFI@namewhat?$AA@
  002df	ba fe ff ff ff	 mov	 edx, -2
  002e4	48 8b cb	 mov	 rcx, rbx
  002e7	e8 00 00 00 00	 call	 lua_setfield
$LN41@db_getinfo:
; Line 183
  002ec	ba 74 00 00 00	 mov	 edx, 116		; 00000074H
  002f1	48 8b ce	 mov	 rcx, rsi
  002f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  002fa	48 85 c0	 test	 rax, rax
  002fd	74 21		 je	 SHORT $LN43@db_getinfo
; Line 184
  002ff	0f be 54 24 57	 movsx	 edx, BYTE PTR ar$[rsp+55]
  00304	48 8b cb	 mov	 rcx, rbx
  00307	e8 00 00 00 00	 call	 lua_pushboolean
  0030c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@KHAEKHMK@istailcall?$AA@
  00313	ba fe ff ff ff	 mov	 edx, -2
  00318	48 8b cb	 mov	 rcx, rbx
  0031b	e8 00 00 00 00	 call	 lua_setfield
$LN43@db_getinfo:
; Line 185
  00320	ba 4c 00 00 00	 mov	 edx, 76			; 0000004cH
  00325	48 8b ce	 mov	 rcx, rsi
  00328	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0032e	48 85 c0	 test	 rax, rax
  00331	74 38		 je	 SHORT $LN47@db_getinfo
; Line 186
  00333	41 b8 01 00 00
	00		 mov	 r8d, 1
  00339	48 3b df	 cmp	 rbx, rdi
  0033c	75 0e		 jne	 SHORT $LN46@db_getinfo
  0033e	41 8d 50 fd	 lea	 edx, QWORD PTR [r8-3]
  00342	48 8b cb	 mov	 rcx, rbx
  00345	e8 00 00 00 00	 call	 lua_rotate
  0034a	eb 0b		 jmp	 SHORT $LN45@db_getinfo
$LN46@db_getinfo:
  0034c	48 8b d3	 mov	 rdx, rbx
  0034f	48 8b cf	 mov	 rcx, rdi
  00352	e8 00 00 00 00	 call	 lua_xmove
$LN45@db_getinfo:
  00357	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@DINLHJFF@activelines?$AA@
  0035e	ba fe ff ff ff	 mov	 edx, -2
  00363	48 8b cb	 mov	 rcx, rbx
  00366	e8 00 00 00 00	 call	 lua_setfield
$LN47@db_getinfo:
; Line 187
  0036b	ba 66 00 00 00	 mov	 edx, 102		; 00000066H
  00370	48 8b ce	 mov	 rcx, rsi
  00373	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00379	48 85 c0	 test	 rax, rax
  0037c	74 38		 je	 SHORT $LN51@db_getinfo
; Line 188
  0037e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00384	48 3b df	 cmp	 rbx, rdi
  00387	75 0e		 jne	 SHORT $LN50@db_getinfo
  00389	41 8d 50 fd	 lea	 edx, QWORD PTR [r8-3]
  0038d	48 8b cb	 mov	 rcx, rbx
  00390	e8 00 00 00 00	 call	 lua_rotate
  00395	eb 0b		 jmp	 SHORT $LN49@db_getinfo
$LN50@db_getinfo:
  00397	48 8b d3	 mov	 rdx, rbx
  0039a	48 8b cf	 mov	 rcx, rdi
  0039d	e8 00 00 00 00	 call	 lua_xmove
$LN49@db_getinfo:
  003a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04HPNHAEOP@func?$AA@
  003a9	ba fe ff ff ff	 mov	 edx, -2
  003ae	48 8b cb	 mov	 rcx, rbx
  003b1	e8 00 00 00 00	 call	 lua_setfield
$LN51@db_getinfo:
; Line 189
  003b6	b8 01 00 00 00	 mov	 eax, 1
$LN12@db_getinfo:
; Line 190
  003bb	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003c3	48 33 cc	 xor	 rcx, rsp
  003c6	e8 00 00 00 00	 call	 __security_check_cookie
  003cb	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  003d3	49 8b 5b 28	 mov	 rbx, QWORD PTR [r11+40]
  003d7	49 8b 6b 30	 mov	 rbp, QWORD PTR [r11+48]
  003db	49 8b e3	 mov	 rsp, r11
  003de	41 5e		 pop	 r14
  003e0	5f		 pop	 rdi
  003e1	5e		 pop	 rsi
  003e2	c3		 ret	 0
db_getinfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT treatstackoption
_TEXT	SEGMENT
L$ = 48
L1$ = 56
fname$ = 64
treatstackoption PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 130
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b f8	 mov	 rdi, r8
  0000d	48 8b c2	 mov	 rax, rdx
  00010	48 8b d9	 mov	 rbx, rcx
; Line 132
  00013	41 b8 01 00 00
	00		 mov	 r8d, 1
  00019	48 3b ca	 cmp	 rcx, rdx
  0001c	75 0b		 jne	 SHORT $LN2@treatstack
  0001e	41 8d 50 fd	 lea	 edx, QWORD PTR [r8-3]
  00022	e8 00 00 00 00	 call	 lua_rotate
; Line 133
  00027	eb 0b		 jmp	 SHORT $LN1@treatstack
$LN2@treatstack:
; Line 134
  00029	48 8b d1	 mov	 rdx, rcx
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 lua_xmove
$LN1@treatstack:
; Line 135
  00034	4c 8b c7	 mov	 r8, rdi
  00037	ba fe ff ff ff	 mov	 edx, -2
  0003c	48 8b cb	 mov	 rcx, rbx
; Line 136
  0003f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
; Line 135
  00049	e9 00 00 00 00	 jmp	 lua_setfield
treatstackoption ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT settabsb
_TEXT	SEGMENT
L$ = 48
k$ = 56
v$ = 64
settabsb PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 117
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
; Line 118
  0000d	41 8b d0	 mov	 edx, r8d
  00010	48 8b f9	 mov	 rdi, rcx
  00013	e8 00 00 00 00	 call	 lua_pushboolean
; Line 119
  00018	4c 8b c3	 mov	 r8, rbx
  0001b	ba fe ff ff ff	 mov	 edx, -2
  00020	48 8b cf	 mov	 rcx, rdi
; Line 120
  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
; Line 119
  0002d	e9 00 00 00 00	 jmp	 lua_setfield
settabsb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT settabsi
_TEXT	SEGMENT
L$ = 48
k$ = 56
v$ = 64
settabsi PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 112
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
; Line 113
  0000d	49 63 d0	 movsxd	 rdx, r8d
  00010	48 8b f9	 mov	 rdi, rcx
  00013	e8 00 00 00 00	 call	 lua_pushinteger
; Line 114
  00018	4c 8b c3	 mov	 r8, rbx
  0001b	ba fe ff ff ff	 mov	 edx, -2
  00020	48 8b cf	 mov	 rcx, rdi
; Line 115
  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
; Line 114
  0002d	e9 00 00 00 00	 jmp	 lua_setfield
settabsi ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT settabss
_TEXT	SEGMENT
L$ = 48
k$ = 56
v$ = 64
settabss PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 107
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
; Line 108
  0000d	49 8b d0	 mov	 rdx, r8
  00010	48 8b f9	 mov	 rdi, rcx
  00013	e8 00 00 00 00	 call	 lua_pushstring
; Line 109
  00018	4c 8b c3	 mov	 r8, rbx
  0001b	ba fe ff ff ff	 mov	 edx, -2
  00020	48 8b cf	 mov	 rcx, rdi
; Line 110
  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
; Line 109
  0002d	e9 00 00 00 00	 jmp	 lua_setfield
settabss ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT getthread
_TEXT	SEGMENT
L$ = 48
arg$ = 56
getthread PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 90
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
; Line 91
  0000d	ba 01 00 00 00	 mov	 edx, 1
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 lua_type
  0001a	83 f8 08	 cmp	 eax, 8
  0001d	75 1b		 jne	 SHORT $LN2@getthread
; Line 93
  0001f	8d 50 f9	 lea	 edx, QWORD PTR [rax-7]
  00022	48 8b cb	 mov	 rcx, rbx
  00025	c7 07 01 00 00
	00		 mov	 DWORD PTR [rdi], 1
; Line 99
  0002b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
; Line 93
  00035	e9 00 00 00 00	 jmp	 lua_tothread
$LN2@getthread:
; Line 97
  0003a	48 8b c3	 mov	 rax, rbx
; Line 99
  0003d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00042	c7 07 00 00 00
	00		 mov	 DWORD PTR [rdi], 0
  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
getthread ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_setuservalue
_TEXT	SEGMENT
L$ = 48
db_setuservalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 75
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 76
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	44 8d 42 06	 lea	 r8d, QWORD PTR [rdx+6]
  00012	e8 00 00 00 00	 call	 luaL_checktype
; Line 77
  00017	ba 02 00 00 00	 mov	 edx, 2
  0001c	48 8b cb	 mov	 rcx, rbx
  0001f	e8 00 00 00 00	 call	 luaL_checkany
; Line 78
  00024	ba 02 00 00 00	 mov	 edx, 2
  00029	48 8b cb	 mov	 rcx, rbx
  0002c	e8 00 00 00 00	 call	 lua_settop
; Line 79
  00031	ba 01 00 00 00	 mov	 edx, 1
  00036	48 8b cb	 mov	 rcx, rbx
  00039	e8 00 00 00 00	 call	 lua_setuservalue
; Line 80
  0003e	b8 01 00 00 00	 mov	 eax, 1
; Line 81
  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5b		 pop	 rbx
  00048	c3		 ret	 0
db_setuservalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_getuservalue
_TEXT	SEGMENT
L$ = 48
db_getuservalue PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 66
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 67
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_type
; Line 68
  00013	48 8b cb	 mov	 rcx, rbx
  00016	83 f8 07	 cmp	 eax, 7
  00019	74 10		 je	 SHORT $LN2@db_getuser
  0001b	e8 00 00 00 00	 call	 lua_pushnil
; Line 71
  00020	b8 01 00 00 00	 mov	 eax, 1
; Line 72
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5b		 pop	 rbx
  0002a	c3		 ret	 0
$LN2@db_getuser:
; Line 70
  0002b	ba 01 00 00 00	 mov	 edx, 1
  00030	e8 00 00 00 00	 call	 lua_getuservalue
; Line 71
  00035	b8 01 00 00 00	 mov	 eax, 1
; Line 72
  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5b		 pop	 rbx
  0003f	c3		 ret	 0
db_getuservalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_setmetatable
_TEXT	SEGMENT
L$ = 48
db_setmetatable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 56
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 57
  00006	ba 02 00 00 00	 mov	 edx, 2
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 lua_type
; Line 59
  00013	85 c0		 test	 eax, eax
  00015	74 19		 je	 SHORT $LN3@db_setmeta
  00017	83 f8 05	 cmp	 eax, 5
  0001a	74 14		 je	 SHORT $LN3@db_setmeta
  0001c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@HDIIKINN@nil?5or?5table?5expected?$AA@
  00023	ba 02 00 00 00	 mov	 edx, 2
  00028	48 8b cb	 mov	 rcx, rbx
  0002b	e8 00 00 00 00	 call	 luaL_argerror
$LN3@db_setmeta:
; Line 60
  00030	ba 02 00 00 00	 mov	 edx, 2
  00035	48 8b cb	 mov	 rcx, rbx
  00038	e8 00 00 00 00	 call	 lua_settop
; Line 61
  0003d	ba 01 00 00 00	 mov	 edx, 1
  00042	48 8b cb	 mov	 rcx, rbx
  00045	e8 00 00 00 00	 call	 lua_setmetatable
; Line 62
  0004a	b8 01 00 00 00	 mov	 eax, 1
; Line 63
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5b		 pop	 rbx
  00054	c3		 ret	 0
db_setmetatable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_getmetatable
_TEXT	SEGMENT
L$ = 48
db_getmetatable PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 47
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 48
  00006	ba 01 00 00 00	 mov	 edx, 1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 luaL_checkany
; Line 49
  00013	ba 01 00 00 00	 mov	 edx, 1
  00018	48 8b cb	 mov	 rcx, rbx
  0001b	e8 00 00 00 00	 call	 lua_getmetatable
  00020	85 c0		 test	 eax, eax
  00022	75 08		 jne	 SHORT $LN4@db_getmeta
; Line 50
  00024	48 8b cb	 mov	 rcx, rbx
  00027	e8 00 00 00 00	 call	 lua_pushnil
$LN4@db_getmeta:
; Line 52
  0002c	b8 01 00 00 00	 mov	 eax, 1
; Line 53
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
db_getmetatable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT db_getregistry
_TEXT	SEGMENT
L$ = 48
db_getregistry PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 41
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 42
  00004	ba d8 b9 f0 ff	 mov	 edx, -1001000		; fffffffffff0b9d8H
  00009	e8 00 00 00 00	 call	 lua_pushvalue
; Line 43
  0000e	b8 01 00 00 00	 mov	 eax, 1
; Line 44
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
db_getregistry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT checkstack
_TEXT	SEGMENT
L$ = 48
L1$ = 56
n$ = 64
checkstack PROC						; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 36
  00000	48 3b ca	 cmp	 rcx, rdx
  00003	74 2e		 je	 SHORT $LN4@checkstack
  00005	53		 push	 rbx
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 35
  0000a	48 8b c2	 mov	 rax, rdx
  0000d	48 8b d9	 mov	 rbx, rcx
; Line 36
  00010	41 8b d0	 mov	 edx, r8d
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 lua_checkstack
  0001b	85 c0		 test	 eax, eax
  0001d	75 0f		 jne	 SHORT $LN1@checkstack
; Line 37
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EODJGPIM@stack?5overflow?$AA@
  00026	48 8b cb	 mov	 rcx, rbx
  00029	e8 00 00 00 00	 call	 luaL_error
$LN1@checkstack:
; Line 38
  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
$LN4@checkstack:
  00033	c3		 ret	 0
checkstack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT luaopen_debug
_TEXT	SEGMENT
L$ = 48
luaopen_debug PROC					; COMDAT
; File f:\0\luaspq-1.1\luaspq-1.1\src\ldblib.c
; Line 452
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 453
  00006	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@405bc00000000000
  0000e	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00014	48 8b d9	 mov	 rbx, rcx
  00017	e8 00 00 00 00	 call	 luaL_checkversion_
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	44 8d 42 10	 lea	 r8d, QWORD PTR [rdx+16]
  00025	e8 00 00 00 00	 call	 lua_createtable
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:dblib
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 luaL_setfuncs
; Line 454
  0003c	b8 01 00 00 00	 mov	 eax, 1
; Line 455
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5b		 pop	 rbx
  00046	c3		 ret	 0
luaopen_debug ENDP
_TEXT	ENDS
END
